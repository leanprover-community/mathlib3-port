import Mathbin.Data.Fin.Tuple 
import Mathbin.Data.Real.Basic 
import Mathbin.Combinatorics.Pigeonhole 
import Mathbin.Algebra.Order.EuclideanAbsoluteValue

/-!
# Admissible absolute values
This file defines a structure `absolute_value.is_admissible` which we use to show the class number
of the ring of integers of a global field is finite.

## Main definitions

 * `absolute_value.is_admissible abv` states the absolute value `abv : R ‚Üí ‚Ñ§`
   respects the Euclidean domain structure on `R`, and that a large enough set
   of elements of `R^n` contains a pair of elements whose remainders are
   pointwise close together.

## Main results

 * `absolute_value.abs_is_admissible` shows the "standard" absolute value on `‚Ñ§`,
   mapping negative `x` to `-x`, is admissible.
 * `polynomial.card_pow_degree_is_admissible` shows `card_pow_degree`,
   mapping `p : polynomial ùîΩ_q` to `q ^ degree p`, is admissible
-/


local infixl:50 " ‚â∫ " => EuclideanDomain.R

namespace AbsoluteValue

variable{R : Type _}[EuclideanDomain R]

variable(abv : AbsoluteValue R ‚Ñ§)

/-- An absolute value `R ‚Üí ‚Ñ§` is admissible if it respects the Euclidean domain
structure and a large enough set of elements in `R^n` will contain a pair of
elements whose remainders are pointwise close together. -/
structure is_admissible extends is_euclidean abv where 
  card : ‚Ñù ‚Üí ‚Ñï 
  exists_partition' :
  ‚àÄ (n : ‚Ñï) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) {b : R} (hb : b ‚â† 0) (A : Fin‚Çì n ‚Üí R),
    ‚àÉ t : Fin‚Çì n ‚Üí Fin‚Çì (card Œµ), ‚àÄ i‚ÇÄ i‚ÇÅ, t i‚ÇÄ = t i‚ÇÅ ‚Üí (abv (A i‚ÇÅ % b - A i‚ÇÄ % b) : ‚Ñù) < abv b ‚Ä¢ Œµ

attribute [protected] is_admissible.card

namespace IsAdmissible

variable{abv}

/-- For all `Œµ > 0` and finite families `A`, we can partition the remainders of `A` mod `b`
into `abv.card Œµ` sets, such that all elements in each part of remainders are close together. -/
theorem exists_partition {Œπ : Type _} [Fintype Œπ] {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) {b : R} (hb : b ‚â† 0) (A : Œπ ‚Üí R)
  (h : abv.is_admissible) :
  ‚àÉ t : Œπ ‚Üí Fin‚Çì (h.card Œµ), ‚àÄ i‚ÇÄ i‚ÇÅ, t i‚ÇÄ = t i‚ÇÅ ‚Üí (abv (A i‚ÇÅ % b - A i‚ÇÄ % b) : ‚Ñù) < abv b ‚Ä¢ Œµ :=
  by 
    let e := Fintype.equivFin Œπ 
    obtain ‚ü®t, ht‚ü© := h.exists_partition' (Fintype.card Œπ) hŒµ hb (A ‚àò e.symm)
    refine' ‚ü®t ‚àò e, fun i‚ÇÄ i‚ÇÅ h => _‚ü©
    convert ht (e i‚ÇÄ) (e i‚ÇÅ) h <;> simp only [e.symm_apply_apply]

-- error in NumberTheory.ClassNumber.AdmissibleAbsoluteValue: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
/-- Any large enough family of vectors in `R^n` has a pair of elements
whose remainders are close together, pointwise. -/
theorem exists_approx_aux
(n : expr‚Ñï())
(h : abv.is_admissible) : ‚àÄ
{Œµ : expr‚Ñù()}
(hŒµ : ¬´expr < ¬ª(0, Œµ))
{b : R}
(hb : ¬´expr ‚â† ¬ª(b, 0))
(A : fin ¬´expr ^ ¬ª(h.card Œµ, n).succ ‚Üí fin n ‚Üí R), ¬´expr‚àÉ , ¬ª((i‚ÇÄ
  i‚ÇÅ), ¬´expr ‚àß ¬ª(¬´expr ‚â† ¬ª(i‚ÇÄ, i‚ÇÅ), ‚àÄ
  k, ¬´expr < ¬ª((abv ¬´expr - ¬ª(¬´expr % ¬ª(A i‚ÇÅ k, b), ¬´expr % ¬ª(A i‚ÇÄ k, b)) : expr‚Ñù()), ¬´expr ‚Ä¢ ¬ª(abv b, Œµ)))) :=
begin
  haveI [] [] [":=", expr classical.dec_eq R],
  induction [expr n] [] ["with", ident n, ident ih] [],
  { intros [ident Œµ, ident hŒµ, ident b, ident hb, ident A],
    refine [expr ‚ü®0, 1, _, _‚ü©],
    { simp [] [] [] [] [] [] },
    rintros ["‚ü®", ident i, ",", "‚ü®", "‚ü©", "‚ü©"] },
  intros [ident Œµ, ident hŒµ, ident b, ident hb, ident A],
  set [] [ident M] [] [":="] [expr h.card Œµ] ["with", ident hM],
  obtain ["‚ü®", ident s, ",", ident s_inj, ",", ident hs, "‚ü©", ":", expr ¬´expr‚àÉ , ¬ª((s : fin ¬´expr ^ ¬ª(M, n).succ ‚Üí fin ¬´expr ^ ¬ª(M, n.succ).succ), ¬´expr ‚àß ¬ª(function.injective s, ‚àÄ
     i‚ÇÄ
     i‚ÇÅ, ¬´expr < ¬ª((abv ¬´expr - ¬ª(¬´expr % ¬ª(A (s i‚ÇÅ) 0, b), ¬´expr % ¬ª(A (s i‚ÇÄ) 0, b)) : expr‚Ñù()), ¬´expr ‚Ä¢ ¬ª(abv b, Œµ))))],
  { obtain ["‚ü®", ident t, ",", ident ht, "‚ü©", ":", expr ¬´expr‚àÉ , ¬ª((t : fin ¬´expr ^ ¬ª(M, n.succ).succ ‚Üí fin M), ‚àÄ
      i‚ÇÄ
      i‚ÇÅ, ¬´expr = ¬ª(t i‚ÇÄ, t i‚ÇÅ) ‚Üí ¬´expr < ¬ª((abv ¬´expr - ¬ª(¬´expr % ¬ª(A i‚ÇÅ 0, b), ¬´expr % ¬ª(A i‚ÇÄ 0, b)) : expr‚Ñù()), ¬´expr ‚Ä¢ ¬ª(abv b, Œµ))), ":=", expr h.exists_partition hŒµ hb (Œª
      x, A x 0)],
    obtain ["‚ü®", ident s, ",", ident hs, "‚ü©", ":=", expr @fintype.exists_lt_card_fiber_of_mul_lt_card _ _ _ _ _ t ¬´expr ^ ¬ª(M, n) (by simpa [] [] ["only"] ["[", expr fintype.card_fin, ",", expr pow_succ, "]"] [] ["using", expr nat.lt_succ_self ¬´expr ^ ¬ª(M, n.succ)])],
    refine [expr ‚ü®Œª i, (finset.univ.filter (Œª x, ¬´expr = ¬ª(t x, s))).to_list.nth_le i _, _, Œª i‚ÇÄ i‚ÇÅ, ht _ _ _‚ü©],
    { refine [expr i.2.trans_le _],
      rwa [expr finset.length_to_list] [] },
    { intros [ident i, ident j, ident h],
      ext [] [] [],
      exact [expr list.nodup_iff_nth_le_inj.mp (finset.nodup_to_list _) _ _ _ _ h] },
    have [] [":", expr ‚àÄ
     i
     h, ¬´expr ‚àà ¬ª((finset.univ.filter (Œª
        x, ¬´expr = ¬ª(t x, s))).to_list.nth_le i h, finset.univ.filter (Œª x, ¬´expr = ¬ª(t x, s)))] [],
    { intros [ident i, ident h],
      exact [expr (finset.mem_to_list _).mp (list.nth_le_mem _ _ _)] },
    obtain ["‚ü®", "_", ",", ident h‚ÇÄ, "‚ü©", ":=", expr finset.mem_filter.mp (this i‚ÇÄ _)],
    obtain ["‚ü®", "_", ",", ident h‚ÇÅ, "‚ü©", ":=", expr finset.mem_filter.mp (this i‚ÇÅ _)],
    exact [expr h‚ÇÄ.trans h‚ÇÅ.symm] },
  obtain ["‚ü®", ident k‚ÇÄ, ",", ident k‚ÇÅ, ",", ident hk, ",", ident h, "‚ü©", ":=", expr ih hŒµ hb (Œª
    x, fin.tail (A (s x)))],
  refine [expr ‚ü®s k‚ÇÄ, s k‚ÇÅ, Œª h, hk (s_inj h), Œª i, fin.cases _ (Œª i, _) i‚ü©],
  { exact [expr hs k‚ÇÄ k‚ÇÅ] },
  { exact [expr h i] }
end

/-- Any large enough family of vectors in `R^Œπ` has a pair of elements
whose remainders are close together, pointwise. -/
theorem exists_approx {Œπ : Type _} [Fintype Œπ] {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) {b : R} (hb : b ‚â† 0) (h : abv.is_admissible)
  (A : Fin‚Çì (h.card Œµ ^ Fintype.card Œπ).succ ‚Üí Œπ ‚Üí R) :
  ‚àÉ i‚ÇÄ i‚ÇÅ, i‚ÇÄ ‚â† i‚ÇÅ ‚àß ‚àÄ k, (abv (A i‚ÇÅ k % b - A i‚ÇÄ k % b) : ‚Ñù) < abv b ‚Ä¢ Œµ :=
  by 
    let e := Fintype.equivFin Œπ 
    obtain ‚ü®i‚ÇÄ, i‚ÇÅ, ne, h‚ü© := h.exists_approx_aux (Fintype.card Œπ) hŒµ hb fun x y => A x (e.symm y)
    refine' ‚ü®i‚ÇÄ, i‚ÇÅ, Ne, fun k => _‚ü©
    convert h (e k) <;> simp only [e.symm_apply_apply]

end IsAdmissible

end AbsoluteValue

