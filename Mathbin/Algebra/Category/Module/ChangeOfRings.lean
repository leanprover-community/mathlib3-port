/-
Copyright (c) 2022 Jujian Zhang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jujian Zhang
-/
import Mathbin.Algebra.Category.Module.Basic
import Mathbin.RingTheory.TensorProduct

/-!
# Change Of Rings

## Main definitions

* `category_theory.Module.restrict_scalars`: given rings `R, S` and a ring homomorphism `R ‚ü∂ S`,
  then `restrict_scalars : Module S ‚•§ Module R` is defined by `M ‚Ü¶ M` where `M : S-module` is seen
  as `R-module` by `r ‚Ä¢ m := f r ‚Ä¢ m` and `S`-linear map `l : M ‚ü∂ M'` is `R`-linear as well.

* `category_theory.Module.extend_scalars`: given **commutative** rings `R, S` and ring homomorphism
  `f : R ‚ü∂ S`, then `extend_scalars : Module R ‚•§ Module S` is defined by `M ‚Ü¶ S ‚®Ç M` where the
  module structure is defined by `s ‚Ä¢ (s' ‚äó m) := (s * s') ‚äó m` and `R`-linear map `l : M ‚ü∂ M'`
  is sent to `S`-linear map `s ‚äó m ‚Ü¶ s ‚äó l m : S ‚®Ç M ‚ü∂ S ‚®Ç M'`.

## List of notations
Let `R, S` be rings and `f : R ‚Üí+* S`
* if `M` is an `R`-module, `s : S` and `m : M`, then `s ‚äó‚Çú[R, f] m` is the pure tensor
  `s ‚äó m : S ‚äó[R, f] M`.
-/


namespace CategoryTheory.Module

universe v u‚ÇÅ u‚ÇÇ

namespace RestrictScalars

variable {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [Ring‚Çì R] [Ring‚Çì S] (f : R ‚Üí+* S)

variable (M : ModuleCat.{v} S)

/-- Any `S`-module M is also an `R`-module via a ring homomorphism `f : R ‚ü∂ S` by defining
    `r ‚Ä¢ m := f r ‚Ä¢ m` (`module.comp_hom`). This is called restriction of scalars. -/
def obj' : ModuleCat R where
  Carrier := M
  isModule := Module.compHom M f

/-- Given an `S`-linear map `g : M ‚Üí M'` between `S`-modules, `g` is also `R`-linear between `M` and
`M'` by means of restriction of scalars.
-/
def map' {M M' : ModuleCat.{v} S} (g : M ‚ü∂ M') : obj' f M ‚ü∂ obj' f M' :=
  { g with map_smul' := fun r => g.map_smul (f r) }

end RestrictScalars

/-- The restriction of scalars operation is functorial. For any `f : R ‚Üí+* S` a ring homomorphism,
* an `S`-module `M` can be considered as `R`-module by `r ‚Ä¢ m = f r ‚Ä¢ m`
* an `S`-linear map is also `R`-linear
-/
def restrictScalars {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [Ring‚Çì R] [Ring‚Çì S] (f : R ‚Üí+* S) :
    ModuleCat.{v} S ‚•§ ModuleCat.{v} R where
  obj := RestrictScalars.obj' f
  map := fun _ _ => RestrictScalars.map' f
  map_id' := fun _ => LinearMap.ext fun m => rfl
  map_comp' := fun _ _ _ g h => LinearMap.ext fun m => rfl

@[simp]
theorem restrictScalars.map_apply {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [Ring‚Çì R] [Ring‚Çì S] (f : R ‚Üí+* S) {M M' : ModuleCat.{v} S}
    (g : M ‚ü∂ M') (x) : (restrictScalars f).map g x = g x :=
  rfl

@[simp]
theorem restrictScalars.smul_def {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [Ring‚Çì R] [Ring‚Çì S] (f : R ‚Üí+* S) {M : ModuleCat.{v} S}
    (r : R) (m : (restrictScalars f).obj M) : r ‚Ä¢ m = (f r ‚Ä¢ m : M) :=
  rfl

theorem restrictScalars.smul_def' {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [Ring‚Çì R] [Ring‚Çì S] (f : R ‚Üí+* S) {M : ModuleCat.{v} S}
    (r : R) (m : M) : (r ‚Ä¢ m : (restrictScalars f).obj M) = (f r ‚Ä¢ m : M) :=
  rfl

instance (priority := 100) smul_comm_class_mk {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [Ring‚Çì R] [CommRing‚Çì S] (f : R ‚Üí+* S)
    (M : Type v) [AddCommGroup‚Çì M] [Module S M] :
    @SmulCommClass R S M (RestrictScalars.obj' f (ModuleCat.mk M)).isModule.toHasSmul
      _ where smul_comm := fun r s m => (by simp [‚Üê mul_smul, mul_comm] : f r ‚Ä¢ s ‚Ä¢ m = s ‚Ä¢ f r ‚Ä¢ m)

namespace ExtendScalars

open TensorProduct

variable {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [CommRing‚Çì R] [CommRing‚Çì S] (f : R ‚Üí+* S)

section Unbundled

variable (M : Type v) [AddCommMonoid‚Çì M] [Module R M]

-- mathport name: ¬´expr ‚äó‚Çú[ , ] ¬ª
-- This notation is necessary because we need to reason about `s ‚äó‚Çú m` where `s : S` and `m : M`;
-- without this notation, one need to work with `s : (restrict_scalars f).obj ‚ü®S‚ü©`.
localized [ChangeOfRings] notation s "‚äó‚Çú[" R "," f "]" m => @TensorProduct.tmul R _ _ _ _ _ (Module.compHom _ f) _ s m

end Unbundled

open ChangeOfRings

variable (M : ModuleCat.{v} R)

/-- Extension of scalars turn an `R`-module into `S`-module by M ‚Ü¶ S ‚®Ç M
-/
def obj' : ModuleCat S :=
  ‚ü®TensorProduct R ((restrictScalars f).obj ‚ü®S‚ü©) M‚ü©

/-- Extension of scalars is a functor where an `R`-module `M` is sent to `S ‚äó M` and
`l : M1 ‚ü∂ M2` is sent to `s ‚äó m ‚Ü¶ s ‚äó l m`
-/
def map' {M1 M2 : ModuleCat.{v} R} (l : M1 ‚ü∂ M2) : obj' f M1 ‚ü∂ obj' f M2 :=
  by-- The "by apply" part makes this require 75% fewer heartbeats to process (#16371).
  apply @LinearMap.baseChange R S M1 M2 _ _ ((algebraMap S _).comp f).toAlgebra _ _ _ _ l

theorem map'_id {M : ModuleCat.{v} R} : map' f (ùüô M) = ùüô _ :=
  LinearMap.ext fun x : obj' f M => by
    dsimp only [map', ModuleCat.id_apply]
    induction' x using TensorProduct.induction_on with _ _ m s ihx ihy
    ¬∑ simp only [map_zero]
      
    ¬∑ rw [LinearMap.base_change_tmul, ModuleCat.id_apply]
      
    ¬∑ rw [map_add, ihx, ihy]
      

theorem map'_comp {M‚ÇÅ M‚ÇÇ M‚ÇÉ : ModuleCat.{v} R} (l‚ÇÅ‚ÇÇ : M‚ÇÅ ‚ü∂ M‚ÇÇ) (l‚ÇÇ‚ÇÉ : M‚ÇÇ ‚ü∂ M‚ÇÉ) :
    map' f (l‚ÇÅ‚ÇÇ ‚â´ l‚ÇÇ‚ÇÉ) = map' f l‚ÇÅ‚ÇÇ ‚â´ map' f l‚ÇÇ‚ÇÉ :=
  LinearMap.ext fun x : obj' f M‚ÇÅ => by
    dsimp only [map']
    induction' x using TensorProduct.induction_on with _ _ x y ihx ihy
    ¬∑ rfl
      
    ¬∑ rfl
      
    ¬∑ simp only [map_add, ihx, ihy]
      

end ExtendScalars

/-- Extension of scalars is a functor where an `R`-module `M` is sent to `S ‚äó M` and
`l : M1 ‚ü∂ M2` is sent to `s ‚äó m ‚Ü¶ s ‚äó l m`
-/
def extendScalars {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [CommRing‚Çì R] [CommRing‚Çì S] (f : R ‚Üí+* S) :
    ModuleCat.{v} R ‚•§ ModuleCat.{max v u‚ÇÇ} S where
  obj := fun M => ExtendScalars.obj' f M
  map := fun M1 M2 l => ExtendScalars.map' f l
  map_id' := fun _ => ExtendScalars.map'_id f
  map_comp' := fun _ _ _ => ExtendScalars.map'_comp f

namespace ExtendScalars

open ChangeOfRings

variable {R : Type u‚ÇÅ} {S : Type u‚ÇÇ} [CommRing‚Çì R] [CommRing‚Çì S] (f : R ‚Üí+* S)

@[simp]
protected theorem smul_tmul {M : ModuleCat.{v} R} (s s' : S) (m : M) :
    s ‚Ä¢ (s'‚äó‚Çú[R,f]m : (extendScalars f).obj M) = (s * s')‚äó‚Çú[R,f]m :=
  rfl

@[simp]
theorem map_tmul {M M' : ModuleCat.{v} R} (g : M ‚ü∂ M') (s : S) (m : M) :
    (extendScalars f).map g (s‚äó‚Çú[R,f]m) = s‚äó‚Çú[R,f]g m :=
  rfl

end ExtendScalars

end CategoryTheory.Module

