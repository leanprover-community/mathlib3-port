/-
Copyright (c) 2022 Scott Morrison. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Scott Morrison

! This file was ported from Lean 3 source module algebra.category.Module.tannaka
! leanprover-community/mathlib commit 9d2f0748e6c50d7a2657c564b1ff2c695b39148d
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Algebra.Category.Module.Basic
import Mathbin.LinearAlgebra.Span

/-!
# Tannaka duality for rings

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

A ring `R` is equivalent to
the endomorphisms of the additive forgetful functor `Module R ⥤ AddCommGroup`.

-/


universe u

open CategoryTheory

/- warning: ring_equiv_End_forget₂ -> ringEquivEndForget₂ is a dubious translation:
lean 3 declaration is
  forall (R : Type.{u1}) [_inst_1 : Ring.{u1} R], RingEquiv.{u1, succ u1} R (CategoryTheory.End.{succ u1, succ u1} (CategoryTheory.AdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.CategoryTheory.preadditive.{u1, u1} R _inst_1) AddCommGroupCat.CategoryTheory.preadditive.{u1}) (CategoryTheory.Category.toCategoryStruct.{succ u1, succ u1} (CategoryTheory.AdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.CategoryTheory.preadditive.{u1, u1} R _inst_1) AddCommGroupCat.CategoryTheory.preadditive.{u1}) (CategoryTheory.AdditiveFunctor.category.{succ u1, u1, u1, succ u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.CategoryTheory.preadditive.{u1, u1} R _inst_1) AddCommGroupCat.CategoryTheory.preadditive.{u1})) (CategoryTheory.AdditiveFunctor.of.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.CategoryTheory.preadditive.{u1, u1} R _inst_1) AddCommGroupCat.CategoryTheory.preadditive.{u1} (CategoryTheory.forget₂.{succ u1, succ u1, u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) (ModuleCat.moduleConcreteCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} AddCommGroupCat.concreteCategory.{u1} (ModuleCat.hasForgetToAddCommGroup.{u1, u1} R _inst_1)) (ModuleCat.forget₂_addCommGroupCat_additive.{u1, u1} R _inst_1))) (Distrib.toHasMul.{u1} R (Ring.toDistrib.{u1} R _inst_1)) (Distrib.toHasAdd.{u1} R (Ring.toDistrib.{u1} R _inst_1)) (CategoryTheory.End.mul.{succ u1, succ u1} (CategoryTheory.AdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.CategoryTheory.preadditive.{u1, u1} R _inst_1) AddCommGroupCat.CategoryTheory.preadditive.{u1}) (CategoryTheory.Category.toCategoryStruct.{succ u1, succ u1} (CategoryTheory.AdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.CategoryTheory.preadditive.{u1, u1} R _inst_1) AddCommGroupCat.CategoryTheory.preadditive.{u1}) (CategoryTheory.AdditiveFunctor.category.{succ u1, u1, u1, succ u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.CategoryTheory.preadditive.{u1, u1} R _inst_1) AddCommGroupCat.CategoryTheory.preadditive.{u1})) (CategoryTheory.AdditiveFunctor.of.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.CategoryTheory.preadditive.{u1, u1} R _inst_1) AddCommGroupCat.CategoryTheory.preadditive.{u1} (CategoryTheory.forget₂.{succ u1, succ u1, u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) (ModuleCat.moduleConcreteCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} AddCommGroupCat.concreteCategory.{u1} (ModuleCat.hasForgetToAddCommGroup.{u1, u1} R _inst_1)) (ModuleCat.forget₂_addCommGroupCat_additive.{u1, u1} R _inst_1))) (Distrib.toHasAdd.{succ u1} (CategoryTheory.End.{succ u1, succ u1} (CategoryTheory.AdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.CategoryTheory.preadditive.{u1, u1} R _inst_1) AddCommGroupCat.CategoryTheory.preadditive.{u1}) (CategoryTheory.Category.toCategoryStruct.{succ u1, succ u1} (CategoryTheory.AdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.CategoryTheory.preadditive.{u1, u1} R _inst_1) AddCommGroupCat.CategoryTheory.preadditive.{u1}) (CategoryTheory.AdditiveFunctor.category.{succ u1, u1, u1, succ u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.CategoryTheory.preadditive.{u1, u1} R _inst_1) AddCommGroupCat.CategoryTheory.preadditive.{u1})) (CategoryTheory.AdditiveFunctor.of.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.CategoryTheory.preadditive.{u1, u1} R _inst_1) AddCommGroupCat.CategoryTheory.preadditive.{u1} (CategoryTheory.forget₂.{succ u1, succ u1, u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) (ModuleCat.moduleConcreteCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} AddCommGroupCat.concreteCategory.{u1} (ModuleCat.hasForgetToAddCommGroup.{u1, u1} R _inst_1)) (ModuleCat.forget₂_addCommGroupCat_additive.{u1, u1} R _inst_1))) (Ring.toDistrib.{succ u1} (CategoryTheory.End.{succ u1, succ u1} (CategoryTheory.AdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.CategoryTheory.preadditive.{u1, u1} R _inst_1) AddCommGroupCat.CategoryTheory.preadditive.{u1}) (CategoryTheory.Category.toCategoryStruct.{succ u1, succ u1} (CategoryTheory.AdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.CategoryTheory.preadditive.{u1, u1} R _inst_1) AddCommGroupCat.CategoryTheory.preadditive.{u1}) (CategoryTheory.AdditiveFunctor.category.{succ u1, u1, u1, succ u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.CategoryTheory.preadditive.{u1, u1} R _inst_1) AddCommGroupCat.CategoryTheory.preadditive.{u1})) (CategoryTheory.AdditiveFunctor.of.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.CategoryTheory.preadditive.{u1, u1} R _inst_1) AddCommGroupCat.CategoryTheory.preadditive.{u1} (CategoryTheory.forget₂.{succ u1, succ u1, u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) (ModuleCat.moduleConcreteCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} AddCommGroupCat.concreteCategory.{u1} (ModuleCat.hasForgetToAddCommGroup.{u1, u1} R _inst_1)) (ModuleCat.forget₂_addCommGroupCat_additive.{u1, u1} R _inst_1))) (CategoryTheory.Preadditive.CategoryTheory.End.ring.{succ u1, succ u1} (CategoryTheory.AdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.CategoryTheory.preadditive.{u1, u1} R _inst_1) AddCommGroupCat.CategoryTheory.preadditive.{u1}) (CategoryTheory.AdditiveFunctor.category.{succ u1, u1, u1, succ u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.CategoryTheory.preadditive.{u1, u1} R _inst_1) AddCommGroupCat.CategoryTheory.preadditive.{u1}) (CategoryTheory.AdditiveFunctor.preadditive.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.CategoryTheory.preadditive.{u1, u1} R _inst_1) AddCommGroupCat.CategoryTheory.preadditive.{u1}) (CategoryTheory.AdditiveFunctor.of.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.CategoryTheory.preadditive.{u1, u1} R _inst_1) AddCommGroupCat.CategoryTheory.preadditive.{u1} (CategoryTheory.forget₂.{succ u1, succ u1, u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) (ModuleCat.moduleConcreteCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} AddCommGroupCat.concreteCategory.{u1} (ModuleCat.hasForgetToAddCommGroup.{u1, u1} R _inst_1)) (ModuleCat.forget₂_addCommGroupCat_additive.{u1, u1} R _inst_1)))))
but is expected to have type
  forall (R : Type.{u1}) [_inst_1 : Ring.{u1} R], RingEquiv.{u1, succ u1} R (CategoryTheory.End.{succ u1, succ u1} (CategoryTheory.AdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1}) (CategoryTheory.Category.toCategoryStruct.{succ u1, succ u1} (CategoryTheory.AdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1}) (CategoryTheory.instCategoryAdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1})) (CategoryTheory.AdditiveFunctor.of.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1} (CategoryTheory.forget₂.{succ u1, succ u1, u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) (ModuleCat.moduleConcreteCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} AddCommGroupCat.concreteCategory.{u1} (ModuleCat.hasForgetToAddCommGroup.{u1, u1} R _inst_1)) (ModuleCat.forget₂_addCommGroupCat_additive.{u1, u1} R _inst_1))) (NonUnitalNonAssocRing.toMul.{u1} R (NonAssocRing.toNonUnitalNonAssocRing.{u1} R (Ring.toNonAssocRing.{u1} R _inst_1))) (CategoryTheory.End.mul.{succ u1, succ u1} (CategoryTheory.AdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1}) (CategoryTheory.Category.toCategoryStruct.{succ u1, succ u1} (CategoryTheory.AdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1}) (CategoryTheory.instCategoryAdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1})) (CategoryTheory.AdditiveFunctor.of.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1} (CategoryTheory.forget₂.{succ u1, succ u1, u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) (ModuleCat.moduleConcreteCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} AddCommGroupCat.concreteCategory.{u1} (ModuleCat.hasForgetToAddCommGroup.{u1, u1} R _inst_1)) (ModuleCat.forget₂_addCommGroupCat_additive.{u1, u1} R _inst_1))) (Distrib.toAdd.{u1} R (NonUnitalNonAssocSemiring.toDistrib.{u1} R (NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.{u1} R (NonAssocRing.toNonUnitalNonAssocRing.{u1} R (Ring.toNonAssocRing.{u1} R _inst_1))))) (Distrib.toAdd.{succ u1} (CategoryTheory.End.{succ u1, succ u1} (CategoryTheory.AdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1}) (CategoryTheory.Category.toCategoryStruct.{succ u1, succ u1} (CategoryTheory.AdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1}) (CategoryTheory.instCategoryAdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1})) (CategoryTheory.AdditiveFunctor.of.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1} (CategoryTheory.forget₂.{succ u1, succ u1, u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) (ModuleCat.moduleConcreteCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} AddCommGroupCat.concreteCategory.{u1} (ModuleCat.hasForgetToAddCommGroup.{u1, u1} R _inst_1)) (ModuleCat.forget₂_addCommGroupCat_additive.{u1, u1} R _inst_1))) (NonUnitalNonAssocSemiring.toDistrib.{succ u1} (CategoryTheory.End.{succ u1, succ u1} (CategoryTheory.AdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1}) (CategoryTheory.Category.toCategoryStruct.{succ u1, succ u1} (CategoryTheory.AdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1}) (CategoryTheory.instCategoryAdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1})) (CategoryTheory.AdditiveFunctor.of.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1} (CategoryTheory.forget₂.{succ u1, succ u1, u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) (ModuleCat.moduleConcreteCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} AddCommGroupCat.concreteCategory.{u1} (ModuleCat.hasForgetToAddCommGroup.{u1, u1} R _inst_1)) (ModuleCat.forget₂_addCommGroupCat_additive.{u1, u1} R _inst_1))) (NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.{succ u1} (CategoryTheory.End.{succ u1, succ u1} (CategoryTheory.AdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1}) (CategoryTheory.Category.toCategoryStruct.{succ u1, succ u1} (CategoryTheory.AdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1}) (CategoryTheory.instCategoryAdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1})) (CategoryTheory.AdditiveFunctor.of.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1} (CategoryTheory.forget₂.{succ u1, succ u1, u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) (ModuleCat.moduleConcreteCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} AddCommGroupCat.concreteCategory.{u1} (ModuleCat.hasForgetToAddCommGroup.{u1, u1} R _inst_1)) (ModuleCat.forget₂_addCommGroupCat_additive.{u1, u1} R _inst_1))) (NonAssocRing.toNonUnitalNonAssocRing.{succ u1} (CategoryTheory.End.{succ u1, succ u1} (CategoryTheory.AdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1}) (CategoryTheory.Category.toCategoryStruct.{succ u1, succ u1} (CategoryTheory.AdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1}) (CategoryTheory.instCategoryAdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1})) (CategoryTheory.AdditiveFunctor.of.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1} (CategoryTheory.forget₂.{succ u1, succ u1, u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) (ModuleCat.moduleConcreteCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} AddCommGroupCat.concreteCategory.{u1} (ModuleCat.hasForgetToAddCommGroup.{u1, u1} R _inst_1)) (ModuleCat.forget₂_addCommGroupCat_additive.{u1, u1} R _inst_1))) (Ring.toNonAssocRing.{succ u1} (CategoryTheory.End.{succ u1, succ u1} (CategoryTheory.AdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1}) (CategoryTheory.Category.toCategoryStruct.{succ u1, succ u1} (CategoryTheory.AdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1}) (CategoryTheory.instCategoryAdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1})) (CategoryTheory.AdditiveFunctor.of.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1} (CategoryTheory.forget₂.{succ u1, succ u1, u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) (ModuleCat.moduleConcreteCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} AddCommGroupCat.concreteCategory.{u1} (ModuleCat.hasForgetToAddCommGroup.{u1, u1} R _inst_1)) (ModuleCat.forget₂_addCommGroupCat_additive.{u1, u1} R _inst_1))) (CategoryTheory.Preadditive.instRingEndToCategoryStruct.{succ u1, succ u1} (CategoryTheory.AdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1}) (CategoryTheory.instCategoryAdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1}) (CategoryTheory.instPreadditiveAdditiveFunctorInstCategoryAdditiveFunctor.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1}) (CategoryTheory.AdditiveFunctor.of.{succ u1, succ u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} (ModuleCat.instPreadditiveModuleCatModuleCategory.{u1, u1} R _inst_1) AddCommGroupCat.instPreadditiveAddCommGroupCatLargeCategory.{u1} (CategoryTheory.forget₂.{succ u1, succ u1, u1, u1, u1} (ModuleCat.{u1, u1} R _inst_1) AddCommGroupCat.{u1} (ModuleCat.moduleCategory.{u1, u1} R _inst_1) (ModuleCat.moduleConcreteCategory.{u1, u1} R _inst_1) AddCommGroupCat.largeCategory.{u1} AddCommGroupCat.concreteCategory.{u1} (ModuleCat.hasForgetToAddCommGroup.{u1, u1} R _inst_1)) (ModuleCat.forget₂_addCommGroupCat_additive.{u1, u1} R _inst_1))))))))
Case conversion may be inaccurate. Consider using '#align ring_equiv_End_forget₂ ringEquivEndForget₂ₓ'. -/
/-- An ingredient of Tannaka duality for rings:
A ring `R` is equivalent to
the endomorphisms of the additive forgetful functor `Module R ⥤ AddCommGroup`.
-/
def ringEquivEndForget₂ (R : Type u) [Ring R] :
    R ≃+* End (AdditiveFunctor.of (forget₂ (ModuleCat.{u} R) AddCommGroupCat.{u}))
    where
  toFun r :=
    { app := fun M => by apply DistribMulAction.toAddMonoidHom M r
      naturality' := fun M N f => by
        ext
        exact (f.map_smul _ _).symm }
  invFun φ := φ.app (ModuleCat.of R R) (1 : R)
  left_inv := by
    intro r
    simp
  right_inv := by
    intro φ; ext (M x)
    simp only [DistribMulAction.toAddMonoidHom_apply]
    have w :=
      AddMonoidHom.congr_fun (φ.naturality (ModuleCat.asHomRight (LinearMap.toSpanSingleton R M x)))
        (1 : R)
    convert w.symm
    exact (one_smul _ _).symm
  map_add' := by
    intros
    ext
    simp [add_smul]
  map_mul' := by
    intros
    ext
    simpa using mul_smul _ _ _
#align ring_equiv_End_forget₂ ringEquivEndForget₂

