/-
Copyright (c) 2018 Kenny Lau. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kenny Lau, Yury Kudryashov

! This file was ported from Lean 3 source module algebra.algebra.subalgebra.basic
! leanprover-community/mathlib commit c4658a649d216f57e99621708b09dcb3dcccbd23
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Algebra.Algebra.Basic
import Mathbin.Data.Set.UnionLift
import Mathbin.LinearAlgebra.Finsupp
import Mathbin.RingTheory.Ideal.Operations

/-!
# Subalgebras over Commutative Semiring

In this file we define `subalgebra`s and the usual operations on them (`map`, `comap`).

More lemmas about `adjoin` can be found in `ring_theory.adjoin`.
-/


universe u u' v w w'

open BigOperators

#print Subalgebra /-
/-- A subalgebra is a sub(semi)ring that includes the range of `algebra_map`. -/
structure Subalgebra (R : Type u) (A : Type v) [CommSemiring R] [Semiring A] [Algebra R A] extends
  Subsemiring A : Type v where
  algebraMap_mem' : ∀ r, algebraMap R A r ∈ carrier
  zero_mem' := (algebraMap R A).map_zero ▸ algebra_map_mem' 0
  one_mem' := (algebraMap R A).map_one ▸ algebra_map_mem' 1
#align subalgebra Subalgebra
-/

/-- Reinterpret a `subalgebra` as a `subsemiring`. -/
add_decl_doc Subalgebra.toSubsemiring

namespace Subalgebra

variable {R' : Type u'} {R : Type u} {A : Type v} {B : Type w} {C : Type w'}

variable [CommSemiring R]

variable [Semiring A] [Algebra R A] [Semiring B] [Algebra R B] [Semiring C] [Algebra R C]

include R

instance : SetLike (Subalgebra R A) A
    where
  coe := Subalgebra.carrier
  coe_injective' p q h := by cases p <;> cases q <;> congr

instance : SubsemiringClass (Subalgebra R A) A
    where
  add_mem := add_mem'
  mul_mem := mul_mem'
  one_mem := one_mem'
  zero_mem := zero_mem'

/- warning: subalgebra.mem_carrier -> Subalgebra.mem_carrier is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {s : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {x : A}, Iff (Membership.Mem.{u2, u2} A (Set.{u2} A) (Set.hasMem.{u2} A) x (Subalgebra.carrier.{u1, u2} R A _inst_1 _inst_2 _inst_3 s)) (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x s)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {s : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {x : A}, Iff (Membership.mem.{u2, u2} A (Set.{u2} A) (Set.instMembershipSet.{u2} A) x (Subsemigroup.carrier.{u2} A (MulOneClass.toMul.{u2} A (MulZeroOneClass.toMulOneClass.{u2} A (NonAssocSemiring.toMulZeroOneClass.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (Submonoid.toSubsemigroup.{u2} A (MulZeroOneClass.toMulOneClass.{u2} A (NonAssocSemiring.toMulZeroOneClass.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Subsemiring.toSubmonoid.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 s))))) (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x s)
Case conversion may be inaccurate. Consider using '#align subalgebra.mem_carrier Subalgebra.mem_carrierₓ'. -/
@[simp]
theorem mem_carrier {s : Subalgebra R A} {x : A} : x ∈ s.carrier ↔ x ∈ s :=
  Iff.rfl
#align subalgebra.mem_carrier Subalgebra.mem_carrier

/- warning: subalgebra.ext -> Subalgebra.ext is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3}, (forall (x : A), Iff (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S) (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) -> (Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S T)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3}, (forall (x : A), Iff (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S) (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) -> (Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S T)
Case conversion may be inaccurate. Consider using '#align subalgebra.ext Subalgebra.extₓ'. -/
@[ext]
theorem ext {S T : Subalgebra R A} (h : ∀ x : A, x ∈ S ↔ x ∈ T) : S = T :=
  SetLike.ext h
#align subalgebra.ext Subalgebra.ext

/- warning: subalgebra.mem_to_subsemiring -> Subalgebra.mem_toSubsemiring is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {x : A}, Iff (Membership.Mem.{u2, u2} A (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (SetLike.hasMem.{u2, u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) A (Subsemiring.setLike.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) x (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)) (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {x : A}, Iff (Membership.mem.{u2, u2} A (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (SetLike.instMembership.{u2, u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) A (Subsemiring.instSetLikeSubsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) x (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)) (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)
Case conversion may be inaccurate. Consider using '#align subalgebra.mem_to_subsemiring Subalgebra.mem_toSubsemiringₓ'. -/
@[simp]
theorem mem_toSubsemiring {S : Subalgebra R A} {x} : x ∈ S.toSubsemiring ↔ x ∈ S :=
  Iff.rfl
#align subalgebra.mem_to_subsemiring Subalgebra.mem_toSubsemiring

/- warning: subalgebra.coe_to_subsemiring -> Subalgebra.coe_toSubsemiring is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), Eq.{succ u2} (Set.{u2} A) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) A (Subsemiring.setLike.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), Eq.{succ u2} (Set.{u2} A) (SetLike.coe.{u2, u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) A (Subsemiring.instSetLikeSubsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)) (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S)
Case conversion may be inaccurate. Consider using '#align subalgebra.coe_to_subsemiring Subalgebra.coe_toSubsemiringₓ'. -/
@[simp]
theorem coe_toSubsemiring (S : Subalgebra R A) : (↑S.toSubsemiring : Set A) = S :=
  rfl
#align subalgebra.coe_to_subsemiring Subalgebra.coe_toSubsemiring

#print Subalgebra.toSubsemiring_injective /-
theorem toSubsemiring_injective :
    Function.Injective (toSubsemiring : Subalgebra R A → Subsemiring A) := fun S T h =>
  ext fun x => by rw [← mem_to_subsemiring, ← mem_to_subsemiring, h]
#align subalgebra.to_subsemiring_injective Subalgebra.toSubsemiring_injective
-/

#print Subalgebra.toSubsemiring_inj /-
theorem toSubsemiring_inj {S U : Subalgebra R A} : S.toSubsemiring = U.toSubsemiring ↔ S = U :=
  toSubsemiring_injective.eq_iff
#align subalgebra.to_subsemiring_inj Subalgebra.toSubsemiring_inj
-/

/- warning: subalgebra.copy -> Subalgebra.copy is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (s : Set.{u2} A), (Eq.{succ u2} (Set.{u2} A) s ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) S)) -> (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (s : Set.{u2} A), (Eq.{succ u2} (Set.{u2} A) s (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S)) -> (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)
Case conversion may be inaccurate. Consider using '#align subalgebra.copy Subalgebra.copyₓ'. -/
/-- Copy of a subalgebra with a new `carrier` equal to the old one. Useful to fix definitional
equalities. -/
protected def copy (S : Subalgebra R A) (s : Set A) (hs : s = ↑S) : Subalgebra R A
    where
  carrier := s
  add_mem' _ _ := hs.symm ▸ S.add_mem'
  mul_mem' _ _ := hs.symm ▸ S.mul_mem'
  algebraMap_mem' := hs.symm ▸ S.algebraMap_mem'
#align subalgebra.copy Subalgebra.copy

/- warning: subalgebra.coe_copy -> Subalgebra.coe_copy is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (s : Set.{u2} A) (hs : Eq.{succ u2} (Set.{u2} A) s ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) S)), Eq.{succ u2} (Set.{u2} A) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Subalgebra.copy.{u1, u2} R A _inst_1 _inst_2 _inst_3 S s hs)) s
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (s : Set.{u2} A) (hs : Eq.{succ u2} (Set.{u2} A) s (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S)), Eq.{succ u2} (Set.{u2} A) (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Subalgebra.copy.{u1, u2} R A _inst_1 _inst_2 _inst_3 S s hs)) s
Case conversion may be inaccurate. Consider using '#align subalgebra.coe_copy Subalgebra.coe_copyₓ'. -/
@[simp]
theorem coe_copy (S : Subalgebra R A) (s : Set A) (hs : s = ↑S) : (S.copy s hs : Set A) = s :=
  rfl
#align subalgebra.coe_copy Subalgebra.coe_copy

/- warning: subalgebra.copy_eq -> Subalgebra.copy_eq is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (s : Set.{u2} A) (hs : Eq.{succ u2} (Set.{u2} A) s ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) S)), Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Subalgebra.copy.{u1, u2} R A _inst_1 _inst_2 _inst_3 S s hs) S
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (s : Set.{u2} A) (hs : Eq.{succ u2} (Set.{u2} A) s (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S)), Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Subalgebra.copy.{u1, u2} R A _inst_1 _inst_2 _inst_3 S s hs) S
Case conversion may be inaccurate. Consider using '#align subalgebra.copy_eq Subalgebra.copy_eqₓ'. -/
theorem copy_eq (S : Subalgebra R A) (s : Set A) (hs : s = ↑S) : S.copy s hs = S :=
  SetLike.coe_injective hs
#align subalgebra.copy_eq Subalgebra.copy_eq

variable (S : Subalgebra R A)

/- warning: subalgebra.algebra_map_mem -> Subalgebra.algebraMap_mem is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (r : R), Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (coeFn.{max (succ u1) (succ u2), max (succ u1) (succ u2)} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (fun (_x : RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) => R -> A) (RingHom.hasCoeToFun.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (algebraMap.{u1, u2} R A _inst_1 _inst_2 _inst_3) r) S
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (r : R), Membership.mem.{u2, u2} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R) => A) r) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (FunLike.coe.{max (succ u1) (succ u2), succ u1, succ u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R (fun (_x : R) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R) => A) _x) (MulHomClass.toFunLike.{max u1 u2, u1, u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R A (NonUnitalNonAssocSemiring.toMul.{u1} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (NonUnitalNonAssocSemiring.toMul.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (NonUnitalRingHomClass.toMulHomClass.{max u1 u2, u1, u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (RingHomClass.toNonUnitalRingHomClass.{max u1 u2, u1, u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2) (RingHom.instRingHomClassRingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (algebraMap.{u1, u2} R A _inst_1 _inst_2 _inst_3) r) S
Case conversion may be inaccurate. Consider using '#align subalgebra.algebra_map_mem Subalgebra.algebraMap_memₓ'. -/
theorem algebraMap_mem (r : R) : algebraMap R A r ∈ S :=
  S.algebraMap_mem' r
#align subalgebra.algebra_map_mem Subalgebra.algebraMap_mem

/- warning: subalgebra.srange_le -> Subalgebra.rangeS_le is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), LE.le.{u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Preorder.toLE.{u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (PartialOrder.toPreorder.{u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Subsemiring.completeLattice.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))) (RingHom.rangeS.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2) (algebraMap.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), LE.le.{u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Preorder.toLE.{u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (PartialOrder.toPreorder.{u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Subsemiring.instCompleteLatticeSubsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))) (RingHom.rangeS.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2) (algebraMap.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)
Case conversion may be inaccurate. Consider using '#align subalgebra.srange_le Subalgebra.rangeS_leₓ'. -/
theorem rangeS_le : (algebraMap R A).srange ≤ S.toSubsemiring := fun x ⟨r, hr⟩ =>
  hr ▸ S.algebraMap_mem r
#align subalgebra.srange_le Subalgebra.rangeS_le

/- warning: subalgebra.range_subset -> Subalgebra.range_subset is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), HasSubset.Subset.{u2} (Set.{u2} A) (Set.hasSubset.{u2} A) (Set.range.{u2, succ u1} A R (coeFn.{max (succ u1) (succ u2), max (succ u1) (succ u2)} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (fun (_x : RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) => R -> A) (RingHom.hasCoeToFun.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (algebraMap.{u1, u2} R A _inst_1 _inst_2 _inst_3))) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), HasSubset.Subset.{u2} (Set.{u2} A) (Set.instHasSubsetSet.{u2} A) (Set.range.{u2, succ u1} A R (FunLike.coe.{max (succ u1) (succ u2), succ u1, succ u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R (fun (_x : R) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R) => A) _x) (MulHomClass.toFunLike.{max u1 u2, u1, u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R A (NonUnitalNonAssocSemiring.toMul.{u1} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (NonUnitalNonAssocSemiring.toMul.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (NonUnitalRingHomClass.toMulHomClass.{max u1 u2, u1, u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (RingHomClass.toNonUnitalRingHomClass.{max u1 u2, u1, u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2) (RingHom.instRingHomClassRingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (algebraMap.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S)
Case conversion may be inaccurate. Consider using '#align subalgebra.range_subset Subalgebra.range_subsetₓ'. -/
theorem range_subset : Set.range (algebraMap R A) ⊆ S := fun x ⟨r, hr⟩ => hr ▸ S.algebraMap_mem r
#align subalgebra.range_subset Subalgebra.range_subset

/- warning: subalgebra.range_le -> Subalgebra.range_le is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), LE.le.{u2} (Set.{u2} A) (Set.hasLe.{u2} A) (Set.range.{u2, succ u1} A R (coeFn.{max (succ u1) (succ u2), max (succ u1) (succ u2)} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (fun (_x : RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) => R -> A) (RingHom.hasCoeToFun.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (algebraMap.{u1, u2} R A _inst_1 _inst_2 _inst_3))) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), LE.le.{u2} (Set.{u2} A) (Set.instLESet.{u2} A) (Set.range.{u2, succ u1} A R (FunLike.coe.{max (succ u1) (succ u2), succ u1, succ u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R (fun (_x : R) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R) => A) _x) (MulHomClass.toFunLike.{max u1 u2, u1, u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R A (NonUnitalNonAssocSemiring.toMul.{u1} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (NonUnitalNonAssocSemiring.toMul.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (NonUnitalRingHomClass.toMulHomClass.{max u1 u2, u1, u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (RingHomClass.toNonUnitalRingHomClass.{max u1 u2, u1, u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2) (RingHom.instRingHomClassRingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (algebraMap.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S)
Case conversion may be inaccurate. Consider using '#align subalgebra.range_le Subalgebra.range_leₓ'. -/
theorem range_le : Set.range (algebraMap R A) ≤ S :=
  S.range_subset
#align subalgebra.range_le Subalgebra.range_le

/- warning: subalgebra.smul_mem -> Subalgebra.smul_mem is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) {x : A}, (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S) -> (forall (r : R), Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (SMul.smul.{u1, u2} R A (SMulZeroClass.toHasSmul.{u1, u2} R A (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))) (SMulWithZero.toSmulZeroClass.{u1, u2} R A (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))))) (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u1, u2} R A (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))) (Module.toMulActionWithZero.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) r x) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) {x : A}, (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S) -> (forall (r : R), Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (HSMul.hSMul.{u1, u2, u2} R A A (instHSMul.{u1, u2} R A (Algebra.toSMul.{u1, u2} R A _inst_1 _inst_2 _inst_3)) r x) S)
Case conversion may be inaccurate. Consider using '#align subalgebra.smul_mem Subalgebra.smul_memₓ'. -/
theorem smul_mem {x : A} (hx : x ∈ S) (r : R) : r • x ∈ S :=
  (Algebra.smul_def r x).symm ▸ mul_mem (S.algebraMap_mem r) hx
#align subalgebra.smul_mem Subalgebra.smul_mem

/- warning: subalgebra.one_mem -> Subalgebra.one_mem is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (OfNat.ofNat.{u2} A 1 (OfNat.mk.{u2} A 1 (One.one.{u2} A (AddMonoidWithOne.toOne.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))))) S
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (OfNat.ofNat.{u2} A 1 (One.toOfNat1.{u2} A (Semiring.toOne.{u2} A _inst_2))) S
Case conversion may be inaccurate. Consider using '#align subalgebra.one_mem Subalgebra.one_memₓ'. -/
protected theorem one_mem : (1 : A) ∈ S :=
  one_mem S
#align subalgebra.one_mem Subalgebra.one_mem

/- warning: subalgebra.mul_mem -> Subalgebra.mul_mem is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) {x : A} {y : A}, (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S) -> (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) y S) -> (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (HMul.hMul.{u2, u2, u2} A A A (instHMul.{u2} A (Distrib.toHasMul.{u2} A (NonUnitalNonAssocSemiring.toDistrib.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) x y) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) {x : A} {y : A}, (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S) -> (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) y S) -> (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (HMul.hMul.{u2, u2, u2} A A A (instHMul.{u2} A (NonUnitalNonAssocSemiring.toMul.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) x y) S)
Case conversion may be inaccurate. Consider using '#align subalgebra.mul_mem Subalgebra.mul_memₓ'. -/
protected theorem mul_mem {x y : A} (hx : x ∈ S) (hy : y ∈ S) : x * y ∈ S :=
  mul_mem hx hy
#align subalgebra.mul_mem Subalgebra.mul_mem

/- warning: subalgebra.pow_mem -> Subalgebra.pow_mem is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) {x : A}, (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S) -> (forall (n : Nat), Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (HPow.hPow.{u2, 0, u2} A Nat A (instHPow.{u2, 0} A Nat (Monoid.Pow.{u2} A (MonoidWithZero.toMonoid.{u2} A (Semiring.toMonoidWithZero.{u2} A _inst_2)))) x n) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) {x : A}, (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S) -> (forall (n : Nat), Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (HPow.hPow.{u2, 0, u2} A Nat A (instHPow.{u2, 0} A Nat (Monoid.Pow.{u2} A (MonoidWithZero.toMonoid.{u2} A (Semiring.toMonoidWithZero.{u2} A _inst_2)))) x n) S)
Case conversion may be inaccurate. Consider using '#align subalgebra.pow_mem Subalgebra.pow_memₓ'. -/
protected theorem pow_mem {x : A} (hx : x ∈ S) (n : ℕ) : x ^ n ∈ S :=
  pow_mem hx n
#align subalgebra.pow_mem Subalgebra.pow_mem

/- warning: subalgebra.zero_mem -> Subalgebra.zero_mem is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (OfNat.ofNat.{u2} A 0 (OfNat.mk.{u2} A 0 (Zero.zero.{u2} A (MulZeroClass.toHasZero.{u2} A (NonUnitalNonAssocSemiring.toMulZeroClass.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))))) S
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (OfNat.ofNat.{u2} A 0 (Zero.toOfNat0.{u2} A (MonoidWithZero.toZero.{u2} A (Semiring.toMonoidWithZero.{u2} A _inst_2)))) S
Case conversion may be inaccurate. Consider using '#align subalgebra.zero_mem Subalgebra.zero_memₓ'. -/
protected theorem zero_mem : (0 : A) ∈ S :=
  zero_mem S
#align subalgebra.zero_mem Subalgebra.zero_mem

/- warning: subalgebra.add_mem -> Subalgebra.add_mem is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) {x : A} {y : A}, (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S) -> (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) y S) -> (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (HAdd.hAdd.{u2, u2, u2} A A A (instHAdd.{u2} A (Distrib.toHasAdd.{u2} A (NonUnitalNonAssocSemiring.toDistrib.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) x y) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) {x : A} {y : A}, (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S) -> (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) y S) -> (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (HAdd.hAdd.{u2, u2, u2} A A A (instHAdd.{u2} A (Distrib.toAdd.{u2} A (NonUnitalNonAssocSemiring.toDistrib.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) x y) S)
Case conversion may be inaccurate. Consider using '#align subalgebra.add_mem Subalgebra.add_memₓ'. -/
protected theorem add_mem {x y : A} (hx : x ∈ S) (hy : y ∈ S) : x + y ∈ S :=
  add_mem hx hy
#align subalgebra.add_mem Subalgebra.add_mem

/- warning: subalgebra.nsmul_mem -> Subalgebra.nsmul_mem is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) {x : A}, (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S) -> (forall (n : Nat), Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (SMul.smul.{0, u2} Nat A (AddMonoid.SMul.{u2} A (AddMonoidWithOne.toAddMonoid.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) n x) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) {x : A}, (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S) -> (forall (n : Nat), Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (HSMul.hSMul.{0, u2, u2} Nat A A (instHSMul.{0, u2} Nat A (AddMonoid.SMul.{u2} A (AddMonoidWithOne.toAddMonoid.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))) n x) S)
Case conversion may be inaccurate. Consider using '#align subalgebra.nsmul_mem Subalgebra.nsmul_memₓ'. -/
protected theorem nsmul_mem {x : A} (hx : x ∈ S) (n : ℕ) : n • x ∈ S :=
  nsmul_mem hx n
#align subalgebra.nsmul_mem Subalgebra.nsmul_mem

/- warning: subalgebra.coe_nat_mem -> Subalgebra.coe_nat_mem is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (n : Nat), Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) ((fun (a : Type) (b : Type.{u2}) [self : HasLiftT.{1, succ u2} a b] => self.0) Nat A (HasLiftT.mk.{1, succ u2} Nat A (CoeTCₓ.coe.{1, succ u2} Nat A (Nat.castCoe.{u2} A (AddMonoidWithOne.toNatCast.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))))) n) S
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (n : Nat), Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Nat.cast.{u2} A (Semiring.toNatCast.{u2} A _inst_2) n) S
Case conversion may be inaccurate. Consider using '#align subalgebra.coe_nat_mem Subalgebra.coe_nat_memₓ'. -/
protected theorem coe_nat_mem (n : ℕ) : (n : A) ∈ S :=
  coe_nat_mem S n
#align subalgebra.coe_nat_mem Subalgebra.coe_nat_mem

/- warning: subalgebra.list_prod_mem -> Subalgebra.list_prod_mem is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) {L : List.{u2} A}, (forall (x : A), (Membership.Mem.{u2, u2} A (List.{u2} A) (List.hasMem.{u2} A) x L) -> (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) -> (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (List.prod.{u2} A (Distrib.toHasMul.{u2} A (NonUnitalNonAssocSemiring.toDistrib.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (AddMonoidWithOne.toOne.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) L) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) {L : List.{u2} A}, (forall (x : A), (Membership.mem.{u2, u2} A (List.{u2} A) (List.instMembershipList.{u2} A) x L) -> (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) -> (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (List.prod.{u2} A (NonUnitalNonAssocSemiring.toMul.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Semiring.toOne.{u2} A _inst_2) L) S)
Case conversion may be inaccurate. Consider using '#align subalgebra.list_prod_mem Subalgebra.list_prod_memₓ'. -/
protected theorem list_prod_mem {L : List A} (h : ∀ x ∈ L, x ∈ S) : L.Prod ∈ S :=
  list_prod_mem h
#align subalgebra.list_prod_mem Subalgebra.list_prod_mem

/- warning: subalgebra.list_sum_mem -> Subalgebra.list_sum_mem is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) {L : List.{u2} A}, (forall (x : A), (Membership.Mem.{u2, u2} A (List.{u2} A) (List.hasMem.{u2} A) x L) -> (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) -> (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (List.sum.{u2} A (Distrib.toHasAdd.{u2} A (NonUnitalNonAssocSemiring.toDistrib.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (MulZeroClass.toHasZero.{u2} A (NonUnitalNonAssocSemiring.toMulZeroClass.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) L) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) {L : List.{u2} A}, (forall (x : A), (Membership.mem.{u2, u2} A (List.{u2} A) (List.instMembershipList.{u2} A) x L) -> (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) -> (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (List.sum.{u2} A (Distrib.toAdd.{u2} A (NonUnitalNonAssocSemiring.toDistrib.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (MonoidWithZero.toZero.{u2} A (Semiring.toMonoidWithZero.{u2} A _inst_2)) L) S)
Case conversion may be inaccurate. Consider using '#align subalgebra.list_sum_mem Subalgebra.list_sum_memₓ'. -/
protected theorem list_sum_mem {L : List A} (h : ∀ x ∈ L, x ∈ S) : L.Sum ∈ S :=
  list_sum_mem h
#align subalgebra.list_sum_mem Subalgebra.list_sum_mem

/- warning: subalgebra.multiset_sum_mem -> Subalgebra.multiset_sum_mem is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) {m : Multiset.{u2} A}, (forall (x : A), (Membership.Mem.{u2, u2} A (Multiset.{u2} A) (Multiset.hasMem.{u2} A) x m) -> (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) -> (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Multiset.sum.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) m) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) {m : Multiset.{u2} A}, (forall (x : A), (Membership.mem.{u2, u2} A (Multiset.{u2} A) (Multiset.instMembershipMultiset.{u2} A) x m) -> (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) -> (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Multiset.sum.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) m) S)
Case conversion may be inaccurate. Consider using '#align subalgebra.multiset_sum_mem Subalgebra.multiset_sum_memₓ'. -/
protected theorem multiset_sum_mem {m : Multiset A} (h : ∀ x ∈ m, x ∈ S) : m.Sum ∈ S :=
  multiset_sum_mem m h
#align subalgebra.multiset_sum_mem Subalgebra.multiset_sum_mem

/- warning: subalgebra.sum_mem -> Subalgebra.sum_mem is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) {ι : Type.{u3}} {t : Finset.{u3} ι} {f : ι -> A}, (forall (x : ι), (Membership.Mem.{u3, u3} ι (Finset.{u3} ι) (Finset.hasMem.{u3} ι) x t) -> (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (f x) S)) -> (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Finset.sum.{u2, u3} A ι (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) t (fun (x : ι) => f x)) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) {ι : Type.{u3}} {t : Finset.{u3} ι} {f : ι -> A}, (forall (x : ι), (Membership.mem.{u3, u3} ι (Finset.{u3} ι) (Finset.instMembershipFinset.{u3} ι) x t) -> (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (f x) S)) -> (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Finset.sum.{u2, u3} A ι (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) t (fun (x : ι) => f x)) S)
Case conversion may be inaccurate. Consider using '#align subalgebra.sum_mem Subalgebra.sum_memₓ'. -/
protected theorem sum_mem {ι : Type w} {t : Finset ι} {f : ι → A} (h : ∀ x ∈ t, f x ∈ S) :
    (∑ x in t, f x) ∈ S :=
  sum_mem h
#align subalgebra.sum_mem Subalgebra.sum_mem

/- warning: subalgebra.multiset_prod_mem -> Subalgebra.multiset_prod_mem is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommSemiring.{u1} R] [_inst_9 : CommSemiring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9)] (S : Subalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10) {m : Multiset.{u2} A}, (forall (x : A), (Membership.Mem.{u2, u2} A (Multiset.{u2} A) (Multiset.hasMem.{u2} A) x m) -> (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10)) x S)) -> (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10)) (Multiset.prod.{u2} A (CommSemiring.toCommMonoid.{u2} A _inst_9) m) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommSemiring.{u1} R] [_inst_9 : CommSemiring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9)] (S : Subalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10) {m : Multiset.{u2} A}, (forall (x : A), (Membership.mem.{u2, u2} A (Multiset.{u2} A) (Multiset.instMembershipMultiset.{u2} A) x m) -> (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10)) x S)) -> (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10)) (Multiset.prod.{u2} A (CommSemiring.toCommMonoid.{u2} A _inst_9) m) S)
Case conversion may be inaccurate. Consider using '#align subalgebra.multiset_prod_mem Subalgebra.multiset_prod_memₓ'. -/
protected theorem multiset_prod_mem {R : Type u} {A : Type v} [CommSemiring R] [CommSemiring A]
    [Algebra R A] (S : Subalgebra R A) {m : Multiset A} (h : ∀ x ∈ m, x ∈ S) : m.Prod ∈ S :=
  multiset_prod_mem m h
#align subalgebra.multiset_prod_mem Subalgebra.multiset_prod_mem

/- warning: subalgebra.prod_mem -> Subalgebra.prod_mem is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommSemiring.{u1} R] [_inst_9 : CommSemiring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9)] (S : Subalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10) {ι : Type.{u3}} {t : Finset.{u3} ι} {f : ι -> A}, (forall (x : ι), (Membership.Mem.{u3, u3} ι (Finset.{u3} ι) (Finset.hasMem.{u3} ι) x t) -> (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10)) (f x) S)) -> (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10)) (Finset.prod.{u2, u3} A ι (CommSemiring.toCommMonoid.{u2} A _inst_9) t (fun (x : ι) => f x)) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommSemiring.{u1} R] [_inst_9 : CommSemiring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9)] (S : Subalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10) {ι : Type.{u3}} {t : Finset.{u3} ι} {f : ι -> A}, (forall (x : ι), (Membership.mem.{u3, u3} ι (Finset.{u3} ι) (Finset.instMembershipFinset.{u3} ι) x t) -> (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10)) (f x) S)) -> (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10)) (Finset.prod.{u2, u3} A ι (CommSemiring.toCommMonoid.{u2} A _inst_9) t (fun (x : ι) => f x)) S)
Case conversion may be inaccurate. Consider using '#align subalgebra.prod_mem Subalgebra.prod_memₓ'. -/
protected theorem prod_mem {R : Type u} {A : Type v} [CommSemiring R] [CommSemiring A] [Algebra R A]
    (S : Subalgebra R A) {ι : Type w} {t : Finset ι} {f : ι → A} (h : ∀ x ∈ t, f x ∈ S) :
    (∏ x in t, f x) ∈ S :=
  prod_mem h
#align subalgebra.prod_mem Subalgebra.prod_mem

instance {R A : Type _} [CommRing R] [Ring A] [Algebra R A] : SubringClass (Subalgebra R A) A :=
  { Subalgebra.subsemiringClass with neg_mem := fun S x hx => neg_one_smul R x ▸ S.smul_mem hx _ }

/- warning: subalgebra.neg_mem -> Subalgebra.neg_mem is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : Ring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9)] (S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) {x : A}, (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) x S) -> (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) (Neg.neg.{u2} A (SubNegMonoid.toHasNeg.{u2} A (AddGroup.toSubNegMonoid.{u2} A (AddGroupWithOne.toAddGroup.{u2} A (NonAssocRing.toAddGroupWithOne.{u2} A (Ring.toNonAssocRing.{u2} A _inst_9))))) x) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : Ring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9)] (S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) {x : A}, (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) x S) -> (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) (Neg.neg.{u2} A (Ring.toNeg.{u2} A _inst_9) x) S)
Case conversion may be inaccurate. Consider using '#align subalgebra.neg_mem Subalgebra.neg_memₓ'. -/
protected theorem neg_mem {R : Type u} {A : Type v} [CommRing R] [Ring A] [Algebra R A]
    (S : Subalgebra R A) {x : A} (hx : x ∈ S) : -x ∈ S :=
  neg_mem hx
#align subalgebra.neg_mem Subalgebra.neg_mem

/- warning: subalgebra.sub_mem -> Subalgebra.sub_mem is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : Ring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9)] (S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) {x : A} {y : A}, (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) x S) -> (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) y S) -> (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) (HSub.hSub.{u2, u2, u2} A A A (instHSub.{u2} A (SubNegMonoid.toHasSub.{u2} A (AddGroup.toSubNegMonoid.{u2} A (AddGroupWithOne.toAddGroup.{u2} A (NonAssocRing.toAddGroupWithOne.{u2} A (Ring.toNonAssocRing.{u2} A _inst_9)))))) x y) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : Ring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9)] (S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) {x : A} {y : A}, (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) x S) -> (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) y S) -> (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) (HSub.hSub.{u2, u2, u2} A A A (instHSub.{u2} A (Ring.toSub.{u2} A _inst_9)) x y) S)
Case conversion may be inaccurate. Consider using '#align subalgebra.sub_mem Subalgebra.sub_memₓ'. -/
protected theorem sub_mem {R : Type u} {A : Type v} [CommRing R] [Ring A] [Algebra R A]
    (S : Subalgebra R A) {x y : A} (hx : x ∈ S) (hy : y ∈ S) : x - y ∈ S :=
  sub_mem hx hy
#align subalgebra.sub_mem Subalgebra.sub_mem

/- warning: subalgebra.zsmul_mem -> Subalgebra.zsmul_mem is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : Ring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9)] (S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) {x : A}, (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) x S) -> (forall (n : Int), Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) (SMul.smul.{0, u2} Int A (SubNegMonoid.SMulInt.{u2} A (AddGroup.toSubNegMonoid.{u2} A (AddGroupWithOne.toAddGroup.{u2} A (NonAssocRing.toAddGroupWithOne.{u2} A (Ring.toNonAssocRing.{u2} A _inst_9))))) n x) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : Ring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9)] (S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) {x : A}, (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) x S) -> (forall (n : Int), Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) (HSMul.hSMul.{0, u2, u2} Int A A (instHSMul.{0, u2} Int A (SubNegMonoid.SMulInt.{u2} A (AddGroup.toSubNegMonoid.{u2} A (AddGroupWithOne.toAddGroup.{u2} A (Ring.toAddGroupWithOne.{u2} A _inst_9))))) n x) S)
Case conversion may be inaccurate. Consider using '#align subalgebra.zsmul_mem Subalgebra.zsmul_memₓ'. -/
protected theorem zsmul_mem {R : Type u} {A : Type v} [CommRing R] [Ring A] [Algebra R A]
    (S : Subalgebra R A) {x : A} (hx : x ∈ S) (n : ℤ) : n • x ∈ S :=
  zsmul_mem hx n
#align subalgebra.zsmul_mem Subalgebra.zsmul_mem

/- warning: subalgebra.coe_int_mem -> Subalgebra.coe_int_mem is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : Ring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9)] (S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (n : Int), Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) ((fun (a : Type) (b : Type.{u2}) [self : HasLiftT.{1, succ u2} a b] => self.0) Int A (HasLiftT.mk.{1, succ u2} Int A (CoeTCₓ.coe.{1, succ u2} Int A (Int.castCoe.{u2} A (AddGroupWithOne.toHasIntCast.{u2} A (NonAssocRing.toAddGroupWithOne.{u2} A (Ring.toNonAssocRing.{u2} A _inst_9)))))) n) S
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : Ring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9)] (S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (n : Int), Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) (Int.cast.{u2} A (Ring.toIntCast.{u2} A _inst_9) n) S
Case conversion may be inaccurate. Consider using '#align subalgebra.coe_int_mem Subalgebra.coe_int_memₓ'. -/
protected theorem coe_int_mem {R : Type u} {A : Type v} [CommRing R] [Ring A] [Algebra R A]
    (S : Subalgebra R A) (n : ℤ) : (n : A) ∈ S :=
  coe_int_mem S n
#align subalgebra.coe_int_mem Subalgebra.coe_int_mem

#print Subalgebra.toAddSubmonoid /-
/-- The projection from a subalgebra of `A` to an additive submonoid of `A`. -/
def toAddSubmonoid {R : Type u} {A : Type v} [CommSemiring R] [Semiring A] [Algebra R A]
    (S : Subalgebra R A) : AddSubmonoid A :=
  S.toSubsemiring.toAddSubmonoid
#align subalgebra.to_add_submonoid Subalgebra.toAddSubmonoid
-/

/-- The projection from a subalgebra of `A` to a submonoid of `A`. -/
def toSubmonoid {R : Type u} {A : Type v} [CommSemiring R] [Semiring A] [Algebra R A]
    (S : Subalgebra R A) : Submonoid A :=
  S.toSubsemiring.toSubmonoid
#align subalgebra.to_submonoid Subalgebra.toSubmonoid

#print Subalgebra.toSubring /-
/-- A subalgebra over a ring is also a `subring`. -/
def toSubring {R : Type u} {A : Type v} [CommRing R] [Ring A] [Algebra R A] (S : Subalgebra R A) :
    Subring A :=
  { S.toSubsemiring with neg_mem' := fun _ => S.neg_mem }
#align subalgebra.to_subring Subalgebra.toSubring
-/

/- warning: subalgebra.mem_to_subring -> Subalgebra.mem_toSubring is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : Ring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9)] {S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10} {x : A}, Iff (Membership.Mem.{u2, u2} A (Subring.{u2} A _inst_9) (SetLike.hasMem.{u2, u2} (Subring.{u2} A _inst_9) A (Subring.setLike.{u2} A _inst_9)) x (Subalgebra.toSubring.{u1, u2} R A _inst_8 _inst_9 _inst_10 S)) (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) x S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : Ring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9)] {S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10} {x : A}, Iff (Membership.mem.{u2, u2} A (Subring.{u2} A _inst_9) (SetLike.instMembership.{u2, u2} (Subring.{u2} A _inst_9) A (Subring.instSetLikeSubring.{u2} A _inst_9)) x (Subalgebra.toSubring.{u1, u2} R A _inst_8 _inst_9 _inst_10 S)) (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) x S)
Case conversion may be inaccurate. Consider using '#align subalgebra.mem_to_subring Subalgebra.mem_toSubringₓ'. -/
@[simp]
theorem mem_toSubring {R : Type u} {A : Type v} [CommRing R] [Ring A] [Algebra R A]
    {S : Subalgebra R A} {x} : x ∈ S.toSubring ↔ x ∈ S :=
  Iff.rfl
#align subalgebra.mem_to_subring Subalgebra.mem_toSubring

/- warning: subalgebra.coe_to_subring -> Subalgebra.coe_toSubring is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : Ring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9)] (S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10), Eq.{succ u2} (Set.{u2} A) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subring.{u2} A _inst_9) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subring.{u2} A _inst_9) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subring.{u2} A _inst_9) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subring.{u2} A _inst_9) A (Subring.setLike.{u2} A _inst_9)))) (Subalgebra.toSubring.{u1, u2} R A _inst_8 _inst_9 _inst_10 S)) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)))) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : Ring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9)] (S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10), Eq.{succ u2} (Set.{u2} A) (SetLike.coe.{u2, u2} (Subring.{u2} A _inst_9) A (Subring.instSetLikeSubring.{u2} A _inst_9) (Subalgebra.toSubring.{u1, u2} R A _inst_8 _inst_9 _inst_10 S)) (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) S)
Case conversion may be inaccurate. Consider using '#align subalgebra.coe_to_subring Subalgebra.coe_toSubringₓ'. -/
@[simp]
theorem coe_toSubring {R : Type u} {A : Type v} [CommRing R] [Ring A] [Algebra R A]
    (S : Subalgebra R A) : (↑S.toSubring : Set A) = S :=
  rfl
#align subalgebra.coe_to_subring Subalgebra.coe_toSubring

#print Subalgebra.toSubring_injective /-
theorem toSubring_injective {R : Type u} {A : Type v} [CommRing R] [Ring A] [Algebra R A] :
    Function.Injective (toSubring : Subalgebra R A → Subring A) := fun S T h =>
  ext fun x => by rw [← mem_to_subring, ← mem_to_subring, h]
#align subalgebra.to_subring_injective Subalgebra.toSubring_injective
-/

#print Subalgebra.toSubring_inj /-
theorem toSubring_inj {R : Type u} {A : Type v} [CommRing R] [Ring A] [Algebra R A]
    {S U : Subalgebra R A} : S.toSubring = U.toSubring ↔ S = U :=
  toSubring_injective.eq_iff
#align subalgebra.to_subring_inj Subalgebra.toSubring_inj
-/

instance : Inhabited S :=
  ⟨(0 : S.toSubsemiring)⟩

section

/-! `subalgebra`s inherit structure from their `subsemiring` / `semiring` coercions. -/


/- warning: subalgebra.to_semiring -> Subalgebra.toSemiring is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommSemiring.{u1} R] [_inst_9 : Semiring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A _inst_8 _inst_9] (S : Subalgebra.{u1, u2} R A _inst_8 _inst_9 _inst_10), Semiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_8 _inst_9 _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 _inst_9 _inst_10) A (Subalgebra.setLike.{u1, u2} R A _inst_8 _inst_9 _inst_10)) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommSemiring.{u1} R] [_inst_9 : Semiring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A _inst_8 _inst_9] (S : Subalgebra.{u1, u2} R A _inst_8 _inst_9 _inst_10), Semiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_8 _inst_9 _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 _inst_9 _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_8 _inst_9 _inst_10)) x S))
Case conversion may be inaccurate. Consider using '#align subalgebra.to_semiring Subalgebra.toSemiringₓ'. -/
instance toSemiring {R A} [CommSemiring R] [Semiring A] [Algebra R A] (S : Subalgebra R A) :
    Semiring S :=
  S.toSubsemiring.toSemiring
#align subalgebra.to_semiring Subalgebra.toSemiring

/- warning: subalgebra.to_comm_semiring -> Subalgebra.toCommSemiring is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommSemiring.{u1} R] [_inst_9 : CommSemiring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9)] (S : Subalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10), CommSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10)) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommSemiring.{u1} R] [_inst_9 : CommSemiring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9)] (S : Subalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10), CommSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_8 (CommSemiring.toSemiring.{u2} A _inst_9) _inst_10)) x S))
Case conversion may be inaccurate. Consider using '#align subalgebra.to_comm_semiring Subalgebra.toCommSemiringₓ'. -/
instance toCommSemiring {R A} [CommSemiring R] [CommSemiring A] [Algebra R A] (S : Subalgebra R A) :
    CommSemiring S :=
  S.toSubsemiring.toCommSemiring
#align subalgebra.to_comm_semiring Subalgebra.toCommSemiring

/- warning: subalgebra.to_ring -> Subalgebra.toRing is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : Ring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9)] (S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10), Ring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : Ring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9)] (S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10), Ring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) x S))
Case conversion may be inaccurate. Consider using '#align subalgebra.to_ring Subalgebra.toRingₓ'. -/
instance toRing {R A} [CommRing R] [Ring A] [Algebra R A] (S : Subalgebra R A) : Ring S :=
  S.toSubring.toRing
#align subalgebra.to_ring Subalgebra.toRing

/- warning: subalgebra.to_comm_ring -> Subalgebra.toCommRing is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : CommRing.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_9))] (S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_9)) _inst_10), CommRing.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_9)) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_9)) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_9)) _inst_10)) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : CommRing.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_9))] (S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_9)) _inst_10), CommRing.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_9)) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_9)) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_9)) _inst_10)) x S))
Case conversion may be inaccurate. Consider using '#align subalgebra.to_comm_ring Subalgebra.toCommRingₓ'. -/
instance toCommRing {R A} [CommRing R] [CommRing A] [Algebra R A] (S : Subalgebra R A) :
    CommRing S :=
  S.toSubring.toCommRing
#align subalgebra.to_comm_ring Subalgebra.toCommRing

/- warning: subalgebra.to_ordered_semiring -> Subalgebra.toOrderedSemiring is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommSemiring.{u1} R] [_inst_9 : OrderedSemiring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A _inst_8 (OrderedSemiring.toSemiring.{u2} A _inst_9)] (S : Subalgebra.{u1, u2} R A _inst_8 (OrderedSemiring.toSemiring.{u2} A _inst_9) _inst_10), OrderedSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_8 (OrderedSemiring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 (OrderedSemiring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A _inst_8 (OrderedSemiring.toSemiring.{u2} A _inst_9) _inst_10)) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommSemiring.{u1} R] [_inst_9 : OrderedSemiring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A _inst_8 (OrderedSemiring.toSemiring.{u2} A _inst_9)] (S : Subalgebra.{u1, u2} R A _inst_8 (OrderedSemiring.toSemiring.{u2} A _inst_9) _inst_10), OrderedSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_8 (OrderedSemiring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 (OrderedSemiring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_8 (OrderedSemiring.toSemiring.{u2} A _inst_9) _inst_10)) x S))
Case conversion may be inaccurate. Consider using '#align subalgebra.to_ordered_semiring Subalgebra.toOrderedSemiringₓ'. -/
instance toOrderedSemiring {R A} [CommSemiring R] [OrderedSemiring A] [Algebra R A]
    (S : Subalgebra R A) : OrderedSemiring S :=
  S.toSubsemiring.toOrderedSemiring
#align subalgebra.to_ordered_semiring Subalgebra.toOrderedSemiring

/- warning: subalgebra.to_strict_ordered_semiring -> Subalgebra.toStrictOrderedSemiring is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommSemiring.{u1} R] [_inst_9 : StrictOrderedSemiring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A _inst_9)] (S : Subalgebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A _inst_9) _inst_10), StrictOrderedSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A _inst_9) _inst_10)) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommSemiring.{u1} R] [_inst_9 : StrictOrderedSemiring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A _inst_9)] (S : Subalgebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A _inst_9) _inst_10), StrictOrderedSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A _inst_9) _inst_10)) x S))
Case conversion may be inaccurate. Consider using '#align subalgebra.to_strict_ordered_semiring Subalgebra.toStrictOrderedSemiringₓ'. -/
instance toStrictOrderedSemiring {R A} [CommSemiring R] [StrictOrderedSemiring A] [Algebra R A]
    (S : Subalgebra R A) : StrictOrderedSemiring S :=
  S.toSubsemiring.toStrictOrderedSemiring
#align subalgebra.to_strict_ordered_semiring Subalgebra.toStrictOrderedSemiring

/- warning: subalgebra.to_ordered_comm_semiring -> Subalgebra.toOrderedCommSemiring is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommSemiring.{u1} R] [_inst_9 : OrderedCommSemiring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A _inst_8 (OrderedSemiring.toSemiring.{u2} A (OrderedCommSemiring.toOrderedSemiring.{u2} A _inst_9))] (S : Subalgebra.{u1, u2} R A _inst_8 (OrderedSemiring.toSemiring.{u2} A (OrderedCommSemiring.toOrderedSemiring.{u2} A _inst_9)) _inst_10), OrderedCommSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_8 (OrderedSemiring.toSemiring.{u2} A (OrderedCommSemiring.toOrderedSemiring.{u2} A _inst_9)) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 (OrderedSemiring.toSemiring.{u2} A (OrderedCommSemiring.toOrderedSemiring.{u2} A _inst_9)) _inst_10) A (Subalgebra.setLike.{u1, u2} R A _inst_8 (OrderedSemiring.toSemiring.{u2} A (OrderedCommSemiring.toOrderedSemiring.{u2} A _inst_9)) _inst_10)) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommSemiring.{u1} R] [_inst_9 : OrderedCommSemiring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A _inst_8 (OrderedSemiring.toSemiring.{u2} A (OrderedCommSemiring.toOrderedSemiring.{u2} A _inst_9))] (S : Subalgebra.{u1, u2} R A _inst_8 (OrderedSemiring.toSemiring.{u2} A (OrderedCommSemiring.toOrderedSemiring.{u2} A _inst_9)) _inst_10), OrderedCommSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_8 (OrderedSemiring.toSemiring.{u2} A (OrderedCommSemiring.toOrderedSemiring.{u2} A _inst_9)) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 (OrderedSemiring.toSemiring.{u2} A (OrderedCommSemiring.toOrderedSemiring.{u2} A _inst_9)) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_8 (OrderedSemiring.toSemiring.{u2} A (OrderedCommSemiring.toOrderedSemiring.{u2} A _inst_9)) _inst_10)) x S))
Case conversion may be inaccurate. Consider using '#align subalgebra.to_ordered_comm_semiring Subalgebra.toOrderedCommSemiringₓ'. -/
instance toOrderedCommSemiring {R A} [CommSemiring R] [OrderedCommSemiring A] [Algebra R A]
    (S : Subalgebra R A) : OrderedCommSemiring S :=
  S.toSubsemiring.toOrderedCommSemiring
#align subalgebra.to_ordered_comm_semiring Subalgebra.toOrderedCommSemiring

/- warning: subalgebra.to_strict_ordered_comm_semiring -> Subalgebra.toStrictOrderedCommSemiring is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommSemiring.{u1} R] [_inst_9 : StrictOrderedCommSemiring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (StrictOrderedCommSemiring.toStrictOrderedSemiring.{u2} A _inst_9))] (S : Subalgebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (StrictOrderedCommSemiring.toStrictOrderedSemiring.{u2} A _inst_9)) _inst_10), StrictOrderedCommSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (StrictOrderedCommSemiring.toStrictOrderedSemiring.{u2} A _inst_9)) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (StrictOrderedCommSemiring.toStrictOrderedSemiring.{u2} A _inst_9)) _inst_10) A (Subalgebra.setLike.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (StrictOrderedCommSemiring.toStrictOrderedSemiring.{u2} A _inst_9)) _inst_10)) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommSemiring.{u1} R] [_inst_9 : StrictOrderedCommSemiring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (StrictOrderedCommSemiring.toStrictOrderedSemiring.{u2} A _inst_9))] (S : Subalgebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (StrictOrderedCommSemiring.toStrictOrderedSemiring.{u2} A _inst_9)) _inst_10), StrictOrderedCommSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (StrictOrderedCommSemiring.toStrictOrderedSemiring.{u2} A _inst_9)) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (StrictOrderedCommSemiring.toStrictOrderedSemiring.{u2} A _inst_9)) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (StrictOrderedCommSemiring.toStrictOrderedSemiring.{u2} A _inst_9)) _inst_10)) x S))
Case conversion may be inaccurate. Consider using '#align subalgebra.to_strict_ordered_comm_semiring Subalgebra.toStrictOrderedCommSemiringₓ'. -/
instance toStrictOrderedCommSemiring {R A} [CommSemiring R] [StrictOrderedCommSemiring A]
    [Algebra R A] (S : Subalgebra R A) : StrictOrderedCommSemiring S :=
  S.toSubsemiring.toStrictOrderedCommSemiring
#align subalgebra.to_strict_ordered_comm_semiring Subalgebra.toStrictOrderedCommSemiring

/- warning: subalgebra.to_ordered_ring -> Subalgebra.toOrderedRing is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : OrderedRing.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (OrderedRing.toRing.{u2} A _inst_9))] (S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (OrderedRing.toRing.{u2} A _inst_9)) _inst_10), OrderedRing.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (OrderedRing.toRing.{u2} A _inst_9)) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (OrderedRing.toRing.{u2} A _inst_9)) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (OrderedRing.toRing.{u2} A _inst_9)) _inst_10)) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : OrderedRing.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (OrderedSemiring.toSemiring.{u2} A (OrderedRing.toOrderedSemiring.{u2} A _inst_9))] (S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (OrderedSemiring.toSemiring.{u2} A (OrderedRing.toOrderedSemiring.{u2} A _inst_9)) _inst_10), OrderedRing.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (OrderedSemiring.toSemiring.{u2} A (OrderedRing.toOrderedSemiring.{u2} A _inst_9)) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (OrderedSemiring.toSemiring.{u2} A (OrderedRing.toOrderedSemiring.{u2} A _inst_9)) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (OrderedSemiring.toSemiring.{u2} A (OrderedRing.toOrderedSemiring.{u2} A _inst_9)) _inst_10)) x S))
Case conversion may be inaccurate. Consider using '#align subalgebra.to_ordered_ring Subalgebra.toOrderedRingₓ'. -/
instance toOrderedRing {R A} [CommRing R] [OrderedRing A] [Algebra R A] (S : Subalgebra R A) :
    OrderedRing S :=
  S.toSubring.toOrderedRing
#align subalgebra.to_ordered_ring Subalgebra.toOrderedRing

/- warning: subalgebra.to_ordered_comm_ring -> Subalgebra.toOrderedCommRing is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : OrderedCommRing.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (OrderedRing.toRing.{u2} A (OrderedCommRing.toOrderedRing.{u2} A _inst_9)))] (S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (OrderedRing.toRing.{u2} A (OrderedCommRing.toOrderedRing.{u2} A _inst_9))) _inst_10), OrderedCommRing.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (OrderedRing.toRing.{u2} A (OrderedCommRing.toOrderedRing.{u2} A _inst_9))) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (OrderedRing.toRing.{u2} A (OrderedCommRing.toOrderedRing.{u2} A _inst_9))) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (OrderedRing.toRing.{u2} A (OrderedCommRing.toOrderedRing.{u2} A _inst_9))) _inst_10)) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : OrderedCommRing.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (OrderedSemiring.toSemiring.{u2} A (OrderedCommSemiring.toOrderedSemiring.{u2} A (OrderedCommRing.toOrderedCommSemiring.{u2} A _inst_9)))] (S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (OrderedSemiring.toSemiring.{u2} A (OrderedCommSemiring.toOrderedSemiring.{u2} A (OrderedCommRing.toOrderedCommSemiring.{u2} A _inst_9))) _inst_10), OrderedCommRing.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (OrderedSemiring.toSemiring.{u2} A (OrderedCommSemiring.toOrderedSemiring.{u2} A (OrderedCommRing.toOrderedCommSemiring.{u2} A _inst_9))) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (OrderedSemiring.toSemiring.{u2} A (OrderedCommSemiring.toOrderedSemiring.{u2} A (OrderedCommRing.toOrderedCommSemiring.{u2} A _inst_9))) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (OrderedSemiring.toSemiring.{u2} A (OrderedCommSemiring.toOrderedSemiring.{u2} A (OrderedCommRing.toOrderedCommSemiring.{u2} A _inst_9))) _inst_10)) x S))
Case conversion may be inaccurate. Consider using '#align subalgebra.to_ordered_comm_ring Subalgebra.toOrderedCommRingₓ'. -/
instance toOrderedCommRing {R A} [CommRing R] [OrderedCommRing A] [Algebra R A]
    (S : Subalgebra R A) : OrderedCommRing S :=
  S.toSubring.toOrderedCommRing
#align subalgebra.to_ordered_comm_ring Subalgebra.toOrderedCommRing

/- warning: subalgebra.to_linear_ordered_semiring -> Subalgebra.toLinearOrderedSemiring is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommSemiring.{u1} R] [_inst_9 : LinearOrderedSemiring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A _inst_9))] (S : Subalgebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A _inst_9)) _inst_10), LinearOrderedSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A _inst_9)) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A _inst_9)) _inst_10) A (Subalgebra.setLike.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A _inst_9)) _inst_10)) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommSemiring.{u1} R] [_inst_9 : LinearOrderedSemiring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A _inst_9))] (S : Subalgebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A _inst_9)) _inst_10), LinearOrderedSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A _inst_9)) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A _inst_9)) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A _inst_9)) _inst_10)) x S))
Case conversion may be inaccurate. Consider using '#align subalgebra.to_linear_ordered_semiring Subalgebra.toLinearOrderedSemiringₓ'. -/
instance toLinearOrderedSemiring {R A} [CommSemiring R] [LinearOrderedSemiring A] [Algebra R A]
    (S : Subalgebra R A) : LinearOrderedSemiring S :=
  S.toSubsemiring.toLinearOrderedSemiring
#align subalgebra.to_linear_ordered_semiring Subalgebra.toLinearOrderedSemiring

/- warning: subalgebra.to_linear_ordered_comm_semiring -> Subalgebra.toLinearOrderedCommSemiring is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommSemiring.{u1} R] [_inst_9 : LinearOrderedCommSemiring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A (LinearOrderedCommSemiring.toLinearOrderedSemiring.{u2} A _inst_9)))] (S : Subalgebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A (LinearOrderedCommSemiring.toLinearOrderedSemiring.{u2} A _inst_9))) _inst_10), LinearOrderedCommSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A (LinearOrderedCommSemiring.toLinearOrderedSemiring.{u2} A _inst_9))) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A (LinearOrderedCommSemiring.toLinearOrderedSemiring.{u2} A _inst_9))) _inst_10) A (Subalgebra.setLike.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A (LinearOrderedCommSemiring.toLinearOrderedSemiring.{u2} A _inst_9))) _inst_10)) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommSemiring.{u1} R] [_inst_9 : LinearOrderedCommSemiring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A (LinearOrderedCommSemiring.toLinearOrderedSemiring.{u2} A _inst_9)))] (S : Subalgebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A (LinearOrderedCommSemiring.toLinearOrderedSemiring.{u2} A _inst_9))) _inst_10), LinearOrderedCommSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A (LinearOrderedCommSemiring.toLinearOrderedSemiring.{u2} A _inst_9))) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A (LinearOrderedCommSemiring.toLinearOrderedSemiring.{u2} A _inst_9))) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_8 (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A (LinearOrderedCommSemiring.toLinearOrderedSemiring.{u2} A _inst_9))) _inst_10)) x S))
Case conversion may be inaccurate. Consider using '#align subalgebra.to_linear_ordered_comm_semiring Subalgebra.toLinearOrderedCommSemiringₓ'. -/
instance toLinearOrderedCommSemiring {R A} [CommSemiring R] [LinearOrderedCommSemiring A]
    [Algebra R A] (S : Subalgebra R A) : LinearOrderedCommSemiring S :=
  S.toSubsemiring.toLinearOrderedCommSemiring
#align subalgebra.to_linear_ordered_comm_semiring Subalgebra.toLinearOrderedCommSemiring

/- warning: subalgebra.to_linear_ordered_ring -> Subalgebra.toLinearOrderedRing is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : LinearOrderedRing.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (StrictOrderedRing.toRing.{u2} A (LinearOrderedRing.toStrictOrderedRing.{u2} A _inst_9)))] (S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (StrictOrderedRing.toRing.{u2} A (LinearOrderedRing.toStrictOrderedRing.{u2} A _inst_9))) _inst_10), LinearOrderedRing.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (StrictOrderedRing.toRing.{u2} A (LinearOrderedRing.toStrictOrderedRing.{u2} A _inst_9))) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (StrictOrderedRing.toRing.{u2} A (LinearOrderedRing.toStrictOrderedRing.{u2} A _inst_9))) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (StrictOrderedRing.toRing.{u2} A (LinearOrderedRing.toStrictOrderedRing.{u2} A _inst_9))) _inst_10)) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : LinearOrderedRing.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A (LinearOrderedRing.toLinearOrderedSemiring.{u2} A _inst_9)))] (S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A (LinearOrderedRing.toLinearOrderedSemiring.{u2} A _inst_9))) _inst_10), LinearOrderedRing.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A (LinearOrderedRing.toLinearOrderedSemiring.{u2} A _inst_9))) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A (LinearOrderedRing.toLinearOrderedSemiring.{u2} A _inst_9))) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A (LinearOrderedRing.toLinearOrderedSemiring.{u2} A _inst_9))) _inst_10)) x S))
Case conversion may be inaccurate. Consider using '#align subalgebra.to_linear_ordered_ring Subalgebra.toLinearOrderedRingₓ'. -/
instance toLinearOrderedRing {R A} [CommRing R] [LinearOrderedRing A] [Algebra R A]
    (S : Subalgebra R A) : LinearOrderedRing S :=
  S.toSubring.toLinearOrderedRing
#align subalgebra.to_linear_ordered_ring Subalgebra.toLinearOrderedRing

/- warning: subalgebra.to_linear_ordered_comm_ring -> Subalgebra.toLinearOrderedCommRing is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : LinearOrderedCommRing.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (StrictOrderedRing.toRing.{u2} A (LinearOrderedRing.toStrictOrderedRing.{u2} A (LinearOrderedCommRing.toLinearOrderedRing.{u2} A _inst_9))))] (S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (StrictOrderedRing.toRing.{u2} A (LinearOrderedRing.toStrictOrderedRing.{u2} A (LinearOrderedCommRing.toLinearOrderedRing.{u2} A _inst_9)))) _inst_10), LinearOrderedCommRing.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (StrictOrderedRing.toRing.{u2} A (LinearOrderedRing.toStrictOrderedRing.{u2} A (LinearOrderedCommRing.toLinearOrderedRing.{u2} A _inst_9)))) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (StrictOrderedRing.toRing.{u2} A (LinearOrderedRing.toStrictOrderedRing.{u2} A (LinearOrderedCommRing.toLinearOrderedRing.{u2} A _inst_9)))) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A (StrictOrderedRing.toRing.{u2} A (LinearOrderedRing.toStrictOrderedRing.{u2} A (LinearOrderedCommRing.toLinearOrderedRing.{u2} A _inst_9)))) _inst_10)) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : LinearOrderedCommRing.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A (LinearOrderedCommSemiring.toLinearOrderedSemiring.{u2} A (LinearOrderedCommRing.toLinearOrderedCommSemiring.{u2} A _inst_9))))] (S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A (LinearOrderedCommSemiring.toLinearOrderedSemiring.{u2} A (LinearOrderedCommRing.toLinearOrderedCommSemiring.{u2} A _inst_9)))) _inst_10), LinearOrderedCommRing.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A (LinearOrderedCommSemiring.toLinearOrderedSemiring.{u2} A (LinearOrderedCommRing.toLinearOrderedCommSemiring.{u2} A _inst_9)))) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A (LinearOrderedCommSemiring.toLinearOrderedSemiring.{u2} A (LinearOrderedCommRing.toLinearOrderedCommSemiring.{u2} A _inst_9)))) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (StrictOrderedSemiring.toSemiring.{u2} A (LinearOrderedSemiring.toStrictOrderedSemiring.{u2} A (LinearOrderedCommSemiring.toLinearOrderedSemiring.{u2} A (LinearOrderedCommRing.toLinearOrderedCommSemiring.{u2} A _inst_9)))) _inst_10)) x S))
Case conversion may be inaccurate. Consider using '#align subalgebra.to_linear_ordered_comm_ring Subalgebra.toLinearOrderedCommRingₓ'. -/
instance toLinearOrderedCommRing {R A} [CommRing R] [LinearOrderedCommRing A] [Algebra R A]
    (S : Subalgebra R A) : LinearOrderedCommRing S :=
  S.toSubring.toLinearOrderedCommRing
#align subalgebra.to_linear_ordered_comm_ring Subalgebra.toLinearOrderedCommRing

end

/- warning: subalgebra.to_submodule -> Subalgebra.toSubmodule is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], OrderEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], OrderEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instPartialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))))
Case conversion may be inaccurate. Consider using '#align subalgebra.to_submodule Subalgebra.toSubmoduleₓ'. -/
/-- The forgetful map from `subalgebra` to `submodule` as an `order_embedding` -/
def toSubmodule : Subalgebra R A ↪o Submodule R A
    where
  toEmbedding :=
    { toFun := fun S =>
        { carrier := S
          zero_mem' := (0 : S).2
          add_mem' := fun x y hx hy => (⟨x, hx⟩ + ⟨y, hy⟩ : S).2
          smul_mem' := fun c x hx =>
            (Algebra.smul_def c x).symm ▸
              (⟨algebraMap R A c, S.range_le ⟨c, rfl⟩⟩ * ⟨x, hx⟩ : S).2 }
      inj' := fun S T h => ext <| by apply SetLike.ext_iff.1 h }
  map_rel_iff' S T := SetLike.coe_subset_coe.symm.trans SetLike.coe_subset_coe
#align subalgebra.to_submodule Subalgebra.toSubmodule

/- warning: subalgebra.mem_to_submodule -> Subalgebra.mem_toSubmodule is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) {x : A}, Iff (Membership.Mem.{u2, u2} A (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (SetLike.hasMem.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.setLike.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) x (coeFn.{succ u2, succ u2} (OrderEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))))) (fun (_x : RelEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) => (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) -> (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (RelEmbedding.hasCoeToFun.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3) S)) (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) {x : A}, Iff (Membership.mem.{u2, u2} A ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (SetLike.instMembership.{u2, u2} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (Submodule.instSetLikeSubmodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) x (FunLike.coe.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (fun (_x : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) _x) (EmbeddingLike.toFunLike.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Function.instEmbeddingLikeEmbedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (RelEmbedding.toEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.680 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instPartialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) x._@.Mathlib.Order.Hom.Basic._hyg.680 x._@.Mathlib.Order.Hom.Basic._hyg.682) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.695 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) => LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))) x._@.Mathlib.Order.Hom.Basic._hyg.695 x._@.Mathlib.Order.Hom.Basic._hyg.697) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S)) (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)
Case conversion may be inaccurate. Consider using '#align subalgebra.mem_to_submodule Subalgebra.mem_toSubmoduleₓ'. -/
/- TODO: bundle other forgetful maps between algebraic substructures, e.g.
  `to_subsemiring` and `to_subring` in this file. -/
@[simp]
theorem mem_toSubmodule {x} : x ∈ S.toSubmodule ↔ x ∈ S :=
  Iff.rfl
#align subalgebra.mem_to_submodule Subalgebra.mem_toSubmodule

/- warning: subalgebra.coe_to_submodule -> Subalgebra.coe_toSubmodule is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), Eq.{succ u2} (Set.{u2} A) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.setLike.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (coeFn.{succ u2, succ u2} (OrderEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))))) (fun (_x : RelEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) => (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) -> (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (RelEmbedding.hasCoeToFun.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3) S)) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), Eq.{succ u2} (Set.{u2} A) (SetLike.coe.{u2, u2} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (Submodule.instSetLikeSubmodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (FunLike.coe.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (fun (_x : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) _x) (EmbeddingLike.toFunLike.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Function.instEmbeddingLikeEmbedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (RelEmbedding.toEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.680 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instPartialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) x._@.Mathlib.Order.Hom.Basic._hyg.680 x._@.Mathlib.Order.Hom.Basic._hyg.682) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.695 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) => LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))) x._@.Mathlib.Order.Hom.Basic._hyg.695 x._@.Mathlib.Order.Hom.Basic._hyg.697) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S)) (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S)
Case conversion may be inaccurate. Consider using '#align subalgebra.coe_to_submodule Subalgebra.coe_toSubmoduleₓ'. -/
@[simp]
theorem coe_toSubmodule (S : Subalgebra R A) : (↑S.toSubmodule : Set A) = S :=
  rfl
#align subalgebra.coe_to_submodule Subalgebra.coe_toSubmodule

section

/-! `subalgebra`s inherit structure from their `submodule` coercions. -/


/- warning: subalgebra.module' -> Subalgebra.module' is a dubious translation:
lean 3 declaration is
  forall {R' : Type.{u2}} {R : Type.{u1}} {A : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u3} A] [_inst_3 : Algebra.{u1, u3} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) [_inst_8 : Semiring.{u2} R'] [_inst_9 : SMul.{u2, u1} R' R] [_inst_10 : Module.{u2, u3} R' A _inst_8 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))] [_inst_11 : IsScalarTower.{u2, u1, u3} R' R A _inst_9 (SMulZeroClass.toHasSmul.{u1, u3} R A (AddZeroClass.toHasZero.{u3} A (AddMonoid.toAddZeroClass.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))))) (SMulWithZero.toSmulZeroClass.{u1, u3} R A (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))))) (AddZeroClass.toHasZero.{u3} A (AddMonoid.toAddZeroClass.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u1, u3} R A (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} A (AddMonoid.toAddZeroClass.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))))) (Module.toMulActionWithZero.{u1, u3} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u1, u3} R A _inst_1 _inst_2 _inst_3))))) (SMulZeroClass.toHasSmul.{u2, u3} R' A (AddZeroClass.toHasZero.{u3} A (AddMonoid.toAddZeroClass.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))))) (SMulWithZero.toSmulZeroClass.{u2, u3} R' A (MulZeroClass.toHasZero.{u2} R' (MulZeroOneClass.toMulZeroClass.{u2} R' (MonoidWithZero.toMulZeroOneClass.{u2} R' (Semiring.toMonoidWithZero.{u2} R' _inst_8)))) (AddZeroClass.toHasZero.{u3} A (AddMonoid.toAddZeroClass.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u2, u3} R' A (Semiring.toMonoidWithZero.{u2} R' _inst_8) (AddZeroClass.toHasZero.{u3} A (AddMonoid.toAddZeroClass.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))))) (Module.toMulActionWithZero.{u2, u3} R' A _inst_8 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) _inst_10))))], Module.{u2, u3} R' (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) _inst_8 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (Semiring.toNonAssocSemiring.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (Subalgebra.toSemiring.{u1, u3} R A _inst_1 _inst_2 _inst_3 S))))
but is expected to have type
  forall {R' : Type.{u2}} {R : Type.{u1}} {A : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u3} A] [_inst_3 : Algebra.{u1, u3} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) [_inst_8 : Semiring.{u2} R'] [_inst_9 : SMul.{u2, u1} R' R] [_inst_10 : Module.{u2, u3} R' A _inst_8 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))] [_inst_11 : IsScalarTower.{u2, u1, u3} R' R A _inst_9 (Algebra.toSMul.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SMulZeroClass.toSMul.{u2, u3} R' A (MonoidWithZero.toZero.{u3} A (Semiring.toMonoidWithZero.{u3} A _inst_2)) (SMulWithZero.toSMulZeroClass.{u2, u3} R' A (MonoidWithZero.toZero.{u2} R' (Semiring.toMonoidWithZero.{u2} R' _inst_8)) (MonoidWithZero.toZero.{u3} A (Semiring.toMonoidWithZero.{u3} A _inst_2)) (MulActionWithZero.toSMulWithZero.{u2, u3} R' A (Semiring.toMonoidWithZero.{u2} R' _inst_8) (MonoidWithZero.toZero.{u3} A (Semiring.toMonoidWithZero.{u3} A _inst_2)) (Module.toMulActionWithZero.{u2, u3} R' A _inst_8 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) _inst_10))))], Module.{u2, u3} R' (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_8 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (Subsemiring.toNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2) (Subalgebra.toSubsemiring.{u1, u3} R A _inst_1 _inst_2 _inst_3 S))))
Case conversion may be inaccurate. Consider using '#align subalgebra.module' Subalgebra.module'ₓ'. -/
instance module' [Semiring R'] [SMul R' R] [Module R' A] [IsScalarTower R' R A] : Module R' S :=
  S.toSubmodule.module'
#align subalgebra.module' Subalgebra.module'

instance : Module R S :=
  S.module'

instance [Semiring R'] [SMul R' R] [Module R' A] [IsScalarTower R' R A] : IsScalarTower R' R S :=
  S.toSubmodule.IsScalarTower

/- warning: subalgebra.algebra' -> Subalgebra.algebra' is a dubious translation:
lean 3 declaration is
  forall {R' : Type.{u2}} {R : Type.{u1}} {A : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u3} A] [_inst_3 : Algebra.{u1, u3} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) [_inst_8 : CommSemiring.{u2} R'] [_inst_9 : SMul.{u2, u1} R' R] [_inst_10 : Algebra.{u2, u3} R' A _inst_8 _inst_2] [_inst_11 : IsScalarTower.{u2, u1, u3} R' R A _inst_9 (SMulZeroClass.toHasSmul.{u1, u3} R A (AddZeroClass.toHasZero.{u3} A (AddMonoid.toAddZeroClass.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))))) (SMulWithZero.toSmulZeroClass.{u1, u3} R A (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))))) (AddZeroClass.toHasZero.{u3} A (AddMonoid.toAddZeroClass.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u1, u3} R A (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} A (AddMonoid.toAddZeroClass.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))))) (Module.toMulActionWithZero.{u1, u3} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u1, u3} R A _inst_1 _inst_2 _inst_3))))) (SMulZeroClass.toHasSmul.{u2, u3} R' A (AddZeroClass.toHasZero.{u3} A (AddMonoid.toAddZeroClass.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))))) (SMulWithZero.toSmulZeroClass.{u2, u3} R' A (MulZeroClass.toHasZero.{u2} R' (MulZeroOneClass.toMulZeroClass.{u2} R' (MonoidWithZero.toMulZeroOneClass.{u2} R' (Semiring.toMonoidWithZero.{u2} R' (CommSemiring.toSemiring.{u2} R' _inst_8))))) (AddZeroClass.toHasZero.{u3} A (AddMonoid.toAddZeroClass.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u2, u3} R' A (Semiring.toMonoidWithZero.{u2} R' (CommSemiring.toSemiring.{u2} R' _inst_8)) (AddZeroClass.toHasZero.{u3} A (AddMonoid.toAddZeroClass.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))))) (Module.toMulActionWithZero.{u2, u3} R' A (CommSemiring.toSemiring.{u2} R' _inst_8) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R' A _inst_8 _inst_2 _inst_10)))))], Algebra.{u2, u3} R' (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) _inst_8 (Subalgebra.toSemiring.{u1, u3} R A _inst_1 _inst_2 _inst_3 S)
but is expected to have type
  forall {R' : Type.{u2}} {R : Type.{u1}} {A : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u3} A] [_inst_3 : Algebra.{u1, u3} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) [_inst_8 : CommSemiring.{u2} R'] [_inst_9 : SMul.{u2, u1} R' R] [_inst_10 : Algebra.{u2, u3} R' A _inst_8 _inst_2] [_inst_11 : IsScalarTower.{u2, u1, u3} R' R A _inst_9 (Algebra.toSMul.{u1, u3} R A _inst_1 _inst_2 _inst_3) (Algebra.toSMul.{u2, u3} R' A _inst_8 _inst_2 _inst_10)], Algebra.{u2, u3} R' (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_8 (Subalgebra.toSemiring.{u1, u3} R A _inst_1 _inst_2 _inst_3 S)
Case conversion may be inaccurate. Consider using '#align subalgebra.algebra' Subalgebra.algebra'ₓ'. -/
instance algebra' [CommSemiring R'] [SMul R' R] [Algebra R' A] [IsScalarTower R' R A] :
    Algebra R' S :=
  {
    (algebraMap R' A).codRestrict S fun x =>
      by
      rw [Algebra.algebraMap_eq_smul_one, ← smul_one_smul R x (1 : A), ←
        Algebra.algebraMap_eq_smul_one]
      exact
        algebra_map_mem S
          _ with
    commutes' := fun c x => Subtype.eq <| Algebra.commutes _ _
    smul_def' := fun c x => Subtype.eq <| Algebra.smul_def _ _ }
#align subalgebra.algebra' Subalgebra.algebra'

instance : Algebra R S :=
  S.algebra'

end

/- warning: subalgebra.no_zero_smul_divisors_bot -> Subalgebra.noZeroSMulDivisors_bot is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) [_inst_8 : NoZeroSMulDivisors.{u1, u2} R A (MulZeroClass.toHasZero.{u1} R (NonUnitalNonAssocSemiring.toMulZeroClass.{u1} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))))) (MulZeroClass.toHasZero.{u2} A (NonUnitalNonAssocSemiring.toMulZeroClass.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (SMulZeroClass.toHasSmul.{u1, u2} R A (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))) (SMulWithZero.toSmulZeroClass.{u1, u2} R A (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))))) (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u1, u2} R A (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))) (Module.toMulActionWithZero.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))], NoZeroSMulDivisors.{u1, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (MulZeroClass.toHasZero.{u1} R (NonUnitalNonAssocSemiring.toMulZeroClass.{u1} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))))) (ZeroMemClass.zero.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3) (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddMonoidWithOne.toAddMonoid.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))) (AddSubmonoidClass.to_zeroMemClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (AddMonoid.toAddZeroClass.{u2} A (AddMonoidWithOne.toAddMonoid.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SubsemiringClass.to_addSubmonoidClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Semiring.toNonAssocSemiring.{u2} A _inst_2) (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Subalgebra.subsemiringClass.{u1, u2} R A _inst_1 _inst_2 _inst_3))) S) (SMulZeroClass.toHasSmul.{u1, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (AddZeroClass.toHasZero.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (AddMonoid.toAddZeroClass.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (AddCommMonoid.toAddMonoid.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (Semiring.toNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))))))) (SMulWithZero.toSmulZeroClass.{u1, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))))) (AddZeroClass.toHasZero.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (AddMonoid.toAddZeroClass.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (AddCommMonoid.toAddMonoid.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (Semiring.toNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))))))) (MulActionWithZero.toSMulWithZero.{u1, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (AddMonoid.toAddZeroClass.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (AddCommMonoid.toAddMonoid.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (Semiring.toNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))))))) (Module.toMulActionWithZero.{u1, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (Semiring.toNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Subalgebra.module.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) [_inst_8 : NoZeroSMulDivisors.{u1, u2} R A (CommMonoidWithZero.toZero.{u1} R (CommSemiring.toCommMonoidWithZero.{u1} R _inst_1)) (MonoidWithZero.toZero.{u2} A (Semiring.toMonoidWithZero.{u2} A _inst_2)) (Algebra.toSMul.{u1, u2} R A _inst_1 _inst_2 _inst_3)], NoZeroSMulDivisors.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (CommMonoidWithZero.toZero.{u1} R (CommSemiring.toCommMonoidWithZero.{u1} R _inst_1)) (ZeroMemClass.zero.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (MonoidWithZero.toZero.{u2} A (Semiring.toMonoidWithZero.{u2} A _inst_2)) (AddSubmonoidClass.toZeroMemClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (AddMonoid.toAddZeroClass.{u2} A (AddMonoidWithOne.toAddMonoid.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SubsemiringClass.toAddSubmonoidClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Semiring.toNonAssocSemiring.{u2} A _inst_2) (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Subalgebra.SubsemiringClass.{u1, u2} R A _inst_1 _inst_2 _inst_3))) S) (Algebra.toSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))
Case conversion may be inaccurate. Consider using '#align subalgebra.no_zero_smul_divisors_bot Subalgebra.noZeroSMulDivisors_botₓ'. -/
instance noZeroSMulDivisors_bot [NoZeroSMulDivisors R A] : NoZeroSMulDivisors R S :=
  ⟨fun c x h =>
    have : c = 0 ∨ (x : A) = 0 := eq_zero_or_eq_zero_of_smul_eq_zero (congr_arg coe h)
    this.imp_right (@Subtype.ext_iff _ _ x 0).mpr⟩
#align subalgebra.no_zero_smul_divisors_bot Subalgebra.noZeroSMulDivisors_bot

/- warning: subalgebra.coe_add -> Subalgebra.coe_add is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (x : coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (y : coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S), Eq.{succ u2} A ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeSubtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S))))) (HAdd.hAdd.{u2, u2, u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (instHAdd.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (AddMemClass.add.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (AddZeroClass.toHasAdd.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddMonoidWithOne.toAddMonoid.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))) (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3) (AddSubmonoidClass.to_addMemClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (AddMonoid.toAddZeroClass.{u2} A (AddMonoidWithOne.toAddMonoid.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SubsemiringClass.to_addSubmonoidClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Semiring.toNonAssocSemiring.{u2} A _inst_2) (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Subalgebra.subsemiringClass.{u1, u2} R A _inst_1 _inst_2 _inst_3))) S)) x y)) (HAdd.hAdd.{u2, u2, u2} A A A (instHAdd.{u2} A (Distrib.toHasAdd.{u2} A (NonUnitalNonAssocSemiring.toDistrib.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeSubtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S))))) x) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeSubtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S))))) y))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (x : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (y : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)), Eq.{succ u2} A (Subtype.val.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Set.{u2} A) (Set.instMembershipSet.{u2} A) x (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S)) (HAdd.hAdd.{u2, u2, u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (instHAdd.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Distrib.toAdd.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toDistrib.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subsemiring.toNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))) x y)) (HAdd.hAdd.{u2, u2, u2} A A A (instHAdd.{u2} A (Distrib.toAdd.{u2} A (NonUnitalNonAssocSemiring.toDistrib.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (Subtype.val.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Set.{u2} A) (Set.instMembershipSet.{u2} A) x (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S)) x) (Subtype.val.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Set.{u2} A) (Set.instMembershipSet.{u2} A) x (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S)) y))
Case conversion may be inaccurate. Consider using '#align subalgebra.coe_add Subalgebra.coe_addₓ'. -/
protected theorem coe_add (x y : S) : (↑(x + y) : A) = ↑x + ↑y :=
  rfl
#align subalgebra.coe_add Subalgebra.coe_add

/- warning: subalgebra.coe_mul -> Subalgebra.coe_mul is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (x : coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (y : coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S), Eq.{succ u2} A ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeSubtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S))))) (HMul.hMul.{u2, u2, u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (instHMul.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (MulMemClass.mul.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (MulOneClass.toHasMul.{u2} A (MulZeroOneClass.toMulOneClass.{u2} A (NonAssocSemiring.toMulZeroOneClass.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SubmonoidClass.to_mulMemClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (MulZeroOneClass.toMulOneClass.{u2} A (NonAssocSemiring.toMulZeroOneClass.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SubsemiringClass.to_submonoidClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Semiring.toNonAssocSemiring.{u2} A _inst_2) (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Subalgebra.subsemiringClass.{u1, u2} R A _inst_1 _inst_2 _inst_3))) S)) x y)) (HMul.hMul.{u2, u2, u2} A A A (instHMul.{u2} A (Distrib.toHasMul.{u2} A (NonUnitalNonAssocSemiring.toDistrib.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeSubtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S))))) x) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeSubtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S))))) y))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (x : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (y : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)), Eq.{succ u2} A (Subtype.val.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Set.{u2} A) (Set.instMembershipSet.{u2} A) x (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S)) (HMul.hMul.{u2, u2, u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (instHMul.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Submonoid.mul.{u2} A (MulZeroOneClass.toMulOneClass.{u2} A (NonAssocSemiring.toMulZeroOneClass.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Subsemiring.toSubmonoid.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) x y)) (HMul.hMul.{u2, u2, u2} A A A (instHMul.{u2} A (NonUnitalNonAssocSemiring.toMul.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (Subtype.val.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Set.{u2} A) (Set.instMembershipSet.{u2} A) x (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S)) x) (Subtype.val.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Set.{u2} A) (Set.instMembershipSet.{u2} A) x (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S)) y))
Case conversion may be inaccurate. Consider using '#align subalgebra.coe_mul Subalgebra.coe_mulₓ'. -/
protected theorem coe_mul (x y : S) : (↑(x * y) : A) = ↑x * ↑y :=
  rfl
#align subalgebra.coe_mul Subalgebra.coe_mul

/- warning: subalgebra.coe_zero -> Subalgebra.coe_zero is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), Eq.{succ u2} A ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeSubtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S))))) (OfNat.ofNat.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) 0 (OfNat.mk.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) 0 (Zero.zero.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (ZeroMemClass.zero.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3) (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddMonoidWithOne.toAddMonoid.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))) (AddSubmonoidClass.to_zeroMemClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (AddMonoid.toAddZeroClass.{u2} A (AddMonoidWithOne.toAddMonoid.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SubsemiringClass.to_addSubmonoidClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Semiring.toNonAssocSemiring.{u2} A _inst_2) (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Subalgebra.subsemiringClass.{u1, u2} R A _inst_1 _inst_2 _inst_3))) S))))) (OfNat.ofNat.{u2} A 0 (OfNat.mk.{u2} A 0 (Zero.zero.{u2} A (MulZeroClass.toHasZero.{u2} A (NonUnitalNonAssocSemiring.toMulZeroClass.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), Eq.{succ u2} A (Subtype.val.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Set.{u2} A) (Set.instMembershipSet.{u2} A) x (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S)) (OfNat.ofNat.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) 0 (Zero.toOfNat0.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (ZeroMemClass.zero.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (MonoidWithZero.toZero.{u2} A (Semiring.toMonoidWithZero.{u2} A _inst_2)) (AddSubmonoidClass.toZeroMemClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (AddMonoid.toAddZeroClass.{u2} A (AddMonoidWithOne.toAddMonoid.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SubsemiringClass.toAddSubmonoidClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Semiring.toNonAssocSemiring.{u2} A _inst_2) (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Subalgebra.SubsemiringClass.{u1, u2} R A _inst_1 _inst_2 _inst_3))) S)))) (OfNat.ofNat.{u2} A 0 (Zero.toOfNat0.{u2} A (MonoidWithZero.toZero.{u2} A (Semiring.toMonoidWithZero.{u2} A _inst_2))))
Case conversion may be inaccurate. Consider using '#align subalgebra.coe_zero Subalgebra.coe_zeroₓ'. -/
protected theorem coe_zero : ((0 : S) : A) = 0 :=
  rfl
#align subalgebra.coe_zero Subalgebra.coe_zero

#print Subalgebra.coe_one /-
protected theorem coe_one : ((1 : S) : A) = 1 :=
  rfl
#align subalgebra.coe_one Subalgebra.coe_one
-/

/- warning: subalgebra.coe_neg -> Subalgebra.coe_neg is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : Ring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9)] {S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10} (x : coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S), Eq.{succ u2} A ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (coeSubtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) x S))))) (Neg.neg.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) (AddSubgroupClass.neg.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (AddGroup.toSubNegMonoid.{u2} A (AddGroupWithOne.toAddGroup.{u2} A (NonAssocRing.toAddGroupWithOne.{u2} A (Ring.toNonAssocRing.{u2} A _inst_9)))) (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SubringClass.addSubgroupClass.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) _inst_9 (Subalgebra.subringClass.{u1, u2} R A _inst_8 _inst_9 _inst_10)) S) x)) (Neg.neg.{u2} A (SubNegMonoid.toHasNeg.{u2} A (AddGroup.toSubNegMonoid.{u2} A (AddGroupWithOne.toAddGroup.{u2} A (NonAssocRing.toAddGroupWithOne.{u2} A (Ring.toNonAssocRing.{u2} A _inst_9))))) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (coeSubtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) x S))))) x))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : Ring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9)] {S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10} (x : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) x S)), Eq.{succ u2} A (Subtype.val.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Set.{u2} A) (Set.instMembershipSet.{u2} A) x (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) S)) (Neg.neg.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) x S)) (AddSubgroupClass.neg.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (AddGroup.toSubNegMonoid.{u2} A (AddGroupWithOne.toAddGroup.{u2} A (Ring.toAddGroupWithOne.{u2} A _inst_9))) (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SubringClass.addSubgroupClass.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) _inst_9 (Subalgebra.instSubringClassSubalgebraToCommSemiringToSemiringInstSetLikeSubalgebra.{u1, u2} R A _inst_8 _inst_9 _inst_10)) S) x)) (Neg.neg.{u2} A (Ring.toNeg.{u2} A _inst_9) (Subtype.val.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Set.{u2} A) (Set.instMembershipSet.{u2} A) x (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) S)) x))
Case conversion may be inaccurate. Consider using '#align subalgebra.coe_neg Subalgebra.coe_negₓ'. -/
protected theorem coe_neg {R : Type u} {A : Type v} [CommRing R] [Ring A] [Algebra R A]
    {S : Subalgebra R A} (x : S) : (↑(-x) : A) = -↑x :=
  rfl
#align subalgebra.coe_neg Subalgebra.coe_neg

/- warning: subalgebra.coe_sub -> Subalgebra.coe_sub is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : Ring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9)] {S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10} (x : coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) (y : coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S), Eq.{succ u2} A ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (coeSubtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) x S))))) (HSub.hSub.{u2, u2, u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) (instHSub.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) (AddSubgroupClass.sub.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (AddGroup.toSubNegMonoid.{u2} A (AddGroupWithOne.toAddGroup.{u2} A (NonAssocRing.toAddGroupWithOne.{u2} A (Ring.toNonAssocRing.{u2} A _inst_9)))) (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SubringClass.addSubgroupClass.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) _inst_9 (Subalgebra.subringClass.{u1, u2} R A _inst_8 _inst_9 _inst_10)) S)) x y)) (HSub.hSub.{u2, u2, u2} A A A (instHSub.{u2} A (SubNegMonoid.toHasSub.{u2} A (AddGroup.toSubNegMonoid.{u2} A (AddGroupWithOne.toAddGroup.{u2} A (NonAssocRing.toAddGroupWithOne.{u2} A (Ring.toNonAssocRing.{u2} A _inst_9)))))) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (coeSubtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) x S))))) x) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (coeSubtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) x S))))) y))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : Ring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9)] {S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10} (x : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) x S)) (y : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) x S)), Eq.{succ u2} A (Subtype.val.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Set.{u2} A) (Set.instMembershipSet.{u2} A) x (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) S)) (HSub.hSub.{u2, u2, u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) x S)) (instHSub.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) x S)) (AddSubgroupClass.sub.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (AddGroup.toSubNegMonoid.{u2} A (AddGroupWithOne.toAddGroup.{u2} A (Ring.toAddGroupWithOne.{u2} A _inst_9))) (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) (SubringClass.addSubgroupClass.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) _inst_9 (Subalgebra.instSubringClassSubalgebraToCommSemiringToSemiringInstSetLikeSubalgebra.{u1, u2} R A _inst_8 _inst_9 _inst_10)) S)) x y)) (HSub.hSub.{u2, u2, u2} A A A (instHSub.{u2} A (Ring.toSub.{u2} A _inst_9)) (Subtype.val.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Set.{u2} A) (Set.instMembershipSet.{u2} A) x (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) S)) x) (Subtype.val.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Set.{u2} A) (Set.instMembershipSet.{u2} A) x (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) S)) y))
Case conversion may be inaccurate. Consider using '#align subalgebra.coe_sub Subalgebra.coe_subₓ'. -/
protected theorem coe_sub {R : Type u} {A : Type v} [CommRing R] [Ring A] [Algebra R A]
    {S : Subalgebra R A} (x y : S) : (↑(x - y) : A) = ↑x - ↑y :=
  rfl
#align subalgebra.coe_sub Subalgebra.coe_sub

/- warning: subalgebra.coe_smul -> Subalgebra.coe_smul is a dubious translation:
lean 3 declaration is
  forall {R' : Type.{u2}} {R : Type.{u1}} {A : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u3} A] [_inst_3 : Algebra.{u1, u3} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) [_inst_8 : Semiring.{u2} R'] [_inst_9 : SMul.{u2, u1} R' R] [_inst_10 : Module.{u2, u3} R' A _inst_8 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))] [_inst_11 : IsScalarTower.{u2, u1, u3} R' R A _inst_9 (SMulZeroClass.toHasSmul.{u1, u3} R A (AddZeroClass.toHasZero.{u3} A (AddMonoid.toAddZeroClass.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))))) (SMulWithZero.toSmulZeroClass.{u1, u3} R A (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))))) (AddZeroClass.toHasZero.{u3} A (AddMonoid.toAddZeroClass.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u1, u3} R A (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} A (AddMonoid.toAddZeroClass.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))))) (Module.toMulActionWithZero.{u1, u3} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u1, u3} R A _inst_1 _inst_2 _inst_3))))) (SMulZeroClass.toHasSmul.{u2, u3} R' A (AddZeroClass.toHasZero.{u3} A (AddMonoid.toAddZeroClass.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))))) (SMulWithZero.toSmulZeroClass.{u2, u3} R' A (MulZeroClass.toHasZero.{u2} R' (MulZeroOneClass.toMulZeroClass.{u2} R' (MonoidWithZero.toMulZeroOneClass.{u2} R' (Semiring.toMonoidWithZero.{u2} R' _inst_8)))) (AddZeroClass.toHasZero.{u3} A (AddMonoid.toAddZeroClass.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u2, u3} R' A (Semiring.toMonoidWithZero.{u2} R' _inst_8) (AddZeroClass.toHasZero.{u3} A (AddMonoid.toAddZeroClass.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))))) (Module.toMulActionWithZero.{u2, u3} R' A _inst_8 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) _inst_10))))] (r : R') (x : coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S), Eq.{succ u3} A ((fun (a : Type.{u3}) (b : Type.{u3}) [self : HasLiftT.{succ u3, succ u3} a b] => self.0) (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) A (HasLiftT.mk.{succ u3, succ u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) A (CoeTCₓ.coe.{succ u3, succ u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) A (coeBase.{succ u3, succ u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) A (coeSubtype.{succ u3} A (fun (x : A) => Membership.Mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S))))) (SMul.smul.{u2, u3} R' (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (SMulZeroClass.toHasSmul.{u2, u3} R' (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (AddZeroClass.toHasZero.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (AddMonoid.toAddZeroClass.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (AddCommMonoid.toAddMonoid.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (Semiring.toNonAssocSemiring.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (Subalgebra.toSemiring.{u1, u3} R A _inst_1 _inst_2 _inst_3 S))))))) (SMulWithZero.toSmulZeroClass.{u2, u3} R' (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (MulZeroClass.toHasZero.{u2} R' (MulZeroOneClass.toMulZeroClass.{u2} R' (MonoidWithZero.toMulZeroOneClass.{u2} R' (Semiring.toMonoidWithZero.{u2} R' _inst_8)))) (AddZeroClass.toHasZero.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (AddMonoid.toAddZeroClass.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (AddCommMonoid.toAddMonoid.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (Semiring.toNonAssocSemiring.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (Subalgebra.toSemiring.{u1, u3} R A _inst_1 _inst_2 _inst_3 S))))))) (MulActionWithZero.toSMulWithZero.{u2, u3} R' (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (Semiring.toMonoidWithZero.{u2} R' _inst_8) (AddZeroClass.toHasZero.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (AddMonoid.toAddZeroClass.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (AddCommMonoid.toAddMonoid.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (Semiring.toNonAssocSemiring.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (Subalgebra.toSemiring.{u1, u3} R A _inst_1 _inst_2 _inst_3 S))))))) (Module.toMulActionWithZero.{u2, u3} R' (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) _inst_8 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (Semiring.toNonAssocSemiring.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (Subalgebra.toSemiring.{u1, u3} R A _inst_1 _inst_2 _inst_3 S)))) (Subalgebra.module'.{u1, u2, u3} R' R A _inst_1 _inst_2 _inst_3 S _inst_8 _inst_9 _inst_10 _inst_11))))) r x)) (SMul.smul.{u2, u3} R' A (SMulZeroClass.toHasSmul.{u2, u3} R' A (AddZeroClass.toHasZero.{u3} A (AddMonoid.toAddZeroClass.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))))) (SMulWithZero.toSmulZeroClass.{u2, u3} R' A (MulZeroClass.toHasZero.{u2} R' (MulZeroOneClass.toMulZeroClass.{u2} R' (MonoidWithZero.toMulZeroOneClass.{u2} R' (Semiring.toMonoidWithZero.{u2} R' _inst_8)))) (AddZeroClass.toHasZero.{u3} A (AddMonoid.toAddZeroClass.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u2, u3} R' A (Semiring.toMonoidWithZero.{u2} R' _inst_8) (AddZeroClass.toHasZero.{u3} A (AddMonoid.toAddZeroClass.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))))) (Module.toMulActionWithZero.{u2, u3} R' A _inst_8 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) _inst_10)))) r ((fun (a : Type.{u3}) (b : Type.{u3}) [self : HasLiftT.{succ u3, succ u3} a b] => self.0) (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) A (HasLiftT.mk.{succ u3, succ u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) A (CoeTCₓ.coe.{succ u3, succ u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) A (coeBase.{succ u3, succ u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) A (coeSubtype.{succ u3} A (fun (x : A) => Membership.Mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S))))) x))
but is expected to have type
  forall {R' : Type.{u2}} {R : Type.{u1}} {A : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u3} A] [_inst_3 : Algebra.{u1, u3} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) [_inst_8 : Semiring.{u2} R'] [_inst_9 : SMul.{u2, u1} R' R] [_inst_10 : Module.{u2, u3} R' A _inst_8 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))] [_inst_11 : IsScalarTower.{u2, u1, u3} R' R A _inst_9 (Algebra.toSMul.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SMulZeroClass.toSMul.{u2, u3} R' A (MonoidWithZero.toZero.{u3} A (Semiring.toMonoidWithZero.{u3} A _inst_2)) (SMulWithZero.toSMulZeroClass.{u2, u3} R' A (MonoidWithZero.toZero.{u2} R' (Semiring.toMonoidWithZero.{u2} R' _inst_8)) (MonoidWithZero.toZero.{u3} A (Semiring.toMonoidWithZero.{u3} A _inst_2)) (MulActionWithZero.toSMulWithZero.{u2, u3} R' A (Semiring.toMonoidWithZero.{u2} R' _inst_8) (MonoidWithZero.toZero.{u3} A (Semiring.toMonoidWithZero.{u3} A _inst_2)) (Module.toMulActionWithZero.{u2, u3} R' A _inst_8 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) _inst_10))))] (r : R') (x : Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)), Eq.{succ u3} A (Subtype.val.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Set.{u3} A) (Set.instMembershipSet.{u3} A) x (SetLike.coe.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) S)) (HSMul.hSMul.{u2, u3, u3} R' (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (instHSMul.{u2, u3} R' (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (SMulZeroClass.toSMul.{u2, u3} R' (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (ZeroMemClass.zero.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (MonoidWithZero.toZero.{u3} A (Semiring.toMonoidWithZero.{u3} A _inst_2)) (AddSubmonoidClass.toZeroMemClass.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (AddMonoid.toAddZeroClass.{u3} A (AddMonoidWithOne.toAddMonoid.{u3} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u3} A (NonAssocSemiring.toAddCommMonoidWithOne.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))))) (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SubsemiringClass.toAddSubmonoidClass.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Semiring.toNonAssocSemiring.{u3} A _inst_2) (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (Subalgebra.SubsemiringClass.{u1, u3} R A _inst_1 _inst_2 _inst_3))) S) (SMulWithZero.toSMulZeroClass.{u2, u3} R' (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (MonoidWithZero.toZero.{u2} R' (Semiring.toMonoidWithZero.{u2} R' _inst_8)) (ZeroMemClass.zero.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (MonoidWithZero.toZero.{u3} A (Semiring.toMonoidWithZero.{u3} A _inst_2)) (AddSubmonoidClass.toZeroMemClass.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (AddMonoid.toAddZeroClass.{u3} A (AddMonoidWithOne.toAddMonoid.{u3} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u3} A (NonAssocSemiring.toAddCommMonoidWithOne.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))))) (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SubsemiringClass.toAddSubmonoidClass.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Semiring.toNonAssocSemiring.{u3} A _inst_2) (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (Subalgebra.SubsemiringClass.{u1, u3} R A _inst_1 _inst_2 _inst_3))) S) (MulActionWithZero.toSMulWithZero.{u2, u3} R' (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toMonoidWithZero.{u2} R' _inst_8) (ZeroMemClass.zero.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (MonoidWithZero.toZero.{u3} A (Semiring.toMonoidWithZero.{u3} A _inst_2)) (AddSubmonoidClass.toZeroMemClass.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (AddMonoid.toAddZeroClass.{u3} A (AddMonoidWithOne.toAddMonoid.{u3} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u3} A (NonAssocSemiring.toAddCommMonoidWithOne.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))))) (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SubsemiringClass.toAddSubmonoidClass.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Semiring.toNonAssocSemiring.{u3} A _inst_2) (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (Subalgebra.SubsemiringClass.{u1, u3} R A _inst_1 _inst_2 _inst_3))) S) (Module.toMulActionWithZero.{u2, u3} R' (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_8 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (Subsemiring.toNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2) (Subalgebra.toSubsemiring.{u1, u3} R A _inst_1 _inst_2 _inst_3 S)))) (Subalgebra.module'.{u1, u2, u3} R' R A _inst_1 _inst_2 _inst_3 S _inst_8 _inst_9 _inst_10 _inst_11)))))) r x)) (HSMul.hSMul.{u2, u3, u3} R' A A (instHSMul.{u2, u3} R' A (SMulZeroClass.toSMul.{u2, u3} R' A (MonoidWithZero.toZero.{u3} A (Semiring.toMonoidWithZero.{u3} A _inst_2)) (SMulWithZero.toSMulZeroClass.{u2, u3} R' A (MonoidWithZero.toZero.{u2} R' (Semiring.toMonoidWithZero.{u2} R' _inst_8)) (MonoidWithZero.toZero.{u3} A (Semiring.toMonoidWithZero.{u3} A _inst_2)) (MulActionWithZero.toSMulWithZero.{u2, u3} R' A (Semiring.toMonoidWithZero.{u2} R' _inst_8) (MonoidWithZero.toZero.{u3} A (Semiring.toMonoidWithZero.{u3} A _inst_2)) (Module.toMulActionWithZero.{u2, u3} R' A _inst_8 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) _inst_10))))) r (Subtype.val.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Set.{u3} A) (Set.instMembershipSet.{u3} A) x (SetLike.coe.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) S)) x))
Case conversion may be inaccurate. Consider using '#align subalgebra.coe_smul Subalgebra.coe_smulₓ'. -/
@[simp, norm_cast]
theorem coe_smul [Semiring R'] [SMul R' R] [Module R' A] [IsScalarTower R' R A] (r : R') (x : S) :
    (↑(r • x) : A) = r • ↑x :=
  rfl
#align subalgebra.coe_smul Subalgebra.coe_smul

/- warning: subalgebra.coe_algebra_map -> Subalgebra.coe_algebraMap is a dubious translation:
lean 3 declaration is
  forall {R' : Type.{u2}} {R : Type.{u1}} {A : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u3} A] [_inst_3 : Algebra.{u1, u3} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) [_inst_8 : CommSemiring.{u2} R'] [_inst_9 : SMul.{u2, u1} R' R] [_inst_10 : Algebra.{u2, u3} R' A _inst_8 _inst_2] [_inst_11 : IsScalarTower.{u2, u1, u3} R' R A _inst_9 (SMulZeroClass.toHasSmul.{u1, u3} R A (AddZeroClass.toHasZero.{u3} A (AddMonoid.toAddZeroClass.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))))) (SMulWithZero.toSmulZeroClass.{u1, u3} R A (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))))) (AddZeroClass.toHasZero.{u3} A (AddMonoid.toAddZeroClass.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u1, u3} R A (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} A (AddMonoid.toAddZeroClass.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))))) (Module.toMulActionWithZero.{u1, u3} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u1, u3} R A _inst_1 _inst_2 _inst_3))))) (SMulZeroClass.toHasSmul.{u2, u3} R' A (AddZeroClass.toHasZero.{u3} A (AddMonoid.toAddZeroClass.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))))) (SMulWithZero.toSmulZeroClass.{u2, u3} R' A (MulZeroClass.toHasZero.{u2} R' (MulZeroOneClass.toMulZeroClass.{u2} R' (MonoidWithZero.toMulZeroOneClass.{u2} R' (Semiring.toMonoidWithZero.{u2} R' (CommSemiring.toSemiring.{u2} R' _inst_8))))) (AddZeroClass.toHasZero.{u3} A (AddMonoid.toAddZeroClass.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u2, u3} R' A (Semiring.toMonoidWithZero.{u2} R' (CommSemiring.toSemiring.{u2} R' _inst_8)) (AddZeroClass.toHasZero.{u3} A (AddMonoid.toAddZeroClass.{u3} A (AddCommMonoid.toAddMonoid.{u3} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)))))) (Module.toMulActionWithZero.{u2, u3} R' A (CommSemiring.toSemiring.{u2} R' _inst_8) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R' A _inst_8 _inst_2 _inst_10)))))] (r : R'), Eq.{succ u3} A ((fun (a : Type.{u3}) (b : Type.{u3}) [self : HasLiftT.{succ u3, succ u3} a b] => self.0) (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) A (HasLiftT.mk.{succ u3, succ u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) A (CoeTCₓ.coe.{succ u3, succ u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) A (coeBase.{succ u3, succ u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) A (coeSubtype.{succ u3} A (fun (x : A) => Membership.Mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S))))) (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (RingHom.{u2, u3} R' (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (Semiring.toNonAssocSemiring.{u2} R' (CommSemiring.toSemiring.{u2} R' _inst_8)) (Semiring.toNonAssocSemiring.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (Subalgebra.toSemiring.{u1, u3} R A _inst_1 _inst_2 _inst_3 S))) (fun (_x : RingHom.{u2, u3} R' (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (Semiring.toNonAssocSemiring.{u2} R' (CommSemiring.toSemiring.{u2} R' _inst_8)) (Semiring.toNonAssocSemiring.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (Subalgebra.toSemiring.{u1, u3} R A _inst_1 _inst_2 _inst_3 S))) => R' -> (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S)) (RingHom.hasCoeToFun.{u2, u3} R' (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (Semiring.toNonAssocSemiring.{u2} R' (CommSemiring.toSemiring.{u2} R' _inst_8)) (Semiring.toNonAssocSemiring.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) (Subalgebra.toSemiring.{u1, u3} R A _inst_1 _inst_2 _inst_3 S))) (algebraMap.{u2, u3} R' (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u3} R A _inst_1 _inst_2 _inst_3)) S) _inst_8 (Subalgebra.toSemiring.{u1, u3} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra'.{u1, u2, u3} R' R A _inst_1 _inst_2 _inst_3 S _inst_8 _inst_9 _inst_10 _inst_11)) r)) (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (RingHom.{u2, u3} R' A (Semiring.toNonAssocSemiring.{u2} R' (CommSemiring.toSemiring.{u2} R' _inst_8)) (Semiring.toNonAssocSemiring.{u3} A _inst_2)) (fun (_x : RingHom.{u2, u3} R' A (Semiring.toNonAssocSemiring.{u2} R' (CommSemiring.toSemiring.{u2} R' _inst_8)) (Semiring.toNonAssocSemiring.{u3} A _inst_2)) => R' -> A) (RingHom.hasCoeToFun.{u2, u3} R' A (Semiring.toNonAssocSemiring.{u2} R' (CommSemiring.toSemiring.{u2} R' _inst_8)) (Semiring.toNonAssocSemiring.{u3} A _inst_2)) (algebraMap.{u2, u3} R' A _inst_8 _inst_2 _inst_10) r)
but is expected to have type
  forall {R' : Type.{u2}} {R : Type.{u1}} {A : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u3} A] [_inst_3 : Algebra.{u1, u3} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) [_inst_8 : CommSemiring.{u2} R'] [_inst_9 : SMul.{u2, u1} R' R] [_inst_10 : Algebra.{u2, u3} R' A _inst_8 _inst_2] [_inst_11 : IsScalarTower.{u2, u1, u3} R' R A _inst_9 (Algebra.toSMul.{u1, u3} R A _inst_1 _inst_2 _inst_3) (Algebra.toSMul.{u2, u3} R' A _inst_8 _inst_2 _inst_10)] (r : R'), Eq.{succ u3} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R') => A) r) (Subtype.val.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Set.{u3} A) (Set.instMembershipSet.{u3} A) x (SetLike.coe.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) S)) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (RingHom.{u2, u3} R' (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} R' (CommSemiring.toSemiring.{u2} R' _inst_8)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u3} R A _inst_1 _inst_2 _inst_3 S))) R' (fun (_x : R') => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R') => Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) _x) (MulHomClass.toFunLike.{max u2 u3, u2, u3} (RingHom.{u2, u3} R' (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} R' (CommSemiring.toSemiring.{u2} R' _inst_8)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u3} R A _inst_1 _inst_2 _inst_3 S))) R' (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toMul.{u2} R' (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} R' (Semiring.toNonAssocSemiring.{u2} R' (CommSemiring.toSemiring.{u2} R' _inst_8)))) (NonUnitalNonAssocSemiring.toMul.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u3} R A _inst_1 _inst_2 _inst_3 S)))) (NonUnitalRingHomClass.toMulHomClass.{max u2 u3, u2, u3} (RingHom.{u2, u3} R' (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} R' (CommSemiring.toSemiring.{u2} R' _inst_8)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u3} R A _inst_1 _inst_2 _inst_3 S))) R' (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} R' (Semiring.toNonAssocSemiring.{u2} R' (CommSemiring.toSemiring.{u2} R' _inst_8))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u3} R A _inst_1 _inst_2 _inst_3 S))) (RingHomClass.toNonUnitalRingHomClass.{max u2 u3, u2, u3} (RingHom.{u2, u3} R' (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} R' (CommSemiring.toSemiring.{u2} R' _inst_8)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u3} R A _inst_1 _inst_2 _inst_3 S))) R' (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} R' (CommSemiring.toSemiring.{u2} R' _inst_8)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u3} R A _inst_1 _inst_2 _inst_3 S)) (RingHom.instRingHomClassRingHom.{u2, u3} R' (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} R' (CommSemiring.toSemiring.{u2} R' _inst_8)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u3} R A _inst_1 _inst_2 _inst_3 S)))))) (algebraMap.{u2, u3} R' (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u3} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_8 (Subalgebra.toSemiring.{u1, u3} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra'.{u1, u2, u3} R' R A _inst_1 _inst_2 _inst_3 S _inst_8 _inst_9 _inst_10 _inst_11)) r)) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (RingHom.{u2, u3} R' A (Semiring.toNonAssocSemiring.{u2} R' (CommSemiring.toSemiring.{u2} R' _inst_8)) (Semiring.toNonAssocSemiring.{u3} A _inst_2)) R' (fun (_x : R') => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R') => A) _x) (MulHomClass.toFunLike.{max u2 u3, u2, u3} (RingHom.{u2, u3} R' A (Semiring.toNonAssocSemiring.{u2} R' (CommSemiring.toSemiring.{u2} R' _inst_8)) (Semiring.toNonAssocSemiring.{u3} A _inst_2)) R' A (NonUnitalNonAssocSemiring.toMul.{u2} R' (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} R' (Semiring.toNonAssocSemiring.{u2} R' (CommSemiring.toSemiring.{u2} R' _inst_8)))) (NonUnitalNonAssocSemiring.toMul.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (NonUnitalRingHomClass.toMulHomClass.{max u2 u3, u2, u3} (RingHom.{u2, u3} R' A (Semiring.toNonAssocSemiring.{u2} R' (CommSemiring.toSemiring.{u2} R' _inst_8)) (Semiring.toNonAssocSemiring.{u3} A _inst_2)) R' A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} R' (Semiring.toNonAssocSemiring.{u2} R' (CommSemiring.toSemiring.{u2} R' _inst_8))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2)) (RingHomClass.toNonUnitalRingHomClass.{max u2 u3, u2, u3} (RingHom.{u2, u3} R' A (Semiring.toNonAssocSemiring.{u2} R' (CommSemiring.toSemiring.{u2} R' _inst_8)) (Semiring.toNonAssocSemiring.{u3} A _inst_2)) R' A (Semiring.toNonAssocSemiring.{u2} R' (CommSemiring.toSemiring.{u2} R' _inst_8)) (Semiring.toNonAssocSemiring.{u3} A _inst_2) (RingHom.instRingHomClassRingHom.{u2, u3} R' A (Semiring.toNonAssocSemiring.{u2} R' (CommSemiring.toSemiring.{u2} R' _inst_8)) (Semiring.toNonAssocSemiring.{u3} A _inst_2))))) (algebraMap.{u2, u3} R' A _inst_8 _inst_2 _inst_10) r)
Case conversion may be inaccurate. Consider using '#align subalgebra.coe_algebra_map Subalgebra.coe_algebraMapₓ'. -/
@[simp, norm_cast]
theorem coe_algebraMap [CommSemiring R'] [SMul R' R] [Algebra R' A] [IsScalarTower R' R A]
    (r : R') : ↑(algebraMap R' S r) = algebraMap R' A r :=
  rfl
#align subalgebra.coe_algebra_map Subalgebra.coe_algebraMap

/- warning: subalgebra.coe_pow -> Subalgebra.coe_pow is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (x : coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (n : Nat), Eq.{succ u2} A ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeSubtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S))))) (HPow.hPow.{u2, 0, u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) Nat (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (instHPow.{u2, 0} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) Nat (SubmonoidClass.nPow.{u2, u2} A (MonoidWithZero.toMonoid.{u2} A (Semiring.toMonoidWithZero.{u2} A _inst_2)) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SubsemiringClass.to_submonoidClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Semiring.toNonAssocSemiring.{u2} A _inst_2) (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Subalgebra.subsemiringClass.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S)) x n)) (HPow.hPow.{u2, 0, u2} A Nat A (instHPow.{u2, 0} A Nat (Monoid.Pow.{u2} A (MonoidWithZero.toMonoid.{u2} A (Semiring.toMonoidWithZero.{u2} A _inst_2)))) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeSubtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S))))) x) n)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (x : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (n : Nat), Eq.{succ u2} A (Subtype.val.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Set.{u2} A) (Set.instMembershipSet.{u2} A) x (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S)) (HPow.hPow.{u2, 0, u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) Nat (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (instHPow.{u2, 0} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) Nat (SubmonoidClass.nPow.{u2, u2} A (MonoidWithZero.toMonoid.{u2} A (Semiring.toMonoidWithZero.{u2} A _inst_2)) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SubsemiringClass.toSubmonoidClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Semiring.toNonAssocSemiring.{u2} A _inst_2) (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Subalgebra.SubsemiringClass.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S)) x n)) (HPow.hPow.{u2, 0, u2} A Nat A (instHPow.{u2, 0} A Nat (Monoid.Pow.{u2} A (MonoidWithZero.toMonoid.{u2} A (Semiring.toMonoidWithZero.{u2} A _inst_2)))) (Subtype.val.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Set.{u2} A) (Set.instMembershipSet.{u2} A) x (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S)) x) n)
Case conversion may be inaccurate. Consider using '#align subalgebra.coe_pow Subalgebra.coe_powₓ'. -/
protected theorem coe_pow (x : S) (n : ℕ) : (↑(x ^ n) : A) = ↑x ^ n :=
  SubmonoidClass.coe_pow x n
#align subalgebra.coe_pow Subalgebra.coe_pow

/- warning: subalgebra.coe_eq_zero -> Subalgebra.coe_eq_zero is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) {x : coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S}, Iff (Eq.{succ u2} A ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeSubtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S))))) x) (OfNat.ofNat.{u2} A 0 (OfNat.mk.{u2} A 0 (Zero.zero.{u2} A (MulZeroClass.toHasZero.{u2} A (NonUnitalNonAssocSemiring.toMulZeroClass.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))))) (Eq.{succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) x (OfNat.ofNat.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) 0 (OfNat.mk.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) 0 (Zero.zero.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (ZeroMemClass.zero.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3) (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddMonoidWithOne.toAddMonoid.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))) (AddSubmonoidClass.to_zeroMemClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (AddMonoid.toAddZeroClass.{u2} A (AddMonoidWithOne.toAddMonoid.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SubsemiringClass.to_addSubmonoidClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Semiring.toNonAssocSemiring.{u2} A _inst_2) (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Subalgebra.subsemiringClass.{u1, u2} R A _inst_1 _inst_2 _inst_3))) S)))))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) {x : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)}, Iff (Eq.{succ u2} A (Subtype.val.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Set.{u2} A) (Set.instMembershipSet.{u2} A) x (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S)) x) (OfNat.ofNat.{u2} A 0 (Zero.toOfNat0.{u2} A (MonoidWithZero.toZero.{u2} A (Semiring.toMonoidWithZero.{u2} A _inst_2))))) (Eq.{succ u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) x (OfNat.ofNat.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) 0 (Zero.toOfNat0.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (ZeroMemClass.zero.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (MonoidWithZero.toZero.{u2} A (Semiring.toMonoidWithZero.{u2} A _inst_2)) (AddSubmonoidClass.toZeroMemClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (AddMonoid.toAddZeroClass.{u2} A (AddMonoidWithOne.toAddMonoid.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SubsemiringClass.toAddSubmonoidClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Semiring.toNonAssocSemiring.{u2} A _inst_2) (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Subalgebra.SubsemiringClass.{u1, u2} R A _inst_1 _inst_2 _inst_3))) S))))
Case conversion may be inaccurate. Consider using '#align subalgebra.coe_eq_zero Subalgebra.coe_eq_zeroₓ'. -/
protected theorem coe_eq_zero {x : S} : (x : A) = 0 ↔ x = 0 :=
  ZeroMemClass.coe_eq_zero
#align subalgebra.coe_eq_zero Subalgebra.coe_eq_zero

/- warning: subalgebra.coe_eq_one -> Subalgebra.coe_eq_one is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) {x : coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S}, Iff (Eq.{succ u2} A ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeSubtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S))))) x) (OfNat.ofNat.{u2} A 1 (OfNat.mk.{u2} A 1 (One.one.{u2} A (AddMonoidWithOne.toOne.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))))) (Eq.{succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) x (OfNat.ofNat.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) 1 (OfNat.mk.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) 1 (One.one.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (OneMemClass.one.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3) (AddMonoidWithOne.toOne.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (AddSubmonoidWithOneClass.to_oneMemClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SubsemiringClass.addSubmonoidWithOneClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Semiring.toNonAssocSemiring.{u2} A _inst_2) (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Subalgebra.subsemiringClass.{u1, u2} R A _inst_1 _inst_2 _inst_3))) S)))))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) {x : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)}, Iff (Eq.{succ u2} A (Subtype.val.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Set.{u2} A) (Set.instMembershipSet.{u2} A) x (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S)) x) (OfNat.ofNat.{u2} A 1 (One.toOfNat1.{u2} A (Semiring.toOne.{u2} A _inst_2)))) (Eq.{succ u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) x (OfNat.ofNat.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) 1 (One.toOfNat1.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Submonoid.one.{u2} A (MulZeroOneClass.toMulOneClass.{u2} A (NonAssocSemiring.toMulZeroOneClass.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Subsemiring.toSubmonoid.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))))))
Case conversion may be inaccurate. Consider using '#align subalgebra.coe_eq_one Subalgebra.coe_eq_oneₓ'. -/
protected theorem coe_eq_one {x : S} : (x : A) = 1 ↔ x = 1 :=
  OneMemClass.coe_eq_one
#align subalgebra.coe_eq_one Subalgebra.coe_eq_one

/- warning: subalgebra.val -> Subalgebra.val is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3
Case conversion may be inaccurate. Consider using '#align subalgebra.val Subalgebra.valₓ'. -/
-- todo: standardize on the names these morphisms
-- compare with submodule.subtype
/-- Embedding of a subalgebra into the algebra. -/
def val : S →ₐ[R] A := by refine_struct { toFun := (coe : S → A) } <;> intros <;> rfl
#align subalgebra.val Subalgebra.val

/- warning: subalgebra.coe_val -> Subalgebra.coe_val is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), Eq.{succ u2} ((fun (_x : AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3) => (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) -> A) (Subalgebra.val.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)) (coeFn.{succ u2, succ u2} (AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3) (fun (_x : AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3) => (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) -> A) ([anonymous].{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3) (Subalgebra.val.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeSubtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S))))))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), Eq.{succ u2} (forall (a : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)), (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) => A) a) (FunLike.coe.{succ u2, succ u2, succ u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (fun (_x : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) => A) _x) (SMulHomClass.toFunLike.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) A (SMulZeroClass.toSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddMonoid.toZero.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))) (DistribSMul.toSMulZeroClass.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddMonoid.toAddZeroClass.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))) (DistribMulAction.toDistribSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))) (SMulZeroClass.toSMul.{u1, u2} R A (AddMonoid.toZero.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribSMul.toSMulZeroClass.{u1, u2} R A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribMulAction.toDistribSMul.{u1, u2} R A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (DistribMulActionHomClass.toSMulHomClass.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u2, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3 (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3) (AlgHom.algHomClass.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3))))) (Subalgebra.val.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)) (Subtype.val.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Set.{u2} A) (Set.instMembershipSet.{u2} A) x (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S)))
Case conversion may be inaccurate. Consider using '#align subalgebra.coe_val Subalgebra.coe_valₓ'. -/
@[simp]
theorem coe_val : (S.val : S → A) = coe :=
  rfl
#align subalgebra.coe_val Subalgebra.coe_val

/- warning: subalgebra.val_apply -> Subalgebra.val_apply is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (x : coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S), Eq.{succ u2} A (coeFn.{succ u2, succ u2} (AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3) (fun (_x : AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3) => (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) -> A) ([anonymous].{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3) (Subalgebra.val.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) x) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeSubtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S))))) x)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (x : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)), Eq.{succ u2} ((fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) => A) x) (FunLike.coe.{succ u2, succ u2, succ u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (fun (_x : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) => A) _x) (SMulHomClass.toFunLike.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) A (SMulZeroClass.toSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddMonoid.toZero.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))) (DistribSMul.toSMulZeroClass.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddMonoid.toAddZeroClass.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))) (DistribMulAction.toDistribSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))) (SMulZeroClass.toSMul.{u1, u2} R A (AddMonoid.toZero.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribSMul.toSMulZeroClass.{u1, u2} R A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribMulAction.toDistribSMul.{u1, u2} R A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (DistribMulActionHomClass.toSMulHomClass.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u2, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3 (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3) (AlgHom.algHomClass.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3))))) (Subalgebra.val.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) x) (Subtype.val.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Set.{u2} A) (Set.instMembershipSet.{u2} A) x (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S)) x)
Case conversion may be inaccurate. Consider using '#align subalgebra.val_apply Subalgebra.val_applyₓ'. -/
theorem val_apply (x : S) : S.val x = (x : A) :=
  rfl
#align subalgebra.val_apply Subalgebra.val_apply

/- warning: subalgebra.to_subsemiring_subtype -> Subalgebra.toSubsemiring_subtype is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), Eq.{succ u2} (RingHom.{u2, u2} (coeSort.{succ u2, succ (succ u2)} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) A (Subsemiring.setLike.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)) A (Subsemiring.toNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Subsemiring.subtype.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3) (RingHom.{u2, u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (Semiring.toNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (HasLiftT.mk.{succ u2, succ u2} (AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3) (RingHom.{u2, u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (Semiring.toNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (CoeTCₓ.coe.{succ u2, succ u2} (AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3) (RingHom.{u2, u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (Semiring.toNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (RingHom.hasCoeT.{u2, u2, u2} (AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (Semiring.toNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)) (Semiring.toNonAssocSemiring.{u2} A _inst_2) (AlgHomClass.toRingHomClass.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3) R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3 (AlgHom.algHomClass.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3))))) (Subalgebra.val.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), Eq.{succ u2} (RingHom.{u2, u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (SetLike.instMembership.{u2, u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) A (Subsemiring.instSetLikeSubsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) x (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))) A (Subsemiring.toNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Subsemiring.subtype.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)) (RingHomClass.toRingHom.{u2, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) A (Subsemiring.toNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)) (Semiring.toNonAssocSemiring.{u2} A _inst_2) (AlgHomClass.toRingHomClass.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3 (AlgHom.algHomClass.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_2 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_3)) (Subalgebra.val.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))
Case conversion may be inaccurate. Consider using '#align subalgebra.to_subsemiring_subtype Subalgebra.toSubsemiring_subtypeₓ'. -/
@[simp]
theorem toSubsemiring_subtype : S.toSubsemiring.Subtype = (S.val : S →+* A) :=
  rfl
#align subalgebra.to_subsemiring_subtype Subalgebra.toSubsemiring_subtype

/- warning: subalgebra.to_subring_subtype -> Subalgebra.toSubring_subtype is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : Ring.{u2} A] [_inst_10 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9)] (S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10), Eq.{succ u2} (RingHom.{u2, u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} A _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} A _inst_9) A (Subring.setLike.{u2} A _inst_9)) (Subalgebra.toSubring.{u1, u2} R A _inst_8 _inst_9 _inst_10 S)) A (NonAssocRing.toNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} A _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} A _inst_9) A (Subring.setLike.{u2} A _inst_9)) (Subalgebra.toSubring.{u1, u2} R A _inst_8 _inst_9 _inst_10 S)) (Ring.toNonAssocRing.{u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} A _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} A _inst_9) A (Subring.setLike.{u2} A _inst_9)) (Subalgebra.toSubring.{u1, u2} R A _inst_8 _inst_9 _inst_10 S)) (Subring.toRing.{u2} A _inst_9 (Subalgebra.toSubring.{u1, u2} R A _inst_8 _inst_9 _inst_10 S)))) (NonAssocRing.toNonAssocSemiring.{u2} A (Ring.toNonAssocRing.{u2} A _inst_9))) (Subring.subtype.{u2} A _inst_9 (Subalgebra.toSubring.{u1, u2} R A _inst_8 _inst_9 _inst_10 S)) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (CommRing.toCommSemiring.{u1} R _inst_8) (Subalgebra.toSemiring.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10 S) (Ring.toSemiring.{u2} A _inst_9) (Subalgebra.algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10 S) _inst_10) (RingHom.{u2, u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (NonAssocRing.toNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) (Ring.toNonAssocRing.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) (Subalgebra.toRing.{u1, u2} R A _inst_8 _inst_9 _inst_10 S))) (NonAssocRing.toNonAssocSemiring.{u2} A (Ring.toNonAssocRing.{u2} A _inst_9))) (HasLiftT.mk.{succ u2, succ u2} (AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (CommRing.toCommSemiring.{u1} R _inst_8) (Subalgebra.toSemiring.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10 S) (Ring.toSemiring.{u2} A _inst_9) (Subalgebra.algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10 S) _inst_10) (RingHom.{u2, u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (NonAssocRing.toNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) (Ring.toNonAssocRing.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) (Subalgebra.toRing.{u1, u2} R A _inst_8 _inst_9 _inst_10 S))) (NonAssocRing.toNonAssocSemiring.{u2} A (Ring.toNonAssocRing.{u2} A _inst_9))) (CoeTCₓ.coe.{succ u2, succ u2} (AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (CommRing.toCommSemiring.{u1} R _inst_8) (Subalgebra.toSemiring.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10 S) (Ring.toSemiring.{u2} A _inst_9) (Subalgebra.algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10 S) _inst_10) (RingHom.{u2, u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (NonAssocRing.toNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) (Ring.toNonAssocRing.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) (Subalgebra.toRing.{u1, u2} R A _inst_8 _inst_9 _inst_10 S))) (NonAssocRing.toNonAssocSemiring.{u2} A (Ring.toNonAssocRing.{u2} A _inst_9))) (RingHom.hasCoeT.{u2, u2, u2} (AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (CommRing.toCommSemiring.{u1} R _inst_8) (Subalgebra.toSemiring.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10 S) (Ring.toSemiring.{u2} A _inst_9) (Subalgebra.algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10 S) _inst_10) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (NonAssocRing.toNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) (Ring.toNonAssocRing.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) (Subalgebra.toRing.{u1, u2} R A _inst_8 _inst_9 _inst_10 S))) (NonAssocRing.toNonAssocSemiring.{u2} A (Ring.toNonAssocRing.{u2} A _inst_9)) (AlgHomClass.toRingHomClass.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (CommRing.toCommSemiring.{u1} R _inst_8) (Subalgebra.toSemiring.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10 S) (Ring.toSemiring.{u2} A _inst_9) (Subalgebra.algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10 S) _inst_10) R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (CommRing.toCommSemiring.{u1} R _inst_8) (Subalgebra.toSemiring.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10 S) (Ring.toSemiring.{u2} A _inst_9) (Subalgebra.algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10 S) _inst_10 (AlgHom.algHomClass.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10)) S) A (CommRing.toCommSemiring.{u1} R _inst_8) (Subalgebra.toSemiring.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10 S) (Ring.toSemiring.{u2} A _inst_9) (Subalgebra.algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10 S) _inst_10))))) (Subalgebra.val.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_10 S))
but is expected to have type
  forall {R : Type.{u2}} {A : Type.{u1}} [_inst_8 : CommRing.{u2} R] [_inst_9 : Ring.{u1} A] [_inst_10 : Algebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_8) (Ring.toSemiring.{u1} A _inst_9)] (S : Subalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_8) (Ring.toSemiring.{u1} A _inst_9) _inst_10), Eq.{succ u1} (RingHom.{u1, u1} (Subtype.{succ u1} A (fun (x : A) => Membership.mem.{u1, u1} A (Subring.{u1} A _inst_9) (SetLike.instMembership.{u1, u1} (Subring.{u1} A _inst_9) A (Subring.instSetLikeSubring.{u1} A _inst_9)) x (Subalgebra.toSubring.{u2, u1} R A _inst_8 _inst_9 _inst_10 S))) A (Subsemiring.toNonAssocSemiring.{u1} A (NonAssocRing.toNonAssocSemiring.{u1} A (Ring.toNonAssocRing.{u1} A _inst_9)) (Subring.toSubsemiring.{u1} A _inst_9 (Subalgebra.toSubring.{u2, u1} R A _inst_8 _inst_9 _inst_10 S))) (NonAssocRing.toNonAssocSemiring.{u1} A (Ring.toNonAssocRing.{u1} A _inst_9))) (Subring.subtype.{u1} A _inst_9 (Subalgebra.toSubring.{u2, u1} R A _inst_8 _inst_9 _inst_10 S)) (RingHomClass.toRingHom.{u1, u1, u1} (AlgHom.{u2, u1, u1} R (Subtype.{succ u1} A (fun (x : A) => Membership.mem.{u1, u1} A (Subalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_8) (Ring.toSemiring.{u1} A _inst_9) _inst_10) (SetLike.instMembership.{u1, u1} (Subalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_8) (Ring.toSemiring.{u1} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_8) (Ring.toSemiring.{u1} A _inst_9) _inst_10)) x S)) A (CommRing.toCommSemiring.{u2} R _inst_8) (Subalgebra.toSemiring.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_8) (Ring.toSemiring.{u1} A _inst_9) _inst_10 S) (Ring.toSemiring.{u1} A _inst_9) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_8) (Ring.toSemiring.{u1} A _inst_9) _inst_10 S) _inst_10) (Subtype.{succ u1} A (fun (x : A) => Membership.mem.{u1, u1} A (Subalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_8) (Ring.toSemiring.{u1} A _inst_9) _inst_10) (SetLike.instMembership.{u1, u1} (Subalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_8) (Ring.toSemiring.{u1} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_8) (Ring.toSemiring.{u1} A _inst_9) _inst_10)) x S)) A (Subsemiring.toNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A (Ring.toSemiring.{u1} A _inst_9)) (Subalgebra.toSubsemiring.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_8) (Ring.toSemiring.{u1} A _inst_9) _inst_10 S)) (Semiring.toNonAssocSemiring.{u1} A (Ring.toSemiring.{u1} A _inst_9)) (AlgHomClass.toRingHomClass.{u1, u2, u1, u1} (AlgHom.{u2, u1, u1} R (Subtype.{succ u1} A (fun (x : A) => Membership.mem.{u1, u1} A (Subalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_8) (Ring.toSemiring.{u1} A _inst_9) _inst_10) (SetLike.instMembership.{u1, u1} (Subalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_8) (Ring.toSemiring.{u1} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_8) (Ring.toSemiring.{u1} A _inst_9) _inst_10)) x S)) A (CommRing.toCommSemiring.{u2} R _inst_8) (Subalgebra.toSemiring.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_8) (Ring.toSemiring.{u1} A _inst_9) _inst_10 S) (Ring.toSemiring.{u1} A _inst_9) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_8) (Ring.toSemiring.{u1} A _inst_9) _inst_10 S) _inst_10) R (Subtype.{succ u1} A (fun (x : A) => Membership.mem.{u1, u1} A (Subalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_8) (Ring.toSemiring.{u1} A _inst_9) _inst_10) (SetLike.instMembership.{u1, u1} (Subalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_8) (Ring.toSemiring.{u1} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_8) (Ring.toSemiring.{u1} A _inst_9) _inst_10)) x S)) A (CommRing.toCommSemiring.{u2} R _inst_8) (Subalgebra.toSemiring.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_8) (Ring.toSemiring.{u1} A _inst_9) _inst_10 S) (Ring.toSemiring.{u1} A _inst_9) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_8) (Ring.toSemiring.{u1} A _inst_9) _inst_10 S) _inst_10 (AlgHom.algHomClass.{u2, u1, u1} R (Subtype.{succ u1} A (fun (x : A) => Membership.mem.{u1, u1} A (Subalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_8) (Ring.toSemiring.{u1} A _inst_9) _inst_10) (SetLike.instMembership.{u1, u1} (Subalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_8) (Ring.toSemiring.{u1} A _inst_9) _inst_10) A (Subalgebra.instSetLikeSubalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_8) (Ring.toSemiring.{u1} A _inst_9) _inst_10)) x S)) A (CommRing.toCommSemiring.{u2} R _inst_8) (Subalgebra.toSemiring.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_8) (Ring.toSemiring.{u1} A _inst_9) _inst_10 S) (Ring.toSemiring.{u1} A _inst_9) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_8) (Ring.toSemiring.{u1} A _inst_9) _inst_10 S) _inst_10)) (Subalgebra.val.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_8) (Ring.toSemiring.{u1} A _inst_9) _inst_10 S))
Case conversion may be inaccurate. Consider using '#align subalgebra.to_subring_subtype Subalgebra.toSubring_subtypeₓ'. -/
@[simp]
theorem toSubring_subtype {R A : Type _} [CommRing R] [Ring A] [Algebra R A] (S : Subalgebra R A) :
    S.toSubring.Subtype = (S.val : S →+* A) :=
  rfl
#align subalgebra.to_subring_subtype Subalgebra.toSubring_subtype

/- warning: subalgebra.to_submodule_equiv -> Subalgebra.toSubmoduleEquiv is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), LinearEquiv.{u1, u1, u2, u2} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (Subalgebra.toSubmoduleEquiv._proof_1.{u1} R _inst_1) (Subalgebra.toSubmoduleEquiv._proof_2.{u1} R _inst_1) (coeSort.{succ u2, succ (succ u2)} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.setLike.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (coeFn.{succ u2, succ u2} (OrderEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))))) (fun (_x : RelEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) => (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) -> (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (RelEmbedding.hasCoeToFun.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3) S)) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (Submodule.addCommMonoid.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3) (coeFn.{succ u2, succ u2} (OrderEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))))) (fun (_x : RelEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) => (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) -> (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (RelEmbedding.hasCoeToFun.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3) S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (Semiring.toNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Submodule.module.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3) (coeFn.{succ u2, succ u2} (OrderEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))))) (fun (_x : RelEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) => (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) -> (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (RelEmbedding.hasCoeToFun.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3) S)) (Subalgebra.module.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), LinearEquiv.{u1, u1, u2, u2} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (SetLike.instMembership.{u2, u2} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (Submodule.instSetLikeSubmodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) x (FunLike.coe.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (fun (a : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) a) (EmbeddingLike.toFunLike.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Function.instEmbeddingLikeEmbedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (RelEmbedding.toEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.680 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instPartialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) x._@.Mathlib.Order.Hom.Basic._hyg.680 x._@.Mathlib.Order.Hom.Basic._hyg.682) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.695 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) => LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))) x._@.Mathlib.Order.Hom.Basic._hyg.695 x._@.Mathlib.Order.Hom.Basic._hyg.697) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S))) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Submodule.instAddCommMonoidSubtypeMemSubmoduleInstMembershipInstSetLikeSubmodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3) (FunLike.coe.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (fun (_x : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) _x) (EmbeddingLike.toFunLike.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Function.instEmbeddingLikeEmbedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (RelEmbedding.toEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.680 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instPartialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) x._@.Mathlib.Order.Hom.Basic._hyg.680 x._@.Mathlib.Order.Hom.Basic._hyg.682) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.695 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) => LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))) x._@.Mathlib.Order.Hom.Basic._hyg.695 x._@.Mathlib.Order.Hom.Basic._hyg.697) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subsemiring.toNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Submodule.instModuleSubtypeMemSubmoduleInstMembershipInstSetLikeSubmoduleInstAddCommMonoidSubtypeMemSubmoduleInstMembershipInstSetLikeSubmodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3) (FunLike.coe.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (fun (_x : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) _x) (EmbeddingLike.toFunLike.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Function.instEmbeddingLikeEmbedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (RelEmbedding.toEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.680 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instPartialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) x._@.Mathlib.Order.Hom.Basic._hyg.680 x._@.Mathlib.Order.Hom.Basic._hyg.682) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.695 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) => LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))) x._@.Mathlib.Order.Hom.Basic._hyg.695 x._@.Mathlib.Order.Hom.Basic._hyg.697) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S)) (Subalgebra.instModuleSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiringToAddCommMonoidToNonUnitalNonAssocSemiringToNonAssocSemiringToNonAssocSemiringToSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)
Case conversion may be inaccurate. Consider using '#align subalgebra.to_submodule_equiv Subalgebra.toSubmoduleEquivₓ'. -/
/-- Linear equivalence between `S : submodule R A` and `S`. Though these types are equal,
we define it as a `linear_equiv` to avoid type equalities. -/
def toSubmoduleEquiv (S : Subalgebra R A) : S.toSubmodule ≃ₗ[R] S :=
  LinearEquiv.ofEq _ _ rfl
#align subalgebra.to_submodule_equiv Subalgebra.toSubmoduleEquiv

#print Subalgebra.map /-
/-- Transport a subalgebra via an algebra homomorphism. -/
def map (f : A →ₐ[R] B) (S : Subalgebra R A) : Subalgebra R B :=
  { S.toSubsemiring.map (f : A →+* B) with
    algebraMap_mem' := fun r => f.commutes r ▸ Set.mem_image_of_mem _ (S.algebraMap_mem r) }
#align subalgebra.map Subalgebra.map
-/

/- warning: subalgebra.map_mono -> Subalgebra.map_mono is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] {S₁ : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {S₂ : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5}, (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) S₁ S₂) -> (LE.le.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Preorder.toLE.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (PartialOrder.toPreorder.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.partialOrder.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)))) (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f S₁) (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f S₂))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] {S₁ : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {S₂ : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5}, (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instPartialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) S₁ S₂) -> (LE.le.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Preorder.toLE.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (PartialOrder.toPreorder.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instPartialOrder.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)))) (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f S₁) (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f S₂))
Case conversion may be inaccurate. Consider using '#align subalgebra.map_mono Subalgebra.map_monoₓ'. -/
theorem map_mono {S₁ S₂ : Subalgebra R A} {f : A →ₐ[R] B} : S₁ ≤ S₂ → S₁.map f ≤ S₂.map f :=
  Set.image_subset f
#align subalgebra.map_mono Subalgebra.map_mono

#print Subalgebra.map_injective /-
theorem map_injective {f : A →ₐ[R] B} (hf : Function.Injective f) : Function.Injective (map f) :=
  fun S₁ S₂ ih =>
  ext <| Set.ext_iff.1 <| Set.image_injective.2 hf <| Set.ext <| SetLike.ext_iff.mp ih
#align subalgebra.map_injective Subalgebra.map_injective
-/

#print Subalgebra.map_id /-
@[simp]
theorem map_id (S : Subalgebra R A) : S.map (AlgHom.id R A) = S :=
  SetLike.coe_injective <| Set.image_id _
#align subalgebra.map_id Subalgebra.map_id
-/

#print Subalgebra.map_map /-
theorem map_map (S : Subalgebra R A) (g : B →ₐ[R] C) (f : A →ₐ[R] B) :
    (S.map f).map g = S.map (g.comp f) :=
  SetLike.coe_injective <| Set.image_image _ _ _
#align subalgebra.map_map Subalgebra.map_map
-/

/- warning: subalgebra.mem_map -> Subalgebra.mem_map is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5} {y : B}, Iff (Membership.Mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.hasMem.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)) y (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f S)) (Exists.{succ u2} A (fun (x : A) => Exists.{0} (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S) (fun (H : Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S) => Eq.{succ u3} B (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (fun (_x : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) => A -> B) ([anonymous].{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) f x) y)))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5} {y : B}, Iff (Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) y (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f S)) (Exists.{succ u2} A (fun (x : A) => And (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S) (Eq.{succ u3} ((fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => B) x) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) A (fun (a : A) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => B) a) (SMulHomClass.toFunLike.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (SMulZeroClass.toSMul.{u1, u2} R A (AddMonoid.toZero.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribSMul.toSMulZeroClass.{u1, u2} R A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribMulAction.toDistribSMul.{u1, u2} R A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (SMulZeroClass.toSMul.{u1, u3} R B (AddMonoid.toZero.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribSMul.toSMulZeroClass.{u1, u3} R B (AddMonoid.toAddZeroClass.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribMulAction.toDistribSMul.{u1, u3} R B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u2, u3, max u2 u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5 (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (AlgHom.algHomClass.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5))))) f x) y)))
Case conversion may be inaccurate. Consider using '#align subalgebra.mem_map Subalgebra.mem_mapₓ'. -/
theorem mem_map {S : Subalgebra R A} {f : A →ₐ[R] B} {y : B} : y ∈ map f S ↔ ∃ x ∈ S, f x = y :=
  Subsemiring.mem_map
#align subalgebra.mem_map Subalgebra.mem_map

/- warning: subalgebra.map_to_submodule -> Subalgebra.map_toSubmodule is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5}, Eq.{succ u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (coeFn.{succ u3, succ u3} (OrderEmbedding.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (Preorder.toLE.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (PartialOrder.toPreorder.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.partialOrder.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)))) (Preorder.toLE.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (PartialOrder.toPreorder.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (CompleteSemilatticeInf.toPartialOrder.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (CompleteLattice.toCompleteSemilatticeInf.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (Submodule.completeLattice.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5))))))) (fun (_x : RelEmbedding.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (LE.le.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Preorder.toLE.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (PartialOrder.toPreorder.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.partialOrder.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5))))) (LE.le.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (Preorder.toLE.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (PartialOrder.toPreorder.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (CompleteSemilatticeInf.toPartialOrder.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (CompleteLattice.toCompleteSemilatticeInf.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (Submodule.completeLattice.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)))))))) => (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) -> (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5))) (RelEmbedding.hasCoeToFun.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (LE.le.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Preorder.toLE.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (PartialOrder.toPreorder.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.partialOrder.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5))))) (LE.le.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (Preorder.toLE.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (PartialOrder.toPreorder.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (CompleteSemilatticeInf.toPartialOrder.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (CompleteLattice.toCompleteSemilatticeInf.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (Submodule.completeLattice.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)))))))) (Subalgebra.toSubmodule.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f S)) (Submodule.map.{u1, u1, u2, u3, max u2 u3} R R A B (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomSurjective.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) A B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (LinearMap.semilinearMapClass.{u1, u1, u2, u3} R R A B (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (AlgHom.toLinearMap.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5 f) (coeFn.{succ u2, succ u2} (OrderEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))))) (fun (_x : RelEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) => (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) -> (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (RelEmbedding.hasCoeToFun.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3) S))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5}, Eq.{succ u3} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) => Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f S)) (FunLike.coe.{succ u3, succ u3, succ u3} (Function.Embedding.{succ u3, succ u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5))) (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (fun (_x : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) => Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) _x) (EmbeddingLike.toFunLike.{succ u3, succ u3, succ u3} (Function.Embedding.{succ u3, succ u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5))) (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (Function.instEmbeddingLikeEmbedding.{succ u3, succ u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)))) (RelEmbedding.toEmbedding.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.680 : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) => LE.le.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Preorder.toLE.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (PartialOrder.toPreorder.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instPartialOrder.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)))) x._@.Mathlib.Order.Hom.Basic._hyg.680 x._@.Mathlib.Order.Hom.Basic._hyg.682) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.695 : Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) => LE.le.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (Preorder.toLE.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (PartialOrder.toPreorder.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (OmegaCompletePartialOrder.toPartialOrder.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (CompleteLattice.instOmegaCompletePartialOrder.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (Submodule.completeLattice.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)))))) x._@.Mathlib.Order.Hom.Basic._hyg.695 x._@.Mathlib.Order.Hom.Basic._hyg.697) (Subalgebra.toSubmodule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f S)) (Submodule.map.{u1, u1, u2, u3, max u2 u3} R R A B (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomSurjective.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) A B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (LinearMap.instSemilinearMapClassLinearMap.{u1, u1, u2, u3} R R A B (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (AlgHom.toLinearMap.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5 f) (FunLike.coe.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (fun (_x : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) _x) (EmbeddingLike.toFunLike.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Function.instEmbeddingLikeEmbedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (RelEmbedding.toEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.680 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instPartialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) x._@.Mathlib.Order.Hom.Basic._hyg.680 x._@.Mathlib.Order.Hom.Basic._hyg.682) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.695 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) => LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))) x._@.Mathlib.Order.Hom.Basic._hyg.695 x._@.Mathlib.Order.Hom.Basic._hyg.697) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S))
Case conversion may be inaccurate. Consider using '#align subalgebra.map_to_submodule Subalgebra.map_toSubmoduleₓ'. -/
theorem map_toSubmodule {S : Subalgebra R A} {f : A →ₐ[R] B} :
    (S.map f).toSubmodule = S.toSubmodule.map f.toLinearMap :=
  SetLike.coe_injective rfl
#align subalgebra.map_to_submodule Subalgebra.map_toSubmodule

#print Subalgebra.map_toSubsemiring /-
theorem map_toSubsemiring {S : Subalgebra R A} {f : A →ₐ[R] B} :
    (S.map f).toSubsemiring = S.toSubsemiring.map f.toRingHom :=
  SetLike.coe_injective rfl
#align subalgebra.map_to_subsemiring Subalgebra.map_toSubsemiring
-/

/- warning: subalgebra.coe_map -> Subalgebra.coe_map is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5), Eq.{succ u3} (Set.{u3} B) ((fun (a : Type.{u3}) (b : Type.{u3}) [self : HasLiftT.{succ u3, succ u3} a b] => self.0) (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Set.{u3} B) (HasLiftT.mk.{succ u3, succ u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Set.{u3} B) (CoeTCₓ.coe.{succ u3, succ u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Set.{u3} B) (SetLike.Set.hasCoeT.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)))) (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f S)) (Set.image.{u2, u3} A B (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (fun (_x : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) => A -> B) ([anonymous].{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) f) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) S))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5), Eq.{succ u3} (Set.{u3} B) (SetLike.coe.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f S)) (Set.image.{u2, u3} A B (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) A (fun (_x : A) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => B) _x) (SMulHomClass.toFunLike.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (SMulZeroClass.toSMul.{u1, u2} R A (AddMonoid.toZero.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribSMul.toSMulZeroClass.{u1, u2} R A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribMulAction.toDistribSMul.{u1, u2} R A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (SMulZeroClass.toSMul.{u1, u3} R B (AddMonoid.toZero.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribSMul.toSMulZeroClass.{u1, u3} R B (AddMonoid.toAddZeroClass.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribMulAction.toDistribSMul.{u1, u3} R B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u2, u3, max u2 u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5 (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (AlgHom.algHomClass.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5))))) f) (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S))
Case conversion may be inaccurate. Consider using '#align subalgebra.coe_map Subalgebra.coe_mapₓ'. -/
@[simp]
theorem coe_map (S : Subalgebra R A) (f : A →ₐ[R] B) : (S.map f : Set B) = f '' S :=
  rfl
#align subalgebra.coe_map Subalgebra.coe_map

#print Subalgebra.comap /-
/-- Preimage of a subalgebra under an algebra homomorphism. -/
def comap (f : A →ₐ[R] B) (S : Subalgebra R B) : Subalgebra R A :=
  { S.toSubsemiring.comap (f : A →+* B) with
    algebraMap_mem' := fun r =>
      show f (algebraMap R A r) ∈ S from (f.commutes r).symm ▸ S.algebraMap_mem r }
#align subalgebra.comap Subalgebra.comap
-/

/- warning: subalgebra.map_le -> Subalgebra.map_le is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5} {U : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5}, Iff (LE.le.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Preorder.toLE.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (PartialOrder.toPreorder.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.partialOrder.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)))) (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f S) U) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) S (Subalgebra.comap.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f U))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5} {U : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5}, Iff (LE.le.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Preorder.toLE.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (PartialOrder.toPreorder.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instPartialOrder.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)))) (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f S) U) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instPartialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) S (Subalgebra.comap.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f U))
Case conversion may be inaccurate. Consider using '#align subalgebra.map_le Subalgebra.map_leₓ'. -/
theorem map_le {S : Subalgebra R A} {f : A →ₐ[R] B} {U : Subalgebra R B} :
    map f S ≤ U ↔ S ≤ comap f U :=
  Set.image_subset_iff
#align subalgebra.map_le Subalgebra.map_le

/- warning: subalgebra.gc_map_comap -> Subalgebra.gc_map_comap is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5), GaloisConnection.{u2, u3} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (PartialOrder.toPreorder.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.partialOrder.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5))) (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f) (Subalgebra.comap.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5), GaloisConnection.{u2, u3} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instPartialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (PartialOrder.toPreorder.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instPartialOrder.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5))) (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f) (Subalgebra.comap.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f)
Case conversion may be inaccurate. Consider using '#align subalgebra.gc_map_comap Subalgebra.gc_map_comapₓ'. -/
theorem gc_map_comap (f : A →ₐ[R] B) : GaloisConnection (map f) (comap f) := fun S U => map_le
#align subalgebra.gc_map_comap Subalgebra.gc_map_comap

/- warning: subalgebra.mem_comap -> Subalgebra.mem_comap is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (S : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (x : A), Iff (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (Subalgebra.comap.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f S)) (Membership.Mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.hasMem.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (fun (_x : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) => A -> B) ([anonymous].{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) f x) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (S : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (x : A), Iff (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (Subalgebra.comap.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f S)) (Membership.mem.{u3, u3} ((fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => B) x) (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) A (fun (_x : A) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => B) _x) (SMulHomClass.toFunLike.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (SMulZeroClass.toSMul.{u1, u2} R A (AddMonoid.toZero.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribSMul.toSMulZeroClass.{u1, u2} R A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribMulAction.toDistribSMul.{u1, u2} R A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (SMulZeroClass.toSMul.{u1, u3} R B (AddMonoid.toZero.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribSMul.toSMulZeroClass.{u1, u3} R B (AddMonoid.toAddZeroClass.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribMulAction.toDistribSMul.{u1, u3} R B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u2, u3, max u2 u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5 (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (AlgHom.algHomClass.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5))))) f x) S)
Case conversion may be inaccurate. Consider using '#align subalgebra.mem_comap Subalgebra.mem_comapₓ'. -/
@[simp]
theorem mem_comap (S : Subalgebra R B) (f : A →ₐ[R] B) (x : A) : x ∈ S.comap f ↔ f x ∈ S :=
  Iff.rfl
#align subalgebra.mem_comap Subalgebra.mem_comap

/- warning: subalgebra.coe_comap -> Subalgebra.coe_comap is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (S : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5), Eq.{succ u2} (Set.{u2} A) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Subalgebra.comap.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f S)) (Set.preimage.{u2, u3} A B (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (fun (_x : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) => A -> B) ([anonymous].{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) f) ((fun (a : Type.{u3}) (b : Type.{u3}) [self : HasLiftT.{succ u3, succ u3} a b] => self.0) (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Set.{u3} B) (HasLiftT.mk.{succ u3, succ u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Set.{u3} B) (CoeTCₓ.coe.{succ u3, succ u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Set.{u3} B) (SetLike.Set.hasCoeT.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)))) S))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (S : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5), Eq.{succ u2} (Set.{u2} A) (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Subalgebra.comap.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f S)) (Set.preimage.{u2, u3} A B (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) A (fun (_x : A) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => B) _x) (SMulHomClass.toFunLike.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (SMulZeroClass.toSMul.{u1, u2} R A (AddMonoid.toZero.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribSMul.toSMulZeroClass.{u1, u2} R A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribMulAction.toDistribSMul.{u1, u2} R A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (SMulZeroClass.toSMul.{u1, u3} R B (AddMonoid.toZero.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribSMul.toSMulZeroClass.{u1, u3} R B (AddMonoid.toAddZeroClass.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribMulAction.toDistribSMul.{u1, u3} R B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u2, u3, max u2 u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5 (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (AlgHom.algHomClass.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5))))) f) (SetLike.coe.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) S))
Case conversion may be inaccurate. Consider using '#align subalgebra.coe_comap Subalgebra.coe_comapₓ'. -/
@[simp, norm_cast]
theorem coe_comap (S : Subalgebra R B) (f : A →ₐ[R] B) : (S.comap f : Set A) = f ⁻¹' (S : Set B) :=
  rfl
#align subalgebra.coe_comap Subalgebra.coe_comap

/- warning: subalgebra.no_zero_divisors -> Subalgebra.noZeroDivisors is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommSemiring.{u1} R] [_inst_9 : Semiring.{u2} A] [_inst_10 : NoZeroDivisors.{u2} A (Distrib.toHasMul.{u2} A (NonUnitalNonAssocSemiring.toDistrib.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_9)))) (MulZeroClass.toHasZero.{u2} A (NonUnitalNonAssocSemiring.toMulZeroClass.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_9))))] [_inst_11 : Algebra.{u1, u2} R A _inst_8 _inst_9] (S : Subalgebra.{u1, u2} R A _inst_8 _inst_9 _inst_11), NoZeroDivisors.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_8 _inst_9 _inst_11) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 _inst_9 _inst_11) A (Subalgebra.setLike.{u1, u2} R A _inst_8 _inst_9 _inst_11)) S) (MulMemClass.mul.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_8 _inst_9 _inst_11) (MulOneClass.toHasMul.{u2} A (MulZeroOneClass.toMulOneClass.{u2} A (NonAssocSemiring.toMulZeroOneClass.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_9)))) (Subalgebra.setLike.{u1, u2} R A _inst_8 _inst_9 _inst_11) (SubmonoidClass.to_mulMemClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 _inst_9 _inst_11) A (MulZeroOneClass.toMulOneClass.{u2} A (NonAssocSemiring.toMulZeroOneClass.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_9))) (Subalgebra.setLike.{u1, u2} R A _inst_8 _inst_9 _inst_11) (SubsemiringClass.to_submonoidClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 _inst_9 _inst_11) A (Semiring.toNonAssocSemiring.{u2} A _inst_9) (Subalgebra.setLike.{u1, u2} R A _inst_8 _inst_9 _inst_11) (Subalgebra.subsemiringClass.{u1, u2} R A _inst_8 _inst_9 _inst_11))) S) (ZeroMemClass.zero.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 _inst_9 _inst_11) A (Subalgebra.setLike.{u1, u2} R A _inst_8 _inst_9 _inst_11) (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddMonoidWithOne.toAddMonoid.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_9)))))) (AddSubmonoidClass.to_zeroMemClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 _inst_9 _inst_11) A (AddMonoid.toAddZeroClass.{u2} A (AddMonoidWithOne.toAddMonoid.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_9))))) (Subalgebra.setLike.{u1, u2} R A _inst_8 _inst_9 _inst_11) (SubsemiringClass.to_addSubmonoidClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 _inst_9 _inst_11) A (Semiring.toNonAssocSemiring.{u2} A _inst_9) (Subalgebra.setLike.{u1, u2} R A _inst_8 _inst_9 _inst_11) (Subalgebra.subsemiringClass.{u1, u2} R A _inst_8 _inst_9 _inst_11))) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommSemiring.{u1} R] [_inst_9 : Semiring.{u2} A] [_inst_10 : NoZeroDivisors.{u2} A (NonUnitalNonAssocSemiring.toMul.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_9))) (MonoidWithZero.toZero.{u2} A (Semiring.toMonoidWithZero.{u2} A _inst_9))] [_inst_11 : Algebra.{u1, u2} R A _inst_8 _inst_9] (S : Subalgebra.{u1, u2} R A _inst_8 _inst_9 _inst_11), NoZeroDivisors.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_8 _inst_9 _inst_11) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 _inst_9 _inst_11) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_8 _inst_9 _inst_11)) x S)) (Submonoid.mul.{u2} A (MulZeroOneClass.toMulOneClass.{u2} A (NonAssocSemiring.toMulZeroOneClass.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_9))) (Subsemiring.toSubmonoid.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_9) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_8 _inst_9 _inst_11 S))) (ZeroMemClass.zero.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 _inst_9 _inst_11) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_8 _inst_9 _inst_11) (MonoidWithZero.toZero.{u2} A (Semiring.toMonoidWithZero.{u2} A _inst_9)) (AddSubmonoidClass.toZeroMemClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 _inst_9 _inst_11) A (AddMonoid.toAddZeroClass.{u2} A (AddMonoidWithOne.toAddMonoid.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_9))))) (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_8 _inst_9 _inst_11) (SubsemiringClass.toAddSubmonoidClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_8 _inst_9 _inst_11) A (Semiring.toNonAssocSemiring.{u2} A _inst_9) (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_8 _inst_9 _inst_11) (Subalgebra.SubsemiringClass.{u1, u2} R A _inst_8 _inst_9 _inst_11))) S)
Case conversion may be inaccurate. Consider using '#align subalgebra.no_zero_divisors Subalgebra.noZeroDivisorsₓ'. -/
instance noZeroDivisors {R A : Type _} [CommSemiring R] [Semiring A] [NoZeroDivisors A]
    [Algebra R A] (S : Subalgebra R A) : NoZeroDivisors S :=
  S.toSubsemiring.NoZeroDivisors
#align subalgebra.no_zero_divisors Subalgebra.noZeroDivisors

/- warning: subalgebra.is_domain -> Subalgebra.isDomain is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : Ring.{u2} A] [_inst_10 : IsDomain.{u2} A (Ring.toSemiring.{u2} A _inst_9)] [_inst_11 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9)] (S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_11), IsDomain.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_11) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_11) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_11)) S) (Subalgebra.toSemiring.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_11 S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_8 : CommRing.{u1} R] [_inst_9 : Ring.{u2} A] [_inst_10 : IsDomain.{u2} A (Ring.toSemiring.{u2} A _inst_9)] [_inst_11 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9)] (S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_11), IsDomain.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_11) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_11) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_11)) x S)) (Subalgebra.toSemiring.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_8) (Ring.toSemiring.{u2} A _inst_9) _inst_11 S)
Case conversion may be inaccurate. Consider using '#align subalgebra.is_domain Subalgebra.isDomainₓ'. -/
instance isDomain {R A : Type _} [CommRing R] [Ring A] [IsDomain A] [Algebra R A]
    (S : Subalgebra R A) : IsDomain S :=
  Subring.isDomain S.toSubring
#align subalgebra.is_domain Subalgebra.isDomain

end Subalgebra

namespace Submodule

variable {R A : Type _} [CommSemiring R] [Semiring A] [Algebra R A]

variable (p : Submodule R A)

/- warning: submodule.to_subalgebra -> Submodule.toSubalgebra is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (p : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)), (Membership.Mem.{u2, u2} A (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (SetLike.hasMem.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.setLike.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (OfNat.ofNat.{u2} A 1 (OfNat.mk.{u2} A 1 (One.one.{u2} A (AddMonoidWithOne.toOne.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))))) p) -> (forall (x : A) (y : A), (Membership.Mem.{u2, u2} A (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (SetLike.hasMem.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.setLike.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) x p) -> (Membership.Mem.{u2, u2} A (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (SetLike.hasMem.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.setLike.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) y p) -> (Membership.Mem.{u2, u2} A (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (SetLike.hasMem.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.setLike.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (HMul.hMul.{u2, u2, u2} A A A (instHMul.{u2} A (Distrib.toHasMul.{u2} A (NonUnitalNonAssocSemiring.toDistrib.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) x y) p)) -> (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (p : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)), (Membership.mem.{u2, u2} A (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (SetLike.instMembership.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (OfNat.ofNat.{u2} A 1 (One.toOfNat1.{u2} A (Semiring.toOne.{u2} A _inst_2))) p) -> (forall (x : A) (y : A), (Membership.mem.{u2, u2} A (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (SetLike.instMembership.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) x p) -> (Membership.mem.{u2, u2} A (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (SetLike.instMembership.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) y p) -> (Membership.mem.{u2, u2} A (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (SetLike.instMembership.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (HMul.hMul.{u2, u2, u2} A A A (instHMul.{u2} A (NonUnitalNonAssocSemiring.toMul.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) x y) p)) -> (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)
Case conversion may be inaccurate. Consider using '#align submodule.to_subalgebra Submodule.toSubalgebraₓ'. -/
/-- A submodule containing `1` and closed under multiplication is a subalgebra. -/
def toSubalgebra (p : Submodule R A) (h_one : (1 : A) ∈ p)
    (h_mul : ∀ x y, x ∈ p → y ∈ p → x * y ∈ p) : Subalgebra R A :=
  { p with
    mul_mem' := h_mul
    algebraMap_mem' := fun r => by
      rw [Algebra.algebraMap_eq_smul_one]
      exact p.smul_mem _ h_one }
#align submodule.to_subalgebra Submodule.toSubalgebra

/- warning: submodule.mem_to_subalgebra -> Submodule.mem_toSubalgebra is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {p : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)} {h_one : Membership.Mem.{u2, u2} A (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (SetLike.hasMem.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.setLike.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (OfNat.ofNat.{u2} A 1 (OfNat.mk.{u2} A 1 (One.one.{u2} A (AddMonoidWithOne.toOne.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))))) p} {h_mul : forall (x : A) (y : A), (Membership.Mem.{u2, u2} A (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (SetLike.hasMem.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.setLike.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) x p) -> (Membership.Mem.{u2, u2} A (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (SetLike.hasMem.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.setLike.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) y p) -> (Membership.Mem.{u2, u2} A (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (SetLike.hasMem.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.setLike.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (HMul.hMul.{u2, u2, u2} A A A (instHMul.{u2} A (Distrib.toHasMul.{u2} A (NonUnitalNonAssocSemiring.toDistrib.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) x y) p)} {x : A}, Iff (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (Submodule.toSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 p h_one h_mul)) (Membership.Mem.{u2, u2} A (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (SetLike.hasMem.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.setLike.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) x p)
but is expected to have type
  forall {R : Type.{u2}} {A : Type.{u1}} [_inst_1 : CommSemiring.{u2} R] [_inst_2 : Semiring.{u1} A] [_inst_3 : Algebra.{u2, u1} R A _inst_1 _inst_2] {p : Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)} {h_one : Membership.mem.{u1, u1} A (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (SetLike.instMembership.{u1, u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3))) (OfNat.ofNat.{u1} A 1 (One.toOfNat1.{u1} A (Semiring.toOne.{u1} A _inst_2))) p} {h_mul : forall (x : A) (y : A), (Membership.mem.{u1, u1} A (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (SetLike.instMembership.{u1, u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3))) x p) -> (Membership.mem.{u1, u1} A (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (SetLike.instMembership.{u1, u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3))) y p) -> (Membership.mem.{u1, u1} A (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (SetLike.instMembership.{u1, u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3))) (HMul.hMul.{u1, u1, u1} A A A (instHMul.{u1} A (NonUnitalNonAssocSemiring.toMul.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2)))) x y) p)} {x : A}, Iff (Membership.mem.{u1, u1} A (Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u1, u1} (Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3)) x (Submodule.toSubalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3 p h_one h_mul)) (Membership.mem.{u1, u1} A (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (SetLike.instMembership.{u1, u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3))) x p)
Case conversion may be inaccurate. Consider using '#align submodule.mem_to_subalgebra Submodule.mem_toSubalgebraₓ'. -/
@[simp]
theorem mem_toSubalgebra {p : Submodule R A} {h_one h_mul} {x} :
    x ∈ p.toSubalgebra h_one h_mul ↔ x ∈ p :=
  Iff.rfl
#align submodule.mem_to_subalgebra Submodule.mem_toSubalgebra

/- warning: submodule.coe_to_subalgebra -> Submodule.coe_toSubalgebra is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (p : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (h_one : Membership.Mem.{u2, u2} A (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (SetLike.hasMem.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.setLike.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (OfNat.ofNat.{u2} A 1 (OfNat.mk.{u2} A 1 (One.one.{u2} A (AddMonoidWithOne.toOne.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))))) p) (h_mul : forall (x : A) (y : A), (Membership.Mem.{u2, u2} A (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (SetLike.hasMem.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.setLike.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) x p) -> (Membership.Mem.{u2, u2} A (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (SetLike.hasMem.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.setLike.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) y p) -> (Membership.Mem.{u2, u2} A (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (SetLike.hasMem.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.setLike.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (HMul.hMul.{u2, u2, u2} A A A (instHMul.{u2} A (Distrib.toHasMul.{u2} A (NonUnitalNonAssocSemiring.toDistrib.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) x y) p)), Eq.{succ u2} (Set.{u2} A) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Submodule.toSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 p h_one h_mul)) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.setLike.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) p)
but is expected to have type
  forall {R : Type.{u2}} {A : Type.{u1}} [_inst_1 : CommSemiring.{u2} R] [_inst_2 : Semiring.{u1} A] [_inst_3 : Algebra.{u2, u1} R A _inst_1 _inst_2] (p : Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (h_one : Membership.mem.{u1, u1} A (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (SetLike.instMembership.{u1, u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3))) (OfNat.ofNat.{u1} A 1 (One.toOfNat1.{u1} A (Semiring.toOne.{u1} A _inst_2))) p) (h_mul : forall (x : A) (y : A), (Membership.mem.{u1, u1} A (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (SetLike.instMembership.{u1, u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3))) x p) -> (Membership.mem.{u1, u1} A (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (SetLike.instMembership.{u1, u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3))) y p) -> (Membership.mem.{u1, u1} A (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (SetLike.instMembership.{u1, u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3))) (HMul.hMul.{u1, u1, u1} A A A (instHMul.{u1} A (NonUnitalNonAssocSemiring.toMul.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2)))) x y) p)), Eq.{succ u1} (Set.{u1} A) (SetLike.coe.{u1, u1} (Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) (Submodule.toSubalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3 p h_one h_mul)) (SetLike.coe.{u1, u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) p)
Case conversion may be inaccurate. Consider using '#align submodule.coe_to_subalgebra Submodule.coe_toSubalgebraₓ'. -/
@[simp]
theorem coe_toSubalgebra (p : Submodule R A) (h_one h_mul) :
    (p.toSubalgebra h_one h_mul : Set A) = p :=
  rfl
#align submodule.coe_to_subalgebra Submodule.coe_toSubalgebra

/- warning: submodule.to_subalgebra_mk -> Submodule.toSubalgebra_mk is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (s : Set.{u2} A) (h0 : Membership.Mem.{u2, u2} A (Set.{u2} A) (Set.hasMem.{u2} A) (OfNat.ofNat.{u2} A 0 (OfNat.mk.{u2} A 0 (Zero.zero.{u2} A (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))))))) s) (hadd : forall {a : A} {b : A}, (Membership.Mem.{u2, u2} A (Set.{u2} A) (Set.hasMem.{u2} A) a s) -> (Membership.Mem.{u2, u2} A (Set.{u2} A) (Set.hasMem.{u2} A) b s) -> (Membership.Mem.{u2, u2} A (Set.{u2} A) (Set.hasMem.{u2} A) (HAdd.hAdd.{u2, u2, u2} A A A (instHAdd.{u2} A (AddZeroClass.toHasAdd.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))))) a b) s)) (hsmul : forall (c : R) {x : A}, (Membership.Mem.{u2, u2} A (Set.{u2} A) (Set.hasMem.{u2} A) x s) -> (Membership.Mem.{u2, u2} A (Set.{u2} A) (Set.hasMem.{u2} A) (SMul.smul.{u1, u2} R A (SMulZeroClass.toHasSmul.{u1, u2} R A (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))) (SMulWithZero.toSmulZeroClass.{u1, u2} R A (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))))) (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u1, u2} R A (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))) (Module.toMulActionWithZero.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) c x) s)) (h1 : Membership.Mem.{u2, u2} A (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (SetLike.hasMem.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.setLike.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (OfNat.ofNat.{u2} A 1 (OfNat.mk.{u2} A 1 (One.one.{u2} A (AddMonoidWithOne.toOne.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))))) (Submodule.mk.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3) s hadd h0 hsmul)) (hmul : forall (x : A) (y : A), (Membership.Mem.{u2, u2} A (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (SetLike.hasMem.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.setLike.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) x (Submodule.mk.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3) s hadd h0 hsmul)) -> (Membership.Mem.{u2, u2} A (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (SetLike.hasMem.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.setLike.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) y (Submodule.mk.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3) s hadd h0 hsmul)) -> (Membership.Mem.{u2, u2} A (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (SetLike.hasMem.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.setLike.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (HMul.hMul.{u2, u2, u2} A A A (instHMul.{u2} A (Distrib.toHasMul.{u2} A (NonUnitalNonAssocSemiring.toDistrib.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) x y) (Submodule.mk.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3) s hadd h0 hsmul))), Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.toSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (Submodule.mk.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3) s hadd h0 hsmul) h1 hmul) (Subalgebra.mk.{u1, u2} R A _inst_1 _inst_2 _inst_3 s hmul h1 hadd h0 (fun (r : R) => Eq.mpr.{0} (Membership.Mem.{u2, u2} A (Set.{u2} A) (Set.hasMem.{u2} A) (coeFn.{max (succ u1) (succ u2), max (succ u1) (succ u2)} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (fun (_x : RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) => R -> A) (RingHom.hasCoeToFun.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (algebraMap.{u1, u2} R A _inst_1 _inst_2 _inst_3) r) s) (Membership.Mem.{u2, u2} A (Set.{u2} A) (Set.hasMem.{u2} A) (SMul.smul.{u1, u2} R A (SMulZeroClass.toHasSmul.{u1, u2} R A (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))) (SMulWithZero.toSmulZeroClass.{u1, u2} R A (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))))) (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u1, u2} R A (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))) (Module.toMulActionWithZero.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) r (OfNat.ofNat.{u2} A 1 (OfNat.mk.{u2} A 1 (One.one.{u2} A (AddMonoidWithOne.toOne.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))))) s) (id_tag Tactic.IdTag.rw (Eq.{1} Prop (Membership.Mem.{u2, u2} A (Set.{u2} A) (Set.hasMem.{u2} A) (coeFn.{max (succ u1) (succ u2), max (succ u1) (succ u2)} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (fun (_x : RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) => R -> A) (RingHom.hasCoeToFun.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (algebraMap.{u1, u2} R A _inst_1 _inst_2 _inst_3) r) s) (Membership.Mem.{u2, u2} A (Set.{u2} A) (Set.hasMem.{u2} A) (SMul.smul.{u1, u2} R A (SMulZeroClass.toHasSmul.{u1, u2} R A (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))) (SMulWithZero.toSmulZeroClass.{u1, u2} R A (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))))) (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u1, u2} R A (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))) (Module.toMulActionWithZero.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) r (OfNat.ofNat.{u2} A 1 (OfNat.mk.{u2} A 1 (One.one.{u2} A (AddMonoidWithOne.toOne.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))))) s)) (Eq.ndrec.{0, succ u2} A (coeFn.{max (succ u1) (succ u2), max (succ u1) (succ u2)} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (fun (_x : RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) => R -> A) (RingHom.hasCoeToFun.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (algebraMap.{u1, u2} R A _inst_1 _inst_2 _inst_3) r) (fun (_a : A) => Eq.{1} Prop (Membership.Mem.{u2, u2} A (Set.{u2} A) (Set.hasMem.{u2} A) (coeFn.{max (succ u1) (succ u2), max (succ u1) (succ u2)} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (fun (_x : RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) => R -> A) (RingHom.hasCoeToFun.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (algebraMap.{u1, u2} R A _inst_1 _inst_2 _inst_3) r) s) (Membership.Mem.{u2, u2} A (Set.{u2} A) (Set.hasMem.{u2} A) _a s)) (rfl.{1} Prop (Membership.Mem.{u2, u2} A (Set.{u2} A) (Set.hasMem.{u2} A) (coeFn.{max (succ u1) (succ u2), max (succ u1) (succ u2)} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (fun (_x : RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) => R -> A) (RingHom.hasCoeToFun.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (algebraMap.{u1, u2} R A _inst_1 _inst_2 _inst_3) r) s)) (SMul.smul.{u1, u2} R A (SMulZeroClass.toHasSmul.{u1, u2} R A (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))) (SMulWithZero.toSmulZeroClass.{u1, u2} R A (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))))) (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))) (MulActionWithZero.toSMulWithZero.{u1, u2} R A (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))) (Module.toMulActionWithZero.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) r (OfNat.ofNat.{u2} A 1 (OfNat.mk.{u2} A 1 (One.one.{u2} A (AddMonoidWithOne.toOne.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))))) (Algebra.algebraMap_eq_smul_one.{u1, u2} R A _inst_1 _inst_2 _inst_3 r))) (hsmul r (OfNat.ofNat.{u2} A 1 (OfNat.mk.{u2} A 1 (One.one.{u2} A (AddMonoidWithOne.toOne.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))))) h1)))
but is expected to have type
  forall {R : Type.{u2}} {A : Type.{u1}} [_inst_1 : CommSemiring.{u2} R] [_inst_2 : Semiring.{u1} A] [_inst_3 : Algebra.{u2, u1} R A _inst_1 _inst_2] (s : Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (h0 : Membership.mem.{u1, u1} A (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (SetLike.instMembership.{u1, u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3))) (OfNat.ofNat.{u1} A 1 (One.toOfNat1.{u1} A (Semiring.toOne.{u1} A _inst_2))) s) (hadd : forall (a : A) (b : A), (Membership.mem.{u1, u1} A (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (SetLike.instMembership.{u1, u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3))) a s) -> (Membership.mem.{u1, u1} A (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (SetLike.instMembership.{u1, u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3))) b s) -> (Membership.mem.{u1, u1} A (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (SetLike.instMembership.{u1, u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3))) (HMul.hMul.{u1, u1, u1} A A A (instHMul.{u1} A (NonUnitalNonAssocSemiring.toMul.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2)))) a b) s)), Eq.{succ u1} (Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) (Submodule.toSubalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3 s h0 hadd) (Subalgebra.mk.{u2, u1} R A _inst_1 _inst_2 _inst_3 (Subsemiring.mk.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2) (Submonoid.mk.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Subsemigroup.mk.{u1} A (MulOneClass.toMul.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2)))) (SetLike.coe.{u1, u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) s) hadd) h0) (fun {a._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6428 : A} {b._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6429 : A} => Submodule.add_mem.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3) s a._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6428 b._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6429) (Submodule.zero_mem.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3) s)) (fun (r : R) => Eq.mpr.{0} (Membership.mem.{u1, u1} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R) => A) r) (Set.{u1} A) (Set.instMembershipSet.{u1} A) (FunLike.coe.{max (succ u2) (succ u1), succ u2, succ u1} (RingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2)) R (fun (a : R) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R) => A) a) (MulHomClass.toFunLike.{max u2 u1, u2, u1} (RingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2)) R A (NonUnitalNonAssocSemiring.toMul.{u2} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)))) (NonUnitalNonAssocSemiring.toMul.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (NonUnitalRingHomClass.toMulHomClass.{max u2 u1, u2, u1} (RingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2)) R A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2)) (RingHomClass.toNonUnitalRingHomClass.{max u2 u1, u2, u1} (RingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2)) R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2) (RingHom.instRingHomClassRingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2))))) (algebraMap.{u2, u1} R A _inst_1 _inst_2 _inst_3) r) (Subsemigroup.carrier.{u1} A (MulOneClass.toMul.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2)))) (Submonoid.toSubsemigroup.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Subsemiring.toSubmonoid.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2) (Subsemiring.mk.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2) (Submonoid.mk.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Subsemigroup.mk.{u1} A (MulOneClass.toMul.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2)))) (SetLike.coe.{u1, u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) s) hadd) h0) (fun {a._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6428 : A} {b._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6429 : A} => Submodule.add_mem.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3) s a._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6428 b._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6429) (Submodule.zero_mem.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3) s)))))) (Membership.mem.{u1, u1} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R) => A) r) (Set.{u1} A) (Set.instMembershipSet.{u1} A) (HSMul.hSMul.{u2, u1, u1} R A A (instHSMul.{u2, u1} R A (Algebra.toSMul.{u2, u1} R A _inst_1 _inst_2 _inst_3)) r (OfNat.ofNat.{u1} A 1 (One.toOfNat1.{u1} A (Semiring.toOne.{u1} A _inst_2)))) (Subsemigroup.carrier.{u1} A (MulOneClass.toMul.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2)))) (Submonoid.toSubsemigroup.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Subsemiring.toSubmonoid.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2) (Subsemiring.mk.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2) (Submonoid.mk.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Subsemigroup.mk.{u1} A (MulOneClass.toMul.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2)))) (SetLike.coe.{u1, u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) s) hadd) h0) (fun {a._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6428 : A} {b._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6429 : A} => Submodule.add_mem.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3) s a._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6428 b._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6429) (Submodule.zero_mem.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3) s)))))) (id.{0} (Eq.{1} Prop (Membership.mem.{u1, u1} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R) => A) r) (Set.{u1} A) (Set.instMembershipSet.{u1} A) (FunLike.coe.{max (succ u2) (succ u1), succ u2, succ u1} (RingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2)) R (fun (a : R) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R) => A) a) (MulHomClass.toFunLike.{max u2 u1, u2, u1} (RingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2)) R A (NonUnitalNonAssocSemiring.toMul.{u2} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)))) (NonUnitalNonAssocSemiring.toMul.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (NonUnitalRingHomClass.toMulHomClass.{max u2 u1, u2, u1} (RingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2)) R A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2)) (RingHomClass.toNonUnitalRingHomClass.{max u2 u1, u2, u1} (RingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2)) R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2) (RingHom.instRingHomClassRingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2))))) (algebraMap.{u2, u1} R A _inst_1 _inst_2 _inst_3) r) (Subsemigroup.carrier.{u1} A (MulOneClass.toMul.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2)))) (Submonoid.toSubsemigroup.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Subsemiring.toSubmonoid.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2) (Subsemiring.mk.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2) (Submonoid.mk.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Subsemigroup.mk.{u1} A (MulOneClass.toMul.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2)))) (SetLike.coe.{u1, u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) s) hadd) h0) (fun {a._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6428 : A} {b._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6429 : A} => Submodule.add_mem.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3) s a._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6428 b._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6429) (Submodule.zero_mem.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3) s)))))) (Membership.mem.{u1, u1} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R) => A) r) (Set.{u1} A) (Set.instMembershipSet.{u1} A) (HSMul.hSMul.{u2, u1, u1} R A A (instHSMul.{u2, u1} R A (Algebra.toSMul.{u2, u1} R A _inst_1 _inst_2 _inst_3)) r (OfNat.ofNat.{u1} A 1 (One.toOfNat1.{u1} A (Semiring.toOne.{u1} A _inst_2)))) (Subsemigroup.carrier.{u1} A (MulOneClass.toMul.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2)))) (Submonoid.toSubsemigroup.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Subsemiring.toSubmonoid.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2) (Subsemiring.mk.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2) (Submonoid.mk.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Subsemigroup.mk.{u1} A (MulOneClass.toMul.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2)))) (SetLike.coe.{u1, u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) s) hadd) h0) (fun {a._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6428 : A} {b._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6429 : A} => Submodule.add_mem.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3) s a._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6428 b._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6429) (Submodule.zero_mem.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3) s))))))) (Eq.ndrec.{0, succ u1} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R) => A) r) (FunLike.coe.{max (succ u2) (succ u1), succ u2, succ u1} (RingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2)) R (fun (a : R) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R) => A) a) (MulHomClass.toFunLike.{max u2 u1, u2, u1} (RingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2)) R A (NonUnitalNonAssocSemiring.toMul.{u2} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)))) (NonUnitalNonAssocSemiring.toMul.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (NonUnitalRingHomClass.toMulHomClass.{max u2 u1, u2, u1} (RingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2)) R A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2)) (RingHomClass.toNonUnitalRingHomClass.{max u2 u1, u2, u1} (RingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2)) R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2) (RingHom.instRingHomClassRingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2))))) (algebraMap.{u2, u1} R A _inst_1 _inst_2 _inst_3) r) (fun (_a : (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R) => A) r) => Eq.{1} Prop (Membership.mem.{u1, u1} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R) => A) r) (Set.{u1} A) (Set.instMembershipSet.{u1} A) (FunLike.coe.{max (succ u2) (succ u1), succ u2, succ u1} (RingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2)) R (fun (a : R) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R) => A) a) (MulHomClass.toFunLike.{max u2 u1, u2, u1} (RingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2)) R A (NonUnitalNonAssocSemiring.toMul.{u2} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)))) (NonUnitalNonAssocSemiring.toMul.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (NonUnitalRingHomClass.toMulHomClass.{max u2 u1, u2, u1} (RingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2)) R A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2)) (RingHomClass.toNonUnitalRingHomClass.{max u2 u1, u2, u1} (RingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2)) R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2) (RingHom.instRingHomClassRingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2))))) (algebraMap.{u2, u1} R A _inst_1 _inst_2 _inst_3) r) (Subsemigroup.carrier.{u1} A (MulOneClass.toMul.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2)))) (Submonoid.toSubsemigroup.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Subsemiring.toSubmonoid.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2) (Subsemiring.mk.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2) (Submonoid.mk.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Subsemigroup.mk.{u1} A (MulOneClass.toMul.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2)))) (SetLike.coe.{u1, u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) s) hadd) h0) (fun {a._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6428 : A} {b._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6429 : A} => Submodule.add_mem.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3) s a._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6428 b._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6429) (Submodule.zero_mem.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3) s)))))) (Membership.mem.{u1, u1} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R) => A) r) (Set.{u1} A) (Set.instMembershipSet.{u1} A) _a (Subsemigroup.carrier.{u1} A (MulOneClass.toMul.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2)))) (Submonoid.toSubsemigroup.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Subsemiring.toSubmonoid.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2) (Subsemiring.mk.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2) (Submonoid.mk.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Subsemigroup.mk.{u1} A (MulOneClass.toMul.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2)))) (SetLike.coe.{u1, u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) s) hadd) h0) (fun {a._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6428 : A} {b._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6429 : A} => Submodule.add_mem.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3) s a._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6428 b._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6429) (Submodule.zero_mem.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3) s))))))) (Eq.refl.{1} Prop (Membership.mem.{u1, u1} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R) => A) r) (Set.{u1} A) (Set.instMembershipSet.{u1} A) (FunLike.coe.{max (succ u2) (succ u1), succ u2, succ u1} (RingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2)) R (fun (a : R) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R) => A) a) (MulHomClass.toFunLike.{max u2 u1, u2, u1} (RingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2)) R A (NonUnitalNonAssocSemiring.toMul.{u2} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)))) (NonUnitalNonAssocSemiring.toMul.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (NonUnitalRingHomClass.toMulHomClass.{max u2 u1, u2, u1} (RingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2)) R A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2)) (RingHomClass.toNonUnitalRingHomClass.{max u2 u1, u2, u1} (RingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2)) R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2) (RingHom.instRingHomClassRingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (Semiring.toNonAssocSemiring.{u1} A _inst_2))))) (algebraMap.{u2, u1} R A _inst_1 _inst_2 _inst_3) r) (Subsemigroup.carrier.{u1} A (MulOneClass.toMul.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2)))) (Submonoid.toSubsemigroup.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Subsemiring.toSubmonoid.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2) (Subsemiring.mk.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2) (Submonoid.mk.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Subsemigroup.mk.{u1} A (MulOneClass.toMul.{u1} A (MulZeroOneClass.toMulOneClass.{u1} A (NonAssocSemiring.toMulZeroOneClass.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2)))) (SetLike.coe.{u1, u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) s) hadd) h0) (fun {a._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6428 : A} {b._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6429 : A} => Submodule.add_mem.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3) s a._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6428 b._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.6429) (Submodule.zero_mem.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3) s))))))) (HSMul.hSMul.{u2, u1, u1} R A A (instHSMul.{u2, u1} R A (Algebra.toSMul.{u2, u1} R A _inst_1 _inst_2 _inst_3)) r (OfNat.ofNat.{u1} A 1 (One.toOfNat1.{u1} A (Semiring.toOne.{u1} A _inst_2)))) (Algebra.algebraMap_eq_smul_one.{u2, u1} R A _inst_1 _inst_2 _inst_3 r))) (Submodule.smul_mem.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3) s (OfNat.ofNat.{u1} A 1 (One.toOfNat1.{u1} A (Semiring.toOne.{u1} A _inst_2))) r h0)))
Case conversion may be inaccurate. Consider using '#align submodule.to_subalgebra_mk Submodule.toSubalgebra_mkₓ'. -/
@[simp]
theorem toSubalgebra_mk (s : Set A) (h0 hadd hsmul h1 hmul) :
    (Submodule.mk s hadd h0 hsmul : Submodule R A).toSubalgebra h1 hmul =
      Subalgebra.mk s (@hmul) h1 (@hadd) h0 fun r =>
        by
        rw [Algebra.algebraMap_eq_smul_one]
        exact hsmul r h1 :=
  rfl
#align submodule.to_subalgebra_mk Submodule.toSubalgebra_mk

/- warning: submodule.to_subalgebra_to_submodule -> Submodule.toSubalgebra_toSubmodule is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (p : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (h_one : Membership.Mem.{u2, u2} A (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (SetLike.hasMem.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.setLike.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (OfNat.ofNat.{u2} A 1 (OfNat.mk.{u2} A 1 (One.one.{u2} A (AddMonoidWithOne.toOne.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))))) p) (h_mul : forall (x : A) (y : A), (Membership.Mem.{u2, u2} A (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (SetLike.hasMem.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.setLike.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) x p) -> (Membership.Mem.{u2, u2} A (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (SetLike.hasMem.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.setLike.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) y p) -> (Membership.Mem.{u2, u2} A (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (SetLike.hasMem.{u2, u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) A (Submodule.setLike.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (HMul.hMul.{u2, u2, u2} A A A (instHMul.{u2} A (Distrib.toHasMul.{u2} A (NonUnitalNonAssocSemiring.toDistrib.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) x y) p)), Eq.{succ u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (coeFn.{succ u2, succ u2} (OrderEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))))) (fun (_x : RelEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) => (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) -> (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (RelEmbedding.hasCoeToFun.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.toSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 p h_one h_mul)) p
but is expected to have type
  forall {R : Type.{u2}} {A : Type.{u1}} [_inst_1 : CommSemiring.{u2} R] [_inst_2 : Semiring.{u1} A] [_inst_3 : Algebra.{u2, u1} R A _inst_1 _inst_2] (p : Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (h_one : Membership.mem.{u1, u1} A (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (SetLike.instMembership.{u1, u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3))) (OfNat.ofNat.{u1} A 1 (One.toOfNat1.{u1} A (Semiring.toOne.{u1} A _inst_2))) p) (h_mul : forall (x : A) (y : A), (Membership.mem.{u1, u1} A (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (SetLike.instMembership.{u1, u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3))) x p) -> (Membership.mem.{u1, u1} A (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (SetLike.instMembership.{u1, u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3))) y p) -> (Membership.mem.{u1, u1} A (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (SetLike.instMembership.{u1, u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) A (Submodule.instSetLikeSubmodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3))) (HMul.hMul.{u1, u1, u1} A A A (instHMul.{u1} A (NonUnitalNonAssocSemiring.toMul.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2)))) x y) p)), Eq.{succ u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) => Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (Submodule.toSubalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3 p h_one h_mul)) (FunLike.coe.{succ u1, succ u1, succ u1} (Function.Embedding.{succ u1, succ u1} (Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) (fun (_x : Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) => Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) _x) (EmbeddingLike.toFunLike.{succ u1, succ u1, succ u1} (Function.Embedding.{succ u1, succ u1} (Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (Function.instEmbeddingLikeEmbedding.{succ u1, succ u1} (Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)))) (RelEmbedding.toEmbedding.{u1, u1} (Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.680 : Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) => LE.le.{u1} (Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u1} (Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u1} (Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) (SetLike.instPartialOrder.{u1, u1} (Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3)))) x._@.Mathlib.Order.Hom.Basic._hyg.680 x._@.Mathlib.Order.Hom.Basic._hyg.682) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.695 : Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) => LE.le.{u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (OmegaCompletePartialOrder.toPartialOrder.{u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.instOmegaCompletePartialOrder.{u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)))))) x._@.Mathlib.Order.Hom.Basic._hyg.695 x._@.Mathlib.Order.Hom.Basic._hyg.697) (Subalgebra.toSubmodule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (Submodule.toSubalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3 p h_one h_mul)) p
Case conversion may be inaccurate. Consider using '#align submodule.to_subalgebra_to_submodule Submodule.toSubalgebra_toSubmoduleₓ'. -/
@[simp]
theorem toSubalgebra_toSubmodule (p : Submodule R A) (h_one h_mul) :
    (p.toSubalgebra h_one h_mul).toSubmodule = p :=
  SetLike.coe_injective rfl
#align submodule.to_subalgebra_to_submodule Submodule.toSubalgebra_toSubmodule

/- warning: subalgebra.to_submodule_to_subalgebra -> Subalgebra.toSubmodule_toSubalgebra is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.toSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (coeFn.{succ u2, succ u2} (OrderEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))))) (fun (_x : RelEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) => (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) -> (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (RelEmbedding.hasCoeToFun.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3) S) (Subalgebra.one_mem.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (fun (_x : A) (_x_1 : A) => Subalgebra.mul_mem.{u1, u2} R A _inst_1 _inst_2 _inst_3 S _x _x_1)) S
but is expected to have type
  forall {R : Type.{u2}} {A : Type.{u1}} [_inst_1 : CommSemiring.{u2} R] [_inst_2 : Semiring.{u1} A] [_inst_3 : Algebra.{u2, u1} R A _inst_1 _inst_2] (S : Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3), Eq.{succ u1} (Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) (Submodule.toSubalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3 (FunLike.coe.{succ u1, succ u1, succ u1} (Function.Embedding.{succ u1, succ u1} (Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) (fun (_x : Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) => Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) _x) (EmbeddingLike.toFunLike.{succ u1, succ u1, succ u1} (Function.Embedding.{succ u1, succ u1} (Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (Function.instEmbeddingLikeEmbedding.{succ u1, succ u1} (Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)))) (RelEmbedding.toEmbedding.{u1, u1} (Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.680 : Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) => LE.le.{u1} (Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u1} (Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u1} (Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) (SetLike.instPartialOrder.{u1, u1} (Subalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u1} R A _inst_1 _inst_2 _inst_3)))) x._@.Mathlib.Order.Hom.Basic._hyg.680 x._@.Mathlib.Order.Hom.Basic._hyg.682) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.695 : Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) => LE.le.{u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (OmegaCompletePartialOrder.toPartialOrder.{u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.instOmegaCompletePartialOrder.{u1} (Submodule.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u2, u1} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_2))) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_2 _inst_3)))))) x._@.Mathlib.Order.Hom.Basic._hyg.695 x._@.Mathlib.Order.Hom.Basic._hyg.697) (Subalgebra.toSubmodule.{u2, u1} R A _inst_1 _inst_2 _inst_3)) S) (Subalgebra.one_mem.{u2, u1} R A _inst_1 _inst_2 _inst_3 S) (fun (_x : A) (_x_1 : A) => Subalgebra.mul_mem.{u2, u1} R A _inst_1 _inst_2 _inst_3 S _x _x_1)) S
Case conversion may be inaccurate. Consider using '#align subalgebra.to_submodule_to_subalgebra Subalgebra.toSubmodule_toSubalgebraₓ'. -/
@[simp]
theorem Subalgebra.toSubmodule_toSubalgebra (S : Subalgebra R A) :
    (S.toSubmodule.toSubalgebra S.one_mem fun _ _ => S.mul_mem) = S :=
  SetLike.coe_injective rfl
#align subalgebra.to_submodule_to_subalgebra Subalgebra.toSubmodule_toSubalgebra

end Submodule

namespace AlgHom

variable {R' : Type u'} {R : Type u} {A : Type v} {B : Type w} {C : Type w'}

variable [CommSemiring R]

variable [Semiring A] [Algebra R A] [Semiring B] [Algebra R B] [Semiring C] [Algebra R C]

variable (φ : A →ₐ[R] B)

#print AlgHom.range /-
/-- Range of an `alg_hom` as a subalgebra. -/
protected def range (φ : A →ₐ[R] B) : Subalgebra R B :=
  { φ.toRingHom.srange with algebraMap_mem' := fun r => ⟨algebraMap R A r, φ.commutes r⟩ }
#align alg_hom.range AlgHom.range
-/

/- warning: alg_hom.mem_range -> AlgHom.mem_range is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (φ : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) {y : B}, Iff (Membership.Mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.hasMem.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)) y (AlgHom.range.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 φ)) (Exists.{succ u2} A (fun (x : A) => Eq.{succ u3} B (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (fun (_x : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) => A -> B) ([anonymous].{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) φ x) y))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (φ : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) {y : B}, Iff (Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) y (AlgHom.range.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 φ)) (Exists.{succ u2} A (fun (x : A) => Eq.{succ u3} ((fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => B) x) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) A (fun (_x : A) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => B) _x) (SMulHomClass.toFunLike.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (SMulZeroClass.toSMul.{u1, u2} R A (AddMonoid.toZero.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribSMul.toSMulZeroClass.{u1, u2} R A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribMulAction.toDistribSMul.{u1, u2} R A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (SMulZeroClass.toSMul.{u1, u3} R B (AddMonoid.toZero.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribSMul.toSMulZeroClass.{u1, u3} R B (AddMonoid.toAddZeroClass.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribMulAction.toDistribSMul.{u1, u3} R B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u2, u3, max u2 u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5 (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (AlgHom.algHomClass.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5))))) φ x) y))
Case conversion may be inaccurate. Consider using '#align alg_hom.mem_range AlgHom.mem_rangeₓ'. -/
@[simp]
theorem mem_range (φ : A →ₐ[R] B) {y : B} : y ∈ φ.range ↔ ∃ x, φ x = y :=
  RingHom.mem_rangeS
#align alg_hom.mem_range AlgHom.mem_range

/- warning: alg_hom.mem_range_self -> AlgHom.mem_range_self is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (φ : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (x : A), Membership.Mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.hasMem.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (fun (_x : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) => A -> B) ([anonymous].{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) φ x) (AlgHom.range.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 φ)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (φ : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (x : A), Membership.mem.{u3, u3} ((fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => B) x) (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) A (fun (_x : A) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => B) _x) (SMulHomClass.toFunLike.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (SMulZeroClass.toSMul.{u1, u2} R A (AddMonoid.toZero.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribSMul.toSMulZeroClass.{u1, u2} R A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribMulAction.toDistribSMul.{u1, u2} R A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (SMulZeroClass.toSMul.{u1, u3} R B (AddMonoid.toZero.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribSMul.toSMulZeroClass.{u1, u3} R B (AddMonoid.toAddZeroClass.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribMulAction.toDistribSMul.{u1, u3} R B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u2, u3, max u2 u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5 (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (AlgHom.algHomClass.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5))))) φ x) (AlgHom.range.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 φ)
Case conversion may be inaccurate. Consider using '#align alg_hom.mem_range_self AlgHom.mem_range_selfₓ'. -/
theorem mem_range_self (φ : A →ₐ[R] B) (x : A) : φ x ∈ φ.range :=
  φ.mem_range.2 ⟨x, rfl⟩
#align alg_hom.mem_range_self AlgHom.mem_range_self

/- warning: alg_hom.coe_range -> AlgHom.coe_range is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (φ : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5), Eq.{succ u3} (Set.{u3} B) ((fun (a : Type.{u3}) (b : Type.{u3}) [self : HasLiftT.{succ u3, succ u3} a b] => self.0) (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Set.{u3} B) (HasLiftT.mk.{succ u3, succ u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Set.{u3} B) (CoeTCₓ.coe.{succ u3, succ u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Set.{u3} B) (SetLike.Set.hasCoeT.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)))) (AlgHom.range.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 φ)) (Set.range.{u3, succ u2} B A (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (fun (_x : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) => A -> B) ([anonymous].{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) φ))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (φ : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5), Eq.{succ u3} (Set.{u3} B) (SetLike.coe.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (AlgHom.range.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 φ)) (Set.range.{u3, succ u2} B A (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) A (fun (_x : A) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => B) _x) (SMulHomClass.toFunLike.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (SMulZeroClass.toSMul.{u1, u2} R A (AddMonoid.toZero.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribSMul.toSMulZeroClass.{u1, u2} R A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribMulAction.toDistribSMul.{u1, u2} R A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (SMulZeroClass.toSMul.{u1, u3} R B (AddMonoid.toZero.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribSMul.toSMulZeroClass.{u1, u3} R B (AddMonoid.toAddZeroClass.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribMulAction.toDistribSMul.{u1, u3} R B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u2, u3, max u2 u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5 (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (AlgHom.algHomClass.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5))))) φ))
Case conversion may be inaccurate. Consider using '#align alg_hom.coe_range AlgHom.coe_rangeₓ'. -/
@[simp]
theorem coe_range (φ : A →ₐ[R] B) : (φ.range : Set B) = Set.range φ :=
  by
  ext
  rw [SetLike.mem_coe, mem_range]
  rfl
#align alg_hom.coe_range AlgHom.coe_range

#print AlgHom.range_comp /-
theorem range_comp (f : A →ₐ[R] B) (g : B →ₐ[R] C) : (g.comp f).range = f.range.map g :=
  SetLike.coe_injective (Set.range_comp g f)
#align alg_hom.range_comp AlgHom.range_comp
-/

/- warning: alg_hom.range_comp_le_range -> AlgHom.range_comp_le_range is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} {C : Type.{u4}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] [_inst_6 : Semiring.{u4} C] [_inst_7 : Algebra.{u1, u4} R C _inst_1 _inst_6] (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (g : AlgHom.{u1, u3, u4} R B C _inst_1 _inst_4 _inst_6 _inst_5 _inst_7), LE.le.{u4} (Subalgebra.{u1, u4} R C _inst_1 _inst_6 _inst_7) (Preorder.toLE.{u4} (Subalgebra.{u1, u4} R C _inst_1 _inst_6 _inst_7) (PartialOrder.toPreorder.{u4} (Subalgebra.{u1, u4} R C _inst_1 _inst_6 _inst_7) (SetLike.partialOrder.{u4, u4} (Subalgebra.{u1, u4} R C _inst_1 _inst_6 _inst_7) C (Subalgebra.setLike.{u1, u4} R C _inst_1 _inst_6 _inst_7)))) (AlgHom.range.{u1, u2, u4} R A C _inst_1 _inst_2 _inst_3 _inst_6 _inst_7 (AlgHom.comp.{u1, u2, u3, u4} R A B C _inst_1 _inst_2 _inst_4 _inst_6 _inst_3 _inst_5 _inst_7 g f)) (AlgHom.range.{u1, u3, u4} R B C _inst_1 _inst_4 _inst_5 _inst_6 _inst_7 g)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} {C : Type.{u4}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] [_inst_6 : Semiring.{u4} C] [_inst_7 : Algebra.{u1, u4} R C _inst_1 _inst_6] (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (g : AlgHom.{u1, u3, u4} R B C _inst_1 _inst_4 _inst_6 _inst_5 _inst_7), LE.le.{u4} (Subalgebra.{u1, u4} R C _inst_1 _inst_6 _inst_7) (Preorder.toLE.{u4} (Subalgebra.{u1, u4} R C _inst_1 _inst_6 _inst_7) (PartialOrder.toPreorder.{u4} (Subalgebra.{u1, u4} R C _inst_1 _inst_6 _inst_7) (SetLike.instPartialOrder.{u4, u4} (Subalgebra.{u1, u4} R C _inst_1 _inst_6 _inst_7) C (Subalgebra.instSetLikeSubalgebra.{u1, u4} R C _inst_1 _inst_6 _inst_7)))) (AlgHom.range.{u1, u2, u4} R A C _inst_1 _inst_2 _inst_3 _inst_6 _inst_7 (AlgHom.comp.{u1, u2, u3, u4} R A B C _inst_1 _inst_2 _inst_4 _inst_6 _inst_3 _inst_5 _inst_7 g f)) (AlgHom.range.{u1, u3, u4} R B C _inst_1 _inst_4 _inst_5 _inst_6 _inst_7 g)
Case conversion may be inaccurate. Consider using '#align alg_hom.range_comp_le_range AlgHom.range_comp_le_rangeₓ'. -/
theorem range_comp_le_range (f : A →ₐ[R] B) (g : B →ₐ[R] C) : (g.comp f).range ≤ g.range :=
  SetLike.coe_mono (Set.range_comp_subset_range f g)
#align alg_hom.range_comp_le_range AlgHom.range_comp_le_range

/- warning: alg_hom.cod_restrict -> AlgHom.codRestrict is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (S : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5), (forall (x : A), Membership.Mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.hasMem.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (fun (_x : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) => A -> B) ([anonymous].{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) f x) S) -> (AlgHom.{u1, u2, u3} R A (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)) S) _inst_1 _inst_2 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) _inst_3 (Subalgebra.algebra.{u1, u3} R B _inst_1 _inst_4 _inst_5 S))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (S : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5), (forall (x : A), Membership.mem.{u3, u3} ((fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => B) x) (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) A (fun (_x : A) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => B) _x) (SMulHomClass.toFunLike.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (SMulZeroClass.toSMul.{u1, u2} R A (AddMonoid.toZero.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribSMul.toSMulZeroClass.{u1, u2} R A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribMulAction.toDistribSMul.{u1, u2} R A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (SMulZeroClass.toSMul.{u1, u3} R B (AddMonoid.toZero.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribSMul.toSMulZeroClass.{u1, u3} R B (AddMonoid.toAddZeroClass.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribMulAction.toDistribSMul.{u1, u3} R B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u2, u3, max u2 u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5 (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (AlgHom.algHomClass.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5))))) f x) S) -> (AlgHom.{u1, u2, u3} R A (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) _inst_1 _inst_2 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) _inst_3 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S))
Case conversion may be inaccurate. Consider using '#align alg_hom.cod_restrict AlgHom.codRestrictₓ'. -/
/-- Restrict the codomain of an algebra homomorphism. -/
def codRestrict (f : A →ₐ[R] B) (S : Subalgebra R B) (hf : ∀ x, f x ∈ S) : A →ₐ[R] S :=
  { RingHom.codRestrict (f : A →+* B) S hf with commutes' := fun r => Subtype.eq <| f.commutes r }
#align alg_hom.cod_restrict AlgHom.codRestrict

/- warning: alg_hom.val_comp_cod_restrict -> AlgHom.val_comp_codRestrict is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (S : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (hf : forall (x : A), Membership.Mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.hasMem.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (fun (_x : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) => A -> B) ([anonymous].{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) f x) S), Eq.{max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (AlgHom.comp.{u1, u2, u3, u3} R A (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)) S) B _inst_1 _inst_2 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) _inst_4 _inst_3 (Subalgebra.algebra.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) _inst_5 (Subalgebra.val.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) (AlgHom.codRestrict.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f S hf)) f
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (S : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (hf : forall (x : A), Membership.mem.{u3, u3} ((fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => B) x) (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) A (fun (_x : A) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => B) _x) (SMulHomClass.toFunLike.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (SMulZeroClass.toSMul.{u1, u2} R A (AddMonoid.toZero.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribSMul.toSMulZeroClass.{u1, u2} R A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribMulAction.toDistribSMul.{u1, u2} R A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (SMulZeroClass.toSMul.{u1, u3} R B (AddMonoid.toZero.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribSMul.toSMulZeroClass.{u1, u3} R B (AddMonoid.toAddZeroClass.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribMulAction.toDistribSMul.{u1, u3} R B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u2, u3, max u2 u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5 (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (AlgHom.algHomClass.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5))))) f x) S), Eq.{max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (AlgHom.comp.{u1, u2, u3, u3} R A (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) B _inst_1 _inst_2 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) _inst_4 _inst_3 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) _inst_5 (Subalgebra.val.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) (AlgHom.codRestrict.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f S hf)) f
Case conversion may be inaccurate. Consider using '#align alg_hom.val_comp_cod_restrict AlgHom.val_comp_codRestrictₓ'. -/
@[simp]
theorem val_comp_codRestrict (f : A →ₐ[R] B) (S : Subalgebra R B) (hf : ∀ x, f x ∈ S) :
    S.val.comp (f.codRestrict S hf) = f :=
  AlgHom.ext fun _ => rfl
#align alg_hom.val_comp_cod_restrict AlgHom.val_comp_codRestrict

/- warning: alg_hom.coe_cod_restrict -> AlgHom.coe_codRestrict is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (S : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (hf : forall (x : A), Membership.Mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.hasMem.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (fun (_x : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) => A -> B) ([anonymous].{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) f x) S) (x : A), Eq.{succ u3} B ((fun (a : Type.{u3}) (b : Type.{u3}) [self : HasLiftT.{succ u3, succ u3} a b] => self.0) (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)) S) B (HasLiftT.mk.{succ u3, succ u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)) S) B (CoeTCₓ.coe.{succ u3, succ u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)) S) B (coeBase.{succ u3, succ u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)) S) B (coeSubtype.{succ u3} B (fun (x : B) => Membership.Mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.hasMem.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S))))) (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R A (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)) S) _inst_1 _inst_2 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) _inst_3 (Subalgebra.algebra.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)) (fun (_x : AlgHom.{u1, u2, u3} R A (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)) S) _inst_1 _inst_2 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) _inst_3 (Subalgebra.algebra.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)) => A -> (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)) S)) ([anonymous].{u1, u2, u3} R A (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)) S) _inst_1 _inst_2 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) _inst_3 (Subalgebra.algebra.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)) (AlgHom.codRestrict.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f S hf) x)) (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (fun (_x : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) => A -> B) ([anonymous].{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) f x)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (S : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (hf : forall (x : A), Membership.mem.{u3, u3} ((fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => B) x) (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) A (fun (_x : A) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => B) _x) (SMulHomClass.toFunLike.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (SMulZeroClass.toSMul.{u1, u2} R A (AddMonoid.toZero.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribSMul.toSMulZeroClass.{u1, u2} R A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribMulAction.toDistribSMul.{u1, u2} R A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (SMulZeroClass.toSMul.{u1, u3} R B (AddMonoid.toZero.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribSMul.toSMulZeroClass.{u1, u3} R B (AddMonoid.toAddZeroClass.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribMulAction.toDistribSMul.{u1, u3} R B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u2, u3, max u2 u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5 (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (AlgHom.algHomClass.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5))))) f x) S) (x : A), Eq.{succ u3} ((fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => B) x) (Subtype.val.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Set.{u3} B) (Set.instMembershipSet.{u3} B) x (SetLike.coe.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) S)) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (AlgHom.{u1, u2, u3} R A (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) _inst_1 _inst_2 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) _inst_3 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)) A (fun (_x : A) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) _x) (SMulHomClass.toFunLike.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) _inst_1 _inst_2 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) _inst_3 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)) R A (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (SMulZeroClass.toSMul.{u1, u2} R A (AddMonoid.toZero.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribSMul.toSMulZeroClass.{u1, u2} R A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribMulAction.toDistribSMul.{u1, u2} R A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (SMulZeroClass.toSMul.{u1, u3} R (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (AddMonoid.toZero.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)))))) (DistribSMul.toSMulZeroClass.{u1, u3} R (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (AddMonoid.toAddZeroClass.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)))))) (DistribMulAction.toDistribSMul.{u1, u3} R (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S))))) (Module.toDistribMulAction.{u1, u3} R (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)))) (Algebra.toModule.{u1, u3} R (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) _inst_1 _inst_2 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) _inst_3 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)) R A (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S))))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)))) (Algebra.toModule.{u1, u3} R (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S))) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) _inst_1 _inst_2 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) _inst_3 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)) R A (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)))) (Algebra.toModule.{u1, u3} R (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S))) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u2, u3, max u2 u3} R A (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) _inst_1 _inst_2 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) _inst_3 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) (AlgHom.{u1, u2, u3} R A (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) _inst_1 _inst_2 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) _inst_3 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)) (AlgHom.algHomClass.{u1, u2, u3} R A (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) _inst_1 _inst_2 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) _inst_3 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)))))) (AlgHom.codRestrict.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f S hf) x)) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) A (fun (_x : A) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => B) _x) (SMulHomClass.toFunLike.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (SMulZeroClass.toSMul.{u1, u2} R A (AddMonoid.toZero.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribSMul.toSMulZeroClass.{u1, u2} R A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribMulAction.toDistribSMul.{u1, u2} R A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (SMulZeroClass.toSMul.{u1, u3} R B (AddMonoid.toZero.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribSMul.toSMulZeroClass.{u1, u3} R B (AddMonoid.toAddZeroClass.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribMulAction.toDistribSMul.{u1, u3} R B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u2, u3, max u2 u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5 (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (AlgHom.algHomClass.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5))))) f x)
Case conversion may be inaccurate. Consider using '#align alg_hom.coe_cod_restrict AlgHom.coe_codRestrictₓ'. -/
@[simp]
theorem coe_codRestrict (f : A →ₐ[R] B) (S : Subalgebra R B) (hf : ∀ x, f x ∈ S) (x : A) :
    ↑(f.codRestrict S hf x) = f x :=
  rfl
#align alg_hom.coe_cod_restrict AlgHom.coe_codRestrict

/- warning: alg_hom.injective_cod_restrict -> AlgHom.injective_codRestrict is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (S : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (hf : forall (x : A), Membership.Mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.hasMem.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (fun (_x : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) => A -> B) ([anonymous].{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) f x) S), Iff (Function.Injective.{succ u2, succ u3} A (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)) S) (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R A (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)) S) _inst_1 _inst_2 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) _inst_3 (Subalgebra.algebra.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)) (fun (_x : AlgHom.{u1, u2, u3} R A (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)) S) _inst_1 _inst_2 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) _inst_3 (Subalgebra.algebra.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)) => A -> (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)) S)) ([anonymous].{u1, u2, u3} R A (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)) S) _inst_1 _inst_2 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) _inst_3 (Subalgebra.algebra.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)) (AlgHom.codRestrict.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f S hf))) (Function.Injective.{succ u2, succ u3} A B (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (fun (_x : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) => A -> B) ([anonymous].{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) f))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (S : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (hf : forall (x : A), Membership.mem.{u3, u3} ((fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => B) x) (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) A (fun (_x : A) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => B) _x) (SMulHomClass.toFunLike.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (SMulZeroClass.toSMul.{u1, u2} R A (AddMonoid.toZero.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribSMul.toSMulZeroClass.{u1, u2} R A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribMulAction.toDistribSMul.{u1, u2} R A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (SMulZeroClass.toSMul.{u1, u3} R B (AddMonoid.toZero.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribSMul.toSMulZeroClass.{u1, u3} R B (AddMonoid.toAddZeroClass.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribMulAction.toDistribSMul.{u1, u3} R B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u2, u3, max u2 u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5 (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (AlgHom.algHomClass.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5))))) f x) S), Iff (Function.Injective.{succ u2, succ u3} A (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (AlgHom.{u1, u2, u3} R A (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) _inst_1 _inst_2 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) _inst_3 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)) A (fun (_x : A) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) _x) (SMulHomClass.toFunLike.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) _inst_1 _inst_2 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) _inst_3 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)) R A (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (SMulZeroClass.toSMul.{u1, u2} R A (AddMonoid.toZero.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribSMul.toSMulZeroClass.{u1, u2} R A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribMulAction.toDistribSMul.{u1, u2} R A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (SMulZeroClass.toSMul.{u1, u3} R (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (AddMonoid.toZero.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)))))) (DistribSMul.toSMulZeroClass.{u1, u3} R (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (AddMonoid.toAddZeroClass.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)))))) (DistribMulAction.toDistribSMul.{u1, u3} R (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S))))) (Module.toDistribMulAction.{u1, u3} R (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)))) (Algebra.toModule.{u1, u3} R (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) _inst_1 _inst_2 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) _inst_3 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)) R A (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S))))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)))) (Algebra.toModule.{u1, u3} R (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S))) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) _inst_1 _inst_2 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) _inst_3 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)) R A (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)))) (Algebra.toModule.{u1, u3} R (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S))) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u2, u3, max u2 u3} R A (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) _inst_1 _inst_2 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) _inst_3 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) (AlgHom.{u1, u2, u3} R A (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) _inst_1 _inst_2 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) _inst_3 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)) (AlgHom.algHomClass.{u1, u2, u3} R A (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x S)) _inst_1 _inst_2 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S) _inst_3 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 S)))))) (AlgHom.codRestrict.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f S hf))) (Function.Injective.{succ u2, succ u3} A B (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) A (fun (_x : A) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => B) _x) (SMulHomClass.toFunLike.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (SMulZeroClass.toSMul.{u1, u2} R A (AddMonoid.toZero.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribSMul.toSMulZeroClass.{u1, u2} R A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribMulAction.toDistribSMul.{u1, u2} R A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (SMulZeroClass.toSMul.{u1, u3} R B (AddMonoid.toZero.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribSMul.toSMulZeroClass.{u1, u3} R B (AddMonoid.toAddZeroClass.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribMulAction.toDistribSMul.{u1, u3} R B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u2, u3, max u2 u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5 (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (AlgHom.algHomClass.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5))))) f))
Case conversion may be inaccurate. Consider using '#align alg_hom.injective_cod_restrict AlgHom.injective_codRestrictₓ'. -/
theorem injective_codRestrict (f : A →ₐ[R] B) (S : Subalgebra R B) (hf : ∀ x, f x ∈ S) :
    Function.Injective (f.codRestrict S hf) ↔ Function.Injective f :=
  ⟨fun H x y hxy => H <| Subtype.eq hxy, fun H x y hxy => H (congr_arg Subtype.val hxy : _)⟩
#align alg_hom.injective_cod_restrict AlgHom.injective_codRestrict

/- warning: alg_hom.range_restrict -> AlgHom.rangeRestrict is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5), AlgHom.{u1, u2, u3} R A (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (AlgHom.range.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f)) _inst_1 _inst_2 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 (AlgHom.range.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f)) _inst_3 (Subalgebra.algebra.{u1, u3} R B _inst_1 _inst_4 _inst_5 (AlgHom.range.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5), AlgHom.{u1, u2, u3} R A (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x (AlgHom.range.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f))) _inst_1 _inst_2 (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 (AlgHom.range.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f)) _inst_3 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u3} R B _inst_1 _inst_4 _inst_5 (AlgHom.range.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f))
Case conversion may be inaccurate. Consider using '#align alg_hom.range_restrict AlgHom.rangeRestrictₓ'. -/
/-- Restrict the codomain of a alg_hom `f` to `f.range`.

This is the bundled version of `set.range_factorization`. -/
@[reducible]
def rangeRestrict (f : A →ₐ[R] B) : A →ₐ[R] f.range :=
  f.codRestrict f.range f.mem_range_self
#align alg_hom.range_restrict AlgHom.rangeRestrict

#print AlgHom.equalizer /-
/-- The equalizer of two R-algebra homomorphisms -/
def equalizer (ϕ ψ : A →ₐ[R] B) : Subalgebra R A
    where
  carrier := { a | ϕ a = ψ a }
  add_mem' x y (hx : ϕ x = ψ x) (hy : ϕ y = ψ y) := by
    rw [Set.mem_setOf_eq, ϕ.map_add, ψ.map_add, hx, hy]
  mul_mem' x y (hx : ϕ x = ψ x) (hy : ϕ y = ψ y) := by
    rw [Set.mem_setOf_eq, ϕ.map_mul, ψ.map_mul, hx, hy]
  algebraMap_mem' x := by rw [Set.mem_setOf_eq, AlgHom.commutes, AlgHom.commutes]
#align alg_hom.equalizer AlgHom.equalizer
-/

/- warning: alg_hom.mem_equalizer -> AlgHom.mem_equalizer is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (ϕ : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (ψ : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (x : A), Iff (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (AlgHom.equalizer.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 ϕ ψ)) (Eq.{succ u3} B (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (fun (_x : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) => A -> B) ([anonymous].{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) ϕ x) (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (fun (_x : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) => A -> B) ([anonymous].{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) ψ x))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (ϕ : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (ψ : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (x : A), Iff (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (AlgHom.equalizer.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 ϕ ψ)) (Eq.{succ u3} ((fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => B) x) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) A (fun (_x : A) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => B) _x) (SMulHomClass.toFunLike.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (SMulZeroClass.toSMul.{u1, u2} R A (AddMonoid.toZero.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribSMul.toSMulZeroClass.{u1, u2} R A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribMulAction.toDistribSMul.{u1, u2} R A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (SMulZeroClass.toSMul.{u1, u3} R B (AddMonoid.toZero.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribSMul.toSMulZeroClass.{u1, u3} R B (AddMonoid.toAddZeroClass.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribMulAction.toDistribSMul.{u1, u3} R B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u2, u3, max u2 u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5 (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (AlgHom.algHomClass.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5))))) ϕ x) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) A (fun (_x : A) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => B) _x) (SMulHomClass.toFunLike.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (SMulZeroClass.toSMul.{u1, u2} R A (AddMonoid.toZero.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribSMul.toSMulZeroClass.{u1, u2} R A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribMulAction.toDistribSMul.{u1, u2} R A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (SMulZeroClass.toSMul.{u1, u3} R B (AddMonoid.toZero.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribSMul.toSMulZeroClass.{u1, u3} R B (AddMonoid.toAddZeroClass.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribMulAction.toDistribSMul.{u1, u3} R B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u2, u3, max u2 u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5 (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (AlgHom.algHomClass.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5))))) ψ x))
Case conversion may be inaccurate. Consider using '#align alg_hom.mem_equalizer AlgHom.mem_equalizerₓ'. -/
@[simp]
theorem mem_equalizer (ϕ ψ : A →ₐ[R] B) (x : A) : x ∈ ϕ.equalizer ψ ↔ ϕ x = ψ x :=
  Iff.rfl
#align alg_hom.mem_equalizer AlgHom.mem_equalizer

/- warning: alg_hom.fintype_range -> AlgHom.fintypeRange is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] [_inst_8 : Fintype.{u2} A] [_inst_9 : DecidableEq.{succ u3} B] (φ : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5), Fintype.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (AlgHom.range.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 φ))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] [_inst_8 : Fintype.{u2} A] [_inst_9 : DecidableEq.{succ u3} B] (φ : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5), Fintype.{u3} (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) x (AlgHom.range.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 φ)))
Case conversion may be inaccurate. Consider using '#align alg_hom.fintype_range AlgHom.fintypeRangeₓ'. -/
/-- The range of a morphism of algebras is a fintype, if the domain is a fintype.

Note that this instance can cause a diamond with `subtype.fintype` if `B` is also a fintype. -/
instance fintypeRange [Fintype A] [DecidableEq B] (φ : A →ₐ[R] B) : Fintype φ.range :=
  Set.fintypeRange φ
#align alg_hom.fintype_range AlgHom.fintypeRange

end AlgHom

namespace AlgEquiv

variable {R : Type u} {A : Type v} {B : Type w}

variable [CommSemiring R] [Semiring A] [Semiring B] [Algebra R A] [Algebra R B]

#print AlgEquiv.ofLeftInverse /-
/-- Restrict an algebra homomorphism with a left inverse to an algebra isomorphism to its range.

This is a computable alternative to `alg_equiv.of_injective`. -/
def ofLeftInverse {g : B → A} {f : A →ₐ[R] B} (h : Function.LeftInverse g f) : A ≃ₐ[R] f.range :=
  { f.range_restrict with
    toFun := f.range_restrict
    invFun := g ∘ f.range.val
    left_inv := h
    right_inv := fun x =>
      Subtype.ext <|
        let ⟨x', hx'⟩ := f.mem_range.mp x.Prop
        show f (g x) = x by rw [← hx', h x'] }
#align alg_equiv.of_left_inverse AlgEquiv.ofLeftInverse
-/

#print AlgEquiv.ofLeftInverse_apply /-
@[simp]
theorem ofLeftInverse_apply {g : B → A} {f : A →ₐ[R] B} (h : Function.LeftInverse g f) (x : A) :
    ↑(ofLeftInverse h x) = f x :=
  rfl
#align alg_equiv.of_left_inverse_apply AlgEquiv.ofLeftInverse_apply
-/

#print AlgEquiv.ofLeftInverse_symm_apply /-
@[simp]
theorem ofLeftInverse_symm_apply {g : B → A} {f : A →ₐ[R] B} (h : Function.LeftInverse g f)
    (x : f.range) : (ofLeftInverse h).symm x = g x :=
  rfl
#align alg_equiv.of_left_inverse_symm_apply AlgEquiv.ofLeftInverse_symm_apply
-/

#print AlgEquiv.ofInjective /-
/-- Restrict an injective algebra homomorphism to an algebra isomorphism -/
noncomputable def ofInjective (f : A →ₐ[R] B) (hf : Function.Injective f) : A ≃ₐ[R] f.range :=
  ofLeftInverse (Classical.choose_spec hf.HasLeftInverse)
#align alg_equiv.of_injective AlgEquiv.ofInjective
-/

#print AlgEquiv.ofInjective_apply /-
@[simp]
theorem ofInjective_apply (f : A →ₐ[R] B) (hf : Function.Injective f) (x : A) :
    ↑(ofInjective f hf x) = f x :=
  rfl
#align alg_equiv.of_injective_apply AlgEquiv.ofInjective_apply
-/

/- warning: alg_equiv.of_injective_field -> AlgEquiv.ofInjectiveField is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : CommSemiring.{u1} R] {E : Type.{u2}} {F : Type.{u3}} [_inst_6 : DivisionRing.{u2} E] [_inst_7 : Semiring.{u3} F] [_inst_8 : Nontrivial.{u3} F] [_inst_9 : Algebra.{u1, u2} R E _inst_1 (Ring.toSemiring.{u2} E (DivisionRing.toRing.{u2} E _inst_6))] [_inst_10 : Algebra.{u1, u3} R F _inst_1 _inst_7] (f : AlgHom.{u1, u2, u3} R E F _inst_1 (Ring.toSemiring.{u2} E (DivisionRing.toRing.{u2} E _inst_6)) _inst_7 _inst_9 _inst_10), AlgEquiv.{u1, u2, u3} R E (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R F _inst_1 _inst_7 _inst_10) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R F _inst_1 _inst_7 _inst_10) F (Subalgebra.setLike.{u1, u3} R F _inst_1 _inst_7 _inst_10)) (AlgHom.range.{u1, u2, u3} R E F _inst_1 (Ring.toSemiring.{u2} E (DivisionRing.toRing.{u2} E _inst_6)) _inst_9 _inst_7 _inst_10 f)) _inst_1 (Ring.toSemiring.{u2} E (DivisionRing.toRing.{u2} E _inst_6)) (Subalgebra.toSemiring.{u1, u3} R F _inst_1 _inst_7 _inst_10 (AlgHom.range.{u1, u2, u3} R E F _inst_1 (Ring.toSemiring.{u2} E (DivisionRing.toRing.{u2} E _inst_6)) _inst_9 _inst_7 _inst_10 f)) _inst_9 (Subalgebra.algebra.{u1, u3} R F _inst_1 _inst_7 _inst_10 (AlgHom.range.{u1, u2, u3} R E F _inst_1 (Ring.toSemiring.{u2} E (DivisionRing.toRing.{u2} E _inst_6)) _inst_9 _inst_7 _inst_10 f))
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : CommSemiring.{u1} R] {E : Type.{u2}} {F : Type.{u3}} [_inst_6 : DivisionRing.{u2} E] [_inst_7 : Semiring.{u3} F] [_inst_8 : Nontrivial.{u3} F] [_inst_9 : Algebra.{u1, u2} R E _inst_1 (DivisionSemiring.toSemiring.{u2} E (DivisionRing.toDivisionSemiring.{u2} E _inst_6))] [_inst_10 : Algebra.{u1, u3} R F _inst_1 _inst_7] (f : AlgHom.{u1, u2, u3} R E F _inst_1 (DivisionSemiring.toSemiring.{u2} E (DivisionRing.toDivisionSemiring.{u2} E _inst_6)) _inst_7 _inst_9 _inst_10), AlgEquiv.{u1, u2, u3} R E (Subtype.{succ u3} F (fun (x : F) => Membership.mem.{u3, u3} F (Subalgebra.{u1, u3} R F _inst_1 _inst_7 _inst_10) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R F _inst_1 _inst_7 _inst_10) F (Subalgebra.instSetLikeSubalgebra.{u1, u3} R F _inst_1 _inst_7 _inst_10)) x (AlgHom.range.{u1, u2, u3} R E F _inst_1 (DivisionSemiring.toSemiring.{u2} E (DivisionRing.toDivisionSemiring.{u2} E _inst_6)) _inst_9 _inst_7 _inst_10 f))) _inst_1 (DivisionSemiring.toSemiring.{u2} E (DivisionRing.toDivisionSemiring.{u2} E _inst_6)) (Subalgebra.toSemiring.{u1, u3} R F _inst_1 _inst_7 _inst_10 (AlgHom.range.{u1, u2, u3} R E F _inst_1 (DivisionSemiring.toSemiring.{u2} E (DivisionRing.toDivisionSemiring.{u2} E _inst_6)) _inst_9 _inst_7 _inst_10 f)) _inst_9 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u3} R F _inst_1 _inst_7 _inst_10 (AlgHom.range.{u1, u2, u3} R E F _inst_1 (DivisionSemiring.toSemiring.{u2} E (DivisionRing.toDivisionSemiring.{u2} E _inst_6)) _inst_9 _inst_7 _inst_10 f))
Case conversion may be inaccurate. Consider using '#align alg_equiv.of_injective_field AlgEquiv.ofInjectiveFieldₓ'. -/
/-- Restrict an algebra homomorphism between fields to an algebra isomorphism -/
noncomputable def ofInjectiveField {E F : Type _} [DivisionRing E] [Semiring F] [Nontrivial F]
    [Algebra R E] [Algebra R F] (f : E →ₐ[R] F) : E ≃ₐ[R] f.range :=
  ofInjective f f.toRingHom.Injective
#align alg_equiv.of_injective_field AlgEquiv.ofInjectiveField

/- warning: alg_equiv.subalgebra_map -> AlgEquiv.subalgebraMap is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Semiring.{u3} B] [_inst_4 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_3] (e : AlgEquiv.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5) (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_4), AlgEquiv.{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_4) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_4) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_4)) S) (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u1, u3} R B _inst_1 _inst_3 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_3 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_3 _inst_5)) (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5 (AlgEquiv.toAlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 e) S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_4 S) (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_3 _inst_5 (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5 (AlgEquiv.toAlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 e) S)) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_4 S) (Subalgebra.algebra.{u1, u3} R B _inst_1 _inst_3 _inst_5 (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5 (AlgEquiv.toAlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 e) S))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Semiring.{u3} B] [_inst_4 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_3] (e : AlgEquiv.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5) (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_4), AlgEquiv.{u1, u2, u3} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_4) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_4) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_4)) x S)) (Subtype.{succ u3} B (fun (x : B) => Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_3 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_3 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_3 _inst_5)) x (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5 (AlgEquiv.toAlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 e) S))) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_4 S) (Subalgebra.toSemiring.{u1, u3} R B _inst_1 _inst_3 _inst_5 (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5 (AlgEquiv.toAlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 e) S)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_4 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u3} R B _inst_1 _inst_3 _inst_5 (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5 (AlgEquiv.toAlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 e) S))
Case conversion may be inaccurate. Consider using '#align alg_equiv.subalgebra_map AlgEquiv.subalgebraMapₓ'. -/
/-- Given an equivalence `e : A ≃ₐ[R] B` of `R`-algebras and a subalgebra `S` of `A`,
`subalgebra_map` is the induced equivalence between `S` and `S.map e` -/
@[simps]
def subalgebraMap (e : A ≃ₐ[R] B) (S : Subalgebra R A) : S ≃ₐ[R] S.map e.toAlgHom :=
  { e.toRingEquiv.subsemiringMap S.toSubsemiring with
    commutes' := fun r => by
      ext
      simp }
#align alg_equiv.subalgebra_map AlgEquiv.subalgebraMap

end AlgEquiv

namespace Algebra

variable (R : Type u) {A : Type v} {B : Type w}

variable [CommSemiring R] [Semiring A] [Algebra R A] [Semiring B] [Algebra R B]

#print Algebra.adjoin /-
/-- The minimal subalgebra that includes `s`. -/
def adjoin (s : Set A) : Subalgebra R A :=
  { Subsemiring.closure (Set.range (algebraMap R A) ∪ s) with
    algebraMap_mem' := fun r => Subsemiring.subset_closure <| Or.inl ⟨r, rfl⟩ }
#align algebra.adjoin Algebra.adjoin
-/

variable {R}

/- warning: algebra.gc -> Algebra.gc is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], GaloisConnection.{u2, u2} (Set.{u2} A) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Set.{u2} A) (CompleteSemilatticeInf.toPartialOrder.{u2} (Set.{u2} A) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Set.{u2} A) (Order.Coframe.toCompleteLattice.{u2} (Set.{u2} A) (CompleteDistribLattice.toCoframe.{u2} (Set.{u2} A) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u2} (Set.{u2} A) (Set.completeBooleanAlgebra.{u2} A))))))) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Algebra.adjoin.{u1, u2} R A _inst_1 _inst_2 _inst_3) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], GaloisConnection.{u2, u2} (Set.{u2} A) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Set.{u2} A) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Set.{u2} A) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Set.{u2} A) (Order.Coframe.toCompleteLattice.{u2} (Set.{u2} A) (CompleteDistribLattice.toCoframe.{u2} (Set.{u2} A) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u2} (Set.{u2} A) (Set.instCompleteBooleanAlgebraSet.{u2} A))))))) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instPartialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Algebra.adjoin.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))
Case conversion may be inaccurate. Consider using '#align algebra.gc Algebra.gcₓ'. -/
protected theorem gc : GaloisConnection (adjoin R : Set A → Subalgebra R A) coe := fun s S =>
  ⟨fun H => le_trans (le_trans (Set.subset_union_right _ _) Subsemiring.subset_closure) H, fun H =>
    show Subsemiring.closure (Set.range (algebraMap R A) ∪ s) ≤ S.toSubsemiring from
      Subsemiring.closure_le.2 <| Set.union_subset S.range_subset H⟩
#align algebra.gc Algebra.gc

/- warning: algebra.gi -> Algebra.gi is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], GaloisInsertion.{u2, u2} (Set.{u2} A) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Set.{u2} A) (CompleteSemilatticeInf.toPartialOrder.{u2} (Set.{u2} A) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Set.{u2} A) (Order.Coframe.toCompleteLattice.{u2} (Set.{u2} A) (CompleteDistribLattice.toCoframe.{u2} (Set.{u2} A) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u2} (Set.{u2} A) (Set.completeBooleanAlgebra.{u2} A))))))) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Algebra.adjoin.{u1, u2} R A _inst_1 _inst_2 _inst_3) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], GaloisInsertion.{u2, u2} (Set.{u2} A) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Set.{u2} A) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Set.{u2} A) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Set.{u2} A) (Order.Coframe.toCompleteLattice.{u2} (Set.{u2} A) (CompleteDistribLattice.toCoframe.{u2} (Set.{u2} A) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u2} (Set.{u2} A) (Set.instCompleteBooleanAlgebraSet.{u2} A))))))) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instPartialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Algebra.adjoin.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))
Case conversion may be inaccurate. Consider using '#align algebra.gi Algebra.giₓ'. -/
/-- Galois insertion between `adjoin` and `coe`. -/
protected def gi : GaloisInsertion (adjoin R : Set A → Subalgebra R A) coe
    where
  choice s hs := (adjoin R s).copy s <| le_antisymm (Algebra.gc.le_u_l s) hs
  gc := Algebra.gc
  le_l_u S := (Algebra.gc (S : Set A) (adjoin R S)).1 <| le_rfl
  choice_eq _ _ := Subalgebra.copy_eq _ _ _
#align algebra.gi Algebra.gi

instance : CompleteLattice (Subalgebra R A) :=
  GaloisInsertion.liftCompleteLattice Algebra.gi

/- warning: algebra.coe_top -> Algebra.coe_top is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], Eq.{succ u2} (Set.{u2} A) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toHasTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Set.univ.{u2} A)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], Eq.{succ u2} (Set.{u2} A) (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Set.univ.{u2} A)
Case conversion may be inaccurate. Consider using '#align algebra.coe_top Algebra.coe_topₓ'. -/
@[simp]
theorem coe_top : (↑(⊤ : Subalgebra R A) : Set A) = Set.univ :=
  rfl
#align algebra.coe_top Algebra.coe_top

/- warning: algebra.mem_top -> Algebra.mem_top is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {x : A}, Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toHasTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3)))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {x : A}, Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))
Case conversion may be inaccurate. Consider using '#align algebra.mem_top Algebra.mem_topₓ'. -/
@[simp]
theorem mem_top {x : A} : x ∈ (⊤ : Subalgebra R A) :=
  Set.mem_univ x
#align algebra.mem_top Algebra.mem_top

/- warning: algebra.top_to_submodule -> Algebra.top_toSubmodule is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], Eq.{succ u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (coeFn.{succ u2, succ u2} (OrderEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))))) (fun (_x : RelEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) => (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) -> (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (RelEmbedding.hasCoeToFun.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toHasTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Top.top.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.hasTop.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], Eq.{succ u2} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (FunLike.coe.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (fun (_x : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) _x) (EmbeddingLike.toFunLike.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Function.instEmbeddingLikeEmbedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (RelEmbedding.toEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.680 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instPartialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) x._@.Mathlib.Order.Hom.Basic._hyg.680 x._@.Mathlib.Order.Hom.Basic._hyg.682) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.695 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) => LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))) x._@.Mathlib.Order.Hom.Basic._hyg.695 x._@.Mathlib.Order.Hom.Basic._hyg.697) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Top.top.{u2} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Submodule.instTopSubmodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))
Case conversion may be inaccurate. Consider using '#align algebra.top_to_submodule Algebra.top_toSubmoduleₓ'. -/
@[simp]
theorem top_toSubmodule : (⊤ : Subalgebra R A).toSubmodule = ⊤ :=
  rfl
#align algebra.top_to_submodule Algebra.top_toSubmodule

/- warning: algebra.top_to_subsemiring -> Algebra.top_toSubsemiring is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], Eq.{succ u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toHasTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Top.top.{u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Subsemiring.hasTop.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], Eq.{succ u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Top.top.{u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Subsemiring.instTopSubsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))
Case conversion may be inaccurate. Consider using '#align algebra.top_to_subsemiring Algebra.top_toSubsemiringₓ'. -/
@[simp]
theorem top_toSubsemiring : (⊤ : Subalgebra R A).toSubsemiring = ⊤ :=
  rfl
#align algebra.top_to_subsemiring Algebra.top_toSubsemiring

/- warning: algebra.top_to_subring -> Algebra.top_toSubring is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_6 : CommRing.{u1} R] [_inst_7 : Ring.{u2} A] [_inst_8 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_6) (Ring.toSemiring.{u2} A _inst_7)], Eq.{succ u2} (Subring.{u2} A _inst_7) (Subalgebra.toSubring.{u1, u2} R A _inst_6 _inst_7 _inst_8 (Top.top.{u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_6) (Ring.toSemiring.{u2} A _inst_7) _inst_8) (CompleteLattice.toHasTop.{u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_6) (Ring.toSemiring.{u2} A _inst_7) _inst_8) (Algebra.Subalgebra.completeLattice.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_6) (Ring.toSemiring.{u2} A _inst_7) _inst_8)))) (Top.top.{u2} (Subring.{u2} A _inst_7) (Subring.hasTop.{u2} A _inst_7))
but is expected to have type
  forall {R : Type.{u2}} {A : Type.{u1}} [_inst_6 : CommRing.{u2} R] [_inst_7 : Ring.{u1} A] [_inst_8 : Algebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_6) (Ring.toSemiring.{u1} A _inst_7)], Eq.{succ u1} (Subring.{u1} A _inst_7) (Subalgebra.toSubring.{u2, u1} R A _inst_6 _inst_7 _inst_8 (Top.top.{u1} (Subalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_6) (Ring.toSemiring.{u1} A _inst_7) _inst_8) (CompleteLattice.toTop.{u1} (Subalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_6) (Ring.toSemiring.{u1} A _inst_7) _inst_8) (Algebra.instCompleteLatticeSubalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_6) (Ring.toSemiring.{u1} A _inst_7) _inst_8)))) (Top.top.{u1} (Subring.{u1} A _inst_7) (Subring.instTopSubring.{u1} A _inst_7))
Case conversion may be inaccurate. Consider using '#align algebra.top_to_subring Algebra.top_toSubringₓ'. -/
@[simp]
theorem top_toSubring {R A : Type _} [CommRing R] [Ring A] [Algebra R A] :
    (⊤ : Subalgebra R A).toSubring = ⊤ :=
  rfl
#align algebra.top_to_subring Algebra.top_toSubring

/- warning: algebra.to_submodule_eq_top -> Algebra.toSubmodule_eq_top is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3}, Iff (Eq.{succ u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (coeFn.{succ u2, succ u2} (OrderEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))))) (fun (_x : RelEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) => (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) -> (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (RelEmbedding.hasCoeToFun.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3) S) (Top.top.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.hasTop.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toHasTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3}, Iff (Eq.{succ u2} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (FunLike.coe.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (fun (_x : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) _x) (EmbeddingLike.toFunLike.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Function.instEmbeddingLikeEmbedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (RelEmbedding.toEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.680 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instPartialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) x._@.Mathlib.Order.Hom.Basic._hyg.680 x._@.Mathlib.Order.Hom.Basic._hyg.682) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.695 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) => LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))) x._@.Mathlib.Order.Hom.Basic._hyg.695 x._@.Mathlib.Order.Hom.Basic._hyg.697) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (Top.top.{u2} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (Submodule.instTopSubmodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))))
Case conversion may be inaccurate. Consider using '#align algebra.to_submodule_eq_top Algebra.toSubmodule_eq_topₓ'. -/
@[simp]
theorem toSubmodule_eq_top {S : Subalgebra R A} : S.toSubmodule = ⊤ ↔ S = ⊤ :=
  Subalgebra.toSubmodule.Injective.eq_iff' top_toSubmodule
#align algebra.to_submodule_eq_top Algebra.toSubmodule_eq_top

/- warning: algebra.to_subsemiring_eq_top -> Algebra.toSubsemiring_eq_top is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3}, Iff (Eq.{succ u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Top.top.{u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Subsemiring.hasTop.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toHasTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3}, Iff (Eq.{succ u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Top.top.{u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Subsemiring.instTopSubsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))))
Case conversion may be inaccurate. Consider using '#align algebra.to_subsemiring_eq_top Algebra.toSubsemiring_eq_topₓ'. -/
@[simp]
theorem toSubsemiring_eq_top {S : Subalgebra R A} : S.toSubsemiring = ⊤ ↔ S = ⊤ :=
  Subalgebra.toSubsemiring_injective.eq_iff' top_toSubsemiring
#align algebra.to_subsemiring_eq_top Algebra.toSubsemiring_eq_top

/- warning: algebra.to_subring_eq_top -> Algebra.toSubring_eq_top is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_6 : CommRing.{u1} R] [_inst_7 : Ring.{u2} A] [_inst_8 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_6) (Ring.toSemiring.{u2} A _inst_7)] {S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_6) (Ring.toSemiring.{u2} A _inst_7) _inst_8}, Iff (Eq.{succ u2} (Subring.{u2} A _inst_7) (Subalgebra.toSubring.{u1, u2} R A _inst_6 _inst_7 _inst_8 S) (Top.top.{u2} (Subring.{u2} A _inst_7) (Subring.hasTop.{u2} A _inst_7))) (Eq.{succ u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_6) (Ring.toSemiring.{u2} A _inst_7) _inst_8) S (Top.top.{u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_6) (Ring.toSemiring.{u2} A _inst_7) _inst_8) (CompleteLattice.toHasTop.{u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_6) (Ring.toSemiring.{u2} A _inst_7) _inst_8) (Algebra.Subalgebra.completeLattice.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_6) (Ring.toSemiring.{u2} A _inst_7) _inst_8))))
but is expected to have type
  forall {R : Type.{u2}} {A : Type.{u1}} [_inst_6 : CommRing.{u2} R] [_inst_7 : Ring.{u1} A] [_inst_8 : Algebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_6) (Ring.toSemiring.{u1} A _inst_7)] {S : Subalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_6) (Ring.toSemiring.{u1} A _inst_7) _inst_8}, Iff (Eq.{succ u1} (Subring.{u1} A _inst_7) (Subalgebra.toSubring.{u2, u1} R A _inst_6 _inst_7 _inst_8 S) (Top.top.{u1} (Subring.{u1} A _inst_7) (Subring.instTopSubring.{u1} A _inst_7))) (Eq.{succ u1} (Subalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_6) (Ring.toSemiring.{u1} A _inst_7) _inst_8) S (Top.top.{u1} (Subalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_6) (Ring.toSemiring.{u1} A _inst_7) _inst_8) (CompleteLattice.toTop.{u1} (Subalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_6) (Ring.toSemiring.{u1} A _inst_7) _inst_8) (Algebra.instCompleteLatticeSubalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_6) (Ring.toSemiring.{u1} A _inst_7) _inst_8))))
Case conversion may be inaccurate. Consider using '#align algebra.to_subring_eq_top Algebra.toSubring_eq_topₓ'. -/
@[simp]
theorem toSubring_eq_top {R A : Type _} [CommRing R] [Ring A] [Algebra R A] {S : Subalgebra R A} :
    S.toSubring = ⊤ ↔ S = ⊤ :=
  Subalgebra.toSubring_injective.eq_iff' top_toSubring
#align algebra.to_subring_eq_top Algebra.toSubring_eq_top

/- warning: algebra.mem_sup_left -> Algebra.mem_sup_left is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {x : A}, (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S) -> (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (Sup.sup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SemilatticeSup.toHasSup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Lattice.toSemilatticeSup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) S T))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {x : A}, (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S) -> (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (Sup.sup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SemilatticeSup.toSup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Lattice.toSemilatticeSup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) S T))
Case conversion may be inaccurate. Consider using '#align algebra.mem_sup_left Algebra.mem_sup_leftₓ'. -/
theorem mem_sup_left {S T : Subalgebra R A} : ∀ {x : A}, x ∈ S → x ∈ S ⊔ T :=
  show S ≤ S ⊔ T from le_sup_left
#align algebra.mem_sup_left Algebra.mem_sup_left

/- warning: algebra.mem_sup_right -> Algebra.mem_sup_right is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {x : A}, (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T) -> (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (Sup.sup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SemilatticeSup.toHasSup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Lattice.toSemilatticeSup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) S T))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {x : A}, (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T) -> (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (Sup.sup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SemilatticeSup.toSup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Lattice.toSemilatticeSup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) S T))
Case conversion may be inaccurate. Consider using '#align algebra.mem_sup_right Algebra.mem_sup_rightₓ'. -/
theorem mem_sup_right {S T : Subalgebra R A} : ∀ {x : A}, x ∈ T → x ∈ S ⊔ T :=
  show T ≤ S ⊔ T from le_sup_right
#align algebra.mem_sup_right Algebra.mem_sup_right

/- warning: algebra.mul_mem_sup -> Algebra.mul_mem_sup is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {x : A} {y : A}, (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S) -> (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) y T) -> (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (HMul.hMul.{u2, u2, u2} A A A (instHMul.{u2} A (Distrib.toHasMul.{u2} A (NonUnitalNonAssocSemiring.toDistrib.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) x y) (Sup.sup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SemilatticeSup.toHasSup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Lattice.toSemilatticeSup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) S T))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {x : A} {y : A}, (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S) -> (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) y T) -> (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (HMul.hMul.{u2, u2, u2} A A A (instHMul.{u2} A (NonUnitalNonAssocSemiring.toMul.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) x y) (Sup.sup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SemilatticeSup.toSup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Lattice.toSemilatticeSup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) S T))
Case conversion may be inaccurate. Consider using '#align algebra.mul_mem_sup Algebra.mul_mem_supₓ'. -/
theorem mul_mem_sup {S T : Subalgebra R A} {x y : A} (hx : x ∈ S) (hy : y ∈ T) : x * y ∈ S ⊔ T :=
  (S ⊔ T).mul_mem (mem_sup_left hx) (mem_sup_right hy)
#align algebra.mul_mem_sup Algebra.mul_mem_sup

/- warning: algebra.map_sup -> Algebra.map_sup is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), Eq.{succ u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f (Sup.sup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SemilatticeSup.toHasSup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Lattice.toSemilatticeSup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) S T)) (Sup.sup.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SemilatticeSup.toHasSup.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Lattice.toSemilatticeSup.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (ConditionallyCompleteLattice.toLattice.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (CompleteLattice.toConditionallyCompleteLattice.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Algebra.Subalgebra.completeLattice.{u1, u3} R B _inst_1 _inst_4 _inst_5))))) (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f S) (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f T))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), Eq.{succ u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f (Sup.sup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SemilatticeSup.toSup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Lattice.toSemilatticeSup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) S T)) (Sup.sup.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SemilatticeSup.toSup.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Lattice.toSemilatticeSup.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (ConditionallyCompleteLattice.toLattice.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (CompleteLattice.toConditionallyCompleteLattice.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Algebra.instCompleteLatticeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5))))) (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f S) (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f T))
Case conversion may be inaccurate. Consider using '#align algebra.map_sup Algebra.map_supₓ'. -/
theorem map_sup (f : A →ₐ[R] B) (S T : Subalgebra R A) : (S ⊔ T).map f = S.map f ⊔ T.map f :=
  (Subalgebra.gc_map_comap f).l_sup
#align algebra.map_sup Algebra.map_sup

/- warning: algebra.coe_inf -> Algebra.coe_inf is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), Eq.{succ u2} (Set.{u2} A) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Inf.inf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SemilatticeInf.toHasInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Lattice.toSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) S T)) (Inter.inter.{u2} (Set.{u2} A) (Set.hasInter.{u2} A) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) S) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) T))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), Eq.{succ u2} (Set.{u2} A) (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Inf.inf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Lattice.toInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) S T)) (Inter.inter.{u2} (Set.{u2} A) (Set.instInterSet.{u2} A) (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S) (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) T))
Case conversion may be inaccurate. Consider using '#align algebra.coe_inf Algebra.coe_infₓ'. -/
@[simp, norm_cast]
theorem coe_inf (S T : Subalgebra R A) : (↑(S ⊓ T) : Set A) = S ∩ T :=
  rfl
#align algebra.coe_inf Algebra.coe_inf

/- warning: algebra.mem_inf -> Algebra.mem_inf is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {x : A}, Iff (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (Inf.inf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SemilatticeInf.toHasInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Lattice.toSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) S T)) (And (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S) (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {x : A}, Iff (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (Inf.inf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Lattice.toInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) S T)) (And (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S) (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T))
Case conversion may be inaccurate. Consider using '#align algebra.mem_inf Algebra.mem_infₓ'. -/
@[simp]
theorem mem_inf {S T : Subalgebra R A} {x : A} : x ∈ S ⊓ T ↔ x ∈ S ∧ x ∈ T :=
  Iff.rfl
#align algebra.mem_inf Algebra.mem_inf

/- warning: algebra.inf_to_submodule -> Algebra.inf_toSubmodule is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), Eq.{succ u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (coeFn.{succ u2, succ u2} (OrderEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))))) (fun (_x : RelEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) => (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) -> (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (RelEmbedding.hasCoeToFun.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Inf.inf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SemilatticeInf.toHasInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Lattice.toSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) S T)) (Inf.inf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.hasInf.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (coeFn.{succ u2, succ u2} (OrderEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))))) (fun (_x : RelEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) => (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) -> (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (RelEmbedding.hasCoeToFun.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3) S) (coeFn.{succ u2, succ u2} (OrderEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))))) (fun (_x : RelEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) => (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) -> (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (RelEmbedding.hasCoeToFun.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3) T))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), Eq.{succ u2} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Inf.inf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Lattice.toInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) S T)) (FunLike.coe.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (fun (_x : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) _x) (EmbeddingLike.toFunLike.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Function.instEmbeddingLikeEmbedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (RelEmbedding.toEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.680 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instPartialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) x._@.Mathlib.Order.Hom.Basic._hyg.680 x._@.Mathlib.Order.Hom.Basic._hyg.682) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.695 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) => LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))) x._@.Mathlib.Order.Hom.Basic._hyg.695 x._@.Mathlib.Order.Hom.Basic._hyg.697) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Inf.inf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Lattice.toInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) S T)) (Inf.inf.{u2} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (Submodule.instInfSubmodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (FunLike.coe.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (fun (_x : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) _x) (EmbeddingLike.toFunLike.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Function.instEmbeddingLikeEmbedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (RelEmbedding.toEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.680 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instPartialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) x._@.Mathlib.Order.Hom.Basic._hyg.680 x._@.Mathlib.Order.Hom.Basic._hyg.682) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.695 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) => LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))) x._@.Mathlib.Order.Hom.Basic._hyg.695 x._@.Mathlib.Order.Hom.Basic._hyg.697) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (FunLike.coe.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (fun (_x : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) _x) (EmbeddingLike.toFunLike.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Function.instEmbeddingLikeEmbedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (RelEmbedding.toEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.680 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instPartialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) x._@.Mathlib.Order.Hom.Basic._hyg.680 x._@.Mathlib.Order.Hom.Basic._hyg.682) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.695 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) => LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))) x._@.Mathlib.Order.Hom.Basic._hyg.695 x._@.Mathlib.Order.Hom.Basic._hyg.697) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T))
Case conversion may be inaccurate. Consider using '#align algebra.inf_to_submodule Algebra.inf_toSubmoduleₓ'. -/
@[simp]
theorem inf_toSubmodule (S T : Subalgebra R A) :
    (S ⊓ T).toSubmodule = S.toSubmodule ⊓ T.toSubmodule :=
  rfl
#align algebra.inf_to_submodule Algebra.inf_toSubmodule

/- warning: algebra.inf_to_subsemiring -> Algebra.inf_toSubsemiring is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), Eq.{succ u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (Inf.inf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SemilatticeInf.toHasInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Lattice.toSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) S T)) (Inf.inf.{u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Subsemiring.hasInf.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), Eq.{succ u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (Inf.inf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Lattice.toInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) S T)) (Inf.inf.{u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Subsemiring.instInfSubsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))
Case conversion may be inaccurate. Consider using '#align algebra.inf_to_subsemiring Algebra.inf_toSubsemiringₓ'. -/
@[simp]
theorem inf_toSubsemiring (S T : Subalgebra R A) :
    (S ⊓ T).toSubsemiring = S.toSubsemiring ⊓ T.toSubsemiring :=
  rfl
#align algebra.inf_to_subsemiring Algebra.inf_toSubsemiring

/- warning: algebra.coe_Inf -> Algebra.coe_infₛ is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Set.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)), Eq.{succ u2} (Set.{u2} A) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (InfSet.infₛ.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toHasInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))) S)) (Set.interᵢ.{u2, succ u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (fun (s : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Set.interᵢ.{u2, 0} A (Membership.Mem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Set.hasMem.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) s S) (fun (H : Membership.Mem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Set.hasMem.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) s S) => (fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) s)))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Set.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)), Eq.{succ u2} (Set.{u2} A) (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (InfSet.infₛ.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toInfSet.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))) S)) (Set.interᵢ.{u2, succ u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (fun (s : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Set.interᵢ.{u2, 0} A (Membership.mem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Set.instMembershipSet.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) s S) (fun (H : Membership.mem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Set.instMembershipSet.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) s S) => SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) s)))
Case conversion may be inaccurate. Consider using '#align algebra.coe_Inf Algebra.coe_infₛₓ'. -/
@[simp, norm_cast]
theorem coe_infₛ (S : Set (Subalgebra R A)) : (↑(infₛ S) : Set A) = ⋂ s ∈ S, ↑s :=
  infₛ_image
#align algebra.coe_Inf Algebra.coe_infₛ

/- warning: algebra.mem_Inf -> Algebra.mem_infₛ is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Set.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)} {x : A}, Iff (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (InfSet.infₛ.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toHasInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))) S)) (forall (p : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), (Membership.Mem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Set.hasMem.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) p S) -> (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x p))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Set.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)} {x : A}, Iff (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (InfSet.infₛ.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toInfSet.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))) S)) (forall (p : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), (Membership.mem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Set.instMembershipSet.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) p S) -> (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x p))
Case conversion may be inaccurate. Consider using '#align algebra.mem_Inf Algebra.mem_infₛₓ'. -/
theorem mem_infₛ {S : Set (Subalgebra R A)} {x : A} : x ∈ infₛ S ↔ ∀ p ∈ S, x ∈ p := by
  simp only [← SetLike.mem_coe, coe_Inf, Set.mem_interᵢ₂]
#align algebra.mem_Inf Algebra.mem_infₛ

/- warning: algebra.Inf_to_submodule -> Algebra.infₛ_toSubmodule is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Set.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)), Eq.{succ u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (coeFn.{succ u2, succ u2} (OrderEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))))) (fun (_x : RelEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) => (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) -> (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (RelEmbedding.hasCoeToFun.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3) (InfSet.infₛ.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toHasInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))) S)) (InfSet.infₛ.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.hasInf.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Set.image.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (coeFn.{succ u2, succ u2} (OrderEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))))) (fun (_x : RelEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) => (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) -> (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (RelEmbedding.hasCoeToFun.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Set.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)), Eq.{succ u2} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (InfSet.infₛ.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toInfSet.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))) S)) (FunLike.coe.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (fun (_x : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) _x) (EmbeddingLike.toFunLike.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Function.instEmbeddingLikeEmbedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (RelEmbedding.toEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.680 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instPartialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) x._@.Mathlib.Order.Hom.Basic._hyg.680 x._@.Mathlib.Order.Hom.Basic._hyg.682) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.695 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) => LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))) x._@.Mathlib.Order.Hom.Basic._hyg.695 x._@.Mathlib.Order.Hom.Basic._hyg.697) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (InfSet.infₛ.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toInfSet.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))) S)) (InfSet.infₛ.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.instInfSetSubmodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Set.image.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (FunLike.coe.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (fun (_x : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) _x) (EmbeddingLike.toFunLike.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Function.instEmbeddingLikeEmbedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (RelEmbedding.toEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.680 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instPartialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) x._@.Mathlib.Order.Hom.Basic._hyg.680 x._@.Mathlib.Order.Hom.Basic._hyg.682) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.695 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) => LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))) x._@.Mathlib.Order.Hom.Basic._hyg.695 x._@.Mathlib.Order.Hom.Basic._hyg.697) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) S))
Case conversion may be inaccurate. Consider using '#align algebra.Inf_to_submodule Algebra.infₛ_toSubmoduleₓ'. -/
@[simp]
theorem infₛ_toSubmodule (S : Set (Subalgebra R A)) :
    (infₛ S).toSubmodule = infₛ (Subalgebra.toSubmodule '' S) :=
  SetLike.coe_injective <| by simp
#align algebra.Inf_to_submodule Algebra.infₛ_toSubmodule

/- warning: algebra.Inf_to_subsemiring -> Algebra.infₛ_toSubsemiring is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Set.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)), Eq.{succ u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (InfSet.infₛ.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toHasInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))) S)) (InfSet.infₛ.{u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Subsemiring.hasInf.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Set.image.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3) S))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Set.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)), Eq.{succ u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (InfSet.infₛ.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toInfSet.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))) S)) (InfSet.infₛ.{u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Subsemiring.instInfSetSubsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Set.image.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3) S))
Case conversion may be inaccurate. Consider using '#align algebra.Inf_to_subsemiring Algebra.infₛ_toSubsemiringₓ'. -/
@[simp]
theorem infₛ_toSubsemiring (S : Set (Subalgebra R A)) :
    (infₛ S).toSubsemiring = infₛ (Subalgebra.toSubsemiring '' S) :=
  SetLike.coe_injective <| by simp
#align algebra.Inf_to_subsemiring Algebra.infₛ_toSubsemiring

/- warning: algebra.coe_infi -> Algebra.coe_infᵢ is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {ι : Sort.{u3}} {S : ι -> (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)}, Eq.{succ u2} (Set.{u2} A) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (infᵢ.{u2, u3} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toHasInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))) ι (fun (i : ι) => S i))) (Set.interᵢ.{u2, u3} A ι (fun (i : ι) => (fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (S i)))
but is expected to have type
  forall {R : Type.{u2}} {A : Type.{u3}} [_inst_1 : CommSemiring.{u2} R] [_inst_2 : Semiring.{u3} A] [_inst_3 : Algebra.{u2, u3} R A _inst_1 _inst_2] {ι : Sort.{u1}} {S : ι -> (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)}, Eq.{succ u3} (Set.{u3} A) (SetLike.coe.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (infᵢ.{u3, u1} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toInfSet.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3))) ι (fun (i : ι) => S i))) (Set.interᵢ.{u3, u1} A ι (fun (i : ι) => SetLike.coe.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (S i)))
Case conversion may be inaccurate. Consider using '#align algebra.coe_infi Algebra.coe_infᵢₓ'. -/
@[simp, norm_cast]
theorem coe_infᵢ {ι : Sort _} {S : ι → Subalgebra R A} : (↑(⨅ i, S i) : Set A) = ⋂ i, S i := by
  simp [infᵢ]
#align algebra.coe_infi Algebra.coe_infᵢ

/- warning: algebra.mem_infi -> Algebra.mem_infᵢ is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {ι : Sort.{u3}} {S : ι -> (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)} {x : A}, Iff (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (infᵢ.{u2, u3} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toHasInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))) ι (fun (i : ι) => S i))) (forall (i : ι), Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (S i))
but is expected to have type
  forall {R : Type.{u2}} {A : Type.{u3}} [_inst_1 : CommSemiring.{u2} R] [_inst_2 : Semiring.{u3} A] [_inst_3 : Algebra.{u2, u3} R A _inst_1 _inst_2] {ι : Sort.{u1}} {S : ι -> (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)} {x : A}, Iff (Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (infᵢ.{u3, u1} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toInfSet.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3))) ι (fun (i : ι) => S i))) (forall (i : ι), Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (S i))
Case conversion may be inaccurate. Consider using '#align algebra.mem_infi Algebra.mem_infᵢₓ'. -/
theorem mem_infᵢ {ι : Sort _} {S : ι → Subalgebra R A} {x : A} : (x ∈ ⨅ i, S i) ↔ ∀ i, x ∈ S i := by
  simp only [infᵢ, mem_Inf, Set.forall_range_iff]
#align algebra.mem_infi Algebra.mem_infᵢ

/- warning: algebra.infi_to_submodule -> Algebra.infᵢ_toSubmodule is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {ι : Sort.{u3}} (S : ι -> (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)), Eq.{succ u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (coeFn.{succ u2, succ u2} (OrderEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))))) (fun (_x : RelEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) => (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) -> (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (RelEmbedding.hasCoeToFun.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3) (infᵢ.{u2, u3} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toHasInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))) ι (fun (i : ι) => S i))) (infᵢ.{u2, u3} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.hasInf.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) ι (fun (i : ι) => coeFn.{succ u2, succ u2} (OrderEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))))) (fun (_x : RelEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) => (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) -> (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (RelEmbedding.hasCoeToFun.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3) (S i)))
but is expected to have type
  forall {R : Type.{u2}} {A : Type.{u3}} [_inst_1 : CommSemiring.{u2} R] [_inst_2 : Semiring.{u3} A] [_inst_3 : Algebra.{u2, u3} R A _inst_1 _inst_2] {ι : Sort.{u1}} (S : ι -> (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)), Eq.{succ u3} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) => Submodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3)) (infᵢ.{u3, u1} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toInfSet.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3))) ι (fun (i : ι) => S i))) (FunLike.coe.{succ u3, succ u3, succ u3} (Function.Embedding.{succ u3, succ u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Submodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (fun (_x : Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) => Submodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3)) _x) (EmbeddingLike.toFunLike.{succ u3, succ u3, succ u3} (Function.Embedding.{succ u3, succ u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Submodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Submodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3)) (Function.instEmbeddingLikeEmbedding.{succ u3, succ u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Submodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3)))) (RelEmbedding.toEmbedding.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Submodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3)) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.680 : Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) => LE.le.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instPartialOrder.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)))) x._@.Mathlib.Order.Hom.Basic._hyg.680 x._@.Mathlib.Order.Hom.Basic._hyg.682) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.695 : Submodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3)) (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Submodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3)) => LE.le.{u3} (Submodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u3} (Submodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u3} (Submodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3)) (OmegaCompletePartialOrder.toPartialOrder.{u3} (Submodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.instOmegaCompletePartialOrder.{u3} (Submodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3)))))) x._@.Mathlib.Order.Hom.Basic._hyg.695 x._@.Mathlib.Order.Hom.Basic._hyg.697) (Subalgebra.toSubmodule.{u2, u3} R A _inst_1 _inst_2 _inst_3)) (infᵢ.{u3, u1} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toInfSet.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3))) ι (fun (i : ι) => S i))) (infᵢ.{u3, u1} (Submodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3)) (Submodule.instInfSetSubmodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3)) ι (fun (i : ι) => FunLike.coe.{succ u3, succ u3, succ u3} (Function.Embedding.{succ u3, succ u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Submodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (fun (_x : Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) => Submodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3)) _x) (EmbeddingLike.toFunLike.{succ u3, succ u3, succ u3} (Function.Embedding.{succ u3, succ u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Submodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Submodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3)) (Function.instEmbeddingLikeEmbedding.{succ u3, succ u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Submodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3)))) (RelEmbedding.toEmbedding.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Submodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3)) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.680 : Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) => LE.le.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instPartialOrder.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)))) x._@.Mathlib.Order.Hom.Basic._hyg.680 x._@.Mathlib.Order.Hom.Basic._hyg.682) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.695 : Submodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3)) (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Submodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3)) => LE.le.{u3} (Submodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u3} (Submodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u3} (Submodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3)) (OmegaCompletePartialOrder.toPartialOrder.{u3} (Submodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.instOmegaCompletePartialOrder.{u3} (Submodule.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u2, u3} R A (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A _inst_2))) (Algebra.toModule.{u2, u3} R A _inst_1 _inst_2 _inst_3)))))) x._@.Mathlib.Order.Hom.Basic._hyg.695 x._@.Mathlib.Order.Hom.Basic._hyg.697) (Subalgebra.toSubmodule.{u2, u3} R A _inst_1 _inst_2 _inst_3)) (S i)))
Case conversion may be inaccurate. Consider using '#align algebra.infi_to_submodule Algebra.infᵢ_toSubmoduleₓ'. -/
@[simp]
theorem infᵢ_toSubmodule {ι : Sort _} (S : ι → Subalgebra R A) :
    (⨅ i, S i).toSubmodule = ⨅ i, (S i).toSubmodule :=
  SetLike.coe_injective <| by simp
#align algebra.infi_to_submodule Algebra.infᵢ_toSubmodule

instance : Inhabited (Subalgebra R A) :=
  ⟨⊥⟩

/- warning: algebra.mem_bot -> Algebra.mem_bot is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {x : A}, Iff (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (Bot.bot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toHasBot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Membership.Mem.{u2, u2} A (Set.{u2} A) (Set.hasMem.{u2} A) x (Set.range.{u2, succ u1} A R (coeFn.{max (succ u1) (succ u2), max (succ u1) (succ u2)} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (fun (_x : RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) => R -> A) (RingHom.hasCoeToFun.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (algebraMap.{u1, u2} R A _inst_1 _inst_2 _inst_3))))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {x : A}, Iff (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (Bot.bot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toBot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Membership.mem.{u2, u2} A (Set.{u2} A) (Set.instMembershipSet.{u2} A) x (Set.range.{u2, succ u1} A R (FunLike.coe.{max (succ u1) (succ u2), succ u1, succ u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R (fun (_x : R) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R) => A) _x) (MulHomClass.toFunLike.{max u1 u2, u1, u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R A (NonUnitalNonAssocSemiring.toMul.{u1} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (NonUnitalNonAssocSemiring.toMul.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (NonUnitalRingHomClass.toMulHomClass.{max u1 u2, u1, u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (RingHomClass.toNonUnitalRingHomClass.{max u1 u2, u1, u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2) (RingHom.instRingHomClassRingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (algebraMap.{u1, u2} R A _inst_1 _inst_2 _inst_3))))
Case conversion may be inaccurate. Consider using '#align algebra.mem_bot Algebra.mem_botₓ'. -/
theorem mem_bot {x : A} : x ∈ (⊥ : Subalgebra R A) ↔ x ∈ Set.range (algebraMap R A) :=
  suffices (ofId R A).range = (⊥ : Subalgebra R A)
    by
    rw [← this, ← SetLike.mem_coe, AlgHom.coe_range]
    rfl
  le_bot_iff.mp fun x hx => Subalgebra.range_le _ ((ofId R A).coe_range ▸ hx)
#align algebra.mem_bot Algebra.mem_bot

/- warning: algebra.to_submodule_bot -> Algebra.toSubmodule_bot is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], Eq.{succ u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (coeFn.{succ u2, succ u2} (OrderEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))))) (fun (_x : RelEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) => (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) -> (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (RelEmbedding.hasCoeToFun.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Bot.bot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toHasBot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Submodule.span.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Singleton.singleton.{u2, u2} A (Set.{u2} A) (Set.hasSingleton.{u2} A) (OfNat.ofNat.{u2} A 1 (OfNat.mk.{u2} A 1 (One.one.{u2} A (AddMonoidWithOne.toOne.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))))))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], Eq.{succ u2} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Bot.bot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toBot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (FunLike.coe.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (fun (_x : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) _x) (EmbeddingLike.toFunLike.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Function.instEmbeddingLikeEmbedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (RelEmbedding.toEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.680 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instPartialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) x._@.Mathlib.Order.Hom.Basic._hyg.680 x._@.Mathlib.Order.Hom.Basic._hyg.682) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.695 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) => LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))) x._@.Mathlib.Order.Hom.Basic._hyg.695 x._@.Mathlib.Order.Hom.Basic._hyg.697) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Bot.bot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toBot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Submodule.span.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Singleton.singleton.{u2, u2} A (Set.{u2} A) (Set.instSingletonSet.{u2} A) (OfNat.ofNat.{u2} A 1 (One.toOfNat1.{u2} A (Semiring.toOne.{u2} A _inst_2)))))
Case conversion may be inaccurate. Consider using '#align algebra.to_submodule_bot Algebra.toSubmodule_botₓ'. -/
theorem toSubmodule_bot : (⊥ : Subalgebra R A).toSubmodule = R ∙ 1 :=
  by
  ext x
  simp [mem_bot, -Set.singleton_one, Submodule.mem_span_singleton, Algebra.smul_def]
#align algebra.to_submodule_bot Algebra.toSubmodule_bot

/- warning: algebra.coe_bot -> Algebra.coe_bot is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], Eq.{succ u2} (Set.{u2} A) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Bot.bot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toHasBot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Set.range.{u2, succ u1} A R (coeFn.{max (succ u1) (succ u2), max (succ u1) (succ u2)} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (fun (_x : RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) => R -> A) (RingHom.hasCoeToFun.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (algebraMap.{u1, u2} R A _inst_1 _inst_2 _inst_3)))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], Eq.{succ u2} (Set.{u2} A) (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Bot.bot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toBot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Set.range.{u2, succ u1} A R (FunLike.coe.{max (succ u1) (succ u2), succ u1, succ u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R (fun (_x : R) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R) => A) _x) (MulHomClass.toFunLike.{max u1 u2, u1, u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R A (NonUnitalNonAssocSemiring.toMul.{u1} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (NonUnitalNonAssocSemiring.toMul.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (NonUnitalRingHomClass.toMulHomClass.{max u1 u2, u1, u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (RingHomClass.toNonUnitalRingHomClass.{max u1 u2, u1, u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2) (RingHom.instRingHomClassRingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (algebraMap.{u1, u2} R A _inst_1 _inst_2 _inst_3)))
Case conversion may be inaccurate. Consider using '#align algebra.coe_bot Algebra.coe_botₓ'. -/
@[simp]
theorem coe_bot : ((⊥ : Subalgebra R A) : Set A) = Set.range (algebraMap R A) := by
  simp [Set.ext_iff, Algebra.mem_bot]
#align algebra.coe_bot Algebra.coe_bot

/- warning: algebra.eq_top_iff -> Algebra.eq_top_iff is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3}, Iff (Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toHasTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (forall (x : A), Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3}, Iff (Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (forall (x : A), Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)
Case conversion may be inaccurate. Consider using '#align algebra.eq_top_iff Algebra.eq_top_iffₓ'. -/
theorem eq_top_iff {S : Subalgebra R A} : S = ⊤ ↔ ∀ x : A, x ∈ S :=
  ⟨fun h x => by rw [h] <;> exact mem_top, fun h => by
    ext x <;> exact ⟨fun _ => mem_top, fun _ => h x⟩⟩
#align algebra.eq_top_iff Algebra.eq_top_iff

/- warning: algebra.range_top_iff_surjective -> Algebra.range_top_iff_surjective is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5), Iff (Eq.{succ u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (AlgHom.range.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f) (Top.top.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (CompleteLattice.toHasTop.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Algebra.Subalgebra.completeLattice.{u1, u3} R B _inst_1 _inst_4 _inst_5)))) (Function.Surjective.{succ u2, succ u3} A B (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (fun (_x : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) => A -> B) ([anonymous].{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) f))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5), Iff (Eq.{succ u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (AlgHom.range.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f) (Top.top.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (CompleteLattice.toTop.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Algebra.instCompleteLatticeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)))) (Function.Surjective.{succ u2, succ u3} A B (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) A (fun (_x : A) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : A) => B) _x) (SMulHomClass.toFunLike.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (SMulZeroClass.toSMul.{u1, u2} R A (AddMonoid.toZero.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribSMul.toSMulZeroClass.{u1, u2} R A (AddMonoid.toAddZeroClass.{u2} A (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (DistribMulAction.toDistribSMul.{u1, u2} R A (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (SMulZeroClass.toSMul.{u1, u3} R B (AddMonoid.toZero.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribSMul.toSMulZeroClass.{u1, u3} R B (AddMonoid.toAddZeroClass.{u3} B (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))))) (DistribMulAction.toDistribSMul.{u1, u3} R B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} A (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (AddCommMonoid.toAddMonoid.{u3} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)))) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u2 u3, u1, u2, u3} (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) R A B (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4)) (Module.toDistribMulAction.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Module.toDistribMulAction.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u2, u3, max u2 u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5 (AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5) (AlgHom.algHomClass.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5))))) f))
Case conversion may be inaccurate. Consider using '#align algebra.range_top_iff_surjective Algebra.range_top_iff_surjectiveₓ'. -/
theorem range_top_iff_surjective (f : A →ₐ[R] B) :
    f.range = (⊤ : Subalgebra R B) ↔ Function.Surjective f :=
  Algebra.eq_top_iff
#align algebra.range_top_iff_surjective Algebra.range_top_iff_surjective

/- warning: algebra.range_id -> Algebra.range_id is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (AlgHom.range.{u1, u2, u2} R A A _inst_1 _inst_2 _inst_3 _inst_2 _inst_3 (AlgHom.id.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toHasTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3)))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (AlgHom.range.{u1, u2, u2} R A A _inst_1 _inst_2 _inst_3 _inst_2 _inst_3 (AlgHom.id.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))
Case conversion may be inaccurate. Consider using '#align algebra.range_id Algebra.range_idₓ'. -/
@[simp]
theorem range_id : (AlgHom.id R A).range = ⊤ :=
  SetLike.coe_injective Set.range_id
#align algebra.range_id Algebra.range_id

/- warning: algebra.map_top -> Algebra.map_top is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5), Eq.{succ u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toHasTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (AlgHom.range.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5), Eq.{succ u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (AlgHom.range.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f)
Case conversion may be inaccurate. Consider using '#align algebra.map_top Algebra.map_topₓ'. -/
@[simp]
theorem map_top (f : A →ₐ[R] B) : (⊤ : Subalgebra R A).map f = f.range :=
  SetLike.coe_injective Set.image_univ
#align algebra.map_top Algebra.map_top

/- warning: algebra.map_bot -> Algebra.map_bot is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5), Eq.{succ u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f (Bot.bot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toHasBot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Bot.bot.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (CompleteLattice.toHasBot.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Algebra.Subalgebra.completeLattice.{u1, u3} R B _inst_1 _inst_4 _inst_5)))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5), Eq.{succ u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Subalgebra.map.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f (Bot.bot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toBot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Bot.bot.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (CompleteLattice.toBot.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Algebra.instCompleteLatticeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)))
Case conversion may be inaccurate. Consider using '#align algebra.map_bot Algebra.map_botₓ'. -/
@[simp]
theorem map_bot (f : A →ₐ[R] B) : (⊥ : Subalgebra R A).map f = ⊥ :=
  SetLike.coe_injective <| by
    simp only [← Set.range_comp, (· ∘ ·), Algebra.coe_bot, Subalgebra.coe_map, f.commutes]
#align algebra.map_bot Algebra.map_bot

/- warning: algebra.comap_top -> Algebra.comap_top is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5), Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Subalgebra.comap.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f (Top.top.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (CompleteLattice.toHasTop.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Algebra.Subalgebra.completeLattice.{u1, u3} R B _inst_1 _inst_4 _inst_5)))) (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toHasTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3)))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (f : AlgHom.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_4 _inst_3 _inst_5), Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Subalgebra.comap.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 f (Top.top.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (CompleteLattice.toTop.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Algebra.instCompleteLatticeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)))) (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))
Case conversion may be inaccurate. Consider using '#align algebra.comap_top Algebra.comap_topₓ'. -/
@[simp]
theorem comap_top (f : A →ₐ[R] B) : (⊤ : Subalgebra R B).comap f = ⊤ :=
  eq_top_iff.2 fun x => mem_top
#align algebra.comap_top Algebra.comap_top

/- warning: algebra.to_top -> Algebra.toTop is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], AlgHom.{u1, u2, u2} R A (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toHasTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) _inst_1 _inst_2 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toHasTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) _inst_3 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toHasTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], AlgHom.{u1, u2, u2} R A (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) _inst_1 _inst_2 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) _inst_3 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))))
Case conversion may be inaccurate. Consider using '#align algebra.to_top Algebra.toTopₓ'. -/
/-- `alg_hom` to `⊤ : subalgebra R A`. -/
def toTop : A →ₐ[R] (⊤ : Subalgebra R A) :=
  (AlgHom.id R A).codRestrict ⊤ fun _ => mem_top
#align algebra.to_top Algebra.toTop

/- warning: algebra.surjective_algebra_map_iff -> Algebra.surjective_algebraMap_iff is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], Iff (Function.Surjective.{succ u1, succ u2} R A (coeFn.{max (succ u1) (succ u2), max (succ u1) (succ u2)} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (fun (_x : RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) => R -> A) (RingHom.hasCoeToFun.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (algebraMap.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toHasTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Bot.bot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toHasBot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], Iff (Function.Surjective.{succ u1, succ u2} R A (FunLike.coe.{max (succ u1) (succ u2), succ u1, succ u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R (fun (_x : R) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R) => A) _x) (MulHomClass.toFunLike.{max u1 u2, u1, u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R A (NonUnitalNonAssocSemiring.toMul.{u1} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (NonUnitalNonAssocSemiring.toMul.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (NonUnitalRingHomClass.toMulHomClass.{max u1 u2, u1, u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (RingHomClass.toNonUnitalRingHomClass.{max u1 u2, u1, u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2) (RingHom.instRingHomClassRingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (algebraMap.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Bot.bot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toBot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))))
Case conversion may be inaccurate. Consider using '#align algebra.surjective_algebra_map_iff Algebra.surjective_algebraMap_iffₓ'. -/
theorem surjective_algebraMap_iff :
    Function.Surjective (algebraMap R A) ↔ (⊤ : Subalgebra R A) = ⊥ :=
  ⟨fun h =>
    eq_bot_iff.2 fun y _ =>
      let ⟨x, hx⟩ := h y
      hx ▸ Subalgebra.algebraMap_mem _ _,
    fun h y => Algebra.mem_bot.1 <| eq_bot_iff.1 h (Algebra.mem_top : y ∈ _)⟩
#align algebra.surjective_algebra_map_iff Algebra.surjective_algebraMap_iff

/- warning: algebra.bijective_algebra_map_iff -> Algebra.bijective_algebraMap_iff is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_6 : Field.{u1} R] [_inst_7 : Semiring.{u2} A] [_inst_8 : Nontrivial.{u2} A] [_inst_9 : Algebra.{u1, u2} R A (Semifield.toCommSemiring.{u1} R (Field.toSemifield.{u1} R _inst_6)) _inst_7], Iff (Function.Bijective.{succ u1, succ u2} R A (coeFn.{max (succ u1) (succ u2), max (succ u1) (succ u2)} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R (Semifield.toCommSemiring.{u1} R (Field.toSemifield.{u1} R _inst_6)))) (Semiring.toNonAssocSemiring.{u2} A _inst_7)) (fun (_x : RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R (Semifield.toCommSemiring.{u1} R (Field.toSemifield.{u1} R _inst_6)))) (Semiring.toNonAssocSemiring.{u2} A _inst_7)) => R -> A) (RingHom.hasCoeToFun.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R (Semifield.toCommSemiring.{u1} R (Field.toSemifield.{u1} R _inst_6)))) (Semiring.toNonAssocSemiring.{u2} A _inst_7)) (algebraMap.{u1, u2} R A (Semifield.toCommSemiring.{u1} R (Field.toSemifield.{u1} R _inst_6)) _inst_7 _inst_9))) (Eq.{succ u2} (Subalgebra.{u1, u2} R A (Semifield.toCommSemiring.{u1} R (Field.toSemifield.{u1} R _inst_6)) _inst_7 _inst_9) (Top.top.{u2} (Subalgebra.{u1, u2} R A (Semifield.toCommSemiring.{u1} R (Field.toSemifield.{u1} R _inst_6)) _inst_7 _inst_9) (CompleteLattice.toHasTop.{u2} (Subalgebra.{u1, u2} R A (Semifield.toCommSemiring.{u1} R (Field.toSemifield.{u1} R _inst_6)) _inst_7 _inst_9) (Algebra.Subalgebra.completeLattice.{u1, u2} R A (Semifield.toCommSemiring.{u1} R (Field.toSemifield.{u1} R _inst_6)) _inst_7 _inst_9))) (Bot.bot.{u2} (Subalgebra.{u1, u2} R A (Semifield.toCommSemiring.{u1} R (Field.toSemifield.{u1} R _inst_6)) _inst_7 _inst_9) (CompleteLattice.toHasBot.{u2} (Subalgebra.{u1, u2} R A (Semifield.toCommSemiring.{u1} R (Field.toSemifield.{u1} R _inst_6)) _inst_7 _inst_9) (Algebra.Subalgebra.completeLattice.{u1, u2} R A (Semifield.toCommSemiring.{u1} R (Field.toSemifield.{u1} R _inst_6)) _inst_7 _inst_9))))
but is expected to have type
  forall {R : Type.{u2}} {A : Type.{u1}} [_inst_6 : Field.{u2} R] [_inst_7 : Semiring.{u1} A] [_inst_8 : Nontrivial.{u1} A] [_inst_9 : Algebra.{u2, u1} R A (Semifield.toCommSemiring.{u2} R (Field.toSemifield.{u2} R _inst_6)) _inst_7], Iff (Function.Bijective.{succ u2, succ u1} R A (FunLike.coe.{max (succ u2) (succ u1), succ u2, succ u1} (RingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (Semifield.toCommSemiring.{u2} R (Field.toSemifield.{u2} R _inst_6)))) (Semiring.toNonAssocSemiring.{u1} A _inst_7)) R (fun (_x : R) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R) => A) _x) (MulHomClass.toFunLike.{max u2 u1, u2, u1} (RingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (Semifield.toCommSemiring.{u2} R (Field.toSemifield.{u2} R _inst_6)))) (Semiring.toNonAssocSemiring.{u1} A _inst_7)) R A (NonUnitalNonAssocSemiring.toMul.{u2} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (Semifield.toCommSemiring.{u2} R (Field.toSemifield.{u2} R _inst_6)))))) (NonUnitalNonAssocSemiring.toMul.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_7))) (NonUnitalRingHomClass.toMulHomClass.{max u2 u1, u2, u1} (RingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (Semifield.toCommSemiring.{u2} R (Field.toSemifield.{u2} R _inst_6)))) (Semiring.toNonAssocSemiring.{u1} A _inst_7)) R A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (Semifield.toCommSemiring.{u2} R (Field.toSemifield.{u2} R _inst_6))))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_7)) (RingHomClass.toNonUnitalRingHomClass.{max u2 u1, u2, u1} (RingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (Semifield.toCommSemiring.{u2} R (Field.toSemifield.{u2} R _inst_6)))) (Semiring.toNonAssocSemiring.{u1} A _inst_7)) R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (Semifield.toCommSemiring.{u2} R (Field.toSemifield.{u2} R _inst_6)))) (Semiring.toNonAssocSemiring.{u1} A _inst_7) (RingHom.instRingHomClassRingHom.{u2, u1} R A (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R (Semifield.toCommSemiring.{u2} R (Field.toSemifield.{u2} R _inst_6)))) (Semiring.toNonAssocSemiring.{u1} A _inst_7))))) (algebraMap.{u2, u1} R A (Semifield.toCommSemiring.{u2} R (Field.toSemifield.{u2} R _inst_6)) _inst_7 _inst_9))) (Eq.{succ u1} (Subalgebra.{u2, u1} R A (Semifield.toCommSemiring.{u2} R (Field.toSemifield.{u2} R _inst_6)) _inst_7 _inst_9) (Top.top.{u1} (Subalgebra.{u2, u1} R A (Semifield.toCommSemiring.{u2} R (Field.toSemifield.{u2} R _inst_6)) _inst_7 _inst_9) (CompleteLattice.toTop.{u1} (Subalgebra.{u2, u1} R A (Semifield.toCommSemiring.{u2} R (Field.toSemifield.{u2} R _inst_6)) _inst_7 _inst_9) (Algebra.instCompleteLatticeSubalgebra.{u2, u1} R A (Semifield.toCommSemiring.{u2} R (Field.toSemifield.{u2} R _inst_6)) _inst_7 _inst_9))) (Bot.bot.{u1} (Subalgebra.{u2, u1} R A (Semifield.toCommSemiring.{u2} R (Field.toSemifield.{u2} R _inst_6)) _inst_7 _inst_9) (CompleteLattice.toBot.{u1} (Subalgebra.{u2, u1} R A (Semifield.toCommSemiring.{u2} R (Field.toSemifield.{u2} R _inst_6)) _inst_7 _inst_9) (Algebra.instCompleteLatticeSubalgebra.{u2, u1} R A (Semifield.toCommSemiring.{u2} R (Field.toSemifield.{u2} R _inst_6)) _inst_7 _inst_9))))
Case conversion may be inaccurate. Consider using '#align algebra.bijective_algebra_map_iff Algebra.bijective_algebraMap_iffₓ'. -/
theorem bijective_algebraMap_iff {R A : Type _} [Field R] [Semiring A] [Nontrivial A]
    [Algebra R A] : Function.Bijective (algebraMap R A) ↔ (⊤ : Subalgebra R A) = ⊥ :=
  ⟨fun h => surjective_algebraMap_iff.1 h.2, fun h =>
    ⟨(algebraMap R A).Injective, surjective_algebraMap_iff.2 h⟩⟩
#align algebra.bijective_algebra_map_iff Algebra.bijective_algebraMap_iff

/- warning: algebra.bot_equiv_of_injective -> Algebra.botEquivOfInjective is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], (Function.Injective.{succ u1, succ u2} R A (coeFn.{max (succ u1) (succ u2), max (succ u1) (succ u2)} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (fun (_x : RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) => R -> A) (RingHom.hasCoeToFun.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (algebraMap.{u1, u2} R A _inst_1 _inst_2 _inst_3))) -> (AlgEquiv.{u1, u2, u1} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Bot.bot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toHasBot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) R _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (Bot.bot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toHasBot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (CommSemiring.toSemiring.{u1} R _inst_1) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (Bot.bot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toHasBot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Algebra.id.{u1} R _inst_1))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], (Function.Injective.{succ u1, succ u2} R A (FunLike.coe.{max (succ u1) (succ u2), succ u1, succ u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R (fun (_x : R) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R) => A) _x) (MulHomClass.toFunLike.{max u1 u2, u1, u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R A (NonUnitalNonAssocSemiring.toMul.{u1} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (NonUnitalNonAssocSemiring.toMul.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (NonUnitalRingHomClass.toMulHomClass.{max u1 u2, u1, u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (RingHomClass.toNonUnitalRingHomClass.{max u1 u2, u1, u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2) (RingHom.instRingHomClassRingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (algebraMap.{u1, u2} R A _inst_1 _inst_2 _inst_3))) -> (AlgEquiv.{u1, u2, u1} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (Bot.bot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toBot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) R _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (Bot.bot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toBot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (CommSemiring.toSemiring.{u1} R _inst_1) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (Bot.bot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toBot.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Algebra.id.{u1} R _inst_1))
Case conversion may be inaccurate. Consider using '#align algebra.bot_equiv_of_injective Algebra.botEquivOfInjectiveₓ'. -/
/-- The bottom subalgebra is isomorphic to the base ring. -/
noncomputable def botEquivOfInjective (h : Function.Injective (algebraMap R A)) :
    (⊥ : Subalgebra R A) ≃ₐ[R] R :=
  AlgEquiv.symm <|
    AlgEquiv.ofBijective (Algebra.ofId R _)
      ⟨fun x y hxy => h (congr_arg Subtype.val hxy : _), fun ⟨y, hy⟩ =>
        let ⟨x, hx⟩ := Algebra.mem_bot.1 hy
        ⟨x, Subtype.eq hx⟩⟩
#align algebra.bot_equiv_of_injective Algebra.botEquivOfInjective

/- warning: algebra.bot_equiv -> Algebra.botEquiv is a dubious translation:
lean 3 declaration is
  forall (F : Type.{u1}) (R : Type.{u2}) [_inst_6 : Field.{u1} F] [_inst_7 : Semiring.{u2} R] [_inst_8 : Nontrivial.{u2} R] [_inst_9 : Algebra.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7], AlgEquiv.{u1, u2, u1} F (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7 _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7 _inst_9) R (Subalgebra.setLike.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7 _inst_9)) (Bot.bot.{u2} (Subalgebra.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7 _inst_9) (CompleteLattice.toHasBot.{u2} (Subalgebra.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7 _inst_9) (Algebra.Subalgebra.completeLattice.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7 _inst_9)))) F (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) (Subalgebra.toSemiring.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7 _inst_9 (Bot.bot.{u2} (Subalgebra.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7 _inst_9) (CompleteLattice.toHasBot.{u2} (Subalgebra.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7 _inst_9) (Algebra.Subalgebra.completeLattice.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7 _inst_9)))) (Ring.toSemiring.{u1} F (DivisionRing.toRing.{u1} F (Field.toDivisionRing.{u1} F _inst_6))) (Subalgebra.algebra.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7 _inst_9 (Bot.bot.{u2} (Subalgebra.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7 _inst_9) (CompleteLattice.toHasBot.{u2} (Subalgebra.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7 _inst_9) (Algebra.Subalgebra.completeLattice.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7 _inst_9)))) (Algebra.id.{u1} F (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)))
but is expected to have type
  forall (F : Type.{u1}) (R : Type.{u2}) [_inst_6 : Field.{u1} F] [_inst_7 : Semiring.{u2} R] [_inst_8 : Nontrivial.{u2} R] [_inst_9 : Algebra.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7], AlgEquiv.{u1, u2, u1} F (Subtype.{succ u2} R (fun (x : R) => Membership.mem.{u2, u2} R (Subalgebra.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7 _inst_9) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7 _inst_9) R (Subalgebra.instSetLikeSubalgebra.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7 _inst_9)) x (Bot.bot.{u2} (Subalgebra.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7 _inst_9) (CompleteLattice.toBot.{u2} (Subalgebra.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7 _inst_9) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7 _inst_9))))) F (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) (Subalgebra.toSemiring.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7 _inst_9 (Bot.bot.{u2} (Subalgebra.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7 _inst_9) (CompleteLattice.toBot.{u2} (Subalgebra.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7 _inst_9) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7 _inst_9)))) (DivisionSemiring.toSemiring.{u1} F (Semifield.toDivisionSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6))) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7 _inst_9 (Bot.bot.{u2} (Subalgebra.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7 _inst_9) (CompleteLattice.toBot.{u2} (Subalgebra.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7 _inst_9) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} F R (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)) _inst_7 _inst_9)))) (Algebra.id.{u1} F (Semifield.toCommSemiring.{u1} F (Field.toSemifield.{u1} F _inst_6)))
Case conversion may be inaccurate. Consider using '#align algebra.bot_equiv Algebra.botEquivₓ'. -/
/-- The bottom subalgebra is isomorphic to the field. -/
@[simps symm_apply]
noncomputable def botEquiv (F R : Type _) [Field F] [Semiring R] [Nontrivial R] [Algebra F R] :
    (⊥ : Subalgebra F R) ≃ₐ[F] F :=
  botEquivOfInjective (RingHom.injective _)
#align algebra.bot_equiv Algebra.botEquiv

end Algebra

namespace Subalgebra

open Algebra

variable {R : Type u} {A : Type v} {B : Type w}

variable [CommSemiring R] [Semiring A] [Algebra R A] [Semiring B] [Algebra R B]

variable (S : Subalgebra R A)

/- warning: subalgebra.top_equiv -> Subalgebra.topEquiv is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], AlgEquiv.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toHasTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toHasTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) _inst_2 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toHasTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) _inst_3
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], AlgEquiv.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) A _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) _inst_2 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) _inst_3
Case conversion may be inaccurate. Consider using '#align subalgebra.top_equiv Subalgebra.topEquivₓ'. -/
/-- The top subalgebra is isomorphic to the algebra.

This is the algebra version of `submodule.top_equiv`. -/
@[simps]
def topEquiv : (⊤ : Subalgebra R A) ≃ₐ[R] A :=
  AlgEquiv.ofAlgHom (Subalgebra.val ⊤) toTop rfl <| AlgHom.ext fun _ => Subtype.ext rfl
#align subalgebra.top_equiv Subalgebra.topEquiv

#print Subalgebra.subsingleton_of_subsingleton /-
instance subsingleton_of_subsingleton [Subsingleton A] : Subsingleton (Subalgebra R A) :=
  ⟨fun B C => ext fun x => by simp only [Subsingleton.elim x 0, zero_mem B, zero_mem C]⟩
#align subalgebra.subsingleton_of_subsingleton Subalgebra.subsingleton_of_subsingleton
-/

#print AlgHom.subsingleton /-
instance AlgHom.subsingleton [Subsingleton (Subalgebra R A)] : Subsingleton (A →ₐ[R] B) :=
  ⟨fun f g =>
    AlgHom.ext fun a =>
      have : a ∈ (⊥ : Subalgebra R A) := Subsingleton.elim (⊤ : Subalgebra R A) ⊥ ▸ mem_top
      let ⟨x, hx⟩ := Set.mem_range.mp (mem_bot.mp this)
      hx ▸ (f.commutes _).trans (g.commutes _).symm⟩
#align alg_hom.subsingleton AlgHom.subsingleton
-/

#print AlgEquiv.subsingleton_left /-
instance AlgEquiv.subsingleton_left [Subsingleton (Subalgebra R A)] : Subsingleton (A ≃ₐ[R] B) :=
  ⟨fun f g => AlgEquiv.ext fun x => AlgHom.ext_iff.mp (Subsingleton.elim f.toAlgHom g.toAlgHom) x⟩
#align alg_equiv.subsingleton_left AlgEquiv.subsingleton_left
-/

#print AlgEquiv.subsingleton_right /-
instance AlgEquiv.subsingleton_right [Subsingleton (Subalgebra R B)] : Subsingleton (A ≃ₐ[R] B) :=
  ⟨fun f g => by rw [← f.symm_symm, Subsingleton.elim f.symm g.symm, g.symm_symm]⟩
#align alg_equiv.subsingleton_right AlgEquiv.subsingleton_right
-/

#print Subalgebra.range_val /-
theorem range_val : S.val.range = S :=
  ext <| Set.ext_iff.1 <| S.val.coe_range.trans Subtype.range_val
#align subalgebra.range_val Subalgebra.range_val
-/

instance : Unique (Subalgebra R R) :=
  { Algebra.Subalgebra.inhabited with
    uniq := by
      intro S
      refine' le_antisymm (fun r hr => _) bot_le
      simp only [Set.mem_range, mem_bot, id.map_eq_self, exists_apply_eq_apply, default] }

/- warning: subalgebra.inclusion -> Subalgebra.inclusion is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3}, (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteSemilatticeInf.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) S T) -> (AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3}, (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) S T) -> (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))
Case conversion may be inaccurate. Consider using '#align subalgebra.inclusion Subalgebra.inclusionₓ'. -/
/-- The map `S → T` when `S` is a subalgebra contained in the subalgebra `T`.

This is the subalgebra version of `submodule.of_le`, or `subring.inclusion`  -/
def inclusion {S T : Subalgebra R A} (h : S ≤ T) : S →ₐ[R] T
    where
  toFun := Set.inclusion h
  map_one' := rfl
  map_add' _ _ := rfl
  map_mul' _ _ := rfl
  map_zero' := rfl
  commutes' _ := rfl
#align subalgebra.inclusion Subalgebra.inclusion

/- warning: subalgebra.inclusion_injective -> Subalgebra.inclusion_injective is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} (h : LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteSemilatticeInf.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) S T), Function.Injective.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) (coeFn.{succ u2, succ u2} (AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) (fun (_x : AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) => (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) -> (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T)) ([anonymous].{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) (Subalgebra.inclusion.{u1, u2} R A _inst_1 _inst_2 _inst_3 S T h))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} (h : LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) S T), Function.Injective.{succ u2, succ u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (FunLike.coe.{succ u2, succ u2, succ u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (fun (_x : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) => Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _x) (SMulHomClass.toFunLike.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (SMulZeroClass.toSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddMonoid.toZero.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))) (DistribSMul.toSMulZeroClass.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddMonoid.toAddZeroClass.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))) (DistribMulAction.toDistribSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))) (SMulZeroClass.toSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (AddMonoid.toZero.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribSMul.toSMulZeroClass.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (AddMonoid.toAddZeroClass.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribMulAction.toDistribSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribMulActionHomClass.toSMulHomClass.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u2, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) (AlgHom.algHomClass.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))))) (Subalgebra.inclusion.{u1, u2} R A _inst_1 _inst_2 _inst_3 S T h))
Case conversion may be inaccurate. Consider using '#align subalgebra.inclusion_injective Subalgebra.inclusion_injectiveₓ'. -/
theorem inclusion_injective {S T : Subalgebra R A} (h : S ≤ T) : Function.Injective (inclusion h) :=
  fun _ _ => Subtype.ext ∘ Subtype.mk.inj
#align subalgebra.inclusion_injective Subalgebra.inclusion_injective

/- warning: subalgebra.inclusion_self -> Subalgebra.inclusion_self is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3}, Eq.{succ u2} (AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)) (Subalgebra.inclusion.{u1, u2} R A _inst_1 _inst_2 _inst_3 S S (le_refl.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteSemilatticeInf.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) S)) (AlgHom.id.{u1, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3}, Eq.{succ u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)) (Subalgebra.inclusion.{u1, u2} R A _inst_1 _inst_2 _inst_3 S S (le_refl.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) S)) (AlgHom.id.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))
Case conversion may be inaccurate. Consider using '#align subalgebra.inclusion_self Subalgebra.inclusion_selfₓ'. -/
@[simp]
theorem inclusion_self {S : Subalgebra R A} : inclusion (le_refl S) = AlgHom.id R S :=
  AlgHom.ext fun x => Subtype.ext rfl
#align subalgebra.inclusion_self Subalgebra.inclusion_self

/- warning: subalgebra.inclusion_mk -> Subalgebra.inclusion_mk is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} (h : LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteSemilatticeInf.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) S T) (x : A) (hx : Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S), Eq.{succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) (coeFn.{succ u2, succ u2} (AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) (fun (_x : AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) => (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) -> (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T)) ([anonymous].{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) (Subalgebra.inclusion.{u1, u2} R A _inst_1 _inst_2 _inst_3 S T h) (Subtype.mk.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S) x hx)) (Subtype.mk.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T) x (h x hx))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} (h : LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) S T) (x : A) (hx : Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S), Eq.{succ u2} ((fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) => Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subtype.mk.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S) x hx)) (FunLike.coe.{succ u2, succ u2, succ u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (fun (_x : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) => Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _x) (SMulHomClass.toFunLike.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (SMulZeroClass.toSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddMonoid.toZero.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))) (DistribSMul.toSMulZeroClass.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddMonoid.toAddZeroClass.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))) (DistribMulAction.toDistribSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))) (SMulZeroClass.toSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (AddMonoid.toZero.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribSMul.toSMulZeroClass.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (AddMonoid.toAddZeroClass.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribMulAction.toDistribSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribMulActionHomClass.toSMulHomClass.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u2, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) (AlgHom.algHomClass.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))))) (Subalgebra.inclusion.{u1, u2} R A _inst_1 _inst_2 _inst_3 S T h) (Subtype.mk.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S) x hx)) (Subtype.mk.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T) x (h x hx))
Case conversion may be inaccurate. Consider using '#align subalgebra.inclusion_mk Subalgebra.inclusion_mkₓ'. -/
@[simp]
theorem inclusion_mk {S T : Subalgebra R A} (h : S ≤ T) (x : A) (hx : x ∈ S) :
    inclusion h ⟨x, hx⟩ = ⟨x, h hx⟩ :=
  rfl
#align subalgebra.inclusion_mk Subalgebra.inclusion_mk

/- warning: subalgebra.inclusion_right -> Subalgebra.inclusion_right is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} (h : LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteSemilatticeInf.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) S T) (x : coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) (m : Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) A (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) A (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) A (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) A (coeSubtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T))))) x) S), Eq.{succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) (coeFn.{succ u2, succ u2} (AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) (fun (_x : AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) => (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) -> (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T)) ([anonymous].{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) (Subalgebra.inclusion.{u1, u2} R A _inst_1 _inst_2 _inst_3 S T h) (Subtype.mk.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) A (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) A (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) A (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) A (coeSubtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T))))) x) m)) x
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} (h : LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) S T) (x : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (m : Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Subtype.val.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Set.{u2} A) (Set.instMembershipSet.{u2} A) x (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) T)) x) S), Eq.{succ u2} ((fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) => Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subtype.mk.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S) (Subtype.val.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Set.{u2} A) (Set.instMembershipSet.{u2} A) x (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) T)) x) m)) (FunLike.coe.{succ u2, succ u2, succ u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (fun (_x : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) => Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _x) (SMulHomClass.toFunLike.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (SMulZeroClass.toSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddMonoid.toZero.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))) (DistribSMul.toSMulZeroClass.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddMonoid.toAddZeroClass.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))) (DistribMulAction.toDistribSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))) (SMulZeroClass.toSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (AddMonoid.toZero.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribSMul.toSMulZeroClass.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (AddMonoid.toAddZeroClass.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribMulAction.toDistribSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribMulActionHomClass.toSMulHomClass.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u2, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) (AlgHom.algHomClass.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))))) (Subalgebra.inclusion.{u1, u2} R A _inst_1 _inst_2 _inst_3 S T h) (Subtype.mk.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S) (Subtype.val.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Set.{u2} A) (Set.instMembershipSet.{u2} A) x (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) T)) x) m)) x
Case conversion may be inaccurate. Consider using '#align subalgebra.inclusion_right Subalgebra.inclusion_rightₓ'. -/
theorem inclusion_right {S T : Subalgebra R A} (h : S ≤ T) (x : T) (m : (x : A) ∈ S) :
    inclusion h ⟨x, m⟩ = x :=
  Subtype.ext rfl
#align subalgebra.inclusion_right Subalgebra.inclusion_right

/- warning: subalgebra.inclusion_inclusion -> Subalgebra.inclusion_inclusion is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {U : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} (hst : LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteSemilatticeInf.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) S T) (htu : LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteSemilatticeInf.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) T U) (x : coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S), Eq.{succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) U) (coeFn.{succ u2, succ u2} (AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) U) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)) (fun (_x : AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) U) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)) => (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) -> (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) U)) ([anonymous].{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) U) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)) (Subalgebra.inclusion.{u1, u2} R A _inst_1 _inst_2 _inst_3 T U htu) (coeFn.{succ u2, succ u2} (AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) (fun (_x : AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) => (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) -> (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T)) ([anonymous].{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) (Subalgebra.inclusion.{u1, u2} R A _inst_1 _inst_2 _inst_3 S T hst) x)) (coeFn.{succ u2, succ u2} (AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) U) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)) (fun (_x : AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) U) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)) => (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) -> (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) U)) ([anonymous].{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) U) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)) (Subalgebra.inclusion.{u1, u2} R A _inst_1 _inst_2 _inst_3 S U (le_trans.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteSemilatticeInf.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) S T U hst htu)) x)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {U : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} (hst : LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) S T) (htu : LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) T U) (x : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)), Eq.{succ u2} ((fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) => Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (FunLike.coe.{succ u2, succ u2, succ u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (fun (a : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) => Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) a) (SMulHomClass.toFunLike.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (SMulZeroClass.toSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddMonoid.toZero.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))) (DistribSMul.toSMulZeroClass.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddMonoid.toAddZeroClass.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))) (DistribMulAction.toDistribSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))) (SMulZeroClass.toSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (AddMonoid.toZero.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribSMul.toSMulZeroClass.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (AddMonoid.toAddZeroClass.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribMulAction.toDistribSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribMulActionHomClass.toSMulHomClass.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u2, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) (AlgHom.algHomClass.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))))) (Subalgebra.inclusion.{u1, u2} R A _inst_1 _inst_2 _inst_3 S T hst) x)) (FunLike.coe.{succ u2, succ u2, succ u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (fun (_x : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) => Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) _x) (SMulHomClass.toFunLike.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (SMulZeroClass.toSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (AddMonoid.toZero.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribSMul.toSMulZeroClass.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (AddMonoid.toAddZeroClass.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribMulAction.toDistribSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))))) (SMulZeroClass.toSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (AddMonoid.toZero.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)))))) (DistribSMul.toSMulZeroClass.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (AddMonoid.toAddZeroClass.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)))))) (DistribMulAction.toDistribSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U))))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)))))) (DistribMulActionHomClass.toSMulHomClass.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U))))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U))) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U))) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u2, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)) (AlgHom.algHomClass.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)))))) (Subalgebra.inclusion.{u1, u2} R A _inst_1 _inst_2 _inst_3 T U htu) (FunLike.coe.{succ u2, succ u2, succ u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (fun (_x : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) => Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _x) (SMulHomClass.toFunLike.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (SMulZeroClass.toSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddMonoid.toZero.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))) (DistribSMul.toSMulZeroClass.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddMonoid.toAddZeroClass.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))) (DistribMulAction.toDistribSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))) (SMulZeroClass.toSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (AddMonoid.toZero.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribSMul.toSMulZeroClass.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (AddMonoid.toAddZeroClass.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribMulAction.toDistribSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribMulActionHomClass.toSMulHomClass.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u2, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) (AlgHom.algHomClass.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))))) (Subalgebra.inclusion.{u1, u2} R A _inst_1 _inst_2 _inst_3 S T hst) x)) (FunLike.coe.{succ u2, succ u2, succ u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (fun (_x : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) => Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) _x) (SMulHomClass.toFunLike.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (SMulZeroClass.toSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddMonoid.toZero.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))) (DistribSMul.toSMulZeroClass.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddMonoid.toAddZeroClass.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))) (DistribMulAction.toDistribSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))) (SMulZeroClass.toSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (AddMonoid.toZero.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)))))) (DistribSMul.toSMulZeroClass.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (AddMonoid.toAddZeroClass.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)))))) (DistribMulAction.toDistribSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U))))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)))))) (DistribMulActionHomClass.toSMulHomClass.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U))))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U))) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U))) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u2, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)) (AlgHom.algHomClass.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)))))) (Subalgebra.inclusion.{u1, u2} R A _inst_1 _inst_2 _inst_3 S U (le_trans.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) S T U hst htu)) x)
Case conversion may be inaccurate. Consider using '#align subalgebra.inclusion_inclusion Subalgebra.inclusion_inclusionₓ'. -/
@[simp]
theorem inclusion_inclusion {S T U : Subalgebra R A} (hst : S ≤ T) (htu : T ≤ U) (x : S) :
    inclusion htu (inclusion hst x) = inclusion (le_trans hst htu) x :=
  Subtype.ext rfl
#align subalgebra.inclusion_inclusion Subalgebra.inclusion_inclusion

/- warning: subalgebra.coe_inclusion -> Subalgebra.coe_inclusion is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} (h : LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteSemilatticeInf.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) S T) (s : coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S), Eq.{succ u2} A ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) A (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) A (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) A (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) A (coeSubtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T))))) (coeFn.{succ u2, succ u2} (AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) (fun (_x : AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) => (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) -> (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T)) ([anonymous].{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) (Subalgebra.inclusion.{u1, u2} R A _inst_1 _inst_2 _inst_3 S T h) s)) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeSubtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S))))) s)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} (h : LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) S T) (s : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)), Eq.{succ u2} A (Subtype.val.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Set.{u2} A) (Set.instMembershipSet.{u2} A) x (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) T)) (FunLike.coe.{succ u2, succ u2, succ u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (fun (_x : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) => Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _x) (SMulHomClass.toFunLike.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (SMulZeroClass.toSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddMonoid.toZero.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))) (DistribSMul.toSMulZeroClass.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddMonoid.toAddZeroClass.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))) (DistribMulAction.toDistribSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))))) (SMulZeroClass.toSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (AddMonoid.toZero.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribSMul.toSMulZeroClass.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (AddMonoid.toAddZeroClass.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribMulAction.toDistribSMul.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribMulActionHomClass.toSMulHomClass.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))))) (AddCommMonoid.toAddMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{u2, u1, u2, u2} (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))) (Module.toDistribMulAction.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u1, u2, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (AlgHom.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) (AlgHom.algHomClass.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)))))) (Subalgebra.inclusion.{u1, u2} R A _inst_1 _inst_2 _inst_3 S T h) s)) (Subtype.val.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Set.{u2} A) (Set.instMembershipSet.{u2} A) x (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S)) s)
Case conversion may be inaccurate. Consider using '#align subalgebra.coe_inclusion Subalgebra.coe_inclusionₓ'. -/
@[simp]
theorem coe_inclusion {S T : Subalgebra R A} (h : S ≤ T) (s : S) : (inclusion h s : A) = s :=
  rfl
#align subalgebra.coe_inclusion Subalgebra.coe_inclusion

/- warning: subalgebra.equiv_of_eq -> Subalgebra.equivOfEq is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), (Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S T) -> (AlgEquiv.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), (Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S T) -> (AlgEquiv.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T))
Case conversion may be inaccurate. Consider using '#align subalgebra.equiv_of_eq Subalgebra.equivOfEqₓ'. -/
/-- Two subalgebras that are equal are also equivalent as algebras.

This is the `subalgebra` version of `linear_equiv.of_eq` and `equiv.set.of_eq`. -/
@[simps apply]
def equivOfEq (S T : Subalgebra R A) (h : S = T) : S ≃ₐ[R] T :=
  {
    LinearEquiv.ofEq _ _
      (congr_arg toSubmodule h) with
    toFun := fun x => ⟨x, h ▸ x.2⟩
    invFun := fun x => ⟨x, h.symm ▸ x.2⟩
    map_mul' := fun _ _ => rfl
    commutes' := fun _ => rfl }
#align subalgebra.equiv_of_eq Subalgebra.equivOfEq

/- warning: subalgebra.equiv_of_eq_symm -> Subalgebra.equivOfEq_symm is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (h : Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S T), Eq.{succ u2} (AlgEquiv.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)) (AlgEquiv.symm.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.equivOfEq.{u1, u2} R A _inst_1 _inst_2 _inst_3 S T h)) (Subalgebra.equivOfEq.{u1, u2} R A _inst_1 _inst_2 _inst_3 T S (Eq.symm.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S T h))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (h : Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S T), Eq.{succ u2} (AlgEquiv.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)) (AlgEquiv.symm.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.equivOfEq.{u1, u2} R A _inst_1 _inst_2 _inst_3 S T h)) (Subalgebra.equivOfEq.{u1, u2} R A _inst_1 _inst_2 _inst_3 T S (Eq.symm.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S T h))
Case conversion may be inaccurate. Consider using '#align subalgebra.equiv_of_eq_symm Subalgebra.equivOfEq_symmₓ'. -/
@[simp]
theorem equivOfEq_symm (S T : Subalgebra R A) (h : S = T) :
    (equivOfEq S T h).symm = equivOfEq T S h.symm :=
  rfl
#align subalgebra.equiv_of_eq_symm Subalgebra.equivOfEq_symm

/- warning: subalgebra.equiv_of_eq_rfl -> Subalgebra.equivOfEq_rfl is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), Eq.{succ u2} (AlgEquiv.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)) (Subalgebra.equivOfEq.{u1, u2} R A _inst_1 _inst_2 _inst_3 S S (rfl.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S)) (AlgEquiv.refl.{u1, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), Eq.{succ u2} (AlgEquiv.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S)) (Subalgebra.equivOfEq.{u1, u2} R A _inst_1 _inst_2 _inst_3 S S (rfl.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S)) (AlgEquiv.refl.{u1, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S))
Case conversion may be inaccurate. Consider using '#align subalgebra.equiv_of_eq_rfl Subalgebra.equivOfEq_rflₓ'. -/
@[simp]
theorem equivOfEq_rfl (S : Subalgebra R A) : equivOfEq S S rfl = AlgEquiv.refl :=
  by
  ext
  rfl
#align subalgebra.equiv_of_eq_rfl Subalgebra.equivOfEq_rfl

/- warning: subalgebra.equiv_of_eq_trans -> Subalgebra.equivOfEq_trans is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (U : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (hST : Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S T) (hTU : Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) T U), Eq.{succ u2} (AlgEquiv.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) U) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)) (AlgEquiv.trans.{u1, u2, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) U) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.equivOfEq.{u1, u2} R A _inst_1 _inst_2 _inst_3 S T hST) (Subalgebra.equivOfEq.{u1, u2} R A _inst_1 _inst_2 _inst_3 T U hTU)) (Subalgebra.equivOfEq.{u1, u2} R A _inst_1 _inst_2 _inst_3 S U (trans.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (IsPreorder.to_isTrans.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (IsEquiv.to_isPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (eq_isEquiv.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) S T U hST hTU))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (U : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (hST : Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S T) (hTU : Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) T U), Eq.{succ u2} (AlgEquiv.{u1, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U)) (AlgEquiv.trans.{u1, u2, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x U)) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 U) (Subalgebra.equivOfEq.{u1, u2} R A _inst_1 _inst_2 _inst_3 S T hST) (Subalgebra.equivOfEq.{u1, u2} R A _inst_1 _inst_2 _inst_3 T U hTU)) (Subalgebra.equivOfEq.{u1, u2} R A _inst_1 _inst_2 _inst_3 S U (Eq.trans.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S T U hST hTU))
Case conversion may be inaccurate. Consider using '#align subalgebra.equiv_of_eq_trans Subalgebra.equivOfEq_transₓ'. -/
@[simp]
theorem equivOfEq_trans (S T U : Subalgebra R A) (hST : S = T) (hTU : T = U) :
    (equivOfEq S T hST).trans (equivOfEq T U hTU) = equivOfEq S U (trans hST hTU) :=
  rfl
#align subalgebra.equiv_of_eq_trans Subalgebra.equivOfEq_trans

section Prod

variable (S₁ : Subalgebra R B)

/- warning: subalgebra.prod -> Subalgebra.prod is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4], (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) -> (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) -> (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4], (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) -> (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) -> (Subalgebra.{u1, max u3 u2} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))
Case conversion may be inaccurate. Consider using '#align subalgebra.prod Subalgebra.prodₓ'. -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/-- The product of two subalgebras is a subalgebra. -/
def prod : Subalgebra R (A × B) :=
  {
    S.toSubsemiring.Prod S₁.toSubsemiring with
    carrier := S ×ˢ S₁
    algebraMap_mem' := fun r => ⟨algebraMap_mem _ _, algebraMap_mem _ _⟩ }
#align subalgebra.prod Subalgebra.prod

/- warning: subalgebra.coe_prod -> Subalgebra.coe_prod is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (S₁ : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5), Eq.{succ (max u2 u3)} (Set.{max u2 u3} (Prod.{u2, u3} A B)) ((fun (a : Type.{max u2 u3}) (b : Type.{max u2 u3}) [self : HasLiftT.{succ (max u2 u3), succ (max u2 u3)} a b] => self.0) (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Set.{max u2 u3} (Prod.{u2, u3} A B)) (HasLiftT.mk.{succ (max u2 u3), succ (max u2 u3)} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Set.{max u2 u3} (Prod.{u2, u3} A B)) (CoeTCₓ.coe.{succ (max u2 u3), succ (max u2 u3)} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Set.{max u2 u3} (Prod.{u2, u3} A B)) (SetLike.Set.hasCoeT.{max u2 u3, max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Prod.{u2, u3} A B) (Subalgebra.setLike.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))))) (Subalgebra.prod.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 S S₁)) (Set.prod.{u2, u3} A B ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) S) ((fun (a : Type.{u3}) (b : Type.{u3}) [self : HasLiftT.{succ u3, succ u3} a b] => self.0) (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Set.{u3} B) (HasLiftT.mk.{succ u3, succ u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Set.{u3} B) (CoeTCₓ.coe.{succ u3, succ u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Set.{u3} B) (SetLike.Set.hasCoeT.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)))) S₁))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (S₁ : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5), Eq.{max (succ u2) (succ u3)} (Set.{max u2 u3} (Prod.{u2, u3} A B)) (SetLike.coe.{max u2 u3, max u2 u3} (Subalgebra.{u1, max u3 u2} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Prod.{u2, u3} A B) (Subalgebra.instSetLikeSubalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Subalgebra.prod.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 S S₁)) (Set.prod.{u2, u3} A B (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) S) (SetLike.coe.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) S₁))
Case conversion may be inaccurate. Consider using '#align subalgebra.coe_prod Subalgebra.coe_prodₓ'. -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
@[simp]
theorem coe_prod : (prod S S₁ : Set (A × B)) = S ×ˢ S₁ :=
  rfl
#align subalgebra.coe_prod Subalgebra.coe_prod

/- warning: subalgebra.prod_to_submodule -> Subalgebra.prod_toSubmodule is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (S₁ : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5), Eq.{succ (max u2 u3)} (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.semiring.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) (coeFn.{succ (max u2 u3), succ (max u2 u3)} (OrderEmbedding.{max u2 u3, max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.semiring.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) (Preorder.toLE.{max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (PartialOrder.toPreorder.{max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (SetLike.partialOrder.{max u2 u3, max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Prod.{u2, u3} A B) (Subalgebra.setLike.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))))) (Preorder.toLE.{max u2 u3} (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.semiring.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) (PartialOrder.toPreorder.{max u2 u3} (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.semiring.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) (CompleteSemilatticeInf.toPartialOrder.{max u2 u3} (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.semiring.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) (CompleteLattice.toCompleteSemilatticeInf.{max u2 u3} (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.semiring.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) (Submodule.completeLattice.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.semiring.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)))))))) (fun (_x : RelEmbedding.{max u2 u3, max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.semiring.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) (LE.le.{max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Preorder.toLE.{max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (PartialOrder.toPreorder.{max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (SetLike.partialOrder.{max u2 u3, max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Prod.{u2, u3} A B) (Subalgebra.setLike.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)))))) (LE.le.{max u2 u3} (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.semiring.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) (Preorder.toLE.{max u2 u3} (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.semiring.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) (PartialOrder.toPreorder.{max u2 u3} (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.semiring.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) (CompleteSemilatticeInf.toPartialOrder.{max u2 u3} (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.semiring.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) (CompleteLattice.toCompleteSemilatticeInf.{max u2 u3} (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.semiring.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) (Submodule.completeLattice.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.semiring.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))))))))) => (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) -> (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.semiring.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)))) (RelEmbedding.hasCoeToFun.{max u2 u3, max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.semiring.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) (LE.le.{max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Preorder.toLE.{max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (PartialOrder.toPreorder.{max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (SetLike.partialOrder.{max u2 u3, max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Prod.{u2, u3} A B) (Subalgebra.setLike.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)))))) (LE.le.{max u2 u3} (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.semiring.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) (Preorder.toLE.{max u2 u3} (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.semiring.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) (PartialOrder.toPreorder.{max u2 u3} (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.semiring.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) (CompleteSemilatticeInf.toPartialOrder.{max u2 u3} (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.semiring.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) (CompleteLattice.toCompleteSemilatticeInf.{max u2 u3} (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.semiring.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) (Submodule.completeLattice.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.semiring.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))))))))) (Subalgebra.toSubmodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Subalgebra.prod.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 S S₁)) (Submodule.prod.{u1, u2, u3} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3) (coeFn.{succ u2, succ u2} (OrderEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))))))) (fun (_x : RelEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) => (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) -> (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (RelEmbedding.hasCoeToFun.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.partialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteSemilatticeInf.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))))) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3) S) B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5) (coeFn.{succ u3, succ u3} (OrderEmbedding.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (Preorder.toLE.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (PartialOrder.toPreorder.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.partialOrder.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)))) (Preorder.toLE.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (PartialOrder.toPreorder.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (CompleteSemilatticeInf.toPartialOrder.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (CompleteLattice.toCompleteSemilatticeInf.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (Submodule.completeLattice.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5))))))) (fun (_x : RelEmbedding.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (LE.le.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Preorder.toLE.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (PartialOrder.toPreorder.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.partialOrder.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5))))) (LE.le.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (Preorder.toLE.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (PartialOrder.toPreorder.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (CompleteSemilatticeInf.toPartialOrder.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (CompleteLattice.toCompleteSemilatticeInf.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (Submodule.completeLattice.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)))))))) => (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) -> (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5))) (RelEmbedding.hasCoeToFun.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (LE.le.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Preorder.toLE.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (PartialOrder.toPreorder.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.partialOrder.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5))))) (LE.le.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (Preorder.toLE.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (PartialOrder.toPreorder.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (CompleteSemilatticeInf.toPartialOrder.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (CompleteLattice.toCompleteSemilatticeInf.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (Submodule.completeLattice.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)))))))) (Subalgebra.toSubmodule.{u1, u3} R B _inst_1 _inst_4 _inst_5) S₁))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (S₁ : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5), Eq.{max (succ u2) (succ u3)} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) => Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) (Subalgebra.prod.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 S S₁)) (FunLike.coe.{succ (max u2 u3), succ (max u2 u3), succ (max u2 u3)} (Function.Embedding.{succ (max u2 u3), succ (max u2 u3)} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)))) (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (fun (_x : Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) => Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) _x) (EmbeddingLike.toFunLike.{succ (max u2 u3), succ (max u2 u3), succ (max u2 u3)} (Function.Embedding.{succ (max u2 u3), succ (max u2 u3)} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)))) (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) (Function.instEmbeddingLikeEmbedding.{succ (max u2 u3), succ (max u2 u3)} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))))) (RelEmbedding.toEmbedding.{max u2 u3, max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.680 : Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) => LE.le.{max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Preorder.toLE.{max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (PartialOrder.toPreorder.{max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (SetLike.instPartialOrder.{max u2 u3, max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Prod.{u2, u3} A B) (Subalgebra.instSetLikeSubalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))))) x._@.Mathlib.Order.Hom.Basic._hyg.680 x._@.Mathlib.Order.Hom.Basic._hyg.682) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.695 : Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) => LE.le.{max u2 u3} (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) (Preorder.toLE.{max u2 u3} (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) (PartialOrder.toPreorder.{max u2 u3} (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) (OmegaCompletePartialOrder.toPartialOrder.{max u2 u3} (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) (CompleteLattice.instOmegaCompletePartialOrder.{max u2 u3} (Submodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) (Submodule.completeLattice.{u1, max u2 u3} R (Prod.{u2, u3} A B) (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{max u2 u3} (Prod.{u2, u3} A B) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Semiring.toNonAssocSemiring.{max u2 u3} (Prod.{u2, u3} A B) (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4)))) (Algebra.toModule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))))))) x._@.Mathlib.Order.Hom.Basic._hyg.695 x._@.Mathlib.Order.Hom.Basic._hyg.697) (Subalgebra.toSubmodule.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) (Subalgebra.prod.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 S S₁)) (Submodule.prod.{u1, u2, u3} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3) (FunLike.coe.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (fun (_x : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) _x) (EmbeddingLike.toFunLike.{succ u2, succ u2, succ u2} (Function.Embedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Function.instEmbeddingLikeEmbedding.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (RelEmbedding.toEmbedding.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.680 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instPartialOrder.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) x._@.Mathlib.Order.Hom.Basic._hyg.680 x._@.Mathlib.Order.Hom.Basic._hyg.682) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.695 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) => LE.le.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Preorder.toLE.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (PartialOrder.toPreorder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Submodule.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Submodule.completeLattice.{u1, u2} R A (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))) x._@.Mathlib.Order.Hom.Basic._hyg.695 x._@.Mathlib.Order.Hom.Basic._hyg.697) (Subalgebra.toSubmodule.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5) (FunLike.coe.{succ u3, succ u3, succ u3} (Function.Embedding.{succ u3, succ u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5))) (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (fun (_x : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) => Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) _x) (EmbeddingLike.toFunLike.{succ u3, succ u3, succ u3} (Function.Embedding.{succ u3, succ u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5))) (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (Function.instEmbeddingLikeEmbedding.{succ u3, succ u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)))) (RelEmbedding.toEmbedding.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.680 : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) => LE.le.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Preorder.toLE.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (PartialOrder.toPreorder.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instPartialOrder.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)))) x._@.Mathlib.Order.Hom.Basic._hyg.680 x._@.Mathlib.Order.Hom.Basic._hyg.682) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.695 : Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) => LE.le.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (Preorder.toLE.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (PartialOrder.toPreorder.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (OmegaCompletePartialOrder.toPartialOrder.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (CompleteLattice.instOmegaCompletePartialOrder.{u3} (Submodule.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (Submodule.completeLattice.{u1, u3} R B (CommSemiring.toSemiring.{u1} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} B (Semiring.toNonAssocSemiring.{u3} B _inst_4))) (Algebra.toModule.{u1, u3} R B _inst_1 _inst_4 _inst_5)))))) x._@.Mathlib.Order.Hom.Basic._hyg.695 x._@.Mathlib.Order.Hom.Basic._hyg.697) (Subalgebra.toSubmodule.{u1, u3} R B _inst_1 _inst_4 _inst_5)) S₁))
Case conversion may be inaccurate. Consider using '#align subalgebra.prod_to_submodule Subalgebra.prod_toSubmoduleₓ'. -/
theorem prod_toSubmodule : (S.Prod S₁).toSubmodule = S.toSubmodule.Prod S₁.toSubmodule :=
  rfl
#align subalgebra.prod_to_submodule Subalgebra.prod_toSubmodule

/- warning: subalgebra.mem_prod -> Subalgebra.mem_prod is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {S₁ : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5} {x : Prod.{u2, u3} A B}, Iff (Membership.Mem.{max u2 u3, max u2 u3} (Prod.{u2, u3} A B) (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (SetLike.hasMem.{max u2 u3, max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Prod.{u2, u3} A B) (Subalgebra.setLike.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) x (Subalgebra.prod.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 S S₁)) (And (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Prod.fst.{u2, u3} A B x) S) (Membership.Mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.hasMem.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.setLike.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (Prod.snd.{u2, u3} A B x) S₁))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {S₁ : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5} {x : Prod.{u2, u3} A B}, Iff (Membership.mem.{max u2 u3, max u3 u2} (Prod.{u2, u3} A B) (Subalgebra.{u1, max u3 u2} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (SetLike.instMembership.{max u2 u3, max u2 u3} (Subalgebra.{u1, max u3 u2} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Prod.{u2, u3} A B) (Subalgebra.instSetLikeSubalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))) x (Subalgebra.prod.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 S S₁)) (And (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Prod.fst.{u2, u3} A B x) S) (Membership.mem.{u3, u3} B (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u3, u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) B (Subalgebra.instSetLikeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)) (Prod.snd.{u2, u3} A B x) S₁))
Case conversion may be inaccurate. Consider using '#align subalgebra.mem_prod Subalgebra.mem_prodₓ'. -/
@[simp]
theorem mem_prod {S : Subalgebra R A} {S₁ : Subalgebra R B} {x : A × B} :
    x ∈ prod S S₁ ↔ x.1 ∈ S ∧ x.2 ∈ S₁ :=
  Set.mem_prod
#align subalgebra.mem_prod Subalgebra.mem_prod

/- warning: subalgebra.prod_top -> Subalgebra.prod_top is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4], Eq.{succ (max u2 u3)} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Subalgebra.prod.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toHasTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Top.top.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (CompleteLattice.toHasTop.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Algebra.Subalgebra.completeLattice.{u1, u3} R B _inst_1 _inst_4 _inst_5)))) (Top.top.{max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (CompleteLattice.toHasTop.{max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Algebra.Subalgebra.completeLattice.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4], Eq.{max (succ u2) (succ u3)} (Subalgebra.{u1, max u3 u2} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Subalgebra.prod.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))) (Top.top.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (CompleteLattice.toTop.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Algebra.instCompleteLatticeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)))) (Top.top.{max u2 u3} (Subalgebra.{u1, max u3 u2} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (CompleteLattice.toTop.{max u2 u3} (Subalgebra.{u1, max u3 u2} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Algebra.instCompleteLatticeSubalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))))
Case conversion may be inaccurate. Consider using '#align subalgebra.prod_top Subalgebra.prod_topₓ'. -/
@[simp]
theorem prod_top : (prod ⊤ ⊤ : Subalgebra R (A × B)) = ⊤ := by ext <;> simp
#align subalgebra.prod_top Subalgebra.prod_top

/- warning: subalgebra.prod_mono -> Subalgebra.prod_mono is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {S₁ : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5} {T₁ : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5}, (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteSemilatticeInf.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) S T) -> (LE.le.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Preorder.toLE.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (PartialOrder.toPreorder.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (CompleteSemilatticeInf.toPartialOrder.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (CompleteLattice.toCompleteSemilatticeInf.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Algebra.Subalgebra.completeLattice.{u1, u3} R B _inst_1 _inst_4 _inst_5))))) S₁ T₁) -> (LE.le.{max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Preorder.toLE.{max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (PartialOrder.toPreorder.{max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (CompleteSemilatticeInf.toPartialOrder.{max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (CompleteLattice.toCompleteSemilatticeInf.{max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Algebra.Subalgebra.completeLattice.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)))))) (Subalgebra.prod.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 S S₁) (Subalgebra.prod.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 T T₁))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {S₁ : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5} {T₁ : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5}, (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) S T) -> (LE.le.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Preorder.toLE.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (PartialOrder.toPreorder.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (OmegaCompletePartialOrder.toPartialOrder.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (CompleteLattice.instOmegaCompletePartialOrder.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Algebra.instCompleteLatticeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5))))) S₁ T₁) -> (LE.le.{max u2 u3} (Subalgebra.{u1, max u3 u2} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Preorder.toLE.{max u2 u3} (Subalgebra.{u1, max u3 u2} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (PartialOrder.toPreorder.{max u2 u3} (Subalgebra.{u1, max u3 u2} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (OmegaCompletePartialOrder.toPartialOrder.{max u2 u3} (Subalgebra.{u1, max u3 u2} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (CompleteLattice.instOmegaCompletePartialOrder.{max u2 u3} (Subalgebra.{u1, max u3 u2} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Algebra.instCompleteLatticeSubalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)))))) (Subalgebra.prod.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 S S₁) (Subalgebra.prod.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 T T₁))
Case conversion may be inaccurate. Consider using '#align subalgebra.prod_mono Subalgebra.prod_monoₓ'. -/
theorem prod_mono {S T : Subalgebra R A} {S₁ T₁ : Subalgebra R B} :
    S ≤ T → S₁ ≤ T₁ → prod S S₁ ≤ prod T T₁ :=
  Set.prod_mono
#align subalgebra.prod_mono Subalgebra.prod_mono

/- warning: subalgebra.prod_inf_prod -> Subalgebra.prod_inf_prod is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {S₁ : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5} {T₁ : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5}, Eq.{succ (max u2 u3)} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Inf.inf.{max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (SemilatticeInf.toHasInf.{max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Lattice.toSemilatticeInf.{max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (ConditionallyCompleteLattice.toLattice.{max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (CompleteLattice.toConditionallyCompleteLattice.{max u2 u3} (Subalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Algebra.Subalgebra.completeLattice.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.semiring.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)))))) (Subalgebra.prod.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 S S₁) (Subalgebra.prod.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 T T₁)) (Subalgebra.prod.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 (Inf.inf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SemilatticeInf.toHasInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Lattice.toSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) S T) (Inf.inf.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (SemilatticeInf.toHasInf.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Lattice.toSemilatticeInf.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (ConditionallyCompleteLattice.toLattice.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (CompleteLattice.toConditionallyCompleteLattice.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Algebra.Subalgebra.completeLattice.{u1, u3} R B _inst_1 _inst_4 _inst_5))))) S₁ T₁))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {S₁ : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5} {T₁ : Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5}, Eq.{max (succ u2) (succ u3)} (Subalgebra.{u1, max u3 u2} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Inf.inf.{max u2 u3} (Subalgebra.{u1, max u3 u2} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Lattice.toInf.{max u2 u3} (Subalgebra.{u1, max u3 u2} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (ConditionallyCompleteLattice.toLattice.{max u2 u3} (Subalgebra.{u1, max u3 u2} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (CompleteLattice.toConditionallyCompleteLattice.{max u2 u3} (Subalgebra.{u1, max u3 u2} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5)) (Algebra.instCompleteLatticeSubalgebra.{u1, max u2 u3} R (Prod.{u2, u3} A B) _inst_1 (Prod.instSemiringProd.{u2, u3} A B _inst_2 _inst_4) (Prod.algebra.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5))))) (Subalgebra.prod.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 S S₁) (Subalgebra.prod.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 T T₁)) (Subalgebra.prod.{u1, u2, u3} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 (Inf.inf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Lattice.toInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) S T) (Inf.inf.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Lattice.toInf.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (ConditionallyCompleteLattice.toLattice.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (CompleteLattice.toConditionallyCompleteLattice.{u3} (Subalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5) (Algebra.instCompleteLatticeSubalgebra.{u1, u3} R B _inst_1 _inst_4 _inst_5)))) S₁ T₁))
Case conversion may be inaccurate. Consider using '#align subalgebra.prod_inf_prod Subalgebra.prod_inf_prodₓ'. -/
@[simp]
theorem prod_inf_prod {S T : Subalgebra R A} {S₁ T₁ : Subalgebra R B} :
    S.Prod S₁ ⊓ T.Prod T₁ = (S ⊓ T).Prod (S₁ ⊓ T₁) :=
  SetLike.coe_injective Set.prod_inter_prod
#align subalgebra.prod_inf_prod Subalgebra.prod_inf_prod

end Prod

section SuprLift

variable {ι : Type _}

/- warning: subalgebra.coe_supr_of_directed -> Subalgebra.coe_supᵢ_of_directed is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {ι : Type.{u3}} [_inst_6 : Nonempty.{succ u3} ι] {S : ι -> (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)}, (Directed.{u2, succ u3} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) ι (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteSemilatticeInf.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))) S) -> (Eq.{succ u2} (Set.{u2} A) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (supᵢ.{u2, succ u3} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toHasSup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))) ι S)) (Set.unionᵢ.{u2, succ u3} A ι (fun (i : ι) => (fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (S i))))
but is expected to have type
  forall {R : Type.{u2}} {A : Type.{u3}} [_inst_1 : CommSemiring.{u2} R] [_inst_2 : Semiring.{u3} A] [_inst_3 : Algebra.{u2, u3} R A _inst_1 _inst_2] {ι : Type.{u1}} [_inst_6 : Nonempty.{succ u1} ι] {S : ι -> (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)}, (Directed.{u3, succ u1} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) ι (fun (x._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.12698 : Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (x._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.12700 : Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) => LE.le.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (OmegaCompletePartialOrder.toPartialOrder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.instOmegaCompletePartialOrder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3))))) x._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.12698 x._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.12700) S) -> (Eq.{succ u3} (Set.{u3} A) (SetLike.coe.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (supᵢ.{u3, succ u1} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toSupSet.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3))) ι S)) (Set.unionᵢ.{u3, succ u1} A ι (fun (i : ι) => SetLike.coe.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (S i))))
Case conversion may be inaccurate. Consider using '#align subalgebra.coe_supr_of_directed Subalgebra.coe_supᵢ_of_directedₓ'. -/
theorem coe_supᵢ_of_directed [Nonempty ι] {S : ι → Subalgebra R A} (dir : Directed (· ≤ ·) S) :
    ↑(supᵢ S) = ⋃ i, (S i : Set A) :=
  let K : Subalgebra R A :=
    { carrier := ⋃ i, S i
      mul_mem' := fun x y hx hy =>
        let ⟨i, hi⟩ := Set.mem_unionᵢ.1 hx
        let ⟨j, hj⟩ := Set.mem_unionᵢ.1 hy
        let ⟨k, hik, hjk⟩ := dir i j
        Set.mem_unionᵢ.2 ⟨k, Subalgebra.mul_mem (S k) (hik hi) (hjk hj)⟩
      add_mem' := fun x y hx hy =>
        let ⟨i, hi⟩ := Set.mem_unionᵢ.1 hx
        let ⟨j, hj⟩ := Set.mem_unionᵢ.1 hy
        let ⟨k, hik, hjk⟩ := dir i j
        Set.mem_unionᵢ.2 ⟨k, Subalgebra.add_mem (S k) (hik hi) (hjk hj)⟩
      algebraMap_mem' := fun r =>
        let i := @Nonempty.some ι inferInstance
        Set.mem_unionᵢ.2 ⟨i, Subalgebra.algebraMap_mem _ _⟩ }
  have : supᵢ S = K :=
    le_antisymm (supᵢ_le fun i => Set.subset_unionᵢ (fun i => ↑(S i)) i)
      (SetLike.coe_subset_coe.1 (Set.unionᵢ_subset fun i => SetLike.coe_subset_coe.2 (le_supᵢ _ _)))
  this.symm ▸ rfl
#align subalgebra.coe_supr_of_directed Subalgebra.coe_supᵢ_of_directed

/- warning: subalgebra.supr_lift -> Subalgebra.supᵢLift is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] {ι : Type.{u4}} [_inst_6 : Nonempty.{succ u4} ι] (K : ι -> (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)), (Directed.{u2, succ u4} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) ι (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteSemilatticeInf.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))) K) -> (forall (f : forall (i : ι), AlgHom.{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5), (forall (i : ι) (j : ι) (h : LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteSemilatticeInf.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (K i) (K j)), Eq.{max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) (f i) (AlgHom.comp.{u1, u2, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K j)) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K j)) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K j)) _inst_5 (f j) (Subalgebra.inclusion.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i) (K j) h))) -> (forall (T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), (Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) T (supᵢ.{u2, succ u4} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toHasSup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))) ι K)) -> (AlgHom.{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) _inst_5)))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] {ι : Type.{u4}} [_inst_6 : Nonempty.{succ u4} ι] (K : ι -> (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)), (Directed.{u2, succ u4} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) ι (fun (x._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.13081 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (x._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.13083 : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) => LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) x._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.13081 x._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.13083) K) -> (forall (f : forall (i : ι), AlgHom.{u1, u2, u3} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5), (forall (i : ι) (j : ι) (h : LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (K i) (K j)), Eq.{max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) (f i) (AlgHom.comp.{u1, u2, u2, u3} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (K j))) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K j)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K j)) _inst_5 (f j) (Subalgebra.inclusion.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i) (K j) h))) -> (forall (T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), (Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) T (supᵢ.{u2, succ u4} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toSupSet.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))) ι K)) -> (AlgHom.{u1, u2, u3} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T)) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) _inst_5)))
Case conversion may be inaccurate. Consider using '#align subalgebra.supr_lift Subalgebra.supᵢLiftₓ'. -/
/-- Define an algebra homomorphism on a directed supremum of subalgebras by defining
it on each subalgebra, and proving that it agrees on the intersection of subalgebras. -/
noncomputable def supᵢLift [Nonempty ι] (K : ι → Subalgebra R A) (dir : Directed (· ≤ ·) K)
    (f : ∀ i, K i →ₐ[R] B) (hf : ∀ (i j : ι) (h : K i ≤ K j), f i = (f j).comp (inclusion h))
    (T : Subalgebra R A) (hT : T = supᵢ K) : ↥T →ₐ[R] B := by
  subst hT <;>
    exact
      { toFun :=
          Set.unionᵢLift (fun i => ↑(K i)) (fun i x => f i x)
            (fun i j x hxi hxj => by
              let ⟨k, hik, hjk⟩ := dir i j
              rw [hf i k hik, hf j k hjk]
              rfl)
            (↑(supᵢ K)) (by rw [coe_supr_of_directed dir] <;> rfl)
        map_one' := Set.unionᵢLift_const _ (fun _ => 1) (fun _ => rfl) _ (by simp)
        map_zero' := Set.unionᵢLift_const _ (fun _ => 0) (fun _ => rfl) _ (by simp)
        map_mul' :=
          Set.unionᵢLift_binary (coe_supr_of_directed dir) dir _ (fun _ => (· * ·))
            (fun _ _ _ => rfl) _ (by simp)
        map_add' :=
          Set.unionᵢLift_binary (coe_supr_of_directed dir) dir _ (fun _ => (· + ·))
            (fun _ _ _ => rfl) _ (by simp)
        commutes' := fun r =>
          Set.unionᵢLift_const _ (fun _ => algebraMap _ _ r) (fun _ => rfl) _ fun i => by
            erw [AlgHom.commutes (f i)] }
#align subalgebra.supr_lift Subalgebra.supᵢLift

variable [Nonempty ι] {K : ι → Subalgebra R A} {dir : Directed (· ≤ ·) K} {f : ∀ i, K i →ₐ[R] B}
  {hf : ∀ (i j : ι) (h : K i ≤ K j), f i = (f j).comp (inclusion h)} {T : Subalgebra R A}
  {hT : T = supᵢ K}

/- warning: subalgebra.supr_lift_inclusion -> Subalgebra.supᵢLift_inclusion is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] {ι : Type.{u4}} [_inst_6 : Nonempty.{succ u4} ι] {K : ι -> (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)} {dir : Directed.{u2, succ u4} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) ι (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteSemilatticeInf.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))) K} {f : forall (i : ι), AlgHom.{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5} {hf : forall (i : ι) (j : ι) (h : LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteSemilatticeInf.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (K i) (K j)), Eq.{max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) (f i) (AlgHom.comp.{u1, u2, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K j)) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K j)) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K j)) _inst_5 (f j) (Subalgebra.inclusion.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i) (K j) h))} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {hT : Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) T (supᵢ.{u2, succ u4} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toHasSup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))) ι K)} {i : ι} (x : coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) (h : LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteSemilatticeInf.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (K i) T), Eq.{succ u3} B (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) _inst_5) (fun (_x : AlgHom.{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) _inst_5) => (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) -> B) ([anonymous].{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) _inst_5) (Subalgebra.supᵢLift.{u1, u2, u3, u4} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 ι _inst_6 K dir f hf T hT) (coeFn.{succ u2, succ u2} (AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) (fun (_x : AlgHom.{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) => (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) -> (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T)) ([anonymous].{u1, u2, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T)) (Subalgebra.inclusion.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i) T h) x)) (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) (fun (_x : AlgHom.{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) => (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) -> B) ([anonymous].{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) (f i) x)
but is expected to have type
  forall {R : Type.{u2}} {A : Type.{u3}} {B : Type.{u4}} [_inst_1 : CommSemiring.{u2} R] [_inst_2 : Semiring.{u3} A] [_inst_3 : Algebra.{u2, u3} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u4} B] [_inst_5 : Algebra.{u2, u4} R B _inst_1 _inst_4] {ι : Type.{u1}} [_inst_6 : Nonempty.{succ u1} ι] {K : ι -> (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)} {dir : Directed.{u3, succ u1} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) ι (fun (x._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.13669 : Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (x._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.13671 : Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) => LE.le.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (OmegaCompletePartialOrder.toPartialOrder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.instOmegaCompletePartialOrder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3))))) x._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.13669 x._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.13671) K} {f : forall (i : ι), AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5} {hf : forall (i : ι) (j : ι) (h : LE.le.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (OmegaCompletePartialOrder.toPartialOrder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.instOmegaCompletePartialOrder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3))))) (K i) (K j)), Eq.{max (succ u3) (succ u4)} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) (f i) (AlgHom.comp.{u2, u3, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K j))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K j)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K j)) _inst_5 (f j) (Subalgebra.inclusion.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i) (K j) h))} {T : Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3} {hT : Eq.{succ u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) T (supᵢ.{u3, succ u1} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toSupSet.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3))) ι K)} {i : ι} (x : Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (h : LE.le.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (OmegaCompletePartialOrder.toPartialOrder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.instOmegaCompletePartialOrder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3))))) (K i) T), Eq.{succ u4} ((fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) => B) (FunLike.coe.{succ u3, succ u3, succ u3} (AlgHom.{u2, u3, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (fun (a : Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) => Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) a) (SMulHomClass.toFunLike.{u3, u2, u3, u3} (AlgHom.{u2, u3, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)) R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (SMulZeroClass.toSMul.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (AddMonoid.toZero.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))))) (DistribSMul.toSMulZeroClass.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (AddMonoid.toAddZeroClass.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))))) (DistribMulAction.toDistribSMul.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)))))) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))))) (SMulZeroClass.toSMul.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (AddMonoid.toZero.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribSMul.toSMulZeroClass.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (AddMonoid.toAddZeroClass.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribMulAction.toDistribSMul.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T))))) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribMulActionHomClass.toSMulHomClass.{u3, u2, u3, u3} (AlgHom.{u2, u3, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)) R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)))))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T))))) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)))) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T))) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{u3, u2, u3, u3} (AlgHom.{u2, u3, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)) R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T))) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)))) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T))) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u2, u3, u3, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (AlgHom.{u2, u3, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)) (AlgHom.algHomClass.{u2, u3, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))))) (Subalgebra.inclusion.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i) T h) x)) (FunLike.coe.{max (succ u3) (succ u4), succ u3, succ u4} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_5) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (fun (_x : Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) => B) _x) (SMulHomClass.toFunLike.{max u3 u4, u2, u3, u4} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_5) R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B (SMulZeroClass.toSMul.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (AddMonoid.toZero.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribSMul.toSMulZeroClass.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (AddMonoid.toAddZeroClass.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribMulAction.toDistribSMul.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T))))) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))))) (SMulZeroClass.toSMul.{u2, u4} R B (AddMonoid.toZero.{u4} B (AddCommMonoid.toAddMonoid.{u4} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))))) (DistribSMul.toSMulZeroClass.{u2, u4} R B (AddMonoid.toAddZeroClass.{u4} B (AddCommMonoid.toAddMonoid.{u4} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))))) (DistribMulAction.toDistribSMul.{u2, u4} R B (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{u4} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4)))) (Module.toDistribMulAction.{u2, u4} R B (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))) (Algebra.toModule.{u2, u4} R B _inst_1 _inst_4 _inst_5))))) (DistribMulActionHomClass.toSMulHomClass.{max u3 u4, u2, u3, u4} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_5) R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T))))) (AddCommMonoid.toAddMonoid.{u4} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4)))) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T))) (Module.toDistribMulAction.{u2, u4} R B (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))) (Algebra.toModule.{u2, u4} R B _inst_1 _inst_4 _inst_5)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u3 u4, u2, u3, u4} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_5) R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4)) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T))) (Module.toDistribMulAction.{u2, u4} R B (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))) (Algebra.toModule.{u2, u4} R B _inst_1 _inst_4 _inst_5)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u2, u3, u4, max u3 u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_5 (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_5) (AlgHom.algHomClass.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_5))))) (Subalgebra.supᵢLift.{u2, u3, u4, u1} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 ι _inst_6 K dir f hf T hT) (FunLike.coe.{succ u3, succ u3, succ u3} (AlgHom.{u2, u3, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (fun (_x : Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) => Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _x) (SMulHomClass.toFunLike.{u3, u2, u3, u3} (AlgHom.{u2, u3, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)) R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (SMulZeroClass.toSMul.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (AddMonoid.toZero.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))))) (DistribSMul.toSMulZeroClass.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (AddMonoid.toAddZeroClass.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))))) (DistribMulAction.toDistribSMul.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)))))) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))))) (SMulZeroClass.toSMul.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (AddMonoid.toZero.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribSMul.toSMulZeroClass.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (AddMonoid.toAddZeroClass.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribMulAction.toDistribSMul.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T))))) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribMulActionHomClass.toSMulHomClass.{u3, u2, u3, u3} (AlgHom.{u2, u3, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)) R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)))))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T))))) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)))) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T))) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{u3, u2, u3, u3} (AlgHom.{u2, u3, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)) R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T))) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)))) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T))) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u2, u3, u3, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (AlgHom.{u2, u3, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)) (AlgHom.algHomClass.{u2, u3, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))))) (Subalgebra.inclusion.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i) T h) x)) (FunLike.coe.{max (succ u3) (succ u4), succ u3, succ u4} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (fun (_x : Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) => B) _x) (SMulHomClass.toFunLike.{max u3 u4, u2, u3, u4} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B (SMulZeroClass.toSMul.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (AddMonoid.toZero.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))))) (DistribSMul.toSMulZeroClass.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (AddMonoid.toAddZeroClass.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))))) (DistribMulAction.toDistribSMul.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)))))) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))))) (SMulZeroClass.toSMul.{u2, u4} R B (AddMonoid.toZero.{u4} B (AddCommMonoid.toAddMonoid.{u4} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))))) (DistribSMul.toSMulZeroClass.{u2, u4} R B (AddMonoid.toAddZeroClass.{u4} B (AddCommMonoid.toAddMonoid.{u4} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))))) (DistribMulAction.toDistribSMul.{u2, u4} R B (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{u4} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4)))) (Module.toDistribMulAction.{u2, u4} R B (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))) (Algebra.toModule.{u2, u4} R B _inst_1 _inst_4 _inst_5))))) (DistribMulActionHomClass.toSMulHomClass.{max u3 u4, u2, u3, u4} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)))))) (AddCommMonoid.toAddMonoid.{u4} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4)))) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)))) (Module.toDistribMulAction.{u2, u4} R B (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))) (Algebra.toModule.{u2, u4} R B _inst_1 _inst_4 _inst_5)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u3 u4, u2, u3, u4} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4)) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)))) (Module.toDistribMulAction.{u2, u4} R B (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))) (Algebra.toModule.{u2, u4} R B _inst_1 _inst_4 _inst_5)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u2, u3, u4, max u3 u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5 (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) (AlgHom.algHomClass.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5))))) (f i) x)
Case conversion may be inaccurate. Consider using '#align subalgebra.supr_lift_inclusion Subalgebra.supᵢLift_inclusionₓ'. -/
@[simp]
theorem supᵢLift_inclusion {i : ι} (x : K i) (h : K i ≤ T) :
    supᵢLift K dir f hf T hT (inclusion h x) = f i x := by
  subst T <;> exact Set.unionᵢLift_inclusion _ _
#align subalgebra.supr_lift_inclusion Subalgebra.supᵢLift_inclusion

/- warning: subalgebra.supr_lift_comp_inclusion -> Subalgebra.supᵢLift_comp_inclusion is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] {ι : Type.{u4}} [_inst_6 : Nonempty.{succ u4} ι] {K : ι -> (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)} {dir : Directed.{u2, succ u4} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) ι (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteSemilatticeInf.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))) K} {f : forall (i : ι), AlgHom.{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5} {hf : forall (i : ι) (j : ι) (h : LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteSemilatticeInf.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (K i) (K j)), Eq.{max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) (f i) (AlgHom.comp.{u1, u2, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K j)) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K j)) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K j)) _inst_5 (f j) (Subalgebra.inclusion.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i) (K j) h))} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {hT : Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) T (supᵢ.{u2, succ u4} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toHasSup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))) ι K)} {i : ι} (h : LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteSemilatticeInf.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (K i) T), Eq.{max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) (AlgHom.comp.{u1, u2, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) _inst_5 (Subalgebra.supᵢLift.{u1, u2, u3, u4} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 ι _inst_6 K dir f hf T hT) (Subalgebra.inclusion.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i) T h)) (f i)
but is expected to have type
  forall {R : Type.{u2}} {A : Type.{u3}} {B : Type.{u4}} [_inst_1 : CommSemiring.{u2} R] [_inst_2 : Semiring.{u3} A] [_inst_3 : Algebra.{u2, u3} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u4} B] [_inst_5 : Algebra.{u2, u4} R B _inst_1 _inst_4] {ι : Type.{u1}} [_inst_6 : Nonempty.{succ u1} ι] {K : ι -> (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)} {dir : Directed.{u3, succ u1} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) ι (fun (x._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.13824 : Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (x._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.13826 : Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) => LE.le.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (OmegaCompletePartialOrder.toPartialOrder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.instOmegaCompletePartialOrder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3))))) x._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.13824 x._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.13826) K} {f : forall (i : ι), AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5} {hf : forall (i : ι) (j : ι) (h : LE.le.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (OmegaCompletePartialOrder.toPartialOrder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.instOmegaCompletePartialOrder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3))))) (K i) (K j)), Eq.{max (succ u3) (succ u4)} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) (f i) (AlgHom.comp.{u2, u3, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K j))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K j)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K j)) _inst_5 (f j) (Subalgebra.inclusion.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i) (K j) h))} {T : Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3} {hT : Eq.{succ u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) T (supᵢ.{u3, succ u1} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toSupSet.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3))) ι K)} {i : ι} (h : LE.le.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (OmegaCompletePartialOrder.toPartialOrder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.instOmegaCompletePartialOrder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3))))) (K i) T), Eq.{max (succ u3) (succ u4)} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) (AlgHom.comp.{u2, u3, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_5 (Subalgebra.supᵢLift.{u2, u3, u4, u1} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 ι _inst_6 K dir f hf T hT) (Subalgebra.inclusion.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i) T h)) (f i)
Case conversion may be inaccurate. Consider using '#align subalgebra.supr_lift_comp_inclusion Subalgebra.supᵢLift_comp_inclusionₓ'. -/
@[simp]
theorem supᵢLift_comp_inclusion {i : ι} (h : K i ≤ T) :
    (supᵢLift K dir f hf T hT).comp (inclusion h) = f i := by ext <;> simp
#align subalgebra.supr_lift_comp_inclusion Subalgebra.supᵢLift_comp_inclusion

/- warning: subalgebra.supr_lift_mk -> Subalgebra.supᵢLift_mk is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] {ι : Type.{u4}} [_inst_6 : Nonempty.{succ u4} ι] {K : ι -> (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)} {dir : Directed.{u2, succ u4} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) ι (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteSemilatticeInf.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))) K} {f : forall (i : ι), AlgHom.{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5} {hf : forall (i : ι) (j : ι) (h : LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteSemilatticeInf.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (K i) (K j)), Eq.{max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) (f i) (AlgHom.comp.{u1, u2, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K j)) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K j)) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K j)) _inst_5 (f j) (Subalgebra.inclusion.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i) (K j) h))} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {hT : Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) T (supᵢ.{u2, succ u4} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toHasSup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))) ι K)} {i : ι} (x : coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) (hx : Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) A (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) A (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) A (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) A (coeSubtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (K i)))))) x) T), Eq.{succ u3} B (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) _inst_5) (fun (_x : AlgHom.{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) _inst_5) => (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) -> B) ([anonymous].{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) _inst_5) (Subalgebra.supᵢLift.{u1, u2, u3, u4} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 ι _inst_6 K dir f hf T hT) (Subtype.mk.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) A (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) A (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) A (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) A (coeSubtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (K i)))))) x) hx)) (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) (fun (_x : AlgHom.{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) => (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) -> B) ([anonymous].{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) (f i) x)
but is expected to have type
  forall {R : Type.{u2}} {A : Type.{u3}} {B : Type.{u4}} [_inst_1 : CommSemiring.{u2} R] [_inst_2 : Semiring.{u3} A] [_inst_3 : Algebra.{u2, u3} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u4} B] [_inst_5 : Algebra.{u2, u4} R B _inst_1 _inst_4] {ι : Type.{u1}} [_inst_6 : Nonempty.{succ u1} ι] {K : ι -> (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)} {dir : Directed.{u3, succ u1} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) ι (fun (x._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.13951 : Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (x._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.13953 : Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) => LE.le.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (OmegaCompletePartialOrder.toPartialOrder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.instOmegaCompletePartialOrder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3))))) x._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.13951 x._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.13953) K} {f : forall (i : ι), AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5} {hf : forall (i : ι) (j : ι) (h : LE.le.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (OmegaCompletePartialOrder.toPartialOrder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.instOmegaCompletePartialOrder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3))))) (K i) (K j)), Eq.{max (succ u3) (succ u4)} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) (f i) (AlgHom.comp.{u2, u3, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K j))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K j)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K j)) _inst_5 (f j) (Subalgebra.inclusion.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i) (K j) h))} {T : Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3} {hT : Eq.{succ u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) T (supᵢ.{u3, succ u1} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toSupSet.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3))) ι K)} {i : ι} (x : Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (hx : Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) (Subtype.val.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Set.{u3} A) (Set.instMembershipSet.{u3} A) x (SetLike.coe.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (K i))) x) T), Eq.{succ u4} ((fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) => B) (Subtype.mk.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T) (Subtype.val.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Set.{u3} A) (Set.instMembershipSet.{u3} A) x (SetLike.coe.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (K i))) x) hx)) (FunLike.coe.{max (succ u3) (succ u4), succ u3, succ u4} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_5) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (fun (_x : Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) => B) _x) (SMulHomClass.toFunLike.{max u3 u4, u2, u3, u4} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_5) R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B (SMulZeroClass.toSMul.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (AddMonoid.toZero.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribSMul.toSMulZeroClass.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (AddMonoid.toAddZeroClass.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribMulAction.toDistribSMul.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T))))) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))))) (SMulZeroClass.toSMul.{u2, u4} R B (AddMonoid.toZero.{u4} B (AddCommMonoid.toAddMonoid.{u4} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))))) (DistribSMul.toSMulZeroClass.{u2, u4} R B (AddMonoid.toAddZeroClass.{u4} B (AddCommMonoid.toAddMonoid.{u4} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))))) (DistribMulAction.toDistribSMul.{u2, u4} R B (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{u4} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4)))) (Module.toDistribMulAction.{u2, u4} R B (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))) (Algebra.toModule.{u2, u4} R B _inst_1 _inst_4 _inst_5))))) (DistribMulActionHomClass.toSMulHomClass.{max u3 u4, u2, u3, u4} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_5) R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T))))) (AddCommMonoid.toAddMonoid.{u4} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4)))) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T))) (Module.toDistribMulAction.{u2, u4} R B (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))) (Algebra.toModule.{u2, u4} R B _inst_1 _inst_4 _inst_5)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u3 u4, u2, u3, u4} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_5) R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4)) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T))) (Module.toDistribMulAction.{u2, u4} R B (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))) (Algebra.toModule.{u2, u4} R B _inst_1 _inst_4 _inst_5)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u2, u3, u4, max u3 u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_5 (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_5) (AlgHom.algHomClass.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_5))))) (Subalgebra.supᵢLift.{u2, u3, u4, u1} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 ι _inst_6 K dir f hf T hT) (Subtype.mk.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T) (Subtype.val.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Set.{u3} A) (Set.instMembershipSet.{u3} A) x (SetLike.coe.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (K i))) x) hx)) (FunLike.coe.{max (succ u3) (succ u4), succ u3, succ u4} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (fun (_x : Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) => B) _x) (SMulHomClass.toFunLike.{max u3 u4, u2, u3, u4} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B (SMulZeroClass.toSMul.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (AddMonoid.toZero.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))))) (DistribSMul.toSMulZeroClass.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (AddMonoid.toAddZeroClass.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))))) (DistribMulAction.toDistribSMul.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)))))) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))))) (SMulZeroClass.toSMul.{u2, u4} R B (AddMonoid.toZero.{u4} B (AddCommMonoid.toAddMonoid.{u4} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))))) (DistribSMul.toSMulZeroClass.{u2, u4} R B (AddMonoid.toAddZeroClass.{u4} B (AddCommMonoid.toAddMonoid.{u4} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))))) (DistribMulAction.toDistribSMul.{u2, u4} R B (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{u4} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4)))) (Module.toDistribMulAction.{u2, u4} R B (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))) (Algebra.toModule.{u2, u4} R B _inst_1 _inst_4 _inst_5))))) (DistribMulActionHomClass.toSMulHomClass.{max u3 u4, u2, u3, u4} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)))))) (AddCommMonoid.toAddMonoid.{u4} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4)))) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)))) (Module.toDistribMulAction.{u2, u4} R B (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))) (Algebra.toModule.{u2, u4} R B _inst_1 _inst_4 _inst_5)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u3 u4, u2, u3, u4} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4)) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)))) (Module.toDistribMulAction.{u2, u4} R B (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))) (Algebra.toModule.{u2, u4} R B _inst_1 _inst_4 _inst_5)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u2, u3, u4, max u3 u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5 (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) (AlgHom.algHomClass.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5))))) (f i) x)
Case conversion may be inaccurate. Consider using '#align subalgebra.supr_lift_mk Subalgebra.supᵢLift_mkₓ'. -/
@[simp]
theorem supᵢLift_mk {i : ι} (x : K i) (hx : (x : A) ∈ T) :
    supᵢLift K dir f hf T hT ⟨x, hx⟩ = f i x := by subst hT <;> exact Set.unionᵢLift_mk x hx
#align subalgebra.supr_lift_mk Subalgebra.supᵢLift_mk

/- warning: subalgebra.supr_lift_of_mem -> Subalgebra.supᵢLift_of_mem is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} {B : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u3} B] [_inst_5 : Algebra.{u1, u3} R B _inst_1 _inst_4] {ι : Type.{u4}} [_inst_6 : Nonempty.{succ u4} ι] {K : ι -> (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)} {dir : Directed.{u2, succ u4} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) ι (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteSemilatticeInf.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3)))))) K} {f : forall (i : ι), AlgHom.{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5} {hf : forall (i : ι) (j : ι) (h : LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteSemilatticeInf.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (K i) (K j)), Eq.{max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) (f i) (AlgHom.comp.{u1, u2, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K j)) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K j)) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K j)) _inst_5 (f j) (Subalgebra.inclusion.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i) (K j) h))} {T : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} {hT : Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) T (supᵢ.{u2, succ u4} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toHasSup.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))) ι K)} {i : ι} (x : coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) (hx : Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) A (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) A (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) A (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) A (coeSubtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T))))) x) (K i)), Eq.{succ u3} B (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) _inst_5) (fun (_x : AlgHom.{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) _inst_5) => (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) -> B) ([anonymous].{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 T) _inst_5) (Subalgebra.supᵢLift.{u1, u2, u3, u4} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 ι _inst_6 K dir f hf T hT) x) (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlgHom.{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) (fun (_x : AlgHom.{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) => (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) -> B) ([anonymous].{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (K i)) B _inst_1 (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.algebra.{u1, u2} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) (f i) (Subtype.mk.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x (K i)) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) A (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) A (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) A (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) T) A (coeSubtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x T))))) x) hx))
but is expected to have type
  forall {R : Type.{u2}} {A : Type.{u3}} {B : Type.{u4}} [_inst_1 : CommSemiring.{u2} R] [_inst_2 : Semiring.{u3} A] [_inst_3 : Algebra.{u2, u3} R A _inst_1 _inst_2] [_inst_4 : Semiring.{u4} B] [_inst_5 : Algebra.{u2, u4} R B _inst_1 _inst_4] {ι : Type.{u1}} [_inst_6 : Nonempty.{succ u1} ι] {K : ι -> (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)} {dir : Directed.{u3, succ u1} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) ι (fun (x._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.14106 : Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (x._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.14108 : Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) => LE.le.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (OmegaCompletePartialOrder.toPartialOrder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.instOmegaCompletePartialOrder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3))))) x._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.14106 x._@.Mathlib.Algebra.Algebra.Subalgebra.Basic._hyg.14108) K} {f : forall (i : ι), AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5} {hf : forall (i : ι) (j : ι) (h : LE.le.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (OmegaCompletePartialOrder.toPartialOrder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.instOmegaCompletePartialOrder.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3))))) (K i) (K j)), Eq.{max (succ u3) (succ u4)} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) (f i) (AlgHom.comp.{u2, u3, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K j))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K j)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K j)) _inst_5 (f j) (Subalgebra.inclusion.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i) (K j) h))} {T : Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3} {hT : Eq.{succ u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) T (supᵢ.{u3, succ u1} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (ConditionallyCompleteLattice.toSupSet.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toConditionallyCompleteLattice.{u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3))) ι K)} {i : ι} (x : Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (hx : Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) (Subtype.val.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Set.{u3} A) (Set.instMembershipSet.{u3} A) x (SetLike.coe.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) T)) x) (K i)), Eq.{succ u4} ((fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) => B) x) (FunLike.coe.{max (succ u3) (succ u4), succ u3, succ u4} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_5) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (fun (_x : Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) => B) _x) (SMulHomClass.toFunLike.{max u3 u4, u2, u3, u4} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_5) R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B (SMulZeroClass.toSMul.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (AddMonoid.toZero.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribSMul.toSMulZeroClass.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (AddMonoid.toAddZeroClass.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))))) (DistribMulAction.toDistribSMul.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T))))) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))))) (SMulZeroClass.toSMul.{u2, u4} R B (AddMonoid.toZero.{u4} B (AddCommMonoid.toAddMonoid.{u4} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))))) (DistribSMul.toSMulZeroClass.{u2, u4} R B (AddMonoid.toAddZeroClass.{u4} B (AddCommMonoid.toAddMonoid.{u4} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))))) (DistribMulAction.toDistribSMul.{u2, u4} R B (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{u4} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4)))) (Module.toDistribMulAction.{u2, u4} R B (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))) (Algebra.toModule.{u2, u4} R B _inst_1 _inst_4 _inst_5))))) (DistribMulActionHomClass.toSMulHomClass.{max u3 u4, u2, u3, u4} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_5) R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T))))) (AddCommMonoid.toAddMonoid.{u4} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4)))) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T))) (Module.toDistribMulAction.{u2, u4} R B (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))) (Algebra.toModule.{u2, u4} R B _inst_1 _inst_4 _inst_5)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u3 u4, u2, u3, u4} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_5) R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4)) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T)))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T))) (Module.toDistribMulAction.{u2, u4} R B (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))) (Algebra.toModule.{u2, u4} R B _inst_1 _inst_4 _inst_5)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u2, u3, u4, max u3 u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_5 (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_5) (AlgHom.algHomClass.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x T)) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 T) _inst_5))))) (Subalgebra.supᵢLift.{u2, u3, u4, u1} R A B _inst_1 _inst_2 _inst_3 _inst_4 _inst_5 ι _inst_6 K dir f hf T hT) x) (FunLike.coe.{max (succ u3) (succ u4), succ u3, succ u4} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (fun (_x : Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) => B) _x) (SMulHomClass.toFunLike.{max u3 u4, u2, u3, u4} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B (SMulZeroClass.toSMul.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (AddMonoid.toZero.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))))) (DistribSMul.toSMulZeroClass.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (AddMonoid.toAddZeroClass.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))))) (DistribMulAction.toDistribSMul.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)))))) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))))) (SMulZeroClass.toSMul.{u2, u4} R B (AddMonoid.toZero.{u4} B (AddCommMonoid.toAddMonoid.{u4} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))))) (DistribSMul.toSMulZeroClass.{u2, u4} R B (AddMonoid.toAddZeroClass.{u4} B (AddCommMonoid.toAddMonoid.{u4} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))))) (DistribMulAction.toDistribSMul.{u2, u4} R B (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{u4} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4)))) (Module.toDistribMulAction.{u2, u4} R B (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))) (Algebra.toModule.{u2, u4} R B _inst_1 _inst_4 _inst_5))))) (DistribMulActionHomClass.toSMulHomClass.{max u3 u4, u2, u3, u4} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)))))) (AddCommMonoid.toAddMonoid.{u4} B (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4)))) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)))) (Module.toDistribMulAction.{u2, u4} R B (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))) (Algebra.toModule.{u2, u4} R B _inst_1 _inst_4 _inst_5)) (NonUnitalAlgHomClass.toDistribMulActionHomClass.{max u3 u4, u2, u3, u4} (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4)) (Module.toDistribMulAction.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Semiring.toNonAssocSemiring.{u3} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i))))) (Algebra.toModule.{u2, u3} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)))) (Module.toDistribMulAction.{u2, u4} R B (CommSemiring.toSemiring.{u2} R _inst_1) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u4} B (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u4} B (Semiring.toNonAssocSemiring.{u4} B _inst_4))) (Algebra.toModule.{u2, u4} R B _inst_1 _inst_4 _inst_5)) (AlgHom.instNonUnitalAlgHomClassToMonoidToMonoidWithZeroToSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToNonUnitalNonAssocSemiringToNonAssocSemiringToDistribMulActionToAddCommMonoidToModuleToDistribMulActionToAddCommMonoidToModule.{u2, u3, u4, max u3 u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5 (AlgHom.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5) (AlgHom.algHomClass.{u2, u3, u4} R (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i))) B _inst_1 (Subalgebra.toSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_4 (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u2, u3} R A _inst_1 _inst_2 _inst_3 (K i)) _inst_5))))) (f i) (Subtype.mk.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x (K i)) (Subtype.val.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Set.{u3} A) (Set.instMembershipSet.{u3} A) x (SetLike.coe.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) T)) x) hx))
Case conversion may be inaccurate. Consider using '#align subalgebra.supr_lift_of_mem Subalgebra.supᵢLift_of_memₓ'. -/
theorem supᵢLift_of_mem {i : ι} (x : T) (hx : (x : A) ∈ K i) :
    supᵢLift K dir f hf T hT x = f i ⟨x, hx⟩ := by subst hT <;> exact Set.unionᵢLift_of_mem x hx
#align subalgebra.supr_lift_of_mem Subalgebra.supᵢLift_of_mem

end SuprLift

/-! ## Actions by `subalgebra`s

These are just copies of the definitions about `subsemiring` starting from
`subring.mul_action`.
-/


section Actions

variable {α β : Type _}

/-- The action by a subalgebra is the action by the underlying algebra. -/
instance [SMul A α] (S : Subalgebra R A) : SMul S α :=
  S.toSubsemiring.SMul

/- warning: subalgebra.smul_def -> Subalgebra.smul_def is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {α : Type.{u3}} [_inst_6 : SMul.{u2, u3} A α] {S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3} (g : coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) (m : α), Eq.{succ u3} α (SMul.smul.{u2, u3} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) α (Subalgebra.hasSmul.{u1, u2, u3} R A _inst_1 _inst_2 _inst_3 α _inst_6 S) g m) (SMul.smul.{u2, u3} A α _inst_6 ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (coeSubtype.{succ u2} A (fun (x : A) => Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S))))) g) m)
but is expected to have type
  forall {R : Type.{u2}} {A : Type.{u3}} [_inst_1 : CommSemiring.{u2} R] [_inst_2 : Semiring.{u3} A] [_inst_3 : Algebra.{u2, u3} R A _inst_1 _inst_2] {α : Type.{u1}} [_inst_6 : SMul.{u3, u1} A α] {S : Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3} (g : Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x S)) (m : α), Eq.{succ u1} α (HSMul.hSMul.{u3, u1, u1} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x S)) α α (instHSMul.{u3, u1} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3)) x S)) α (Subalgebra.instSMulSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebra.{u2, u3, u1} R A _inst_1 _inst_2 _inst_3 α _inst_6 S)) g m) (HSMul.hSMul.{u3, u1, u1} A α α (instHSMul.{u3, u1} A α _inst_6) (Subtype.val.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Set.{u3} A) (Set.instMembershipSet.{u3} A) x (SetLike.coe.{u3, u3} (Subalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_1 _inst_2 _inst_3) S)) g) m)
Case conversion may be inaccurate. Consider using '#align subalgebra.smul_def Subalgebra.smul_defₓ'. -/
theorem smul_def [SMul A α] {S : Subalgebra R A} (g : S) (m : α) : g • m = (g : A) • m :=
  rfl
#align subalgebra.smul_def Subalgebra.smul_def

/- warning: subalgebra.smul_comm_class_left -> Subalgebra.sMulCommClass_left is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {α : Type.{u3}} {β : Type.{u4}} [_inst_6 : SMul.{u2, u4} A β] [_inst_7 : SMul.{u3, u4} α β] [_inst_8 : SMulCommClass.{u2, u3, u4} A α β _inst_6 _inst_7] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), SMulCommClass.{u2, u3, u4} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) α β (Subalgebra.hasSmul.{u1, u2, u4} R A _inst_1 _inst_2 _inst_3 β _inst_6 S) _inst_7
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {α : Type.{u3}} {β : Type.{u4}} [_inst_6 : SMul.{u2, u4} A β] [_inst_7 : SMul.{u3, u4} α β] [_inst_8 : SMulCommClass.{u2, u3, u4} A α β _inst_6 _inst_7] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), SMulCommClass.{u2, u3, u4} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) α β (Subalgebra.instSMulSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebra.{u1, u2, u4} R A _inst_1 _inst_2 _inst_3 β _inst_6 S) _inst_7
Case conversion may be inaccurate. Consider using '#align subalgebra.smul_comm_class_left Subalgebra.sMulCommClass_leftₓ'. -/
instance sMulCommClass_left [SMul A β] [SMul α β] [SMulCommClass A α β] (S : Subalgebra R A) :
    SMulCommClass S α β :=
  S.toSubsemiring.smulCommClass_left
#align subalgebra.smul_comm_class_left Subalgebra.sMulCommClass_left

/- warning: subalgebra.smul_comm_class_right -> Subalgebra.sMulCommClass_right is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {α : Type.{u3}} {β : Type.{u4}} [_inst_6 : SMul.{u3, u4} α β] [_inst_7 : SMul.{u2, u4} A β] [_inst_8 : SMulCommClass.{u3, u2, u4} α A β _inst_6 _inst_7] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), SMulCommClass.{u3, u2, u4} α (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) β _inst_6 (Subalgebra.hasSmul.{u1, u2, u4} R A _inst_1 _inst_2 _inst_3 β _inst_7 S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {α : Type.{u3}} {β : Type.{u4}} [_inst_6 : SMul.{u3, u4} α β] [_inst_7 : SMul.{u2, u4} A β] [_inst_8 : SMulCommClass.{u3, u2, u4} α A β _inst_6 _inst_7] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), SMulCommClass.{u3, u2, u4} α (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) β _inst_6 (Subalgebra.instSMulSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebra.{u1, u2, u4} R A _inst_1 _inst_2 _inst_3 β _inst_7 S)
Case conversion may be inaccurate. Consider using '#align subalgebra.smul_comm_class_right Subalgebra.sMulCommClass_rightₓ'. -/
instance sMulCommClass_right [SMul α β] [SMul A β] [SMulCommClass α A β] (S : Subalgebra R A) :
    SMulCommClass α S β :=
  S.toSubsemiring.smulCommClass_right
#align subalgebra.smul_comm_class_right Subalgebra.sMulCommClass_right

/- warning: subalgebra.is_scalar_tower_left -> Subalgebra.isScalarTower_left is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {α : Type.{u3}} {β : Type.{u4}} [_inst_6 : SMul.{u3, u4} α β] [_inst_7 : SMul.{u2, u3} A α] [_inst_8 : SMul.{u2, u4} A β] [_inst_9 : IsScalarTower.{u2, u3, u4} A α β _inst_7 _inst_6 _inst_8] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), IsScalarTower.{u2, u3, u4} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) α β (Subalgebra.hasSmul.{u1, u2, u3} R A _inst_1 _inst_2 _inst_3 α _inst_7 S) _inst_6 (Subalgebra.hasSmul.{u1, u2, u4} R A _inst_1 _inst_2 _inst_3 β _inst_8 S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {α : Type.{u3}} {β : Type.{u4}} [_inst_6 : SMul.{u3, u4} α β] [_inst_7 : SMul.{u2, u3} A α] [_inst_8 : SMul.{u2, u4} A β] [_inst_9 : IsScalarTower.{u2, u3, u4} A α β _inst_7 _inst_6 _inst_8] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), IsScalarTower.{u2, u3, u4} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) α β (Subalgebra.instSMulSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebra.{u1, u2, u3} R A _inst_1 _inst_2 _inst_3 α _inst_7 S) _inst_6 (Subalgebra.instSMulSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebra.{u1, u2, u4} R A _inst_1 _inst_2 _inst_3 β _inst_8 S)
Case conversion may be inaccurate. Consider using '#align subalgebra.is_scalar_tower_left Subalgebra.isScalarTower_leftₓ'. -/
/-- Note that this provides `is_scalar_tower S R R` which is needed by `smul_mul_assoc`. -/
instance isScalarTower_left [SMul α β] [SMul A α] [SMul A β] [IsScalarTower A α β]
    (S : Subalgebra R A) : IsScalarTower S α β :=
  S.toSubsemiring.IsScalarTower
#align subalgebra.is_scalar_tower_left Subalgebra.isScalarTower_left

/- warning: subalgebra.is_scalar_tower_mid -> Subalgebra.isScalarTower_mid is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {S : Type.{u2}} {T : Type.{u3}} [_inst_6 : CommSemiring.{u1} R] [_inst_7 : Semiring.{u2} S] [_inst_8 : AddCommMonoid.{u3} T] [_inst_9 : Algebra.{u1, u2} R S _inst_6 _inst_7] [_inst_10 : Module.{u1, u3} R T (CommSemiring.toSemiring.{u1} R _inst_6) _inst_8] [_inst_11 : Module.{u2, u3} S T _inst_7 _inst_8] [_inst_12 : IsScalarTower.{u1, u2, u3} R S T (SMulZeroClass.toHasSmul.{u1, u2} R S (AddZeroClass.toHasZero.{u2} S (AddMonoid.toAddZeroClass.{u2} S (AddCommMonoid.toAddMonoid.{u2} S (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} S (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} S (Semiring.toNonAssocSemiring.{u2} S _inst_7)))))) (SMulWithZero.toSmulZeroClass.{u1, u2} R S (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_6))))) (AddZeroClass.toHasZero.{u2} S (AddMonoid.toAddZeroClass.{u2} S (AddCommMonoid.toAddMonoid.{u2} S (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} S (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} S (Semiring.toNonAssocSemiring.{u2} S _inst_7)))))) (MulActionWithZero.toSMulWithZero.{u1, u2} R S (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_6)) (AddZeroClass.toHasZero.{u2} S (AddMonoid.toAddZeroClass.{u2} S (AddCommMonoid.toAddMonoid.{u2} S (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} S (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} S (Semiring.toNonAssocSemiring.{u2} S _inst_7)))))) (Module.toMulActionWithZero.{u1, u2} R S (CommSemiring.toSemiring.{u1} R _inst_6) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} S (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} S (Semiring.toNonAssocSemiring.{u2} S _inst_7))) (Algebra.toModule.{u1, u2} R S _inst_6 _inst_7 _inst_9))))) (SMulZeroClass.toHasSmul.{u2, u3} S T (AddZeroClass.toHasZero.{u3} T (AddMonoid.toAddZeroClass.{u3} T (AddCommMonoid.toAddMonoid.{u3} T _inst_8))) (SMulWithZero.toSmulZeroClass.{u2, u3} S T (MulZeroClass.toHasZero.{u2} S (MulZeroOneClass.toMulZeroClass.{u2} S (MonoidWithZero.toMulZeroOneClass.{u2} S (Semiring.toMonoidWithZero.{u2} S _inst_7)))) (AddZeroClass.toHasZero.{u3} T (AddMonoid.toAddZeroClass.{u3} T (AddCommMonoid.toAddMonoid.{u3} T _inst_8))) (MulActionWithZero.toSMulWithZero.{u2, u3} S T (Semiring.toMonoidWithZero.{u2} S _inst_7) (AddZeroClass.toHasZero.{u3} T (AddMonoid.toAddZeroClass.{u3} T (AddCommMonoid.toAddMonoid.{u3} T _inst_8))) (Module.toMulActionWithZero.{u2, u3} S T _inst_7 _inst_8 _inst_11)))) (SMulZeroClass.toHasSmul.{u1, u3} R T (AddZeroClass.toHasZero.{u3} T (AddMonoid.toAddZeroClass.{u3} T (AddCommMonoid.toAddMonoid.{u3} T _inst_8))) (SMulWithZero.toSmulZeroClass.{u1, u3} R T (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_6))))) (AddZeroClass.toHasZero.{u3} T (AddMonoid.toAddZeroClass.{u3} T (AddCommMonoid.toAddMonoid.{u3} T _inst_8))) (MulActionWithZero.toSMulWithZero.{u1, u3} R T (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_6)) (AddZeroClass.toHasZero.{u3} T (AddMonoid.toAddZeroClass.{u3} T (AddCommMonoid.toAddMonoid.{u3} T _inst_8))) (Module.toMulActionWithZero.{u1, u3} R T (CommSemiring.toSemiring.{u1} R _inst_6) _inst_8 _inst_10))))] (S' : Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9), IsScalarTower.{u1, u2, u3} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) S (Subalgebra.setLike.{u1, u2} R S _inst_6 _inst_7 _inst_9)) S') T (SMulZeroClass.toHasSmul.{u1, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) S (Subalgebra.setLike.{u1, u2} R S _inst_6 _inst_7 _inst_9)) S') (AddZeroClass.toHasZero.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) S (Subalgebra.setLike.{u1, u2} R S _inst_6 _inst_7 _inst_9)) S') (AddMonoid.toAddZeroClass.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) S (Subalgebra.setLike.{u1, u2} R S _inst_6 _inst_7 _inst_9)) S') (AddCommMonoid.toAddMonoid.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) S (Subalgebra.setLike.{u1, u2} R S _inst_6 _inst_7 _inst_9)) S') (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) S (Subalgebra.setLike.{u1, u2} R S _inst_6 _inst_7 _inst_9)) S') (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) S (Subalgebra.setLike.{u1, u2} R S _inst_6 _inst_7 _inst_9)) S') (Semiring.toNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) S (Subalgebra.setLike.{u1, u2} R S _inst_6 _inst_7 _inst_9)) S') (Subalgebra.toSemiring.{u1, u2} R S _inst_6 _inst_7 _inst_9 S'))))))) (SMulWithZero.toSmulZeroClass.{u1, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) S (Subalgebra.setLike.{u1, u2} R S _inst_6 _inst_7 _inst_9)) S') (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_6))))) (AddZeroClass.toHasZero.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) S (Subalgebra.setLike.{u1, u2} R S _inst_6 _inst_7 _inst_9)) S') (AddMonoid.toAddZeroClass.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) S (Subalgebra.setLike.{u1, u2} R S _inst_6 _inst_7 _inst_9)) S') (AddCommMonoid.toAddMonoid.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) S (Subalgebra.setLike.{u1, u2} R S _inst_6 _inst_7 _inst_9)) S') (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) S (Subalgebra.setLike.{u1, u2} R S _inst_6 _inst_7 _inst_9)) S') (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) S (Subalgebra.setLike.{u1, u2} R S _inst_6 _inst_7 _inst_9)) S') (Semiring.toNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) S (Subalgebra.setLike.{u1, u2} R S _inst_6 _inst_7 _inst_9)) S') (Subalgebra.toSemiring.{u1, u2} R S _inst_6 _inst_7 _inst_9 S'))))))) (MulActionWithZero.toSMulWithZero.{u1, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) S (Subalgebra.setLike.{u1, u2} R S _inst_6 _inst_7 _inst_9)) S') (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_6)) (AddZeroClass.toHasZero.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) S (Subalgebra.setLike.{u1, u2} R S _inst_6 _inst_7 _inst_9)) S') (AddMonoid.toAddZeroClass.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) S (Subalgebra.setLike.{u1, u2} R S _inst_6 _inst_7 _inst_9)) S') (AddCommMonoid.toAddMonoid.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) S (Subalgebra.setLike.{u1, u2} R S _inst_6 _inst_7 _inst_9)) S') (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) S (Subalgebra.setLike.{u1, u2} R S _inst_6 _inst_7 _inst_9)) S') (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) S (Subalgebra.setLike.{u1, u2} R S _inst_6 _inst_7 _inst_9)) S') (Semiring.toNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) S (Subalgebra.setLike.{u1, u2} R S _inst_6 _inst_7 _inst_9)) S') (Subalgebra.toSemiring.{u1, u2} R S _inst_6 _inst_7 _inst_9 S'))))))) (Module.toMulActionWithZero.{u1, u2} R (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) S (Subalgebra.setLike.{u1, u2} R S _inst_6 _inst_7 _inst_9)) S') (CommSemiring.toSemiring.{u1} R _inst_6) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) S (Subalgebra.setLike.{u1, u2} R S _inst_6 _inst_7 _inst_9)) S') (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) S (Subalgebra.setLike.{u1, u2} R S _inst_6 _inst_7 _inst_9)) S') (Semiring.toNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) S (Subalgebra.setLike.{u1, u2} R S _inst_6 _inst_7 _inst_9)) S') (Subalgebra.toSemiring.{u1, u2} R S _inst_6 _inst_7 _inst_9 S')))) (Subalgebra.module.{u1, u2} R S _inst_6 _inst_7 _inst_9 S'))))) (Subalgebra.hasSmul.{u1, u2, u3} R S _inst_6 _inst_7 _inst_9 T (SMulZeroClass.toHasSmul.{u2, u3} S T (AddZeroClass.toHasZero.{u3} T (AddMonoid.toAddZeroClass.{u3} T (AddCommMonoid.toAddMonoid.{u3} T _inst_8))) (SMulWithZero.toSmulZeroClass.{u2, u3} S T (MulZeroClass.toHasZero.{u2} S (MulZeroOneClass.toMulZeroClass.{u2} S (MonoidWithZero.toMulZeroOneClass.{u2} S (Semiring.toMonoidWithZero.{u2} S _inst_7)))) (AddZeroClass.toHasZero.{u3} T (AddMonoid.toAddZeroClass.{u3} T (AddCommMonoid.toAddMonoid.{u3} T _inst_8))) (MulActionWithZero.toSMulWithZero.{u2, u3} S T (Semiring.toMonoidWithZero.{u2} S _inst_7) (AddZeroClass.toHasZero.{u3} T (AddMonoid.toAddZeroClass.{u3} T (AddCommMonoid.toAddMonoid.{u3} T _inst_8))) (Module.toMulActionWithZero.{u2, u3} S T _inst_7 _inst_8 _inst_11)))) S') (SMulZeroClass.toHasSmul.{u1, u3} R T (AddZeroClass.toHasZero.{u3} T (AddMonoid.toAddZeroClass.{u3} T (AddCommMonoid.toAddMonoid.{u3} T _inst_8))) (SMulWithZero.toSmulZeroClass.{u1, u3} R T (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_6))))) (AddZeroClass.toHasZero.{u3} T (AddMonoid.toAddZeroClass.{u3} T (AddCommMonoid.toAddMonoid.{u3} T _inst_8))) (MulActionWithZero.toSMulWithZero.{u1, u3} R T (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_6)) (AddZeroClass.toHasZero.{u3} T (AddMonoid.toAddZeroClass.{u3} T (AddCommMonoid.toAddMonoid.{u3} T _inst_8))) (Module.toMulActionWithZero.{u1, u3} R T (CommSemiring.toSemiring.{u1} R _inst_6) _inst_8 _inst_10))))
but is expected to have type
  forall {R : Type.{u1}} {S : Type.{u2}} {T : Type.{u3}} [_inst_6 : CommSemiring.{u1} R] [_inst_7 : Semiring.{u2} S] [_inst_8 : AddCommMonoid.{u3} T] [_inst_9 : Algebra.{u1, u2} R S _inst_6 _inst_7] [_inst_10 : Module.{u1, u3} R T (CommSemiring.toSemiring.{u1} R _inst_6) _inst_8] [_inst_11 : Module.{u2, u3} S T _inst_7 _inst_8] [_inst_12 : IsScalarTower.{u1, u2, u3} R S T (Algebra.toSMul.{u1, u2} R S _inst_6 _inst_7 _inst_9) (SMulZeroClass.toSMul.{u2, u3} S T (AddMonoid.toZero.{u3} T (AddCommMonoid.toAddMonoid.{u3} T _inst_8)) (SMulWithZero.toSMulZeroClass.{u2, u3} S T (MonoidWithZero.toZero.{u2} S (Semiring.toMonoidWithZero.{u2} S _inst_7)) (AddMonoid.toZero.{u3} T (AddCommMonoid.toAddMonoid.{u3} T _inst_8)) (MulActionWithZero.toSMulWithZero.{u2, u3} S T (Semiring.toMonoidWithZero.{u2} S _inst_7) (AddMonoid.toZero.{u3} T (AddCommMonoid.toAddMonoid.{u3} T _inst_8)) (Module.toMulActionWithZero.{u2, u3} S T _inst_7 _inst_8 _inst_11)))) (SMulZeroClass.toSMul.{u1, u3} R T (AddMonoid.toZero.{u3} T (AddCommMonoid.toAddMonoid.{u3} T _inst_8)) (SMulWithZero.toSMulZeroClass.{u1, u3} R T (CommMonoidWithZero.toZero.{u1} R (CommSemiring.toCommMonoidWithZero.{u1} R _inst_6)) (AddMonoid.toZero.{u3} T (AddCommMonoid.toAddMonoid.{u3} T _inst_8)) (MulActionWithZero.toSMulWithZero.{u1, u3} R T (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_6)) (AddMonoid.toZero.{u3} T (AddCommMonoid.toAddMonoid.{u3} T _inst_8)) (Module.toMulActionWithZero.{u1, u3} R T (CommSemiring.toSemiring.{u1} R _inst_6) _inst_8 _inst_10))))] (S' : Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9), IsScalarTower.{u1, u2, u3} R (Subtype.{succ u2} S (fun (x : S) => Membership.mem.{u2, u2} S (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) S (Subalgebra.instSetLikeSubalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9)) x S')) T (Algebra.toSMul.{u1, u2} R (Subtype.{succ u2} S (fun (x : S) => Membership.mem.{u2, u2} S (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9) S (Subalgebra.instSetLikeSubalgebra.{u1, u2} R S _inst_6 _inst_7 _inst_9)) x S')) _inst_6 (Subalgebra.toSemiring.{u1, u2} R S _inst_6 _inst_7 _inst_9 S') (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u1, u2} R S _inst_6 _inst_7 _inst_9 S')) (Subalgebra.instSMulSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebra.{u1, u2, u3} R S _inst_6 _inst_7 _inst_9 T (SMulZeroClass.toSMul.{u2, u3} S T (AddMonoid.toZero.{u3} T (AddCommMonoid.toAddMonoid.{u3} T _inst_8)) (SMulWithZero.toSMulZeroClass.{u2, u3} S T (MonoidWithZero.toZero.{u2} S (Semiring.toMonoidWithZero.{u2} S _inst_7)) (AddMonoid.toZero.{u3} T (AddCommMonoid.toAddMonoid.{u3} T _inst_8)) (MulActionWithZero.toSMulWithZero.{u2, u3} S T (Semiring.toMonoidWithZero.{u2} S _inst_7) (AddMonoid.toZero.{u3} T (AddCommMonoid.toAddMonoid.{u3} T _inst_8)) (Module.toMulActionWithZero.{u2, u3} S T _inst_7 _inst_8 _inst_11)))) S') (SMulZeroClass.toSMul.{u1, u3} R T (AddMonoid.toZero.{u3} T (AddCommMonoid.toAddMonoid.{u3} T _inst_8)) (SMulWithZero.toSMulZeroClass.{u1, u3} R T (CommMonoidWithZero.toZero.{u1} R (CommSemiring.toCommMonoidWithZero.{u1} R _inst_6)) (AddMonoid.toZero.{u3} T (AddCommMonoid.toAddMonoid.{u3} T _inst_8)) (MulActionWithZero.toSMulWithZero.{u1, u3} R T (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_6)) (AddMonoid.toZero.{u3} T (AddCommMonoid.toAddMonoid.{u3} T _inst_8)) (Module.toMulActionWithZero.{u1, u3} R T (CommSemiring.toSemiring.{u1} R _inst_6) _inst_8 _inst_10))))
Case conversion may be inaccurate. Consider using '#align subalgebra.is_scalar_tower_mid Subalgebra.isScalarTower_midₓ'. -/
instance isScalarTower_mid {R S T : Type _} [CommSemiring R] [Semiring S] [AddCommMonoid T]
    [Algebra R S] [Module R T] [Module S T] [IsScalarTower R S T] (S' : Subalgebra R S) :
    IsScalarTower R S' T :=
  ⟨fun x y z => (smul_assoc _ (y : S) _ : _)⟩
#align subalgebra.is_scalar_tower_mid Subalgebra.isScalarTower_mid

instance [SMul A α] [FaithfulSMul A α] (S : Subalgebra R A) : FaithfulSMul S α :=
  S.toSubsemiring.FaithfulSMul

/-- The action by a subalgebra is the action by the underlying algebra. -/
instance [MulAction A α] (S : Subalgebra R A) : MulAction S α :=
  S.toSubsemiring.MulAction

/-- The action by a subalgebra is the action by the underlying algebra. -/
instance [AddMonoid α] [DistribMulAction A α] (S : Subalgebra R A) : DistribMulAction S α :=
  S.toSubsemiring.DistribMulAction

/-- The action by a subalgebra is the action by the underlying algebra. -/
instance [Zero α] [SMulWithZero A α] (S : Subalgebra R A) : SMulWithZero S α :=
  S.toSubsemiring.SMulWithZero

/-- The action by a subalgebra is the action by the underlying algebra. -/
instance [Zero α] [MulActionWithZero A α] (S : Subalgebra R A) : MulActionWithZero S α :=
  S.toSubsemiring.MulActionWithZero

/- warning: subalgebra.module_left -> Subalgebra.moduleLeft is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {α : Type.{u3}} [_inst_6 : AddCommMonoid.{u3} α] [_inst_7 : Module.{u2, u3} A α _inst_2 _inst_6] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), Module.{u2, u3} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) α (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_6
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {α : Type.{u3}} [_inst_6 : AddCommMonoid.{u3} α] [_inst_7 : Module.{u2, u3} A α _inst_2 _inst_6] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), Module.{u2, u3} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) α (Subalgebra.toSemiring.{u1, u2} R A _inst_1 _inst_2 _inst_3 S) _inst_6
Case conversion may be inaccurate. Consider using '#align subalgebra.module_left Subalgebra.moduleLeftₓ'. -/
/-- The action by a subalgebra is the action by the underlying algebra. -/
instance moduleLeft [AddCommMonoid α] [Module A α] (S : Subalgebra R A) : Module S α :=
  S.toSubsemiring.Module
#align subalgebra.module_left Subalgebra.moduleLeft

/- warning: subalgebra.to_algebra -> Subalgebra.toAlgebra is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {R : Type.{u2}} {A : Type.{u3}} [_inst_6 : CommSemiring.{u2} R] [_inst_7 : CommSemiring.{u3} A] [_inst_8 : Semiring.{u1} α] [_inst_9 : Algebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7)] [_inst_10 : Algebra.{u3, u1} A α _inst_7 _inst_8] (S : Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9), Algebra.{u3, u1} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) A (Subalgebra.setLike.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9)) S) α (Subalgebra.toCommSemiring.{u2, u3} R A _inst_6 _inst_7 _inst_9 S) _inst_8
but is expected to have type
  forall {α : Type.{u1}} {R : Type.{u2}} {A : Type.{u3}} [_inst_6 : CommSemiring.{u2} R] [_inst_7 : CommSemiring.{u3} A] [_inst_8 : Semiring.{u1} α] [_inst_9 : Algebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7)] [_inst_10 : Algebra.{u3, u1} A α _inst_7 _inst_8] (S : Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9), Algebra.{u3, u1} (Subtype.{succ u3} A (fun (x : A) => Membership.mem.{u3, u3} A (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) (SetLike.instMembership.{u3, u3} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) A (Subalgebra.instSetLikeSubalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9)) x S)) α (Subalgebra.toCommSemiring.{u2, u3} R A _inst_6 _inst_7 _inst_9 S) _inst_8
Case conversion may be inaccurate. Consider using '#align subalgebra.to_algebra Subalgebra.toAlgebraₓ'. -/
/-- The action by a subalgebra is the action by the underlying algebra. -/
instance toAlgebra {R A : Type _} [CommSemiring R] [CommSemiring A] [Semiring α] [Algebra R A]
    [Algebra A α] (S : Subalgebra R A) : Algebra S α :=
  Algebra.ofSubsemiring S.toSubsemiring
#align subalgebra.to_algebra Subalgebra.toAlgebra

/- warning: subalgebra.algebra_map_eq -> Subalgebra.algebraMap_eq is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {R : Type.{u2}} {A : Type.{u3}} [_inst_6 : CommSemiring.{u2} R] [_inst_7 : CommSemiring.{u3} A] [_inst_8 : Semiring.{u1} α] [_inst_9 : Algebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7)] [_inst_10 : Algebra.{u3, u1} A α _inst_7 _inst_8] (S : Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9), Eq.{max (succ u3) (succ u1)} (RingHom.{u3, u1} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) A (Subalgebra.setLike.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9)) S) α (Semiring.toNonAssocSemiring.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) A (Subalgebra.setLike.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9)) S) (CommSemiring.toSemiring.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) A (Subalgebra.setLike.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9)) S) (Subalgebra.toCommSemiring.{u2, u3} R A _inst_6 _inst_7 _inst_9 S))) (Semiring.toNonAssocSemiring.{u1} α _inst_8)) (algebraMap.{u3, u1} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) A (Subalgebra.setLike.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9)) S) α (Subalgebra.toCommSemiring.{u2, u3} R A _inst_6 _inst_7 _inst_9 S) _inst_8 (Subalgebra.toAlgebra.{u1, u2, u3} α R A _inst_6 _inst_7 _inst_8 _inst_9 _inst_10 S)) (RingHom.comp.{u3, u3, u1} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) A (Subalgebra.setLike.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9)) S) A α (Semiring.toNonAssocSemiring.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) A (Subalgebra.setLike.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9)) S) (CommSemiring.toSemiring.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) A (Subalgebra.setLike.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9)) S) (Subalgebra.toCommSemiring.{u2, u3} R A _inst_6 _inst_7 _inst_9 S))) (Semiring.toNonAssocSemiring.{u3} A (CommSemiring.toSemiring.{u3} A _inst_7)) (Semiring.toNonAssocSemiring.{u1} α _inst_8) (algebraMap.{u3, u1} A α _inst_7 _inst_8 _inst_10) ((fun (a : Type.{u3}) (b : Type.{u3}) [self : HasLiftT.{succ u3, succ u3} a b] => self.0) (AlgHom.{u2, u3, u3} R (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) A (Subalgebra.setLike.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9)) S) A _inst_6 (Subalgebra.toSemiring.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9 S) (CommSemiring.toSemiring.{u3} A _inst_7) (Subalgebra.algebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9 S) _inst_9) (RingHom.{u3, u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) A (Subalgebra.setLike.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9)) S) A (Semiring.toNonAssocSemiring.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) A (Subalgebra.setLike.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9)) S) (CommSemiring.toSemiring.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) A (Subalgebra.setLike.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9)) S) (Subalgebra.toCommSemiring.{u2, u3} R A _inst_6 _inst_7 _inst_9 S))) (Semiring.toNonAssocSemiring.{u3} A (CommSemiring.toSemiring.{u3} A _inst_7))) (HasLiftT.mk.{succ u3, succ u3} (AlgHom.{u2, u3, u3} R (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) A (Subalgebra.setLike.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9)) S) A _inst_6 (Subalgebra.toSemiring.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9 S) (CommSemiring.toSemiring.{u3} A _inst_7) (Subalgebra.algebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9 S) _inst_9) (RingHom.{u3, u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) A (Subalgebra.setLike.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9)) S) A (Semiring.toNonAssocSemiring.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) A (Subalgebra.setLike.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9)) S) (CommSemiring.toSemiring.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) A (Subalgebra.setLike.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9)) S) (Subalgebra.toCommSemiring.{u2, u3} R A _inst_6 _inst_7 _inst_9 S))) (Semiring.toNonAssocSemiring.{u3} A (CommSemiring.toSemiring.{u3} A _inst_7))) (CoeTCₓ.coe.{succ u3, succ u3} (AlgHom.{u2, u3, u3} R (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) A (Subalgebra.setLike.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9)) S) A _inst_6 (Subalgebra.toSemiring.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9 S) (CommSemiring.toSemiring.{u3} A _inst_7) (Subalgebra.algebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9 S) _inst_9) (RingHom.{u3, u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) A (Subalgebra.setLike.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9)) S) A (Semiring.toNonAssocSemiring.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) A (Subalgebra.setLike.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9)) S) (CommSemiring.toSemiring.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) A (Subalgebra.setLike.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9)) S) (Subalgebra.toCommSemiring.{u2, u3} R A _inst_6 _inst_7 _inst_9 S))) (Semiring.toNonAssocSemiring.{u3} A (CommSemiring.toSemiring.{u3} A _inst_7))) (RingHom.hasCoeT.{u3, u3, u3} (AlgHom.{u2, u3, u3} R (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) A (Subalgebra.setLike.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9)) S) A _inst_6 (Subalgebra.toSemiring.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9 S) (CommSemiring.toSemiring.{u3} A _inst_7) (Subalgebra.algebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9 S) _inst_9) (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) A (Subalgebra.setLike.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9)) S) A (Semiring.toNonAssocSemiring.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) A (Subalgebra.setLike.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9)) S) (CommSemiring.toSemiring.{u3} (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) A (Subalgebra.setLike.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9)) S) (Subalgebra.toCommSemiring.{u2, u3} R A _inst_6 _inst_7 _inst_9 S))) (Semiring.toNonAssocSemiring.{u3} A (CommSemiring.toSemiring.{u3} A _inst_7)) (AlgHomClass.toRingHomClass.{u3, u2, u3, u3} (AlgHom.{u2, u3, u3} R (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) A (Subalgebra.setLike.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9)) S) A _inst_6 (Subalgebra.toSemiring.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9 S) (CommSemiring.toSemiring.{u3} A _inst_7) (Subalgebra.algebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9 S) _inst_9) R (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) A (Subalgebra.setLike.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9)) S) A _inst_6 (Subalgebra.toSemiring.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9 S) (CommSemiring.toSemiring.{u3} A _inst_7) (Subalgebra.algebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9 S) _inst_9 (AlgHom.algHomClass.{u2, u3, u3} R (coeSort.{succ u3, succ (succ u3)} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Subalgebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9) A (Subalgebra.setLike.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9)) S) A _inst_6 (Subalgebra.toSemiring.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9 S) (CommSemiring.toSemiring.{u3} A _inst_7) (Subalgebra.algebra.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9 S) _inst_9))))) (Subalgebra.val.{u2, u3} R A _inst_6 (CommSemiring.toSemiring.{u3} A _inst_7) _inst_9 S)))
but is expected to have type
  forall {α : Type.{u1}} {R : Type.{u3}} {A : Type.{u2}} [_inst_6 : CommSemiring.{u3} R] [_inst_7 : CommSemiring.{u2} A] [_inst_8 : Semiring.{u1} α] [_inst_9 : Algebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7)] [_inst_10 : Algebra.{u2, u1} A α _inst_7 _inst_8] (S : Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9), Eq.{max (succ u1) (succ u2)} (RingHom.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) (SetLike.instMembership.{u2, u2} (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) A (Subalgebra.instSetLikeSubalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9)) x S)) α (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) (SetLike.instMembership.{u2, u2} (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) A (Subalgebra.instSetLikeSubalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9)) x S)) (CommSemiring.toSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) (SetLike.instMembership.{u2, u2} (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) A (Subalgebra.instSetLikeSubalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9)) x S)) (Subalgebra.toCommSemiring.{u3, u2} R A _inst_6 _inst_7 _inst_9 S))) (Semiring.toNonAssocSemiring.{u1} α _inst_8)) (algebraMap.{u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) (SetLike.instMembership.{u2, u2} (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) A (Subalgebra.instSetLikeSubalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9)) x S)) α (Subalgebra.toCommSemiring.{u3, u2} R A _inst_6 _inst_7 _inst_9 S) _inst_8 (Subalgebra.toAlgebra.{u1, u3, u2} α R A _inst_6 _inst_7 _inst_8 _inst_9 _inst_10 S)) (RingHom.comp.{u2, u2, u1} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) (SetLike.instMembership.{u2, u2} (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) A (Subalgebra.instSetLikeSubalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9)) x S)) A α (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) (SetLike.instMembership.{u2, u2} (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) A (Subalgebra.instSetLikeSubalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9)) x S)) (CommSemiring.toSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) (SetLike.instMembership.{u2, u2} (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) A (Subalgebra.instSetLikeSubalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9)) x S)) (Subalgebra.toCommSemiring.{u3, u2} R A _inst_6 _inst_7 _inst_9 S))) (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A _inst_7)) (Semiring.toNonAssocSemiring.{u1} α _inst_8) (algebraMap.{u2, u1} A α _inst_7 _inst_8 _inst_10) (RingHomClass.toRingHom.{u2, u2, u2} (AlgHom.{u3, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) (SetLike.instMembership.{u2, u2} (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) A (Subalgebra.instSetLikeSubalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9)) x S)) A _inst_6 (Subalgebra.toSemiring.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9 S) (CommSemiring.toSemiring.{u2} A _inst_7) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9 S) _inst_9) (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) (SetLike.instMembership.{u2, u2} (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) A (Subalgebra.instSetLikeSubalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9)) x S)) A (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) (SetLike.instMembership.{u2, u2} (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) A (Subalgebra.instSetLikeSubalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9)) x S)) (CommSemiring.toSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) (SetLike.instMembership.{u2, u2} (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) A (Subalgebra.instSetLikeSubalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9)) x S)) (Subalgebra.toCommSemiring.{u3, u2} R A _inst_6 _inst_7 _inst_9 S))) (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A _inst_7)) (AlgHomClass.toRingHomClass.{u2, u3, u2, u2} (AlgHom.{u3, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) (SetLike.instMembership.{u2, u2} (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) A (Subalgebra.instSetLikeSubalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9)) x S)) A _inst_6 (Subalgebra.toSemiring.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9 S) (CommSemiring.toSemiring.{u2} A _inst_7) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9 S) _inst_9) R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) (SetLike.instMembership.{u2, u2} (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) A (Subalgebra.instSetLikeSubalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9)) x S)) A _inst_6 (CommSemiring.toSemiring.{u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) (SetLike.instMembership.{u2, u2} (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) A (Subalgebra.instSetLikeSubalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9)) x S)) (Subalgebra.toCommSemiring.{u3, u2} R A _inst_6 _inst_7 _inst_9 S)) (CommSemiring.toSemiring.{u2} A _inst_7) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9 S) _inst_9 (AlgHom.algHomClass.{u3, u2, u2} R (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) (SetLike.instMembership.{u2, u2} (Subalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9) A (Subalgebra.instSetLikeSubalgebra.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9)) x S)) A _inst_6 (Subalgebra.toSemiring.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9 S) (CommSemiring.toSemiring.{u2} A _inst_7) (Subalgebra.instAlgebraSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebraToSemiring.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9 S) _inst_9)) (Subalgebra.val.{u3, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_9 S)))
Case conversion may be inaccurate. Consider using '#align subalgebra.algebra_map_eq Subalgebra.algebraMap_eqₓ'. -/
theorem algebraMap_eq {R A : Type _} [CommSemiring R] [CommSemiring A] [Semiring α] [Algebra R A]
    [Algebra A α] (S : Subalgebra R A) : algebraMap S α = (algebraMap A α).comp S.val :=
  rfl
#align subalgebra.algebra_map_eq Subalgebra.algebraMap_eq

/- warning: subalgebra.srange_algebra_map -> Subalgebra.rangeS_algebraMap is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_6 : CommSemiring.{u1} R] [_inst_7 : CommSemiring.{u2} A] [_inst_8 : Algebra.{u1, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7)] (S : Subalgebra.{u1, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_8), Eq.{succ u2} (Subsemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A _inst_7))) (RingHom.rangeS.{u2, u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_8) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_8) A (Subalgebra.setLike.{u1, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_8)) S) A (Semiring.toNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_8) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_8) A (Subalgebra.setLike.{u1, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_8)) S) (CommSemiring.toSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_8) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_8) A (Subalgebra.setLike.{u1, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_8)) S) (Subalgebra.toCommSemiring.{u1, u2} R A _inst_6 _inst_7 _inst_8 S))) (Semiring.toNonAssocSemiring.{u2} A (CommSemiring.toSemiring.{u2} A _inst_7)) (algebraMap.{u2, u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_8) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_8) A (Subalgebra.setLike.{u1, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_8)) S) A (Subalgebra.toCommSemiring.{u1, u2} R A _inst_6 _inst_7 _inst_8 S) (CommSemiring.toSemiring.{u2} A _inst_7) (Subalgebra.toAlgebra.{u2, u1, u2} A R A _inst_6 _inst_7 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_8 (Algebra.id.{u2} A _inst_7) S))) (Subalgebra.toSubsemiring.{u1, u2} R A _inst_6 (CommSemiring.toSemiring.{u2} A _inst_7) _inst_8 S)
but is expected to have type
  forall {R : Type.{u2}} {A : Type.{u1}} [_inst_6 : CommSemiring.{u2} R] [_inst_7 : CommSemiring.{u1} A] [_inst_8 : Algebra.{u2, u1} R A _inst_6 (CommSemiring.toSemiring.{u1} A _inst_7)] (S : Subalgebra.{u2, u1} R A _inst_6 (CommSemiring.toSemiring.{u1} A _inst_7) _inst_8), Eq.{succ u1} (Subsemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A (CommSemiring.toSemiring.{u1} A _inst_7))) (RingHom.rangeS.{u1, u1} (Subtype.{succ u1} A (fun (x : A) => Membership.mem.{u1, u1} A (Subalgebra.{u2, u1} R A _inst_6 (CommSemiring.toSemiring.{u1} A _inst_7) _inst_8) (SetLike.instMembership.{u1, u1} (Subalgebra.{u2, u1} R A _inst_6 (CommSemiring.toSemiring.{u1} A _inst_7) _inst_8) A (Subalgebra.instSetLikeSubalgebra.{u2, u1} R A _inst_6 (CommSemiring.toSemiring.{u1} A _inst_7) _inst_8)) x S)) A (Semiring.toNonAssocSemiring.{u1} (Subtype.{succ u1} A (fun (x : A) => Membership.mem.{u1, u1} A (Subalgebra.{u2, u1} R A _inst_6 (CommSemiring.toSemiring.{u1} A _inst_7) _inst_8) (SetLike.instMembership.{u1, u1} (Subalgebra.{u2, u1} R A _inst_6 (CommSemiring.toSemiring.{u1} A _inst_7) _inst_8) A (Subalgebra.instSetLikeSubalgebra.{u2, u1} R A _inst_6 (CommSemiring.toSemiring.{u1} A _inst_7) _inst_8)) x S)) (CommSemiring.toSemiring.{u1} (Subtype.{succ u1} A (fun (x : A) => Membership.mem.{u1, u1} A (Subalgebra.{u2, u1} R A _inst_6 (CommSemiring.toSemiring.{u1} A _inst_7) _inst_8) (SetLike.instMembership.{u1, u1} (Subalgebra.{u2, u1} R A _inst_6 (CommSemiring.toSemiring.{u1} A _inst_7) _inst_8) A (Subalgebra.instSetLikeSubalgebra.{u2, u1} R A _inst_6 (CommSemiring.toSemiring.{u1} A _inst_7) _inst_8)) x S)) (Subalgebra.toCommSemiring.{u2, u1} R A _inst_6 _inst_7 _inst_8 S))) (Semiring.toNonAssocSemiring.{u1} A (CommSemiring.toSemiring.{u1} A _inst_7)) (algebraMap.{u1, u1} (Subtype.{succ u1} A (fun (x : A) => Membership.mem.{u1, u1} A (Subalgebra.{u2, u1} R A _inst_6 (CommSemiring.toSemiring.{u1} A _inst_7) _inst_8) (SetLike.instMembership.{u1, u1} (Subalgebra.{u2, u1} R A _inst_6 (CommSemiring.toSemiring.{u1} A _inst_7) _inst_8) A (Subalgebra.instSetLikeSubalgebra.{u2, u1} R A _inst_6 (CommSemiring.toSemiring.{u1} A _inst_7) _inst_8)) x S)) A (Subalgebra.toCommSemiring.{u2, u1} R A _inst_6 _inst_7 _inst_8 S) (CommSemiring.toSemiring.{u1} A _inst_7) (Subalgebra.toAlgebra.{u1, u2, u1} A R A _inst_6 _inst_7 (CommSemiring.toSemiring.{u1} A _inst_7) _inst_8 (Algebra.id.{u1} A _inst_7) S))) (Subalgebra.toSubsemiring.{u2, u1} R A _inst_6 (CommSemiring.toSemiring.{u1} A _inst_7) _inst_8 S)
Case conversion may be inaccurate. Consider using '#align subalgebra.srange_algebra_map Subalgebra.rangeS_algebraMapₓ'. -/
@[simp]
theorem rangeS_algebraMap {R A : Type _} [CommSemiring R] [CommSemiring A] [Algebra R A]
    (S : Subalgebra R A) : (algebraMap S A).srange = S.toSubsemiring := by
  rw [algebra_map_eq, Algebra.id.map_eq_id, RingHom.id_comp, ← to_subsemiring_subtype,
    Subsemiring.rangeS_subtype]
#align subalgebra.srange_algebra_map Subalgebra.rangeS_algebraMap

/- warning: subalgebra.range_algebra_map -> Subalgebra.range_algebraMap is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_6 : CommRing.{u1} R] [_inst_7 : CommRing.{u2} A] [_inst_8 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_6) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_7))] (S : Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_6) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_7)) _inst_8), Eq.{succ u2} (Subring.{u2} A (CommRing.toRing.{u2} A _inst_7)) (RingHom.range.{u2, u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_6) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_7)) _inst_8) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_6) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_7)) _inst_8) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_6) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_7)) _inst_8)) S) A (Subalgebra.toRing.{u1, u2} R A _inst_6 (CommRing.toRing.{u2} A _inst_7) _inst_8 S) (CommRing.toRing.{u2} A _inst_7) (algebraMap.{u2, u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_6) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_7)) _inst_8) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_6) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_7)) _inst_8) A (Subalgebra.setLike.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_6) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_7)) _inst_8)) S) A (Subalgebra.toCommSemiring.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_6) (CommRing.toCommSemiring.{u2} A _inst_7) _inst_8 S) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_7)) (Subalgebra.toAlgebra.{u2, u1, u2} A R A (CommRing.toCommSemiring.{u1} R _inst_6) (CommRing.toCommSemiring.{u2} A _inst_7) (Ring.toSemiring.{u2} A (CommRing.toRing.{u2} A _inst_7)) _inst_8 (Algebra.id.{u2} A (CommRing.toCommSemiring.{u2} A _inst_7)) S))) (Subalgebra.toSubring.{u1, u2} R A _inst_6 (CommRing.toRing.{u2} A _inst_7) _inst_8 S)
but is expected to have type
  forall {R : Type.{u2}} {A : Type.{u1}} [_inst_6 : CommRing.{u2} R] [_inst_7 : CommRing.{u1} A] [_inst_8 : Algebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_6) (Ring.toSemiring.{u1} A (CommRing.toRing.{u1} A _inst_7))] (S : Subalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_6) (Ring.toSemiring.{u1} A (CommRing.toRing.{u1} A _inst_7)) _inst_8), Eq.{succ u1} (Subring.{u1} A (CommRing.toRing.{u1} A _inst_7)) (RingHom.range.{u1, u1} (Subtype.{succ u1} A (fun (x : A) => Membership.mem.{u1, u1} A (Subalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_6) (Ring.toSemiring.{u1} A (CommRing.toRing.{u1} A _inst_7)) _inst_8) (SetLike.instMembership.{u1, u1} (Subalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_6) (Ring.toSemiring.{u1} A (CommRing.toRing.{u1} A _inst_7)) _inst_8) A (Subalgebra.instSetLikeSubalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_6) (Ring.toSemiring.{u1} A (CommRing.toRing.{u1} A _inst_7)) _inst_8)) x S)) A (Subalgebra.toRing.{u2, u1} R A _inst_6 (CommRing.toRing.{u1} A _inst_7) _inst_8 S) (CommRing.toRing.{u1} A _inst_7) (algebraMap.{u1, u1} (Subtype.{succ u1} A (fun (x : A) => Membership.mem.{u1, u1} A (Subalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_6) (Ring.toSemiring.{u1} A (CommRing.toRing.{u1} A _inst_7)) _inst_8) (SetLike.instMembership.{u1, u1} (Subalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_6) (Ring.toSemiring.{u1} A (CommRing.toRing.{u1} A _inst_7)) _inst_8) A (Subalgebra.instSetLikeSubalgebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_6) (Ring.toSemiring.{u1} A (CommRing.toRing.{u1} A _inst_7)) _inst_8)) x S)) A (Subalgebra.toCommSemiring.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_6) (CommRing.toCommSemiring.{u1} A _inst_7) _inst_8 S) (Ring.toSemiring.{u1} A (CommRing.toRing.{u1} A _inst_7)) (Subalgebra.toAlgebra.{u1, u2, u1} A R A (CommRing.toCommSemiring.{u2} R _inst_6) (CommRing.toCommSemiring.{u1} A _inst_7) (Ring.toSemiring.{u1} A (CommRing.toRing.{u1} A _inst_7)) _inst_8 (Algebra.id.{u1} A (CommRing.toCommSemiring.{u1} A _inst_7)) S))) (Subalgebra.toSubring.{u2, u1} R A _inst_6 (CommRing.toRing.{u1} A _inst_7) _inst_8 S)
Case conversion may be inaccurate. Consider using '#align subalgebra.range_algebra_map Subalgebra.range_algebraMapₓ'. -/
@[simp]
theorem range_algebraMap {R A : Type _} [CommRing R] [CommRing A] [Algebra R A]
    (S : Subalgebra R A) : (algebraMap S A).range = S.toSubring := by
  rw [algebra_map_eq, Algebra.id.map_eq_id, RingHom.id_comp, ← to_subring_subtype,
    Subring.range_subtype]
#align subalgebra.range_algebra_map Subalgebra.range_algebraMap

/- warning: subalgebra.no_zero_smul_divisors_top -> Subalgebra.noZeroSMulDivisors_top is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_6 : NoZeroDivisors.{u2} A (Distrib.toHasMul.{u2} A (NonUnitalNonAssocSemiring.toDistrib.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (MulZeroClass.toHasZero.{u2} A (NonUnitalNonAssocSemiring.toMulZeroClass.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), NoZeroSMulDivisors.{u2, u2} (coeSort.{succ u2, succ (succ u2)} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) S) A (ZeroMemClass.zero.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3) (AddZeroClass.toHasZero.{u2} A (AddMonoid.toAddZeroClass.{u2} A (AddMonoidWithOne.toAddMonoid.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))) (AddSubmonoidClass.to_zeroMemClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (AddMonoid.toAddZeroClass.{u2} A (AddMonoidWithOne.toAddMonoid.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SubsemiringClass.to_addSubmonoidClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Semiring.toNonAssocSemiring.{u2} A _inst_2) (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Subalgebra.subsemiringClass.{u1, u2} R A _inst_1 _inst_2 _inst_3))) S) (MulZeroClass.toHasZero.{u2} A (NonUnitalNonAssocSemiring.toMulZeroClass.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) (Subalgebra.hasSmul.{u1, u2, u2} R A _inst_1 _inst_2 _inst_3 A (Mul.toSMul.{u2} A (Distrib.toHasMul.{u2} A (NonUnitalNonAssocSemiring.toDistrib.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) S)
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] [_inst_6 : NoZeroDivisors.{u2} A (NonUnitalNonAssocSemiring.toMul.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (MonoidWithZero.toZero.{u2} A (Semiring.toMonoidWithZero.{u2} A _inst_2))] (S : Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3), NoZeroSMulDivisors.{u2, u2} (Subtype.{succ u2} A (fun (x : A) => Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) x S)) A (ZeroMemClass.zero.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (MonoidWithZero.toZero.{u2} A (Semiring.toMonoidWithZero.{u2} A _inst_2)) (AddSubmonoidClass.toZeroMemClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (AddMonoid.toAddZeroClass.{u2} A (AddMonoidWithOne.toAddMonoid.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SubsemiringClass.toAddSubmonoidClass.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Semiring.toNonAssocSemiring.{u2} A _inst_2) (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Subalgebra.SubsemiringClass.{u1, u2} R A _inst_1 _inst_2 _inst_3))) S) (MonoidWithZero.toZero.{u2} A (Semiring.toMonoidWithZero.{u2} A _inst_2)) (Subalgebra.instSMulSubtypeMemSubalgebraInstMembershipInstSetLikeSubalgebra.{u1, u2, u2} R A _inst_1 _inst_2 _inst_3 A (SMulZeroClass.toSMul.{u2, u2} A A (MonoidWithZero.toZero.{u2} A (Semiring.toMonoidWithZero.{u2} A _inst_2)) (SMulWithZero.toSMulZeroClass.{u2, u2} A A (MonoidWithZero.toZero.{u2} A (Semiring.toMonoidWithZero.{u2} A _inst_2)) (MonoidWithZero.toZero.{u2} A (Semiring.toMonoidWithZero.{u2} A _inst_2)) (MulZeroClass.toSMulWithZero.{u2} A (NonUnitalNonAssocSemiring.toMulZeroClass.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))) S)
Case conversion may be inaccurate. Consider using '#align subalgebra.no_zero_smul_divisors_top Subalgebra.noZeroSMulDivisors_topₓ'. -/
instance noZeroSMulDivisors_top [NoZeroDivisors A] (S : Subalgebra R A) : NoZeroSMulDivisors S A :=
  ⟨fun c x h =>
    have : (c : A) = 0 ∨ x = 0 := eq_zero_or_eq_zero_of_mul_eq_zero h
    this.imp_left (@Subtype.ext_iff _ _ c 0).mpr⟩
#align subalgebra.no_zero_smul_divisors_top Subalgebra.noZeroSMulDivisors_top

end Actions

section Center

/- warning: set.algebra_map_mem_center -> Set.algebraMap_mem_center is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (r : R), Membership.Mem.{u2, u2} A (Set.{u2} A) (Set.hasMem.{u2} A) (coeFn.{max (succ u1) (succ u2), max (succ u1) (succ u2)} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (fun (_x : RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) => R -> A) (RingHom.hasCoeToFun.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (algebraMap.{u1, u2} R A _inst_1 _inst_2 _inst_3) r) (Set.center.{u2} A (Distrib.toHasMul.{u2} A (NonUnitalNonAssocSemiring.toDistrib.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (r : R), Membership.mem.{u2, u2} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R) => A) r) (Set.{u2} A) (Set.instMembershipSet.{u2} A) (FunLike.coe.{max (succ u1) (succ u2), succ u1, succ u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R (fun (_x : R) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R) => A) _x) (MulHomClass.toFunLike.{max u1 u2, u1, u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R A (NonUnitalNonAssocSemiring.toMul.{u1} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (NonUnitalNonAssocSemiring.toMul.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (NonUnitalRingHomClass.toMulHomClass.{max u1 u2, u1, u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (RingHomClass.toNonUnitalRingHomClass.{max u1 u2, u1, u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2) (RingHom.instRingHomClassRingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (algebraMap.{u1, u2} R A _inst_1 _inst_2 _inst_3) r) (Set.center.{u2} A (NonUnitalNonAssocSemiring.toMul.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))
Case conversion may be inaccurate. Consider using '#align set.algebra_map_mem_center Set.algebraMap_mem_centerₓ'. -/
theorem Set.algebraMap_mem_center (r : R) : algebraMap R A r ∈ Set.center A := by
  simp [Algebra.commutes, Set.mem_center_iff]
#align set.algebra_map_mem_center Set.algebraMap_mem_center

variable (R A)

#print Subalgebra.center /-
/-- The center of an algebra is the set of elements which commute with every element. They form a
subalgebra. -/
def center : Subalgebra R A :=
  { Subsemiring.center A with algebraMap_mem' := Set.algebraMap_mem_center }
#align subalgebra.center Subalgebra.center
-/

/- warning: subalgebra.coe_center -> Subalgebra.coe_center is a dubious translation:
lean 3 declaration is
  forall (R : Type.{u1}) (A : Type.{u2}) [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], Eq.{succ u2} (Set.{u2} A) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Subalgebra.center.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Set.center.{u2} A (Distrib.toHasMul.{u2} A (NonUnitalNonAssocSemiring.toDistrib.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))
but is expected to have type
  forall (R : Type.{u1}) (A : Type.{u2}) [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2], Eq.{succ u2} (Set.{u2} A) (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Subalgebra.center.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (Set.center.{u2} A (NonUnitalNonAssocSemiring.toMul.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))
Case conversion may be inaccurate. Consider using '#align subalgebra.coe_center Subalgebra.coe_centerₓ'. -/
theorem coe_center : (center R A : Set A) = Set.center A :=
  rfl
#align subalgebra.coe_center Subalgebra.coe_center

#print Subalgebra.center_toSubsemiring /-
@[simp]
theorem center_toSubsemiring : (center R A).toSubsemiring = Subsemiring.center A :=
  rfl
#align subalgebra.center_to_subsemiring Subalgebra.center_toSubsemiring
-/

/- warning: subalgebra.center_to_subring -> Subalgebra.center_toSubring is a dubious translation:
lean 3 declaration is
  forall (R : Type.{u1}) (A : Type.{u2}) [_inst_6 : CommRing.{u1} R] [_inst_7 : Ring.{u2} A] [_inst_8 : Algebra.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_6) (Ring.toSemiring.{u2} A _inst_7)], Eq.{succ u2} (Subring.{u2} A _inst_7) (Subalgebra.toSubring.{u1, u2} R A _inst_6 _inst_7 _inst_8 (Subalgebra.center.{u1, u2} R A (CommRing.toCommSemiring.{u1} R _inst_6) (Ring.toSemiring.{u2} A _inst_7) _inst_8)) (Subring.center.{u2} A _inst_7)
but is expected to have type
  forall (R : Type.{u2}) (A : Type.{u1}) [_inst_6 : CommRing.{u2} R] [_inst_7 : Ring.{u1} A] [_inst_8 : Algebra.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_6) (Ring.toSemiring.{u1} A _inst_7)], Eq.{succ u1} (Subring.{u1} A _inst_7) (Subalgebra.toSubring.{u2, u1} R A _inst_6 _inst_7 _inst_8 (Subalgebra.center.{u2, u1} R A (CommRing.toCommSemiring.{u2} R _inst_6) (Ring.toSemiring.{u1} A _inst_7) _inst_8)) (Subring.center.{u1} A _inst_7)
Case conversion may be inaccurate. Consider using '#align subalgebra.center_to_subring Subalgebra.center_toSubringₓ'. -/
@[simp]
theorem center_toSubring (R A : Type _) [CommRing R] [Ring A] [Algebra R A] :
    (center R A).toSubring = Subring.center A :=
  rfl
#align subalgebra.center_to_subring Subalgebra.center_toSubring

/- warning: subalgebra.center_eq_top -> Subalgebra.center_eq_top is a dubious translation:
lean 3 declaration is
  forall (R : Type.{u1}) [_inst_1 : CommSemiring.{u1} R] (A : Type.{u2}) [_inst_6 : CommSemiring.{u2} A] [_inst_7 : Algebra.{u1, u2} R A _inst_1 (CommSemiring.toSemiring.{u2} A _inst_6)], Eq.{succ u2} (Subalgebra.{u1, u2} R A _inst_1 (CommSemiring.toSemiring.{u2} A _inst_6) _inst_7) (Subalgebra.center.{u1, u2} R A _inst_1 (CommSemiring.toSemiring.{u2} A _inst_6) _inst_7) (Top.top.{u2} (Subalgebra.{u1, u2} R A _inst_1 (CommSemiring.toSemiring.{u2} A _inst_6) _inst_7) (CompleteLattice.toHasTop.{u2} (Subalgebra.{u1, u2} R A _inst_1 (CommSemiring.toSemiring.{u2} A _inst_6) _inst_7) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 (CommSemiring.toSemiring.{u2} A _inst_6) _inst_7)))
but is expected to have type
  forall (R : Type.{u2}) [_inst_1 : CommSemiring.{u2} R] (A : Type.{u1}) [_inst_6 : CommSemiring.{u1} A] [_inst_7 : Algebra.{u2, u1} R A _inst_1 (CommSemiring.toSemiring.{u1} A _inst_6)], Eq.{succ u1} (Subalgebra.{u2, u1} R A _inst_1 (CommSemiring.toSemiring.{u1} A _inst_6) _inst_7) (Subalgebra.center.{u2, u1} R A _inst_1 (CommSemiring.toSemiring.{u1} A _inst_6) _inst_7) (Top.top.{u1} (Subalgebra.{u2, u1} R A _inst_1 (CommSemiring.toSemiring.{u1} A _inst_6) _inst_7) (CompleteLattice.toTop.{u1} (Subalgebra.{u2, u1} R A _inst_1 (CommSemiring.toSemiring.{u1} A _inst_6) _inst_7) (Algebra.instCompleteLatticeSubalgebra.{u2, u1} R A _inst_1 (CommSemiring.toSemiring.{u1} A _inst_6) _inst_7)))
Case conversion may be inaccurate. Consider using '#align subalgebra.center_eq_top Subalgebra.center_eq_topₓ'. -/
@[simp]
theorem center_eq_top (A : Type _) [CommSemiring A] [Algebra R A] : center R A = ⊤ :=
  SetLike.coe_injective (Set.center_eq_univ A)
#align subalgebra.center_eq_top Subalgebra.center_eq_top

variable {R A}

instance : CommSemiring (center R A) :=
  Subsemiring.center.commSemiring

instance {A : Type _} [Ring A] [Algebra R A] : CommRing (center R A) :=
  Subring.center.commRing

/- warning: subalgebra.mem_center_iff -> Subalgebra.mem_center_iff is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {a : A}, Iff (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) a (Subalgebra.center.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (forall (b : A), Eq.{succ u2} A (HMul.hMul.{u2, u2, u2} A A A (instHMul.{u2} A (Distrib.toHasMul.{u2} A (NonUnitalNonAssocSemiring.toDistrib.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) b a) (HMul.hMul.{u2, u2, u2} A A A (instHMul.{u2} A (Distrib.toHasMul.{u2} A (NonUnitalNonAssocSemiring.toDistrib.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) a b))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {a : A}, Iff (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) a (Subalgebra.center.{u1, u2} R A _inst_1 _inst_2 _inst_3)) (forall (b : A), Eq.{succ u2} A (HMul.hMul.{u2, u2, u2} A A A (instHMul.{u2} A (NonUnitalNonAssocSemiring.toMul.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) b a) (HMul.hMul.{u2, u2, u2} A A A (instHMul.{u2} A (NonUnitalNonAssocSemiring.toMul.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) a b))
Case conversion may be inaccurate. Consider using '#align subalgebra.mem_center_iff Subalgebra.mem_center_iffₓ'. -/
theorem mem_center_iff {a : A} : a ∈ center R A ↔ ∀ b : A, b * a = a * b :=
  Iff.rfl
#align subalgebra.mem_center_iff Subalgebra.mem_center_iff

end Center

section Centralizer

/- warning: set.algebra_map_mem_centralizer -> Set.algebraMap_mem_centralizer is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {s : Set.{u2} A} (r : R), Membership.Mem.{u2, u2} A (Set.{u2} A) (Set.hasMem.{u2} A) (coeFn.{max (succ u1) (succ u2), max (succ u1) (succ u2)} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (fun (_x : RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) => R -> A) (RingHom.hasCoeToFun.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (algebraMap.{u1, u2} R A _inst_1 _inst_2 _inst_3) r) (Set.centralizer.{u2} A s (Distrib.toHasMul.{u2} A (NonUnitalNonAssocSemiring.toDistrib.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))
but is expected to have type
  forall {R : Type.{u1}} {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {s : Set.{u2} A} (r : R), Membership.mem.{u2, u2} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R) => A) r) (Set.{u2} A) (Set.instMembershipSet.{u2} A) (FunLike.coe.{max (succ u1) (succ u2), succ u1, succ u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R (fun (_x : R) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : R) => A) _x) (MulHomClass.toFunLike.{max u1 u2, u1, u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R A (NonUnitalNonAssocSemiring.toMul.{u1} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (NonUnitalNonAssocSemiring.toMul.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))) (NonUnitalRingHomClass.toMulHomClass.{max u1 u2, u1, u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)) (RingHomClass.toNonUnitalRingHomClass.{max u1 u2, u1, u2} (RingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2)) R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2) (RingHom.instRingHomClassRingHom.{u1, u2} R A (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) (algebraMap.{u1, u2} R A _inst_1 _inst_2 _inst_3) r) (Set.centralizer.{u2} A s (NonUnitalNonAssocSemiring.toMul.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))
Case conversion may be inaccurate. Consider using '#align set.algebra_map_mem_centralizer Set.algebraMap_mem_centralizerₓ'. -/
@[simp]
theorem Set.algebraMap_mem_centralizer {s : Set A} (r : R) : algebraMap R A r ∈ s.centralizer :=
  fun a h => (Algebra.commutes _ _).symm
#align set.algebra_map_mem_centralizer Set.algebraMap_mem_centralizer

variable (R)

#print Subalgebra.centralizer /-
/-- The centralizer of a set as a subalgebra. -/
def centralizer (s : Set A) : Subalgebra R A :=
  { Subsemiring.centralizer s with algebraMap_mem' := Set.algebraMap_mem_centralizer }
#align subalgebra.centralizer Subalgebra.centralizer
-/

/- warning: subalgebra.coe_centralizer -> Subalgebra.coe_centralizer is a dubious translation:
lean 3 declaration is
  forall (R : Type.{u1}) {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (s : Set.{u2} A), Eq.{succ u2} (Set.{u2} A) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Set.{u2} A) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)))) (Subalgebra.centralizer.{u1, u2} R A _inst_1 _inst_2 _inst_3 s)) (Set.centralizer.{u2} A s (Distrib.toHasMul.{u2} A (NonUnitalNonAssocSemiring.toDistrib.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))))
but is expected to have type
  forall (R : Type.{u1}) {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (s : Set.{u2} A), Eq.{succ u2} (Set.{u2} A) (SetLike.coe.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Subalgebra.centralizer.{u1, u2} R A _inst_1 _inst_2 _inst_3 s)) (Set.centralizer.{u2} A s (NonUnitalNonAssocSemiring.toMul.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))
Case conversion may be inaccurate. Consider using '#align subalgebra.coe_centralizer Subalgebra.coe_centralizerₓ'. -/
@[simp, norm_cast]
theorem coe_centralizer (s : Set A) : (centralizer R s : Set A) = s.centralizer :=
  rfl
#align subalgebra.coe_centralizer Subalgebra.coe_centralizer

/- warning: subalgebra.mem_centralizer_iff -> Subalgebra.mem_centralizer_iff is a dubious translation:
lean 3 declaration is
  forall (R : Type.{u1}) {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {s : Set.{u2} A} {z : A}, Iff (Membership.Mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.setLike.{u1, u2} R A _inst_1 _inst_2 _inst_3)) z (Subalgebra.centralizer.{u1, u2} R A _inst_1 _inst_2 _inst_3 s)) (forall (g : A), (Membership.Mem.{u2, u2} A (Set.{u2} A) (Set.hasMem.{u2} A) g s) -> (Eq.{succ u2} A (HMul.hMul.{u2, u2, u2} A A A (instHMul.{u2} A (Distrib.toHasMul.{u2} A (NonUnitalNonAssocSemiring.toDistrib.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) g z) (HMul.hMul.{u2, u2, u2} A A A (instHMul.{u2} A (Distrib.toHasMul.{u2} A (NonUnitalNonAssocSemiring.toDistrib.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2))))) z g)))
but is expected to have type
  forall (R : Type.{u1}) {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] {s : Set.{u2} A} {z : A}, Iff (Membership.mem.{u2, u2} A (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (SetLike.instMembership.{u2, u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) A (Subalgebra.instSetLikeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3)) z (Subalgebra.centralizer.{u1, u2} R A _inst_1 _inst_2 _inst_3 s)) (forall (g : A), (Membership.mem.{u2, u2} A (Set.{u2} A) (Set.instMembershipSet.{u2} A) g s) -> (Eq.{succ u2} A (HMul.hMul.{u2, u2, u2} A A A (instHMul.{u2} A (NonUnitalNonAssocSemiring.toMul.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) g z) (HMul.hMul.{u2, u2, u2} A A A (instHMul.{u2} A (NonUnitalNonAssocSemiring.toMul.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_2)))) z g)))
Case conversion may be inaccurate. Consider using '#align subalgebra.mem_centralizer_iff Subalgebra.mem_centralizer_iffₓ'. -/
theorem mem_centralizer_iff {s : Set A} {z : A} : z ∈ centralizer R s ↔ ∀ g ∈ s, g * z = z * g :=
  Iff.rfl
#align subalgebra.mem_centralizer_iff Subalgebra.mem_centralizer_iff

/- warning: subalgebra.centralizer_le -> Subalgebra.centralizer_le is a dubious translation:
lean 3 declaration is
  forall (R : Type.{u1}) {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (s : Set.{u2} A) (t : Set.{u2} A), (HasSubset.Subset.{u2} (Set.{u2} A) (Set.hasSubset.{u2} A) s t) -> (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteSemilatticeInf.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.Subalgebra.completeLattice.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (Subalgebra.centralizer.{u1, u2} R A _inst_1 _inst_2 _inst_3 t) (Subalgebra.centralizer.{u1, u2} R A _inst_1 _inst_2 _inst_3 s))
but is expected to have type
  forall (R : Type.{u1}) {A : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : Semiring.{u2} A] [_inst_3 : Algebra.{u1, u2} R A _inst_1 _inst_2] (s : Set.{u2} A) (t : Set.{u2} A), (HasSubset.Subset.{u2} (Set.{u2} A) (Set.instHasSubsetSet.{u2} A) s t) -> (LE.le.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Preorder.toLE.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (PartialOrder.toPreorder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (OmegaCompletePartialOrder.toPartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (CompleteLattice.instOmegaCompletePartialOrder.{u2} (Subalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3) (Algebra.instCompleteLatticeSubalgebra.{u1, u2} R A _inst_1 _inst_2 _inst_3))))) (Subalgebra.centralizer.{u1, u2} R A _inst_1 _inst_2 _inst_3 t) (Subalgebra.centralizer.{u1, u2} R A _inst_1 _inst_2 _inst_3 s))
Case conversion may be inaccurate. Consider using '#align subalgebra.centralizer_le Subalgebra.centralizer_leₓ'. -/
theorem centralizer_le (s t : Set A) (h : s ⊆ t) : centralizer R t ≤ centralizer R s :=
  Set.centralizer_subset h
#align subalgebra.centralizer_le Subalgebra.centralizer_le

#print Subalgebra.centralizer_univ /-
@[simp]
theorem centralizer_univ : centralizer R Set.univ = center R A :=
  SetLike.ext' (Set.centralizer_univ A)
#align subalgebra.centralizer_univ Subalgebra.centralizer_univ
-/

end Centralizer

/- warning: subalgebra.mem_of_finset_sum_eq_one_of_pow_smul_mem -> Subalgebra.mem_of_finset_sum_eq_one_of_pow_smul_mem is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : CommSemiring.{u1} R] {S : Type.{u2}} [_inst_6 : CommRing.{u2} S] [_inst_7 : Algebra.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6))] (S' : Subalgebra.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) {ι : Type.{u3}} (ι' : Finset.{u3} ι) (s : ι -> S) (l : ι -> S), (Eq.{succ u2} S (Finset.sum.{u2, u3} S ι (AddCommGroup.toAddCommMonoid.{u2} S (NonUnitalNonAssocRing.toAddCommGroup.{u2} S (NonAssocRing.toNonUnitalNonAssocRing.{u2} S (Ring.toNonAssocRing.{u2} S (CommRing.toRing.{u2} S _inst_6))))) ι' (fun (i : ι) => HMul.hMul.{u2, u2, u2} S S S (instHMul.{u2} S (Distrib.toHasMul.{u2} S (Ring.toDistrib.{u2} S (CommRing.toRing.{u2} S _inst_6)))) (l i) (s i))) (OfNat.ofNat.{u2} S 1 (OfNat.mk.{u2} S 1 (One.one.{u2} S (AddMonoidWithOne.toOne.{u2} S (AddGroupWithOne.toAddMonoidWithOne.{u2} S (NonAssocRing.toAddGroupWithOne.{u2} S (Ring.toNonAssocRing.{u2} S (CommRing.toRing.{u2} S _inst_6))))))))) -> (forall (i : ι), Membership.Mem.{u2, u2} S (Subalgebra.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) S (Subalgebra.setLike.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7)) (s i) S') -> (forall (i : ι), Membership.Mem.{u2, u2} S (Subalgebra.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) S (Subalgebra.setLike.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7)) (l i) S') -> (forall (x : S), (forall (i : ι), Exists.{1} Nat (fun (n : Nat) => Membership.Mem.{u2, u2} S (Subalgebra.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) S (Subalgebra.setLike.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7)) (SMul.smul.{u2, u2} S S (Mul.toSMul.{u2} S (Distrib.toHasMul.{u2} S (Ring.toDistrib.{u2} S (CommRing.toRing.{u2} S _inst_6)))) (HPow.hPow.{u2, 0, u2} S Nat S (instHPow.{u2, 0} S Nat (Monoid.Pow.{u2} S (Ring.toMonoid.{u2} S (CommRing.toRing.{u2} S _inst_6)))) (s i) n) x) S')) -> (Membership.Mem.{u2, u2} S (Subalgebra.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) S (Subalgebra.setLike.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7)) x S'))
but is expected to have type
  forall {R : Type.{u3}} [_inst_1 : CommSemiring.{u3} R] {S : Type.{u2}} [_inst_6 : CommRing.{u2} S] [_inst_7 : Algebra.{u3, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6))] (S' : Subalgebra.{u3, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) {ι : Type.{u1}} (ι' : Finset.{u1} ι) (s : ι -> S) (l : ι -> S), (Eq.{succ u2} S (Finset.sum.{u2, u1} S ι (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} S (NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.{u2} S (NonAssocRing.toNonUnitalNonAssocRing.{u2} S (Ring.toNonAssocRing.{u2} S (CommRing.toRing.{u2} S _inst_6))))) ι' (fun (i : ι) => HMul.hMul.{u2, u2, u2} S S S (instHMul.{u2} S (NonUnitalNonAssocRing.toMul.{u2} S (NonAssocRing.toNonUnitalNonAssocRing.{u2} S (Ring.toNonAssocRing.{u2} S (CommRing.toRing.{u2} S _inst_6))))) (l i) (s i))) (OfNat.ofNat.{u2} S 1 (One.toOfNat1.{u2} S (NonAssocRing.toOne.{u2} S (Ring.toNonAssocRing.{u2} S (CommRing.toRing.{u2} S _inst_6)))))) -> (forall (i : ι), Membership.mem.{u2, u2} S (Subalgebra.{u3, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) (SetLike.instMembership.{u2, u2} (Subalgebra.{u3, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) S (Subalgebra.instSetLikeSubalgebra.{u3, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7)) (s i) S') -> (forall (i : ι), Membership.mem.{u2, u2} S (Subalgebra.{u3, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) (SetLike.instMembership.{u2, u2} (Subalgebra.{u3, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) S (Subalgebra.instSetLikeSubalgebra.{u3, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7)) (l i) S') -> (forall (x : S), (forall (i : ι), Exists.{1} Nat (fun (n : Nat) => Membership.mem.{u2, u2} S (Subalgebra.{u3, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) (SetLike.instMembership.{u2, u2} (Subalgebra.{u3, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) S (Subalgebra.instSetLikeSubalgebra.{u3, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7)) (HSMul.hSMul.{u2, u2, u2} S S S (instHSMul.{u2, u2} S S (Algebra.toSMul.{u2, u2} S S (CommRing.toCommSemiring.{u2} S _inst_6) (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) (Algebra.id.{u2} S (CommRing.toCommSemiring.{u2} S _inst_6)))) (HPow.hPow.{u2, 0, u2} S Nat S (instHPow.{u2, 0} S Nat (Monoid.Pow.{u2} S (MonoidWithZero.toMonoid.{u2} S (Semiring.toMonoidWithZero.{u2} S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)))))) (s i) n) x) S')) -> (Membership.mem.{u2, u2} S (Subalgebra.{u3, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) (SetLike.instMembership.{u2, u2} (Subalgebra.{u3, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) S (Subalgebra.instSetLikeSubalgebra.{u3, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7)) x S'))
Case conversion may be inaccurate. Consider using '#align subalgebra.mem_of_finset_sum_eq_one_of_pow_smul_mem Subalgebra.mem_of_finset_sum_eq_one_of_pow_smul_memₓ'. -/
/-- Suppose we are given `∑ i, lᵢ * sᵢ = 1` in `S`, and `S'` a subalgebra of `S` that contains
`lᵢ` and `sᵢ`. To check that an `x : S` falls in `S'`, we only need to show that
`r ^ n • x ∈ M'` for some `n` for each `r : s`. -/
theorem mem_of_finset_sum_eq_one_of_pow_smul_mem {S : Type _} [CommRing S] [Algebra R S]
    (S' : Subalgebra R S) {ι : Type _} (ι' : Finset ι) (s : ι → S) (l : ι → S)
    (e : (∑ i in ι', l i * s i) = 1) (hs : ∀ i, s i ∈ S') (hl : ∀ i, l i ∈ S') (x : S)
    (H : ∀ i, ∃ n : ℕ, (s i ^ n : S) • x ∈ S') : x ∈ S' := by
  classical
    suffices x ∈ (Algebra.ofId S' S).range.toSubmodule
      by
      obtain ⟨x, rfl⟩ := this
      exact x.2
    choose n hn using H
    let s' : ι → S' := fun x => ⟨s x, hs x⟩
    have : Ideal.span (s' '' ι') = ⊤ :=
      by
      rw [Ideal.eq_top_iff_one, Ideal.span, Finsupp.mem_span_iff_total]
      refine'
        ⟨(Finsupp.ofSupportFinite (fun i : ι' => (⟨l i, hl i⟩ : S')) (Set.toFinite _)).mapDomain
            fun i => ⟨s' i, i, i.2, rfl⟩,
          S'.to_submodule.injective_subtype _⟩
      rw [Finsupp.total_mapDomain, Finsupp.total_apply, Finsupp.sum_fintype, map_sum,
        Submodule.subtype_apply, Subalgebra.coe_one]
      · exact finset.sum_attach.trans e
      · exact fun _ => zero_smul _ _
    let N := ι'.sup n
    have hs' := Ideal.span_pow_eq_top _ this N
    apply (Algebra.ofId S' S).range.toSubmodule.mem_of_span_top_of_smul_mem _ hs'
    rintro ⟨_, _, ⟨i, hi, rfl⟩, rfl⟩
    change s i ^ N • x ∈ _
    rw [← tsub_add_cancel_of_le (show n i ≤ N from Finset.le_sup hi), pow_add, mul_smul]
    refine' Submodule.smul_mem _ (⟨_, pow_mem (hs i) _⟩ : S') _
    exact ⟨⟨_, hn i⟩, rfl⟩
#align subalgebra.mem_of_finset_sum_eq_one_of_pow_smul_mem Subalgebra.mem_of_finset_sum_eq_one_of_pow_smul_mem

/- warning: subalgebra.mem_of_span_eq_top_of_smul_pow_mem -> Subalgebra.mem_of_span_eq_top_of_smul_pow_mem is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : CommSemiring.{u1} R] {S : Type.{u2}} [_inst_6 : CommRing.{u2} S] [_inst_7 : Algebra.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6))] (S' : Subalgebra.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) (s : Set.{u2} S) (l : Finsupp.{u2, u2} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} S) Type.{u2} (Set.hasCoeToSort.{u2} S) s) S (MulZeroClass.toHasZero.{u2} S (NonUnitalNonAssocSemiring.toMulZeroClass.{u2} S (NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.{u2} S (NonAssocRing.toNonUnitalNonAssocRing.{u2} S (Ring.toNonAssocRing.{u2} S (CommRing.toRing.{u2} S _inst_6))))))), (Eq.{succ u2} S (coeFn.{succ u2, succ u2} (LinearMap.{u2, u2, u2, u2} S S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) (RingHom.id.{u2} S (Semiring.toNonAssocSemiring.{u2} S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)))) (Finsupp.{u2, u2} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} S) Type.{u2} (Set.hasCoeToSort.{u2} S) s) S (MulZeroClass.toHasZero.{u2} S (NonUnitalNonAssocSemiring.toMulZeroClass.{u2} S (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} S (Semiring.toNonAssocSemiring.{u2} S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6))))))) S (Finsupp.addCommMonoid.{u2, u2} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} S) Type.{u2} (Set.hasCoeToSort.{u2} S) s) S (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} S (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} S (Semiring.toNonAssocSemiring.{u2} S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)))))) (AddCommGroup.toAddCommMonoid.{u2} S (NonUnitalNonAssocRing.toAddCommGroup.{u2} S (NonAssocRing.toNonUnitalNonAssocRing.{u2} S (Ring.toNonAssocRing.{u2} S (CommRing.toRing.{u2} S _inst_6))))) (Finsupp.module.{u2, u2, u2} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} S) Type.{u2} (Set.hasCoeToSort.{u2} S) s) S S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} S (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} S (Semiring.toNonAssocSemiring.{u2} S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6))))) (Semiring.toModule.{u2} S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)))) (Semiring.toModule.{u2} S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)))) (fun (_x : LinearMap.{u2, u2, u2, u2} S S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) (RingHom.id.{u2} S (Semiring.toNonAssocSemiring.{u2} S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)))) (Finsupp.{u2, u2} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} S) Type.{u2} (Set.hasCoeToSort.{u2} S) s) S (MulZeroClass.toHasZero.{u2} S (NonUnitalNonAssocSemiring.toMulZeroClass.{u2} S (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} S (Semiring.toNonAssocSemiring.{u2} S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6))))))) S (Finsupp.addCommMonoid.{u2, u2} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} S) Type.{u2} (Set.hasCoeToSort.{u2} S) s) S (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} S (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} S (Semiring.toNonAssocSemiring.{u2} S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)))))) (AddCommGroup.toAddCommMonoid.{u2} S (NonUnitalNonAssocRing.toAddCommGroup.{u2} S (NonAssocRing.toNonUnitalNonAssocRing.{u2} S (Ring.toNonAssocRing.{u2} S (CommRing.toRing.{u2} S _inst_6))))) (Finsupp.module.{u2, u2, u2} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} S) Type.{u2} (Set.hasCoeToSort.{u2} S) s) S S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} S (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} S (Semiring.toNonAssocSemiring.{u2} S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6))))) (Semiring.toModule.{u2} S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)))) (Semiring.toModule.{u2} S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)))) => (Finsupp.{u2, u2} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} S) Type.{u2} (Set.hasCoeToSort.{u2} S) s) S (MulZeroClass.toHasZero.{u2} S (NonUnitalNonAssocSemiring.toMulZeroClass.{u2} S (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} S (Semiring.toNonAssocSemiring.{u2} S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6))))))) -> S) (LinearMap.hasCoeToFun.{u2, u2, u2, u2} S S (Finsupp.{u2, u2} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} S) Type.{u2} (Set.hasCoeToSort.{u2} S) s) S (MulZeroClass.toHasZero.{u2} S (NonUnitalNonAssocSemiring.toMulZeroClass.{u2} S (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} S (Semiring.toNonAssocSemiring.{u2} S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6))))))) S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) (Finsupp.addCommMonoid.{u2, u2} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} S) Type.{u2} (Set.hasCoeToSort.{u2} S) s) S (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} S (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} S (Semiring.toNonAssocSemiring.{u2} S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)))))) (AddCommGroup.toAddCommMonoid.{u2} S (NonUnitalNonAssocRing.toAddCommGroup.{u2} S (NonAssocRing.toNonUnitalNonAssocRing.{u2} S (Ring.toNonAssocRing.{u2} S (CommRing.toRing.{u2} S _inst_6))))) (Finsupp.module.{u2, u2, u2} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} S) Type.{u2} (Set.hasCoeToSort.{u2} S) s) S S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} S (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} S (Semiring.toNonAssocSemiring.{u2} S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6))))) (Semiring.toModule.{u2} S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)))) (Semiring.toModule.{u2} S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6))) (RingHom.id.{u2} S (Semiring.toNonAssocSemiring.{u2} S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6))))) (Finsupp.total.{u2, u2, u2} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} S) Type.{u2} (Set.hasCoeToSort.{u2} S) s) S S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) (AddCommGroup.toAddCommMonoid.{u2} S (NonUnitalNonAssocRing.toAddCommGroup.{u2} S (NonAssocRing.toNonUnitalNonAssocRing.{u2} S (Ring.toNonAssocRing.{u2} S (CommRing.toRing.{u2} S _inst_6))))) (Semiring.toModule.{u2} S (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6))) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Set.{u2} S) Type.{u2} (Set.hasCoeToSort.{u2} S) s) S (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} S) Type.{u2} (Set.hasCoeToSort.{u2} S) s) S (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} S) Type.{u2} (Set.hasCoeToSort.{u2} S) s) S (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} S) Type.{u2} (Set.hasCoeToSort.{u2} S) s) S (coeSubtype.{succ u2} S (fun (x : S) => Membership.Mem.{u2, u2} S (Set.{u2} S) (Set.hasMem.{u2} S) x s))))))) l) (OfNat.ofNat.{u2} S 1 (OfNat.mk.{u2} S 1 (One.one.{u2} S (AddMonoidWithOne.toOne.{u2} S (AddGroupWithOne.toAddMonoidWithOne.{u2} S (NonAssocRing.toAddGroupWithOne.{u2} S (Ring.toNonAssocRing.{u2} S (CommRing.toRing.{u2} S _inst_6))))))))) -> (HasSubset.Subset.{u2} (Set.{u2} S) (Set.hasSubset.{u2} S) s ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (Subalgebra.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) (Set.{u2} S) (HasLiftT.mk.{succ u2, succ u2} (Subalgebra.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) (Set.{u2} S) (CoeTCₓ.coe.{succ u2, succ u2} (Subalgebra.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) (Set.{u2} S) (SetLike.Set.hasCoeT.{u2, u2} (Subalgebra.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) S (Subalgebra.setLike.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7)))) S')) -> (forall (i : coeSort.{succ u2, succ (succ u2)} (Set.{u2} S) Type.{u2} (Set.hasCoeToSort.{u2} S) s), Membership.Mem.{u2, u2} S (Subalgebra.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) S (Subalgebra.setLike.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7)) (coeFn.{succ u2, succ u2} (Finsupp.{u2, u2} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} S) Type.{u2} (Set.hasCoeToSort.{u2} S) s) S (MulZeroClass.toHasZero.{u2} S (NonUnitalNonAssocSemiring.toMulZeroClass.{u2} S (NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.{u2} S (NonAssocRing.toNonUnitalNonAssocRing.{u2} S (Ring.toNonAssocRing.{u2} S (CommRing.toRing.{u2} S _inst_6))))))) (fun (_x : Finsupp.{u2, u2} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} S) Type.{u2} (Set.hasCoeToSort.{u2} S) s) S (MulZeroClass.toHasZero.{u2} S (NonUnitalNonAssocSemiring.toMulZeroClass.{u2} S (NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.{u2} S (NonAssocRing.toNonUnitalNonAssocRing.{u2} S (Ring.toNonAssocRing.{u2} S (CommRing.toRing.{u2} S _inst_6))))))) => (coeSort.{succ u2, succ (succ u2)} (Set.{u2} S) Type.{u2} (Set.hasCoeToSort.{u2} S) s) -> S) (Finsupp.coeFun.{u2, u2} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} S) Type.{u2} (Set.hasCoeToSort.{u2} S) s) S (MulZeroClass.toHasZero.{u2} S (NonUnitalNonAssocSemiring.toMulZeroClass.{u2} S (NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.{u2} S (NonAssocRing.toNonUnitalNonAssocRing.{u2} S (Ring.toNonAssocRing.{u2} S (CommRing.toRing.{u2} S _inst_6))))))) l i) S') -> (forall (x : S), (forall (r : coeSort.{succ u2, succ (succ u2)} (Set.{u2} S) Type.{u2} (Set.hasCoeToSort.{u2} S) s), Exists.{1} Nat (fun (n : Nat) => Membership.Mem.{u2, u2} S (Subalgebra.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) S (Subalgebra.setLike.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7)) (SMul.smul.{u2, u2} S S (Mul.toSMul.{u2} S (Distrib.toHasMul.{u2} S (Ring.toDistrib.{u2} S (CommRing.toRing.{u2} S _inst_6)))) (HPow.hPow.{u2, 0, u2} S Nat S (instHPow.{u2, 0} S Nat (Monoid.Pow.{u2} S (Ring.toMonoid.{u2} S (CommRing.toRing.{u2} S _inst_6)))) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Set.{u2} S) Type.{u2} (Set.hasCoeToSort.{u2} S) s) S (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} S) Type.{u2} (Set.hasCoeToSort.{u2} S) s) S (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} S) Type.{u2} (Set.hasCoeToSort.{u2} S) s) S (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Set.{u2} S) Type.{u2} (Set.hasCoeToSort.{u2} S) s) S (coeSubtype.{succ u2} S (fun (x : S) => Membership.Mem.{u2, u2} S (Set.{u2} S) (Set.hasMem.{u2} S) x s))))) r) n) x) S')) -> (Membership.Mem.{u2, u2} S (Subalgebra.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) (SetLike.hasMem.{u2, u2} (Subalgebra.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7) S (Subalgebra.setLike.{u1, u2} R S _inst_1 (Ring.toSemiring.{u2} S (CommRing.toRing.{u2} S _inst_6)) _inst_7)) x S'))
but is expected to have type
  forall {R : Type.{u2}} [_inst_1 : CommSemiring.{u2} R] {S : Type.{u1}} [_inst_6 : CommRing.{u1} S] [_inst_7 : Algebra.{u2, u1} R S _inst_1 (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6))] (S' : Subalgebra.{u2, u1} R S _inst_1 (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6)) _inst_7) (s : Set.{u1} S) (l : Finsupp.{u1, u1} (Set.Elem.{u1} S s) S (CommMonoidWithZero.toZero.{u1} S (CommSemiring.toCommMonoidWithZero.{u1} S (CommRing.toCommSemiring.{u1} S _inst_6)))), (Eq.{succ u1} ((fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : Finsupp.{u1, u1} (Set.Elem.{u1} S s) S (MonoidWithZero.toZero.{u1} S (Semiring.toMonoidWithZero.{u1} S (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6))))) => S) l) (FunLike.coe.{succ u1, succ u1, succ u1} (LinearMap.{u1, u1, u1, u1} S S (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6)) (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6)) (RingHom.id.{u1} S (Semiring.toNonAssocSemiring.{u1} S (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6)))) (Finsupp.{u1, u1} (Set.Elem.{u1} S s) S (MonoidWithZero.toZero.{u1} S (Semiring.toMonoidWithZero.{u1} S (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6))))) S (Finsupp.addCommMonoid.{u1, u1} (Set.Elem.{u1} S s) S (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} S (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} S (Semiring.toNonAssocSemiring.{u1} S (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6)))))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} S (NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.{u1} S (NonAssocRing.toNonUnitalNonAssocRing.{u1} S (Ring.toNonAssocRing.{u1} S (CommRing.toRing.{u1} S _inst_6))))) (Finsupp.module.{u1, u1, u1} (Set.Elem.{u1} S s) S S (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} S (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} S (Semiring.toNonAssocSemiring.{u1} S (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6))))) (Semiring.toModule.{u1} S (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6)))) (_private.Mathlib.RingTheory.Ideal.Operations.0.Ideal.instModuleToSemiringToAddCommMonoidToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonUnitalRingToNonUnitalCommRing.{u1, u1} S S (CommRing.toCommSemiring.{u1} S _inst_6) _inst_6 (Algebra.id.{u1} S (CommRing.toCommSemiring.{u1} S _inst_6)))) (Finsupp.{u1, u1} (Set.Elem.{u1} S s) S (MonoidWithZero.toZero.{u1} S (Semiring.toMonoidWithZero.{u1} S (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6))))) (fun (_x : Finsupp.{u1, u1} (Set.Elem.{u1} S s) S (MonoidWithZero.toZero.{u1} S (Semiring.toMonoidWithZero.{u1} S (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6))))) => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : Finsupp.{u1, u1} (Set.Elem.{u1} S s) S (MonoidWithZero.toZero.{u1} S (Semiring.toMonoidWithZero.{u1} S (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6))))) => S) _x) (LinearMap.instFunLikeLinearMap.{u1, u1, u1, u1} S S (Finsupp.{u1, u1} (Set.Elem.{u1} S s) S (MonoidWithZero.toZero.{u1} S (Semiring.toMonoidWithZero.{u1} S (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6))))) S (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6)) (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6)) (Finsupp.addCommMonoid.{u1, u1} (Set.Elem.{u1} S s) S (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} S (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} S (Semiring.toNonAssocSemiring.{u1} S (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6)))))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} S (NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.{u1} S (NonAssocRing.toNonUnitalNonAssocRing.{u1} S (Ring.toNonAssocRing.{u1} S (CommRing.toRing.{u1} S _inst_6))))) (Finsupp.module.{u1, u1, u1} (Set.Elem.{u1} S s) S S (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} S (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} S (Semiring.toNonAssocSemiring.{u1} S (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6))))) (Semiring.toModule.{u1} S (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6)))) (_private.Mathlib.RingTheory.Ideal.Operations.0.Ideal.instModuleToSemiringToAddCommMonoidToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonUnitalRingToNonUnitalCommRing.{u1, u1} S S (CommRing.toCommSemiring.{u1} S _inst_6) _inst_6 (Algebra.id.{u1} S (CommRing.toCommSemiring.{u1} S _inst_6))) (RingHom.id.{u1} S (Semiring.toNonAssocSemiring.{u1} S (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6))))) (Finsupp.total.{u1, u1, u1} (Set.Elem.{u1} S s) S S (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6)) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} S (NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.{u1} S (NonAssocRing.toNonUnitalNonAssocRing.{u1} S (Ring.toNonAssocRing.{u1} S (CommRing.toRing.{u1} S _inst_6))))) (_private.Mathlib.RingTheory.Ideal.Operations.0.Ideal.instModuleToSemiringToAddCommMonoidToNonUnitalNonAssocSemiringToNonUnitalNonAssocRingToNonUnitalRingToNonUnitalCommRing.{u1, u1} S S (CommRing.toCommSemiring.{u1} S _inst_6) _inst_6 (Algebra.id.{u1} S (CommRing.toCommSemiring.{u1} S _inst_6))) (Subtype.val.{succ u1} S (fun (x : S) => Membership.mem.{u1, u1} S (Set.{u1} S) (Set.instMembershipSet.{u1} S) x s))) l) (OfNat.ofNat.{u1} ((fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : Finsupp.{u1, u1} (Set.Elem.{u1} S s) S (MonoidWithZero.toZero.{u1} S (Semiring.toMonoidWithZero.{u1} S (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6))))) => S) l) 1 (One.toOfNat1.{u1} ((fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : Finsupp.{u1, u1} (Set.Elem.{u1} S s) S (MonoidWithZero.toZero.{u1} S (Semiring.toMonoidWithZero.{u1} S (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6))))) => S) l) (NonAssocRing.toOne.{u1} ((fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : Finsupp.{u1, u1} (Set.Elem.{u1} S s) S (MonoidWithZero.toZero.{u1} S (Semiring.toMonoidWithZero.{u1} S (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6))))) => S) l) (Ring.toNonAssocRing.{u1} ((fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : Finsupp.{u1, u1} (Set.Elem.{u1} S s) S (MonoidWithZero.toZero.{u1} S (Semiring.toMonoidWithZero.{u1} S (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6))))) => S) l) (CommRing.toRing.{u1} ((fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : Finsupp.{u1, u1} (Set.Elem.{u1} S s) S (MonoidWithZero.toZero.{u1} S (Semiring.toMonoidWithZero.{u1} S (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6))))) => S) l) _inst_6)))))) -> (HasSubset.Subset.{u1} (Set.{u1} S) (Set.instHasSubsetSet.{u1} S) s (SetLike.coe.{u1, u1} (Subalgebra.{u2, u1} R S _inst_1 (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6)) _inst_7) S (Subalgebra.instSetLikeSubalgebra.{u2, u1} R S _inst_1 (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6)) _inst_7) S')) -> (forall (i : Set.Elem.{u1} S s), Membership.mem.{u1, u1} ((fun (x._@.Mathlib.Data.Finsupp.Defs._hyg.779 : Set.Elem.{u1} S s) => S) i) (Subalgebra.{u2, u1} R S _inst_1 (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6)) _inst_7) (SetLike.instMembership.{u1, u1} (Subalgebra.{u2, u1} R S _inst_1 (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6)) _inst_7) S (Subalgebra.instSetLikeSubalgebra.{u2, u1} R S _inst_1 (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6)) _inst_7)) (FunLike.coe.{succ u1, succ u1, succ u1} (Finsupp.{u1, u1} (Set.Elem.{u1} S s) S (CommMonoidWithZero.toZero.{u1} S (CommSemiring.toCommMonoidWithZero.{u1} S (CommRing.toCommSemiring.{u1} S _inst_6)))) (Set.Elem.{u1} S s) (fun (_x : Set.Elem.{u1} S s) => (fun (x._@.Mathlib.Data.Finsupp.Defs._hyg.779 : Set.Elem.{u1} S s) => S) _x) (Finsupp.funLike.{u1, u1} (Set.Elem.{u1} S s) S (CommMonoidWithZero.toZero.{u1} S (CommSemiring.toCommMonoidWithZero.{u1} S (CommRing.toCommSemiring.{u1} S _inst_6)))) l i) S') -> (forall (x : S), (forall (r : Set.Elem.{u1} S s), Exists.{1} Nat (fun (n : Nat) => Membership.mem.{u1, u1} S (Subalgebra.{u2, u1} R S _inst_1 (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6)) _inst_7) (SetLike.instMembership.{u1, u1} (Subalgebra.{u2, u1} R S _inst_1 (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6)) _inst_7) S (Subalgebra.instSetLikeSubalgebra.{u2, u1} R S _inst_1 (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6)) _inst_7)) (HSMul.hSMul.{u1, u1, u1} S S S (instHSMul.{u1, u1} S S (Algebra.toSMul.{u1, u1} S S (CommRing.toCommSemiring.{u1} S _inst_6) (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6)) (Algebra.id.{u1} S (CommRing.toCommSemiring.{u1} S _inst_6)))) (HPow.hPow.{u1, 0, u1} S Nat S (instHPow.{u1, 0} S Nat (Monoid.Pow.{u1} S (MonoidWithZero.toMonoid.{u1} S (Semiring.toMonoidWithZero.{u1} S (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6)))))) (Subtype.val.{succ u1} S (fun (x : S) => Membership.mem.{u1, u1} S (Set.{u1} S) (Set.instMembershipSet.{u1} S) x s) r) n) x) S')) -> (Membership.mem.{u1, u1} S (Subalgebra.{u2, u1} R S _inst_1 (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6)) _inst_7) (SetLike.instMembership.{u1, u1} (Subalgebra.{u2, u1} R S _inst_1 (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6)) _inst_7) S (Subalgebra.instSetLikeSubalgebra.{u2, u1} R S _inst_1 (Ring.toSemiring.{u1} S (CommRing.toRing.{u1} S _inst_6)) _inst_7)) x S'))
Case conversion may be inaccurate. Consider using '#align subalgebra.mem_of_span_eq_top_of_smul_pow_mem Subalgebra.mem_of_span_eq_top_of_smul_pow_memₓ'. -/
theorem mem_of_span_eq_top_of_smul_pow_mem {S : Type _} [CommRing S] [Algebra R S]
    (S' : Subalgebra R S) (s : Set S) (l : s →₀ S) (hs : Finsupp.total s S S coe l = 1)
    (hs' : s ⊆ S') (hl : ∀ i, l i ∈ S') (x : S) (H : ∀ r : s, ∃ n : ℕ, (r ^ n : S) • x ∈ S') :
    x ∈ S' :=
  mem_of_finset_sum_eq_one_of_pow_smul_mem S' l.support coe l hs (fun x => hs' x.2) hl x H
#align subalgebra.mem_of_span_eq_top_of_smul_pow_mem Subalgebra.mem_of_span_eq_top_of_smul_pow_mem

end Subalgebra

section Nat

variable {R : Type _} [Semiring R]

#print subalgebraOfSubsemiring /-
/-- A subsemiring is a `ℕ`-subalgebra. -/
def subalgebraOfSubsemiring (S : Subsemiring R) : Subalgebra ℕ R :=
  { S with algebraMap_mem' := fun i => coe_nat_mem S i }
#align subalgebra_of_subsemiring subalgebraOfSubsemiring
-/

/- warning: mem_subalgebra_of_subsemiring -> mem_subalgebraOfSubsemiring is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {x : R} {S : Subsemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)}, Iff (Membership.Mem.{u1, u1} R (Subalgebra.{0, u1} Nat R Nat.commSemiring _inst_1 (algebraNat.{u1} R _inst_1)) (SetLike.hasMem.{u1, u1} (Subalgebra.{0, u1} Nat R Nat.commSemiring _inst_1 (algebraNat.{u1} R _inst_1)) R (Subalgebra.setLike.{0, u1} Nat R Nat.commSemiring _inst_1 (algebraNat.{u1} R _inst_1))) x (subalgebraOfSubsemiring.{u1} R _inst_1 S)) (Membership.Mem.{u1, u1} R (Subsemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (SetLike.hasMem.{u1, u1} (Subsemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) R (Subsemiring.setLike.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1))) x S)
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {x : R} {S : Subsemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)}, Iff (Membership.mem.{u1, u1} R (Subalgebra.{0, u1} Nat R Nat.commSemiring _inst_1 (algebraNat.{u1} R _inst_1)) (SetLike.instMembership.{u1, u1} (Subalgebra.{0, u1} Nat R Nat.commSemiring _inst_1 (algebraNat.{u1} R _inst_1)) R (Subalgebra.instSetLikeSubalgebra.{0, u1} Nat R Nat.commSemiring _inst_1 (algebraNat.{u1} R _inst_1))) x (subalgebraOfSubsemiring.{u1} R _inst_1 S)) (Membership.mem.{u1, u1} R (Subsemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (SetLike.instMembership.{u1, u1} (Subsemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) R (Subsemiring.instSetLikeSubsemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1))) x S)
Case conversion may be inaccurate. Consider using '#align mem_subalgebra_of_subsemiring mem_subalgebraOfSubsemiringₓ'. -/
@[simp]
theorem mem_subalgebraOfSubsemiring {x : R} {S : Subsemiring R} :
    x ∈ subalgebraOfSubsemiring S ↔ x ∈ S :=
  Iff.rfl
#align mem_subalgebra_of_subsemiring mem_subalgebraOfSubsemiring

end Nat

section Int

variable {R : Type _} [Ring R]

/- warning: subalgebra_of_subring -> subalgebraOfSubring is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Ring.{u1} R], (Subring.{u1} R _inst_1) -> (Subalgebra.{0, u1} Int R Int.commSemiring (Ring.toSemiring.{u1} R _inst_1) (algebraInt.{u1} R _inst_1))
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Ring.{u1} R], (Subring.{u1} R _inst_1) -> (Subalgebra.{0, u1} Int R Int.instCommSemiringInt (Ring.toSemiring.{u1} R _inst_1) (algebraInt.{u1} R _inst_1))
Case conversion may be inaccurate. Consider using '#align subalgebra_of_subring subalgebraOfSubringₓ'. -/
/-- A subring is a `ℤ`-subalgebra. -/
def subalgebraOfSubring (S : Subring R) : Subalgebra ℤ R :=
  { S with
    algebraMap_mem' := fun i =>
      Int.induction_on i (by simpa using S.zero_mem)
        (fun i ih => by simpa using S.add_mem ih S.one_mem) fun i ih =>
        show ((-i - 1 : ℤ) : R) ∈ S by
          rw [Int.cast_sub, Int.cast_one]
          exact S.sub_mem ih S.one_mem }
#align subalgebra_of_subring subalgebraOfSubring

variable {S : Type _} [Semiring S]

/- warning: mem_subalgebra_of_subring -> mem_subalgebraOfSubring is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Ring.{u1} R] {x : R} {S : Subring.{u1} R _inst_1}, Iff (Membership.Mem.{u1, u1} R (Subalgebra.{0, u1} Int R Int.commSemiring (Ring.toSemiring.{u1} R _inst_1) (algebraInt.{u1} R _inst_1)) (SetLike.hasMem.{u1, u1} (Subalgebra.{0, u1} Int R Int.commSemiring (Ring.toSemiring.{u1} R _inst_1) (algebraInt.{u1} R _inst_1)) R (Subalgebra.setLike.{0, u1} Int R Int.commSemiring (Ring.toSemiring.{u1} R _inst_1) (algebraInt.{u1} R _inst_1))) x (subalgebraOfSubring.{u1} R _inst_1 S)) (Membership.Mem.{u1, u1} R (Subring.{u1} R _inst_1) (SetLike.hasMem.{u1, u1} (Subring.{u1} R _inst_1) R (Subring.setLike.{u1} R _inst_1)) x S)
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Ring.{u1} R] {x : R} {S : Subring.{u1} R _inst_1}, Iff (Membership.mem.{u1, u1} R (Subalgebra.{0, u1} Int R Int.instCommSemiringInt (Ring.toSemiring.{u1} R _inst_1) (algebraInt.{u1} R _inst_1)) (SetLike.instMembership.{u1, u1} (Subalgebra.{0, u1} Int R Int.instCommSemiringInt (Ring.toSemiring.{u1} R _inst_1) (algebraInt.{u1} R _inst_1)) R (Subalgebra.instSetLikeSubalgebra.{0, u1} Int R Int.instCommSemiringInt (Ring.toSemiring.{u1} R _inst_1) (algebraInt.{u1} R _inst_1))) x (subalgebraOfSubring.{u1} R _inst_1 S)) (Membership.mem.{u1, u1} R (Subring.{u1} R _inst_1) (SetLike.instMembership.{u1, u1} (Subring.{u1} R _inst_1) R (Subring.instSetLikeSubring.{u1} R _inst_1)) x S)
Case conversion may be inaccurate. Consider using '#align mem_subalgebra_of_subring mem_subalgebraOfSubringₓ'. -/
@[simp]
theorem mem_subalgebraOfSubring {x : R} {S : Subring R} : x ∈ subalgebraOfSubring S ↔ x ∈ S :=
  Iff.rfl
#align mem_subalgebra_of_subring mem_subalgebraOfSubring

end Int

