/-
Copyright (c) 2016 Jeremy Avigad. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jeremy Avigad, Leonardo de Moura, Mario Carneiro, Johannes Hölzl

! This file was ported from Lean 3 source module algebra.order.monoid.to_mul_bot
! leanprover-community/mathlib commit d3e8e0a0237c10c2627bf52c246b15ff8e7df4c0
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Algebra.Order.WithZero
import Mathbin.Algebra.Order.Monoid.WithTop
import Mathbin.Algebra.Order.Monoid.TypeTags

/-!
> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

Making an additive monoid multiplicative then adding a zero is the same as adding a bottom
element then making it multiplicative.
-/


universe u

variable {α : Type u}

namespace WithZero

attribute [local semireducible] WithZero

variable [Add α]

/- warning: with_zero.to_mul_bot -> WithZero.toMulBot is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_1 : Add.{u1} α], MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1))) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1))
but is expected to have type
  forall {α : Type.{u1}} [_inst_1 : Add.{u1} α], MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1))
Case conversion may be inaccurate. Consider using '#align with_zero.to_mul_bot WithZero.toMulBotₓ'. -/
/-- Making an additive monoid multiplicative then adding a zero is the same as adding a bottom
element then making it multiplicative. -/
def toMulBot : WithZero (Multiplicative α) ≃* Multiplicative (WithBot α) :=
  MulEquiv.refl _
#align with_zero.to_mul_bot WithZero.toMulBot

/- warning: with_zero.to_mul_bot_zero -> WithZero.toMulBot_zero is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_1 : Add.{u1} α], Eq.{succ u1} (Multiplicative.{u1} (WithBot.{u1} α)) (coeFn.{succ u1, succ u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1))) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1))) (fun (_x : MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1))) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1))) => (WithZero.{u1} (Multiplicative.{u1} α)) -> (Multiplicative.{u1} (WithBot.{u1} α))) (MulEquiv.hasCoeToFun.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1))) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1))) (WithZero.toMulBot.{u1} α _inst_1) (OfNat.ofNat.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) 0 (OfNat.mk.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) 0 (Zero.zero.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.hasZero.{u1} (Multiplicative.{u1} α)))))) (coeFn.{succ u1, succ u1} (Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (fun (_x : Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) => (WithBot.{u1} α) -> (Multiplicative.{u1} (WithBot.{u1} α))) (Equiv.hasCoeToFun.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (Multiplicative.ofAdd.{u1} (WithBot.{u1} α)) (Bot.bot.{u1} (WithBot.{u1} α) (WithBot.hasBot.{u1} α)))
but is expected to have type
  forall {α : Type.{u1}} [_inst_1 : Add.{u1} α], Eq.{succ u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : WithZero.{u1} (Multiplicative.{u1} α)) => Multiplicative.{u1} (WithBot.{u1} α)) (OfNat.ofNat.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) 0 (Zero.toOfNat0.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.zero.{u1} (Multiplicative.{u1} α))))) (FunLike.coe.{succ u1, succ u1, succ u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1))) (WithZero.{u1} (Multiplicative.{u1} α)) (fun (_x : WithZero.{u1} (Multiplicative.{u1} α)) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : WithZero.{u1} (Multiplicative.{u1} α)) => Multiplicative.{u1} (WithBot.{u1} α)) _x) (EmbeddingLike.toFunLike.{succ u1, succ u1, succ u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1))) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (EquivLike.toEmbeddingLike.{succ u1, succ u1, succ u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1))) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulEquivClass.toEquivLike.{u1, u1, u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1))) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1)) (MulEquiv.instMulEquivClassMulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1)))))) (WithZero.toMulBot.{u1} α _inst_1) (OfNat.ofNat.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) 0 (Zero.toOfNat0.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.zero.{u1} (Multiplicative.{u1} α))))) (FunLike.coe.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (WithBot.{u1} α) (fun (_x : WithBot.{u1} α) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : WithBot.{u1} α) => Multiplicative.{u1} (WithBot.{u1} α)) _x) (EmbeddingLike.toFunLike.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α)) (EquivLike.toEmbeddingLike.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α)) (Equiv.instEquivLikeEquiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))))) (Multiplicative.ofAdd.{u1} (WithBot.{u1} α)) (Bot.bot.{u1} (WithBot.{u1} α) (WithBot.bot.{u1} α)))
Case conversion may be inaccurate. Consider using '#align with_zero.to_mul_bot_zero WithZero.toMulBot_zeroₓ'. -/
@[simp]
theorem toMulBot_zero : toMulBot (0 : WithZero (Multiplicative α)) = Multiplicative.ofAdd ⊥ :=
  rfl
#align with_zero.to_mul_bot_zero WithZero.toMulBot_zero

/- warning: with_zero.to_mul_bot_coe -> WithZero.toMulBot_coe is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_1 : Add.{u1} α] (x : Multiplicative.{u1} α), Eq.{succ u1} (Multiplicative.{u1} (WithBot.{u1} α)) (coeFn.{succ u1, succ u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1))) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1))) (fun (_x : MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1))) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1))) => (WithZero.{u1} (Multiplicative.{u1} α)) -> (Multiplicative.{u1} (WithBot.{u1} α))) (MulEquiv.hasCoeToFun.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1))) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1))) (WithZero.toMulBot.{u1} α _inst_1) ((fun (a : Type.{u1}) (b : Type.{u1}) [self : HasLiftT.{succ u1, succ u1} a b] => self.0) (Multiplicative.{u1} α) (WithZero.{u1} (Multiplicative.{u1} α)) (HasLiftT.mk.{succ u1, succ u1} (Multiplicative.{u1} α) (WithZero.{u1} (Multiplicative.{u1} α)) (CoeTCₓ.coe.{succ u1, succ u1} (Multiplicative.{u1} α) (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.hasCoeT.{u1} (Multiplicative.{u1} α)))) x)) (coeFn.{succ u1, succ u1} (Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (fun (_x : Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) => (WithBot.{u1} α) -> (Multiplicative.{u1} (WithBot.{u1} α))) (Equiv.hasCoeToFun.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (Multiplicative.ofAdd.{u1} (WithBot.{u1} α)) ((fun (a : Type.{u1}) (b : Type.{u1}) [self : HasLiftT.{succ u1, succ u1} a b] => self.0) α (WithBot.{u1} α) (HasLiftT.mk.{succ u1, succ u1} α (WithBot.{u1} α) (CoeTCₓ.coe.{succ u1, succ u1} α (WithBot.{u1} α) (WithBot.hasCoeT.{u1} α))) (coeFn.{succ u1, succ u1} (Equiv.{succ u1, succ u1} (Multiplicative.{u1} α) α) (fun (_x : Equiv.{succ u1, succ u1} (Multiplicative.{u1} α) α) => (Multiplicative.{u1} α) -> α) (Equiv.hasCoeToFun.{succ u1, succ u1} (Multiplicative.{u1} α) α) (Multiplicative.toAdd.{u1} α) x)))
but is expected to have type
  forall {α : Type.{u1}} [_inst_1 : Add.{u1} α] (x : Multiplicative.{u1} α), Eq.{succ u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : WithZero.{u1} (Multiplicative.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) => Multiplicative.{u1} (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) (WithZero.coe.{u1} (Multiplicative.{u1} α) x)) (FunLike.coe.{succ u1, succ u1, succ u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) (Multiplicative.{u1} (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x)) (Multiplicative.mul.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x) _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x)) (WithBot.add.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x) _inst_1))) (WithZero.{u1} (Multiplicative.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) (fun (_x : WithZero.{u1} (Multiplicative.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : WithZero.{u1} (Multiplicative.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) => Multiplicative.{u1} (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) _x) (EmbeddingLike.toFunLike.{succ u1, succ u1, succ u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) (Multiplicative.{u1} (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x)) (Multiplicative.mul.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x) _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x)) (WithBot.add.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x) _inst_1))) (WithZero.{u1} (Multiplicative.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) (Multiplicative.{u1} (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) (EquivLike.toEmbeddingLike.{succ u1, succ u1, succ u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) (Multiplicative.{u1} (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x)) (Multiplicative.mul.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x) _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x)) (WithBot.add.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x) _inst_1))) (WithZero.{u1} (Multiplicative.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) (Multiplicative.{u1} (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) (MulEquivClass.toEquivLike.{u1, u1, u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) (Multiplicative.{u1} (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x)) (Multiplicative.mul.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x) _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x)) (WithBot.add.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x) _inst_1))) (WithZero.{u1} (Multiplicative.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) (Multiplicative.{u1} (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x)) (Multiplicative.mul.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x) _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x)) (WithBot.add.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x) _inst_1)) (MulEquiv.instMulEquivClassMulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) (Multiplicative.{u1} (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x)) (Multiplicative.mul.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x) _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x)) (WithBot.add.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x) _inst_1)))))) (WithZero.toMulBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x) _inst_1) (WithZero.coe.{u1} (Multiplicative.{u1} α) x)) (FunLike.coe.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x)) (Multiplicative.{u1} (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x)))) (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x)) (fun (_x : WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x)) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x)) => Multiplicative.{u1} (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) _x) (EmbeddingLike.toFunLike.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x)) (Multiplicative.{u1} (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x)))) (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x)) (Multiplicative.{u1} (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) (EquivLike.toEmbeddingLike.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x)) (Multiplicative.{u1} (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x)))) (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x)) (Multiplicative.{u1} (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) (Equiv.instEquivLikeEquiv.{succ u1, succ u1} (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x)) (Multiplicative.{u1} (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x)))))) (Multiplicative.ofAdd.{u1} (WithBot.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x))) (WithBot.some.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) x) (FunLike.coe.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} (Multiplicative.{u1} α) α) (Multiplicative.{u1} α) (fun (_x : Multiplicative.{u1} α) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} α) => α) _x) (EmbeddingLike.toFunLike.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} (Multiplicative.{u1} α) α) (Multiplicative.{u1} α) α (EquivLike.toEmbeddingLike.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} (Multiplicative.{u1} α) α) (Multiplicative.{u1} α) α (Equiv.instEquivLikeEquiv.{succ u1, succ u1} (Multiplicative.{u1} α) α))) (Multiplicative.toAdd.{u1} α) x)))
Case conversion may be inaccurate. Consider using '#align with_zero.to_mul_bot_coe WithZero.toMulBot_coeₓ'. -/
@[simp]
theorem toMulBot_coe (x : Multiplicative α) :
    toMulBot ↑x = Multiplicative.ofAdd (x.toAdd : WithBot α) :=
  rfl
#align with_zero.to_mul_bot_coe WithZero.toMulBot_coe

/- warning: with_zero.to_mul_bot_symm_bot -> WithZero.toMulBot_symm_bot is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_1 : Add.{u1} α], Eq.{succ u1} (WithZero.{u1} (Multiplicative.{u1} α)) (coeFn.{succ u1, succ u1} (MulEquiv.{u1, u1} (Multiplicative.{u1} (WithBot.{u1} α)) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1)))) (fun (_x : MulEquiv.{u1, u1} (Multiplicative.{u1} (WithBot.{u1} α)) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1)))) => (Multiplicative.{u1} (WithBot.{u1} α)) -> (WithZero.{u1} (Multiplicative.{u1} α))) (MulEquiv.hasCoeToFun.{u1, u1} (Multiplicative.{u1} (WithBot.{u1} α)) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1)))) (MulEquiv.symm.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1))) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1)) (WithZero.toMulBot.{u1} α _inst_1)) (coeFn.{succ u1, succ u1} (Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (fun (_x : Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) => (WithBot.{u1} α) -> (Multiplicative.{u1} (WithBot.{u1} α))) (Equiv.hasCoeToFun.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (Multiplicative.ofAdd.{u1} (WithBot.{u1} α)) (Bot.bot.{u1} (WithBot.{u1} α) (WithBot.hasBot.{u1} α)))) (OfNat.ofNat.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) 0 (OfNat.mk.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) 0 (Zero.zero.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.hasZero.{u1} (Multiplicative.{u1} α)))))
but is expected to have type
  forall {α : Type.{u1}} [_inst_1 : Add.{u1} α], Eq.{succ u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} (WithBot.{u1} α)) => WithZero.{u1} (Multiplicative.{u1} α)) (FunLike.coe.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (WithBot.{u1} α) (fun (a : WithBot.{u1} α) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : WithBot.{u1} α) => Multiplicative.{u1} (WithBot.{u1} α)) a) (EmbeddingLike.toFunLike.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α)) (EquivLike.toEmbeddingLike.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α)) (Equiv.instEquivLikeEquiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))))) (Multiplicative.ofAdd.{u1} (WithBot.{u1} α)) (Bot.bot.{u1} (WithBot.{u1} α) (WithBot.bot.{u1} α)))) (FunLike.coe.{succ u1, succ u1, succ u1} (MulEquiv.{u1, u1} (Multiplicative.{u1} (WithBot.{u1} α)) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1)))) (Multiplicative.{u1} (WithBot.{u1} α)) (fun (_x : Multiplicative.{u1} (WithBot.{u1} α)) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} (WithBot.{u1} α)) => WithZero.{u1} (Multiplicative.{u1} α)) _x) (EmbeddingLike.toFunLike.{succ u1, succ u1, succ u1} (MulEquiv.{u1, u1} (Multiplicative.{u1} (WithBot.{u1} α)) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1)))) (Multiplicative.{u1} (WithBot.{u1} α)) (WithZero.{u1} (Multiplicative.{u1} α)) (EquivLike.toEmbeddingLike.{succ u1, succ u1, succ u1} (MulEquiv.{u1, u1} (Multiplicative.{u1} (WithBot.{u1} α)) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1)))) (Multiplicative.{u1} (WithBot.{u1} α)) (WithZero.{u1} (Multiplicative.{u1} α)) (MulEquivClass.toEquivLike.{u1, u1, u1} (MulEquiv.{u1, u1} (Multiplicative.{u1} (WithBot.{u1} α)) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1)))) (Multiplicative.{u1} (WithBot.{u1} α)) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (MulEquiv.instMulEquivClassMulEquiv.{u1, u1} (Multiplicative.{u1} (WithBot.{u1} α)) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))))))) (MulEquiv.symm.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1)) (WithZero.toMulBot.{u1} α _inst_1)) (FunLike.coe.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (WithBot.{u1} α) (fun (_x : WithBot.{u1} α) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : WithBot.{u1} α) => Multiplicative.{u1} (WithBot.{u1} α)) _x) (EmbeddingLike.toFunLike.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α)) (EquivLike.toEmbeddingLike.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α)) (Equiv.instEquivLikeEquiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))))) (Multiplicative.ofAdd.{u1} (WithBot.{u1} α)) (Bot.bot.{u1} (WithBot.{u1} α) (WithBot.bot.{u1} α)))) (OfNat.ofNat.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} (WithBot.{u1} α)) => WithZero.{u1} (Multiplicative.{u1} α)) (FunLike.coe.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (WithBot.{u1} α) (fun (a : WithBot.{u1} α) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : WithBot.{u1} α) => Multiplicative.{u1} (WithBot.{u1} α)) a) (EmbeddingLike.toFunLike.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α)) (EquivLike.toEmbeddingLike.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α)) (Equiv.instEquivLikeEquiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))))) (Multiplicative.ofAdd.{u1} (WithBot.{u1} α)) (Bot.bot.{u1} (WithBot.{u1} α) (WithBot.bot.{u1} α)))) 0 (Zero.toOfNat0.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} (WithBot.{u1} α)) => WithZero.{u1} (Multiplicative.{u1} α)) (FunLike.coe.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (WithBot.{u1} α) (fun (a : WithBot.{u1} α) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : WithBot.{u1} α) => Multiplicative.{u1} (WithBot.{u1} α)) a) (EmbeddingLike.toFunLike.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α)) (EquivLike.toEmbeddingLike.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α)) (Equiv.instEquivLikeEquiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))))) (Multiplicative.ofAdd.{u1} (WithBot.{u1} α)) (Bot.bot.{u1} (WithBot.{u1} α) (WithBot.bot.{u1} α)))) (WithZero.zero.{u1} (Multiplicative.{u1} α))))
Case conversion may be inaccurate. Consider using '#align with_zero.to_mul_bot_symm_bot WithZero.toMulBot_symm_botₓ'. -/
@[simp]
theorem toMulBot_symm_bot : toMulBot.symm (Multiplicative.ofAdd (⊥ : WithBot α)) = 0 :=
  rfl
#align with_zero.to_mul_bot_symm_bot WithZero.toMulBot_symm_bot

/- warning: with_zero.to_mul_bot_coe_of_add -> WithZero.toMulBot_coe_ofAdd is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_1 : Add.{u1} α] (x : α), Eq.{succ u1} (WithZero.{u1} (Multiplicative.{u1} α)) (coeFn.{succ u1, succ u1} (MulEquiv.{u1, u1} (Multiplicative.{u1} (WithBot.{u1} α)) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1)))) (fun (_x : MulEquiv.{u1, u1} (Multiplicative.{u1} (WithBot.{u1} α)) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1)))) => (Multiplicative.{u1} (WithBot.{u1} α)) -> (WithZero.{u1} (Multiplicative.{u1} α))) (MulEquiv.hasCoeToFun.{u1, u1} (Multiplicative.{u1} (WithBot.{u1} α)) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1)))) (MulEquiv.symm.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1))) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1)) (WithZero.toMulBot.{u1} α _inst_1)) (coeFn.{succ u1, succ u1} (Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (fun (_x : Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) => (WithBot.{u1} α) -> (Multiplicative.{u1} (WithBot.{u1} α))) (Equiv.hasCoeToFun.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (Multiplicative.ofAdd.{u1} (WithBot.{u1} α)) ((fun (a : Type.{u1}) (b : Type.{u1}) [self : HasLiftT.{succ u1, succ u1} a b] => self.0) α (WithBot.{u1} α) (HasLiftT.mk.{succ u1, succ u1} α (WithBot.{u1} α) (CoeTCₓ.coe.{succ u1, succ u1} α (WithBot.{u1} α) (WithBot.hasCoeT.{u1} α))) x))) ((fun (a : Type.{u1}) (b : Type.{u1}) [self : HasLiftT.{succ u1, succ u1} a b] => self.0) (Multiplicative.{u1} α) (WithZero.{u1} (Multiplicative.{u1} α)) (HasLiftT.mk.{succ u1, succ u1} (Multiplicative.{u1} α) (WithZero.{u1} (Multiplicative.{u1} α)) (CoeTCₓ.coe.{succ u1, succ u1} (Multiplicative.{u1} α) (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.hasCoeT.{u1} (Multiplicative.{u1} α)))) (coeFn.{succ u1, succ u1} (Equiv.{succ u1, succ u1} α (Multiplicative.{u1} α)) (fun (_x : Equiv.{succ u1, succ u1} α (Multiplicative.{u1} α)) => α -> (Multiplicative.{u1} α)) (Equiv.hasCoeToFun.{succ u1, succ u1} α (Multiplicative.{u1} α)) (Multiplicative.ofAdd.{u1} α) x))
but is expected to have type
  forall {α : Type.{u1}} [_inst_1 : Add.{u1} α] (x : α), Eq.{succ u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} (WithBot.{u1} α)) => WithZero.{u1} (Multiplicative.{u1} α)) (FunLike.coe.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (WithBot.{u1} α) (fun (a : WithBot.{u1} α) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : WithBot.{u1} α) => Multiplicative.{u1} (WithBot.{u1} α)) a) (EmbeddingLike.toFunLike.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α)) (EquivLike.toEmbeddingLike.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α)) (Equiv.instEquivLikeEquiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))))) (Multiplicative.ofAdd.{u1} (WithBot.{u1} α)) (WithBot.some.{u1} α x))) (FunLike.coe.{succ u1, succ u1, succ u1} (MulEquiv.{u1, u1} (Multiplicative.{u1} (WithBot.{u1} α)) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1)))) (Multiplicative.{u1} (WithBot.{u1} α)) (fun (_x : Multiplicative.{u1} (WithBot.{u1} α)) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : Multiplicative.{u1} (WithBot.{u1} α)) => WithZero.{u1} (Multiplicative.{u1} α)) _x) (EmbeddingLike.toFunLike.{succ u1, succ u1, succ u1} (MulEquiv.{u1, u1} (Multiplicative.{u1} (WithBot.{u1} α)) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1)))) (Multiplicative.{u1} (WithBot.{u1} α)) (WithZero.{u1} (Multiplicative.{u1} α)) (EquivLike.toEmbeddingLike.{succ u1, succ u1, succ u1} (MulEquiv.{u1, u1} (Multiplicative.{u1} (WithBot.{u1} α)) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1)))) (Multiplicative.{u1} (WithBot.{u1} α)) (WithZero.{u1} (Multiplicative.{u1} α)) (MulEquivClass.toEquivLike.{u1, u1, u1} (MulEquiv.{u1, u1} (Multiplicative.{u1} (WithBot.{u1} α)) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1)))) (Multiplicative.{u1} (WithBot.{u1} α)) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (MulEquiv.instMulEquivClassMulEquiv.{u1, u1} (Multiplicative.{u1} (WithBot.{u1} α)) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))))))) (MulEquiv.symm.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1)) (WithZero.toMulBot.{u1} α _inst_1)) (FunLike.coe.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (WithBot.{u1} α) (fun (_x : WithBot.{u1} α) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : WithBot.{u1} α) => Multiplicative.{u1} (WithBot.{u1} α)) _x) (EmbeddingLike.toFunLike.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α)) (EquivLike.toEmbeddingLike.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))) (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α)) (Equiv.instEquivLikeEquiv.{succ u1, succ u1} (WithBot.{u1} α) (Multiplicative.{u1} (WithBot.{u1} α))))) (Multiplicative.ofAdd.{u1} (WithBot.{u1} α)) (WithBot.some.{u1} α x))) (WithZero.coe.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : α) => Multiplicative.{u1} α) x) (FunLike.coe.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} α (Multiplicative.{u1} α)) α (fun (_x : α) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : α) => Multiplicative.{u1} α) _x) (EmbeddingLike.toFunLike.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} α (Multiplicative.{u1} α)) α (Multiplicative.{u1} α) (EquivLike.toEmbeddingLike.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} α (Multiplicative.{u1} α)) α (Multiplicative.{u1} α) (Equiv.instEquivLikeEquiv.{succ u1, succ u1} α (Multiplicative.{u1} α)))) (Multiplicative.ofAdd.{u1} α) x))
Case conversion may be inaccurate. Consider using '#align with_zero.to_mul_bot_coe_of_add WithZero.toMulBot_coe_ofAddₓ'. -/
@[simp]
theorem toMulBot_coe_ofAdd (x : α) :
    toMulBot.symm (Multiplicative.ofAdd (x : WithBot α)) = Multiplicative.ofAdd x :=
  rfl
#align with_zero.to_mul_bot_coe_of_add WithZero.toMulBot_coe_ofAdd

variable [Preorder α] (a b : WithZero (Multiplicative α))

/- warning: with_zero.to_mul_bot_strict_mono -> WithZero.toMulBot_strictMono is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_1 : Add.{u1} α] [_inst_2 : Preorder.{u1} α], StrictMono.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (WithZero.preorder.{u1} (Multiplicative.{u1} α) (Multiplicative.preorder.{u1} α _inst_2)) (Multiplicative.preorder.{u1} (WithBot.{u1} α) (WithBot.preorder.{u1} α _inst_2)) (coeFn.{succ u1, succ u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1))) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1))) (fun (_x : MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1))) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1))) => (WithZero.{u1} (Multiplicative.{u1} α)) -> (Multiplicative.{u1} (WithBot.{u1} α))) (MulEquiv.hasCoeToFun.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1))) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1))) (WithZero.toMulBot.{u1} α _inst_1))
but is expected to have type
  forall {α : Type.{u1}} [_inst_1 : Add.{u1} α] [_inst_2 : Preorder.{u1} α], StrictMono.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (WithZero.preorder.{u1} (Multiplicative.{u1} α) (Multiplicative.preorder.{u1} α _inst_2)) (Multiplicative.preorder.{u1} (WithBot.{u1} α) (WithBot.preorder.{u1} α _inst_2)) (FunLike.coe.{succ u1, succ u1, succ u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1))) (WithZero.{u1} (Multiplicative.{u1} α)) (fun (_x : WithZero.{u1} (Multiplicative.{u1} α)) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : WithZero.{u1} (Multiplicative.{u1} α)) => Multiplicative.{u1} (WithBot.{u1} α)) _x) (EmbeddingLike.toFunLike.{succ u1, succ u1, succ u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1))) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (EquivLike.toEmbeddingLike.{succ u1, succ u1, succ u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1))) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulEquivClass.toEquivLike.{u1, u1, u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1))) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1)) (MulEquiv.instMulEquivClassMulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1)))))) (WithZero.toMulBot.{u1} α _inst_1))
Case conversion may be inaccurate. Consider using '#align with_zero.to_mul_bot_strict_mono WithZero.toMulBot_strictMonoₓ'. -/
theorem toMulBot_strictMono : StrictMono (@toMulBot α _) := fun x y => id
#align with_zero.to_mul_bot_strict_mono WithZero.toMulBot_strictMono

/- warning: with_zero.to_mul_bot_le -> WithZero.toMulBot_le is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_1 : Add.{u1} α] [_inst_2 : Preorder.{u1} α] (a : WithZero.{u1} (Multiplicative.{u1} α)) (b : WithZero.{u1} (Multiplicative.{u1} α)), Iff (LE.le.{u1} (Multiplicative.{u1} (WithBot.{u1} α)) (Multiplicative.hasLe.{u1} (WithBot.{u1} α) (Preorder.toLE.{u1} (WithBot.{u1} α) (WithBot.preorder.{u1} α _inst_2))) (coeFn.{succ u1, succ u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1))) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1))) (fun (_x : MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1))) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1))) => (WithZero.{u1} (Multiplicative.{u1} α)) -> (Multiplicative.{u1} (WithBot.{u1} α))) (MulEquiv.hasCoeToFun.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1))) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1))) (WithZero.toMulBot.{u1} α _inst_1) a) (coeFn.{succ u1, succ u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1))) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1))) (fun (_x : MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1))) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1))) => (WithZero.{u1} (Multiplicative.{u1} α)) -> (Multiplicative.{u1} (WithBot.{u1} α))) (MulEquiv.hasCoeToFun.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1))) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1))) (WithZero.toMulBot.{u1} α _inst_1) b)) (LE.le.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Preorder.toLE.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.preorder.{u1} (Multiplicative.{u1} α) (Multiplicative.preorder.{u1} α _inst_2))) a b)
but is expected to have type
  forall {α : Type.{u1}} [_inst_1 : Add.{u1} α] [_inst_2 : Preorder.{u1} α] (a : WithZero.{u1} (Multiplicative.{u1} α)) (b : WithZero.{u1} (Multiplicative.{u1} α)), Iff (LE.le.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : WithZero.{u1} (Multiplicative.{u1} α)) => Multiplicative.{u1} (WithBot.{u1} α)) a) (instForAllLEMultiplicative.{u1} (WithBot.{u1} α) (Preorder.toLE.{u1} (WithBot.{u1} α) (WithBot.preorder.{u1} α _inst_2))) (FunLike.coe.{succ u1, succ u1, succ u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1))) (WithZero.{u1} (Multiplicative.{u1} α)) (fun (_x : WithZero.{u1} (Multiplicative.{u1} α)) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : WithZero.{u1} (Multiplicative.{u1} α)) => Multiplicative.{u1} (WithBot.{u1} α)) _x) (EmbeddingLike.toFunLike.{succ u1, succ u1, succ u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1))) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (EquivLike.toEmbeddingLike.{succ u1, succ u1, succ u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1))) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulEquivClass.toEquivLike.{u1, u1, u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1))) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1)) (MulEquiv.instMulEquivClassMulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1)))))) (WithZero.toMulBot.{u1} α _inst_1) a) (FunLike.coe.{succ u1, succ u1, succ u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1))) (WithZero.{u1} (Multiplicative.{u1} α)) (fun (_x : WithZero.{u1} (Multiplicative.{u1} α)) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : WithZero.{u1} (Multiplicative.{u1} α)) => Multiplicative.{u1} (WithBot.{u1} α)) _x) (EmbeddingLike.toFunLike.{succ u1, succ u1, succ u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1))) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (EquivLike.toEmbeddingLike.{succ u1, succ u1, succ u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1))) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulEquivClass.toEquivLike.{u1, u1, u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1))) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1)) (MulEquiv.instMulEquivClassMulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1)))))) (WithZero.toMulBot.{u1} α _inst_1) b)) (LE.le.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Preorder.toLE.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.preorder.{u1} (Multiplicative.{u1} α) (Multiplicative.preorder.{u1} α _inst_2))) a b)
Case conversion may be inaccurate. Consider using '#align with_zero.to_mul_bot_le WithZero.toMulBot_leₓ'. -/
@[simp]
theorem toMulBot_le : toMulBot a ≤ toMulBot b ↔ a ≤ b :=
  Iff.rfl
#align with_zero.to_mul_bot_le WithZero.toMulBot_le

/- warning: with_zero.to_mul_bot_lt -> WithZero.toMulBot_lt is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_1 : Add.{u1} α] [_inst_2 : Preorder.{u1} α] (a : WithZero.{u1} (Multiplicative.{u1} α)) (b : WithZero.{u1} (Multiplicative.{u1} α)), Iff (LT.lt.{u1} (Multiplicative.{u1} (WithBot.{u1} α)) (Multiplicative.hasLt.{u1} (WithBot.{u1} α) (Preorder.toLT.{u1} (WithBot.{u1} α) (WithBot.preorder.{u1} α _inst_2))) (coeFn.{succ u1, succ u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1))) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1))) (fun (_x : MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1))) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1))) => (WithZero.{u1} (Multiplicative.{u1} α)) -> (Multiplicative.{u1} (WithBot.{u1} α))) (MulEquiv.hasCoeToFun.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1))) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1))) (WithZero.toMulBot.{u1} α _inst_1) a) (coeFn.{succ u1, succ u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1))) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1))) (fun (_x : MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1))) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1))) => (WithZero.{u1} (Multiplicative.{u1} α)) -> (Multiplicative.{u1} (WithBot.{u1} α))) (MulEquiv.hasCoeToFun.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toHasMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.hasMul.{u1} α _inst_1))) (Multiplicative.hasMul.{u1} (WithBot.{u1} α) (WithBot.hasAdd.{u1} α _inst_1))) (WithZero.toMulBot.{u1} α _inst_1) b)) (LT.lt.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Preorder.toLT.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.preorder.{u1} (Multiplicative.{u1} α) (Multiplicative.preorder.{u1} α _inst_2))) a b)
but is expected to have type
  forall {α : Type.{u1}} [_inst_1 : Add.{u1} α] [_inst_2 : Preorder.{u1} α] (a : WithZero.{u1} (Multiplicative.{u1} α)) (b : WithZero.{u1} (Multiplicative.{u1} α)), Iff (LT.lt.{u1} ((fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : WithZero.{u1} (Multiplicative.{u1} α)) => Multiplicative.{u1} (WithBot.{u1} α)) a) (instForAllLTMultiplicative.{u1} (WithBot.{u1} α) (Preorder.toLT.{u1} (WithBot.{u1} α) (WithBot.preorder.{u1} α _inst_2))) (FunLike.coe.{succ u1, succ u1, succ u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1))) (WithZero.{u1} (Multiplicative.{u1} α)) (fun (_x : WithZero.{u1} (Multiplicative.{u1} α)) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : WithZero.{u1} (Multiplicative.{u1} α)) => Multiplicative.{u1} (WithBot.{u1} α)) _x) (EmbeddingLike.toFunLike.{succ u1, succ u1, succ u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1))) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (EquivLike.toEmbeddingLike.{succ u1, succ u1, succ u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1))) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulEquivClass.toEquivLike.{u1, u1, u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1))) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1)) (MulEquiv.instMulEquivClassMulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1)))))) (WithZero.toMulBot.{u1} α _inst_1) a) (FunLike.coe.{succ u1, succ u1, succ u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1))) (WithZero.{u1} (Multiplicative.{u1} α)) (fun (_x : WithZero.{u1} (Multiplicative.{u1} α)) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.21 : WithZero.{u1} (Multiplicative.{u1} α)) => Multiplicative.{u1} (WithBot.{u1} α)) _x) (EmbeddingLike.toFunLike.{succ u1, succ u1, succ u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1))) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (EquivLike.toEmbeddingLike.{succ u1, succ u1, succ u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1))) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulEquivClass.toEquivLike.{u1, u1, u1} (MulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1))) (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1)) (MulEquiv.instMulEquivClassMulEquiv.{u1, u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Multiplicative.{u1} (WithBot.{u1} α)) (MulZeroClass.toMul.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.mulZeroClass.{u1} (Multiplicative.{u1} α) (Multiplicative.mul.{u1} α _inst_1))) (Multiplicative.mul.{u1} (WithBot.{u1} α) (WithBot.add.{u1} α _inst_1)))))) (WithZero.toMulBot.{u1} α _inst_1) b)) (LT.lt.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (Preorder.toLT.{u1} (WithZero.{u1} (Multiplicative.{u1} α)) (WithZero.preorder.{u1} (Multiplicative.{u1} α) (Multiplicative.preorder.{u1} α _inst_2))) a b)
Case conversion may be inaccurate. Consider using '#align with_zero.to_mul_bot_lt WithZero.toMulBot_ltₓ'. -/
@[simp]
theorem toMulBot_lt : toMulBot a < toMulBot b ↔ a < b :=
  Iff.rfl
#align with_zero.to_mul_bot_lt WithZero.toMulBot_lt

end WithZero

