/-
Copyright (c) 2021 Johan Commelin. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johan Commelin, Andrew Yang, Pierre-Alexandre Bazin

! This file was ported from Lean 3 source module algebra.homology.short_exact.abelian
! leanprover-community/mathlib commit 0ebfdb71919ac6ca5d7fbc61a082fa2519556818
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Algebra.Homology.ShortExact.Preadditive
import Mathbin.CategoryTheory.Abelian.DiagramLemmas.Four

/-!
# Short exact sequences in abelian categories

In an abelian category, a left-split or right-split short exact sequence admits a splitting.
-/


noncomputable section

open CategoryTheory CategoryTheory.Limits CategoryTheory.Preadditive

variable {ùíú : Type _} [Category ùíú]

namespace CategoryTheory

variable {A B C A' B' C' : ùíú} {f : A ‚ü∂ B} {g : B ‚ü∂ C} {f' : A' ‚ü∂ B'} {g' : B' ‚ü∂ C'}

variable [Abelian ùíú]

open ZeroObject

theorem isIso_of_shortExact_of_isIso_of_isIso (h : ShortExact f g) (h' : ShortExact f' g')
    (i‚ÇÅ : A ‚ü∂ A') (i‚ÇÇ : B ‚ü∂ B') (i‚ÇÉ : C ‚ü∂ C') (comm‚ÇÅ : i‚ÇÅ ‚â´ f' = f ‚â´ i‚ÇÇ) (comm‚ÇÇ : i‚ÇÇ ‚â´ g' = g ‚â´ i‚ÇÉ)
    [IsIso i‚ÇÅ] [IsIso i‚ÇÉ] : IsIso i‚ÇÇ := by
  obtain ‚ü®_‚ü© := h
  obtain ‚ü®_‚ü© := h'
  skip
  refine'
            @abelian.is_iso_of_is_iso_of_is_iso_of_is_iso_of_is_iso ùíú _ _ 0 _ _ _ 0 _ _ _ 0 f g 0 f'
              g' 0 i‚ÇÅ i‚ÇÇ i‚ÇÉ _ comm‚ÇÅ comm‚ÇÇ 0 0 0 0 0 _ _ _ _ _ _ _ _ _ _ _ <;>
          try simp <;>
        try apply exact_zero_left_of_mono <;>
      try assumption <;>
    rwa [‚Üê epi_iff_exact_zero_right]
#align category_theory.is_iso_of_short_exact_of_is_iso_of_is_iso CategoryTheory.isIso_of_shortExact_of_isIso_of_isIso

/-- To construct a splitting of `A -f‚ü∂ B -g‚ü∂ C` it suffices to supply
a *morphism* `i : B ‚ü∂ A ‚äû C` such that `f ‚â´ i` is the canonical map `biprod.inl : A ‚ü∂ A ‚äû C` and
`i ‚â´ q = g`, where `q` is the canonical map `biprod.snd : A ‚äû C ‚ü∂ C`,
together with proofs that `f` is mono and `g` is epi.

The morphism `i` is then automatically an isomorphism. -/
def Splitting.mk' (h : ShortExact f g) (i : B ‚ü∂ A ‚äû C) (h1 : f ‚â´ i = biprod.inl)
    (h2 : i ‚â´ biprod.snd = g) : Splitting f g
    where
  Iso := by
    refine' @as_iso _ _ _ _ i (id _)
    refine'
      isIso_of_shortExact_of_isIso_of_isIso h _ _ _ _ (h1.trans (Category.id_comp _).symm).symm
        (h2.trans (Category.comp_id _).symm)
    constructor
    apply exact_inl_snd
  comp_iso_eq_inl := by rwa [asIso_hom]
  iso_comp_snd_eq := h2
#align category_theory.splitting.mk' CategoryTheory.Splitting.mk'

/-- To construct a splitting of `A -f‚ü∂ B -g‚ü∂ C` it suffices to supply
a *morphism* `i : A ‚äû C ‚ü∂ B` such that `p ‚â´ i = f` where `p` is the canonical map
`biprod.inl : A ‚ü∂ A ‚äû C`, and `i ‚â´ g` is the canonical map `biprod.snd : A ‚äû C ‚ü∂ C`,
together with proofs that `f` is mono and `g` is epi.

The morphism `i` is then automatically an isomorphism. -/
def Splitting.mk'' (h : ShortExact f g) (i : A ‚äû C ‚ü∂ B) (h1 : biprod.inl ‚â´ i = f)
    (h2 : i ‚â´ g = biprod.snd) : Splitting f g
    where
  Iso := by
    refine' (@as_iso _ _ _ _ i (id _)).symm
    refine'
      isIso_of_shortExact_of_isIso_of_isIso _ h _ _ _ (h1.trans (Category.id_comp _).symm).symm
        (h2.trans (Category.comp_id _).symm)
    constructor
    apply exact_inl_snd
  comp_iso_eq_inl := by rw [Iso.symm_hom, asIso_inv, IsIso.comp_inv_eq, h1]
  iso_comp_snd_eq := by rw [Iso.symm_hom, asIso_inv, IsIso.inv_comp_eq, h2]
#align category_theory.splitting.mk'' CategoryTheory.Splitting.mk''

/-- A short exact sequence that is left split admits a splitting. -/
def LeftSplit.splitting {f : A ‚ü∂ B} {g : B ‚ü∂ C} (h : LeftSplit f g) : Splitting f g :=
  Splitting.mk' h.shortExact (biprod.lift h.leftSplit.choose g)
    (by
      ext
      ¬∑ simpa only [biprod.inl_fst, biprod.lift_fst, Category.assoc] using h.left_split.some_spec
      ¬∑ simp only [biprod.inl_snd, biprod.lift_snd, Category.assoc, h.exact.w])
    (by simp only [biprod.lift_snd])
#align category_theory.left_split.splitting CategoryTheory.LeftSplit.splitting

/-- A short exact sequence that is right split admits a splitting. -/
def RightSplit.splitting {f : A ‚ü∂ B} {g : B ‚ü∂ C} (h : RightSplit f g) : Splitting f g :=
  Splitting.mk'' h.shortExact (biprod.desc f h.rightSplit.choose) (biprod.inl_desc _ _)
    (by
      ext
      ¬∑ rw [biprod.inl_snd, ‚Üê Category.assoc, biprod.inl_desc, h.exact.w]
      ¬∑ rw [biprod.inr_snd, ‚Üê Category.assoc, biprod.inr_desc, h.right_split.some_spec])
#align category_theory.right_split.splitting CategoryTheory.RightSplit.splitting

end CategoryTheory

