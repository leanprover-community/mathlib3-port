/-
Copyright (c) 2021 Eric Wieser. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Eric Wieser

! This file was ported from Lean 3 source module algebra.group_ring_action.invariant
! leanprover-community/mathlib commit 1dac236edca9b4b6f5f00b1ad831e35f89472837
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Algebra.Hom.GroupAction
import Mathbin.RingTheory.Subring.Pointwise

/-! # Subrings invariant under an action 

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.-/


section Ring

variable (M R : Type _) [Monoid M] [Ring R] [MulSemiringAction M R]

variable (S : Subring R)

open MulAction

variable {R}

#print IsInvariantSubring /-
/-- A typeclass for subrings invariant under a `mul_semiring_action`. -/
class IsInvariantSubring : Prop where
  smul_mem : ∀ (m : M) {x : R}, x ∈ S → m • x ∈ S
#align is_invariant_subring IsInvariantSubring
-/

/- warning: is_invariant_subring.to_mul_semiring_action -> IsInvariantSubring.toMulSemiringAction is a dubious translation:
lean 3 declaration is
  forall (M : Type.{u1}) {R : Type.{u2}} [_inst_1 : Monoid.{u1} M] [_inst_2 : Ring.{u2} R] [_inst_3 : MulSemiringAction.{u1, u2} M R _inst_1 (Ring.toSemiring.{u2} R _inst_2)] (S : Subring.{u2} R _inst_2) [_inst_4 : IsInvariantSubring.{u1, u2} M R _inst_1 _inst_2 _inst_3 S], MulSemiringAction.{u1, u2} M (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R _inst_2) R (Subring.setLike.{u2} R _inst_2)) S) _inst_1 (Ring.toSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R _inst_2) R (Subring.setLike.{u2} R _inst_2)) S) (Subring.toRing.{u2} R _inst_2 S))
but is expected to have type
  forall (M : Type.{u1}) {R : Type.{u2}} [_inst_1 : Monoid.{u1} M] [_inst_2 : Ring.{u2} R] [_inst_3 : MulSemiringAction.{u1, u2} M R _inst_1 (Ring.toSemiring.{u2} R _inst_2)] (S : Subring.{u2} R _inst_2) [_inst_4 : IsInvariantSubring.{u1, u2} M R _inst_1 _inst_2 _inst_3 S], MulSemiringAction.{u1, u2} M (Subtype.{succ u2} R (fun (x : R) => Membership.mem.{u2, u2} R (Subring.{u2} R _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R _inst_2) R (Subring.instSetLikeSubring.{u2} R _inst_2)) x S)) _inst_1 (Subsemiring.toSemiring.{u2} R (Ring.toSemiring.{u2} R _inst_2) (Subring.toSubsemiring.{u2} R _inst_2 S))
Case conversion may be inaccurate. Consider using '#align is_invariant_subring.to_mul_semiring_action IsInvariantSubring.toMulSemiringActionₓ'. -/
instance IsInvariantSubring.toMulSemiringAction [IsInvariantSubring M S] : MulSemiringAction M S
    where
  smul m x := ⟨m • x, IsInvariantSubring.smul_mem m x.2⟩
  one_smul s := Subtype.eq <| one_smul M s
  mul_smul m₁ m₂ s := Subtype.eq <| mul_smul m₁ m₂ s
  smul_add m s₁ s₂ := Subtype.eq <| smul_add m s₁ s₂
  smul_zero m := Subtype.eq <| smul_zero m
  smul_one m := Subtype.eq <| smul_one m
  smul_mul m s₁ s₂ := Subtype.eq <| smul_mul' m s₁ s₂
#align is_invariant_subring.to_mul_semiring_action IsInvariantSubring.toMulSemiringAction

end Ring

section

variable (M : Type _) [Monoid M]

variable {R' : Type _} [Ring R'] [MulSemiringAction M R']

variable (U : Subring R') [IsInvariantSubring M U]

/- warning: is_invariant_subring.subtype_hom -> IsInvariantSubring.subtypeHom is a dubious translation:
lean 3 declaration is
  forall (M : Type.{u1}) [_inst_1 : Monoid.{u1} M] {R' : Type.{u2}} [_inst_2 : Ring.{u2} R'] [_inst_3 : MulSemiringAction.{u1, u2} M R' _inst_1 (Ring.toSemiring.{u2} R' _inst_2)] (U : Subring.{u2} R' _inst_2) [_inst_4 : IsInvariantSubring.{u1, u2} M R' _inst_1 _inst_2 _inst_3 U], MulSemiringActionHom.{u1, u2, u2} M _inst_1 (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Ring.toSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Subring.toRing.{u2} R' _inst_2 U)) (IsInvariantSubring.toMulSemiringAction.{u1, u2} M R' _inst_1 _inst_2 _inst_3 U _inst_4) R' (Ring.toSemiring.{u2} R' _inst_2) _inst_3
but is expected to have type
  forall (M : Type.{u1}) [_inst_1 : Monoid.{u1} M] {R' : Type.{u2}} [_inst_2 : Ring.{u2} R'] [_inst_3 : MulSemiringAction.{u1, u2} M R' _inst_1 (Ring.toSemiring.{u2} R' _inst_2)] (U : Subring.{u2} R' _inst_2) [_inst_4 : IsInvariantSubring.{u1, u2} M R' _inst_1 _inst_2 _inst_3 U], MulSemiringActionHom.{u1, u2, u2} M _inst_1 (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (Subsemiring.toSemiring.{u2} R' (Ring.toSemiring.{u2} R' _inst_2) (Subring.toSubsemiring.{u2} R' _inst_2 U)) (IsInvariantSubring.toMulSemiringAction.{u1, u2} M R' _inst_1 _inst_2 _inst_3 U _inst_4) R' (Ring.toSemiring.{u2} R' _inst_2) _inst_3
Case conversion may be inaccurate. Consider using '#align is_invariant_subring.subtype_hom IsInvariantSubring.subtypeHomₓ'. -/
/-- The canonical inclusion from an invariant subring. -/
def IsInvariantSubring.subtypeHom : U →+*[M] R' :=
  { U.Subtype with map_smul' := fun m s => rfl }
#align is_invariant_subring.subtype_hom IsInvariantSubring.subtypeHom

/- warning: is_invariant_subring.coe_subtype_hom -> IsInvariantSubring.coe_subtypeHom is a dubious translation:
lean 3 declaration is
  forall (M : Type.{u1}) [_inst_1 : Monoid.{u1} M] {R' : Type.{u2}} [_inst_2 : Ring.{u2} R'] [_inst_3 : MulSemiringAction.{u1, u2} M R' _inst_1 (Ring.toSemiring.{u2} R' _inst_2)] (U : Subring.{u2} R' _inst_2) [_inst_4 : IsInvariantSubring.{u1, u2} M R' _inst_1 _inst_2 _inst_3 U], Eq.{succ u2} ((fun (_x : MulSemiringActionHom.{u1, u2, u2} M _inst_1 (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Ring.toSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Subring.toRing.{u2} R' _inst_2 U)) (IsInvariantSubring.toMulSemiringAction.{u1, u2} M R' _inst_1 _inst_2 _inst_3 U _inst_4) R' (Ring.toSemiring.{u2} R' _inst_2) _inst_3) => (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) -> R') (IsInvariantSubring.subtypeHom.{u1, u2} M _inst_1 R' _inst_2 _inst_3 U _inst_4)) (coeFn.{succ u2, succ u2} (MulSemiringActionHom.{u1, u2, u2} M _inst_1 (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Ring.toSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Subring.toRing.{u2} R' _inst_2 U)) (IsInvariantSubring.toMulSemiringAction.{u1, u2} M R' _inst_1 _inst_2 _inst_3 U _inst_4) R' (Ring.toSemiring.{u2} R' _inst_2) _inst_3) (fun (_x : MulSemiringActionHom.{u1, u2, u2} M _inst_1 (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Ring.toSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Subring.toRing.{u2} R' _inst_2 U)) (IsInvariantSubring.toMulSemiringAction.{u1, u2} M R' _inst_1 _inst_2 _inst_3 U _inst_4) R' (Ring.toSemiring.{u2} R' _inst_2) _inst_3) => (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) -> R') ([anonymous].{u1, u2, u2} M _inst_1 (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Ring.toSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Subring.toRing.{u2} R' _inst_2 U)) (IsInvariantSubring.toMulSemiringAction.{u1, u2} M R' _inst_1 _inst_2 _inst_3 U _inst_4) R' (Ring.toSemiring.{u2} R' _inst_2) _inst_3) (IsInvariantSubring.subtypeHom.{u1, u2} M _inst_1 R' _inst_2 _inst_3 U _inst_4)) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) R' (HasLiftT.mk.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) R' (CoeTCₓ.coe.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) R' (coeBase.{succ u2, succ u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) R' (coeSubtype.{succ u2} R' (fun (x : R') => Membership.Mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.hasMem.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) x U))))))
but is expected to have type
  forall (M : Type.{u1}) [_inst_1 : Monoid.{u1} M] {R' : Type.{u2}} [_inst_2 : Ring.{u2} R'] [_inst_3 : MulSemiringAction.{u1, u2} M R' _inst_1 (Ring.toSemiring.{u2} R' _inst_2)] (U : Subring.{u2} R' _inst_2) [_inst_4 : IsInvariantSubring.{u1, u2} M R' _inst_1 _inst_2 _inst_3 U], Eq.{succ u2} (forall (a : Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)), (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) => R') a) (FunLike.coe.{succ u2, succ u2, succ u2} (MulSemiringActionHom.{u1, u2, u2} M _inst_1 (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (Subsemiring.toSemiring.{u2} R' (Ring.toSemiring.{u2} R' _inst_2) (Subring.toSubsemiring.{u2} R' _inst_2 U)) (IsInvariantSubring.toMulSemiringAction.{u1, u2} M R' _inst_1 _inst_2 _inst_3 U _inst_4) R' (Ring.toSemiring.{u2} R' _inst_2) _inst_3) (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (fun (_x : Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) => R') _x) (SMulHomClass.toFunLike.{u2, u1, u2, u2} (MulSemiringActionHom.{u1, u2, u2} M _inst_1 (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (Subsemiring.toSemiring.{u2} R' (Ring.toSemiring.{u2} R' _inst_2) (Subring.toSubsemiring.{u2} R' _inst_2 U)) (IsInvariantSubring.toMulSemiringAction.{u1, u2} M R' _inst_1 _inst_2 _inst_3 U _inst_4) R' (Ring.toSemiring.{u2} R' _inst_2) _inst_3) M (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) R' (SMulZeroClass.toSMul.{u1, u2} M (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (AddMonoid.toZero.{u2} (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (AddMonoidWithOne.toAddMonoid.{u2} (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (NonAssocSemiring.toAddCommMonoidWithOne.{u2} (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (Subsemiring.toSemiring.{u2} R' (Ring.toSemiring.{u2} R' _inst_2) (Subring.toSubsemiring.{u2} R' _inst_2 U))))))) (DistribSMul.toSMulZeroClass.{u1, u2} M (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (AddMonoid.toAddZeroClass.{u2} (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (AddMonoidWithOne.toAddMonoid.{u2} (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (NonAssocSemiring.toAddCommMonoidWithOne.{u2} (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (Subsemiring.toSemiring.{u2} R' (Ring.toSemiring.{u2} R' _inst_2) (Subring.toSubsemiring.{u2} R' _inst_2 U))))))) (DistribMulAction.toDistribSMul.{u1, u2} M (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) _inst_1 (AddMonoidWithOne.toAddMonoid.{u2} (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (NonAssocSemiring.toAddCommMonoidWithOne.{u2} (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (Subsemiring.toSemiring.{u2} R' (Ring.toSemiring.{u2} R' _inst_2) (Subring.toSubsemiring.{u2} R' _inst_2 U)))))) (MulSemiringAction.toDistribMulAction.{u1, u2} M (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) _inst_1 (Subsemiring.toSemiring.{u2} R' (Ring.toSemiring.{u2} R' _inst_2) (Subring.toSubsemiring.{u2} R' _inst_2 U)) (IsInvariantSubring.toMulSemiringAction.{u1, u2} M R' _inst_1 _inst_2 _inst_3 U _inst_4))))) (SMulZeroClass.toSMul.{u1, u2} M R' (AddMonoid.toZero.{u2} R' (AddMonoidWithOne.toAddMonoid.{u2} R' (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} R' (NonAssocSemiring.toAddCommMonoidWithOne.{u2} R' (Semiring.toNonAssocSemiring.{u2} R' (Ring.toSemiring.{u2} R' _inst_2)))))) (DistribSMul.toSMulZeroClass.{u1, u2} M R' (AddMonoid.toAddZeroClass.{u2} R' (AddMonoidWithOne.toAddMonoid.{u2} R' (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} R' (NonAssocSemiring.toAddCommMonoidWithOne.{u2} R' (Semiring.toNonAssocSemiring.{u2} R' (Ring.toSemiring.{u2} R' _inst_2)))))) (DistribMulAction.toDistribSMul.{u1, u2} M R' _inst_1 (AddMonoidWithOne.toAddMonoid.{u2} R' (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} R' (NonAssocSemiring.toAddCommMonoidWithOne.{u2} R' (Semiring.toNonAssocSemiring.{u2} R' (Ring.toSemiring.{u2} R' _inst_2))))) (MulSemiringAction.toDistribMulAction.{u1, u2} M R' _inst_1 (Ring.toSemiring.{u2} R' _inst_2) _inst_3)))) (DistribMulActionHomClass.toSMulHomClass.{u2, u1, u2, u2} (MulSemiringActionHom.{u1, u2, u2} M _inst_1 (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (Subsemiring.toSemiring.{u2} R' (Ring.toSemiring.{u2} R' _inst_2) (Subring.toSubsemiring.{u2} R' _inst_2 U)) (IsInvariantSubring.toMulSemiringAction.{u1, u2} M R' _inst_1 _inst_2 _inst_3 U _inst_4) R' (Ring.toSemiring.{u2} R' _inst_2) _inst_3) M (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) R' _inst_1 (AddMonoidWithOne.toAddMonoid.{u2} (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (NonAssocSemiring.toAddCommMonoidWithOne.{u2} (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (Subsemiring.toSemiring.{u2} R' (Ring.toSemiring.{u2} R' _inst_2) (Subring.toSubsemiring.{u2} R' _inst_2 U)))))) (AddMonoidWithOne.toAddMonoid.{u2} R' (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} R' (NonAssocSemiring.toAddCommMonoidWithOne.{u2} R' (Semiring.toNonAssocSemiring.{u2} R' (Ring.toSemiring.{u2} R' _inst_2))))) (MulSemiringAction.toDistribMulAction.{u1, u2} M (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) _inst_1 (Subsemiring.toSemiring.{u2} R' (Ring.toSemiring.{u2} R' _inst_2) (Subring.toSubsemiring.{u2} R' _inst_2 U)) (IsInvariantSubring.toMulSemiringAction.{u1, u2} M R' _inst_1 _inst_2 _inst_3 U _inst_4)) (MulSemiringAction.toDistribMulAction.{u1, u2} M R' _inst_1 (Ring.toSemiring.{u2} R' _inst_2) _inst_3) (MulSemiringActionHomClass.toDistribMulActionHomClass.{u2, u1, u2, u2} (MulSemiringActionHom.{u1, u2, u2} M _inst_1 (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (Subsemiring.toSemiring.{u2} R' (Ring.toSemiring.{u2} R' _inst_2) (Subring.toSubsemiring.{u2} R' _inst_2 U)) (IsInvariantSubring.toMulSemiringAction.{u1, u2} M R' _inst_1 _inst_2 _inst_3 U _inst_4) R' (Ring.toSemiring.{u2} R' _inst_2) _inst_3) M (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) R' _inst_1 (Subsemiring.toSemiring.{u2} R' (Ring.toSemiring.{u2} R' _inst_2) (Subring.toSubsemiring.{u2} R' _inst_2 U)) (Ring.toSemiring.{u2} R' _inst_2) (MulSemiringAction.toDistribMulAction.{u1, u2} M (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) _inst_1 (Subsemiring.toSemiring.{u2} R' (Ring.toSemiring.{u2} R' _inst_2) (Subring.toSubsemiring.{u2} R' _inst_2 U)) (IsInvariantSubring.toMulSemiringAction.{u1, u2} M R' _inst_1 _inst_2 _inst_3 U _inst_4)) (MulSemiringAction.toDistribMulAction.{u1, u2} M R' _inst_1 (Ring.toSemiring.{u2} R' _inst_2) _inst_3) (MulSemiringActionHom.instMulSemiringActionHomClassMulSemiringActionHomToDistribMulActionToDistribMulAction.{u1, u2, u2} M _inst_1 (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (Subsemiring.toSemiring.{u2} R' (Ring.toSemiring.{u2} R' _inst_2) (Subring.toSubsemiring.{u2} R' _inst_2 U)) (IsInvariantSubring.toMulSemiringAction.{u1, u2} M R' _inst_1 _inst_2 _inst_3 U _inst_4) R' (Ring.toSemiring.{u2} R' _inst_2) _inst_3)))) (IsInvariantSubring.subtypeHom.{u1, u2} M _inst_1 R' _inst_2 _inst_3 U _inst_4)) (Subtype.val.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U))
Case conversion may be inaccurate. Consider using '#align is_invariant_subring.coe_subtype_hom IsInvariantSubring.coe_subtypeHomₓ'. -/
@[simp]
theorem IsInvariantSubring.coe_subtypeHom : (IsInvariantSubring.subtypeHom M U : U → R') = coe :=
  rfl
#align is_invariant_subring.coe_subtype_hom IsInvariantSubring.coe_subtypeHom

/- warning: is_invariant_subring.coe_subtype_hom' -> IsInvariantSubring.coe_subtypeHom' is a dubious translation:
lean 3 declaration is
  forall (M : Type.{u1}) [_inst_1 : Monoid.{u1} M] {R' : Type.{u2}} [_inst_2 : Ring.{u2} R'] [_inst_3 : MulSemiringAction.{u1, u2} M R' _inst_1 (Ring.toSemiring.{u2} R' _inst_2)] (U : Subring.{u2} R' _inst_2) [_inst_4 : IsInvariantSubring.{u1, u2} M R' _inst_1 _inst_2 _inst_3 U], Eq.{succ u2} (RingHom.{u2, u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) R' (NonAssocRing.toNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Ring.toNonAssocRing.{u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Subring.toRing.{u2} R' _inst_2 U))) (NonAssocRing.toNonAssocSemiring.{u2} R' (Ring.toNonAssocRing.{u2} R' _inst_2))) ((fun (a : Type.{u2}) (b : Type.{u2}) [self : HasLiftT.{succ u2, succ u2} a b] => self.0) (MulSemiringActionHom.{u1, u2, u2} M _inst_1 (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Ring.toSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Subring.toRing.{u2} R' _inst_2 U)) (IsInvariantSubring.toMulSemiringAction.{u1, u2} M R' _inst_1 _inst_2 _inst_3 U _inst_4) R' (Ring.toSemiring.{u2} R' _inst_2) _inst_3) (RingHom.{u2, u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) R' (NonAssocRing.toNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Ring.toNonAssocRing.{u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Subring.toRing.{u2} R' _inst_2 U))) (NonAssocRing.toNonAssocSemiring.{u2} R' (Ring.toNonAssocRing.{u2} R' _inst_2))) (HasLiftT.mk.{succ u2, succ u2} (MulSemiringActionHom.{u1, u2, u2} M _inst_1 (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Ring.toSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Subring.toRing.{u2} R' _inst_2 U)) (IsInvariantSubring.toMulSemiringAction.{u1, u2} M R' _inst_1 _inst_2 _inst_3 U _inst_4) R' (Ring.toSemiring.{u2} R' _inst_2) _inst_3) (RingHom.{u2, u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) R' (NonAssocRing.toNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Ring.toNonAssocRing.{u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Subring.toRing.{u2} R' _inst_2 U))) (NonAssocRing.toNonAssocSemiring.{u2} R' (Ring.toNonAssocRing.{u2} R' _inst_2))) (CoeTCₓ.coe.{succ u2, succ u2} (MulSemiringActionHom.{u1, u2, u2} M _inst_1 (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Ring.toSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Subring.toRing.{u2} R' _inst_2 U)) (IsInvariantSubring.toMulSemiringAction.{u1, u2} M R' _inst_1 _inst_2 _inst_3 U _inst_4) R' (Ring.toSemiring.{u2} R' _inst_2) _inst_3) (RingHom.{u2, u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) R' (NonAssocRing.toNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Ring.toNonAssocRing.{u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Subring.toRing.{u2} R' _inst_2 U))) (NonAssocRing.toNonAssocSemiring.{u2} R' (Ring.toNonAssocRing.{u2} R' _inst_2))) (RingHom.hasCoeT.{u2, u2, u2} (MulSemiringActionHom.{u1, u2, u2} M _inst_1 (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Ring.toSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Subring.toRing.{u2} R' _inst_2 U)) (IsInvariantSubring.toMulSemiringAction.{u1, u2} M R' _inst_1 _inst_2 _inst_3 U _inst_4) R' (Ring.toSemiring.{u2} R' _inst_2) _inst_3) (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) R' (NonAssocRing.toNonAssocSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Ring.toNonAssocRing.{u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Subring.toRing.{u2} R' _inst_2 U))) (NonAssocRing.toNonAssocSemiring.{u2} R' (Ring.toNonAssocRing.{u2} R' _inst_2)) (MulSemiringActionHomClass.toRingHomClass.{u2, u1, u2, u2} (MulSemiringActionHom.{u1, u2, u2} M _inst_1 (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Ring.toSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Subring.toRing.{u2} R' _inst_2 U)) (IsInvariantSubring.toMulSemiringAction.{u1, u2} M R' _inst_1 _inst_2 _inst_3 U _inst_4) R' (Ring.toSemiring.{u2} R' _inst_2) _inst_3) M (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) R' _inst_1 (Ring.toSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Subring.toRing.{u2} R' _inst_2 U)) (Ring.toSemiring.{u2} R' _inst_2) (MulSemiringAction.toDistribMulAction.{u1, u2} M (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) _inst_1 (Ring.toSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Subring.toRing.{u2} R' _inst_2 U)) (IsInvariantSubring.toMulSemiringAction.{u1, u2} M R' _inst_1 _inst_2 _inst_3 U _inst_4)) (MulSemiringAction.toDistribMulAction.{u1, u2} M R' _inst_1 (Ring.toSemiring.{u2} R' _inst_2) _inst_3) (MulSemiringActionHom.mulSemiringActionHomClass.{u1, u2, u2} M _inst_1 (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Ring.toSemiring.{u2} (coeSort.{succ u2, succ (succ u2)} (Subring.{u2} R' _inst_2) Type.{u2} (SetLike.hasCoeToSort.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.setLike.{u2} R' _inst_2)) U) (Subring.toRing.{u2} R' _inst_2 U)) (IsInvariantSubring.toMulSemiringAction.{u1, u2} M R' _inst_1 _inst_2 _inst_3 U _inst_4) R' (Ring.toSemiring.{u2} R' _inst_2) _inst_3))))) (IsInvariantSubring.subtypeHom.{u1, u2} M _inst_1 R' _inst_2 _inst_3 U _inst_4)) (Subring.subtype.{u2} R' _inst_2 U)
but is expected to have type
  forall (M : Type.{u1}) [_inst_1 : Monoid.{u1} M] {R' : Type.{u2}} [_inst_2 : Ring.{u2} R'] [_inst_3 : MulSemiringAction.{u1, u2} M R' _inst_1 (Ring.toSemiring.{u2} R' _inst_2)] (U : Subring.{u2} R' _inst_2) [_inst_4 : IsInvariantSubring.{u1, u2} M R' _inst_1 _inst_2 _inst_3 U], Eq.{succ u2} (RingHom.{u2, u2} (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) R' (Semiring.toNonAssocSemiring.{u2} (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (Subsemiring.toSemiring.{u2} R' (Ring.toSemiring.{u2} R' _inst_2) (Subring.toSubsemiring.{u2} R' _inst_2 U))) (Semiring.toNonAssocSemiring.{u2} R' (Ring.toSemiring.{u2} R' _inst_2))) (MulSemiringActionHom.toRingHom.{u1, u2, u2} M _inst_1 (Subtype.{succ u2} R' (fun (x : R') => Membership.mem.{u2, u2} R' (Subring.{u2} R' _inst_2) (SetLike.instMembership.{u2, u2} (Subring.{u2} R' _inst_2) R' (Subring.instSetLikeSubring.{u2} R' _inst_2)) x U)) (Subsemiring.toSemiring.{u2} R' (Ring.toSemiring.{u2} R' _inst_2) (Subring.toSubsemiring.{u2} R' _inst_2 U)) (IsInvariantSubring.toMulSemiringAction.{u1, u2} M R' _inst_1 _inst_2 _inst_3 U _inst_4) R' (Ring.toSemiring.{u2} R' _inst_2) _inst_3 (IsInvariantSubring.subtypeHom.{u1, u2} M _inst_1 R' _inst_2 _inst_3 U _inst_4)) (Subring.subtype.{u2} R' _inst_2 U)
Case conversion may be inaccurate. Consider using '#align is_invariant_subring.coe_subtype_hom' IsInvariantSubring.coe_subtypeHom'ₓ'. -/
@[simp]
theorem IsInvariantSubring.coe_subtypeHom' :
    (IsInvariantSubring.subtypeHom M U : U →+* R') = U.Subtype :=
  rfl
#align is_invariant_subring.coe_subtype_hom' IsInvariantSubring.coe_subtypeHom'

end

