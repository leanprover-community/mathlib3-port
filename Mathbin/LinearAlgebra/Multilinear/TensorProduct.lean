/-
Copyright (c) 2020 Eric Wieser. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Eric Wieser

! This file was ported from Lean 3 source module linear_algebra.multilinear.tensor_product
! leanprover-community/mathlib commit 19cb3751e5e9b3d97adb51023949c50c13b5fdfd
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.LinearAlgebra.Multilinear.Basic
import Mathbin.LinearAlgebra.TensorProduct

/-!
# Constructions relating multilinear maps and tensor products.

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.
-/


namespace MultilinearMap

section DomCoprod

open TensorProduct

variable {R ι₁ ι₂ ι₃ ι₄ : Type _}

variable [CommSemiring R]

variable {N₁ : Type _} [AddCommMonoid N₁] [Module R N₁]

variable {N₂ : Type _} [AddCommMonoid N₂] [Module R N₂]

variable {N : Type _} [AddCommMonoid N] [Module R N]

/- warning: multilinear_map.dom_coprod -> MultilinearMap.domCoprod is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι₁ : Type.{u2}} {ι₂ : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] {N₁ : Type.{u4}} [_inst_2 : AddCommMonoid.{u4} N₁] [_inst_3 : Module.{u1, u4} R N₁ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2] {N₂ : Type.{u5}} [_inst_4 : AddCommMonoid.{u5} N₂] [_inst_5 : Module.{u1, u5} R N₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] {N : Type.{u6}} [_inst_6 : AddCommMonoid.{u6} N] [_inst_7 : Module.{u1, u6} R N (CommSemiring.toSemiring.{u1} R _inst_1) _inst_6], (MultilinearMap.{u1, u6, u4, u2} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) -> (MultilinearMap.{u1, u6, u5, u3} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) -> (MultilinearMap.{u1, u6, max u4 u5, max u2 u3} R (Sum.{u2, u3} ι₁ ι₂) (fun (_x : Sum.{u2, u3} ι₁ ι₂) => N) (TensorProduct.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u2, u3} ι₁ ι₂) => _inst_6) (TensorProduct.addCommMonoid.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (fun (i : Sum.{u2, u3} ι₁ ι₂) => _inst_7) (TensorProduct.module.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5))
but is expected to have type
  forall {R : Type.{u1}} {ι₁ : Type.{u2}} {ι₂ : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] {N₁ : Type.{u4}} [_inst_2 : AddCommMonoid.{u4} N₁] [_inst_3 : Module.{u1, u4} R N₁ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2] {N₂ : Type.{u5}} [_inst_4 : AddCommMonoid.{u5} N₂] [_inst_5 : Module.{u1, u5} R N₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] {N : Type.{u6}} [_inst_6 : AddCommMonoid.{u6} N] [_inst_7 : Module.{u1, u6} R N (CommSemiring.toSemiring.{u1} R _inst_1) _inst_6], (MultilinearMap.{u1, u6, u4, u2} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) -> (MultilinearMap.{u1, u6, u5, u3} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) -> (MultilinearMap.{u1, u6, max u5 u4, max u2 u3} R (Sum.{u2, u3} ι₁ ι₂) (fun (_x : Sum.{u2, u3} ι₁ ι₂) => N) (TensorProduct.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u2, u3} ι₁ ι₂) => _inst_6) (TensorProduct.addCommMonoid.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (fun (i : Sum.{u2, u3} ι₁ ι₂) => _inst_7) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5))
Case conversion may be inaccurate. Consider using '#align multilinear_map.dom_coprod MultilinearMap.domCoprodₓ'. -/
/-- Given two multilinear maps `(ι₁ → N) → N₁` and `(ι₂ → N) → N₂`, this produces the map
`(ι₁ ⊕ ι₂ → N) → N₁ ⊗ N₂` by taking the coproduct of the domain and the tensor product
of the codomain.

This can be thought of as combining `equiv.sum_arrow_equiv_prod_arrow.symm` with
`tensor_product.map`, noting that the two operations can't be separated as the intermediate result
is not a `multilinear_map`.

While this can be generalized to work for dependent `Π i : ι₁, N'₁ i` instead of `ι₁ → N`, doing so
introduces `sum.elim N'₁ N'₂` types in the result which are difficult to work with and not defeq
to the simple case defined here. See [this zulip thread](
https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/Instances.20on.20.60sum.2Eelim.20A.20B.20i.60/near/218484619).
-/
@[simps apply]
def domCoprod (a : MultilinearMap R (fun _ : ι₁ => N) N₁)
    (b : MultilinearMap R (fun _ : ι₂ => N) N₂) :
    MultilinearMap R (fun _ : Sum ι₁ ι₂ => N) (N₁ ⊗[R] N₂)
    where
  toFun v := (a fun i => v (Sum.inl i)) ⊗ₜ b fun i => v (Sum.inr i)
  map_add' _ v i p q := by
    skip
    letI := (@Sum.inl_injective ι₁ ι₂).DecidableEq
    letI := (@Sum.inr_injective ι₁ ι₂).DecidableEq
    cases i <;> simp [TensorProduct.add_tmul, TensorProduct.tmul_add]
  map_smul' _ v i c p := by
    skip
    letI := (@Sum.inl_injective ι₁ ι₂).DecidableEq
    letI := (@Sum.inr_injective ι₁ ι₂).DecidableEq
    cases i <;> simp [TensorProduct.smul_tmul', TensorProduct.tmul_smul]
#align multilinear_map.dom_coprod MultilinearMap.domCoprod

#print MultilinearMap.domCoprod' /-
/-- A more bundled version of `multilinear_map.dom_coprod` that maps
`((ι₁ → N) → N₁) ⊗ ((ι₂ → N) → N₂)` to `(ι₁ ⊕ ι₂ → N) → N₁ ⊗ N₂`. -/
def domCoprod' :
    MultilinearMap R (fun _ : ι₁ => N) N₁ ⊗[R] MultilinearMap R (fun _ : ι₂ => N) N₂ →ₗ[R]
      MultilinearMap R (fun _ : Sum ι₁ ι₂ => N) (N₁ ⊗[R] N₂) :=
  TensorProduct.lift <|
    LinearMap.mk₂ R domCoprod
      (fun m₁ m₂ n => by
        ext
        simp only [dom_coprod_apply, TensorProduct.add_tmul, add_apply])
      (fun c m n => by
        ext
        simp only [dom_coprod_apply, TensorProduct.smul_tmul', smul_apply])
      (fun m n₁ n₂ => by
        ext
        simp only [dom_coprod_apply, TensorProduct.tmul_add, add_apply])
      fun c m n => by
      ext
      simp only [dom_coprod_apply, TensorProduct.tmul_smul, smul_apply]
#align multilinear_map.dom_coprod' MultilinearMap.domCoprod'
-/

/- warning: multilinear_map.dom_coprod'_apply -> MultilinearMap.domCoprod'_apply is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι₁ : Type.{u2}} {ι₂ : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] {N₁ : Type.{u4}} [_inst_2 : AddCommMonoid.{u4} N₁] [_inst_3 : Module.{u1, u4} R N₁ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2] {N₂ : Type.{u5}} [_inst_4 : AddCommMonoid.{u5} N₂] [_inst_5 : Module.{u1, u5} R N₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] {N : Type.{u6}} [_inst_6 : AddCommMonoid.{u6} N] [_inst_7 : Module.{u1, u6} R N (CommSemiring.toSemiring.{u1} R _inst_1) _inst_6] (a : MultilinearMap.{u1, u6, u4, u2} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (b : MultilinearMap.{u1, u6, u5, u3} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5), Eq.{max (succ (max u2 u3)) (succ u6) (succ (max u4 u5))} (MultilinearMap.{u1, u6, max u4 u5, max u2 u3} R (Sum.{u2, u3} ι₁ ι₂) (fun (_x : Sum.{u2, u3} ι₁ ι₂) => N) (TensorProduct.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u2, u3} ι₁ ι₂) => _inst_6) (TensorProduct.addCommMonoid.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (fun (i : Sum.{u2, u3} ι₁ ι₂) => _inst_7) (TensorProduct.module.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5)) (coeFn.{max (succ (max (max u2 u6 u4) u3 u6 u5)) (succ (max (max u2 u3) u6 u4 u5)), max (succ (max (max u2 u6 u4) u3 u6 u5)) (succ (max (max u2 u3) u6 u4 u5))} (LinearMap.{u1, u1, max (max u2 u6 u4) u3 u6 u5, max (max u2 u3) u6 u4 u5} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (TensorProduct.{u1, max u2 u6 u4, max u3 u6 u5} R _inst_1 (MultilinearMap.{u1, u6, u4, u2} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.{u1, u6, u5, u3} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.addCommMonoid.{u1, u6, u4, u2} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.addCommMonoid.{u1, u6, u5, u3} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.module.{u6, u4, u2, u1, u1} ι₁ (fun (_x : ι₁) => N) N₁ (fun (i : ι₁) => _inst_6) _inst_2 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_7) _inst_3 _inst_3 (MultilinearMap.domCoprod'._proof_1.{u1, u4} R _inst_1 N₁ _inst_2 _inst_3)) (MultilinearMap.module.{u6, u5, u3, u1, u1} ι₂ (fun (_x : ι₂) => N) N₂ (fun (i : ι₂) => _inst_6) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_7) _inst_5 _inst_5 (MultilinearMap.domCoprod'._proof_2.{u1, u5} R _inst_1 N₂ _inst_4 _inst_5))) (MultilinearMap.{u1, u6, max u4 u5, max u2 u3} R (Sum.{u2, u3} ι₁ ι₂) (fun (_x : Sum.{u2, u3} ι₁ ι₂) => N) (TensorProduct.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u2, u3} ι₁ ι₂) => _inst_6) (TensorProduct.addCommMonoid.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (fun (i : Sum.{u2, u3} ι₁ ι₂) => _inst_7) (TensorProduct.module.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5)) (TensorProduct.addCommMonoid.{u1, max u2 u6 u4, max u3 u6 u5} R _inst_1 (MultilinearMap.{u1, u6, u4, u2} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.{u1, u6, u5, u3} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.addCommMonoid.{u1, u6, u4, u2} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.addCommMonoid.{u1, u6, u5, u3} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.module.{u6, u4, u2, u1, u1} ι₁ (fun (_x : ι₁) => N) N₁ (fun (i : ι₁) => _inst_6) _inst_2 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_7) _inst_3 _inst_3 (MultilinearMap.domCoprod'._proof_1.{u1, u4} R _inst_1 N₁ _inst_2 _inst_3)) (MultilinearMap.module.{u6, u5, u3, u1, u1} ι₂ (fun (_x : ι₂) => N) N₂ (fun (i : ι₂) => _inst_6) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_7) _inst_5 _inst_5 (MultilinearMap.domCoprod'._proof_2.{u1, u5} R _inst_1 N₂ _inst_4 _inst_5))) (MultilinearMap.addCommMonoid.{u1, u6, max u4 u5, max u2 u3} R (Sum.{u2, u3} ι₁ ι₂) (fun (_x : Sum.{u2, u3} ι₁ ι₂) => N) (TensorProduct.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u2, u3} ι₁ ι₂) => _inst_6) (TensorProduct.addCommMonoid.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (fun (i : Sum.{u2, u3} ι₁ ι₂) => _inst_7) (TensorProduct.module.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5)) (TensorProduct.module.{u1, max u2 u6 u4, max u3 u6 u5} R _inst_1 (MultilinearMap.{u1, u6, u4, u2} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.{u1, u6, u5, u3} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.addCommMonoid.{u1, u6, u4, u2} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.addCommMonoid.{u1, u6, u5, u3} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.module.{u6, u4, u2, u1, u1} ι₁ (fun (_x : ι₁) => N) N₁ (fun (i : ι₁) => _inst_6) _inst_2 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_7) _inst_3 _inst_3 (MultilinearMap.domCoprod'._proof_1.{u1, u4} R _inst_1 N₁ _inst_2 _inst_3)) (MultilinearMap.module.{u6, u5, u3, u1, u1} ι₂ (fun (_x : ι₂) => N) N₂ (fun (i : ι₂) => _inst_6) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_7) _inst_5 _inst_5 (MultilinearMap.domCoprod'._proof_2.{u1, u5} R _inst_1 N₂ _inst_4 _inst_5))) (MultilinearMap.module.{u6, max u4 u5, max u2 u3, u1, u1} (Sum.{u2, u3} ι₁ ι₂) (fun (_x : Sum.{u2, u3} ι₁ ι₂) => N) (TensorProduct.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (fun (i : Sum.{u2, u3} ι₁ ι₂) => _inst_6) (TensorProduct.addCommMonoid.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u2, u3} ι₁ ι₂) => _inst_7) (TensorProduct.module.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (TensorProduct.module.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (MultilinearMap.domCoprod'._proof_3.{u1, u4, u5} R _inst_1 N₁ _inst_2 _inst_3 N₂ _inst_4 _inst_5))) (fun (_x : LinearMap.{u1, u1, max (max u2 u6 u4) u3 u6 u5, max (max u2 u3) u6 u4 u5} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (TensorProduct.{u1, max u2 u6 u4, max u3 u6 u5} R _inst_1 (MultilinearMap.{u1, u6, u4, u2} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.{u1, u6, u5, u3} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.addCommMonoid.{u1, u6, u4, u2} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.addCommMonoid.{u1, u6, u5, u3} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.module.{u6, u4, u2, u1, u1} ι₁ (fun (_x : ι₁) => N) N₁ (fun (i : ι₁) => _inst_6) _inst_2 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_7) _inst_3 _inst_3 (MultilinearMap.domCoprod'._proof_1.{u1, u4} R _inst_1 N₁ _inst_2 _inst_3)) (MultilinearMap.module.{u6, u5, u3, u1, u1} ι₂ (fun (_x : ι₂) => N) N₂ (fun (i : ι₂) => _inst_6) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_7) _inst_5 _inst_5 (MultilinearMap.domCoprod'._proof_2.{u1, u5} R _inst_1 N₂ _inst_4 _inst_5))) (MultilinearMap.{u1, u6, max u4 u5, max u2 u3} R (Sum.{u2, u3} ι₁ ι₂) (fun (_x : Sum.{u2, u3} ι₁ ι₂) => N) (TensorProduct.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u2, u3} ι₁ ι₂) => _inst_6) (TensorProduct.addCommMonoid.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (fun (i : Sum.{u2, u3} ι₁ ι₂) => _inst_7) (TensorProduct.module.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5)) (TensorProduct.addCommMonoid.{u1, max u2 u6 u4, max u3 u6 u5} R _inst_1 (MultilinearMap.{u1, u6, u4, u2} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.{u1, u6, u5, u3} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.addCommMonoid.{u1, u6, u4, u2} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.addCommMonoid.{u1, u6, u5, u3} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.module.{u6, u4, u2, u1, u1} ι₁ (fun (_x : ι₁) => N) N₁ (fun (i : ι₁) => _inst_6) _inst_2 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_7) _inst_3 _inst_3 (MultilinearMap.domCoprod'._proof_1.{u1, u4} R _inst_1 N₁ _inst_2 _inst_3)) (MultilinearMap.module.{u6, u5, u3, u1, u1} ι₂ (fun (_x : ι₂) => N) N₂ (fun (i : ι₂) => _inst_6) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_7) _inst_5 _inst_5 (MultilinearMap.domCoprod'._proof_2.{u1, u5} R _inst_1 N₂ _inst_4 _inst_5))) (MultilinearMap.addCommMonoid.{u1, u6, max u4 u5, max u2 u3} R (Sum.{u2, u3} ι₁ ι₂) (fun (_x : Sum.{u2, u3} ι₁ ι₂) => N) (TensorProduct.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u2, u3} ι₁ ι₂) => _inst_6) (TensorProduct.addCommMonoid.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (fun (i : Sum.{u2, u3} ι₁ ι₂) => _inst_7) (TensorProduct.module.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5)) (TensorProduct.module.{u1, max u2 u6 u4, max u3 u6 u5} R _inst_1 (MultilinearMap.{u1, u6, u4, u2} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.{u1, u6, u5, u3} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.addCommMonoid.{u1, u6, u4, u2} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.addCommMonoid.{u1, u6, u5, u3} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.module.{u6, u4, u2, u1, u1} ι₁ (fun (_x : ι₁) => N) N₁ (fun (i : ι₁) => _inst_6) _inst_2 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_7) _inst_3 _inst_3 (MultilinearMap.domCoprod'._proof_1.{u1, u4} R _inst_1 N₁ _inst_2 _inst_3)) (MultilinearMap.module.{u6, u5, u3, u1, u1} ι₂ (fun (_x : ι₂) => N) N₂ (fun (i : ι₂) => _inst_6) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_7) _inst_5 _inst_5 (MultilinearMap.domCoprod'._proof_2.{u1, u5} R _inst_1 N₂ _inst_4 _inst_5))) (MultilinearMap.module.{u6, max u4 u5, max u2 u3, u1, u1} (Sum.{u2, u3} ι₁ ι₂) (fun (_x : Sum.{u2, u3} ι₁ ι₂) => N) (TensorProduct.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (fun (i : Sum.{u2, u3} ι₁ ι₂) => _inst_6) (TensorProduct.addCommMonoid.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u2, u3} ι₁ ι₂) => _inst_7) (TensorProduct.module.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (TensorProduct.module.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (MultilinearMap.domCoprod'._proof_3.{u1, u4, u5} R _inst_1 N₁ _inst_2 _inst_3 N₂ _inst_4 _inst_5))) => (TensorProduct.{u1, max u2 u6 u4, max u3 u6 u5} R _inst_1 (MultilinearMap.{u1, u6, u4, u2} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.{u1, u6, u5, u3} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.addCommMonoid.{u1, u6, u4, u2} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.addCommMonoid.{u1, u6, u5, u3} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.module.{u6, u4, u2, u1, u1} ι₁ (fun (_x : ι₁) => N) N₁ (fun (i : ι₁) => _inst_6) _inst_2 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_7) _inst_3 _inst_3 (MultilinearMap.domCoprod'._proof_1.{u1, u4} R _inst_1 N₁ _inst_2 _inst_3)) (MultilinearMap.module.{u6, u5, u3, u1, u1} ι₂ (fun (_x : ι₂) => N) N₂ (fun (i : ι₂) => _inst_6) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_7) _inst_5 _inst_5 (MultilinearMap.domCoprod'._proof_2.{u1, u5} R _inst_1 N₂ _inst_4 _inst_5))) -> (MultilinearMap.{u1, u6, max u4 u5, max u2 u3} R (Sum.{u2, u3} ι₁ ι₂) (fun (_x : Sum.{u2, u3} ι₁ ι₂) => N) (TensorProduct.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u2, u3} ι₁ ι₂) => _inst_6) (TensorProduct.addCommMonoid.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (fun (i : Sum.{u2, u3} ι₁ ι₂) => _inst_7) (TensorProduct.module.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5))) (LinearMap.hasCoeToFun.{u1, u1, max (max u2 u6 u4) u3 u6 u5, max (max u2 u3) u6 u4 u5} R R (TensorProduct.{u1, max u2 u6 u4, max u3 u6 u5} R _inst_1 (MultilinearMap.{u1, u6, u4, u2} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.{u1, u6, u5, u3} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.addCommMonoid.{u1, u6, u4, u2} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.addCommMonoid.{u1, u6, u5, u3} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.module.{u6, u4, u2, u1, u1} ι₁ (fun (_x : ι₁) => N) N₁ (fun (i : ι₁) => _inst_6) _inst_2 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_7) _inst_3 _inst_3 (MultilinearMap.domCoprod'._proof_1.{u1, u4} R _inst_1 N₁ _inst_2 _inst_3)) (MultilinearMap.module.{u6, u5, u3, u1, u1} ι₂ (fun (_x : ι₂) => N) N₂ (fun (i : ι₂) => _inst_6) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_7) _inst_5 _inst_5 (MultilinearMap.domCoprod'._proof_2.{u1, u5} R _inst_1 N₂ _inst_4 _inst_5))) (MultilinearMap.{u1, u6, max u4 u5, max u2 u3} R (Sum.{u2, u3} ι₁ ι₂) (fun (_x : Sum.{u2, u3} ι₁ ι₂) => N) (TensorProduct.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u2, u3} ι₁ ι₂) => _inst_6) (TensorProduct.addCommMonoid.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (fun (i : Sum.{u2, u3} ι₁ ι₂) => _inst_7) (TensorProduct.module.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5)) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (TensorProduct.addCommMonoid.{u1, max u2 u6 u4, max u3 u6 u5} R _inst_1 (MultilinearMap.{u1, u6, u4, u2} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.{u1, u6, u5, u3} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.addCommMonoid.{u1, u6, u4, u2} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.addCommMonoid.{u1, u6, u5, u3} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.module.{u6, u4, u2, u1, u1} ι₁ (fun (_x : ι₁) => N) N₁ (fun (i : ι₁) => _inst_6) _inst_2 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_7) _inst_3 _inst_3 (MultilinearMap.domCoprod'._proof_1.{u1, u4} R _inst_1 N₁ _inst_2 _inst_3)) (MultilinearMap.module.{u6, u5, u3, u1, u1} ι₂ (fun (_x : ι₂) => N) N₂ (fun (i : ι₂) => _inst_6) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_7) _inst_5 _inst_5 (MultilinearMap.domCoprod'._proof_2.{u1, u5} R _inst_1 N₂ _inst_4 _inst_5))) (MultilinearMap.addCommMonoid.{u1, u6, max u4 u5, max u2 u3} R (Sum.{u2, u3} ι₁ ι₂) (fun (_x : Sum.{u2, u3} ι₁ ι₂) => N) (TensorProduct.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u2, u3} ι₁ ι₂) => _inst_6) (TensorProduct.addCommMonoid.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (fun (i : Sum.{u2, u3} ι₁ ι₂) => _inst_7) (TensorProduct.module.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5)) (TensorProduct.module.{u1, max u2 u6 u4, max u3 u6 u5} R _inst_1 (MultilinearMap.{u1, u6, u4, u2} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.{u1, u6, u5, u3} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.addCommMonoid.{u1, u6, u4, u2} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.addCommMonoid.{u1, u6, u5, u3} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.module.{u6, u4, u2, u1, u1} ι₁ (fun (_x : ι₁) => N) N₁ (fun (i : ι₁) => _inst_6) _inst_2 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_7) _inst_3 _inst_3 (MultilinearMap.domCoprod'._proof_1.{u1, u4} R _inst_1 N₁ _inst_2 _inst_3)) (MultilinearMap.module.{u6, u5, u3, u1, u1} ι₂ (fun (_x : ι₂) => N) N₂ (fun (i : ι₂) => _inst_6) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_7) _inst_5 _inst_5 (MultilinearMap.domCoprod'._proof_2.{u1, u5} R _inst_1 N₂ _inst_4 _inst_5))) (MultilinearMap.module.{u6, max u4 u5, max u2 u3, u1, u1} (Sum.{u2, u3} ι₁ ι₂) (fun (_x : Sum.{u2, u3} ι₁ ι₂) => N) (TensorProduct.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (fun (i : Sum.{u2, u3} ι₁ ι₂) => _inst_6) (TensorProduct.addCommMonoid.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u2, u3} ι₁ ι₂) => _inst_7) (TensorProduct.module.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (TensorProduct.module.{u1, u4, u5} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (MultilinearMap.domCoprod'._proof_3.{u1, u4, u5} R _inst_1 N₁ _inst_2 _inst_3 N₂ _inst_4 _inst_5)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (MultilinearMap.domCoprod'.{u1, u2, u3, u4, u5, u6} R ι₁ ι₂ _inst_1 N₁ _inst_2 _inst_3 N₂ _inst_4 _inst_5 N _inst_6 _inst_7) (TensorProduct.tmul.{u1, max u2 u6 u4, max u3 u6 u5} R _inst_1 (MultilinearMap.{u1, u6, u4, u2} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.{u1, u6, u5, u3} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.addCommMonoid.{u1, u6, u4, u2} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.addCommMonoid.{u1, u6, u5, u3} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.module.{u6, u4, u2, u1, u1} ι₁ (fun (_x : ι₁) => N) N₁ (fun (i : ι₁) => _inst_6) _inst_2 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_7) _inst_3 _inst_3 (MultilinearMap.domCoprod'._proof_1.{u1, u4} R _inst_1 N₁ _inst_2 _inst_3)) (MultilinearMap.module.{u6, u5, u3, u1, u1} ι₂ (fun (_x : ι₂) => N) N₂ (fun (i : ι₂) => _inst_6) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_7) _inst_5 _inst_5 (MultilinearMap.domCoprod'._proof_2.{u1, u5} R _inst_1 N₂ _inst_4 _inst_5)) a b)) (MultilinearMap.domCoprod.{u1, u2, u3, u4, u5, u6} R ι₁ ι₂ _inst_1 N₁ _inst_2 _inst_3 N₂ _inst_4 _inst_5 N _inst_6 _inst_7 a b)
but is expected to have type
  forall {R : Type.{u6}} {ι₁ : Type.{u3}} {ι₂ : Type.{u1}} [_inst_1 : CommSemiring.{u6} R] {N₁ : Type.{u4}} [_inst_2 : AddCommMonoid.{u4} N₁] [_inst_3 : Module.{u6, u4} R N₁ (CommSemiring.toSemiring.{u6} R _inst_1) _inst_2] {N₂ : Type.{u2}} [_inst_4 : AddCommMonoid.{u2} N₂] [_inst_5 : Module.{u6, u2} R N₂ (CommSemiring.toSemiring.{u6} R _inst_1) _inst_4] {N : Type.{u5}} [_inst_6 : AddCommMonoid.{u5} N] [_inst_7 : Module.{u6, u5} R N (CommSemiring.toSemiring.{u6} R _inst_1) _inst_6] (a : MultilinearMap.{u6, u5, u4, u3} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (b : MultilinearMap.{u6, u5, u2, u1} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5), Eq.{max (max (max (max (succ u3) (succ u1)) (succ u4)) (succ u2)) (succ u5)} ((fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6193 : TensorProduct.{u6, max (max u3 u4) u5, max (max u1 u2) u5} R _inst_1 (MultilinearMap.{u6, u5, u4, u3} R ι₁ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.438 : ι₁) => N) N₁ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.{u6, u5, u2, u1} R ι₂ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.450 : ι₂) => N) N₂ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.addCommMonoid.{u6, u5, u4, u3} R ι₁ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.438 : ι₁) => N) N₁ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.addCommMonoid.{u6, u5, u2, u1} R ι₂ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.450 : ι₂) => N) N₂ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u5, u4, u3, u6, u6} ι₁ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.438 : ι₁) => N) N₁ (fun (i : ι₁) => _inst_6) _inst_2 R R (CommSemiring.toSemiring.{u6} R _inst_1) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_7) _inst_3 _inst_3 (smulCommClass_self.{u6, u4} R N₁ (CommSemiring.toCommMonoid.{u6} R _inst_1) (MulActionWithZero.toMulAction.{u6, u4} R N₁ (Semiring.toMonoidWithZero.{u6} R (CommSemiring.toSemiring.{u6} R _inst_1)) (AddMonoid.toZero.{u4} N₁ (AddCommMonoid.toAddMonoid.{u4} N₁ _inst_2)) (Module.toMulActionWithZero.{u6, u4} R N₁ (CommSemiring.toSemiring.{u6} R _inst_1) _inst_2 _inst_3)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u5, u2, u1, u6, u6} ι₂ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.450 : ι₂) => N) N₂ (fun (i : ι₂) => _inst_6) _inst_4 R R (CommSemiring.toSemiring.{u6} R _inst_1) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_7) _inst_5 _inst_5 (smulCommClass_self.{u6, u2} R N₂ (CommSemiring.toCommMonoid.{u6} R _inst_1) (MulActionWithZero.toMulAction.{u6, u2} R N₂ (Semiring.toMonoidWithZero.{u6} R (CommSemiring.toSemiring.{u6} R _inst_1)) (AddMonoid.toZero.{u2} N₂ (AddCommMonoid.toAddMonoid.{u2} N₂ _inst_4)) (Module.toMulActionWithZero.{u6, u2} R N₂ (CommSemiring.toSemiring.{u6} R _inst_1) _inst_4 _inst_5))))) => MultilinearMap.{u6, u5, max u2 u4, max u3 u1} R (Sum.{u3, u1} ι₁ ι₂) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.462 : Sum.{u3, u1} ι₁ ι₂) => N) (TensorProduct.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : Sum.{u3, u1} ι₁ ι₂) => _inst_6) (TensorProduct.addCommMonoid.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (fun (i : Sum.{u3, u1} ι₁ ι₂) => _inst_7) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5)) (TensorProduct.tmul.{u6, max (max u5 u4) u3, max (max u5 u2) u1} R _inst_1 (MultilinearMap.{u6, u5, u4, u3} R ι₁ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.438 : ι₁) => N) N₁ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.{u6, u5, u2, u1} R ι₂ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.450 : ι₂) => N) N₂ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.addCommMonoid.{u6, u5, u4, u3} R ι₁ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.438 : ι₁) => N) N₁ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.addCommMonoid.{u6, u5, u2, u1} R ι₂ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.450 : ι₂) => N) N₂ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u5, u4, u3, u6, u6} ι₁ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.438 : ι₁) => N) N₁ (fun (i : ι₁) => _inst_6) _inst_2 R R (CommSemiring.toSemiring.{u6} R _inst_1) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_7) _inst_3 _inst_3 (smulCommClass_self.{u6, u4} R N₁ (CommSemiring.toCommMonoid.{u6} R _inst_1) (MulActionWithZero.toMulAction.{u6, u4} R N₁ (Semiring.toMonoidWithZero.{u6} R (CommSemiring.toSemiring.{u6} R _inst_1)) (AddMonoid.toZero.{u4} N₁ (AddCommMonoid.toAddMonoid.{u4} N₁ _inst_2)) (Module.toMulActionWithZero.{u6, u4} R N₁ (CommSemiring.toSemiring.{u6} R _inst_1) _inst_2 _inst_3)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u5, u2, u1, u6, u6} ι₂ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.450 : ι₂) => N) N₂ (fun (i : ι₂) => _inst_6) _inst_4 R R (CommSemiring.toSemiring.{u6} R _inst_1) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_7) _inst_5 _inst_5 (smulCommClass_self.{u6, u2} R N₂ (CommSemiring.toCommMonoid.{u6} R _inst_1) (MulActionWithZero.toMulAction.{u6, u2} R N₂ (Semiring.toMonoidWithZero.{u6} R (CommSemiring.toSemiring.{u6} R _inst_1)) (AddMonoid.toZero.{u2} N₂ (AddCommMonoid.toAddMonoid.{u2} N₂ _inst_4)) (Module.toMulActionWithZero.{u6, u2} R N₂ (CommSemiring.toSemiring.{u6} R _inst_1) _inst_4 _inst_5)))) a b)) (FunLike.coe.{max (max (max (max (succ u5) (succ u2)) (succ u4)) (succ u1)) (succ u3), max (max (max (max (succ u5) (succ u2)) (succ u4)) (succ u1)) (succ u3), max (max (max (max (succ u5) (succ u2)) (succ u4)) (succ u1)) (succ u3)} (LinearMap.{u6, u6, max (max (max u1 u2) u5) (max u3 u4) u5, max (max (max u3 u1) u2 u4) u5} R R (CommSemiring.toSemiring.{u6} R _inst_1) (CommSemiring.toSemiring.{u6} R _inst_1) (RingHom.id.{u6} R (Semiring.toNonAssocSemiring.{u6} R (CommSemiring.toSemiring.{u6} R _inst_1))) (TensorProduct.{u6, max (max u3 u4) u5, max (max u1 u2) u5} R _inst_1 (MultilinearMap.{u6, u5, u4, u3} R ι₁ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.438 : ι₁) => N) N₁ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.{u6, u5, u2, u1} R ι₂ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.450 : ι₂) => N) N₂ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.addCommMonoid.{u6, u5, u4, u3} R ι₁ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.438 : ι₁) => N) N₁ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.addCommMonoid.{u6, u5, u2, u1} R ι₂ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.450 : ι₂) => N) N₂ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u5, u4, u3, u6, u6} ι₁ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.438 : ι₁) => N) N₁ (fun (i : ι₁) => _inst_6) _inst_2 R R (CommSemiring.toSemiring.{u6} R _inst_1) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_7) _inst_3 _inst_3 (smulCommClass_self.{u6, u4} R N₁ (CommSemiring.toCommMonoid.{u6} R _inst_1) (MulActionWithZero.toMulAction.{u6, u4} R N₁ (Semiring.toMonoidWithZero.{u6} R (CommSemiring.toSemiring.{u6} R _inst_1)) (AddMonoid.toZero.{u4} N₁ (AddCommMonoid.toAddMonoid.{u4} N₁ _inst_2)) (Module.toMulActionWithZero.{u6, u4} R N₁ (CommSemiring.toSemiring.{u6} R _inst_1) _inst_2 _inst_3)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u5, u2, u1, u6, u6} ι₂ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.450 : ι₂) => N) N₂ (fun (i : ι₂) => _inst_6) _inst_4 R R (CommSemiring.toSemiring.{u6} R _inst_1) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_7) _inst_5 _inst_5 (smulCommClass_self.{u6, u2} R N₂ (CommSemiring.toCommMonoid.{u6} R _inst_1) (MulActionWithZero.toMulAction.{u6, u2} R N₂ (Semiring.toMonoidWithZero.{u6} R (CommSemiring.toSemiring.{u6} R _inst_1)) (AddMonoid.toZero.{u2} N₂ (AddCommMonoid.toAddMonoid.{u2} N₂ _inst_4)) (Module.toMulActionWithZero.{u6, u2} R N₂ (CommSemiring.toSemiring.{u6} R _inst_1) _inst_4 _inst_5))))) (MultilinearMap.{u6, u5, max u2 u4, max u3 u1} R (Sum.{u3, u1} ι₁ ι₂) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.462 : Sum.{u3, u1} ι₁ ι₂) => N) (TensorProduct.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : Sum.{u3, u1} ι₁ ι₂) => _inst_6) (TensorProduct.addCommMonoid.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (fun (i : Sum.{u3, u1} ι₁ ι₂) => _inst_7) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5)) (TensorProduct.addCommMonoid.{u6, max (max u3 u4) u5, max (max u1 u2) u5} R _inst_1 (MultilinearMap.{u6, u5, u4, u3} R ι₁ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.438 : ι₁) => N) N₁ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.{u6, u5, u2, u1} R ι₂ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.450 : ι₂) => N) N₂ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.addCommMonoid.{u6, u5, u4, u3} R ι₁ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.438 : ι₁) => N) N₁ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.addCommMonoid.{u6, u5, u2, u1} R ι₂ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.450 : ι₂) => N) N₂ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u5, u4, u3, u6, u6} ι₁ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.438 : ι₁) => N) N₁ (fun (i : ι₁) => _inst_6) _inst_2 R R (CommSemiring.toSemiring.{u6} R _inst_1) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_7) _inst_3 _inst_3 (smulCommClass_self.{u6, u4} R N₁ (CommSemiring.toCommMonoid.{u6} R _inst_1) (MulActionWithZero.toMulAction.{u6, u4} R N₁ (Semiring.toMonoidWithZero.{u6} R (CommSemiring.toSemiring.{u6} R _inst_1)) (AddMonoid.toZero.{u4} N₁ (AddCommMonoid.toAddMonoid.{u4} N₁ _inst_2)) (Module.toMulActionWithZero.{u6, u4} R N₁ (CommSemiring.toSemiring.{u6} R _inst_1) _inst_2 _inst_3)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u5, u2, u1, u6, u6} ι₂ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.450 : ι₂) => N) N₂ (fun (i : ι₂) => _inst_6) _inst_4 R R (CommSemiring.toSemiring.{u6} R _inst_1) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_7) _inst_5 _inst_5 (smulCommClass_self.{u6, u2} R N₂ (CommSemiring.toCommMonoid.{u6} R _inst_1) (MulActionWithZero.toMulAction.{u6, u2} R N₂ (Semiring.toMonoidWithZero.{u6} R (CommSemiring.toSemiring.{u6} R _inst_1)) (AddMonoid.toZero.{u2} N₂ (AddCommMonoid.toAddMonoid.{u2} N₂ _inst_4)) (Module.toMulActionWithZero.{u6, u2} R N₂ (CommSemiring.toSemiring.{u6} R _inst_1) _inst_4 _inst_5))))) (MultilinearMap.addCommMonoid.{u6, u5, max u4 u2, max u3 u1} R (Sum.{u3, u1} ι₁ ι₂) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.462 : Sum.{u3, u1} ι₁ ι₂) => N) (TensorProduct.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : Sum.{u3, u1} ι₁ ι₂) => _inst_6) (TensorProduct.addCommMonoid.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (fun (i : Sum.{u3, u1} ι₁ ι₂) => _inst_7) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, max (max u3 u4) u5, max (max u1 u2) u5} R _inst_1 (MultilinearMap.{u6, u5, u4, u3} R ι₁ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.438 : ι₁) => N) N₁ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.{u6, u5, u2, u1} R ι₂ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.450 : ι₂) => N) N₂ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.addCommMonoid.{u6, u5, u4, u3} R ι₁ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.438 : ι₁) => N) N₁ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.addCommMonoid.{u6, u5, u2, u1} R ι₂ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.450 : ι₂) => N) N₂ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u5, u4, u3, u6, u6} ι₁ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.438 : ι₁) => N) N₁ (fun (i : ι₁) => _inst_6) _inst_2 R R (CommSemiring.toSemiring.{u6} R _inst_1) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_7) _inst_3 _inst_3 (smulCommClass_self.{u6, u4} R N₁ (CommSemiring.toCommMonoid.{u6} R _inst_1) (MulActionWithZero.toMulAction.{u6, u4} R N₁ (Semiring.toMonoidWithZero.{u6} R (CommSemiring.toSemiring.{u6} R _inst_1)) (AddMonoid.toZero.{u4} N₁ (AddCommMonoid.toAddMonoid.{u4} N₁ _inst_2)) (Module.toMulActionWithZero.{u6, u4} R N₁ (CommSemiring.toSemiring.{u6} R _inst_1) _inst_2 _inst_3)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u5, u2, u1, u6, u6} ι₂ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.450 : ι₂) => N) N₂ (fun (i : ι₂) => _inst_6) _inst_4 R R (CommSemiring.toSemiring.{u6} R _inst_1) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_7) _inst_5 _inst_5 (smulCommClass_self.{u6, u2} R N₂ (CommSemiring.toCommMonoid.{u6} R _inst_1) (MulActionWithZero.toMulAction.{u6, u2} R N₂ (Semiring.toMonoidWithZero.{u6} R (CommSemiring.toSemiring.{u6} R _inst_1)) (AddMonoid.toZero.{u2} N₂ (AddCommMonoid.toAddMonoid.{u2} N₂ _inst_4)) (Module.toMulActionWithZero.{u6, u2} R N₂ (CommSemiring.toSemiring.{u6} R _inst_1) _inst_4 _inst_5))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u5, max u4 u2, max u3 u1, u6, u6} (Sum.{u3, u1} ι₁ ι₂) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.462 : Sum.{u3, u1} ι₁ ι₂) => N) (TensorProduct.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (fun (i : Sum.{u3, u1} ι₁ ι₂) => _inst_6) (TensorProduct.addCommMonoid.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) R R (CommSemiring.toSemiring.{u6} R _inst_1) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : Sum.{u3, u1} ι₁ ι₂) => _inst_7) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (smulCommClass_self.{u6, max u4 u2} R (TensorProduct.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (CommSemiring.toCommMonoid.{u6} R _inst_1) (MulActionWithZero.toMulAction.{u6, max u4 u2} R (TensorProduct.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (Semiring.toMonoidWithZero.{u6} R (CommSemiring.toSemiring.{u6} R _inst_1)) (AddMonoid.toZero.{max u4 u2} (TensorProduct.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (AddCommMonoid.toAddMonoid.{max u4 u2} (TensorProduct.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (TensorProduct.addCommMonoid.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5))) (Module.toMulActionWithZero.{u6, max u4 u2} R (TensorProduct.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (CommSemiring.toSemiring.{u6} R _inst_1) (TensorProduct.addCommMonoid.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5)))))) (TensorProduct.{u6, max (max u3 u4) u5, max (max u1 u2) u5} R _inst_1 (MultilinearMap.{u6, u5, u4, u3} R ι₁ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.438 : ι₁) => N) N₁ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.{u6, u5, u2, u1} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.addCommMonoid.{u6, u5, u4, u3} R ι₁ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.438 : ι₁) => N) N₁ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.addCommMonoid.{u6, u5, u2, u1} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u5, u4, u3, u6, u6} ι₁ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.438 : ι₁) => N) N₁ (fun (i : ι₁) => _inst_6) _inst_2 R R (CommSemiring.toSemiring.{u6} R _inst_1) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_7) _inst_3 _inst_3 (smulCommClass_self.{u6, u4} R N₁ (CommSemiring.toCommMonoid.{u6} R _inst_1) (MulActionWithZero.toMulAction.{u6, u4} R N₁ (Semiring.toMonoidWithZero.{u6} R (CommSemiring.toSemiring.{u6} R _inst_1)) (AddMonoid.toZero.{u4} N₁ (AddCommMonoid.toAddMonoid.{u4} N₁ _inst_2)) (Module.toMulActionWithZero.{u6, u4} R N₁ (CommSemiring.toSemiring.{u6} R _inst_1) _inst_2 _inst_3)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u5, u2, u1, u6, u6} ι₂ (fun (_x : ι₂) => N) N₂ (fun (i : ι₂) => _inst_6) _inst_4 R R (CommSemiring.toSemiring.{u6} R _inst_1) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_7) _inst_5 _inst_5 (smulCommClass_self.{u6, u2} R N₂ (CommSemiring.toCommMonoid.{u6} R _inst_1) (MulActionWithZero.toMulAction.{u6, u2} R N₂ (Semiring.toMonoidWithZero.{u6} R (CommSemiring.toSemiring.{u6} R _inst_1)) (AddMonoid.toZero.{u2} N₂ (AddCommMonoid.toAddMonoid.{u2} N₂ _inst_4)) (Module.toMulActionWithZero.{u6, u2} R N₂ (CommSemiring.toSemiring.{u6} R _inst_1) _inst_4 _inst_5))))) (fun (_x : TensorProduct.{u6, max (max u3 u4) u5, max (max u1 u2) u5} R _inst_1 (MultilinearMap.{u6, u5, u4, u3} R ι₁ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.438 : ι₁) => N) N₁ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.{u6, u5, u2, u1} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.addCommMonoid.{u6, u5, u4, u3} R ι₁ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.438 : ι₁) => N) N₁ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.addCommMonoid.{u6, u5, u2, u1} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u5, u4, u3, u6, u6} ι₁ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.438 : ι₁) => N) N₁ (fun (i : ι₁) => _inst_6) _inst_2 R R (CommSemiring.toSemiring.{u6} R _inst_1) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_7) _inst_3 _inst_3 (smulCommClass_self.{u6, u4} R N₁ (CommSemiring.toCommMonoid.{u6} R _inst_1) (MulActionWithZero.toMulAction.{u6, u4} R N₁ (Semiring.toMonoidWithZero.{u6} R (CommSemiring.toSemiring.{u6} R _inst_1)) (AddMonoid.toZero.{u4} N₁ (AddCommMonoid.toAddMonoid.{u4} N₁ _inst_2)) (Module.toMulActionWithZero.{u6, u4} R N₁ (CommSemiring.toSemiring.{u6} R _inst_1) _inst_2 _inst_3)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u5, u2, u1, u6, u6} ι₂ (fun (_x : ι₂) => N) N₂ (fun (i : ι₂) => _inst_6) _inst_4 R R (CommSemiring.toSemiring.{u6} R _inst_1) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_7) _inst_5 _inst_5 (smulCommClass_self.{u6, u2} R N₂ (CommSemiring.toCommMonoid.{u6} R _inst_1) (MulActionWithZero.toMulAction.{u6, u2} R N₂ (Semiring.toMonoidWithZero.{u6} R (CommSemiring.toSemiring.{u6} R _inst_1)) (AddMonoid.toZero.{u2} N₂ (AddCommMonoid.toAddMonoid.{u2} N₂ _inst_4)) (Module.toMulActionWithZero.{u6, u2} R N₂ (CommSemiring.toSemiring.{u6} R _inst_1) _inst_4 _inst_5))))) => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6193 : TensorProduct.{u6, max (max u3 u4) u5, max (max u1 u2) u5} R _inst_1 (MultilinearMap.{u6, u5, u4, u3} R ι₁ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.438 : ι₁) => N) N₁ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.{u6, u5, u2, u1} R ι₂ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.450 : ι₂) => N) N₂ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.addCommMonoid.{u6, u5, u4, u3} R ι₁ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.438 : ι₁) => N) N₁ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.addCommMonoid.{u6, u5, u2, u1} R ι₂ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.450 : ι₂) => N) N₂ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u5, u4, u3, u6, u6} ι₁ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.438 : ι₁) => N) N₁ (fun (i : ι₁) => _inst_6) _inst_2 R R (CommSemiring.toSemiring.{u6} R _inst_1) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_7) _inst_3 _inst_3 (smulCommClass_self.{u6, u4} R N₁ (CommSemiring.toCommMonoid.{u6} R _inst_1) (MulActionWithZero.toMulAction.{u6, u4} R N₁ (Semiring.toMonoidWithZero.{u6} R (CommSemiring.toSemiring.{u6} R _inst_1)) (AddMonoid.toZero.{u4} N₁ (AddCommMonoid.toAddMonoid.{u4} N₁ _inst_2)) (Module.toMulActionWithZero.{u6, u4} R N₁ (CommSemiring.toSemiring.{u6} R _inst_1) _inst_2 _inst_3)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u5, u2, u1, u6, u6} ι₂ (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.450 : ι₂) => N) N₂ (fun (i : ι₂) => _inst_6) _inst_4 R R (CommSemiring.toSemiring.{u6} R _inst_1) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_7) _inst_5 _inst_5 (smulCommClass_self.{u6, u2} R N₂ (CommSemiring.toCommMonoid.{u6} R _inst_1) (MulActionWithZero.toMulAction.{u6, u2} R N₂ (Semiring.toMonoidWithZero.{u6} R (CommSemiring.toSemiring.{u6} R _inst_1)) (AddMonoid.toZero.{u2} N₂ (AddCommMonoid.toAddMonoid.{u2} N₂ _inst_4)) (Module.toMulActionWithZero.{u6, u2} R N₂ (CommSemiring.toSemiring.{u6} R _inst_1) _inst_4 _inst_5))))) => MultilinearMap.{u6, u5, max u2 u4, max u3 u1} R (Sum.{u3, u1} ι₁ ι₂) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.462 : Sum.{u3, u1} ι₁ ι₂) => N) (TensorProduct.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : Sum.{u3, u1} ι₁ ι₂) => _inst_6) (TensorProduct.addCommMonoid.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (fun (i : Sum.{u3, u1} ι₁ ι₂) => _inst_7) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5)) _x) (LinearMap.instFunLikeLinearMap.{u6, u6, max (max (max (max u5 u2) u4) u1) u3, max (max (max (max u5 u2) u4) u1) u3} R R (TensorProduct.{u6, max (max u3 u4) u5, max (max u1 u2) u5} R _inst_1 (MultilinearMap.{u6, u5, u4, u3} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.{u6, u5, u2, u1} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.addCommMonoid.{u6, u5, u4, u3} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.addCommMonoid.{u6, u5, u2, u1} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u5, u4, u3, u6, u6} ι₁ (fun (_x : ι₁) => N) N₁ (fun (i : ι₁) => _inst_6) _inst_2 R R (CommSemiring.toSemiring.{u6} R _inst_1) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_7) _inst_3 _inst_3 (smulCommClass_self.{u6, u4} R N₁ (CommSemiring.toCommMonoid.{u6} R _inst_1) (MulActionWithZero.toMulAction.{u6, u4} R N₁ (Semiring.toMonoidWithZero.{u6} R (CommSemiring.toSemiring.{u6} R _inst_1)) (AddMonoid.toZero.{u4} N₁ (AddCommMonoid.toAddMonoid.{u4} N₁ _inst_2)) (Module.toMulActionWithZero.{u6, u4} R N₁ (CommSemiring.toSemiring.{u6} R _inst_1) _inst_2 _inst_3)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u5, u2, u1, u6, u6} ι₂ (fun (_x : ι₂) => N) N₂ (fun (i : ι₂) => _inst_6) _inst_4 R R (CommSemiring.toSemiring.{u6} R _inst_1) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_7) _inst_5 _inst_5 (smulCommClass_self.{u6, u2} R N₂ (CommSemiring.toCommMonoid.{u6} R _inst_1) (MulActionWithZero.toMulAction.{u6, u2} R N₂ (Semiring.toMonoidWithZero.{u6} R (CommSemiring.toSemiring.{u6} R _inst_1)) (AddMonoid.toZero.{u2} N₂ (AddCommMonoid.toAddMonoid.{u2} N₂ _inst_4)) (Module.toMulActionWithZero.{u6, u2} R N₂ (CommSemiring.toSemiring.{u6} R _inst_1) _inst_4 _inst_5))))) (MultilinearMap.{u6, u5, max u2 u4, max u3 u1} R (Sum.{u3, u1} ι₁ ι₂) (fun (_x : Sum.{u3, u1} ι₁ ι₂) => N) (TensorProduct.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : Sum.{u3, u1} ι₁ ι₂) => _inst_6) (TensorProduct.addCommMonoid.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (fun (i : Sum.{u3, u1} ι₁ ι₂) => _inst_7) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5)) (CommSemiring.toSemiring.{u6} R _inst_1) (CommSemiring.toSemiring.{u6} R _inst_1) (TensorProduct.addCommMonoid.{u6, max (max u3 u4) u5, max (max u1 u2) u5} R _inst_1 (MultilinearMap.{u6, u5, u4, u3} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.{u6, u5, u2, u1} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.addCommMonoid.{u6, u5, u4, u3} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.addCommMonoid.{u6, u5, u2, u1} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u5, u4, u3, u6, u6} ι₁ (fun (_x : ι₁) => N) N₁ (fun (i : ι₁) => _inst_6) _inst_2 R R (CommSemiring.toSemiring.{u6} R _inst_1) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_7) _inst_3 _inst_3 (smulCommClass_self.{u6, u4} R N₁ (CommSemiring.toCommMonoid.{u6} R _inst_1) (MulActionWithZero.toMulAction.{u6, u4} R N₁ (Semiring.toMonoidWithZero.{u6} R (CommSemiring.toSemiring.{u6} R _inst_1)) (AddMonoid.toZero.{u4} N₁ (AddCommMonoid.toAddMonoid.{u4} N₁ _inst_2)) (Module.toMulActionWithZero.{u6, u4} R N₁ (CommSemiring.toSemiring.{u6} R _inst_1) _inst_2 _inst_3)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u5, u2, u1, u6, u6} ι₂ (fun (_x : ι₂) => N) N₂ (fun (i : ι₂) => _inst_6) _inst_4 R R (CommSemiring.toSemiring.{u6} R _inst_1) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_7) _inst_5 _inst_5 (smulCommClass_self.{u6, u2} R N₂ (CommSemiring.toCommMonoid.{u6} R _inst_1) (MulActionWithZero.toMulAction.{u6, u2} R N₂ (Semiring.toMonoidWithZero.{u6} R (CommSemiring.toSemiring.{u6} R _inst_1)) (AddMonoid.toZero.{u2} N₂ (AddCommMonoid.toAddMonoid.{u2} N₂ _inst_4)) (Module.toMulActionWithZero.{u6, u2} R N₂ (CommSemiring.toSemiring.{u6} R _inst_1) _inst_4 _inst_5))))) (MultilinearMap.addCommMonoid.{u6, u5, max u4 u2, max u3 u1} R (Sum.{u3, u1} ι₁ ι₂) (fun (_x : Sum.{u3, u1} ι₁ ι₂) => N) (TensorProduct.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : Sum.{u3, u1} ι₁ ι₂) => _inst_6) (TensorProduct.addCommMonoid.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (fun (i : Sum.{u3, u1} ι₁ ι₂) => _inst_7) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, max (max u3 u4) u5, max (max u1 u2) u5} R _inst_1 (MultilinearMap.{u6, u5, u4, u3} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.{u6, u5, u2, u1} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.addCommMonoid.{u6, u5, u4, u3} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.addCommMonoid.{u6, u5, u2, u1} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u5, u4, u3, u6, u6} ι₁ (fun (_x : ι₁) => N) N₁ (fun (i : ι₁) => _inst_6) _inst_2 R R (CommSemiring.toSemiring.{u6} R _inst_1) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_7) _inst_3 _inst_3 (smulCommClass_self.{u6, u4} R N₁ (CommSemiring.toCommMonoid.{u6} R _inst_1) (MulActionWithZero.toMulAction.{u6, u4} R N₁ (Semiring.toMonoidWithZero.{u6} R (CommSemiring.toSemiring.{u6} R _inst_1)) (AddMonoid.toZero.{u4} N₁ (AddCommMonoid.toAddMonoid.{u4} N₁ _inst_2)) (Module.toMulActionWithZero.{u6, u4} R N₁ (CommSemiring.toSemiring.{u6} R _inst_1) _inst_2 _inst_3)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u5, u2, u1, u6, u6} ι₂ (fun (_x : ι₂) => N) N₂ (fun (i : ι₂) => _inst_6) _inst_4 R R (CommSemiring.toSemiring.{u6} R _inst_1) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_7) _inst_5 _inst_5 (smulCommClass_self.{u6, u2} R N₂ (CommSemiring.toCommMonoid.{u6} R _inst_1) (MulActionWithZero.toMulAction.{u6, u2} R N₂ (Semiring.toMonoidWithZero.{u6} R (CommSemiring.toSemiring.{u6} R _inst_1)) (AddMonoid.toZero.{u2} N₂ (AddCommMonoid.toAddMonoid.{u2} N₂ _inst_4)) (Module.toMulActionWithZero.{u6, u2} R N₂ (CommSemiring.toSemiring.{u6} R _inst_1) _inst_4 _inst_5))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u5, max u4 u2, max u3 u1, u6, u6} (Sum.{u3, u1} ι₁ ι₂) (fun (_x : Sum.{u3, u1} ι₁ ι₂) => N) (TensorProduct.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (fun (i : Sum.{u3, u1} ι₁ ι₂) => _inst_6) (TensorProduct.addCommMonoid.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) R R (CommSemiring.toSemiring.{u6} R _inst_1) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : Sum.{u3, u1} ι₁ ι₂) => _inst_7) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (smulCommClass_self.{u6, max u4 u2} R (TensorProduct.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (CommSemiring.toCommMonoid.{u6} R _inst_1) (MulActionWithZero.toMulAction.{u6, max u4 u2} R (TensorProduct.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (Semiring.toMonoidWithZero.{u6} R (CommSemiring.toSemiring.{u6} R _inst_1)) (AddMonoid.toZero.{max u4 u2} (TensorProduct.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (AddCommMonoid.toAddMonoid.{max u4 u2} (TensorProduct.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (TensorProduct.addCommMonoid.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5))) (Module.toMulActionWithZero.{u6, max u4 u2} R (TensorProduct.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (CommSemiring.toSemiring.{u6} R _inst_1) (TensorProduct.addCommMonoid.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5))))) (RingHom.id.{u6} R (Semiring.toNonAssocSemiring.{u6} R (CommSemiring.toSemiring.{u6} R _inst_1)))) (MultilinearMap.domCoprod'.{u6, u3, u1, u4, u2, u5} R ι₁ ι₂ _inst_1 N₁ _inst_2 _inst_3 N₂ _inst_4 _inst_5 N _inst_6 _inst_7) (TensorProduct.tmul.{u6, max (max u5 u4) u3, max (max u5 u2) u1} R _inst_1 (MultilinearMap.{u6, u5, u4, u3} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.{u6, u5, u2, u1} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.addCommMonoid.{u6, u5, u4, u3} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (MultilinearMap.addCommMonoid.{u6, u5, u2, u1} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u5, u4, u3, u6, u6} ι₁ (fun (_x : ι₁) => N) N₁ (fun (i : ι₁) => _inst_6) _inst_2 R R (CommSemiring.toSemiring.{u6} R _inst_1) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₁) => _inst_7) _inst_3 _inst_3 (smulCommClass_self.{u6, u4} R N₁ (CommSemiring.toCommMonoid.{u6} R _inst_1) (MulActionWithZero.toMulAction.{u6, u4} R N₁ (Semiring.toMonoidWithZero.{u6} R (CommSemiring.toSemiring.{u6} R _inst_1)) (AddMonoid.toZero.{u4} N₁ (AddCommMonoid.toAddMonoid.{u4} N₁ _inst_2)) (Module.toMulActionWithZero.{u6, u4} R N₁ (CommSemiring.toSemiring.{u6} R _inst_1) _inst_2 _inst_3)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u5, u2, u1, u6, u6} ι₂ (fun (_x : ι₂) => N) N₂ (fun (i : ι₂) => _inst_6) _inst_4 R R (CommSemiring.toSemiring.{u6} R _inst_1) (CommSemiring.toSemiring.{u6} R _inst_1) (fun (i : ι₂) => _inst_7) _inst_5 _inst_5 (smulCommClass_self.{u6, u2} R N₂ (CommSemiring.toCommMonoid.{u6} R _inst_1) (MulActionWithZero.toMulAction.{u6, u2} R N₂ (Semiring.toMonoidWithZero.{u6} R (CommSemiring.toSemiring.{u6} R _inst_1)) (AddMonoid.toZero.{u2} N₂ (AddCommMonoid.toAddMonoid.{u2} N₂ _inst_4)) (Module.toMulActionWithZero.{u6, u2} R N₂ (CommSemiring.toSemiring.{u6} R _inst_1) _inst_4 _inst_5)))) a b)) (MultilinearMap.domCoprod.{u6, u3, u1, u4, u2, u5} R ι₁ ι₂ _inst_1 N₁ _inst_2 _inst_3 N₂ _inst_4 _inst_5 N _inst_6 _inst_7 a b)
Case conversion may be inaccurate. Consider using '#align multilinear_map.dom_coprod'_apply MultilinearMap.domCoprod'_applyₓ'. -/
@[simp]
theorem domCoprod'_apply (a : MultilinearMap R (fun _ : ι₁ => N) N₁)
    (b : MultilinearMap R (fun _ : ι₂ => N) N₂) : domCoprod' (a ⊗ₜ[R] b) = domCoprod a b :=
  rfl
#align multilinear_map.dom_coprod'_apply MultilinearMap.domCoprod'_apply

/- warning: multilinear_map.dom_coprod_dom_dom_congr_sum_congr -> MultilinearMap.domCoprod_domDomCongr_sumCongr is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι₁ : Type.{u2}} {ι₂ : Type.{u3}} {ι₃ : Type.{u4}} {ι₄ : Type.{u5}} [_inst_1 : CommSemiring.{u1} R] {N₁ : Type.{u6}} [_inst_2 : AddCommMonoid.{u6} N₁] [_inst_3 : Module.{u1, u6} R N₁ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_2] {N₂ : Type.{u7}} [_inst_4 : AddCommMonoid.{u7} N₂] [_inst_5 : Module.{u1, u7} R N₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] {N : Type.{u8}} [_inst_6 : AddCommMonoid.{u8} N] [_inst_7 : Module.{u1, u8} R N (CommSemiring.toSemiring.{u1} R _inst_1) _inst_6] (a : MultilinearMap.{u1, u8, u6, u2} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (b : MultilinearMap.{u1, u8, u7, u3} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (σa : Equiv.{succ u2, succ u4} ι₁ ι₃) (σb : Equiv.{succ u3, succ u5} ι₂ ι₄), Eq.{max (succ (max u4 u5)) (succ u8) (succ (max u6 u7))} (MultilinearMap.{u1, u8, max u6 u7, max u4 u5} R (Sum.{u4, u5} ι₃ ι₄) (fun (i : Sum.{u4, u5} ι₃ ι₄) => N) (TensorProduct.{u1, u6, u7} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι₃ ι₄) => _inst_6) (TensorProduct.addCommMonoid.{u1, u6, u7} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (fun (i : Sum.{u4, u5} ι₃ ι₄) => _inst_7) (TensorProduct.module.{u1, u6, u7} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5)) (MultilinearMap.domDomCongr.{u1, u8, max u6 u7, max u2 u3, max u4 u5} R N (TensorProduct.{u1, u6, u7} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_6 (TensorProduct.addCommMonoid.{u1, u6, u7} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) _inst_7 (TensorProduct.module.{u1, u6, u7} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (Sum.{u2, u3} ι₁ ι₂) (Sum.{u4, u5} ι₃ ι₄) (Equiv.sumCongr.{u2, u3, u4, u5} ι₁ ι₂ ι₃ ι₄ σa σb) (MultilinearMap.domCoprod.{u1, u2, u3, u6, u7, u8} R ι₁ ι₂ _inst_1 N₁ _inst_2 _inst_3 N₂ _inst_4 _inst_5 N _inst_6 _inst_7 a b)) (MultilinearMap.domCoprod.{u1, u4, u5, u6, u7, u8} R ι₃ ι₄ _inst_1 N₁ _inst_2 _inst_3 N₂ _inst_4 _inst_5 N _inst_6 _inst_7 (MultilinearMap.domDomCongr.{u1, u8, u6, u2, u4} R N N₁ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_6 _inst_2 _inst_7 _inst_3 ι₁ ι₃ σa a) (MultilinearMap.domDomCongr.{u1, u8, u7, u3, u5} R N N₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_6 _inst_4 _inst_7 _inst_5 ι₂ ι₄ σb b))
but is expected to have type
  forall {R : Type.{u8}} {ι₁ : Type.{u5}} {ι₂ : Type.{u3}} {ι₃ : Type.{u2}} {ι₄ : Type.{u1}} [_inst_1 : CommSemiring.{u8} R] {N₁ : Type.{u6}} [_inst_2 : AddCommMonoid.{u6} N₁] [_inst_3 : Module.{u8, u6} R N₁ (CommSemiring.toSemiring.{u8} R _inst_1) _inst_2] {N₂ : Type.{u4}} [_inst_4 : AddCommMonoid.{u4} N₂] [_inst_5 : Module.{u8, u4} R N₂ (CommSemiring.toSemiring.{u8} R _inst_1) _inst_4] {N : Type.{u7}} [_inst_6 : AddCommMonoid.{u7} N] [_inst_7 : Module.{u8, u7} R N (CommSemiring.toSemiring.{u8} R _inst_1) _inst_6] (a : MultilinearMap.{u8, u7, u6, u5} R ι₁ (fun (_x : ι₁) => N) N₁ (CommSemiring.toSemiring.{u8} R _inst_1) (fun (i : ι₁) => _inst_6) _inst_2 (fun (i : ι₁) => _inst_7) _inst_3) (b : MultilinearMap.{u8, u7, u4, u3} R ι₂ (fun (_x : ι₂) => N) N₂ (CommSemiring.toSemiring.{u8} R _inst_1) (fun (i : ι₂) => _inst_6) _inst_4 (fun (i : ι₂) => _inst_7) _inst_5) (σa : Equiv.{succ u5, succ u2} ι₁ ι₃) (σb : Equiv.{succ u3, succ u1} ι₂ ι₄), Eq.{max (max (max (max (succ u2) (succ u1)) (succ u6)) (succ u4)) (succ u7)} (MultilinearMap.{u8, u7, max u6 u4, max u2 u1} R (Sum.{u2, u1} ι₃ ι₄) (fun (i : Sum.{u2, u1} ι₃ ι₄) => N) (TensorProduct.{u8, u6, u4} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (CommSemiring.toSemiring.{u8} R _inst_1) (fun (i : Sum.{u2, u1} ι₃ ι₄) => _inst_6) (TensorProduct.addCommMonoid.{u8, u6, u4} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (fun (i : Sum.{u2, u1} ι₃ ι₄) => _inst_7) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u8, u6, u4} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5)) (MultilinearMap.domDomCongr.{u8, u7, max u6 u4, max u5 u3, max u2 u1} R N (TensorProduct.{u8, u6, u4} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (CommSemiring.toSemiring.{u8} R _inst_1) _inst_6 (TensorProduct.addCommMonoid.{u8, u6, u4} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) _inst_7 (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u8, u6, u4} R _inst_1 N₁ N₂ _inst_2 _inst_4 _inst_3 _inst_5) (Sum.{u5, u3} ι₁ ι₂) (Sum.{u2, u1} ι₃ ι₄) (Equiv.sumCongr.{u5, u2, u3, u1} ι₁ ι₃ ι₂ ι₄ σa σb) (MultilinearMap.domCoprod.{u8, u5, u3, u6, u4, u7} R ι₁ ι₂ _inst_1 N₁ _inst_2 _inst_3 N₂ _inst_4 _inst_5 N _inst_6 _inst_7 a b)) (MultilinearMap.domCoprod.{u8, u2, u1, u6, u4, u7} R ι₃ ι₄ _inst_1 N₁ _inst_2 _inst_3 N₂ _inst_4 _inst_5 N _inst_6 _inst_7 (MultilinearMap.domDomCongr.{u8, u7, u6, u5, u2} R N N₁ (CommSemiring.toSemiring.{u8} R _inst_1) _inst_6 _inst_2 _inst_7 _inst_3 ι₁ ι₃ σa a) (MultilinearMap.domDomCongr.{u8, u7, u4, u3, u1} R N N₂ (CommSemiring.toSemiring.{u8} R _inst_1) _inst_6 _inst_4 _inst_7 _inst_5 ι₂ ι₄ σb b))
Case conversion may be inaccurate. Consider using '#align multilinear_map.dom_coprod_dom_dom_congr_sum_congr MultilinearMap.domCoprod_domDomCongr_sumCongrₓ'. -/
/-- When passed an `equiv.sum_congr`, `multilinear_map.dom_dom_congr` distributes over
`multilinear_map.dom_coprod`. -/
theorem domCoprod_domDomCongr_sumCongr (a : MultilinearMap R (fun _ : ι₁ => N) N₁)
    (b : MultilinearMap R (fun _ : ι₂ => N) N₂) (σa : ι₁ ≃ ι₃) (σb : ι₂ ≃ ι₄) :
    (a.domCoprod b).domDomCongr (σa.sumCongr σb) =
      (a.domDomCongr σa).domCoprod (b.domDomCongr σb) :=
  rfl
#align multilinear_map.dom_coprod_dom_dom_congr_sum_congr MultilinearMap.domCoprod_domDomCongr_sumCongr

end DomCoprod

end MultilinearMap

