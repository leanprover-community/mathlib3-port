/-
Copyright (c) 2020 Sébastien Gouëzel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Sébastien Gouëzel

! This file was ported from Lean 3 source module linear_algebra.multilinear.basic
! leanprover-community/mathlib commit 19cb3751e5e9b3d97adb51023949c50c13b5fdfd
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.LinearAlgebra.Basic
import Mathbin.Algebra.Algebra.Basic
import Mathbin.Algebra.BigOperators.Order
import Mathbin.Algebra.BigOperators.Ring
import Mathbin.Data.List.FinRange
import Mathbin.Data.Fintype.BigOperators
import Mathbin.Data.Fintype.Sort

/-!
# Multilinear maps

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

We define multilinear maps as maps from `Π(i : ι), M₁ i` to `M₂` which are linear in each
coordinate. Here, `M₁ i` and `M₂` are modules over a ring `R`, and `ι` is an arbitrary type
(although some statements will require it to be a fintype). This space, denoted by
`multilinear_map R M₁ M₂`, inherits a module structure by pointwise addition and multiplication.

## Main definitions

* `multilinear_map R M₁ M₂` is the space of multilinear maps from `Π(i : ι), M₁ i` to `M₂`.
* `f.map_smul` is the multiplicativity of the multilinear map `f` along each coordinate.
* `f.map_add` is the additivity of the multilinear map `f` along each coordinate.
* `f.map_smul_univ` expresses the multiplicativity of `f` over all coordinates at the same time,
  writing `f (λi, c i • m i)` as `(∏ i, c i) • f m`.
* `f.map_add_univ` expresses the additivity of `f` over all coordinates at the same time, writing
  `f (m + m')` as the sum over all subsets `s` of `ι` of `f (s.piecewise m m')`.
* `f.map_sum` expresses `f (Σ_{j₁} g₁ j₁, ..., Σ_{jₙ} gₙ jₙ)` as the sum of
  `f (g₁ (r 1), ..., gₙ (r n))` where `r` ranges over all possible functions.

We also register isomorphisms corresponding to currying or uncurrying variables, transforming a
multilinear function `f` on `n+1` variables into a linear function taking values in multilinear
functions in `n` variables, and into a multilinear function in `n` variables taking values in linear
functions. These operations are called `f.curry_left` and `f.curry_right` respectively
(with inverses `f.uncurry_left` and `f.uncurry_right`). These operations induce linear equivalences
between spaces of multilinear functions in `n+1` variables and spaces of linear functions into
multilinear functions in `n` variables (resp. multilinear functions in `n` variables taking values
in linear functions), called respectively `multilinear_curry_left_equiv` and
`multilinear_curry_right_equiv`.

## Implementation notes

Expressing that a map is linear along the `i`-th coordinate when all other coordinates are fixed
can be done in two (equivalent) different ways:

* fixing a vector `m : Π(j : ι - i), M₁ j.val`, and then choosing separately the `i`-th coordinate
* fixing a vector `m : Πj, M₁ j`, and then modifying its `i`-th coordinate

The second way is more artificial as the value of `m` at `i` is not relevant, but it has the
advantage of avoiding subtype inclusion issues. This is the definition we use, based on
`function.update` that allows to change the value of `m` at `i`.

Note that the use of `function.update` requires a `decidable_eq ι` term to appear somewhere in the
statement of `multilinear_map.map_add'` and `multilinear_map.map_smul'`. Three possible choices
are:

1. Requiring `decidable_eq ι` as an argument to `multilinear_map` (as we did originally).
2. Using `classical.dec_eq ι` in the statement of `map_add'` and `map_smul'`.
3. Quantifying over all possible `decidable_eq ι` instances in the statement of `map_add'` and
   `map_smul'`.

Option 1 works fine, but puts unecessary constraints on the user (the zero map certainly does not
need decidability). Option 2 looks great at first, but in the common case when `ι = fin n` it
introduces non-defeq decidability instance diamonds within the context of proving `map_add'` and
`map_smul'`, of the form `fin.decidable_eq n = classical.dec_eq (fin n)`. Option 3 of course does
something similar, but of the form `fin.decidable_eq n = _inst`, which is much easier to clean up
since `_inst` is a free variable and so the equality can just be substituted.
-/


open Function Fin Set

open BigOperators

universe u v v' v₁ v₂ v₃ w u'

variable {R : Type u} {ι : Type u'} {n : ℕ} {M : Fin n.succ → Type v} {M₁ : ι → Type v₁}
  {M₂ : Type v₂} {M₃ : Type v₃} {M' : Type v'}

#print MultilinearMap /-
/-- Multilinear maps over the ring `R`, from `Πi, M₁ i` to `M₂` where `M₁ i` and `M₂` are modules
over `R`. -/
structure MultilinearMap (R : Type u) {ι : Type u'} (M₁ : ι → Type v) (M₂ : Type w) [Semiring R]
  [∀ i, AddCommMonoid (M₁ i)] [AddCommMonoid M₂] [∀ i, Module R (M₁ i)] [Module R M₂] where
  toFun : (∀ i, M₁ i) → M₂
  map_add' :
    ∀ [DecidableEq ι] (m : ∀ i, M₁ i) (i : ι) (x y : M₁ i),
      to_fun (update m i (x + y)) = to_fun (update m i x) + to_fun (update m i y)
  map_smul' :
    ∀ [DecidableEq ι] (m : ∀ i, M₁ i) (i : ι) (c : R) (x : M₁ i),
      to_fun (update m i (c • x)) = c • to_fun (update m i x)
#align multilinear_map MultilinearMap
-/

namespace MultilinearMap

section Semiring

variable [Semiring R] [∀ i, AddCommMonoid (M i)] [∀ i, AddCommMonoid (M₁ i)] [AddCommMonoid M₂]
  [AddCommMonoid M₃] [AddCommMonoid M'] [∀ i, Module R (M i)] [∀ i, Module R (M₁ i)] [Module R M₂]
  [Module R M₃] [Module R M'] (f f' : MultilinearMap R M₁ M₂)

instance : CoeFun (MultilinearMap R M₁ M₂) fun f => (∀ i, M₁ i) → M₂ :=
  ⟨toFun⟩

initialize_simps_projections MultilinearMap (toFun → apply)

#print MultilinearMap.toFun_eq_coe /-
@[simp]
theorem toFun_eq_coe : f.toFun = f :=
  rfl
#align multilinear_map.to_fun_eq_coe MultilinearMap.toFun_eq_coe
-/

/- warning: multilinear_map.coe_mk -> MultilinearMap.coe_mk is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : (forall (i : ι), M₁ i) -> M₂) (h₁ : forall [_inst_1 : DecidableEq.{succ u4} ι] (m : forall (i : ι), M₁ i) (i : ι) (x : M₁ i) (y : M₁ i), Eq.{succ u3} M₂ (f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_1 a b) m i (HAdd.hAdd.{u2, u2, u2} (M₁ i) (M₁ i) (M₁ i) (instHAdd.{u2} (M₁ i) (AddZeroClass.toHasAdd.{u2} (M₁ i) (AddMonoid.toAddZeroClass.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i))))) x y))) (HAdd.hAdd.{u3, u3, u3} M₂ M₂ M₂ (instHAdd.{u3} M₂ (AddZeroClass.toHasAdd.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)))) (f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_1 a b) m i x)) (f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_1 a b) m i y)))) (h₂ : forall [_inst_1_1 : DecidableEq.{succ u4} ι] (m : forall (i : ι), M₁ i) (i : ι) (c : R) (x : M₁ i), Eq.{succ u3} M₂ (f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_1_1 a b) m i (SMul.smul.{u1, u2} R (M₁ i) (SMulZeroClass.toHasSmul.{u1, u2} R (M₁ i) (AddZeroClass.toHasZero.{u2} (M₁ i) (AddMonoid.toAddZeroClass.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i)))) (SMulWithZero.toSmulZeroClass.{u1, u2} R (M₁ i) (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)))) (AddZeroClass.toHasZero.{u2} (M₁ i) (AddMonoid.toAddZeroClass.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i)))) (MulActionWithZero.toSMulWithZero.{u1, u2} R (M₁ i) (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddZeroClass.toHasZero.{u2} (M₁ i) (AddMonoid.toAddZeroClass.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i)))) (Module.toMulActionWithZero.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i) (_inst_8 i))))) c x))) (SMul.smul.{u1, u3} R M₂ (SMulZeroClass.toHasSmul.{u1, u3} R M₂ (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (SMulWithZero.toSmulZeroClass.{u1, u3} R M₂ (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)))) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (MulActionWithZero.toSMulWithZero.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ _inst_1 _inst_4 _inst_9)))) c (f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_1_1 a b) m i x)))), Eq.{max (max (succ u4) (succ u2)) (succ u3)} ((forall (i : ι), M₁ i) -> M₂) (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (MultilinearMap.mk.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9 f h₁ h₂)) f
but is expected to have type
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : (forall (i : ι), M₁ i) -> M₂) (h₁ : forall [_inst_1 : DecidableEq.{succ u4} ι] (m : forall (i : ι), M₁ i) (i : ι) (x : M₁ i) (y : M₁ i), Eq.{succ u3} M₂ (f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_1 a b) m i (HAdd.hAdd.{u2, u2, u2} (M₁ i) (M₁ i) (M₁ i) (instHAdd.{u2} (M₁ i) (AddZeroClass.toAdd.{u2} (M₁ i) (AddMonoid.toAddZeroClass.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i))))) x y))) (HAdd.hAdd.{u3, u3, u3} M₂ M₂ M₂ (instHAdd.{u3} M₂ (AddZeroClass.toAdd.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)))) (f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_1 a b) m i x)) (f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_1 a b) m i y)))) (h₂ : forall [_inst_1_1 : DecidableEq.{succ u4} ι] (m : forall (i : ι), M₁ i) (i : ι) (c : R) (x : M₁ i), Eq.{succ u3} M₂ (f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_1_1 a b) m i (HSMul.hSMul.{u1, u2, u2} R (M₁ i) (M₁ i) (instHSMul.{u1, u2} R (M₁ i) (SMulZeroClass.toSMul.{u1, u2} R (M₁ i) (AddMonoid.toZero.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i))) (SMulWithZero.toSMulZeroClass.{u1, u2} R (M₁ i) (MonoidWithZero.toZero.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)) (AddMonoid.toZero.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i))) (MulActionWithZero.toSMulWithZero.{u1, u2} R (M₁ i) (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddMonoid.toZero.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i))) (Module.toMulActionWithZero.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i) (_inst_8 i)))))) c x))) (HSMul.hSMul.{u1, u3, u3} R M₂ M₂ (instHSMul.{u1, u3} R M₂ (SMulZeroClass.toSMul.{u1, u3} R M₂ (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (SMulWithZero.toSMulZeroClass.{u1, u3} R M₂ (MonoidWithZero.toZero.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (MulActionWithZero.toSMulWithZero.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ _inst_1 _inst_4 _inst_9))))) c (f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_1_1 a b) m i x)))), Eq.{max (max (succ u4) (succ u2)) (succ u3)} (forall (ᾰ : forall (i : ι), M₁ i), (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) ᾰ) (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (MultilinearMap.mk.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9 f h₁ h₂)) f
Case conversion may be inaccurate. Consider using '#align multilinear_map.coe_mk MultilinearMap.coe_mkₓ'. -/
@[simp]
theorem coe_mk (f : (∀ i, M₁ i) → M₂) (h₁ h₂) : ⇑(⟨f, h₁, h₂⟩ : MultilinearMap R M₁ M₂) = f :=
  rfl
#align multilinear_map.coe_mk MultilinearMap.coe_mk

#print MultilinearMap.congr_fun /-
theorem congr_fun {f g : MultilinearMap R M₁ M₂} (h : f = g) (x : ∀ i, M₁ i) : f x = g x :=
  congr_arg (fun h : MultilinearMap R M₁ M₂ => h x) h
#align multilinear_map.congr_fun MultilinearMap.congr_fun
-/

#print MultilinearMap.congr_arg /-
theorem congr_arg (f : MultilinearMap R M₁ M₂) {x y : ∀ i, M₁ i} (h : x = y) : f x = f y :=
  congr_arg (fun x : ∀ i, M₁ i => f x) h
#align multilinear_map.congr_arg MultilinearMap.congr_arg
-/

#print MultilinearMap.coe_injective /-
theorem coe_injective : Injective (coeFn : MultilinearMap R M₁ M₂ → (∀ i, M₁ i) → M₂) :=
  by
  intro f g h
  cases f
  cases g
  cases h
  rfl
#align multilinear_map.coe_injective MultilinearMap.coe_injective
-/

#print MultilinearMap.coe_inj /-
@[simp, norm_cast]
theorem coe_inj {f g : MultilinearMap R M₁ M₂} : (f : (∀ i, M₁ i) → M₂) = g ↔ f = g :=
  coe_injective.eq_iff
#align multilinear_map.coe_inj MultilinearMap.coe_inj
-/

#print MultilinearMap.ext /-
@[ext]
theorem ext {f f' : MultilinearMap R M₁ M₂} (H : ∀ x, f x = f' x) : f = f' :=
  coe_injective (funext H)
#align multilinear_map.ext MultilinearMap.ext
-/

#print MultilinearMap.ext_iff /-
theorem ext_iff {f g : MultilinearMap R M₁ M₂} : f = g ↔ ∀ x, f x = g x :=
  ⟨fun h x => h ▸ rfl, fun h => ext h⟩
#align multilinear_map.ext_iff MultilinearMap.ext_iff
-/

/- warning: multilinear_map.mk_coe -> MultilinearMap.mk_coe is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (h₁ : forall [_inst_1_1 : DecidableEq.{succ u4} ι] (m : forall (i : ι), M₁ i) (i : ι) (x : M₁ i) (y : M₁ i), Eq.{succ u3} M₂ (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_1_1 a b) m i (HAdd.hAdd.{u2, u2, u2} (M₁ i) (M₁ i) (M₁ i) (instHAdd.{u2} (M₁ i) (AddZeroClass.toHasAdd.{u2} (M₁ i) (AddMonoid.toAddZeroClass.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i))))) x y))) (HAdd.hAdd.{u3, u3, u3} M₂ M₂ M₂ (instHAdd.{u3} M₂ (AddZeroClass.toHasAdd.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)))) (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_1_1 a b) m i x)) (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_1_1 a b) m i y)))) (h₂ : forall [_inst_1_1 : DecidableEq.{succ u4} ι] (m : forall (i : ι), M₁ i) (i : ι) (c : R) (x : M₁ i), Eq.{succ u3} M₂ (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_1_1 a b) m i (SMul.smul.{u1, u2} R (M₁ i) (SMulZeroClass.toHasSmul.{u1, u2} R (M₁ i) (AddZeroClass.toHasZero.{u2} (M₁ i) (AddMonoid.toAddZeroClass.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i)))) (SMulWithZero.toSmulZeroClass.{u1, u2} R (M₁ i) (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)))) (AddZeroClass.toHasZero.{u2} (M₁ i) (AddMonoid.toAddZeroClass.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i)))) (MulActionWithZero.toSMulWithZero.{u1, u2} R (M₁ i) (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddZeroClass.toHasZero.{u2} (M₁ i) (AddMonoid.toAddZeroClass.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i)))) (Module.toMulActionWithZero.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i) (_inst_8 i))))) c x))) (SMul.smul.{u1, u3} R M₂ (SMulZeroClass.toHasSmul.{u1, u3} R M₂ (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (SMulWithZero.toSmulZeroClass.{u1, u3} R M₂ (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)))) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (MulActionWithZero.toSMulWithZero.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ _inst_1 _inst_4 _inst_9)))) c (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_1_1 a b) m i x)))), Eq.{max (succ u4) (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (MultilinearMap.mk.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9 (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f) h₁ h₂) f
but is expected to have type
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (h₁ : forall [_inst_1_1 : DecidableEq.{succ u4} ι] (m : forall (i : ι), M₁ i) (i : ι) (x : M₁ i) (y : M₁ i), Eq.{succ u3} M₂ (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_1_1 a b) m i (HAdd.hAdd.{u2, u2, u2} (M₁ i) (M₁ i) (M₁ i) (instHAdd.{u2} (M₁ i) (AddZeroClass.toAdd.{u2} (M₁ i) (AddMonoid.toAddZeroClass.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i))))) x y))) (HAdd.hAdd.{u3, u3, u3} M₂ M₂ M₂ (instHAdd.{u3} M₂ (AddZeroClass.toAdd.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)))) (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_1_1 a b) m i x)) (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_1_1 a b) m i y)))) (h₂ : forall [_inst_1_1 : DecidableEq.{succ u4} ι] (m : forall (i : ι), M₁ i) (i : ι) (c : R) (x : M₁ i), Eq.{succ u3} M₂ (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_1_1 a b) m i (HSMul.hSMul.{u1, u2, u2} R (M₁ i) (M₁ i) (instHSMul.{u1, u2} R (M₁ i) (SMulZeroClass.toSMul.{u1, u2} R (M₁ i) (AddMonoid.toZero.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i))) (SMulWithZero.toSMulZeroClass.{u1, u2} R (M₁ i) (MonoidWithZero.toZero.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)) (AddMonoid.toZero.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i))) (MulActionWithZero.toSMulWithZero.{u1, u2} R (M₁ i) (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddMonoid.toZero.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i))) (Module.toMulActionWithZero.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i) (_inst_8 i)))))) c x))) (HSMul.hSMul.{u1, u3, u3} R M₂ M₂ (instHSMul.{u1, u3} R M₂ (SMulZeroClass.toSMul.{u1, u3} R M₂ (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (SMulWithZero.toSMulZeroClass.{u1, u3} R M₂ (MonoidWithZero.toZero.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (MulActionWithZero.toSMulWithZero.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ _inst_1 _inst_4 _inst_9))))) c (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_1_1 a b) m i x)))), Eq.{max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (MultilinearMap.mk.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9 (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f) h₁ h₂) f
Case conversion may be inaccurate. Consider using '#align multilinear_map.mk_coe MultilinearMap.mk_coeₓ'. -/
@[simp]
theorem mk_coe (f : MultilinearMap R M₁ M₂) (h₁ h₂) : (⟨f, h₁, h₂⟩ : MultilinearMap R M₁ M₂) = f :=
  by
  ext
  rfl
#align multilinear_map.mk_coe MultilinearMap.mk_coe

/- warning: multilinear_map.map_add -> MultilinearMap.map_add is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) [_inst_12 : DecidableEq.{succ u4} ι] (m : forall (i : ι), M₁ i) (i : ι) (x : M₁ i) (y : M₁ i), Eq.{succ u3} M₂ (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_12 a b) m i (HAdd.hAdd.{u2, u2, u2} (M₁ i) (M₁ i) (M₁ i) (instHAdd.{u2} (M₁ i) (AddZeroClass.toHasAdd.{u2} (M₁ i) (AddMonoid.toAddZeroClass.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i))))) x y))) (HAdd.hAdd.{u3, u3, u3} M₂ M₂ M₂ (instHAdd.{u3} M₂ (AddZeroClass.toHasAdd.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)))) (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_12 a b) m i x)) (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_12 a b) m i y)))
but is expected to have type
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) [_inst_12 : DecidableEq.{succ u4} ι] (m : forall (i : ι), M₁ i) (i : ι) (x : M₁ i) (y : M₁ i), Eq.{succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_12 a b) m i (HAdd.hAdd.{u2, u2, u2} (M₁ i) (M₁ i) (M₁ i) (instHAdd.{u2} (M₁ i) (AddZeroClass.toAdd.{u2} (M₁ i) (AddMonoid.toAddZeroClass.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i))))) x y))) (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_12 a b) m i (HAdd.hAdd.{u2, u2, u2} (M₁ i) (M₁ i) (M₁ i) (instHAdd.{u2} (M₁ i) (AddZeroClass.toAdd.{u2} (M₁ i) (AddMonoid.toAddZeroClass.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i))))) x y))) (HAdd.hAdd.{u3, u3, u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_12 a b) m i x)) ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_12 a b) m i y)) ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_12 a b) m i x)) (instHAdd.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_12 a b) m i x)) (AddZeroClass.toAdd.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_12 a b) m i x)) (AddMonoid.toAddZeroClass.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_12 a b) m i x)) (AddCommMonoid.toAddMonoid.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_12 a b) m i x)) _inst_4)))) (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_12 a b) m i x)) (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_12 a b) m i y)))
Case conversion may be inaccurate. Consider using '#align multilinear_map.map_add MultilinearMap.map_addₓ'. -/
@[simp]
protected theorem map_add [DecidableEq ι] (m : ∀ i, M₁ i) (i : ι) (x y : M₁ i) :
    f (update m i (x + y)) = f (update m i x) + f (update m i y) :=
  f.map_add' m i x y
#align multilinear_map.map_add MultilinearMap.map_add

#print MultilinearMap.map_smul /-
@[simp]
protected theorem map_smul [DecidableEq ι] (m : ∀ i, M₁ i) (i : ι) (c : R) (x : M₁ i) :
    f (update m i (c • x)) = c • f (update m i x) :=
  f.map_smul' m i c x
#align multilinear_map.map_smul MultilinearMap.map_smul
-/

/- warning: multilinear_map.map_coord_zero -> MultilinearMap.map_coord_zero is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) {m : forall (i : ι), M₁ i} (i : ι), (Eq.{succ u2} (M₁ i) (m i) (OfNat.ofNat.{u2} (M₁ i) 0 (OfNat.mk.{u2} (M₁ i) 0 (Zero.zero.{u2} (M₁ i) (AddZeroClass.toHasZero.{u2} (M₁ i) (AddMonoid.toAddZeroClass.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i)))))))) -> (Eq.{succ u3} M₂ (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f m) (OfNat.ofNat.{u3} M₂ 0 (OfNat.mk.{u3} M₂ 0 (Zero.zero.{u3} M₂ (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)))))))
but is expected to have type
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) {m : forall (i : ι), M₁ i} (i : ι), (Eq.{succ u2} (M₁ i) (m i) (OfNat.ofNat.{u2} (M₁ i) 0 (Zero.toOfNat0.{u2} (M₁ i) (AddMonoid.toZero.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i)))))) -> (Eq.{succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f m) (OfNat.ofNat.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) 0 (Zero.toOfNat0.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (AddMonoid.toZero.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (AddCommMonoid.toAddMonoid.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) _inst_4)))))
Case conversion may be inaccurate. Consider using '#align multilinear_map.map_coord_zero MultilinearMap.map_coord_zeroₓ'. -/
theorem map_coord_zero {m : ∀ i, M₁ i} (i : ι) (h : m i = 0) : f m = 0 := by
  classical
    have : (0 : R) • (0 : M₁ i) = 0 := by simp
    rw [← update_eq_self i m, h, ← this, f.map_smul, zero_smul]
#align multilinear_map.map_coord_zero MultilinearMap.map_coord_zero

/- warning: multilinear_map.map_update_zero -> MultilinearMap.map_update_zero is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) [_inst_12 : DecidableEq.{succ u4} ι] (m : forall (i : ι), M₁ i) (i : ι), Eq.{succ u3} M₂ (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_12 a b) m i (OfNat.ofNat.{u2} (M₁ i) 0 (OfNat.mk.{u2} (M₁ i) 0 (Zero.zero.{u2} (M₁ i) (AddZeroClass.toHasZero.{u2} (M₁ i) (AddMonoid.toAddZeroClass.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i))))))))) (OfNat.ofNat.{u3} M₂ 0 (OfNat.mk.{u3} M₂ 0 (Zero.zero.{u3} M₂ (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))))))
but is expected to have type
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) [_inst_12 : DecidableEq.{succ u4} ι] (m : forall (i : ι), M₁ i) (i : ι), Eq.{succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_12 a b) m i (OfNat.ofNat.{u2} (M₁ i) 0 (Zero.toOfNat0.{u2} (M₁ i) (AddMonoid.toZero.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i))))))) (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_12 a b) m i (OfNat.ofNat.{u2} (M₁ i) 0 (Zero.toOfNat0.{u2} (M₁ i) (AddMonoid.toZero.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i))))))) (OfNat.ofNat.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_12 a b) m i (OfNat.ofNat.{u2} (M₁ i) 0 (Zero.toOfNat0.{u2} (M₁ i) (AddMonoid.toZero.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i))))))) 0 (Zero.toOfNat0.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_12 a b) m i (OfNat.ofNat.{u2} (M₁ i) 0 (Zero.toOfNat0.{u2} (M₁ i) (AddMonoid.toZero.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i))))))) (AddMonoid.toZero.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_12 a b) m i (OfNat.ofNat.{u2} (M₁ i) 0 (Zero.toOfNat0.{u2} (M₁ i) (AddMonoid.toZero.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i))))))) (AddCommMonoid.toAddMonoid.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_12 a b) m i (OfNat.ofNat.{u2} (M₁ i) 0 (Zero.toOfNat0.{u2} (M₁ i) (AddMonoid.toZero.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i))))))) _inst_4))))
Case conversion may be inaccurate. Consider using '#align multilinear_map.map_update_zero MultilinearMap.map_update_zeroₓ'. -/
@[simp]
theorem map_update_zero [DecidableEq ι] (m : ∀ i, M₁ i) (i : ι) : f (update m i 0) = 0 :=
  f.map_coord_zero i (update_same i 0 m)
#align multilinear_map.map_update_zero MultilinearMap.map_update_zero

/- warning: multilinear_map.map_zero -> MultilinearMap.map_zero is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) [_inst_12 : Nonempty.{succ u4} ι], Eq.{succ u3} M₂ (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (OfNat.ofNat.{max u4 u2} (forall (i : ι), M₁ i) 0 (OfNat.mk.{max u4 u2} (forall (i : ι), M₁ i) 0 (Zero.zero.{max u4 u2} (forall (i : ι), M₁ i) (Pi.instZero.{u4, u2} ι (fun (i : ι) => M₁ i) (fun (i : ι) => AddZeroClass.toHasZero.{u2} (M₁ i) (AddMonoid.toAddZeroClass.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i))))))))) (OfNat.ofNat.{u3} M₂ 0 (OfNat.mk.{u3} M₂ 0 (Zero.zero.{u3} M₂ (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))))))
but is expected to have type
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) [_inst_12 : Nonempty.{succ u4} ι], Eq.{succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (OfNat.ofNat.{max u4 u2} (forall (i : ι), M₁ i) 0 (Zero.toOfNat0.{max u4 u2} (forall (i : ι), M₁ i) (Pi.instZero.{u4, u2} ι (fun (i : ι) => M₁ i) (fun (i : ι) => AddMonoid.toZero.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i))))))) (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (OfNat.ofNat.{max u4 u2} (forall (i : ι), M₁ i) 0 (Zero.toOfNat0.{max u4 u2} (forall (i : ι), M₁ i) (Pi.instZero.{u4, u2} ι (fun (i : ι) => M₁ i) (fun (i : ι) => AddMonoid.toZero.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i))))))) (OfNat.ofNat.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (OfNat.ofNat.{max u4 u2} (forall (i : ι), M₁ i) 0 (Zero.toOfNat0.{max u4 u2} (forall (i : ι), M₁ i) (Pi.instZero.{u4, u2} ι (fun (i : ι) => M₁ i) (fun (i : ι) => AddMonoid.toZero.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i))))))) 0 (Zero.toOfNat0.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (OfNat.ofNat.{max u4 u2} (forall (i : ι), M₁ i) 0 (Zero.toOfNat0.{max u4 u2} (forall (i : ι), M₁ i) (Pi.instZero.{u4, u2} ι (fun (i : ι) => M₁ i) (fun (i : ι) => AddMonoid.toZero.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i))))))) (AddMonoid.toZero.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (OfNat.ofNat.{max u4 u2} (forall (i : ι), M₁ i) 0 (Zero.toOfNat0.{max u4 u2} (forall (i : ι), M₁ i) (Pi.instZero.{u4, u2} ι (fun (i : ι) => M₁ i) (fun (i : ι) => AddMonoid.toZero.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i))))))) (AddCommMonoid.toAddMonoid.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (OfNat.ofNat.{max u4 u2} (forall (i : ι), M₁ i) 0 (Zero.toOfNat0.{max u4 u2} (forall (i : ι), M₁ i) (Pi.instZero.{u4, u2} ι (fun (i : ι) => M₁ i) (fun (i : ι) => AddMonoid.toZero.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i))))))) _inst_4))))
Case conversion may be inaccurate. Consider using '#align multilinear_map.map_zero MultilinearMap.map_zeroₓ'. -/
@[simp]
theorem map_zero [Nonempty ι] : f 0 = 0 :=
  by
  obtain ⟨i, _⟩ : ∃ i : ι, i ∈ Set.univ := Set.exists_mem_of_nonempty ι
  exact map_coord_zero f i rfl
#align multilinear_map.map_zero MultilinearMap.map_zero

instance : Add (MultilinearMap R M₁ M₂) :=
  ⟨fun f f' =>
    ⟨fun x => f x + f' x, fun m i x y => by simp [add_left_comm, add_assoc], fun _ m i c x => by
      simp [smul_add]⟩⟩

/- warning: multilinear_map.add_apply -> MultilinearMap.add_apply is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (f' : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (m : forall (i : ι), M₁ i), Eq.{succ u3} M₂ (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (HAdd.hAdd.{max u4 u2 u3, max u4 u2 u3, max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (instHAdd.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (MultilinearMap.hasAdd.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9)) f f') m) (HAdd.hAdd.{u3, u3, u3} M₂ M₂ M₂ (instHAdd.{u3} M₂ (AddZeroClass.toHasAdd.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)))) (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f m) (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f' m))
but is expected to have type
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (f' : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (m : forall (i : ι), M₁ i), Eq.{succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (HAdd.hAdd.{max (max u4 u2) u3, max (max u4 u2) u3, max (max u4 u2) u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (instHAdd.{max (max u4 u2) u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (MultilinearMap.instAddMultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9)) f f') m) (HAdd.hAdd.{u3, u3, u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (instHAdd.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (AddZeroClass.toAdd.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (AddMonoid.toAddZeroClass.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (AddCommMonoid.toAddMonoid.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) _inst_4)))) (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f m) (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f' m))
Case conversion may be inaccurate. Consider using '#align multilinear_map.add_apply MultilinearMap.add_applyₓ'. -/
@[simp]
theorem add_apply (m : ∀ i, M₁ i) : (f + f') m = f m + f' m :=
  rfl
#align multilinear_map.add_apply MultilinearMap.add_apply

instance : Zero (MultilinearMap R M₁ M₂) :=
  ⟨⟨fun _ => 0, fun _ m i x y => by simp, fun _ m i c x => by simp⟩⟩

instance : Inhabited (MultilinearMap R M₁ M₂) :=
  ⟨0⟩

/- warning: multilinear_map.zero_apply -> MultilinearMap.zero_apply is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (m : forall (i : ι), M₁ i), Eq.{succ u3} M₂ (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (OfNat.ofNat.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) 0 (OfNat.mk.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) 0 (Zero.zero.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (MultilinearMap.hasZero.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9)))) m) (OfNat.ofNat.{u3} M₂ 0 (OfNat.mk.{u3} M₂ 0 (Zero.zero.{u3} M₂ (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))))))
but is expected to have type
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (m : forall (i : ι), M₁ i), Eq.{succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (OfNat.ofNat.{max (max u4 u2) u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) 0 (Zero.toOfNat0.{max (max u4 u2) u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9))) m) (OfNat.ofNat.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) 0 (Zero.toOfNat0.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (AddMonoid.toZero.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (AddCommMonoid.toAddMonoid.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) _inst_4))))
Case conversion may be inaccurate. Consider using '#align multilinear_map.zero_apply MultilinearMap.zero_applyₓ'. -/
@[simp]
theorem zero_apply (m : ∀ i, M₁ i) : (0 : MultilinearMap R M₁ M₂) m = 0 :=
  rfl
#align multilinear_map.zero_apply MultilinearMap.zero_apply

section SMul

variable {R' A : Type _} [Monoid R'] [Semiring A] [∀ i, Module A (M₁ i)] [DistribMulAction R' M₂]
  [Module A M₂] [SMulCommClass A R' M₂]

instance : SMul R' (MultilinearMap A M₁ M₂) :=
  ⟨fun c f =>
    ⟨fun m => c • f m, fun _ m i x y => by simp [smul_add], fun _ l i x d => by
      simp [← smul_comm x c]⟩⟩

/- warning: multilinear_map.smul_apply -> MultilinearMap.smul_apply is a dubious translation:
lean 3 declaration is
  forall {ι : Type.{u3}} {M₁ : ι -> Type.{u1}} {M₂ : Type.{u2}} [_inst_3 : forall (i : ι), AddCommMonoid.{u1} (M₁ i)] [_inst_4 : AddCommMonoid.{u2} M₂] {R' : Type.{u4}} {A : Type.{u5}} [_inst_12 : Monoid.{u4} R'] [_inst_13 : Semiring.{u5} A] [_inst_14 : forall (i : ι), Module.{u5, u1} A (M₁ i) _inst_13 (_inst_3 i)] [_inst_15 : DistribMulAction.{u4, u2} R' M₂ _inst_12 (AddCommMonoid.toAddMonoid.{u2} M₂ _inst_4)] [_inst_16 : Module.{u5, u2} A M₂ _inst_13 _inst_4] [_inst_17 : SMulCommClass.{u5, u4, u2} A R' M₂ (SMulZeroClass.toHasSmul.{u5, u2} A M₂ (AddZeroClass.toHasZero.{u2} M₂ (AddMonoid.toAddZeroClass.{u2} M₂ (AddCommMonoid.toAddMonoid.{u2} M₂ _inst_4))) (SMulWithZero.toSmulZeroClass.{u5, u2} A M₂ (MulZeroClass.toHasZero.{u5} A (MulZeroOneClass.toMulZeroClass.{u5} A (MonoidWithZero.toMulZeroOneClass.{u5} A (Semiring.toMonoidWithZero.{u5} A _inst_13)))) (AddZeroClass.toHasZero.{u2} M₂ (AddMonoid.toAddZeroClass.{u2} M₂ (AddCommMonoid.toAddMonoid.{u2} M₂ _inst_4))) (MulActionWithZero.toSMulWithZero.{u5, u2} A M₂ (Semiring.toMonoidWithZero.{u5} A _inst_13) (AddZeroClass.toHasZero.{u2} M₂ (AddMonoid.toAddZeroClass.{u2} M₂ (AddCommMonoid.toAddMonoid.{u2} M₂ _inst_4))) (Module.toMulActionWithZero.{u5, u2} A M₂ _inst_13 _inst_4 _inst_16)))) (SMulZeroClass.toHasSmul.{u4, u2} R' M₂ (AddZeroClass.toHasZero.{u2} M₂ (AddMonoid.toAddZeroClass.{u2} M₂ (AddCommMonoid.toAddMonoid.{u2} M₂ _inst_4))) (DistribSMul.toSmulZeroClass.{u4, u2} R' M₂ (AddMonoid.toAddZeroClass.{u2} M₂ (AddCommMonoid.toAddMonoid.{u2} M₂ _inst_4)) (DistribMulAction.toDistribSMul.{u4, u2} R' M₂ _inst_12 (AddCommMonoid.toAddMonoid.{u2} M₂ _inst_4) _inst_15)))] (f : MultilinearMap.{u5, u1, u2, u3} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) (c : R') (m : forall (i : ι), M₁ i), Eq.{succ u2} M₂ (coeFn.{max (succ u3) (succ u1) (succ u2), max (max (succ u3) (succ u1)) (succ u2)} (MultilinearMap.{u5, u1, u2, u3} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) (fun (f : MultilinearMap.{u5, u1, u2, u3} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u5, u1, u2, u3} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) (SMul.smul.{u4, max u3 u1 u2} R' (MultilinearMap.{u5, u1, u2, u3} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) (MultilinearMap.hasSmul.{u1, u2, u3, u4, u5} ι M₁ M₂ (fun (i : ι) => _inst_3 i) _inst_4 R' A _inst_12 _inst_13 (fun (i : ι) => _inst_14 i) _inst_15 _inst_16 _inst_17) c f) m) (SMul.smul.{u4, u2} R' M₂ (SMulZeroClass.toHasSmul.{u4, u2} R' M₂ (AddZeroClass.toHasZero.{u2} M₂ (AddMonoid.toAddZeroClass.{u2} M₂ (AddCommMonoid.toAddMonoid.{u2} M₂ _inst_4))) (DistribSMul.toSmulZeroClass.{u4, u2} R' M₂ (AddMonoid.toAddZeroClass.{u2} M₂ (AddCommMonoid.toAddMonoid.{u2} M₂ _inst_4)) (DistribMulAction.toDistribSMul.{u4, u2} R' M₂ _inst_12 (AddCommMonoid.toAddMonoid.{u2} M₂ _inst_4) _inst_15))) c (coeFn.{max (succ u3) (succ u1) (succ u2), max (max (succ u3) (succ u1)) (succ u2)} (MultilinearMap.{u5, u1, u2, u3} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) (fun (f : MultilinearMap.{u5, u1, u2, u3} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u5, u1, u2, u3} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) f m))
but is expected to have type
  forall {ι : Type.{u5}} {M₁ : ι -> Type.{u3}} {M₂ : Type.{u4}} [_inst_3 : forall (i : ι), AddCommMonoid.{u3} (M₁ i)] [_inst_4 : AddCommMonoid.{u4} M₂] {R' : Type.{u1}} {A : Type.{u2}} [_inst_12 : Monoid.{u1} R'] [_inst_13 : Semiring.{u2} A] [_inst_14 : forall (i : ι), Module.{u2, u3} A (M₁ i) _inst_13 (_inst_3 i)] [_inst_15 : DistribMulAction.{u1, u4} R' M₂ _inst_12 (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)] [_inst_16 : Module.{u2, u4} A M₂ _inst_13 _inst_4] [_inst_17 : SMulCommClass.{u2, u1, u4} A R' M₂ (SMulZeroClass.toSMul.{u2, u4} A M₂ (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (SMulWithZero.toSMulZeroClass.{u2, u4} A M₂ (MonoidWithZero.toZero.{u2} A (Semiring.toMonoidWithZero.{u2} A _inst_13)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (MulActionWithZero.toSMulWithZero.{u2, u4} A M₂ (Semiring.toMonoidWithZero.{u2} A _inst_13) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} A M₂ _inst_13 _inst_4 _inst_16)))) (SMulZeroClass.toSMul.{u1, u4} R' M₂ (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (DistribSMul.toSMulZeroClass.{u1, u4} R' M₂ (AddMonoid.toAddZeroClass.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (DistribMulAction.toDistribSMul.{u1, u4} R' M₂ _inst_12 (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4) _inst_15)))] (f : MultilinearMap.{u2, u3, u4, u5} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) (c : R') (m : forall (i : ι), M₁ i), Eq.{succ u4} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (FunLike.coe.{max (max (succ u5) (succ u3)) (succ u4), max (succ u5) (succ u3), succ u4} (MultilinearMap.{u2, u3, u4, u5} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u2, u3, u4, u5} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) (HSMul.hSMul.{u1, max (max u5 u3) u4, max (max u5 u3) u4} R' (MultilinearMap.{u2, u3, u4, u5} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) (MultilinearMap.{u2, u3, u4, u5} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) (instHSMul.{u1, max (max u5 u3) u4} R' (MultilinearMap.{u2, u3, u4, u5} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) (MultilinearMap.instSMulMultilinearMap.{u3, u4, u5, u1, u2} ι M₁ M₂ (fun (i : ι) => _inst_3 i) _inst_4 R' A _inst_12 _inst_13 (fun (i : ι) => _inst_14 i) _inst_15 _inst_16 _inst_17)) c f) m) (HSMul.hSMul.{u1, u4, u4} R' ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (instHSMul.{u1, u4} R' ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (SMulZeroClass.toSMul.{u1, u4} R' ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (AddMonoid.toZero.{u4} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (AddCommMonoid.toAddMonoid.{u4} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) _inst_4)) (DistribSMul.toSMulZeroClass.{u1, u4} R' ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (AddMonoid.toAddZeroClass.{u4} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (AddCommMonoid.toAddMonoid.{u4} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) _inst_4)) (DistribMulAction.toDistribSMul.{u1, u4} R' ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) _inst_12 (AddCommMonoid.toAddMonoid.{u4} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) _inst_4) _inst_15)))) c (FunLike.coe.{max (max (succ u5) (succ u3)) (succ u4), max (succ u5) (succ u3), succ u4} (MultilinearMap.{u2, u3, u4, u5} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u2, u3, u4, u5} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) f m))
Case conversion may be inaccurate. Consider using '#align multilinear_map.smul_apply MultilinearMap.smul_applyₓ'. -/
@[simp]
theorem smul_apply (f : MultilinearMap A M₁ M₂) (c : R') (m : ∀ i, M₁ i) : (c • f) m = c • f m :=
  rfl
#align multilinear_map.smul_apply MultilinearMap.smul_apply

/- warning: multilinear_map.coe_smul -> MultilinearMap.coe_smul is a dubious translation:
lean 3 declaration is
  forall {ι : Type.{u3}} {M₁ : ι -> Type.{u1}} {M₂ : Type.{u2}} [_inst_3 : forall (i : ι), AddCommMonoid.{u1} (M₁ i)] [_inst_4 : AddCommMonoid.{u2} M₂] {R' : Type.{u4}} {A : Type.{u5}} [_inst_12 : Monoid.{u4} R'] [_inst_13 : Semiring.{u5} A] [_inst_14 : forall (i : ι), Module.{u5, u1} A (M₁ i) _inst_13 (_inst_3 i)] [_inst_15 : DistribMulAction.{u4, u2} R' M₂ _inst_12 (AddCommMonoid.toAddMonoid.{u2} M₂ _inst_4)] [_inst_16 : Module.{u5, u2} A M₂ _inst_13 _inst_4] [_inst_17 : SMulCommClass.{u5, u4, u2} A R' M₂ (SMulZeroClass.toHasSmul.{u5, u2} A M₂ (AddZeroClass.toHasZero.{u2} M₂ (AddMonoid.toAddZeroClass.{u2} M₂ (AddCommMonoid.toAddMonoid.{u2} M₂ _inst_4))) (SMulWithZero.toSmulZeroClass.{u5, u2} A M₂ (MulZeroClass.toHasZero.{u5} A (MulZeroOneClass.toMulZeroClass.{u5} A (MonoidWithZero.toMulZeroOneClass.{u5} A (Semiring.toMonoidWithZero.{u5} A _inst_13)))) (AddZeroClass.toHasZero.{u2} M₂ (AddMonoid.toAddZeroClass.{u2} M₂ (AddCommMonoid.toAddMonoid.{u2} M₂ _inst_4))) (MulActionWithZero.toSMulWithZero.{u5, u2} A M₂ (Semiring.toMonoidWithZero.{u5} A _inst_13) (AddZeroClass.toHasZero.{u2} M₂ (AddMonoid.toAddZeroClass.{u2} M₂ (AddCommMonoid.toAddMonoid.{u2} M₂ _inst_4))) (Module.toMulActionWithZero.{u5, u2} A M₂ _inst_13 _inst_4 _inst_16)))) (SMulZeroClass.toHasSmul.{u4, u2} R' M₂ (AddZeroClass.toHasZero.{u2} M₂ (AddMonoid.toAddZeroClass.{u2} M₂ (AddCommMonoid.toAddMonoid.{u2} M₂ _inst_4))) (DistribSMul.toSmulZeroClass.{u4, u2} R' M₂ (AddMonoid.toAddZeroClass.{u2} M₂ (AddCommMonoid.toAddMonoid.{u2} M₂ _inst_4)) (DistribMulAction.toDistribSMul.{u4, u2} R' M₂ _inst_12 (AddCommMonoid.toAddMonoid.{u2} M₂ _inst_4) _inst_15)))] (c : R') (f : MultilinearMap.{u5, u1, u2, u3} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16), Eq.{succ (max (max u3 u1) u2)} ((forall (i : ι), M₁ i) -> M₂) (coeFn.{succ (max u3 u1 u2), succ (max (max u3 u1) u2)} (MultilinearMap.{u5, u1, u2, u3} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) (fun (f : MultilinearMap.{u5, u1, u2, u3} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u5, u1, u2, u3} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) (SMul.smul.{u4, max u3 u1 u2} R' (MultilinearMap.{u5, u1, u2, u3} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) (MultilinearMap.hasSmul.{u1, u2, u3, u4, u5} ι M₁ M₂ (fun (i : ι) => _inst_3 i) _inst_4 R' A _inst_12 _inst_13 (fun (i : ι) => _inst_14 i) _inst_15 _inst_16 _inst_17) c f)) (SMul.smul.{u4, max (max u3 u1) u2} R' ((forall (i : ι), M₁ i) -> M₂) (Function.hasSMul.{max u3 u1, u4, u2} (forall (i : ι), M₁ i) R' M₂ (SMulZeroClass.toHasSmul.{u4, u2} R' M₂ (AddZeroClass.toHasZero.{u2} M₂ (AddMonoid.toAddZeroClass.{u2} M₂ (AddCommMonoid.toAddMonoid.{u2} M₂ _inst_4))) (DistribSMul.toSmulZeroClass.{u4, u2} R' M₂ (AddMonoid.toAddZeroClass.{u2} M₂ (AddCommMonoid.toAddMonoid.{u2} M₂ _inst_4)) (DistribMulAction.toDistribSMul.{u4, u2} R' M₂ _inst_12 (AddCommMonoid.toAddMonoid.{u2} M₂ _inst_4) _inst_15)))) c (coeFn.{max (succ u3) (succ u1) (succ u2), max (max (succ u3) (succ u1)) (succ u2)} (MultilinearMap.{u5, u1, u2, u3} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) (fun (f : MultilinearMap.{u5, u1, u2, u3} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u5, u1, u2, u3} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) f))
but is expected to have type
  forall {ι : Type.{u5}} {M₁ : ι -> Type.{u3}} {M₂ : Type.{u4}} [_inst_3 : forall (i : ι), AddCommMonoid.{u3} (M₁ i)] [_inst_4 : AddCommMonoid.{u4} M₂] {R' : Type.{u1}} {A : Type.{u2}} [_inst_12 : Monoid.{u1} R'] [_inst_13 : Semiring.{u2} A] [_inst_14 : forall (i : ι), Module.{u2, u3} A (M₁ i) _inst_13 (_inst_3 i)] [_inst_15 : DistribMulAction.{u1, u4} R' M₂ _inst_12 (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)] [_inst_16 : Module.{u2, u4} A M₂ _inst_13 _inst_4] [_inst_17 : SMulCommClass.{u2, u1, u4} A R' M₂ (SMulZeroClass.toSMul.{u2, u4} A M₂ (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (SMulWithZero.toSMulZeroClass.{u2, u4} A M₂ (MonoidWithZero.toZero.{u2} A (Semiring.toMonoidWithZero.{u2} A _inst_13)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (MulActionWithZero.toSMulWithZero.{u2, u4} A M₂ (Semiring.toMonoidWithZero.{u2} A _inst_13) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} A M₂ _inst_13 _inst_4 _inst_16)))) (SMulZeroClass.toSMul.{u1, u4} R' M₂ (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (DistribSMul.toSMulZeroClass.{u1, u4} R' M₂ (AddMonoid.toAddZeroClass.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (DistribMulAction.toDistribSMul.{u1, u4} R' M₂ _inst_12 (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4) _inst_15)))] (c : R') (f : MultilinearMap.{u2, u3, u4, u5} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16), Eq.{max (max (succ u5) (succ u3)) (succ u4)} (forall (ᾰ : forall (i : ι), M₁ i), (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) ᾰ) (FunLike.coe.{max (max (succ u5) (succ u3)) (succ u4), max (succ u5) (succ u3), succ u4} (MultilinearMap.{u2, u3, u4, u5} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u2, u3, u4, u5} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) (HSMul.hSMul.{u1, max (max u5 u3) u4, max (max u5 u3) u4} R' (MultilinearMap.{u2, u3, u4, u5} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) (MultilinearMap.{u2, u3, u4, u5} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) (instHSMul.{u1, max (max u5 u3) u4} R' (MultilinearMap.{u2, u3, u4, u5} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) (MultilinearMap.instSMulMultilinearMap.{u3, u4, u5, u1, u2} ι M₁ M₂ (fun (i : ι) => _inst_3 i) _inst_4 R' A _inst_12 _inst_13 (fun (i : ι) => _inst_14 i) _inst_15 _inst_16 _inst_17)) c f)) (HSMul.hSMul.{u1, max (max u5 u3) u4, max (max u5 u3) u4} R' (forall (a : forall (i : ι), M₁ i), (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) a) (forall (ᾰ : forall (i : ι), M₁ i), (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) ᾰ) (instHSMul.{u1, max (max u5 u3) u4} R' (forall (a : forall (i : ι), M₁ i), (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) a) (Pi.instSMul.{max u5 u3, u4, u1} (forall (i : ι), M₁ i) R' (fun (a : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) a) (fun (i : forall (i : ι), M₁ i) => SMulZeroClass.toSMul.{u1, u4} R' ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) i) (AddMonoid.toZero.{u4} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) i) (AddCommMonoid.toAddMonoid.{u4} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) i) _inst_4)) (DistribSMul.toSMulZeroClass.{u1, u4} R' ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) i) (AddMonoid.toAddZeroClass.{u4} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) i) (AddCommMonoid.toAddMonoid.{u4} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) i) _inst_4)) (DistribMulAction.toDistribSMul.{u1, u4} R' ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) i) _inst_12 (AddCommMonoid.toAddMonoid.{u4} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) i) _inst_4) _inst_15))))) c (FunLike.coe.{max (max (succ u5) (succ u3)) (succ u4), max (succ u5) (succ u3), succ u4} (MultilinearMap.{u2, u3, u4, u5} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u2, u3, u4, u5} A ι M₁ M₂ _inst_13 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_16) f))
Case conversion may be inaccurate. Consider using '#align multilinear_map.coe_smul MultilinearMap.coe_smulₓ'. -/
theorem coe_smul (c : R') (f : MultilinearMap A M₁ M₂) : ⇑(c • f) = c • f :=
  rfl
#align multilinear_map.coe_smul MultilinearMap.coe_smul

end SMul

instance : AddCommMonoid (MultilinearMap R M₁ M₂) :=
  coe_injective.AddCommMonoid _ rfl (fun _ _ => rfl) fun _ _ => rfl

/- warning: multilinear_map.sum_apply -> MultilinearMap.sum_apply is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] {α : Type.{u5}} (f : α -> (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9)) (m : forall (i : ι), M₁ i) {s : Finset.{u5} α}, Eq.{succ u3} M₂ (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (Finset.sum.{max u4 u2 u3, u5} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) α (MultilinearMap.addCommMonoid.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) s (fun (a : α) => f a)) m) (Finset.sum.{u3, u5} M₂ α _inst_4 s (fun (a : α) => coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (f a) m))
but is expected to have type
  forall {R : Type.{u2}} {ι : Type.{u5}} {M₁ : ι -> Type.{u3}} {M₂ : Type.{u4}} [_inst_1 : Semiring.{u2} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u3} (M₁ i)] [_inst_4 : AddCommMonoid.{u4} M₂] [_inst_8 : forall (i : ι), Module.{u2, u3} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u2, u4} R M₂ _inst_1 _inst_4] {α : Type.{u1}} (f : α -> (MultilinearMap.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9)) (m : forall (i : ι), M₁ i) {s : Finset.{u1} α}, Eq.{succ u4} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (FunLike.coe.{max (max (succ u5) (succ u3)) (succ u4), max (succ u5) (succ u3), succ u4} (MultilinearMap.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (Finset.sum.{max (max u5 u3) u4, u1} (MultilinearMap.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) α (MultilinearMap.addCommMonoid.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) s (fun (a : α) => f a)) m) (Finset.sum.{u4, u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) α _inst_4 s (fun (a : α) => FunLike.coe.{max (max (succ u5) (succ u3)) (succ u4), max (succ u5) (succ u3), succ u4} (MultilinearMap.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (f a) m))
Case conversion may be inaccurate. Consider using '#align multilinear_map.sum_apply MultilinearMap.sum_applyₓ'. -/
@[simp]
theorem sum_apply {α : Type _} (f : α → MultilinearMap R M₁ M₂) (m : ∀ i, M₁ i) :
    ∀ {s : Finset α}, (∑ a in s, f a) m = ∑ a in s, f a m := by
  classical
    apply Finset.induction
    · rw [Finset.sum_empty]
      simp
    · intro a s has H
      rw [Finset.sum_insert has]
      simp [H, has]
#align multilinear_map.sum_apply MultilinearMap.sum_apply

#print MultilinearMap.toLinearMap /-
/-- If `f` is a multilinear map, then `f.to_linear_map m i` is the linear map obtained by fixing all
coordinates but `i` equal to those of `m`, and varying the `i`-th coordinate. -/
@[simps]
def toLinearMap [DecidableEq ι] (m : ∀ i, M₁ i) (i : ι) : M₁ i →ₗ[R] M₂
    where
  toFun x := f (update m i x)
  map_add' x y := by simp
  map_smul' c x := by simp
#align multilinear_map.to_linear_map MultilinearMap.toLinearMap
-/

/- warning: multilinear_map.prod -> MultilinearMap.prod is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u5}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} {M₃ : Type.{u4}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_5 : AddCommMonoid.{u4} M₃] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] [_inst_10 : Module.{u1, u4} R M₃ _inst_1 _inst_5], (MultilinearMap.{u1, u2, u3, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) -> (MultilinearMap.{u1, u2, u4, u5} R ι M₁ M₃ _inst_1 (fun (i : ι) => _inst_3 i) _inst_5 (fun (i : ι) => _inst_8 i) _inst_10) -> (MultilinearMap.{u1, u2, max u3 u4, u5} R ι M₁ (Prod.{u3, u4} M₂ M₃) _inst_1 (fun (i : ι) => _inst_3 i) (Prod.addCommMonoid.{u3, u4} M₂ M₃ _inst_4 _inst_5) (fun (i : ι) => _inst_8 i) (Prod.module.{u1, u3, u4} R M₂ M₃ _inst_1 _inst_4 _inst_5 _inst_9 _inst_10))
but is expected to have type
  forall {R : Type.{u1}} {ι : Type.{u5}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} {M₃ : Type.{u4}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_5 : AddCommMonoid.{u4} M₃] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] [_inst_10 : Module.{u1, u4} R M₃ _inst_1 _inst_5], (MultilinearMap.{u1, u2, u3, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) -> (MultilinearMap.{u1, u2, u4, u5} R ι M₁ M₃ _inst_1 (fun (i : ι) => _inst_3 i) _inst_5 (fun (i : ι) => _inst_8 i) _inst_10) -> (MultilinearMap.{u1, u2, max u4 u3, u5} R ι M₁ (Prod.{u3, u4} M₂ M₃) _inst_1 (fun (i : ι) => _inst_3 i) (Prod.instAddCommMonoidSum.{u3, u4} M₂ M₃ _inst_4 _inst_5) (fun (i : ι) => _inst_8 i) (Prod.module.{u1, u3, u4} R M₂ M₃ _inst_1 _inst_4 _inst_5 _inst_9 _inst_10))
Case conversion may be inaccurate. Consider using '#align multilinear_map.prod MultilinearMap.prodₓ'. -/
/-- The cartesian product of two multilinear maps, as a multilinear map. -/
def prod (f : MultilinearMap R M₁ M₂) (g : MultilinearMap R M₁ M₃) : MultilinearMap R M₁ (M₂ × M₃)
    where
  toFun m := (f m, g m)
  map_add' _ m i x y := by simp
  map_smul' _ m i c x := by simp
#align multilinear_map.prod MultilinearMap.prod

#print MultilinearMap.pi /-
/-- Combine a family of multilinear maps with the same domain and codomains `M' i` into a
multilinear map taking values in the space of functions `Π i, M' i`. -/
@[simps]
def pi {ι' : Type _} {M' : ι' → Type _} [∀ i, AddCommMonoid (M' i)] [∀ i, Module R (M' i)]
    (f : ∀ i, MultilinearMap R M₁ (M' i)) : MultilinearMap R M₁ (∀ i, M' i)
    where
  toFun m i := f i m
  map_add' _ m i x y := funext fun j => (f j).map_add _ _ _ _
  map_smul' _ m i c x := funext fun j => (f j).map_smul _ _ _ _
#align multilinear_map.pi MultilinearMap.pi
-/

section

variable (R M₂)

#print MultilinearMap.ofSubsingleton /-
/-- The evaluation map from `ι → M₂` to `M₂` is multilinear at a given `i` when `ι` is subsingleton.
-/
@[simps]
def ofSubsingleton [Subsingleton ι] (i' : ι) : MultilinearMap R (fun _ : ι => M₂) M₂
    where
  toFun := Function.eval i'
  map_add' _ m i x y := by
    rw [Subsingleton.elim i i']
    simp only [Function.eval, Function.update_same]
  map_smul' _ m i r x := by
    rw [Subsingleton.elim i i']
    simp only [Function.eval, Function.update_same]
#align multilinear_map.of_subsingleton MultilinearMap.ofSubsingleton
-/

variable (M₁) {M₂}

#print MultilinearMap.constOfIsEmpty /-
/-- The constant map is multilinear when `ι` is empty. -/
@[simps (config := { fullyApplied := false })]
def constOfIsEmpty [IsEmpty ι] (m : M₂) : MultilinearMap R M₁ M₂
    where
  toFun := Function.const _ m
  map_add' _ m := isEmptyElim
  map_smul' _ m := isEmptyElim
#align multilinear_map.const_of_is_empty MultilinearMap.constOfIsEmpty
-/

end

#print MultilinearMap.restr /-
/-- Given a multilinear map `f` on `n` variables (parameterized by `fin n`) and a subset `s` of `k`
of these variables, one gets a new multilinear map on `fin k` by varying these variables, and fixing
the other ones equal to a given value `z`. It is denoted by `f.restr s hk z`, where `hk` is a
proof that the cardinality of `s` is `k`. The implicit identification between `fin k` and `s` that
we use is the canonical (increasing) bijection. -/
def restr {k n : ℕ} (f : MultilinearMap R (fun i : Fin n => M') M₂) (s : Finset (Fin n))
    (hk : s.card = k) (z : M') : MultilinearMap R (fun i : Fin k => M') M₂
    where
  toFun v := f fun j => if h : j ∈ s then v ((s.orderIsoOfFin hk).symm ⟨j, h⟩) else z
  map_add' _ v i x y :=
    by
    erw [dite_comp_equiv_update, dite_comp_equiv_update, dite_comp_equiv_update]
    simp
  map_smul' _ v i c x :=
    by
    erw [dite_comp_equiv_update, dite_comp_equiv_update]
    simp
#align multilinear_map.restr MultilinearMap.restr
-/

variable {R}

/- warning: multilinear_map.cons_add -> MultilinearMap.cons_add is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {n : Nat} {M : (Fin (Nat.succ n)) -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_7 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) _inst_1 (_inst_2 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) (m : forall (i : Fin n), M (Fin.succ n i)) (x : M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (y : M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))), Eq.{succ u3} M₂ (coeFn.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) => (forall (i : Fin (Nat.succ n)), M i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) f (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) (HAdd.hAdd.{u2, u2, u2} (M (OfNat.ofNat.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (OfNat.mk.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (Zero.zero.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) (Fin.hasZeroOfNeZero (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne)) (NeZero.succ n)))))) (M (OfNat.ofNat.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (OfNat.mk.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (Zero.zero.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) (Fin.hasZeroOfNeZero (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne)) (NeZero.succ n)))))) (M (OfNat.ofNat.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (OfNat.mk.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (Zero.zero.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) (Fin.hasZeroOfNeZero (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne)) (NeZero.succ n)))))) (instHAdd.{u2} (M (OfNat.ofNat.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (OfNat.mk.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (Zero.zero.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) (Fin.hasZeroOfNeZero (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne)) (NeZero.succ n)))))) (AddZeroClass.toHasAdd.{u2} (M (OfNat.ofNat.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (OfNat.mk.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (Zero.zero.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) (Fin.hasZeroOfNeZero (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne)) (NeZero.succ n)))))) (AddMonoid.toAddZeroClass.{u2} (M (OfNat.ofNat.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (OfNat.mk.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (Zero.zero.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) (Fin.hasZeroOfNeZero (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne)) (NeZero.succ n)))))) (AddCommMonoid.toAddMonoid.{u2} (M (OfNat.ofNat.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (OfNat.mk.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (Zero.zero.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) (Fin.hasZeroOfNeZero (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne)) (NeZero.succ n)))))) (_inst_2 (OfNat.ofNat.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (OfNat.mk.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (Zero.zero.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) (Fin.hasZeroOfNeZero (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne)) (NeZero.succ n)))))))))) x y) m)) (HAdd.hAdd.{u3, u3, u3} M₂ M₂ M₂ (instHAdd.{u3} M₂ (AddZeroClass.toHasAdd.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)))) (coeFn.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) => (forall (i : Fin (Nat.succ n)), M i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) f (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) x m)) (coeFn.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) => (forall (i : Fin (Nat.succ n)), M i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) f (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) y m)))
but is expected to have type
  forall {R : Type.{u1}} {n : Nat} {M : (Fin (Nat.succ n)) -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_7 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) _inst_1 (_inst_2 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) (m : forall (i : Fin n), M (Fin.succ n i)) (x : M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (y : M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))), Eq.{succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) (HAdd.hAdd.{u2, u2, u2} (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (instHAdd.{u2} (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (AddZeroClass.toAdd.{u2} (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (AddMonoid.toAddZeroClass.{u2} (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (AddCommMonoid.toAddMonoid.{u2} (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))))))) x y) m)) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) (forall (i : Fin (Nat.succ n)), M i) (fun (f : forall (i : Fin (Nat.succ n)), M i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) f (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) (HAdd.hAdd.{u2, u2, u2} (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (instHAdd.{u2} (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (AddZeroClass.toAdd.{u2} (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (AddMonoid.toAddZeroClass.{u2} (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (AddCommMonoid.toAddMonoid.{u2} (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))))))) x y) m)) (HAdd.hAdd.{u3, u3, u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) x m)) ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) y m)) ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) x m)) (instHAdd.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) x m)) (AddZeroClass.toAdd.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) x m)) (AddMonoid.toAddZeroClass.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) x m)) (AddCommMonoid.toAddMonoid.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) x m)) _inst_4)))) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) (forall (i : Fin (Nat.succ n)), M i) (fun (f : forall (i : Fin (Nat.succ n)), M i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) f (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) x m)) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) (forall (i : Fin (Nat.succ n)), M i) (fun (f : forall (i : Fin (Nat.succ n)), M i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) f (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) y m)))
Case conversion may be inaccurate. Consider using '#align multilinear_map.cons_add MultilinearMap.cons_addₓ'. -/
/-- In the specific case of multilinear maps on spaces indexed by `fin (n+1)`, where one can build
an element of `Π(i : fin (n+1)), M i` using `cons`, one can express directly the additivity of a
multilinear map along the first variable. -/
theorem cons_add (f : MultilinearMap R M M₂) (m : ∀ i : Fin n, M i.succ) (x y : M 0) :
    f (cons (x + y) m) = f (cons x m) + f (cons y m) := by
  rw [← update_cons_zero x m (x + y), f.map_add, update_cons_zero, update_cons_zero]
#align multilinear_map.cons_add MultilinearMap.cons_add

/- warning: multilinear_map.cons_smul -> MultilinearMap.cons_smul is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {n : Nat} {M : (Fin (Nat.succ n)) -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_7 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) _inst_1 (_inst_2 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) (m : forall (i : Fin n), M (Fin.succ n i)) (c : R) (x : M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))), Eq.{succ u3} M₂ (coeFn.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) => (forall (i : Fin (Nat.succ n)), M i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) f (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) (SMul.smul.{u1, u2} R (M (OfNat.ofNat.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (OfNat.mk.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (Zero.zero.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) (Fin.hasZeroOfNeZero (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne)) (NeZero.succ n)))))) (SMulZeroClass.toHasSmul.{u1, u2} R (M (OfNat.ofNat.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (OfNat.mk.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (Zero.zero.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) (Fin.hasZeroOfNeZero (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne)) (NeZero.succ n)))))) (AddZeroClass.toHasZero.{u2} (M (OfNat.ofNat.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (OfNat.mk.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (Zero.zero.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) (Fin.hasZeroOfNeZero (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne)) (NeZero.succ n)))))) (AddMonoid.toAddZeroClass.{u2} (M (OfNat.ofNat.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (OfNat.mk.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (Zero.zero.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) (Fin.hasZeroOfNeZero (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne)) (NeZero.succ n)))))) (AddCommMonoid.toAddMonoid.{u2} (M (OfNat.ofNat.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (OfNat.mk.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (Zero.zero.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) (Fin.hasZeroOfNeZero (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne)) (NeZero.succ n)))))) (_inst_2 (OfNat.ofNat.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (OfNat.mk.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (Zero.zero.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) (Fin.hasZeroOfNeZero (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne)) (NeZero.succ n))))))))) (SMulWithZero.toSmulZeroClass.{u1, u2} R (M (OfNat.ofNat.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (OfNat.mk.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (Zero.zero.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) (Fin.hasZeroOfNeZero (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne)) (NeZero.succ n)))))) (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)))) (AddZeroClass.toHasZero.{u2} (M (OfNat.ofNat.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (OfNat.mk.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (Zero.zero.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) (Fin.hasZeroOfNeZero (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne)) (NeZero.succ n)))))) (AddMonoid.toAddZeroClass.{u2} (M (OfNat.ofNat.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (OfNat.mk.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (Zero.zero.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) (Fin.hasZeroOfNeZero (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne)) (NeZero.succ n)))))) (AddCommMonoid.toAddMonoid.{u2} (M (OfNat.ofNat.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (OfNat.mk.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (Zero.zero.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) (Fin.hasZeroOfNeZero (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne)) (NeZero.succ n)))))) (_inst_2 (OfNat.ofNat.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (OfNat.mk.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (Zero.zero.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) (Fin.hasZeroOfNeZero (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne)) (NeZero.succ n))))))))) (MulActionWithZero.toSMulWithZero.{u1, u2} R (M (OfNat.ofNat.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (OfNat.mk.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (Zero.zero.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) (Fin.hasZeroOfNeZero (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne)) (NeZero.succ n)))))) (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddZeroClass.toHasZero.{u2} (M (OfNat.ofNat.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (OfNat.mk.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (Zero.zero.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) (Fin.hasZeroOfNeZero (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne)) (NeZero.succ n)))))) (AddMonoid.toAddZeroClass.{u2} (M (OfNat.ofNat.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (OfNat.mk.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (Zero.zero.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) (Fin.hasZeroOfNeZero (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne)) (NeZero.succ n)))))) (AddCommMonoid.toAddMonoid.{u2} (M (OfNat.ofNat.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (OfNat.mk.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (Zero.zero.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) (Fin.hasZeroOfNeZero (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne)) (NeZero.succ n)))))) (_inst_2 (OfNat.ofNat.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (OfNat.mk.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (Zero.zero.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) (Fin.hasZeroOfNeZero (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne)) (NeZero.succ n))))))))) (Module.toMulActionWithZero.{u1, u2} R (M (OfNat.ofNat.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (OfNat.mk.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (Zero.zero.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) (Fin.hasZeroOfNeZero (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne)) (NeZero.succ n)))))) _inst_1 (_inst_2 (OfNat.ofNat.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (OfNat.mk.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (Zero.zero.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) (Fin.hasZeroOfNeZero (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne)) (NeZero.succ n)))))) (_inst_7 (OfNat.ofNat.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (OfNat.mk.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) 0 (Zero.zero.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne))) (Fin.hasZeroOfNeZero (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (One.one.{0} Nat Nat.hasOne)) (NeZero.succ n)))))))))) c x) m)) (SMul.smul.{u1, u3} R M₂ (SMulZeroClass.toHasSmul.{u1, u3} R M₂ (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (SMulWithZero.toSmulZeroClass.{u1, u3} R M₂ (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)))) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (MulActionWithZero.toSMulWithZero.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ _inst_1 _inst_4 _inst_9)))) c (coeFn.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) => (forall (i : Fin (Nat.succ n)), M i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) f (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) x m)))
but is expected to have type
  forall {R : Type.{u1}} {n : Nat} {M : (Fin (Nat.succ n)) -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_7 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) _inst_1 (_inst_2 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) (m : forall (i : Fin n), M (Fin.succ n i)) (c : R) (x : M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))), Eq.{succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) (HSMul.hSMul.{u1, u2, u2} R (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (instHSMul.{u1, u2} R (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (SMulZeroClass.toSMul.{u1, u2} R (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (AddMonoid.toZero.{u2} (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (AddCommMonoid.toAddMonoid.{u2} (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))))) (SMulWithZero.toSMulZeroClass.{u1, u2} R (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MonoidWithZero.toZero.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)) (AddMonoid.toZero.{u2} (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (AddCommMonoid.toAddMonoid.{u2} (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))))) (MulActionWithZero.toSMulWithZero.{u1, u2} R (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddMonoid.toZero.{u2} (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (AddCommMonoid.toAddMonoid.{u2} (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))))) (Module.toMulActionWithZero.{u1, u2} R (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) _inst_1 (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (_inst_7 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n))))))))) c x) m)) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) (forall (i : Fin (Nat.succ n)), M i) (fun (f : forall (i : Fin (Nat.succ n)), M i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) f (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) (HSMul.hSMul.{u1, u2, u2} R (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (instHSMul.{u1, u2} R (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (SMulZeroClass.toSMul.{u1, u2} R (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (AddMonoid.toZero.{u2} (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (AddCommMonoid.toAddMonoid.{u2} (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))))) (SMulWithZero.toSMulZeroClass.{u1, u2} R (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MonoidWithZero.toZero.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)) (AddMonoid.toZero.{u2} (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (AddCommMonoid.toAddMonoid.{u2} (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))))) (MulActionWithZero.toSMulWithZero.{u1, u2} R (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddMonoid.toZero.{u2} (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (AddCommMonoid.toAddMonoid.{u2} (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))))) (Module.toMulActionWithZero.{u1, u2} R (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) _inst_1 (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (_inst_7 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n))))))))) c x) m)) (HSMul.hSMul.{u1, u3, u3} R ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) x m)) ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) x m)) (instHSMul.{u1, u3} R ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) x m)) (SMulZeroClass.toSMul.{u1, u3} R ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) x m)) (AddMonoid.toZero.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) x m)) (AddCommMonoid.toAddMonoid.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) x m)) _inst_4)) (SMulWithZero.toSMulZeroClass.{u1, u3} R ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) x m)) (MonoidWithZero.toZero.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)) (AddMonoid.toZero.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) x m)) (AddCommMonoid.toAddMonoid.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) x m)) _inst_4)) (MulActionWithZero.toSMulWithZero.{u1, u3} R ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) x m)) (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddMonoid.toZero.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) x m)) (AddCommMonoid.toAddMonoid.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) x m)) _inst_4)) (Module.toMulActionWithZero.{u1, u3} R ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) x m)) _inst_1 _inst_4 _inst_9))))) c (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) (forall (i : Fin (Nat.succ n)), M i) (fun (f : forall (i : Fin (Nat.succ n)), M i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) f (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) x m)))
Case conversion may be inaccurate. Consider using '#align multilinear_map.cons_smul MultilinearMap.cons_smulₓ'. -/
/-- In the specific case of multilinear maps on spaces indexed by `fin (n+1)`, where one can build
an element of `Π(i : fin (n+1)), M i` using `cons`, one can express directly the multiplicativity
of a multilinear map along the first variable. -/
theorem cons_smul (f : MultilinearMap R M M₂) (m : ∀ i : Fin n, M i.succ) (c : R) (x : M 0) :
    f (cons (c • x) m) = c • f (cons x m) := by
  rw [← update_cons_zero x m (c • x), f.map_smul, update_cons_zero]
#align multilinear_map.cons_smul MultilinearMap.cons_smul

/- warning: multilinear_map.snoc_add -> MultilinearMap.snoc_add is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {n : Nat} {M : (Fin (Nat.succ n)) -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_7 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) _inst_1 (_inst_2 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) (m : forall (i : Fin n), M (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (x : M (Fin.last n)) (y : M (Fin.last n)), Eq.{succ u3} M₂ (coeFn.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) => (forall (i : Fin (Nat.succ n)), M i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) f (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m (HAdd.hAdd.{u2, u2, u2} (M (Fin.last n)) (M (Fin.last n)) (M (Fin.last n)) (instHAdd.{u2} (M (Fin.last n)) (AddZeroClass.toHasAdd.{u2} (M (Fin.last n)) (AddMonoid.toAddZeroClass.{u2} (M (Fin.last n)) (AddCommMonoid.toAddMonoid.{u2} (M (Fin.last n)) (_inst_2 (Fin.last n)))))) x y))) (HAdd.hAdd.{u3, u3, u3} M₂ M₂ M₂ (instHAdd.{u3} M₂ (AddZeroClass.toHasAdd.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)))) (coeFn.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) => (forall (i : Fin (Nat.succ n)), M i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) f (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m x)) (coeFn.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) => (forall (i : Fin (Nat.succ n)), M i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) f (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m y)))
but is expected to have type
  forall {R : Type.{u1}} {n : Nat} {M : (Fin (Nat.succ n)) -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_7 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) _inst_1 (_inst_2 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) (m : forall (i : Fin n), M (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (x : M (Fin.last n)) (y : M (Fin.last n)), Eq.{succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m (HAdd.hAdd.{u2, u2, u2} (M (Fin.last n)) (M (Fin.last n)) (M (Fin.last n)) (instHAdd.{u2} (M (Fin.last n)) (AddZeroClass.toAdd.{u2} (M (Fin.last n)) (AddMonoid.toAddZeroClass.{u2} (M (Fin.last n)) (AddCommMonoid.toAddMonoid.{u2} (M (Fin.last n)) (_inst_2 (Fin.last n)))))) x y))) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) (forall (i : Fin (Nat.succ n)), M i) (fun (f : forall (i : Fin (Nat.succ n)), M i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) f (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m (HAdd.hAdd.{u2, u2, u2} (M (Fin.last n)) (M (Fin.last n)) (M (Fin.last n)) (instHAdd.{u2} (M (Fin.last n)) (AddZeroClass.toAdd.{u2} (M (Fin.last n)) (AddMonoid.toAddZeroClass.{u2} (M (Fin.last n)) (AddCommMonoid.toAddMonoid.{u2} (M (Fin.last n)) (_inst_2 (Fin.last n)))))) x y))) (HAdd.hAdd.{u3, u3, u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m x)) ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m y)) ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m x)) (instHAdd.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m x)) (AddZeroClass.toAdd.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m x)) (AddMonoid.toAddZeroClass.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m x)) (AddCommMonoid.toAddMonoid.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m x)) _inst_4)))) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) (forall (i : Fin (Nat.succ n)), M i) (fun (f : forall (i : Fin (Nat.succ n)), M i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) f (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m x)) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) (forall (i : Fin (Nat.succ n)), M i) (fun (f : forall (i : Fin (Nat.succ n)), M i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) f (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m y)))
Case conversion may be inaccurate. Consider using '#align multilinear_map.snoc_add MultilinearMap.snoc_addₓ'. -/
/-- In the specific case of multilinear maps on spaces indexed by `fin (n+1)`, where one can build
an element of `Π(i : fin (n+1)), M i` using `snoc`, one can express directly the additivity of a
multilinear map along the first variable. -/
theorem snoc_add (f : MultilinearMap R M M₂) (m : ∀ i : Fin n, M i.cast_succ) (x y : M (last n)) :
    f (snoc m (x + y)) = f (snoc m x) + f (snoc m y) := by
  rw [← update_snoc_last x m (x + y), f.map_add, update_snoc_last, update_snoc_last]
#align multilinear_map.snoc_add MultilinearMap.snoc_add

/- warning: multilinear_map.snoc_smul -> MultilinearMap.snoc_smul is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {n : Nat} {M : (Fin (Nat.succ n)) -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_7 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) _inst_1 (_inst_2 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) (m : forall (i : Fin n), M (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (c : R) (x : M (Fin.last n)), Eq.{succ u3} M₂ (coeFn.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) => (forall (i : Fin (Nat.succ n)), M i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) f (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m (SMul.smul.{u1, u2} R (M (Fin.last n)) (SMulZeroClass.toHasSmul.{u1, u2} R (M (Fin.last n)) (AddZeroClass.toHasZero.{u2} (M (Fin.last n)) (AddMonoid.toAddZeroClass.{u2} (M (Fin.last n)) (AddCommMonoid.toAddMonoid.{u2} (M (Fin.last n)) (_inst_2 (Fin.last n))))) (SMulWithZero.toSmulZeroClass.{u1, u2} R (M (Fin.last n)) (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)))) (AddZeroClass.toHasZero.{u2} (M (Fin.last n)) (AddMonoid.toAddZeroClass.{u2} (M (Fin.last n)) (AddCommMonoid.toAddMonoid.{u2} (M (Fin.last n)) (_inst_2 (Fin.last n))))) (MulActionWithZero.toSMulWithZero.{u1, u2} R (M (Fin.last n)) (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddZeroClass.toHasZero.{u2} (M (Fin.last n)) (AddMonoid.toAddZeroClass.{u2} (M (Fin.last n)) (AddCommMonoid.toAddMonoid.{u2} (M (Fin.last n)) (_inst_2 (Fin.last n))))) (Module.toMulActionWithZero.{u1, u2} R (M (Fin.last n)) _inst_1 (_inst_2 (Fin.last n)) (_inst_7 (Fin.last n)))))) c x))) (SMul.smul.{u1, u3} R M₂ (SMulZeroClass.toHasSmul.{u1, u3} R M₂ (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (SMulWithZero.toSmulZeroClass.{u1, u3} R M₂ (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)))) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (MulActionWithZero.toSMulWithZero.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ _inst_1 _inst_4 _inst_9)))) c (coeFn.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) => (forall (i : Fin (Nat.succ n)), M i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) f (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m x)))
but is expected to have type
  forall {R : Type.{u1}} {n : Nat} {M : (Fin (Nat.succ n)) -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_7 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) _inst_1 (_inst_2 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) (m : forall (i : Fin n), M (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (c : R) (x : M (Fin.last n)), Eq.{succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m (HSMul.hSMul.{u1, u2, u2} R (M (Fin.last n)) (M (Fin.last n)) (instHSMul.{u1, u2} R (M (Fin.last n)) (SMulZeroClass.toSMul.{u1, u2} R (M (Fin.last n)) (AddMonoid.toZero.{u2} (M (Fin.last n)) (AddCommMonoid.toAddMonoid.{u2} (M (Fin.last n)) (_inst_2 (Fin.last n)))) (SMulWithZero.toSMulZeroClass.{u1, u2} R (M (Fin.last n)) (MonoidWithZero.toZero.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)) (AddMonoid.toZero.{u2} (M (Fin.last n)) (AddCommMonoid.toAddMonoid.{u2} (M (Fin.last n)) (_inst_2 (Fin.last n)))) (MulActionWithZero.toSMulWithZero.{u1, u2} R (M (Fin.last n)) (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddMonoid.toZero.{u2} (M (Fin.last n)) (AddCommMonoid.toAddMonoid.{u2} (M (Fin.last n)) (_inst_2 (Fin.last n)))) (Module.toMulActionWithZero.{u1, u2} R (M (Fin.last n)) _inst_1 (_inst_2 (Fin.last n)) (_inst_7 (Fin.last n))))))) c x))) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) (forall (i : Fin (Nat.succ n)), M i) (fun (f : forall (i : Fin (Nat.succ n)), M i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) f (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m (HSMul.hSMul.{u1, u2, u2} R (M (Fin.last n)) (M (Fin.last n)) (instHSMul.{u1, u2} R (M (Fin.last n)) (SMulZeroClass.toSMul.{u1, u2} R (M (Fin.last n)) (AddMonoid.toZero.{u2} (M (Fin.last n)) (AddCommMonoid.toAddMonoid.{u2} (M (Fin.last n)) (_inst_2 (Fin.last n)))) (SMulWithZero.toSMulZeroClass.{u1, u2} R (M (Fin.last n)) (MonoidWithZero.toZero.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)) (AddMonoid.toZero.{u2} (M (Fin.last n)) (AddCommMonoid.toAddMonoid.{u2} (M (Fin.last n)) (_inst_2 (Fin.last n)))) (MulActionWithZero.toSMulWithZero.{u1, u2} R (M (Fin.last n)) (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddMonoid.toZero.{u2} (M (Fin.last n)) (AddCommMonoid.toAddMonoid.{u2} (M (Fin.last n)) (_inst_2 (Fin.last n)))) (Module.toMulActionWithZero.{u1, u2} R (M (Fin.last n)) _inst_1 (_inst_2 (Fin.last n)) (_inst_7 (Fin.last n))))))) c x))) (HSMul.hSMul.{u1, u3, u3} R ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m x)) ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m x)) (instHSMul.{u1, u3} R ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m x)) (SMulZeroClass.toSMul.{u1, u3} R ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m x)) (AddMonoid.toZero.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m x)) (AddCommMonoid.toAddMonoid.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m x)) _inst_4)) (SMulWithZero.toSMulZeroClass.{u1, u3} R ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m x)) (MonoidWithZero.toZero.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)) (AddMonoid.toZero.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m x)) (AddCommMonoid.toAddMonoid.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m x)) _inst_4)) (MulActionWithZero.toSMulWithZero.{u1, u3} R ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m x)) (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddMonoid.toZero.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m x)) (AddCommMonoid.toAddMonoid.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m x)) _inst_4)) (Module.toMulActionWithZero.{u1, u3} R ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m x)) _inst_1 _inst_4 _inst_9))))) c (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) (forall (i : Fin (Nat.succ n)), M i) (fun (f : forall (i : Fin (Nat.succ n)), M i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_7 i) _inst_9) f (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m x)))
Case conversion may be inaccurate. Consider using '#align multilinear_map.snoc_smul MultilinearMap.snoc_smulₓ'. -/
/-- In the specific case of multilinear maps on spaces indexed by `fin (n+1)`, where one can build
an element of `Π(i : fin (n+1)), M i` using `cons`, one can express directly the multiplicativity
of a multilinear map along the first variable. -/
theorem snoc_smul (f : MultilinearMap R M M₂) (m : ∀ i : Fin n, M i.cast_succ) (c : R)
    (x : M (last n)) : f (snoc m (c • x)) = c • f (snoc m x) := by
  rw [← update_snoc_last x m (c • x), f.map_smul, update_snoc_last]
#align multilinear_map.snoc_smul MultilinearMap.snoc_smul

section

variable {M₁' : ι → Type _} [∀ i, AddCommMonoid (M₁' i)] [∀ i, Module R (M₁' i)]

variable {M₁'' : ι → Type _} [∀ i, AddCommMonoid (M₁'' i)] [∀ i, Module R (M₁'' i)]

#print MultilinearMap.compLinearMap /-
/-- If `g` is a multilinear map and `f` is a collection of linear maps,
then `g (f₁ m₁, ..., fₙ mₙ)` is again a multilinear map, that we call
`g.comp_linear_map f`. -/
def compLinearMap (g : MultilinearMap R M₁' M₂) (f : ∀ i, M₁ i →ₗ[R] M₁' i) : MultilinearMap R M₁ M₂
    where
  toFun m := g fun i => f i (m i)
  map_add' _ m i x y := by
    skip
    have : ∀ j z, f j (update m i z j) = update (fun k => f k (m k)) i (f i z) j := fun j z =>
      Function.apply_update (fun k => f k) _ _ _ _
    · simp [this]
  map_smul' _ m i c x := by
    skip
    have : ∀ j z, f j (update m i z j) = update (fun k => f k (m k)) i (f i z) j := fun j z =>
      Function.apply_update (fun k => f k) _ _ _ _
    · simp [this]
#align multilinear_map.comp_linear_map MultilinearMap.compLinearMap
-/

/- warning: multilinear_map.comp_linear_map_apply -> MultilinearMap.compLinearMap_apply is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] {M₁' : ι -> Type.{u5}} [_inst_12 : forall (i : ι), AddCommMonoid.{u5} (M₁' i)] [_inst_13 : forall (i : ι), Module.{u1, u5} R (M₁' i) _inst_1 (_inst_12 i)] (g : MultilinearMap.{u1, u5, u3, u4} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) (f : forall (i : ι), LinearMap.{u1, u1, u2, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)) (m : forall (i : ι), M₁ i), Eq.{succ u3} M₂ (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => (fun (i : ι) => _inst_3 i) i) _inst_4 (fun (i : ι) => (fun (i : ι) => _inst_8 i) i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => (fun (i : ι) => _inst_3 i) i) _inst_4 (fun (i : ι) => (fun (i : ι) => _inst_8 i) i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => (fun (i : ι) => _inst_3 i) i) _inst_4 (fun (i : ι) => (fun (i : ι) => _inst_8 i) i) _inst_9) (MultilinearMap.compLinearMap.{u1, u2, u3, u4, u5} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9 M₁' (fun (i : ι) => _inst_12 i) (fun (i : ι) => _inst_13 i) g f) m) (coeFn.{max (succ u4) (succ u5) (succ u3), max (max (succ u4) (succ u5)) (succ u3)} (MultilinearMap.{u1, u5, u3, u4} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) (fun (f : MultilinearMap.{u1, u5, u3, u4} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) => (forall (i : ι), M₁' i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u5, u3, u4} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) g (fun (i : ι) => coeFn.{max (succ u2) (succ u5), max (succ u2) (succ u5)} (LinearMap.{u1, u1, u2, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)) (fun (_x : LinearMap.{u1, u1, u2, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)) => (M₁ i) -> (M₁' i)) (LinearMap.hasCoeToFun.{u1, u1, u2, u5} R R (M₁ i) (M₁' i) _inst_1 _inst_1 (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1))) (f i) (m i)))
but is expected to have type
  forall {R : Type.{u2}} {ι : Type.{u5}} {M₁ : ι -> Type.{u3}} {M₂ : Type.{u4}} [_inst_1 : Semiring.{u2} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u3} (M₁ i)] [_inst_4 : AddCommMonoid.{u4} M₂] [_inst_8 : forall (i : ι), Module.{u2, u3} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u2, u4} R M₂ _inst_1 _inst_4] {M₁' : ι -> Type.{u1}} [_inst_12 : forall (i : ι), AddCommMonoid.{u1} (M₁' i)] [_inst_13 : forall (i : ι), Module.{u2, u1} R (M₁' i) _inst_1 (_inst_12 i)] (g : MultilinearMap.{u2, u1, u4, u5} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) (f : forall (i : ι), LinearMap.{u2, u2, u3, u1} R R _inst_1 _inst_1 (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R _inst_1)) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)) (m : forall (i : ι), M₁ i), Eq.{succ u4} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (FunLike.coe.{max (max (succ u5) (succ u3)) (succ u4), max (succ u5) (succ u3), succ u4} (MultilinearMap.{u2, u3, u4, u5} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u2, u3, u4, u5} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (MultilinearMap.compLinearMap.{u2, u3, u4, u5, u1} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9 M₁' (fun (i : ι) => _inst_12 i) (fun (i : ι) => _inst_13 i) g f) m) (FunLike.coe.{max (max (succ u5) (succ u4)) (succ u1), max (succ u5) (succ u1), succ u4} (MultilinearMap.{u2, u1, u4, u5} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) (forall (i : ι), M₁' i) (fun (f : forall (i : ι), M₁' i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁' i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u2, u1, u4, u5} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) g (fun (i : ι) => FunLike.coe.{max (succ u3) (succ u1), succ u3, succ u1} (LinearMap.{u2, u2, u3, u1} R R _inst_1 _inst_1 (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R _inst_1)) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)) (M₁ i) (fun (_x : M₁ i) => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6191 : M₁ i) => M₁' i) _x) (LinearMap.instFunLikeLinearMap.{u2, u2, u3, u1} R R (M₁ i) (M₁' i) _inst_1 _inst_1 (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R _inst_1))) (f i) (m i)))
Case conversion may be inaccurate. Consider using '#align multilinear_map.comp_linear_map_apply MultilinearMap.compLinearMap_applyₓ'. -/
@[simp]
theorem compLinearMap_apply (g : MultilinearMap R M₁' M₂) (f : ∀ i, M₁ i →ₗ[R] M₁' i)
    (m : ∀ i, M₁ i) : g.compLinearMap f m = g fun i => f i (m i) :=
  rfl
#align multilinear_map.comp_linear_map_apply MultilinearMap.compLinearMap_apply

/- warning: multilinear_map.comp_linear_map_assoc -> MultilinearMap.compLinearMap_assoc is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] {M₁' : ι -> Type.{u5}} [_inst_12 : forall (i : ι), AddCommMonoid.{u5} (M₁' i)] [_inst_13 : forall (i : ι), Module.{u1, u5} R (M₁' i) _inst_1 (_inst_12 i)] {M₁'' : ι -> Type.{u6}} [_inst_14 : forall (i : ι), AddCommMonoid.{u6} (M₁'' i)] [_inst_15 : forall (i : ι), Module.{u1, u6} R (M₁'' i) _inst_1 (_inst_14 i)] (g : MultilinearMap.{u1, u6, u3, u4} R ι M₁'' M₂ _inst_1 (fun (i : ι) => _inst_14 i) _inst_4 (fun (i : ι) => _inst_15 i) _inst_9) (f₁ : forall (i : ι), LinearMap.{u1, u1, u5, u6} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (M₁' i) (M₁'' i) (_inst_12 i) (_inst_14 i) (_inst_13 i) (_inst_15 i)) (f₂ : forall (i : ι), LinearMap.{u1, u1, u2, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)), Eq.{max (succ u4) (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (MultilinearMap.compLinearMap.{u1, u2, u3, u4, u5} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9 (fun (i : ι) => M₁' i) (fun (i : ι) => _inst_12 i) (fun (i : ι) => _inst_13 i) (MultilinearMap.compLinearMap.{u1, u5, u3, u4, u6} R ι (fun (i : ι) => M₁' i) M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9 M₁'' (fun (i : ι) => _inst_14 i) (fun (i : ι) => _inst_15 i) g f₁) f₂) (MultilinearMap.compLinearMap.{u1, u2, u3, u4, u6} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9 M₁'' (fun (i : ι) => _inst_14 i) (fun (i : ι) => _inst_15 i) g (fun (i : ι) => LinearMap.comp.{u1, u1, u1, u2, u5, u6} R R R (M₁ i) (M₁' i) (M₁'' i) _inst_1 _inst_1 _inst_1 (_inst_3 i) (_inst_12 i) (_inst_14 i) (_inst_8 i) (_inst_13 i) (_inst_15 i) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHomCompTriple.ids.{u1, u1} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1))) (f₁ i) (f₂ i)))
but is expected to have type
  forall {R : Type.{u3}} {ι : Type.{u6}} {M₁ : ι -> Type.{u4}} {M₂ : Type.{u5}} [_inst_1 : Semiring.{u3} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u4} (M₁ i)] [_inst_4 : AddCommMonoid.{u5} M₂] [_inst_8 : forall (i : ι), Module.{u3, u4} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u3, u5} R M₂ _inst_1 _inst_4] {M₁' : ι -> Type.{u1}} [_inst_12 : forall (i : ι), AddCommMonoid.{u1} (M₁' i)] [_inst_13 : forall (i : ι), Module.{u3, u1} R (M₁' i) _inst_1 (_inst_12 i)] {M₁'' : ι -> Type.{u2}} [_inst_14 : forall (i : ι), AddCommMonoid.{u2} (M₁'' i)] [_inst_15 : forall (i : ι), Module.{u3, u2} R (M₁'' i) _inst_1 (_inst_14 i)] (g : MultilinearMap.{u3, u2, u5, u6} R ι M₁'' M₂ _inst_1 (fun (i : ι) => _inst_14 i) _inst_4 (fun (i : ι) => _inst_15 i) _inst_9) (f₁ : forall (i : ι), LinearMap.{u3, u3, u1, u2} R R _inst_1 _inst_1 (RingHom.id.{u3} R (Semiring.toNonAssocSemiring.{u3} R _inst_1)) (M₁' i) (M₁'' i) (_inst_12 i) (_inst_14 i) (_inst_13 i) (_inst_15 i)) (f₂ : forall (i : ι), LinearMap.{u3, u3, u4, u1} R R _inst_1 _inst_1 (RingHom.id.{u3} R (Semiring.toNonAssocSemiring.{u3} R _inst_1)) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)), Eq.{max (max (succ u6) (succ u4)) (succ u5)} (MultilinearMap.{u3, u4, u5, u6} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (MultilinearMap.compLinearMap.{u3, u4, u5, u6, u1} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9 (fun (i : ι) => M₁' i) (fun (i : ι) => _inst_12 i) (fun (i : ι) => _inst_13 i) (MultilinearMap.compLinearMap.{u3, u1, u5, u6, u2} R ι (fun (i : ι) => M₁' i) M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9 M₁'' (fun (i : ι) => _inst_14 i) (fun (i : ι) => _inst_15 i) g f₁) f₂) (MultilinearMap.compLinearMap.{u3, u4, u5, u6, u2} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9 M₁'' (fun (i : ι) => _inst_14 i) (fun (i : ι) => _inst_15 i) g (fun (i : ι) => LinearMap.comp.{u3, u3, u3, u4, u1, u2} R R R (M₁ i) (M₁' i) (M₁'' i) _inst_1 _inst_1 _inst_1 (_inst_3 i) (_inst_12 i) (_inst_14 i) (_inst_8 i) (_inst_13 i) (_inst_15 i) (RingHom.id.{u3} R (Semiring.toNonAssocSemiring.{u3} R _inst_1)) (RingHom.id.{u3} R (Semiring.toNonAssocSemiring.{u3} R _inst_1)) (RingHom.id.{u3} R (Semiring.toNonAssocSemiring.{u3} R _inst_1)) (RingHomCompTriple.ids.{u3, u3} R R _inst_1 _inst_1 (RingHom.id.{u3} R (Semiring.toNonAssocSemiring.{u3} R _inst_1))) (f₁ i) (f₂ i)))
Case conversion may be inaccurate. Consider using '#align multilinear_map.comp_linear_map_assoc MultilinearMap.compLinearMap_assocₓ'. -/
/-- Composing a multilinear map twice with a linear map in each argument is
the same as composing with their composition. -/
theorem compLinearMap_assoc (g : MultilinearMap R M₁'' M₂) (f₁ : ∀ i, M₁' i →ₗ[R] M₁'' i)
    (f₂ : ∀ i, M₁ i →ₗ[R] M₁' i) :
    (g.compLinearMap f₁).compLinearMap f₂ = g.compLinearMap fun i => f₁ i ∘ₗ f₂ i :=
  rfl
#align multilinear_map.comp_linear_map_assoc MultilinearMap.compLinearMap_assoc

/- warning: multilinear_map.zero_comp_linear_map -> MultilinearMap.zero_compLinearMap is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] {M₁' : ι -> Type.{u5}} [_inst_12 : forall (i : ι), AddCommMonoid.{u5} (M₁' i)] [_inst_13 : forall (i : ι), Module.{u1, u5} R (M₁' i) _inst_1 (_inst_12 i)] (f : forall (i : ι), LinearMap.{u1, u1, u2, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)), Eq.{max (succ u4) (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (MultilinearMap.compLinearMap.{u1, u2, u3, u4, u5} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9 M₁' (fun (i : ι) => _inst_12 i) (fun (i : ι) => _inst_13 i) (OfNat.ofNat.{max u4 u5 u3} (MultilinearMap.{u1, u5, u3, u4} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) 0 (OfNat.mk.{max u4 u5 u3} (MultilinearMap.{u1, u5, u3, u4} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) 0 (Zero.zero.{max u4 u5 u3} (MultilinearMap.{u1, u5, u3, u4} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) (MultilinearMap.hasZero.{u1, u5, u3, u4} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9)))) f) (OfNat.ofNat.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) 0 (OfNat.mk.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) 0 (Zero.zero.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (MultilinearMap.hasZero.{u1, u2, u3, u4} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9))))
but is expected to have type
  forall {R : Type.{u2}} {ι : Type.{u5}} {M₁ : ι -> Type.{u3}} {M₂ : Type.{u4}} [_inst_1 : Semiring.{u2} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u3} (M₁ i)] [_inst_4 : AddCommMonoid.{u4} M₂] [_inst_8 : forall (i : ι), Module.{u2, u3} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u2, u4} R M₂ _inst_1 _inst_4] {M₁' : ι -> Type.{u1}} [_inst_12 : forall (i : ι), AddCommMonoid.{u1} (M₁' i)] [_inst_13 : forall (i : ι), Module.{u2, u1} R (M₁' i) _inst_1 (_inst_12 i)] (f : forall (i : ι), LinearMap.{u2, u2, u3, u1} R R _inst_1 _inst_1 (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R _inst_1)) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)), Eq.{max (max (succ u5) (succ u3)) (succ u4)} (MultilinearMap.{u2, u3, u4, u5} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (MultilinearMap.compLinearMap.{u2, u3, u4, u5, u1} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9 M₁' (fun (i : ι) => _inst_12 i) (fun (i : ι) => _inst_13 i) (OfNat.ofNat.{max (max u5 u4) u1} (MultilinearMap.{u2, u1, u4, u5} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) 0 (Zero.toOfNat0.{max (max u5 u4) u1} (MultilinearMap.{u2, u1, u4, u5} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) (MultilinearMap.instZeroMultilinearMap.{u2, u1, u4, u5} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9))) f) (OfNat.ofNat.{max (max u5 u3) u4} (MultilinearMap.{u2, u3, u4, u5} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) 0 (Zero.toOfNat0.{max (max u5 u3) u4} (MultilinearMap.{u2, u3, u4, u5} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (MultilinearMap.instZeroMultilinearMap.{u2, u3, u4, u5} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9)))
Case conversion may be inaccurate. Consider using '#align multilinear_map.zero_comp_linear_map MultilinearMap.zero_compLinearMapₓ'. -/
/-- Composing the zero multilinear map with a linear map in each argument. -/
@[simp]
theorem zero_compLinearMap (f : ∀ i, M₁ i →ₗ[R] M₁' i) :
    (0 : MultilinearMap R M₁' M₂).compLinearMap f = 0 :=
  ext fun _ => rfl
#align multilinear_map.zero_comp_linear_map MultilinearMap.zero_compLinearMap

/- warning: multilinear_map.comp_linear_map_id -> MultilinearMap.compLinearMap_id is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u3}} {M₂ : Type.{u2}} [_inst_1 : Semiring.{u1} R] [_inst_4 : AddCommMonoid.{u2} M₂] [_inst_9 : Module.{u1, u2} R M₂ _inst_1 _inst_4] {M₁' : ι -> Type.{u4}} [_inst_12 : forall (i : ι), AddCommMonoid.{u4} (M₁' i)] [_inst_13 : forall (i : ι), Module.{u1, u4} R (M₁' i) _inst_1 (_inst_12 i)] (g : MultilinearMap.{u1, u4, u2, u3} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9), Eq.{max (succ u3) (succ u4) (succ u2)} (MultilinearMap.{u1, u4, u2, u3} R ι (fun (i : ι) => M₁' i) M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) (MultilinearMap.compLinearMap.{u1, u4, u2, u3, u4} R ι (fun (i : ι) => M₁' i) M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9 M₁' (fun (i : ι) => _inst_12 i) (fun (i : ι) => _inst_13 i) g (fun (i : ι) => LinearMap.id.{u1, u4} R (M₁' i) _inst_1 (_inst_12 i) (_inst_13 i))) g
but is expected to have type
  forall {R : Type.{u2}} {ι : Type.{u4}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u2} R] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_9 : Module.{u2, u3} R M₂ _inst_1 _inst_4] {M₁' : ι -> Type.{u1}} [_inst_12 : forall (i : ι), AddCommMonoid.{u1} (M₁' i)] [_inst_13 : forall (i : ι), Module.{u2, u1} R (M₁' i) _inst_1 (_inst_12 i)] (g : MultilinearMap.{u2, u1, u3, u4} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9), Eq.{max (max (succ u4) (succ u3)) (succ u1)} (MultilinearMap.{u2, u1, u3, u4} R ι (fun (i : ι) => M₁' i) M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) (MultilinearMap.compLinearMap.{u2, u1, u3, u4, u1} R ι (fun (i : ι) => M₁' i) M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9 M₁' (fun (i : ι) => _inst_12 i) (fun (i : ι) => _inst_13 i) g (fun (i : ι) => LinearMap.id.{u2, u1} R (M₁' i) _inst_1 (_inst_12 i) (_inst_13 i))) g
Case conversion may be inaccurate. Consider using '#align multilinear_map.comp_linear_map_id MultilinearMap.compLinearMap_idₓ'. -/
/-- Composing a multilinear map with the identity linear map in each argument. -/
@[simp]
theorem compLinearMap_id (g : MultilinearMap R M₁' M₂) :
    (g.compLinearMap fun i => LinearMap.id) = g :=
  ext fun _ => rfl
#align multilinear_map.comp_linear_map_id MultilinearMap.compLinearMap_id

/- warning: multilinear_map.comp_linear_map_injective -> MultilinearMap.compLinearMap_injective is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] {M₁' : ι -> Type.{u5}} [_inst_12 : forall (i : ι), AddCommMonoid.{u5} (M₁' i)] [_inst_13 : forall (i : ι), Module.{u1, u5} R (M₁' i) _inst_1 (_inst_12 i)] (f : forall (i : ι), LinearMap.{u1, u1, u2, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)), (forall (i : ι), Function.Surjective.{succ u2, succ u5} (M₁ i) (M₁' i) (coeFn.{max (succ u2) (succ u5), max (succ u2) (succ u5)} (LinearMap.{u1, u1, u2, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)) (fun (_x : LinearMap.{u1, u1, u2, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)) => (M₁ i) -> (M₁' i)) (LinearMap.hasCoeToFun.{u1, u1, u2, u5} R R (M₁ i) (M₁' i) _inst_1 _inst_1 (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1))) (f i))) -> (Function.Injective.{max (succ u4) (succ u5) (succ u3), max (succ u4) (succ u2) (succ u3)} (MultilinearMap.{u1, u5, u3, u4} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (g : MultilinearMap.{u1, u5, u3, u4} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) => MultilinearMap.compLinearMap.{u1, u2, u3, u4, u5} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9 M₁' (fun (i : ι) => _inst_12 i) (fun (i : ι) => _inst_13 i) g f))
but is expected to have type
  forall {R : Type.{u2}} {ι : Type.{u5}} {M₁ : ι -> Type.{u3}} {M₂ : Type.{u4}} [_inst_1 : Semiring.{u2} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u3} (M₁ i)] [_inst_4 : AddCommMonoid.{u4} M₂] [_inst_8 : forall (i : ι), Module.{u2, u3} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u2, u4} R M₂ _inst_1 _inst_4] {M₁' : ι -> Type.{u1}} [_inst_12 : forall (i : ι), AddCommMonoid.{u1} (M₁' i)] [_inst_13 : forall (i : ι), Module.{u2, u1} R (M₁' i) _inst_1 (_inst_12 i)] (f : forall (i : ι), LinearMap.{u2, u2, u3, u1} R R _inst_1 _inst_1 (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R _inst_1)) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)), (forall (i : ι), Function.Surjective.{succ u3, succ u1} (M₁ i) (M₁' i) (FunLike.coe.{max (succ u3) (succ u1), succ u3, succ u1} (LinearMap.{u2, u2, u3, u1} R R _inst_1 _inst_1 (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R _inst_1)) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)) (M₁ i) (fun (_x : M₁ i) => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6191 : M₁ i) => M₁' i) _x) (LinearMap.instFunLikeLinearMap.{u2, u2, u3, u1} R R (M₁ i) (M₁' i) _inst_1 _inst_1 (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R _inst_1))) (f i))) -> (Function.Injective.{max (max (succ u5) (succ u4)) (succ u1), max (max (succ u5) (succ u4)) (succ u3)} (MultilinearMap.{u2, u1, u4, u5} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) (MultilinearMap.{u2, u3, u4, u5} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (g : MultilinearMap.{u2, u1, u4, u5} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) => MultilinearMap.compLinearMap.{u2, u3, u4, u5, u1} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9 M₁' (fun (i : ι) => _inst_12 i) (fun (i : ι) => _inst_13 i) g f))
Case conversion may be inaccurate. Consider using '#align multilinear_map.comp_linear_map_injective MultilinearMap.compLinearMap_injectiveₓ'. -/
/-- Composing with a family of surjective linear maps is injective. -/
theorem compLinearMap_injective (f : ∀ i, M₁ i →ₗ[R] M₁' i) (hf : ∀ i, Surjective (f i)) :
    Injective fun g : MultilinearMap R M₁' M₂ => g.compLinearMap f := fun g₁ g₂ h =>
  ext fun x => by
    simpa [fun i => surj_inv_eq (hf i)] using ext_iff.mp h fun i => surj_inv (hf i) (x i)
#align multilinear_map.comp_linear_map_injective MultilinearMap.compLinearMap_injective

/- warning: multilinear_map.comp_linear_map_inj -> MultilinearMap.compLinearMap_inj is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] {M₁' : ι -> Type.{u5}} [_inst_12 : forall (i : ι), AddCommMonoid.{u5} (M₁' i)] [_inst_13 : forall (i : ι), Module.{u1, u5} R (M₁' i) _inst_1 (_inst_12 i)] (f : forall (i : ι), LinearMap.{u1, u1, u2, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)), (forall (i : ι), Function.Surjective.{succ u2, succ u5} (M₁ i) (M₁' i) (coeFn.{max (succ u2) (succ u5), max (succ u2) (succ u5)} (LinearMap.{u1, u1, u2, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)) (fun (_x : LinearMap.{u1, u1, u2, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)) => (M₁ i) -> (M₁' i)) (LinearMap.hasCoeToFun.{u1, u1, u2, u5} R R (M₁ i) (M₁' i) _inst_1 _inst_1 (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1))) (f i))) -> (forall (g₁ : MultilinearMap.{u1, u5, u3, u4} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) (g₂ : MultilinearMap.{u1, u5, u3, u4} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9), Iff (Eq.{max (succ u4) (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (MultilinearMap.compLinearMap.{u1, u2, u3, u4, u5} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9 M₁' (fun (i : ι) => _inst_12 i) (fun (i : ι) => _inst_13 i) g₁ f) (MultilinearMap.compLinearMap.{u1, u2, u3, u4, u5} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9 M₁' (fun (i : ι) => _inst_12 i) (fun (i : ι) => _inst_13 i) g₂ f)) (Eq.{max (succ u4) (succ u5) (succ u3)} (MultilinearMap.{u1, u5, u3, u4} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) g₁ g₂))
but is expected to have type
  forall {R : Type.{u2}} {ι : Type.{u5}} {M₁ : ι -> Type.{u3}} {M₂ : Type.{u4}} [_inst_1 : Semiring.{u2} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u3} (M₁ i)] [_inst_4 : AddCommMonoid.{u4} M₂] [_inst_8 : forall (i : ι), Module.{u2, u3} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u2, u4} R M₂ _inst_1 _inst_4] {M₁' : ι -> Type.{u1}} [_inst_12 : forall (i : ι), AddCommMonoid.{u1} (M₁' i)] [_inst_13 : forall (i : ι), Module.{u2, u1} R (M₁' i) _inst_1 (_inst_12 i)] (f : forall (i : ι), LinearMap.{u2, u2, u3, u1} R R _inst_1 _inst_1 (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R _inst_1)) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)), (forall (i : ι), Function.Surjective.{succ u3, succ u1} (M₁ i) (M₁' i) (FunLike.coe.{max (succ u3) (succ u1), succ u3, succ u1} (LinearMap.{u2, u2, u3, u1} R R _inst_1 _inst_1 (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R _inst_1)) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)) (M₁ i) (fun (_x : M₁ i) => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6191 : M₁ i) => M₁' i) _x) (LinearMap.instFunLikeLinearMap.{u2, u2, u3, u1} R R (M₁ i) (M₁' i) _inst_1 _inst_1 (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R _inst_1))) (f i))) -> (forall (g₁ : MultilinearMap.{u2, u1, u4, u5} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) (g₂ : MultilinearMap.{u2, u1, u4, u5} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9), Iff (Eq.{max (max (succ u5) (succ u3)) (succ u4)} (MultilinearMap.{u2, u3, u4, u5} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (MultilinearMap.compLinearMap.{u2, u3, u4, u5, u1} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9 M₁' (fun (i : ι) => _inst_12 i) (fun (i : ι) => _inst_13 i) g₁ f) (MultilinearMap.compLinearMap.{u2, u3, u4, u5, u1} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9 M₁' (fun (i : ι) => _inst_12 i) (fun (i : ι) => _inst_13 i) g₂ f)) (Eq.{max (max (succ u5) (succ u4)) (succ u1)} (MultilinearMap.{u2, u1, u4, u5} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) g₁ g₂))
Case conversion may be inaccurate. Consider using '#align multilinear_map.comp_linear_map_inj MultilinearMap.compLinearMap_injₓ'. -/
theorem compLinearMap_inj (f : ∀ i, M₁ i →ₗ[R] M₁' i) (hf : ∀ i, Surjective (f i))
    (g₁ g₂ : MultilinearMap R M₁' M₂) : g₁.compLinearMap f = g₂.compLinearMap f ↔ g₁ = g₂ :=
  (compLinearMap_injective _ hf).eq_iff
#align multilinear_map.comp_linear_map_inj MultilinearMap.compLinearMap_inj

/- warning: multilinear_map.comp_linear_equiv_eq_zero_iff -> MultilinearMap.comp_linearEquiv_eq_zero_iff is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] {M₁' : ι -> Type.{u5}} [_inst_12 : forall (i : ι), AddCommMonoid.{u5} (M₁' i)] [_inst_13 : forall (i : ι), Module.{u1, u5} R (M₁' i) _inst_1 (_inst_12 i)] (g : MultilinearMap.{u1, u5, u3, u4} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) (f : forall (i : ι), LinearEquiv.{u1, u1, u2, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R _inst_1) (RingHomInvPair.ids.{u1} R _inst_1) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)), Iff (Eq.{max (succ u4) (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (MultilinearMap.compLinearMap.{u1, u2, u3, u4, u5} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9 M₁' (fun (i : ι) => _inst_12 i) (fun (i : ι) => _inst_13 i) g (fun (i : ι) => (fun (a : Sort.{max (succ u2) (succ u5)}) (b : Sort.{max (succ u2) (succ u5)}) [self : HasLiftT.{max (succ u2) (succ u5), max (succ u2) (succ u5)} a b] => self.0) (LinearEquiv.{u1, u1, u2, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R _inst_1) (RingHomInvPair.ids.{u1} R _inst_1) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)) (LinearMap.{u1, u1, u2, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)) (HasLiftT.mk.{max (succ u2) (succ u5), max (succ u2) (succ u5)} (LinearEquiv.{u1, u1, u2, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R _inst_1) (RingHomInvPair.ids.{u1} R _inst_1) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)) (LinearMap.{u1, u1, u2, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)) (CoeTCₓ.coe.{max (succ u2) (succ u5), max (succ u2) (succ u5)} (LinearEquiv.{u1, u1, u2, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R _inst_1) (RingHomInvPair.ids.{u1} R _inst_1) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)) (LinearMap.{u1, u1, u2, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)) (coeBase.{max (succ u2) (succ u5), max (succ u2) (succ u5)} (LinearEquiv.{u1, u1, u2, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R _inst_1) (RingHomInvPair.ids.{u1} R _inst_1) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)) (LinearMap.{u1, u1, u2, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)) (LinearEquiv.LinearMap.hasCoe.{u1, u1, u2, u5} R R (M₁ i) (M₁' i) _inst_1 _inst_1 (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R _inst_1) (RingHomInvPair.ids.{u1} R _inst_1))))) (f i))) (OfNat.ofNat.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) 0 (OfNat.mk.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) 0 (Zero.zero.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (MultilinearMap.hasZero.{u1, u2, u3, u4} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9))))) (Eq.{max (succ u4) (succ u5) (succ u3)} (MultilinearMap.{u1, u5, u3, u4} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) g (OfNat.ofNat.{max u4 u5 u3} (MultilinearMap.{u1, u5, u3, u4} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) 0 (OfNat.mk.{max u4 u5 u3} (MultilinearMap.{u1, u5, u3, u4} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) 0 (Zero.zero.{max u4 u5 u3} (MultilinearMap.{u1, u5, u3, u4} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) (MultilinearMap.hasZero.{u1, u5, u3, u4} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9)))))
but is expected to have type
  forall {R : Type.{u2}} {ι : Type.{u5}} {M₁ : ι -> Type.{u3}} {M₂ : Type.{u4}} [_inst_1 : Semiring.{u2} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u3} (M₁ i)] [_inst_4 : AddCommMonoid.{u4} M₂] [_inst_8 : forall (i : ι), Module.{u2, u3} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u2, u4} R M₂ _inst_1 _inst_4] {M₁' : ι -> Type.{u1}} [_inst_12 : forall (i : ι), AddCommMonoid.{u1} (M₁' i)] [_inst_13 : forall (i : ι), Module.{u2, u1} R (M₁' i) _inst_1 (_inst_12 i)] (g : MultilinearMap.{u2, u1, u4, u5} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) (f : forall (i : ι), LinearEquiv.{u2, u2, u3, u1} R R _inst_1 _inst_1 (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R _inst_1)) (RingHomInvPair.ids.{u2} R _inst_1) (RingHomInvPair.ids.{u2} R _inst_1) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i)), Iff (Eq.{max (max (succ u5) (succ u3)) (succ u4)} (MultilinearMap.{u2, u3, u4, u5} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (MultilinearMap.compLinearMap.{u2, u3, u4, u5, u1} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9 M₁' (fun (i : ι) => _inst_12 i) (fun (i : ι) => _inst_13 i) g (fun (i : ι) => LinearEquiv.toLinearMap.{u2, u2, u3, u1} R R _inst_1 _inst_1 (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R _inst_1)) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R _inst_1)) (RingHomInvPair.ids.{u2} R _inst_1) (RingHomInvPair.ids.{u2} R _inst_1) (M₁ i) (M₁' i) (_inst_3 i) (_inst_12 i) (_inst_8 i) (_inst_13 i) (f i))) (OfNat.ofNat.{max (max u5 u3) u4} (MultilinearMap.{u2, u3, u4, u5} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) 0 (Zero.toOfNat0.{max (max u5 u3) u4} (MultilinearMap.{u2, u3, u4, u5} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (MultilinearMap.instZeroMultilinearMap.{u2, u3, u4, u5} R ι (fun (i : ι) => M₁ i) M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9)))) (Eq.{max (max (succ u5) (succ u4)) (succ u1)} (MultilinearMap.{u2, u1, u4, u5} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) g (OfNat.ofNat.{max (max u5 u4) u1} (MultilinearMap.{u2, u1, u4, u5} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) 0 (Zero.toOfNat0.{max (max u5 u4) u1} (MultilinearMap.{u2, u1, u4, u5} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9) (MultilinearMap.instZeroMultilinearMap.{u2, u1, u4, u5} R ι M₁' M₂ _inst_1 (fun (i : ι) => _inst_12 i) _inst_4 (fun (i : ι) => _inst_13 i) _inst_9))))
Case conversion may be inaccurate. Consider using '#align multilinear_map.comp_linear_equiv_eq_zero_iff MultilinearMap.comp_linearEquiv_eq_zero_iffₓ'. -/
/-- Composing a multilinear map with a linear equiv on each argument gives the zero map
if and only if the multilinear map is the zero map. -/
@[simp]
theorem comp_linearEquiv_eq_zero_iff (g : MultilinearMap R M₁' M₂) (f : ∀ i, M₁ i ≃ₗ[R] M₁' i) :
    (g.compLinearMap fun i => (f i : M₁ i →ₗ[R] M₁' i)) = 0 ↔ g = 0 :=
  by
  set f' := fun i => (f i : M₁ i →ₗ[R] M₁' i)
  rw [← zero_comp_linear_map f', comp_linear_map_inj f' fun i => (f i).Surjective]
#align multilinear_map.comp_linear_equiv_eq_zero_iff MultilinearMap.comp_linearEquiv_eq_zero_iff

end

/- warning: multilinear_map.map_piecewise_add -> MultilinearMap.map_piecewise_add is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) [_inst_12 : DecidableEq.{succ u4} ι] (m : forall (i : ι), M₁ i) (m' : forall (i : ι), M₁ i) (t : Finset.{u4} ι), Eq.{succ u3} M₂ (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (Finset.piecewise.{u4, succ u2} ι (fun (i : ι) => M₁ i) t (HAdd.hAdd.{max u4 u2, max u4 u2, max u4 u2} (forall (i : ι), M₁ i) (forall (i : ι), M₁ i) (forall (i : ι), M₁ i) (instHAdd.{max u4 u2} (forall (i : ι), M₁ i) (Pi.instAdd.{u4, u2} ι (fun (i : ι) => M₁ i) (fun (i : ι) => AddZeroClass.toHasAdd.{u2} (M₁ i) (AddMonoid.toAddZeroClass.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i)))))) m m') m' (fun (j : ι) => Finset.decidableMem.{u4} ι (fun (a : ι) (b : ι) => _inst_12 a b) j t))) (Finset.sum.{u3, u4} M₂ (Finset.{u4} ι) _inst_4 (Finset.powerset.{u4} ι t) (fun (s : Finset.{u4} ι) => coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (Finset.piecewise.{u4, succ u2} ι (fun (i : ι) => M₁ i) s m m' (fun (j : ι) => Finset.decidableMem.{u4} ι (fun (a : ι) (b : ι) => _inst_12 a b) j s))))
but is expected to have type
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) [_inst_12 : DecidableEq.{succ u4} ι] (m : forall (i : ι), M₁ i) (m' : forall (i : ι), M₁ i) (t : Finset.{u4} ι), Eq.{succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Finset.piecewise.{u4, succ u2} ι (fun (i : ι) => M₁ i) t (HAdd.hAdd.{max u4 u2, max u4 u2, max u4 u2} (forall (i : ι), M₁ i) (forall (i : ι), M₁ i) (forall (i : ι), M₁ i) (instHAdd.{max u4 u2} (forall (i : ι), M₁ i) (Pi.instAdd.{u4, u2} ι (fun (i : ι) => M₁ i) (fun (i : ι) => AddZeroClass.toAdd.{u2} (M₁ i) (AddMonoid.toAddZeroClass.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i)))))) m m') m' (fun (j : ι) => Finset.decidableMem.{u4} ι (fun (a : ι) (b : ι) => _inst_12 a b) j t))) (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (Finset.piecewise.{u4, succ u2} ι (fun (i : ι) => M₁ i) t (HAdd.hAdd.{max u4 u2, max u4 u2, max u4 u2} (forall (i : ι), M₁ i) (forall (i : ι), M₁ i) (forall (i : ι), M₁ i) (instHAdd.{max u4 u2} (forall (i : ι), M₁ i) (Pi.instAdd.{u4, u2} ι (fun (i : ι) => M₁ i) (fun (i : ι) => AddZeroClass.toAdd.{u2} (M₁ i) (AddMonoid.toAddZeroClass.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i)))))) m m') m' (fun (j : ι) => Finset.decidableMem.{u4} ι (fun (a : ι) (b : ι) => _inst_12 a b) j t))) (Finset.sum.{u3, u4} M₂ (Finset.{u4} ι) _inst_4 (Finset.powerset.{u4} ι t) (fun (s : Finset.{u4} ι) => FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (Finset.piecewise.{u4, succ u2} ι (fun (i : ι) => M₁ i) s m m' (fun (j : ι) => Finset.decidableMem.{u4} ι (fun (a : ι) (b : ι) => _inst_12 a b) j s))))
Case conversion may be inaccurate. Consider using '#align multilinear_map.map_piecewise_add MultilinearMap.map_piecewise_addₓ'. -/
/-- If one adds to a vector `m'` another vector `m`, but only for coordinates in a finset `t`, then
the image under a multilinear map `f` is the sum of `f (s.piecewise m m')` along all subsets `s` of
`t`. This is mainly an auxiliary statement to prove the result when `t = univ`, given in
`map_add_univ`, although it can be useful in its own right as it does not require the index set `ι`
to be finite.-/
theorem map_piecewise_add [DecidableEq ι] (m m' : ∀ i, M₁ i) (t : Finset ι) :
    f (t.piecewise (m + m') m') = ∑ s in t.powerset, f (s.piecewise m m') :=
  by
  revert m'
  refine' Finset.induction_on t (by simp) _
  intro i t hit Hrec m'
  have A : (insert i t).piecewise (m + m') m' = update (t.piecewise (m + m') m') i (m i + m' i) :=
    t.piecewise_insert _ _ _
  have B : update (t.piecewise (m + m') m') i (m' i) = t.piecewise (m + m') m' :=
    by
    ext j
    by_cases h : j = i
    · rw [h]
      simp [hit]
    · simp [h]
  let m'' := update m' i (m i)
  have C : update (t.piecewise (m + m') m') i (m i) = t.piecewise (m + m'') m'' :=
    by
    ext j
    by_cases h : j = i
    · rw [h]
      simp [m'', hit]
    · by_cases h' : j ∈ t <;> simp [h, hit, m'', h']
  rw [A, f.map_add, B, C, Finset.sum_powerset_insert hit, Hrec, Hrec, add_comm]
  congr 1
  apply Finset.sum_congr rfl fun s hs => _
  have : (insert i s).piecewise m m' = s.piecewise m m'' :=
    by
    ext j
    by_cases h : j = i
    · rw [h]
      simp [m'', Finset.not_mem_of_mem_powerset_of_not_mem hs hit]
    · by_cases h' : j ∈ s <;> simp [h, m'', h']
  rw [this]
#align multilinear_map.map_piecewise_add MultilinearMap.map_piecewise_add

/- warning: multilinear_map.map_add_univ -> MultilinearMap.map_add_univ is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) [_inst_12 : DecidableEq.{succ u4} ι] [_inst_13 : Fintype.{u4} ι] (m : forall (i : ι), M₁ i) (m' : forall (i : ι), M₁ i), Eq.{succ u3} M₂ (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (HAdd.hAdd.{max u4 u2, max u4 u2, max u4 u2} (forall (i : ι), M₁ i) (forall (i : ι), M₁ i) (forall (i : ι), M₁ i) (instHAdd.{max u4 u2} (forall (i : ι), M₁ i) (Pi.instAdd.{u4, u2} ι (fun (i : ι) => M₁ i) (fun (i : ι) => AddZeroClass.toHasAdd.{u2} (M₁ i) (AddMonoid.toAddZeroClass.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i)))))) m m')) (Finset.sum.{u3, u4} M₂ (Finset.{u4} ι) _inst_4 (Finset.univ.{u4} (Finset.{u4} ι) (Finset.fintype.{u4} ι _inst_13)) (fun (s : Finset.{u4} ι) => coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (Finset.piecewise.{u4, succ u2} ι (fun (i : ι) => M₁ i) s m m' (fun (j : ι) => Finset.decidableMem.{u4} ι (fun (a : ι) (b : ι) => _inst_12 a b) j s))))
but is expected to have type
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) [_inst_12 : DecidableEq.{succ u4} ι] [_inst_13 : Fintype.{u4} ι] (m : forall (i : ι), M₁ i) (m' : forall (i : ι), M₁ i), Eq.{succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (HAdd.hAdd.{max u4 u2, max u4 u2, max u4 u2} (forall (i : ι), M₁ i) (forall (i : ι), M₁ i) (forall (i : ι), M₁ i) (instHAdd.{max u4 u2} (forall (i : ι), M₁ i) (Pi.instAdd.{u4, u2} ι (fun (i : ι) => M₁ i) (fun (i : ι) => AddZeroClass.toAdd.{u2} (M₁ i) (AddMonoid.toAddZeroClass.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i)))))) m m')) (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (HAdd.hAdd.{max u4 u2, max u4 u2, max u4 u2} (forall (i : ι), M₁ i) (forall (i : ι), M₁ i) (forall (i : ι), M₁ i) (instHAdd.{max u4 u2} (forall (i : ι), M₁ i) (Pi.instAdd.{u4, u2} ι (fun (i : ι) => M₁ i) (fun (i : ι) => AddZeroClass.toAdd.{u2} (M₁ i) (AddMonoid.toAddZeroClass.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i)))))) m m')) (Finset.sum.{u3, u4} M₂ (Finset.{u4} ι) _inst_4 (Finset.univ.{u4} (Finset.{u4} ι) (Finset.fintype.{u4} ι _inst_13)) (fun (s : Finset.{u4} ι) => FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (Finset.piecewise.{u4, succ u2} ι (fun (i : ι) => M₁ i) s m m' (fun (j : ι) => Finset.decidableMem.{u4} ι (fun (a : ι) (b : ι) => _inst_12 a b) j s))))
Case conversion may be inaccurate. Consider using '#align multilinear_map.map_add_univ MultilinearMap.map_add_univₓ'. -/
/-- Additivity of a multilinear map along all coordinates at the same time,
writing `f (m + m')` as the sum  of `f (s.piecewise m m')` over all sets `s`. -/
theorem map_add_univ [DecidableEq ι] [Fintype ι] (m m' : ∀ i, M₁ i) :
    f (m + m') = ∑ s : Finset ι, f (s.piecewise m m') := by
  simpa using f.map_piecewise_add m m' Finset.univ
#align multilinear_map.map_add_univ MultilinearMap.map_add_univ

section ApplySum

variable {α : ι → Type _} (g : ∀ i, α i → M₁ i) (A : ∀ i, Finset (α i))

open Fintype Finset

/- warning: multilinear_map.map_sum_finset_aux -> MultilinearMap.map_sum_finset_aux is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) {α : ι -> Type.{u5}} (g : forall (i : ι), (α i) -> (M₁ i)) (A : forall (i : ι), Finset.{u5} (α i)) [_inst_12 : DecidableEq.{succ u4} ι] [_inst_13 : Fintype.{u4} ι] {n : Nat}, (Eq.{1} Nat (Finset.sum.{0, u4} Nat ι Nat.addCommMonoid (Finset.univ.{u4} ι _inst_13) (fun (i : ι) => Finset.card.{u5} (α i) (A i))) n) -> (Eq.{succ u3} M₂ (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (fun (i : ι) => Finset.sum.{u2, u5} (M₁ i) (α i) (_inst_3 i) (A i) (fun (j : α i) => g i j))) (Finset.sum.{u3, max u4 u5} M₂ (forall (a : ι), α a) _inst_4 (Fintype.piFinset.{u4, u5} ι (fun (a : ι) (b : ι) => _inst_12 a b) _inst_13 (fun (i : ι) => α i) A) (fun (r : forall (a : ι), α a) => coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (fun (i : ι) => g i (r i)))))
but is expected to have type
  forall {R : Type.{u2}} {ι : Type.{u5}} {M₁ : ι -> Type.{u3}} {M₂ : Type.{u4}} [_inst_1 : Semiring.{u2} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u3} (M₁ i)] [_inst_4 : AddCommMonoid.{u4} M₂] [_inst_8 : forall (i : ι), Module.{u2, u3} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u2, u4} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) {α : ι -> Type.{u1}} (g : forall (i : ι), (α i) -> (M₁ i)) (A : forall (i : ι), Finset.{u1} (α i)) [_inst_12 : DecidableEq.{succ u5} ι] [_inst_13 : Fintype.{u5} ι] {n : Nat}, (Eq.{1} Nat (Finset.sum.{0, u5} Nat ι Nat.addCommMonoid (Finset.univ.{u5} ι _inst_13) (fun (i : ι) => Finset.card.{u1} (α i) (A i))) n) -> (Eq.{succ u4} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (fun (i : ι) => Finset.sum.{u3, u1} (M₁ i) (α i) (_inst_3 i) (A i) (fun (j : α i) => g i j))) (FunLike.coe.{max (max (succ u5) (succ u3)) (succ u4), max (succ u5) (succ u3), succ u4} (MultilinearMap.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (fun (i : ι) => Finset.sum.{u3, u1} (M₁ i) (α i) (_inst_3 i) (A i) (fun (j : α i) => g i j))) (Finset.sum.{u4, max u1 u5} M₂ (forall (a : ι), α a) _inst_4 (Fintype.piFinset.{u5, u1} ι (fun (a : ι) (b : ι) => _inst_12 a b) _inst_13 (fun (i : ι) => α i) A) (fun (r : forall (a : ι), α a) => FunLike.coe.{max (max (succ u5) (succ u3)) (succ u4), max (succ u5) (succ u3), succ u4} (MultilinearMap.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (fun (i : ι) => g i (r i)))))
Case conversion may be inaccurate. Consider using '#align multilinear_map.map_sum_finset_aux MultilinearMap.map_sum_finset_auxₓ'. -/
/-- If `f` is multilinear, then `f (Σ_{j₁ ∈ A₁} g₁ j₁, ..., Σ_{jₙ ∈ Aₙ} gₙ jₙ)` is the sum of
`f (g₁ (r 1), ..., gₙ (r n))` where `r` ranges over all functions with `r 1 ∈ A₁`, ...,
`r n ∈ Aₙ`. This follows from multilinearity by expanding successively with respect to each
coordinate. Here, we give an auxiliary statement tailored for an inductive proof. Use instead
`map_sum_finset`. -/
theorem map_sum_finset_aux [DecidableEq ι] [Fintype ι] {n : ℕ} (h : (∑ i, (A i).card) = n) :
    (f fun i => ∑ j in A i, g i j) = ∑ r in piFinset A, f fun i => g i (r i) :=
  by
  letI := fun i => Classical.decEq (α i)
  induction' n using Nat.strong_induction_on with n IH generalizing A
  -- If one of the sets is empty, then all the sums are zero
  by_cases Ai_empty : ∃ i, A i = ∅
  · rcases Ai_empty with ⟨i, hi⟩
    have : (∑ j in A i, g i j) = 0 := by rw [hi, Finset.sum_empty]
    rw [f.map_coord_zero i this]
    have : pi_finset A = ∅ :=
      by
      apply Finset.eq_empty_of_forall_not_mem fun r hr => _
      have : r i ∈ A i := mem_pi_finset.mp hr i
      rwa [hi] at this
    rw [this, Finset.sum_empty]
  push_neg  at Ai_empty
  -- Otherwise, if all sets are at most singletons, then they are exactly singletons and the result
  -- is again straightforward
  by_cases Ai_singleton : ∀ i, (A i).card ≤ 1
  · have Ai_card : ∀ i, (A i).card = 1 := by
      intro i
      have pos : Finset.card (A i) ≠ 0 := by simp [Finset.card_eq_zero, Ai_empty i]
      have : Finset.card (A i) ≤ 1 := Ai_singleton i
      exact le_antisymm this (Nat.succ_le_of_lt (_root_.pos_iff_ne_zero.mpr Pos))
    have :
      ∀ r : ∀ i, α i, r ∈ pi_finset A → (f fun i => g i (r i)) = f fun i => ∑ j in A i, g i j :=
      by
      intro r hr
      unfold_coes
      congr with i
      have : ∀ j ∈ A i, g i j = g i (r i) := by
        intro j hj
        congr
        apply Finset.card_le_one_iff.1 (Ai_singleton i) hj
        exact mem_pi_finset.mp hr i
      simp only [Finset.sum_congr rfl this, Finset.mem_univ, Finset.sum_const, Ai_card i, one_nsmul]
    simp only [sum_congr rfl this, Ai_card, card_pi_finset, prod_const_one, one_nsmul,
      Finset.sum_const]
  -- Remains the interesting case where one of the `A i`, say `A i₀`, has cardinality at least 2.
  -- We will split into two parts `B i₀` and `C i₀` of smaller cardinality, let `B i = C i = A i`
  -- for `i ≠ i₀`, apply the inductive assumption to `B` and `C`, and add up the corresponding
  -- parts to get the sum for `A`.
  push_neg  at Ai_singleton
  obtain ⟨i₀, hi₀⟩ : ∃ i, 1 < (A i).card := Ai_singleton
  obtain ⟨j₁, j₂, hj₁, hj₂, j₁_ne_j₂⟩ : ∃ j₁ j₂, j₁ ∈ A i₀ ∧ j₂ ∈ A i₀ ∧ j₁ ≠ j₂ :=
    Finset.one_lt_card_iff.1 hi₀
  let B := Function.update A i₀ (A i₀ \ {j₂})
  let C := Function.update A i₀ {j₂}
  have B_subset_A : ∀ i, B i ⊆ A i := by
    intro i
    by_cases hi : i = i₀
    · rw [hi]
      simp only [B, sdiff_subset, update_same]
    · simp only [hi, B, update_noteq, Ne.def, not_false_iff, Finset.Subset.refl]
  have C_subset_A : ∀ i, C i ⊆ A i := by
    intro i
    by_cases hi : i = i₀
    · rw [hi]
      simp only [C, hj₂, Finset.singleton_subset_iff, update_same]
    · simp only [hi, C, update_noteq, Ne.def, not_false_iff, Finset.Subset.refl]
  -- split the sum at `i₀` as the sum over `B i₀` plus the sum over `C i₀`, to use additivity.
  have A_eq_BC :
    (fun i => ∑ j in A i, g i j) =
      Function.update (fun i => ∑ j in A i, g i j) i₀
        ((∑ j in B i₀, g i₀ j) + ∑ j in C i₀, g i₀ j) :=
    by
    ext i
    by_cases hi : i = i₀
    · rw [hi]
      simp only [Function.update_same]
      have : A i₀ = B i₀ ∪ C i₀ :=
        by
        simp only [B, C, Function.update_same, Finset.sdiff_union_self_eq_union]
        symm
        simp only [hj₂, Finset.singleton_subset_iff, Finset.union_eq_left_iff_subset]
      rw [this]
      apply Finset.sum_union
      apply Finset.disjoint_right.2 fun j hj => _
      have : j = j₂ := by
        dsimp [C] at hj
        simpa using hj
      rw [this]
      dsimp [B]
      simp only [mem_sdiff, eq_self_iff_true, not_true, not_false_iff, Finset.mem_singleton,
        update_same, and_false_iff]
    · simp [hi]
  have Beq :
    Function.update (fun i => ∑ j in A i, g i j) i₀ (∑ j in B i₀, g i₀ j) = fun i =>
      ∑ j in B i, g i j :=
    by
    ext i
    by_cases hi : i = i₀
    · rw [hi]
      simp only [update_same]
    · simp only [hi, B, update_noteq, Ne.def, not_false_iff]
  have Ceq :
    Function.update (fun i => ∑ j in A i, g i j) i₀ (∑ j in C i₀, g i₀ j) = fun i =>
      ∑ j in C i, g i j :=
    by
    ext i
    by_cases hi : i = i₀
    · rw [hi]
      simp only [update_same]
    · simp only [hi, C, update_noteq, Ne.def, not_false_iff]
  -- Express the inductive assumption for `B`
  have Brec : (f fun i => ∑ j in B i, g i j) = ∑ r in pi_finset B, f fun i => g i (r i) :=
    by
    have : (∑ i, Finset.card (B i)) < ∑ i, Finset.card (A i) :=
      by
      refine'
        Finset.sum_lt_sum (fun i hi => Finset.card_le_of_subset (B_subset_A i))
          ⟨i₀, Finset.mem_univ _, _⟩
      have : {j₂} ⊆ A i₀ := by simp [hj₂]
      simp only [B, Finset.card_sdiff this, Function.update_same, Finset.card_singleton]
      exact Nat.pred_lt (ne_of_gt (lt_trans Nat.zero_lt_one hi₀))
    rw [h] at this
    exact IH _ this B rfl
  -- Express the inductive assumption for `C`
  have Crec : (f fun i => ∑ j in C i, g i j) = ∑ r in pi_finset C, f fun i => g i (r i) :=
    by
    have : (∑ i, Finset.card (C i)) < ∑ i, Finset.card (A i) :=
      Finset.sum_lt_sum (fun i hi => Finset.card_le_of_subset (C_subset_A i))
        ⟨i₀, Finset.mem_univ _, by simp [C, hi₀]⟩
    rw [h] at this
    exact IH _ this C rfl
  have D : Disjoint (pi_finset B) (pi_finset C) :=
    haveI : Disjoint (B i₀) (C i₀) := by simp [B, C]
    pi_finset_disjoint_of_disjoint B C this
  have pi_BC : pi_finset A = pi_finset B ∪ pi_finset C :=
    by
    apply Finset.Subset.antisymm
    · intro r hr
      by_cases hri₀ : r i₀ = j₂
      · apply Finset.mem_union_right
        apply mem_pi_finset.2 fun i => _
        by_cases hi : i = i₀
        · have : r i₀ ∈ C i₀ := by simp [C, hri₀]
          convert this
        · simp [C, hi, mem_pi_finset.1 hr i]
      · apply Finset.mem_union_left
        apply mem_pi_finset.2 fun i => _
        by_cases hi : i = i₀
        · have : r i₀ ∈ B i₀ := by simp [B, hri₀, mem_pi_finset.1 hr i₀]
          convert this
        · simp [B, hi, mem_pi_finset.1 hr i]
    ·
      exact
        Finset.union_subset (pi_finset_subset _ _ fun i => B_subset_A i)
          (pi_finset_subset _ _ fun i => C_subset_A i)
  rw [A_eq_BC]
  simp only [MultilinearMap.map_add, Beq, Ceq, Brec, Crec, pi_BC]
  rw [← Finset.sum_union D]
#align multilinear_map.map_sum_finset_aux MultilinearMap.map_sum_finset_aux

/- warning: multilinear_map.map_sum_finset -> MultilinearMap.map_sum_finset is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) {α : ι -> Type.{u5}} (g : forall (i : ι), (α i) -> (M₁ i)) (A : forall (i : ι), Finset.{u5} (α i)) [_inst_12 : DecidableEq.{succ u4} ι] [_inst_13 : Fintype.{u4} ι], Eq.{succ u3} M₂ (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (fun (i : ι) => Finset.sum.{u2, u5} (M₁ i) (α i) (_inst_3 i) (A i) (fun (j : α i) => g i j))) (Finset.sum.{u3, max u4 u5} M₂ (forall (a : ι), α a) _inst_4 (Fintype.piFinset.{u4, u5} ι (fun (a : ι) (b : ι) => _inst_12 a b) _inst_13 (fun (i : ι) => α i) A) (fun (r : forall (a : ι), α a) => coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (fun (i : ι) => g i (r i))))
but is expected to have type
  forall {R : Type.{u2}} {ι : Type.{u5}} {M₁ : ι -> Type.{u3}} {M₂ : Type.{u4}} [_inst_1 : Semiring.{u2} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u3} (M₁ i)] [_inst_4 : AddCommMonoid.{u4} M₂] [_inst_8 : forall (i : ι), Module.{u2, u3} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u2, u4} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) {α : ι -> Type.{u1}} (g : forall (i : ι), (α i) -> (M₁ i)) (A : forall (i : ι), Finset.{u1} (α i)) [_inst_12 : DecidableEq.{succ u5} ι] [_inst_13 : Fintype.{u5} ι], Eq.{succ u4} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (fun (i : ι) => Finset.sum.{u3, u1} (M₁ i) (α i) (_inst_3 i) (A i) (fun (j : α i) => g i j))) (FunLike.coe.{max (max (succ u5) (succ u3)) (succ u4), max (succ u5) (succ u3), succ u4} (MultilinearMap.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (fun (i : ι) => Finset.sum.{u3, u1} (M₁ i) (α i) (_inst_3 i) (A i) (fun (j : α i) => g i j))) (Finset.sum.{u4, max u1 u5} M₂ (forall (a : ι), α a) _inst_4 (Fintype.piFinset.{u5, u1} ι (fun (a : ι) (b : ι) => _inst_12 a b) _inst_13 (fun (i : ι) => α i) A) (fun (r : forall (a : ι), α a) => FunLike.coe.{max (max (succ u5) (succ u3)) (succ u4), max (succ u5) (succ u3), succ u4} (MultilinearMap.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (fun (i : ι) => g i (r i))))
Case conversion may be inaccurate. Consider using '#align multilinear_map.map_sum_finset MultilinearMap.map_sum_finsetₓ'. -/
/-- If `f` is multilinear, then `f (Σ_{j₁ ∈ A₁} g₁ j₁, ..., Σ_{jₙ ∈ Aₙ} gₙ jₙ)` is the sum of
`f (g₁ (r 1), ..., gₙ (r n))` where `r` ranges over all functions with `r 1 ∈ A₁`, ...,
`r n ∈ Aₙ`. This follows from multilinearity by expanding successively with respect to each
coordinate. -/
theorem map_sum_finset [DecidableEq ι] [Fintype ι] :
    (f fun i => ∑ j in A i, g i j) = ∑ r in piFinset A, f fun i => g i (r i) :=
  f.map_sum_finset_aux _ _ rfl
#align multilinear_map.map_sum_finset MultilinearMap.map_sum_finset

/- warning: multilinear_map.map_sum -> MultilinearMap.map_sum is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) {α : ι -> Type.{u5}} (g : forall (i : ι), (α i) -> (M₁ i)) [_inst_12 : DecidableEq.{succ u4} ι] [_inst_13 : Fintype.{u4} ι] [_inst_14 : forall (i : ι), Fintype.{u5} (α i)], Eq.{succ u3} M₂ (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (fun (i : ι) => Finset.sum.{u2, u5} (M₁ i) (α i) (_inst_3 i) (Finset.univ.{u5} (α i) (_inst_14 i)) (fun (j : α i) => g i j))) (Finset.sum.{u3, max u4 u5} M₂ (forall (i : ι), α i) _inst_4 (Finset.univ.{max u4 u5} (forall (i : ι), α i) (Pi.fintype.{u4, u5} ι (fun (i : ι) => α i) (fun (a : ι) (b : ι) => _inst_12 a b) _inst_13 (fun (a : ι) => _inst_14 a))) (fun (r : forall (i : ι), α i) => coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (fun (i : ι) => g i (r i))))
but is expected to have type
  forall {R : Type.{u2}} {ι : Type.{u5}} {M₁ : ι -> Type.{u3}} {M₂ : Type.{u4}} [_inst_1 : Semiring.{u2} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u3} (M₁ i)] [_inst_4 : AddCommMonoid.{u4} M₂] [_inst_8 : forall (i : ι), Module.{u2, u3} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u2, u4} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) {α : ι -> Type.{u1}} (g : forall (i : ι), (α i) -> (M₁ i)) [_inst_12 : DecidableEq.{succ u5} ι] [_inst_13 : Fintype.{u5} ι] [_inst_14 : forall (i : ι), Fintype.{u1} (α i)], Eq.{succ u4} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (fun (i : ι) => Finset.sum.{u3, u1} (M₁ i) (α i) (_inst_3 i) (Finset.univ.{u1} (α i) (_inst_14 i)) (fun (j : α i) => g i j))) (FunLike.coe.{max (max (succ u5) (succ u3)) (succ u4), max (succ u5) (succ u3), succ u4} (MultilinearMap.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (fun (i : ι) => Finset.sum.{u3, u1} (M₁ i) (α i) (_inst_3 i) (Finset.univ.{u1} (α i) (_inst_14 i)) (fun (j : α i) => g i j))) (Finset.sum.{u4, max u5 u1} M₂ (forall (i : ι), α i) _inst_4 (Finset.univ.{max u5 u1} (forall (i : ι), α i) (Pi.fintype.{u5, u1} ι (fun (i : ι) => α i) (fun (a : ι) (b : ι) => _inst_12 a b) _inst_13 (fun (a : ι) => _inst_14 a))) (fun (r : forall (i : ι), α i) => FunLike.coe.{max (max (succ u5) (succ u3)) (succ u4), max (succ u5) (succ u3), succ u4} (MultilinearMap.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (fun (i : ι) => g i (r i))))
Case conversion may be inaccurate. Consider using '#align multilinear_map.map_sum MultilinearMap.map_sumₓ'. -/
/-- If `f` is multilinear, then `f (Σ_{j₁} g₁ j₁, ..., Σ_{jₙ} gₙ jₙ)` is the sum of
`f (g₁ (r 1), ..., gₙ (r n))` where `r` ranges over all functions `r`. This follows from
multilinearity by expanding successively with respect to each coordinate. -/
theorem map_sum [DecidableEq ι] [Fintype ι] [∀ i, Fintype (α i)] :
    (f fun i => ∑ j, g i j) = ∑ r : ∀ i, α i, f fun i => g i (r i) :=
  f.map_sum_finset g fun i => Finset.univ
#align multilinear_map.map_sum MultilinearMap.map_sum

/- warning: multilinear_map.map_update_sum -> MultilinearMap.map_update_sum is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) {α : Type.{u5}} [_inst_12 : DecidableEq.{succ u4} ι] (t : Finset.{u5} α) (i : ι) (g : α -> (M₁ i)) (m : forall (i : ι), M₁ i), Eq.{succ u3} M₂ (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_12 a b) m i (Finset.sum.{u2, u5} (M₁ i) α (_inst_3 i) t (fun (a : α) => g a)))) (Finset.sum.{u3, u5} M₂ α _inst_4 t (fun (a : α) => coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_12 a b) m i (g a))))
but is expected to have type
  forall {R : Type.{u2}} {ι : Type.{u5}} {M₁ : ι -> Type.{u3}} {M₂ : Type.{u4}} [_inst_1 : Semiring.{u2} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u3} (M₁ i)] [_inst_4 : AddCommMonoid.{u4} M₂] [_inst_8 : forall (i : ι), Module.{u2, u3} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u2, u4} R M₂ _inst_1 _inst_4] (f : MultilinearMap.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) {α : Type.{u1}} [_inst_12 : DecidableEq.{succ u5} ι] (t : Finset.{u1} α) (i : ι) (g : α -> (M₁ i)) (m : forall (i : ι), M₁ i), Eq.{succ u4} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u5, succ u3} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_12 a b) m i (Finset.sum.{u3, u1} (M₁ i) α (_inst_3 i) t (fun (a : α) => g a)))) (FunLike.coe.{max (max (succ u5) (succ u3)) (succ u4), max (succ u5) (succ u3), succ u4} (MultilinearMap.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (Function.update.{succ u5, succ u3} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_12 a b) m i (Finset.sum.{u3, u1} (M₁ i) α (_inst_3 i) t (fun (a : α) => g a)))) (Finset.sum.{u4, u1} M₂ α _inst_4 t (fun (a : α) => FunLike.coe.{max (max (succ u5) (succ u3)) (succ u4), max (succ u5) (succ u3), succ u4} (MultilinearMap.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) f (Function.update.{succ u5, succ u3} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_12 a b) m i (g a))))
Case conversion may be inaccurate. Consider using '#align multilinear_map.map_update_sum MultilinearMap.map_update_sumₓ'. -/
theorem map_update_sum {α : Type _} [DecidableEq ι] (t : Finset α) (i : ι) (g : α → M₁ i)
    (m : ∀ i, M₁ i) : f (update m i (∑ a in t, g a)) = ∑ a in t, f (update m i (g a)) := by
  classical
    induction' t using Finset.induction with a t has ih h
    · simp
    · simp [Finset.sum_insert has, ih]
#align multilinear_map.map_update_sum MultilinearMap.map_update_sum

end ApplySum

#print MultilinearMap.codRestrict /-
/-- Restrict the codomain of a multilinear map to a submodule.

This is the multilinear version of `linear_map.cod_restrict`. -/
@[simps]
def codRestrict (f : MultilinearMap R M₁ M₂) (p : Submodule R M₂) (h : ∀ v, f v ∈ p) :
    MultilinearMap R M₁ p where
  toFun v := ⟨f v, h v⟩
  map_add' _ v i x y := Subtype.ext <| MultilinearMap.map_add _ _ _ _ _
  map_smul' _ v i c x := Subtype.ext <| MultilinearMap.map_smul _ _ _ _ _
#align multilinear_map.cod_restrict MultilinearMap.codRestrict
-/

section RestrictScalar

variable (R) {A : Type _} [Semiring A] [SMul R A] [∀ i : ι, Module A (M₁ i)] [Module A M₂]
  [∀ i, IsScalarTower R A (M₁ i)] [IsScalarTower R A M₂]

#print MultilinearMap.restrictScalars /-
/-- Reinterpret an `A`-multilinear map as an `R`-multilinear map, if `A` is an algebra over `R`
and their actions on all involved modules agree with the action of `R` on `A`. -/
def restrictScalars (f : MultilinearMap A M₁ M₂) : MultilinearMap R M₁ M₂
    where
  toFun := f
  map_add' _ := f.map_add
  map_smul' _ m i := (f.to_linear_map m i).map_smul_of_tower
#align multilinear_map.restrict_scalars MultilinearMap.restrictScalars
-/

/- warning: multilinear_map.coe_restrict_scalars -> MultilinearMap.coe_restrictScalars is a dubious translation:
lean 3 declaration is
  forall (R : Type.{u1}) {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_8 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u1, u3} R M₂ _inst_1 _inst_4] {A : Type.{u5}} [_inst_12 : Semiring.{u5} A] [_inst_13 : SMul.{u1, u5} R A] [_inst_14 : forall (i : ι), Module.{u5, u2} A (M₁ i) _inst_12 (_inst_3 i)] [_inst_15 : Module.{u5, u3} A M₂ _inst_12 _inst_4] [_inst_16 : forall (i : ι), IsScalarTower.{u1, u5, u2} R A (M₁ i) _inst_13 (SMulZeroClass.toHasSmul.{u5, u2} A (M₁ i) (AddZeroClass.toHasZero.{u2} (M₁ i) (AddMonoid.toAddZeroClass.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i)))) (SMulWithZero.toSmulZeroClass.{u5, u2} A (M₁ i) (MulZeroClass.toHasZero.{u5} A (MulZeroOneClass.toMulZeroClass.{u5} A (MonoidWithZero.toMulZeroOneClass.{u5} A (Semiring.toMonoidWithZero.{u5} A _inst_12)))) (AddZeroClass.toHasZero.{u2} (M₁ i) (AddMonoid.toAddZeroClass.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i)))) (MulActionWithZero.toSMulWithZero.{u5, u2} A (M₁ i) (Semiring.toMonoidWithZero.{u5} A _inst_12) (AddZeroClass.toHasZero.{u2} (M₁ i) (AddMonoid.toAddZeroClass.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i)))) (Module.toMulActionWithZero.{u5, u2} A (M₁ i) _inst_12 (_inst_3 i) (_inst_14 i))))) (SMulZeroClass.toHasSmul.{u1, u2} R (M₁ i) (AddZeroClass.toHasZero.{u2} (M₁ i) (AddMonoid.toAddZeroClass.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i)))) (SMulWithZero.toSmulZeroClass.{u1, u2} R (M₁ i) (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)))) (AddZeroClass.toHasZero.{u2} (M₁ i) (AddMonoid.toAddZeroClass.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i)))) (MulActionWithZero.toSMulWithZero.{u1, u2} R (M₁ i) (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddZeroClass.toHasZero.{u2} (M₁ i) (AddMonoid.toAddZeroClass.{u2} (M₁ i) (AddCommMonoid.toAddMonoid.{u2} (M₁ i) (_inst_3 i)))) (Module.toMulActionWithZero.{u1, u2} R (M₁ i) _inst_1 (_inst_3 i) (_inst_8 i)))))] [_inst_17 : IsScalarTower.{u1, u5, u3} R A M₂ _inst_13 (SMulZeroClass.toHasSmul.{u5, u3} A M₂ (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (SMulWithZero.toSmulZeroClass.{u5, u3} A M₂ (MulZeroClass.toHasZero.{u5} A (MulZeroOneClass.toMulZeroClass.{u5} A (MonoidWithZero.toMulZeroOneClass.{u5} A (Semiring.toMonoidWithZero.{u5} A _inst_12)))) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (MulActionWithZero.toSMulWithZero.{u5, u3} A M₂ (Semiring.toMonoidWithZero.{u5} A _inst_12) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u5, u3} A M₂ _inst_12 _inst_4 _inst_15)))) (SMulZeroClass.toHasSmul.{u1, u3} R M₂ (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (SMulWithZero.toSmulZeroClass.{u1, u3} R M₂ (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)))) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (MulActionWithZero.toSMulWithZero.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ _inst_1 _inst_4 _inst_9))))] (f : MultilinearMap.{u5, u2, u3, u4} A ι M₁ M₂ _inst_12 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_15), Eq.{max (max (succ u4) (succ u2)) (succ u3)} ((forall (i : ι), M₁ i) -> M₂) (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (MultilinearMap.restrictScalars.{u1, u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9 A _inst_12 _inst_13 (fun (i : ι) => _inst_14 i) _inst_15 (fun (i : ι) => _inst_16 i) _inst_17 f)) (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u5, u2, u3, u4} A ι M₁ M₂ _inst_12 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_15) (fun (f : MultilinearMap.{u5, u2, u3, u4} A ι M₁ M₂ _inst_12 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_15) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u5, u2, u3, u4} A ι M₁ M₂ _inst_12 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_15) f)
but is expected to have type
  forall (R : Type.{u2}) {ι : Type.{u5}} {M₁ : ι -> Type.{u3}} {M₂ : Type.{u4}} [_inst_1 : Semiring.{u2} R] [_inst_3 : forall (i : ι), AddCommMonoid.{u3} (M₁ i)] [_inst_4 : AddCommMonoid.{u4} M₂] [_inst_8 : forall (i : ι), Module.{u2, u3} R (M₁ i) _inst_1 (_inst_3 i)] [_inst_9 : Module.{u2, u4} R M₂ _inst_1 _inst_4] {A : Type.{u1}} [_inst_12 : Semiring.{u1} A] [_inst_13 : SMul.{u2, u1} R A] [_inst_14 : forall (i : ι), Module.{u1, u3} A (M₁ i) _inst_12 (_inst_3 i)] [_inst_15 : Module.{u1, u4} A M₂ _inst_12 _inst_4] [_inst_16 : forall (i : ι), IsScalarTower.{u2, u1, u3} R A (M₁ i) _inst_13 (SMulZeroClass.toSMul.{u1, u3} A (M₁ i) (AddMonoid.toZero.{u3} (M₁ i) (AddCommMonoid.toAddMonoid.{u3} (M₁ i) (_inst_3 i))) (SMulWithZero.toSMulZeroClass.{u1, u3} A (M₁ i) (MonoidWithZero.toZero.{u1} A (Semiring.toMonoidWithZero.{u1} A _inst_12)) (AddMonoid.toZero.{u3} (M₁ i) (AddCommMonoid.toAddMonoid.{u3} (M₁ i) (_inst_3 i))) (MulActionWithZero.toSMulWithZero.{u1, u3} A (M₁ i) (Semiring.toMonoidWithZero.{u1} A _inst_12) (AddMonoid.toZero.{u3} (M₁ i) (AddCommMonoid.toAddMonoid.{u3} (M₁ i) (_inst_3 i))) (Module.toMulActionWithZero.{u1, u3} A (M₁ i) _inst_12 (_inst_3 i) (_inst_14 i))))) (SMulZeroClass.toSMul.{u2, u3} R (M₁ i) (AddMonoid.toZero.{u3} (M₁ i) (AddCommMonoid.toAddMonoid.{u3} (M₁ i) (_inst_3 i))) (SMulWithZero.toSMulZeroClass.{u2, u3} R (M₁ i) (MonoidWithZero.toZero.{u2} R (Semiring.toMonoidWithZero.{u2} R _inst_1)) (AddMonoid.toZero.{u3} (M₁ i) (AddCommMonoid.toAddMonoid.{u3} (M₁ i) (_inst_3 i))) (MulActionWithZero.toSMulWithZero.{u2, u3} R (M₁ i) (Semiring.toMonoidWithZero.{u2} R _inst_1) (AddMonoid.toZero.{u3} (M₁ i) (AddCommMonoid.toAddMonoid.{u3} (M₁ i) (_inst_3 i))) (Module.toMulActionWithZero.{u2, u3} R (M₁ i) _inst_1 (_inst_3 i) (_inst_8 i)))))] [_inst_17 : IsScalarTower.{u2, u1, u4} R A M₂ _inst_13 (SMulZeroClass.toSMul.{u1, u4} A M₂ (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (SMulWithZero.toSMulZeroClass.{u1, u4} A M₂ (MonoidWithZero.toZero.{u1} A (Semiring.toMonoidWithZero.{u1} A _inst_12)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (MulActionWithZero.toSMulWithZero.{u1, u4} A M₂ (Semiring.toMonoidWithZero.{u1} A _inst_12) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u4} A M₂ _inst_12 _inst_4 _inst_15)))) (SMulZeroClass.toSMul.{u2, u4} R M₂ (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (SMulWithZero.toSMulZeroClass.{u2, u4} R M₂ (MonoidWithZero.toZero.{u2} R (Semiring.toMonoidWithZero.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (MulActionWithZero.toSMulWithZero.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R _inst_1) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ _inst_1 _inst_4 _inst_9))))] (f : MultilinearMap.{u1, u3, u4, u5} A ι M₁ M₂ _inst_12 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_15), Eq.{max (max (succ u5) (succ u3)) (succ u4)} (forall (ᾰ : forall (i : ι), M₁ i), (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) ᾰ) (FunLike.coe.{max (max (succ u5) (succ u3)) (succ u4), max (succ u5) (succ u3), succ u4} (MultilinearMap.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u2, u3, u4, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9) (MultilinearMap.restrictScalars.{u2, u3, u4, u5, u1} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_8 i) _inst_9 A _inst_12 _inst_13 (fun (i : ι) => _inst_14 i) _inst_15 (fun (i : ι) => _inst_16 i) _inst_17 f)) (FunLike.coe.{max (max (succ u5) (succ u3)) (succ u4), max (succ u5) (succ u3), succ u4} (MultilinearMap.{u1, u3, u4, u5} A ι M₁ M₂ _inst_12 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_15) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u3, u4, u5} A ι M₁ M₂ _inst_12 (fun (i : ι) => _inst_3 i) _inst_4 (fun (i : ι) => _inst_14 i) _inst_15) f)
Case conversion may be inaccurate. Consider using '#align multilinear_map.coe_restrict_scalars MultilinearMap.coe_restrictScalarsₓ'. -/
@[simp]
theorem coe_restrictScalars (f : MultilinearMap A M₁ M₂) : ⇑(f.restrictScalars R) = f :=
  rfl
#align multilinear_map.coe_restrict_scalars MultilinearMap.coe_restrictScalars

end RestrictScalar

section

variable {ι₁ ι₂ ι₃ : Type _}

#print MultilinearMap.domDomCongr /-
/-- Transfer the arguments to a map along an equivalence between argument indices.

The naming is derived from `finsupp.dom_congr`, noting that here the permutation applies to the
domain of the domain. -/
@[simps apply]
def domDomCongr (σ : ι₁ ≃ ι₂) (m : MultilinearMap R (fun i : ι₁ => M₂) M₃) :
    MultilinearMap R (fun i : ι₂ => M₂) M₃
    where
  toFun v := m fun i => v (σ i)
  map_add' _ v i a b := by
    skip
    letI := σ.injective.decidable_eq
    simp_rw [Function.update_apply_equiv_apply v]
    rw [m.map_add]
  map_smul' _ v i a b := by
    skip
    letI := σ.injective.decidable_eq
    simp_rw [Function.update_apply_equiv_apply v]
    rw [m.map_smul]
#align multilinear_map.dom_dom_congr MultilinearMap.domDomCongr
-/

/- warning: multilinear_map.dom_dom_congr_trans -> MultilinearMap.domDomCongr_trans is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M₂ : Type.{u2}} {M₃ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_4 : AddCommMonoid.{u2} M₂] [_inst_5 : AddCommMonoid.{u3} M₃] [_inst_9 : Module.{u1, u2} R M₂ _inst_1 _inst_4] [_inst_10 : Module.{u1, u3} R M₃ _inst_1 _inst_5] {ι₁ : Type.{u4}} {ι₂ : Type.{u5}} {ι₃ : Type.{u6}} (σ₁ : Equiv.{succ u4, succ u5} ι₁ ι₂) (σ₂ : Equiv.{succ u5, succ u6} ι₂ ι₃) (m : MultilinearMap.{u1, u2, u3, u4} R ι₁ (fun (i : ι₁) => M₂) M₃ _inst_1 (fun (i : ι₁) => _inst_4) _inst_5 (fun (i : ι₁) => _inst_9) _inst_10), Eq.{max (succ u6) (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, u6} R ι₃ (fun (i : ι₃) => M₂) M₃ _inst_1 (fun (i : ι₃) => _inst_4) _inst_5 (fun (i : ι₃) => _inst_9) _inst_10) (MultilinearMap.domDomCongr.{u1, u2, u3, u4, u6} R M₂ M₃ _inst_1 _inst_4 _inst_5 _inst_9 _inst_10 ι₁ ι₃ (Equiv.trans.{succ u4, succ u5, succ u6} ι₁ ι₂ ι₃ σ₁ σ₂) m) (MultilinearMap.domDomCongr.{u1, u2, u3, u5, u6} R M₂ M₃ _inst_1 _inst_4 _inst_5 _inst_9 _inst_10 ι₂ ι₃ σ₂ (MultilinearMap.domDomCongr.{u1, u2, u3, u4, u5} R M₂ M₃ _inst_1 _inst_4 _inst_5 _inst_9 _inst_10 ι₁ ι₂ σ₁ m))
but is expected to have type
  forall {R : Type.{u4}} {M₂ : Type.{u5}} {M₃ : Type.{u6}} [_inst_1 : Semiring.{u4} R] [_inst_4 : AddCommMonoid.{u5} M₂] [_inst_5 : AddCommMonoid.{u6} M₃] [_inst_9 : Module.{u4, u5} R M₂ _inst_1 _inst_4] [_inst_10 : Module.{u4, u6} R M₃ _inst_1 _inst_5] {ι₁ : Type.{u3}} {ι₂ : Type.{u2}} {ι₃ : Type.{u1}} (σ₁ : Equiv.{succ u3, succ u2} ι₁ ι₂) (σ₂ : Equiv.{succ u2, succ u1} ι₂ ι₃) (m : MultilinearMap.{u4, u5, u6, u3} R ι₁ (fun (i : ι₁) => M₂) M₃ _inst_1 (fun (i : ι₁) => _inst_4) _inst_5 (fun (i : ι₁) => _inst_9) _inst_10), Eq.{max (max (succ u5) (succ u6)) (succ u1)} (MultilinearMap.{u4, u5, u6, u1} R ι₃ (fun (i : ι₃) => M₂) M₃ _inst_1 (fun (i : ι₃) => _inst_4) _inst_5 (fun (i : ι₃) => _inst_9) _inst_10) (MultilinearMap.domDomCongr.{u4, u5, u6, u3, u1} R M₂ M₃ _inst_1 _inst_4 _inst_5 _inst_9 _inst_10 ι₁ ι₃ (Equiv.trans.{succ u3, succ u2, succ u1} ι₁ ι₂ ι₃ σ₁ σ₂) m) (MultilinearMap.domDomCongr.{u4, u5, u6, u2, u1} R M₂ M₃ _inst_1 _inst_4 _inst_5 _inst_9 _inst_10 ι₂ ι₃ σ₂ (MultilinearMap.domDomCongr.{u4, u5, u6, u3, u2} R M₂ M₃ _inst_1 _inst_4 _inst_5 _inst_9 _inst_10 ι₁ ι₂ σ₁ m))
Case conversion may be inaccurate. Consider using '#align multilinear_map.dom_dom_congr_trans MultilinearMap.domDomCongr_transₓ'. -/
theorem domDomCongr_trans (σ₁ : ι₁ ≃ ι₂) (σ₂ : ι₂ ≃ ι₃)
    (m : MultilinearMap R (fun i : ι₁ => M₂) M₃) :
    m.domDomCongr (σ₁.trans σ₂) = (m.domDomCongr σ₁).domDomCongr σ₂ :=
  rfl
#align multilinear_map.dom_dom_congr_trans MultilinearMap.domDomCongr_trans

/- warning: multilinear_map.dom_dom_congr_mul -> MultilinearMap.domDomCongr_mul is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M₂ : Type.{u2}} {M₃ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_4 : AddCommMonoid.{u2} M₂] [_inst_5 : AddCommMonoid.{u3} M₃] [_inst_9 : Module.{u1, u2} R M₂ _inst_1 _inst_4] [_inst_10 : Module.{u1, u3} R M₃ _inst_1 _inst_5] {ι₁ : Type.{u4}} (σ₁ : Equiv.Perm.{succ u4} ι₁) (σ₂ : Equiv.Perm.{succ u4} ι₁) (m : MultilinearMap.{u1, u2, u3, u4} R ι₁ (fun (i : ι₁) => M₂) M₃ _inst_1 (fun (i : ι₁) => _inst_4) _inst_5 (fun (i : ι₁) => _inst_9) _inst_10), Eq.{max (succ u4) (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι₁ (fun (i : ι₁) => M₂) M₃ _inst_1 (fun (i : ι₁) => _inst_4) _inst_5 (fun (i : ι₁) => _inst_9) _inst_10) (MultilinearMap.domDomCongr.{u1, u2, u3, u4, u4} R M₂ M₃ _inst_1 _inst_4 _inst_5 _inst_9 _inst_10 ι₁ ι₁ (HMul.hMul.{u4, u4, u4} (Equiv.{succ u4, succ u4} ι₁ ι₁) (Equiv.{succ u4, succ u4} ι₁ ι₁) (Equiv.{succ u4, succ u4} ι₁ ι₁) (instHMul.{u4} (Equiv.{succ u4, succ u4} ι₁ ι₁) (MulOneClass.toHasMul.{u4} (Equiv.{succ u4, succ u4} ι₁ ι₁) (Monoid.toMulOneClass.{u4} (Equiv.{succ u4, succ u4} ι₁ ι₁) (DivInvMonoid.toMonoid.{u4} (Equiv.{succ u4, succ u4} ι₁ ι₁) (Group.toDivInvMonoid.{u4} (Equiv.{succ u4, succ u4} ι₁ ι₁) (Equiv.Perm.permGroup.{u4} ι₁)))))) σ₂ σ₁) m) (MultilinearMap.domDomCongr.{u1, u2, u3, u4, u4} R M₂ M₃ _inst_1 _inst_4 _inst_5 _inst_9 _inst_10 ι₁ ι₁ σ₂ (MultilinearMap.domDomCongr.{u1, u2, u3, u4, u4} R M₂ M₃ _inst_1 _inst_4 _inst_5 _inst_9 _inst_10 ι₁ ι₁ σ₁ m))
but is expected to have type
  forall {R : Type.{u2}} {M₂ : Type.{u3}} {M₃ : Type.{u4}} [_inst_1 : Semiring.{u2} R] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_5 : AddCommMonoid.{u4} M₃] [_inst_9 : Module.{u2, u3} R M₂ _inst_1 _inst_4] [_inst_10 : Module.{u2, u4} R M₃ _inst_1 _inst_5] {ι₁ : Type.{u1}} (σ₁ : Equiv.Perm.{succ u1} ι₁) (σ₂ : Equiv.Perm.{succ u1} ι₁) (m : MultilinearMap.{u2, u3, u4, u1} R ι₁ (fun (i : ι₁) => M₂) M₃ _inst_1 (fun (i : ι₁) => _inst_4) _inst_5 (fun (i : ι₁) => _inst_9) _inst_10), Eq.{max (max (succ u3) (succ u4)) (succ u1)} (MultilinearMap.{u2, u3, u4, u1} R ι₁ (fun (i : ι₁) => M₂) M₃ _inst_1 (fun (i : ι₁) => _inst_4) _inst_5 (fun (i : ι₁) => _inst_9) _inst_10) (MultilinearMap.domDomCongr.{u2, u3, u4, u1, u1} R M₂ M₃ _inst_1 _inst_4 _inst_5 _inst_9 _inst_10 ι₁ ι₁ (HMul.hMul.{u1, u1, u1} (Equiv.Perm.{succ u1} ι₁) (Equiv.Perm.{succ u1} ι₁) (Equiv.Perm.{succ u1} ι₁) (instHMul.{u1} (Equiv.Perm.{succ u1} ι₁) (MulOneClass.toMul.{u1} (Equiv.Perm.{succ u1} ι₁) (Monoid.toMulOneClass.{u1} (Equiv.Perm.{succ u1} ι₁) (DivInvMonoid.toMonoid.{u1} (Equiv.Perm.{succ u1} ι₁) (Group.toDivInvMonoid.{u1} (Equiv.Perm.{succ u1} ι₁) (Equiv.Perm.permGroup.{u1} ι₁)))))) σ₂ σ₁) m) (MultilinearMap.domDomCongr.{u2, u3, u4, u1, u1} R M₂ M₃ _inst_1 _inst_4 _inst_5 _inst_9 _inst_10 ι₁ ι₁ σ₂ (MultilinearMap.domDomCongr.{u2, u3, u4, u1, u1} R M₂ M₃ _inst_1 _inst_4 _inst_5 _inst_9 _inst_10 ι₁ ι₁ σ₁ m))
Case conversion may be inaccurate. Consider using '#align multilinear_map.dom_dom_congr_mul MultilinearMap.domDomCongr_mulₓ'. -/
theorem domDomCongr_mul (σ₁ : Equiv.Perm ι₁) (σ₂ : Equiv.Perm ι₁)
    (m : MultilinearMap R (fun i : ι₁ => M₂) M₃) :
    m.domDomCongr (σ₂ * σ₁) = (m.domDomCongr σ₁).domDomCongr σ₂ :=
  rfl
#align multilinear_map.dom_dom_congr_mul MultilinearMap.domDomCongr_mul

/- warning: multilinear_map.dom_dom_congr_equiv -> MultilinearMap.domDomCongrEquiv is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M₂ : Type.{u2}} {M₃ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_4 : AddCommMonoid.{u2} M₂] [_inst_5 : AddCommMonoid.{u3} M₃] [_inst_9 : Module.{u1, u2} R M₂ _inst_1 _inst_4] [_inst_10 : Module.{u1, u3} R M₃ _inst_1 _inst_5] {ι₁ : Type.{u4}} {ι₂ : Type.{u5}}, (Equiv.{succ u4, succ u5} ι₁ ι₂) -> (AddEquiv.{max u4 u2 u3, max u5 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι₁ (fun (i : ι₁) => M₂) M₃ _inst_1 (fun (i : ι₁) => _inst_4) _inst_5 (fun (i : ι₁) => _inst_9) _inst_10) (MultilinearMap.{u1, u2, u3, u5} R ι₂ (fun (i : ι₂) => M₂) M₃ _inst_1 (fun (i : ι₂) => _inst_4) _inst_5 (fun (i : ι₂) => _inst_9) _inst_10) (MultilinearMap.hasAdd.{u1, u2, u3, u4} R ι₁ (fun (i : ι₁) => M₂) M₃ _inst_1 (fun (i : ι₁) => _inst_4) _inst_5 (fun (i : ι₁) => _inst_9) _inst_10) (MultilinearMap.hasAdd.{u1, u2, u3, u5} R ι₂ (fun (i : ι₂) => M₂) M₃ _inst_1 (fun (i : ι₂) => _inst_4) _inst_5 (fun (i : ι₂) => _inst_9) _inst_10))
but is expected to have type
  forall {R : Type.{u1}} {M₂ : Type.{u2}} {M₃ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_4 : AddCommMonoid.{u2} M₂] [_inst_5 : AddCommMonoid.{u3} M₃] [_inst_9 : Module.{u1, u2} R M₂ _inst_1 _inst_4] [_inst_10 : Module.{u1, u3} R M₃ _inst_1 _inst_5] {ι₁ : Type.{u4}} {ι₂ : Type.{u5}}, (Equiv.{succ u4, succ u5} ι₁ ι₂) -> (AddEquiv.{max (max u4 u3) u2, max (max u5 u3) u2} (MultilinearMap.{u1, u2, u3, u4} R ι₁ (fun (i : ι₁) => M₂) M₃ _inst_1 (fun (i : ι₁) => _inst_4) _inst_5 (fun (i : ι₁) => _inst_9) _inst_10) (MultilinearMap.{u1, u2, u3, u5} R ι₂ (fun (i : ι₂) => M₂) M₃ _inst_1 (fun (i : ι₂) => _inst_4) _inst_5 (fun (i : ι₂) => _inst_9) _inst_10) (MultilinearMap.instAddMultilinearMap.{u1, u2, u3, u4} R ι₁ (fun (i : ι₁) => M₂) M₃ _inst_1 (fun (i : ι₁) => _inst_4) _inst_5 (fun (i : ι₁) => _inst_9) _inst_10) (MultilinearMap.instAddMultilinearMap.{u1, u2, u3, u5} R ι₂ (fun (i : ι₂) => M₂) M₃ _inst_1 (fun (i : ι₂) => _inst_4) _inst_5 (fun (i : ι₂) => _inst_9) _inst_10))
Case conversion may be inaccurate. Consider using '#align multilinear_map.dom_dom_congr_equiv MultilinearMap.domDomCongrEquivₓ'. -/
/-- `multilinear_map.dom_dom_congr` as an equivalence.

This is declared separately because it does not work with dot notation. -/
@[simps apply symm_apply]
def domDomCongrEquiv (σ : ι₁ ≃ ι₂) :
    MultilinearMap R (fun i : ι₁ => M₂) M₃ ≃+ MultilinearMap R (fun i : ι₂ => M₂) M₃
    where
  toFun := domDomCongr σ
  invFun := domDomCongr σ.symm
  left_inv m := by
    ext
    simp
  right_inv m := by
    ext
    simp
  map_add' a b := by
    ext
    simp
#align multilinear_map.dom_dom_congr_equiv MultilinearMap.domDomCongrEquiv

/- warning: multilinear_map.dom_dom_congr_eq_iff -> MultilinearMap.domDomCongr_eq_iff is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M₂ : Type.{u2}} {M₃ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_4 : AddCommMonoid.{u2} M₂] [_inst_5 : AddCommMonoid.{u3} M₃] [_inst_9 : Module.{u1, u2} R M₂ _inst_1 _inst_4] [_inst_10 : Module.{u1, u3} R M₃ _inst_1 _inst_5] {ι₁ : Type.{u4}} {ι₂ : Type.{u5}} (σ : Equiv.{succ u4, succ u5} ι₁ ι₂) (f : MultilinearMap.{u1, u2, u3, u4} R ι₁ (fun (i : ι₁) => M₂) M₃ _inst_1 (fun (i : ι₁) => _inst_4) _inst_5 (fun (i : ι₁) => _inst_9) _inst_10) (g : MultilinearMap.{u1, u2, u3, u4} R ι₁ (fun (i : ι₁) => M₂) M₃ _inst_1 (fun (i : ι₁) => _inst_4) _inst_5 (fun (i : ι₁) => _inst_9) _inst_10), Iff (Eq.{max (succ u5) (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, u5} R ι₂ (fun (i : ι₂) => M₂) M₃ _inst_1 (fun (i : ι₂) => _inst_4) _inst_5 (fun (i : ι₂) => _inst_9) _inst_10) (MultilinearMap.domDomCongr.{u1, u2, u3, u4, u5} R M₂ M₃ _inst_1 _inst_4 _inst_5 _inst_9 _inst_10 ι₁ ι₂ σ f) (MultilinearMap.domDomCongr.{u1, u2, u3, u4, u5} R M₂ M₃ _inst_1 _inst_4 _inst_5 _inst_9 _inst_10 ι₁ ι₂ σ g)) (Eq.{max (succ u4) (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι₁ (fun (i : ι₁) => M₂) M₃ _inst_1 (fun (i : ι₁) => _inst_4) _inst_5 (fun (i : ι₁) => _inst_9) _inst_10) f g)
but is expected to have type
  forall {R : Type.{u3}} {M₂ : Type.{u4}} {M₃ : Type.{u5}} [_inst_1 : Semiring.{u3} R] [_inst_4 : AddCommMonoid.{u4} M₂] [_inst_5 : AddCommMonoid.{u5} M₃] [_inst_9 : Module.{u3, u4} R M₂ _inst_1 _inst_4] [_inst_10 : Module.{u3, u5} R M₃ _inst_1 _inst_5] {ι₁ : Type.{u2}} {ι₂ : Type.{u1}} (σ : Equiv.{succ u2, succ u1} ι₁ ι₂) (f : MultilinearMap.{u3, u4, u5, u2} R ι₁ (fun (i : ι₁) => M₂) M₃ _inst_1 (fun (i : ι₁) => _inst_4) _inst_5 (fun (i : ι₁) => _inst_9) _inst_10) (g : MultilinearMap.{u3, u4, u5, u2} R ι₁ (fun (i : ι₁) => M₂) M₃ _inst_1 (fun (i : ι₁) => _inst_4) _inst_5 (fun (i : ι₁) => _inst_9) _inst_10), Iff (Eq.{max (max (succ u4) (succ u5)) (succ u1)} (MultilinearMap.{u3, u4, u5, u1} R ι₂ (fun (i : ι₂) => M₂) M₃ _inst_1 (fun (i : ι₂) => _inst_4) _inst_5 (fun (i : ι₂) => _inst_9) _inst_10) (MultilinearMap.domDomCongr.{u3, u4, u5, u2, u1} R M₂ M₃ _inst_1 _inst_4 _inst_5 _inst_9 _inst_10 ι₁ ι₂ σ f) (MultilinearMap.domDomCongr.{u3, u4, u5, u2, u1} R M₂ M₃ _inst_1 _inst_4 _inst_5 _inst_9 _inst_10 ι₁ ι₂ σ g)) (Eq.{max (max (succ u4) (succ u5)) (succ u2)} (MultilinearMap.{u3, u4, u5, u2} R ι₁ (fun (i : ι₁) => M₂) M₃ _inst_1 (fun (i : ι₁) => _inst_4) _inst_5 (fun (i : ι₁) => _inst_9) _inst_10) f g)
Case conversion may be inaccurate. Consider using '#align multilinear_map.dom_dom_congr_eq_iff MultilinearMap.domDomCongr_eq_iffₓ'. -/
/-- The results of applying `dom_dom_congr` to two maps are equal if
and only if those maps are. -/
@[simp]
theorem domDomCongr_eq_iff (σ : ι₁ ≃ ι₂) (f g : MultilinearMap R (fun i : ι₁ => M₂) M₃) :
    f.domDomCongr σ = g.domDomCongr σ ↔ f = g :=
  (domDomCongrEquiv σ : _ ≃+ MultilinearMap R (fun i => M₂) M₃).apply_eq_iff_eq
#align multilinear_map.dom_dom_congr_eq_iff MultilinearMap.domDomCongr_eq_iff

end

end Semiring

end MultilinearMap

namespace LinearMap

variable [Semiring R] [∀ i, AddCommMonoid (M₁ i)] [AddCommMonoid M₂] [AddCommMonoid M₃]
  [AddCommMonoid M'] [∀ i, Module R (M₁ i)] [Module R M₂] [Module R M₃] [Module R M']

#print LinearMap.compMultilinearMap /-
/-- Composing a multilinear map with a linear map gives again a multilinear map. -/
def compMultilinearMap (g : M₂ →ₗ[R] M₃) (f : MultilinearMap R M₁ M₂) : MultilinearMap R M₁ M₃
    where
  toFun := g ∘ f
  map_add' m i x y := by simp
  map_smul' m i c x := by simp
#align linear_map.comp_multilinear_map LinearMap.compMultilinearMap
-/

/- warning: linear_map.coe_comp_multilinear_map -> LinearMap.coe_compMultilinearMap is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u5}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} {M₃ : Type.{u4}} [_inst_1 : Semiring.{u1} R] [_inst_2 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_3 : AddCommMonoid.{u3} M₂] [_inst_4 : AddCommMonoid.{u4} M₃] [_inst_6 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ _inst_1 _inst_3] [_inst_8 : Module.{u1, u4} R M₃ _inst_1 _inst_4] (g : LinearMap.{u1, u1, u3, u4} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M₃ _inst_3 _inst_4 _inst_7 _inst_8) (f : MultilinearMap.{u1, u2, u3, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 (fun (i : ι) => _inst_6 i) _inst_7), Eq.{max (max (succ u5) (succ u2)) (succ u4)} ((forall (i : ι), M₁ i) -> M₃) (coeFn.{max (succ u5) (succ u2) (succ u4), max (max (succ u5) (succ u2)) (succ u4)} (MultilinearMap.{u1, u2, u4, u5} R ι M₁ M₃ _inst_1 (fun (i : ι) => _inst_2 i) _inst_4 (fun (i : ι) => _inst_6 i) _inst_8) (fun (f : MultilinearMap.{u1, u2, u4, u5} R ι M₁ M₃ _inst_1 (fun (i : ι) => _inst_2 i) _inst_4 (fun (i : ι) => _inst_6 i) _inst_8) => (forall (i : ι), M₁ i) -> M₃) (MultilinearMap.hasCoeToFun.{u1, u2, u4, u5} R ι M₁ M₃ _inst_1 (fun (i : ι) => _inst_2 i) _inst_4 (fun (i : ι) => _inst_6 i) _inst_8) (LinearMap.compMultilinearMap.{u1, u2, u3, u4, u5} R ι M₁ M₂ M₃ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 _inst_4 (fun (i : ι) => _inst_6 i) _inst_7 _inst_8 g f)) (Function.comp.{max (succ u5) (succ u2), succ u3, succ u4} (forall (i : ι), M₁ i) M₂ M₃ (coeFn.{max (succ u3) (succ u4), max (succ u3) (succ u4)} (LinearMap.{u1, u1, u3, u4} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M₃ _inst_3 _inst_4 _inst_7 _inst_8) (fun (_x : LinearMap.{u1, u1, u3, u4} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M₃ _inst_3 _inst_4 _inst_7 _inst_8) => M₂ -> M₃) (LinearMap.hasCoeToFun.{u1, u1, u3, u4} R R M₂ M₃ _inst_1 _inst_1 _inst_3 _inst_4 _inst_7 _inst_8 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1))) g) (coeFn.{max (succ u5) (succ u2) (succ u3), max (max (succ u5) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 (fun (i : ι) => _inst_6 i) _inst_7) (fun (f : MultilinearMap.{u1, u2, u3, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 (fun (i : ι) => _inst_6 i) _inst_7) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 (fun (i : ι) => _inst_6 i) _inst_7) f))
but is expected to have type
  forall {R : Type.{u1}} {ι : Type.{u5}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} {M₃ : Type.{u4}} [_inst_1 : Semiring.{u1} R] [_inst_2 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_3 : AddCommMonoid.{u3} M₂] [_inst_4 : AddCommMonoid.{u4} M₃] [_inst_6 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ _inst_1 _inst_3] [_inst_8 : Module.{u1, u4} R M₃ _inst_1 _inst_4] (g : LinearMap.{u1, u1, u3, u4} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M₃ _inst_3 _inst_4 _inst_7 _inst_8) (f : MultilinearMap.{u1, u2, u3, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 (fun (i : ι) => _inst_6 i) _inst_7), Eq.{max (max (succ u5) (succ u2)) (succ u4)} (forall (ᾰ : forall (i : ι), M₁ i), (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₃) ᾰ) (FunLike.coe.{max (max (succ u5) (succ u2)) (succ u4), max (succ u5) (succ u2), succ u4} (MultilinearMap.{u1, u2, u4, u5} R ι M₁ M₃ _inst_1 (fun (i : ι) => _inst_2 i) _inst_4 (fun (i : ι) => _inst_6 i) _inst_8) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₃) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u4, u5} R ι M₁ M₃ _inst_1 (fun (i : ι) => _inst_2 i) _inst_4 (fun (i : ι) => _inst_6 i) _inst_8) (LinearMap.compMultilinearMap.{u1, u2, u3, u4, u5} R ι M₁ M₂ M₃ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 _inst_4 (fun (i : ι) => _inst_6 i) _inst_7 _inst_8 g f)) (Function.comp.{max (succ u5) (succ u2), succ u3, succ u4} (forall (i : ι), M₁ i) M₂ M₃ (FunLike.coe.{max (succ u3) (succ u4), succ u3, succ u4} (LinearMap.{u1, u1, u3, u4} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M₃ _inst_3 _inst_4 _inst_7 _inst_8) M₂ (fun (_x : M₂) => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6191 : M₂) => M₃) _x) (LinearMap.instFunLikeLinearMap.{u1, u1, u3, u4} R R M₂ M₃ _inst_1 _inst_1 _inst_3 _inst_4 _inst_7 _inst_8 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1))) g) (FunLike.coe.{max (max (succ u5) (succ u2)) (succ u3), max (succ u5) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 (fun (i : ι) => _inst_6 i) _inst_7) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 (fun (i : ι) => _inst_6 i) _inst_7) f))
Case conversion may be inaccurate. Consider using '#align linear_map.coe_comp_multilinear_map LinearMap.coe_compMultilinearMapₓ'. -/
@[simp]
theorem coe_compMultilinearMap (g : M₂ →ₗ[R] M₃) (f : MultilinearMap R M₁ M₂) :
    ⇑(g.compMultilinearMap f) = g ∘ f :=
  rfl
#align linear_map.coe_comp_multilinear_map LinearMap.coe_compMultilinearMap

/- warning: linear_map.comp_multilinear_map_apply -> LinearMap.compMultilinearMap_apply is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u5}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} {M₃ : Type.{u4}} [_inst_1 : Semiring.{u1} R] [_inst_2 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_3 : AddCommMonoid.{u3} M₂] [_inst_4 : AddCommMonoid.{u4} M₃] [_inst_6 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ _inst_1 _inst_3] [_inst_8 : Module.{u1, u4} R M₃ _inst_1 _inst_4] (g : LinearMap.{u1, u1, u3, u4} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M₃ _inst_3 _inst_4 _inst_7 _inst_8) (f : MultilinearMap.{u1, u2, u3, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 (fun (i : ι) => _inst_6 i) _inst_7) (m : forall (i : ι), M₁ i), Eq.{succ u4} M₃ (coeFn.{max (succ u5) (succ u2) (succ u4), max (max (succ u5) (succ u2)) (succ u4)} (MultilinearMap.{u1, u2, u4, u5} R ι M₁ M₃ _inst_1 (fun (i : ι) => (fun (i : ι) => _inst_2 i) i) _inst_4 (fun (i : ι) => (fun (i : ι) => _inst_6 i) i) _inst_8) (fun (f : MultilinearMap.{u1, u2, u4, u5} R ι M₁ M₃ _inst_1 (fun (i : ι) => (fun (i : ι) => _inst_2 i) i) _inst_4 (fun (i : ι) => (fun (i : ι) => _inst_6 i) i) _inst_8) => (forall (i : ι), M₁ i) -> M₃) (MultilinearMap.hasCoeToFun.{u1, u2, u4, u5} R ι M₁ M₃ _inst_1 (fun (i : ι) => (fun (i : ι) => _inst_2 i) i) _inst_4 (fun (i : ι) => (fun (i : ι) => _inst_6 i) i) _inst_8) (LinearMap.compMultilinearMap.{u1, u2, u3, u4, u5} R ι M₁ M₂ M₃ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 _inst_4 (fun (i : ι) => _inst_6 i) _inst_7 _inst_8 g f) m) (coeFn.{max (succ u3) (succ u4), max (succ u3) (succ u4)} (LinearMap.{u1, u1, u3, u4} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M₃ _inst_3 _inst_4 _inst_7 _inst_8) (fun (_x : LinearMap.{u1, u1, u3, u4} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M₃ _inst_3 _inst_4 _inst_7 _inst_8) => M₂ -> M₃) (LinearMap.hasCoeToFun.{u1, u1, u3, u4} R R M₂ M₃ _inst_1 _inst_1 _inst_3 _inst_4 _inst_7 _inst_8 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1))) g (coeFn.{max (succ u5) (succ u2) (succ u3), max (max (succ u5) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 (fun (i : ι) => _inst_6 i) _inst_7) (fun (f : MultilinearMap.{u1, u2, u3, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 (fun (i : ι) => _inst_6 i) _inst_7) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 (fun (i : ι) => _inst_6 i) _inst_7) f m))
but is expected to have type
  forall {R : Type.{u1}} {ι : Type.{u5}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} {M₃ : Type.{u4}} [_inst_1 : Semiring.{u1} R] [_inst_2 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_3 : AddCommMonoid.{u3} M₂] [_inst_4 : AddCommMonoid.{u4} M₃] [_inst_6 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ _inst_1 _inst_3] [_inst_8 : Module.{u1, u4} R M₃ _inst_1 _inst_4] (g : LinearMap.{u1, u1, u3, u4} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M₃ _inst_3 _inst_4 _inst_7 _inst_8) (f : MultilinearMap.{u1, u2, u3, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 (fun (i : ι) => _inst_6 i) _inst_7) (m : forall (i : ι), M₁ i), Eq.{succ u4} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₃) m) (FunLike.coe.{max (max (succ u5) (succ u2)) (succ u4), max (succ u5) (succ u2), succ u4} (MultilinearMap.{u1, u2, u4, u5} R ι M₁ M₃ _inst_1 (fun (i : ι) => _inst_2 i) _inst_4 (fun (i : ι) => _inst_6 i) _inst_8) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₃) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u4, u5} R ι M₁ M₃ _inst_1 (fun (i : ι) => _inst_2 i) _inst_4 (fun (i : ι) => _inst_6 i) _inst_8) (LinearMap.compMultilinearMap.{u1, u2, u3, u4, u5} R ι M₁ M₂ M₃ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 _inst_4 (fun (i : ι) => _inst_6 i) _inst_7 _inst_8 g f) m) (FunLike.coe.{max (succ u3) (succ u4), succ u3, succ u4} (LinearMap.{u1, u1, u3, u4} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M₃ _inst_3 _inst_4 _inst_7 _inst_8) M₂ (fun (_x : M₂) => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6191 : M₂) => M₃) _x) (LinearMap.instFunLikeLinearMap.{u1, u1, u3, u4} R R M₂ M₃ _inst_1 _inst_1 _inst_3 _inst_4 _inst_7 _inst_8 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1))) g (FunLike.coe.{max (max (succ u5) (succ u2)) (succ u3), max (succ u5) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 (fun (i : ι) => _inst_6 i) _inst_7) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 (fun (i : ι) => _inst_6 i) _inst_7) f m))
Case conversion may be inaccurate. Consider using '#align linear_map.comp_multilinear_map_apply LinearMap.compMultilinearMap_applyₓ'. -/
@[simp]
theorem compMultilinearMap_apply (g : M₂ →ₗ[R] M₃) (f : MultilinearMap R M₁ M₂) (m : ∀ i, M₁ i) :
    g.compMultilinearMap f m = g (f m) :=
  rfl
#align linear_map.comp_multilinear_map_apply LinearMap.compMultilinearMap_apply

#print LinearMap.subtype_compMultilinearMap_codRestrict /-
/-- The multilinear version of `linear_map.subtype_comp_cod_restrict` -/
@[simp]
theorem subtype_compMultilinearMap_codRestrict (f : MultilinearMap R M₁ M₂) (p : Submodule R M₂)
    (h) : p.Subtype.compMultilinearMap (f.codRestrict p h) = f :=
  MultilinearMap.ext fun v => rfl
#align linear_map.subtype_comp_multilinear_map_cod_restrict LinearMap.subtype_compMultilinearMap_codRestrict
-/

/- warning: linear_map.comp_multilinear_map_cod_restrict -> LinearMap.compMultilinearMap_codRestrict is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u5}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} {M₃ : Type.{u4}} [_inst_1 : Semiring.{u1} R] [_inst_2 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_3 : AddCommMonoid.{u3} M₂] [_inst_4 : AddCommMonoid.{u4} M₃] [_inst_6 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ _inst_1 _inst_3] [_inst_8 : Module.{u1, u4} R M₃ _inst_1 _inst_4] (g : LinearMap.{u1, u1, u3, u4} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M₃ _inst_3 _inst_4 _inst_7 _inst_8) (f : MultilinearMap.{u1, u2, u3, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 (fun (i : ι) => _inst_6 i) _inst_7) (p : Submodule.{u1, u4} R M₃ _inst_1 _inst_4 _inst_8) (h : forall (c : M₂), Membership.Mem.{u4, u4} M₃ (Submodule.{u1, u4} R M₃ _inst_1 _inst_4 _inst_8) (SetLike.hasMem.{u4, u4} (Submodule.{u1, u4} R M₃ _inst_1 _inst_4 _inst_8) M₃ (Submodule.setLike.{u1, u4} R M₃ _inst_1 _inst_4 _inst_8)) (coeFn.{max (succ u3) (succ u4), max (succ u3) (succ u4)} (LinearMap.{u1, u1, u3, u4} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M₃ _inst_3 _inst_4 _inst_7 _inst_8) (fun (_x : LinearMap.{u1, u1, u3, u4} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M₃ _inst_3 _inst_4 _inst_7 _inst_8) => M₂ -> M₃) (LinearMap.hasCoeToFun.{u1, u1, u3, u4} R R M₂ M₃ _inst_1 _inst_1 _inst_3 _inst_4 _inst_7 _inst_8 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1))) g c) p), Eq.{max (succ u5) (succ u2) (succ u4)} (MultilinearMap.{u1, u2, u4, u5} R ι M₁ (coeSort.{succ u4, succ (succ u4)} (Submodule.{u1, u4} R M₃ _inst_1 _inst_4 _inst_8) Type.{u4} (SetLike.hasCoeToSort.{u4, u4} (Submodule.{u1, u4} R M₃ _inst_1 _inst_4 _inst_8) M₃ (Submodule.setLike.{u1, u4} R M₃ _inst_1 _inst_4 _inst_8)) p) _inst_1 (fun (i : ι) => _inst_2 i) (Submodule.addCommMonoid.{u1, u4} R M₃ _inst_1 _inst_4 _inst_8 p) (fun (i : ι) => _inst_6 i) (Submodule.module.{u1, u4} R M₃ _inst_1 _inst_4 _inst_8 p)) (LinearMap.compMultilinearMap.{u1, u2, u3, u4, u5} R ι M₁ M₂ (coeSort.{succ u4, succ (succ u4)} (Submodule.{u1, u4} R M₃ _inst_1 _inst_4 _inst_8) Type.{u4} (SetLike.hasCoeToSort.{u4, u4} (Submodule.{u1, u4} R M₃ _inst_1 _inst_4 _inst_8) M₃ (Submodule.setLike.{u1, u4} R M₃ _inst_1 _inst_4 _inst_8)) p) _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 (Submodule.addCommMonoid.{u1, u4} R M₃ _inst_1 _inst_4 _inst_8 p) (fun (i : ι) => _inst_6 i) _inst_7 (Submodule.module.{u1, u4} R M₃ _inst_1 _inst_4 _inst_8 p) (LinearMap.codRestrict.{u1, u1, u3, u4} R R M₂ M₃ _inst_1 _inst_1 _inst_3 _inst_4 _inst_7 _inst_8 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) p g h) f) (MultilinearMap.codRestrict.{u1, u2, u4, u5} R ι M₁ M₃ _inst_1 (fun (i : ι) => _inst_2 i) _inst_4 (fun (i : ι) => _inst_6 i) _inst_8 (LinearMap.compMultilinearMap.{u1, u2, u3, u4, u5} R ι M₁ M₂ M₃ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 _inst_4 (fun (i : ι) => _inst_6 i) _inst_7 _inst_8 g f) p (fun (v : forall (i : ι), M₁ i) => h (coeFn.{max (succ u5) (succ u2) (succ u3), max (max (succ u5) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 (fun (i : ι) => _inst_6 i) _inst_7) (fun (f : MultilinearMap.{u1, u2, u3, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 (fun (i : ι) => _inst_6 i) _inst_7) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 (fun (i : ι) => _inst_6 i) _inst_7) f v)))
but is expected to have type
  forall {R : Type.{u1}} {ι : Type.{u5}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} {M₃ : Type.{u4}} [_inst_1 : Semiring.{u1} R] [_inst_2 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_3 : AddCommMonoid.{u3} M₂] [_inst_4 : AddCommMonoid.{u4} M₃] [_inst_6 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ _inst_1 _inst_3] [_inst_8 : Module.{u1, u4} R M₃ _inst_1 _inst_4] (g : LinearMap.{u1, u1, u3, u4} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M₃ _inst_3 _inst_4 _inst_7 _inst_8) (f : MultilinearMap.{u1, u2, u3, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 (fun (i : ι) => _inst_6 i) _inst_7) (p : Submodule.{u1, u4} R M₃ _inst_1 _inst_4 _inst_8) (h : forall (c : M₂), Membership.mem.{u4, u4} ((fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6191 : M₂) => M₃) c) (Submodule.{u1, u4} R M₃ _inst_1 _inst_4 _inst_8) (SetLike.instMembership.{u4, u4} (Submodule.{u1, u4} R M₃ _inst_1 _inst_4 _inst_8) M₃ (Submodule.setLike.{u1, u4} R M₃ _inst_1 _inst_4 _inst_8)) (FunLike.coe.{max (succ u3) (succ u4), succ u3, succ u4} (LinearMap.{u1, u1, u3, u4} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M₃ _inst_3 _inst_4 _inst_7 _inst_8) M₂ (fun (_x : M₂) => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6191 : M₂) => M₃) _x) (LinearMap.instFunLikeLinearMap.{u1, u1, u3, u4} R R M₂ M₃ _inst_1 _inst_1 _inst_3 _inst_4 _inst_7 _inst_8 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1))) g c) p), Eq.{max (max (succ u5) (succ u2)) (succ u4)} (MultilinearMap.{u1, u2, u4, u5} R ι M₁ (Subtype.{succ u4} M₃ (fun (x : M₃) => Membership.mem.{u4, u4} M₃ (Submodule.{u1, u4} R M₃ _inst_1 _inst_4 _inst_8) (SetLike.instMembership.{u4, u4} (Submodule.{u1, u4} R M₃ _inst_1 _inst_4 _inst_8) M₃ (Submodule.setLike.{u1, u4} R M₃ _inst_1 _inst_4 _inst_8)) x p)) _inst_1 (fun (i : ι) => _inst_2 i) (Submodule.addCommMonoid.{u1, u4} R M₃ _inst_1 _inst_4 _inst_8 p) (fun (i : ι) => _inst_6 i) (Submodule.module.{u1, u4} R M₃ _inst_1 _inst_4 _inst_8 p)) (LinearMap.compMultilinearMap.{u1, u2, u3, u4, u5} R ι M₁ M₂ (Subtype.{succ u4} M₃ (fun (x : M₃) => Membership.mem.{u4, u4} M₃ (Submodule.{u1, u4} R M₃ _inst_1 _inst_4 _inst_8) (SetLike.instMembership.{u4, u4} (Submodule.{u1, u4} R M₃ _inst_1 _inst_4 _inst_8) M₃ (Submodule.setLike.{u1, u4} R M₃ _inst_1 _inst_4 _inst_8)) x p)) _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 (Submodule.addCommMonoid.{u1, u4} R M₃ _inst_1 _inst_4 _inst_8 p) (fun (i : ι) => _inst_6 i) _inst_7 (Submodule.module.{u1, u4} R M₃ _inst_1 _inst_4 _inst_8 p) (LinearMap.codRestrict.{u1, u1, u3, u4} R R M₂ M₃ _inst_1 _inst_1 _inst_3 _inst_4 _inst_7 _inst_8 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) p g h) f) (MultilinearMap.codRestrict.{u1, u2, u4, u5} R ι M₁ M₃ _inst_1 (fun (i : ι) => _inst_2 i) _inst_4 (fun (i : ι) => _inst_6 i) _inst_8 (LinearMap.compMultilinearMap.{u1, u2, u3, u4, u5} R ι M₁ M₂ M₃ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 _inst_4 (fun (i : ι) => _inst_6 i) _inst_7 _inst_8 g f) p (fun (v : forall (i : ι), M₁ i) => h (FunLike.coe.{max (max (succ u5) (succ u2)) (succ u3), max (succ u5) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 (fun (i : ι) => _inst_6 i) _inst_7) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u5} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 (fun (i : ι) => _inst_6 i) _inst_7) f v)))
Case conversion may be inaccurate. Consider using '#align linear_map.comp_multilinear_map_cod_restrict LinearMap.compMultilinearMap_codRestrictₓ'. -/
/-- The multilinear version of `linear_map.comp_cod_restrict` -/
@[simp]
theorem compMultilinearMap_codRestrict (g : M₂ →ₗ[R] M₃) (f : MultilinearMap R M₁ M₂)
    (p : Submodule R M₃) (h) :
    (g.codRestrict p h).compMultilinearMap f =
      (g.compMultilinearMap f).codRestrict p fun v => h (f v) :=
  MultilinearMap.ext fun v => rfl
#align linear_map.comp_multilinear_map_cod_restrict LinearMap.compMultilinearMap_codRestrict

variable {ι₁ ι₂ : Type _}

/- warning: linear_map.comp_multilinear_map_dom_dom_congr -> LinearMap.compMultilinearMap_domDomCongr is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M₂ : Type.{u3}} {M₃ : Type.{u4}} {M' : Type.{u2}} [_inst_1 : Semiring.{u1} R] [_inst_3 : AddCommMonoid.{u3} M₂] [_inst_4 : AddCommMonoid.{u4} M₃] [_inst_5 : AddCommMonoid.{u2} M'] [_inst_7 : Module.{u1, u3} R M₂ _inst_1 _inst_3] [_inst_8 : Module.{u1, u4} R M₃ _inst_1 _inst_4] [_inst_9 : Module.{u1, u2} R M' _inst_1 _inst_5] {ι₁ : Type.{u5}} {ι₂ : Type.{u6}} (σ : Equiv.{succ u5, succ u6} ι₁ ι₂) (g : LinearMap.{u1, u1, u3, u4} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M₃ _inst_3 _inst_4 _inst_7 _inst_8) (f : MultilinearMap.{u1, u2, u3, u5} R ι₁ (fun (i : ι₁) => M') M₂ _inst_1 (fun (i : ι₁) => _inst_5) _inst_3 (fun (i : ι₁) => _inst_9) _inst_7), Eq.{max (succ u6) (succ u2) (succ u4)} (MultilinearMap.{u1, u2, u4, u6} R ι₂ (fun (i : ι₂) => M') M₃ _inst_1 (fun (i : ι₂) => _inst_5) _inst_4 (fun (i : ι₂) => _inst_9) _inst_8) (MultilinearMap.domDomCongr.{u1, u2, u4, u5, u6} R M' M₃ _inst_1 _inst_5 _inst_4 _inst_9 _inst_8 ι₁ ι₂ σ (LinearMap.compMultilinearMap.{u1, u2, u3, u4, u5} R ι₁ (fun (i : ι₁) => M') M₂ M₃ _inst_1 (fun (i : ι₁) => _inst_5) _inst_3 _inst_4 (fun (i : ι₁) => _inst_9) _inst_7 _inst_8 g f)) (LinearMap.compMultilinearMap.{u1, u2, u3, u4, u6} R ι₂ (fun (i : ι₂) => M') M₂ M₃ _inst_1 (fun (i : ι₂) => _inst_5) _inst_3 _inst_4 (fun (i : ι₂) => _inst_9) _inst_7 _inst_8 g (MultilinearMap.domDomCongr.{u1, u2, u3, u5, u6} R M' M₂ _inst_1 _inst_5 _inst_3 _inst_9 _inst_7 ι₁ ι₂ σ f))
but is expected to have type
  forall {R : Type.{u3}} {M₂ : Type.{u5}} {M₃ : Type.{u6}} {M' : Type.{u4}} [_inst_1 : Semiring.{u3} R] [_inst_3 : AddCommMonoid.{u5} M₂] [_inst_4 : AddCommMonoid.{u6} M₃] [_inst_5 : AddCommMonoid.{u4} M'] [_inst_7 : Module.{u3, u5} R M₂ _inst_1 _inst_3] [_inst_8 : Module.{u3, u6} R M₃ _inst_1 _inst_4] [_inst_9 : Module.{u3, u4} R M' _inst_1 _inst_5] {ι₁ : Type.{u2}} {ι₂ : Type.{u1}} (σ : Equiv.{succ u2, succ u1} ι₁ ι₂) (g : LinearMap.{u3, u3, u5, u6} R R _inst_1 _inst_1 (RingHom.id.{u3} R (Semiring.toNonAssocSemiring.{u3} R _inst_1)) M₂ M₃ _inst_3 _inst_4 _inst_7 _inst_8) (f : MultilinearMap.{u3, u4, u5, u2} R ι₁ (fun (i : ι₁) => M') M₂ _inst_1 (fun (i : ι₁) => _inst_5) _inst_3 (fun (i : ι₁) => _inst_9) _inst_7), Eq.{max (max (succ u4) (succ u6)) (succ u1)} (MultilinearMap.{u3, u4, u6, u1} R ι₂ (fun (i : ι₂) => M') M₃ _inst_1 (fun (i : ι₂) => _inst_5) _inst_4 (fun (i : ι₂) => _inst_9) _inst_8) (MultilinearMap.domDomCongr.{u3, u4, u6, u2, u1} R M' M₃ _inst_1 _inst_5 _inst_4 _inst_9 _inst_8 ι₁ ι₂ σ (LinearMap.compMultilinearMap.{u3, u4, u5, u6, u2} R ι₁ (fun (i : ι₁) => M') M₂ M₃ _inst_1 (fun (i : ι₁) => _inst_5) _inst_3 _inst_4 (fun (i : ι₁) => _inst_9) _inst_7 _inst_8 g f)) (LinearMap.compMultilinearMap.{u3, u4, u5, u6, u1} R ι₂ (fun (i : ι₂) => M') M₂ M₃ _inst_1 (fun (i : ι₂) => _inst_5) _inst_3 _inst_4 (fun (i : ι₂) => _inst_9) _inst_7 _inst_8 g (MultilinearMap.domDomCongr.{u3, u4, u5, u2, u1} R M' M₂ _inst_1 _inst_5 _inst_3 _inst_9 _inst_7 ι₁ ι₂ σ f))
Case conversion may be inaccurate. Consider using '#align linear_map.comp_multilinear_map_dom_dom_congr LinearMap.compMultilinearMap_domDomCongrₓ'. -/
@[simp]
theorem compMultilinearMap_domDomCongr (σ : ι₁ ≃ ι₂) (g : M₂ →ₗ[R] M₃)
    (f : MultilinearMap R (fun i : ι₁ => M') M₂) :
    (g.compMultilinearMap f).domDomCongr σ = g.compMultilinearMap (f.domDomCongr σ) :=
  by
  ext
  simp
#align linear_map.comp_multilinear_map_dom_dom_congr LinearMap.compMultilinearMap_domDomCongr

end LinearMap

namespace MultilinearMap

section CommSemiring

variable [CommSemiring R] [∀ i, AddCommMonoid (M₁ i)] [∀ i, AddCommMonoid (M i)] [AddCommMonoid M₂]
  [∀ i, Module R (M i)] [∀ i, Module R (M₁ i)] [Module R M₂] (f f' : MultilinearMap R M₁ M₂)

#print MultilinearMap.map_piecewise_smul /-
/-- If one multiplies by `c i` the coordinates in a finset `s`, then the image under a multilinear
map is multiplied by `∏ i in s, c i`. This is mainly an auxiliary statement to prove the result when
`s = univ`, given in `map_smul_univ`, although it can be useful in its own right as it does not
require the index set `ι` to be finite. -/
theorem map_piecewise_smul [DecidableEq ι] (c : ι → R) (m : ∀ i, M₁ i) (s : Finset ι) :
    f (s.piecewise (fun i => c i • m i) m) = (∏ i in s, c i) • f m :=
  by
  refine' s.induction_on (by simp) _
  intro j s j_not_mem_s Hrec
  have A :
    Function.update (s.piecewise (fun i => c i • m i) m) j (m j) =
      s.piecewise (fun i => c i • m i) m :=
    by
    ext i
    by_cases h : i = j
    · rw [h]
      simp [j_not_mem_s]
    · simp [h]
  rw [s.piecewise_insert, f.map_smul, A, Hrec]
  simp [j_not_mem_s, mul_smul]
#align multilinear_map.map_piecewise_smul MultilinearMap.map_piecewise_smul
-/

#print MultilinearMap.map_smul_univ /-
/-- Multiplicativity of a multilinear map along all coordinates at the same time,
writing `f (λi, c i • m i)` as `(∏ i, c i) • f m`. -/
theorem map_smul_univ [Fintype ι] (c : ι → R) (m : ∀ i, M₁ i) :
    (f fun i => c i • m i) = (∏ i, c i) • f m := by
  classical simpa using map_piecewise_smul f c m Finset.univ
#align multilinear_map.map_smul_univ MultilinearMap.map_smul_univ
-/

#print MultilinearMap.map_update_smul /-
@[simp]
theorem map_update_smul [DecidableEq ι] [Fintype ι] (m : ∀ i, M₁ i) (i : ι) (c : R) (x : M₁ i) :
    f (update (c • m) i x) = c ^ (Fintype.card ι - 1) • f (update m i x) :=
  by
  have :
    f ((finset.univ.erase i).piecewise (c • update m i x) (update m i x)) =
      (∏ i in finset.univ.erase i, c) • f (update m i x) :=
    map_piecewise_smul f _ _ _
  simpa [← Function.update_smul c m] using this
#align multilinear_map.map_update_smul MultilinearMap.map_update_smul
-/

section DistribMulAction

variable {R' A : Type _} [Monoid R'] [Semiring A] [∀ i, Module A (M₁ i)] [DistribMulAction R' M₂]
  [Module A M₂] [SMulCommClass A R' M₂]

instance : DistribMulAction R' (MultilinearMap A M₁ M₂)
    where
  one_smul f := ext fun x => one_smul _ _
  mul_smul c₁ c₂ f := ext fun x => mul_smul _ _ _
  smul_zero r := ext fun x => smul_zero _
  smul_add r f₁ f₂ := ext fun x => smul_add _ _ _

end DistribMulAction

section Module

variable {R' A : Type _} [Semiring R'] [Semiring A] [∀ i, Module A (M₁ i)] [Module A M₂]
  [AddCommMonoid M₃] [Module R' M₃] [Module A M₃] [SMulCommClass A R' M₃]

/-- The space of multilinear maps over an algebra over `R` is a module over `R`, for the pointwise
addition and scalar multiplication. -/
instance [Module R' M₂] [SMulCommClass A R' M₂] : Module R' (MultilinearMap A M₁ M₂)
    where
  add_smul r₁ r₂ f := ext fun x => add_smul _ _ _
  zero_smul f := ext fun x => zero_smul _ _

instance [NoZeroSMulDivisors R' M₃] : NoZeroSMulDivisors R' (MultilinearMap A M₁ M₃) :=
  coe_injective.NoZeroSMulDivisors _ rfl coe_smul

variable (M₂ M₃ R' A)

#print MultilinearMap.domDomCongrLinearEquiv /-
/-- `multilinear_map.dom_dom_congr` as a `linear_equiv`. -/
@[simps apply symm_apply]
def domDomCongrLinearEquiv {ι₁ ι₂} (σ : ι₁ ≃ ι₂) :
    MultilinearMap A (fun i : ι₁ => M₂) M₃ ≃ₗ[R'] MultilinearMap A (fun i : ι₂ => M₂) M₃ :=
  {
    (domDomCongrEquiv σ :
      MultilinearMap A (fun i : ι₁ => M₂) M₃ ≃+ MultilinearMap A (fun i : ι₂ => M₂) M₃) with
    map_smul' := fun c f => by
      ext
      simp }
#align multilinear_map.dom_dom_congr_linear_equiv MultilinearMap.domDomCongrLinearEquiv
-/

variable (R M₁)

#print MultilinearMap.domDomCongrLinearEquiv' /-
/-- The dependent version of `multilinear_map.dom_dom_congr_linear_equiv`. -/
@[simps apply symm_apply]
def domDomCongrLinearEquiv' {ι' : Type _} (σ : ι ≃ ι') :
    MultilinearMap R M₁ M₂ ≃ₗ[R] MultilinearMap R (fun i => M₁ (σ.symm i)) M₂
    where
  toFun f :=
    { toFun := f ∘ (σ.piCongrLeft' M₁).symm
      map_add' := fun _ m i => by
        skip
        letI := σ.decidable_eq
        rw [← σ.apply_symm_apply i]
        intro x y
        simp only [comp_app, Pi_congr_left'_symm_update, f.map_add]
      map_smul' := fun _ m i c => by
        skip
        letI := σ.decidable_eq
        rw [← σ.apply_symm_apply i]
        intro x
        simp only [comp_app, Pi_congr_left'_symm_update, f.map_smul] }
  invFun f :=
    { toFun := f ∘ σ.piCongrLeft' M₁
      map_add' := fun _ m i => by
        skip
        letI := σ.symm.decidable_eq
        rw [← σ.symm_apply_apply i]
        intro x y
        simp only [comp_app, Pi_congr_left'_update, f.map_add]
      map_smul' := fun _ m i c => by
        skip
        letI := σ.symm.decidable_eq
        rw [← σ.symm_apply_apply i]
        intro x
        simp only [comp_app, Pi_congr_left'_update, f.map_smul] }
  map_add' f₁ f₂ := by
    ext
    simp only [comp_app, coe_mk, add_apply]
  map_smul' c f := by
    ext
    simp only [comp_app, coe_mk, smul_apply, RingHom.id_apply]
  left_inv f := by
    ext
    simp only [comp_app, coe_mk, Equiv.symm_apply_apply]
  right_inv f := by
    ext
    simp only [comp_app, coe_mk, Equiv.apply_symm_apply]
#align multilinear_map.dom_dom_congr_linear_equiv' MultilinearMap.domDomCongrLinearEquiv'
-/

#print MultilinearMap.constLinearEquivOfIsEmpty /-
/-- The space of constant maps is equivalent to the space of maps that are multilinear with respect
to an empty family. -/
@[simps]
def constLinearEquivOfIsEmpty [IsEmpty ι] : M₂ ≃ₗ[R] MultilinearMap R M₁ M₂
    where
  toFun := MultilinearMap.constOfIsEmpty R _
  map_add' x y := rfl
  map_smul' t x := rfl
  invFun f := f 0
  left_inv _ := rfl
  right_inv f := ext fun x => MultilinearMap.congr_arg f <| Subsingleton.elim _ _
#align multilinear_map.const_linear_equiv_of_is_empty MultilinearMap.constLinearEquivOfIsEmpty
-/

end Module

section

variable (R ι) (A : Type _) [CommSemiring A] [Algebra R A] [Fintype ι]

#print MultilinearMap.mkPiAlgebra /-
/-- Given an `R`-algebra `A`, `mk_pi_algebra` is the multilinear map on `A^ι` associating
to `m` the product of all the `m i`.

See also `multilinear_map.mk_pi_algebra_fin` for a version that works with a non-commutative
algebra `A` but requires `ι = fin n`. -/
protected def mkPiAlgebra : MultilinearMap R (fun i : ι => A) A
    where
  toFun m := ∏ i, m i
  map_add' m i x y := by simp [Finset.prod_update_of_mem, add_mul]
  map_smul' m i c x := by simp [Finset.prod_update_of_mem]
#align multilinear_map.mk_pi_algebra MultilinearMap.mkPiAlgebra
-/

variable {R A ι}

/- warning: multilinear_map.mk_pi_algebra_apply -> MultilinearMap.mkPiAlgebra_apply is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] {A : Type.{u3}} [_inst_8 : CommSemiring.{u3} A] [_inst_9 : Algebra.{u1, u3} R A _inst_1 (CommSemiring.toSemiring.{u3} A _inst_8)] [_inst_10 : Fintype.{u2} ι] (m : ι -> A), Eq.{succ u3} A (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (MultilinearMap.{u1, u3, u3, u2} R ι (fun (i : ι) => A) A (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A (CommSemiring.toSemiring.{u3} A _inst_8)))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A (CommSemiring.toSemiring.{u3} A _inst_8)))) (fun (i : ι) => Algebra.toModule.{u1, u3} R A _inst_1 (CommSemiring.toSemiring.{u3} A _inst_8) _inst_9) (Algebra.toModule.{u1, u3} R A _inst_1 (CommSemiring.toSemiring.{u3} A _inst_8) _inst_9)) (fun (f : MultilinearMap.{u1, u3, u3, u2} R ι (fun (i : ι) => A) A (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A (CommSemiring.toSemiring.{u3} A _inst_8)))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A (CommSemiring.toSemiring.{u3} A _inst_8)))) (fun (i : ι) => Algebra.toModule.{u1, u3} R A _inst_1 (CommSemiring.toSemiring.{u3} A _inst_8) _inst_9) (Algebra.toModule.{u1, u3} R A _inst_1 (CommSemiring.toSemiring.{u3} A _inst_8) _inst_9)) => (ι -> A) -> A) (MultilinearMap.hasCoeToFun.{u1, u3, u3, u2} R ι (fun (i : ι) => A) A (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A (CommSemiring.toSemiring.{u3} A _inst_8)))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u3} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u3} A (Semiring.toNonAssocSemiring.{u3} A (CommSemiring.toSemiring.{u3} A _inst_8)))) (fun (i : ι) => Algebra.toModule.{u1, u3} R A _inst_1 (CommSemiring.toSemiring.{u3} A _inst_8) _inst_9) (Algebra.toModule.{u1, u3} R A _inst_1 (CommSemiring.toSemiring.{u3} A _inst_8) _inst_9)) (MultilinearMap.mkPiAlgebra.{u1, u2, u3} R ι _inst_1 A _inst_8 _inst_9 _inst_10) m) (Finset.prod.{u3, u2} A ι (CommSemiring.toCommMonoid.{u3} A _inst_8) (Finset.univ.{u2} ι _inst_10) (fun (i : ι) => m i))
but is expected to have type
  forall {R : Type.{u2}} {ι : Type.{u3}} [_inst_1 : CommSemiring.{u2} R] {A : Type.{u1}} [_inst_8 : CommSemiring.{u1} A] [_inst_9 : Algebra.{u2, u1} R A _inst_1 (CommSemiring.toSemiring.{u1} A _inst_8)] [_inst_10 : Fintype.{u3} ι] (m : ι -> A), Eq.{succ u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : ι -> A) => A) m) (FunLike.coe.{max (succ u3) (succ u1), max (succ u3) (succ u1), succ u1} (MultilinearMap.{u2, u1, u1, u3} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.17592 : ι) => A) A (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.17592 : ι) => A) i) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.17592 : ι) => A) i) (Semiring.toNonAssocSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.17592 : ι) => A) i) (CommSemiring.toSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.17592 : ι) => A) i) _inst_8)))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A (CommSemiring.toSemiring.{u1} A _inst_8)))) (fun (i : ι) => Algebra.toModule.{u2, u1} R ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.17592 : ι) => A) i) _inst_1 (CommSemiring.toSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.17592 : ι) => A) i) _inst_8) _inst_9) (Algebra.toModule.{u2, u1} R A _inst_1 (CommSemiring.toSemiring.{u1} A _inst_8) _inst_9)) (ι -> A) (fun (f : ι -> A) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : ι -> A) => A) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u2, u1, u1, u3} R ι (fun (i : ι) => A) A (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.17592 : ι) => A) i) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.17592 : ι) => A) i) (Semiring.toNonAssocSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.17592 : ι) => A) i) (CommSemiring.toSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.17592 : ι) => A) i) _inst_8)))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A (CommSemiring.toSemiring.{u1} A _inst_8)))) (fun (i : ι) => Algebra.toModule.{u2, u1} R ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.17592 : ι) => A) i) _inst_1 (CommSemiring.toSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.17592 : ι) => A) i) _inst_8) _inst_9) (Algebra.toModule.{u2, u1} R A _inst_1 (CommSemiring.toSemiring.{u1} A _inst_8) _inst_9)) (MultilinearMap.mkPiAlgebra.{u2, u3, u1} R ι _inst_1 A _inst_8 _inst_9 _inst_10) m) (Finset.prod.{u1, u3} A ι (CommSemiring.toCommMonoid.{u1} A _inst_8) (Finset.univ.{u3} ι _inst_10) (fun (i : ι) => m i))
Case conversion may be inaccurate. Consider using '#align multilinear_map.mk_pi_algebra_apply MultilinearMap.mkPiAlgebra_applyₓ'. -/
@[simp]
theorem mkPiAlgebra_apply (m : ι → A) : MultilinearMap.mkPiAlgebra R ι A m = ∏ i, m i :=
  rfl
#align multilinear_map.mk_pi_algebra_apply MultilinearMap.mkPiAlgebra_apply

end

section

variable (R n) (A : Type _) [Semiring A] [Algebra R A]

#print MultilinearMap.mkPiAlgebraFin /-
/-- Given an `R`-algebra `A`, `mk_pi_algebra_fin` is the multilinear map on `A^n` associating
to `m` the product of all the `m i`.

See also `multilinear_map.mk_pi_algebra` for a version that assumes `[comm_semiring A]` but works
for `A^ι` with any finite type `ι`. -/
protected def mkPiAlgebraFin : MultilinearMap R (fun i : Fin n => A) A
    where
  toFun m := (List.ofFn m).Prod
  map_add' := by
    intro dec m i x y
    rw [Subsingleton.elim dec (by infer_instance)]
    have : (List.finRange n).indexOfₓ i < n := by
      simpa using List.indexOf_lt_length.2 (List.mem_finRange i)
    simp [List.ofFn_eq_map, (List.nodup_finRange n).map_update, List.prod_set, add_mul, this,
      mul_add, add_mul]
  map_smul' := by
    intro dec m i c x
    rw [Subsingleton.elim dec (by infer_instance)]
    have : (List.finRange n).indexOfₓ i < n := by
      simpa using List.indexOf_lt_length.2 (List.mem_finRange i)
    simp [List.ofFn_eq_map, (List.nodup_finRange n).map_update, List.prod_set, this]
#align multilinear_map.mk_pi_algebra_fin MultilinearMap.mkPiAlgebraFin
-/

variable {R A n}

/- warning: multilinear_map.mk_pi_algebra_fin_apply -> MultilinearMap.mkPiAlgebraFin_apply is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {n : Nat} [_inst_1 : CommSemiring.{u1} R] {A : Type.{u2}} [_inst_8 : Semiring.{u2} A] [_inst_9 : Algebra.{u1, u2} R A _inst_1 _inst_8] (m : (Fin n) -> A), Eq.{succ u2} A (coeFn.{succ u2, succ u2} (MultilinearMap.{u1, u2, u2, 0} R (Fin n) (fun (i : Fin n) => A) A (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_8))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_8))) (fun (i : Fin n) => Algebra.toModule.{u1, u2} R A _inst_1 _inst_8 _inst_9) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_8 _inst_9)) (fun (f : MultilinearMap.{u1, u2, u2, 0} R (Fin n) (fun (i : Fin n) => A) A (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_8))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_8))) (fun (i : Fin n) => Algebra.toModule.{u1, u2} R A _inst_1 _inst_8 _inst_9) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_8 _inst_9)) => ((Fin n) -> A) -> A) (MultilinearMap.hasCoeToFun.{u1, u2, u2, 0} R (Fin n) (fun (i : Fin n) => A) A (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_8))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_8))) (fun (i : Fin n) => Algebra.toModule.{u1, u2} R A _inst_1 _inst_8 _inst_9) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_8 _inst_9)) (MultilinearMap.mkPiAlgebraFin.{u1, u2} R n _inst_1 A _inst_8 _inst_9) m) (List.prod.{u2} A (Distrib.toHasMul.{u2} A (NonUnitalNonAssocSemiring.toDistrib.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_8)))) (AddMonoidWithOne.toOne.{u2} A (AddCommMonoidWithOne.toAddMonoidWithOne.{u2} A (NonAssocSemiring.toAddCommMonoidWithOne.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_8)))) (List.ofFn.{u2} A n m))
but is expected to have type
  forall {R : Type.{u2}} {n : Nat} [_inst_1 : CommSemiring.{u2} R] {A : Type.{u1}} [_inst_8 : Semiring.{u1} A] [_inst_9 : Algebra.{u2, u1} R A _inst_1 _inst_8] (m : (Fin n) -> A), Eq.{succ u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin n) -> A) => A) m) (FunLike.coe.{succ u1, succ u1, succ u1} (MultilinearMap.{u2, u1, u1, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18077 : Fin n) => A) A (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Fin n) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18077 : Fin n) => A) i) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18077 : Fin n) => A) i) (Semiring.toNonAssocSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18077 : Fin n) => A) i) _inst_8))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_8))) (fun (i : Fin n) => Algebra.toModule.{u2, u1} R ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18077 : Fin n) => A) i) _inst_1 _inst_8 _inst_9) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_8 _inst_9)) ((Fin n) -> A) (fun (f : (Fin n) -> A) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin n) -> A) => A) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u2, u1, u1, 0} R (Fin n) (fun (i : Fin n) => A) A (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Fin n) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18077 : Fin n) => A) i) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18077 : Fin n) => A) i) (Semiring.toNonAssocSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18077 : Fin n) => A) i) _inst_8))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_8))) (fun (i : Fin n) => Algebra.toModule.{u2, u1} R ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18077 : Fin n) => A) i) _inst_1 _inst_8 _inst_9) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_8 _inst_9)) (MultilinearMap.mkPiAlgebraFin.{u2, u1} R n _inst_1 A _inst_8 _inst_9) m) (List.prod.{u1} A (NonUnitalNonAssocSemiring.toMul.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_8))) (Semiring.toOne.{u1} A _inst_8) (List.ofFn.{u1} A n m))
Case conversion may be inaccurate. Consider using '#align multilinear_map.mk_pi_algebra_fin_apply MultilinearMap.mkPiAlgebraFin_applyₓ'. -/
@[simp]
theorem mkPiAlgebraFin_apply (m : Fin n → A) :
    MultilinearMap.mkPiAlgebraFin R n A m = (List.ofFn m).Prod :=
  rfl
#align multilinear_map.mk_pi_algebra_fin_apply MultilinearMap.mkPiAlgebraFin_apply

/- warning: multilinear_map.mk_pi_algebra_fin_apply_const -> MultilinearMap.mkPiAlgebraFin_apply_const is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {n : Nat} [_inst_1 : CommSemiring.{u1} R] {A : Type.{u2}} [_inst_8 : Semiring.{u2} A] [_inst_9 : Algebra.{u1, u2} R A _inst_1 _inst_8] (a : A), Eq.{succ u2} A (coeFn.{succ u2, succ u2} (MultilinearMap.{u1, u2, u2, 0} R (Fin n) (fun (i : Fin n) => A) A (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_8))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_8))) (fun (i : Fin n) => Algebra.toModule.{u1, u2} R A _inst_1 _inst_8 _inst_9) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_8 _inst_9)) (fun (f : MultilinearMap.{u1, u2, u2, 0} R (Fin n) (fun (i : Fin n) => A) A (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_8))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_8))) (fun (i : Fin n) => Algebra.toModule.{u1, u2} R A _inst_1 _inst_8 _inst_9) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_8 _inst_9)) => ((Fin n) -> A) -> A) (MultilinearMap.hasCoeToFun.{u1, u2, u2, 0} R (Fin n) (fun (i : Fin n) => A) A (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_8))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u2} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u2} A (Semiring.toNonAssocSemiring.{u2} A _inst_8))) (fun (i : Fin n) => Algebra.toModule.{u1, u2} R A _inst_1 _inst_8 _inst_9) (Algebra.toModule.{u1, u2} R A _inst_1 _inst_8 _inst_9)) (MultilinearMap.mkPiAlgebraFin.{u1, u2} R n _inst_1 A _inst_8 _inst_9) (fun (_x : Fin n) => a)) (HPow.hPow.{u2, 0, u2} A Nat A (instHPow.{u2, 0} A Nat (Monoid.Pow.{u2} A (MonoidWithZero.toMonoid.{u2} A (Semiring.toMonoidWithZero.{u2} A _inst_8)))) a n)
but is expected to have type
  forall {R : Type.{u2}} {n : Nat} [_inst_1 : CommSemiring.{u2} R] {A : Type.{u1}} [_inst_8 : Semiring.{u1} A] [_inst_9 : Algebra.{u2, u1} R A _inst_1 _inst_8] (a : A), Eq.{succ u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin n) -> A) => A) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18561 : Fin n) => a)) (FunLike.coe.{succ u1, succ u1, succ u1} (MultilinearMap.{u2, u1, u1, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18077 : Fin n) => A) A (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Fin n) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18077 : Fin n) => A) i) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18077 : Fin n) => A) i) (Semiring.toNonAssocSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18077 : Fin n) => A) i) _inst_8))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_8))) (fun (i : Fin n) => Algebra.toModule.{u2, u1} R ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18077 : Fin n) => A) i) _inst_1 _inst_8 _inst_9) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_8 _inst_9)) ((Fin n) -> A) (fun (f : (Fin n) -> A) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin n) -> A) => A) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u2, u1, u1, 0} R (Fin n) (fun (i : Fin n) => A) A (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Fin n) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18077 : Fin n) => A) i) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18077 : Fin n) => A) i) (Semiring.toNonAssocSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18077 : Fin n) => A) i) _inst_8))) (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} A (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} A (Semiring.toNonAssocSemiring.{u1} A _inst_8))) (fun (i : Fin n) => Algebra.toModule.{u2, u1} R ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18077 : Fin n) => A) i) _inst_1 _inst_8 _inst_9) (Algebra.toModule.{u2, u1} R A _inst_1 _inst_8 _inst_9)) (MultilinearMap.mkPiAlgebraFin.{u2, u1} R n _inst_1 A _inst_8 _inst_9) (fun (_x : Fin n) => a)) (HPow.hPow.{u1, 0, u1} A Nat A (instHPow.{u1, 0} A Nat (Monoid.Pow.{u1} A (MonoidWithZero.toMonoid.{u1} A (Semiring.toMonoidWithZero.{u1} A _inst_8)))) a n)
Case conversion may be inaccurate. Consider using '#align multilinear_map.mk_pi_algebra_fin_apply_const MultilinearMap.mkPiAlgebraFin_apply_constₓ'. -/
theorem mkPiAlgebraFin_apply_const (a : A) :
    (MultilinearMap.mkPiAlgebraFin R n A fun _ => a) = a ^ n := by simp
#align multilinear_map.mk_pi_algebra_fin_apply_const MultilinearMap.mkPiAlgebraFin_apply_const

end

#print MultilinearMap.smulRight /-
/-- Given an `R`-multilinear map `f` taking values in `R`, `f.smul_right z` is the map
sending `m` to `f m • z`. -/
def smulRight (f : MultilinearMap R M₁ R) (z : M₂) : MultilinearMap R M₁ M₂ :=
  (LinearMap.smulRight LinearMap.id z).compMultilinearMap f
#align multilinear_map.smul_right MultilinearMap.smulRight
-/

#print MultilinearMap.smulRight_apply /-
@[simp]
theorem smulRight_apply (f : MultilinearMap R M₁ R) (z : M₂) (m : ∀ i, M₁ i) :
    f.smul_right z m = f m • z :=
  rfl
#align multilinear_map.smul_right_apply MultilinearMap.smulRight_apply
-/

variable (R ι)

#print MultilinearMap.mkPiRing /-
/-- The canonical multilinear map on `R^ι` when `ι` is finite, associating to `m` the product of
all the `m i` (multiplied by a fixed reference element `z` in the target module). See also
`mk_pi_algebra` for a more general version. -/
protected def mkPiRing [Fintype ι] (z : M₂) : MultilinearMap R (fun i : ι => R) M₂ :=
  (MultilinearMap.mkPiAlgebra R ι R).smul_right z
#align multilinear_map.mk_pi_ring MultilinearMap.mkPiRing
-/

variable {R ι}

#print MultilinearMap.mkPiRing_apply /-
@[simp]
theorem mkPiRing_apply [Fintype ι] (z : M₂) (m : ι → R) :
    (MultilinearMap.mkPiRing R ι z : (ι → R) → M₂) m = (∏ i, m i) • z :=
  rfl
#align multilinear_map.mk_pi_ring_apply MultilinearMap.mkPiRing_apply
-/

#print MultilinearMap.mkPiRing_apply_one_eq_self /-
theorem mkPiRing_apply_one_eq_self [Fintype ι] (f : MultilinearMap R (fun i : ι => R) M₂) :
    MultilinearMap.mkPiRing R ι (f fun i => 1) = f :=
  by
  ext m
  have : m = fun i => m i • 1 := by
    ext j
    simp
  conv_rhs => rw [this, f.map_smul_univ]
  rfl
#align multilinear_map.mk_pi_ring_apply_one_eq_self MultilinearMap.mkPiRing_apply_one_eq_self
-/

#print MultilinearMap.mkPiRing_eq_iff /-
theorem mkPiRing_eq_iff [Fintype ι] {z₁ z₂ : M₂} :
    MultilinearMap.mkPiRing R ι z₁ = MultilinearMap.mkPiRing R ι z₂ ↔ z₁ = z₂ :=
  by
  simp_rw [MultilinearMap.ext_iff, mk_pi_ring_apply]
  constructor <;> intro h
  · simpa using h fun _ => 1
  · intro x
    simp [h]
#align multilinear_map.mk_pi_ring_eq_iff MultilinearMap.mkPiRing_eq_iff
-/

/- warning: multilinear_map.mk_pi_ring_zero -> MultilinearMap.mkPiRing_zero is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u3}} {M₂ : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_4 : AddCommMonoid.{u2} M₂] [_inst_7 : Module.{u1, u2} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] [_inst_8 : Fintype.{u3} ι], Eq.{max (succ u3) (succ u1) (succ u2)} (MultilinearMap.{u1, u1, u2, u3} R ι (fun (i : ι) => R) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) _inst_4 (fun (i : ι) => Semiring.toModule.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_7) (MultilinearMap.mkPiRing.{u1, u2, u3} R ι M₂ _inst_1 _inst_4 _inst_7 _inst_8 (OfNat.ofNat.{u2} M₂ 0 (OfNat.mk.{u2} M₂ 0 (Zero.zero.{u2} M₂ (AddZeroClass.toHasZero.{u2} M₂ (AddMonoid.toAddZeroClass.{u2} M₂ (AddCommMonoid.toAddMonoid.{u2} M₂ _inst_4))))))) (OfNat.ofNat.{max u3 u1 u2} (MultilinearMap.{u1, u1, u2, u3} R ι (fun (i : ι) => R) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) _inst_4 (fun (i : ι) => Semiring.toModule.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_7) 0 (OfNat.mk.{max u3 u1 u2} (MultilinearMap.{u1, u1, u2, u3} R ι (fun (i : ι) => R) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) _inst_4 (fun (i : ι) => Semiring.toModule.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_7) 0 (Zero.zero.{max u3 u1 u2} (MultilinearMap.{u1, u1, u2, u3} R ι (fun (i : ι) => R) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) _inst_4 (fun (i : ι) => Semiring.toModule.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_7) (MultilinearMap.hasZero.{u1, u1, u2, u3} R ι (fun (i : ι) => R) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) _inst_4 (fun (i : ι) => Semiring.toModule.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_7))))
but is expected to have type
  forall {R : Type.{u1}} {ι : Type.{u3}} {M₂ : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_4 : AddCommMonoid.{u2} M₂] [_inst_7 : Module.{u1, u2} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] [_inst_8 : Fintype.{u3} ι], Eq.{max (max (succ u1) (succ u3)) (succ u2)} (MultilinearMap.{u1, u1, u2, u3} R ι (fun (i : ι) => R) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) (Semiring.toNonAssocSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) (CommSemiring.toSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) _inst_1)))) _inst_4 (fun (i : ι) => Semiring.toModule.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_7) (MultilinearMap.mkPiRing.{u1, u2, u3} R ι M₂ _inst_1 _inst_4 _inst_7 _inst_8 (OfNat.ofNat.{u2} M₂ 0 (Zero.toOfNat0.{u2} M₂ (AddMonoid.toZero.{u2} M₂ (AddCommMonoid.toAddMonoid.{u2} M₂ _inst_4))))) (OfNat.ofNat.{max (max u1 u3) u2} (MultilinearMap.{u1, u1, u2, u3} R ι (fun (i : ι) => R) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) (Semiring.toNonAssocSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) (CommSemiring.toSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) _inst_1)))) _inst_4 (fun (i : ι) => Semiring.toModule.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_7) 0 (Zero.toOfNat0.{max (max u1 u3) u2} (MultilinearMap.{u1, u1, u2, u3} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) (Semiring.toNonAssocSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) (CommSemiring.toSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) _inst_1)))) _inst_4 (fun (i : ι) => Semiring.toModule.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_7) (MultilinearMap.instZeroMultilinearMap.{u1, u1, u2, u3} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) (Semiring.toNonAssocSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) (CommSemiring.toSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) _inst_1)))) _inst_4 (fun (i : ι) => Semiring.toModule.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_7)))
Case conversion may be inaccurate. Consider using '#align multilinear_map.mk_pi_ring_zero MultilinearMap.mkPiRing_zeroₓ'. -/
theorem mkPiRing_zero [Fintype ι] : MultilinearMap.mkPiRing R ι (0 : M₂) = 0 := by
  ext <;> rw [mk_pi_ring_apply, smul_zero, MultilinearMap.zero_apply]
#align multilinear_map.mk_pi_ring_zero MultilinearMap.mkPiRing_zero

/- warning: multilinear_map.mk_pi_ring_eq_zero_iff -> MultilinearMap.mkPiRing_eq_zero_iff is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u3}} {M₂ : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_4 : AddCommMonoid.{u2} M₂] [_inst_7 : Module.{u1, u2} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] [_inst_8 : Fintype.{u3} ι] (z : M₂), Iff (Eq.{max (succ u3) (succ u1) (succ u2)} (MultilinearMap.{u1, u1, u2, u3} R ι (fun (i : ι) => R) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) _inst_4 (fun (i : ι) => Semiring.toModule.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_7) (MultilinearMap.mkPiRing.{u1, u2, u3} R ι M₂ _inst_1 _inst_4 _inst_7 _inst_8 z) (OfNat.ofNat.{max u3 u1 u2} (MultilinearMap.{u1, u1, u2, u3} R ι (fun (i : ι) => R) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) _inst_4 (fun (i : ι) => Semiring.toModule.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_7) 0 (OfNat.mk.{max u3 u1 u2} (MultilinearMap.{u1, u1, u2, u3} R ι (fun (i : ι) => R) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) _inst_4 (fun (i : ι) => Semiring.toModule.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_7) 0 (Zero.zero.{max u3 u1 u2} (MultilinearMap.{u1, u1, u2, u3} R ι (fun (i : ι) => R) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) _inst_4 (fun (i : ι) => Semiring.toModule.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_7) (MultilinearMap.hasZero.{u1, u1, u2, u3} R ι (fun (i : ι) => R) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} R (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) _inst_4 (fun (i : ι) => Semiring.toModule.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_7))))) (Eq.{succ u2} M₂ z (OfNat.ofNat.{u2} M₂ 0 (OfNat.mk.{u2} M₂ 0 (Zero.zero.{u2} M₂ (AddZeroClass.toHasZero.{u2} M₂ (AddMonoid.toAddZeroClass.{u2} M₂ (AddCommMonoid.toAddMonoid.{u2} M₂ _inst_4)))))))
but is expected to have type
  forall {R : Type.{u1}} {ι : Type.{u3}} {M₂ : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_4 : AddCommMonoid.{u2} M₂] [_inst_7 : Module.{u1, u2} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] [_inst_8 : Fintype.{u3} ι] (z : M₂), Iff (Eq.{max (max (succ u1) (succ u3)) (succ u2)} (MultilinearMap.{u1, u1, u2, u3} R ι (fun (i : ι) => R) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) (Semiring.toNonAssocSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) (CommSemiring.toSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) _inst_1)))) _inst_4 (fun (i : ι) => Semiring.toModule.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_7) (MultilinearMap.mkPiRing.{u1, u2, u3} R ι M₂ _inst_1 _inst_4 _inst_7 _inst_8 z) (OfNat.ofNat.{max (max u1 u3) u2} (MultilinearMap.{u1, u1, u2, u3} R ι (fun (i : ι) => R) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) (Semiring.toNonAssocSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) (CommSemiring.toSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) _inst_1)))) _inst_4 (fun (i : ι) => Semiring.toModule.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_7) 0 (Zero.toOfNat0.{max (max u1 u3) u2} (MultilinearMap.{u1, u1, u2, u3} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) (Semiring.toNonAssocSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) (CommSemiring.toSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) _inst_1)))) _inst_4 (fun (i : ι) => Semiring.toModule.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_7) (MultilinearMap.instZeroMultilinearMap.{u1, u1, u2, u3} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) (NonAssocSemiring.toNonUnitalNonAssocSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) (Semiring.toNonAssocSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) (CommSemiring.toSemiring.{u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.18917 : ι) => R) i) _inst_1)))) _inst_4 (fun (i : ι) => Semiring.toModule.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) _inst_7)))) (Eq.{succ u2} M₂ z (OfNat.ofNat.{u2} M₂ 0 (Zero.toOfNat0.{u2} M₂ (AddMonoid.toZero.{u2} M₂ (AddCommMonoid.toAddMonoid.{u2} M₂ _inst_4)))))
Case conversion may be inaccurate. Consider using '#align multilinear_map.mk_pi_ring_eq_zero_iff MultilinearMap.mkPiRing_eq_zero_iffₓ'. -/
theorem mkPiRing_eq_zero_iff [Fintype ι] (z : M₂) : MultilinearMap.mkPiRing R ι z = 0 ↔ z = 0 := by
  rw [← mk_pi_ring_zero, mk_pi_ring_eq_iff]
#align multilinear_map.mk_pi_ring_eq_zero_iff MultilinearMap.mkPiRing_eq_zero_iff

end CommSemiring

section RangeAddCommGroup

variable [Semiring R] [∀ i, AddCommMonoid (M₁ i)] [AddCommGroup M₂] [∀ i, Module R (M₁ i)]
  [Module R M₂] (f g : MultilinearMap R M₁ M₂)

instance : Neg (MultilinearMap R M₁ M₂) :=
  ⟨fun f => ⟨fun m => -f m, fun _ m i x y => by simp [add_comm], fun _ m i c x => by simp⟩⟩

/- warning: multilinear_map.neg_apply -> MultilinearMap.neg_apply is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_2 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_3 : AddCommGroup.{u3} M₂] [_inst_4 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_2 i)] [_inst_5 : Module.{u1, u3} R M₂ _inst_1 (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3)] (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (m : forall (i : ι), M₁ i), Eq.{succ u3} M₂ (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (Neg.neg.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (MultilinearMap.hasNeg.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 (fun (i : ι) => _inst_4 i) _inst_5) f) m) (Neg.neg.{u3} M₂ (SubNegMonoid.toHasNeg.{u3} M₂ (AddGroup.toSubNegMonoid.{u3} M₂ (AddCommGroup.toAddGroup.{u3} M₂ _inst_3))) (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) f m))
but is expected to have type
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_2 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_3 : AddCommGroup.{u3} M₂] [_inst_4 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_2 i)] [_inst_5 : Module.{u1, u3} R M₂ _inst_1 (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3)] (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (m : forall (i : ι), M₁ i), Eq.{succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (Neg.neg.{max (max u4 u2) u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (MultilinearMap.instNegMultilinearMapToAddCommMonoid.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 (fun (i : ι) => _inst_4 i) _inst_5) f) m) (Neg.neg.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (NegZeroClass.toNeg.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (SubNegZeroMonoid.toNegZeroClass.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (SubtractionMonoid.toSubNegZeroMonoid.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (SubtractionCommMonoid.toSubtractionMonoid.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (AddCommGroup.toDivisionAddCommMonoid.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) _inst_3))))) (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) f m))
Case conversion may be inaccurate. Consider using '#align multilinear_map.neg_apply MultilinearMap.neg_applyₓ'. -/
@[simp]
theorem neg_apply (m : ∀ i, M₁ i) : (-f) m = -f m :=
  rfl
#align multilinear_map.neg_apply MultilinearMap.neg_apply

instance : Sub (MultilinearMap R M₁ M₂) :=
  ⟨fun f g =>
    ⟨fun m => f m - g m, fun _ m i x y =>
      by
      simp only [MultilinearMap.map_add, sub_eq_add_neg, neg_add]
      cc, fun _ m i c x => by simp only [MultilinearMap.map_smul, smul_sub]⟩⟩

/- warning: multilinear_map.sub_apply -> MultilinearMap.sub_apply is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_2 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_3 : AddCommGroup.{u3} M₂] [_inst_4 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_2 i)] [_inst_5 : Module.{u1, u3} R M₂ _inst_1 (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3)] (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (g : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (m : forall (i : ι), M₁ i), Eq.{succ u3} M₂ (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (HSub.hSub.{max u4 u2 u3, max u4 u2 u3, max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (instHSub.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (MultilinearMap.hasSub.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 (fun (i : ι) => _inst_4 i) _inst_5)) f g) m) (HSub.hSub.{u3, u3, u3} M₂ M₂ M₂ (instHSub.{u3} M₂ (SubNegMonoid.toHasSub.{u3} M₂ (AddGroup.toSubNegMonoid.{u3} M₂ (AddCommGroup.toAddGroup.{u3} M₂ _inst_3)))) (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) f m) (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) g m))
but is expected to have type
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_2 : forall (i : ι), AddCommMonoid.{u2} (M₁ i)] [_inst_3 : AddCommGroup.{u3} M₂] [_inst_4 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (_inst_2 i)] [_inst_5 : Module.{u1, u3} R M₂ _inst_1 (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3)] (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (g : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (m : forall (i : ι), M₁ i), Eq.{succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (HSub.hSub.{max (max u4 u2) u3, max (max u4 u2) u3, max (max u4 u2) u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (instHSub.{max (max u4 u2) u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (MultilinearMap.instSubMultilinearMapToAddCommMonoid.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) _inst_3 (fun (i : ι) => _inst_4 i) _inst_5)) f g) m) (HSub.hSub.{u3, u3, u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (instHSub.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (SubNegMonoid.toSub.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (AddGroup.toSubNegMonoid.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) (AddCommGroup.toAddGroup.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) m) _inst_3)))) (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) f m) (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => _inst_2 i) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) g m))
Case conversion may be inaccurate. Consider using '#align multilinear_map.sub_apply MultilinearMap.sub_applyₓ'. -/
@[simp]
theorem sub_apply (m : ∀ i, M₁ i) : (f - g) m = f m - g m :=
  rfl
#align multilinear_map.sub_apply MultilinearMap.sub_apply

instance : AddCommGroup (MultilinearMap R M₁ M₂) :=
  {
    MultilinearMap.addCommMonoid with
    zero := (0 : MultilinearMap R M₁ M₂)
    add := (· + ·)
    neg := Neg.neg
    sub := Sub.sub
    add_left_neg := fun a => MultilinearMap.ext fun v => add_left_neg _
    sub_eq_add_neg := fun a b => MultilinearMap.ext fun v => sub_eq_add_neg _ _
    zsmul := fun n f =>
      { toFun := fun m => n • f m
        map_add' := fun _ m i x y => by simp [smul_add]
        map_smul' := fun _ l i x d => by simp [← smul_comm x n] }
    zsmul_zero' := fun a => MultilinearMap.ext fun v => AddCommGroup.zsmul_zero' _
    zsmul_succ' := fun z a => MultilinearMap.ext fun v => AddCommGroup.zsmul_succ' _ _
    zsmul_neg' := fun z a => MultilinearMap.ext fun v => AddCommGroup.zsmul_neg' _ _ }

end RangeAddCommGroup

section AddCommGroup

variable [Semiring R] [∀ i, AddCommGroup (M₁ i)] [AddCommGroup M₂] [∀ i, Module R (M₁ i)]
  [Module R M₂] (f : MultilinearMap R M₁ M₂)

/- warning: multilinear_map.map_neg -> MultilinearMap.map_neg is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_2 : forall (i : ι), AddCommGroup.{u2} (M₁ i)] [_inst_3 : AddCommGroup.{u3} M₂] [_inst_4 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i))] [_inst_5 : Module.{u1, u3} R M₂ _inst_1 (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3)] (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) [_inst_6 : DecidableEq.{succ u4} ι] (m : forall (i : ι), M₁ i) (i : ι) (x : M₁ i), Eq.{succ u3} M₂ (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_6 a b) m i (Neg.neg.{u2} (M₁ i) (SubNegMonoid.toHasNeg.{u2} (M₁ i) (AddGroup.toSubNegMonoid.{u2} (M₁ i) (AddCommGroup.toAddGroup.{u2} (M₁ i) (_inst_2 i)))) x))) (Neg.neg.{u3} M₂ (SubNegMonoid.toHasNeg.{u3} M₂ (AddGroup.toSubNegMonoid.{u3} M₂ (AddCommGroup.toAddGroup.{u3} M₂ _inst_3))) (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_6 a b) m i x)))
but is expected to have type
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_2 : forall (i : ι), AddCommGroup.{u2} (M₁ i)] [_inst_3 : AddCommGroup.{u3} M₂] [_inst_4 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i))] [_inst_5 : Module.{u1, u3} R M₂ _inst_1 (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3)] (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) [_inst_6 : DecidableEq.{succ u4} ι] (m : forall (i : ι), M₁ i) (i : ι) (x : M₁ i), Eq.{succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_6 a b) m i (Neg.neg.{u2} (M₁ i) (NegZeroClass.toNeg.{u2} (M₁ i) (SubNegZeroMonoid.toNegZeroClass.{u2} (M₁ i) (SubtractionMonoid.toSubNegZeroMonoid.{u2} (M₁ i) (SubtractionCommMonoid.toSubtractionMonoid.{u2} (M₁ i) (AddCommGroup.toDivisionAddCommMonoid.{u2} (M₁ i) (_inst_2 i)))))) x))) (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_6 a b) m i (Neg.neg.{u2} (M₁ i) (NegZeroClass.toNeg.{u2} (M₁ i) (SubNegZeroMonoid.toNegZeroClass.{u2} (M₁ i) (SubtractionMonoid.toSubNegZeroMonoid.{u2} (M₁ i) (SubtractionCommMonoid.toSubtractionMonoid.{u2} (M₁ i) (AddCommGroup.toDivisionAddCommMonoid.{u2} (M₁ i) (_inst_2 i)))))) x))) (Neg.neg.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_6 a b) m i x)) (NegZeroClass.toNeg.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_6 a b) m i x)) (SubNegZeroMonoid.toNegZeroClass.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_6 a b) m i x)) (SubtractionMonoid.toSubNegZeroMonoid.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_6 a b) m i x)) (SubtractionCommMonoid.toSubtractionMonoid.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_6 a b) m i x)) (AddCommGroup.toDivisionAddCommMonoid.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_6 a b) m i x)) _inst_3))))) (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_6 a b) m i x)))
Case conversion may be inaccurate. Consider using '#align multilinear_map.map_neg MultilinearMap.map_negₓ'. -/
@[simp]
theorem map_neg [DecidableEq ι] (m : ∀ i, M₁ i) (i : ι) (x : M₁ i) :
    f (update m i (-x)) = -f (update m i x) :=
  eq_neg_of_add_eq_zero_left <| by
    rw [← MultilinearMap.map_add, add_left_neg, f.map_coord_zero i (update_same i 0 m)]
#align multilinear_map.map_neg MultilinearMap.map_neg

/- warning: multilinear_map.map_sub -> MultilinearMap.map_sub is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_2 : forall (i : ι), AddCommGroup.{u2} (M₁ i)] [_inst_3 : AddCommGroup.{u3} M₂] [_inst_4 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i))] [_inst_5 : Module.{u1, u3} R M₂ _inst_1 (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3)] (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) [_inst_6 : DecidableEq.{succ u4} ι] (m : forall (i : ι), M₁ i) (i : ι) (x : M₁ i) (y : M₁ i), Eq.{succ u3} M₂ (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_6 a b) m i (HSub.hSub.{u2, u2, u2} (M₁ i) (M₁ i) (M₁ i) (instHSub.{u2} (M₁ i) (SubNegMonoid.toHasSub.{u2} (M₁ i) (AddGroup.toSubNegMonoid.{u2} (M₁ i) (AddCommGroup.toAddGroup.{u2} (M₁ i) (_inst_2 i))))) x y))) (HSub.hSub.{u3, u3, u3} M₂ M₂ M₂ (instHSub.{u3} M₂ (SubNegMonoid.toHasSub.{u3} M₂ (AddGroup.toSubNegMonoid.{u3} M₂ (AddCommGroup.toAddGroup.{u3} M₂ _inst_3)))) (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_6 a b) m i x)) (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) => (forall (i : ι), M₁ i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_6 a b) m i y)))
but is expected to have type
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₁ : ι -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : Semiring.{u1} R] [_inst_2 : forall (i : ι), AddCommGroup.{u2} (M₁ i)] [_inst_3 : AddCommGroup.{u3} M₂] [_inst_4 : forall (i : ι), Module.{u1, u2} R (M₁ i) _inst_1 (AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i))] [_inst_5 : Module.{u1, u3} R M₂ _inst_1 (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3)] (f : MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) [_inst_6 : DecidableEq.{succ u4} ι] (m : forall (i : ι), M₁ i) (i : ι) (x : M₁ i) (y : M₁ i), Eq.{succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_6 a b) m i (HSub.hSub.{u2, u2, u2} (M₁ i) (M₁ i) (M₁ i) (instHSub.{u2} (M₁ i) (SubNegMonoid.toSub.{u2} (M₁ i) (AddGroup.toSubNegMonoid.{u2} (M₁ i) (AddCommGroup.toAddGroup.{u2} (M₁ i) (_inst_2 i))))) x y))) (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_6 a b) m i (HSub.hSub.{u2, u2, u2} (M₁ i) (M₁ i) (M₁ i) (instHSub.{u2} (M₁ i) (SubNegMonoid.toSub.{u2} (M₁ i) (AddGroup.toSubNegMonoid.{u2} (M₁ i) (AddCommGroup.toAddGroup.{u2} (M₁ i) (_inst_2 i))))) x y))) (HSub.hSub.{u3, u3, u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_6 a b) m i x)) ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_6 a b) m i y)) ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_6 a b) m i x)) (instHSub.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_6 a b) m i x)) (SubNegMonoid.toSub.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_6 a b) m i x)) (AddGroup.toSubNegMonoid.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_6 a b) m i x)) (AddCommGroup.toAddGroup.{u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_6 a b) m i x)) _inst_3)))) (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_6 a b) m i x)) (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) (forall (i : ι), M₁ i) (fun (f : forall (i : ι), M₁ i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : ι), M₁ i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, u4} R ι M₁ M₂ _inst_1 (fun (i : ι) => AddCommGroup.toAddCommMonoid.{u2} (M₁ i) (_inst_2 i)) (AddCommGroup.toAddCommMonoid.{u3} M₂ _inst_3) (fun (i : ι) => _inst_4 i) _inst_5) f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M₁ i) (fun (a : ι) (b : ι) => _inst_6 a b) m i y)))
Case conversion may be inaccurate. Consider using '#align multilinear_map.map_sub MultilinearMap.map_subₓ'. -/
@[simp]
theorem map_sub [DecidableEq ι] (m : ∀ i, M₁ i) (i : ι) (x y : M₁ i) :
    f (update m i (x - y)) = f (update m i x) - f (update m i y) := by
  rw [sub_eq_add_neg, sub_eq_add_neg, MultilinearMap.map_add, map_neg]
#align multilinear_map.map_sub MultilinearMap.map_sub

end AddCommGroup

section CommSemiring

variable [CommSemiring R] [∀ i, AddCommMonoid (M₁ i)] [AddCommMonoid M₂] [∀ i, Module R (M₁ i)]
  [Module R M₂]

#print MultilinearMap.piRingEquiv /-
/-- When `ι` is finite, multilinear maps on `R^ι` with values in `M₂` are in bijection with `M₂`,
as such a multilinear map is completely determined by its value on the constant vector made of ones.
We register this bijection as a linear equivalence in `multilinear_map.pi_ring_equiv`. -/
protected def piRingEquiv [Fintype ι] : M₂ ≃ₗ[R] MultilinearMap R (fun i : ι => R) M₂
    where
  toFun z := MultilinearMap.mkPiRing R ι z
  invFun f := f fun i => 1
  map_add' z z' := by
    ext m
    simp [smul_add]
  map_smul' c z := by
    ext m
    simp [smul_smul, mul_comm]
  left_inv z := by simp
  right_inv f := f.mkPiRing_apply_one_eq_self
#align multilinear_map.pi_ring_equiv MultilinearMap.piRingEquiv
-/

end CommSemiring

end MultilinearMap

section Currying

/-!
### Currying

We associate to a multilinear map in `n+1` variables (i.e., based on `fin n.succ`) two
curried functions, named `f.curry_left` (which is a linear map on `E 0` taking values
in multilinear maps in `n` variables) and `f.curry_right` (wich is a multilinear map in `n`
variables taking values in linear maps on `E 0`). In both constructions, the variable that is
singled out is `0`, to take advantage of the operations `cons` and `tail` on `fin n`.
The inverse operations are called `uncurry_left` and `uncurry_right`.

We also register linear equiv versions of these correspondences, in
`multilinear_curry_left_equiv` and `multilinear_curry_right_equiv`.
-/


open MultilinearMap

variable {R M M₂} [CommSemiring R] [∀ i, AddCommMonoid (M i)] [AddCommMonoid M'] [AddCommMonoid M₂]
  [∀ i, Module R (M i)] [Module R M'] [Module R M₂]

/-! #### Left currying -/


/- warning: linear_map.uncurry_left -> LinearMap.uncurryLeft is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {n : Nat} {M : (Fin (Nat.succ n)) -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_5 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4], (LinearMap.{u1, u1, u2, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_5 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7 _inst_7 (LinearMap.uncurryLeft._proof_1.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) -> (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7)
but is expected to have type
  forall {R : Type.{u1}} {n : Nat} {M : (Fin (Nat.succ n)) -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_5 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4], (LinearMap.{u1, u1, u2, max u3 u2} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_5 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) -> (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7)
Case conversion may be inaccurate. Consider using '#align linear_map.uncurry_left LinearMap.uncurryLeftₓ'. -/
/-- Given a linear map `f` from `M 0` to multilinear maps on `n` variables,
construct the corresponding multilinear map on `n+1` variables obtained by concatenating
the variables, given by `m ↦ f (m 0) (tail m)`-/
def LinearMap.uncurryLeft (f : M 0 →ₗ[R] MultilinearMap R (fun i : Fin n => M i.succ) M₂) :
    MultilinearMap R M M₂ where
  toFun m := f (m 0) (tail m)
  map_add' dec m i x y := by
    rw [Subsingleton.elim dec (by infer_instance)]
    by_cases h : i = 0
    · subst i
      rw [update_same, update_same, update_same, f.map_add, add_apply, tail_update_zero,
        tail_update_zero, tail_update_zero]
    · rw [update_noteq (Ne.symm h), update_noteq (Ne.symm h), update_noteq (Ne.symm h)]
      revert x y
      rw [← succ_pred i h]
      intro x y
      rw [tail_update_succ, MultilinearMap.map_add, tail_update_succ, tail_update_succ]
  map_smul' dec m i c x := by
    rw [Subsingleton.elim dec (by infer_instance)]
    by_cases h : i = 0
    · subst i
      rw [update_same, update_same, tail_update_zero, tail_update_zero, ← smul_apply, f.map_smul]
    · rw [update_noteq (Ne.symm h), update_noteq (Ne.symm h)]
      revert x
      rw [← succ_pred i h]
      intro x
      rw [tail_update_succ, tail_update_succ, MultilinearMap.map_smul]
#align linear_map.uncurry_left LinearMap.uncurryLeft

/- warning: linear_map.uncurry_left_apply -> LinearMap.uncurryLeft_apply is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {n : Nat} {M : (Fin (Nat.succ n)) -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_5 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] (f : LinearMap.{u1, u1, u2, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_5 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (m : forall (i : Fin (Nat.succ n)), M i), Eq.{succ u3} M₂ (coeFn.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) (fun (f : MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) => (forall (i : Fin (Nat.succ n)), M i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) (LinearMap.uncurryLeft.{u1, u2, u3} R n M M₂ _inst_1 _inst_2 _inst_4 _inst_5 _inst_7 f) m) (coeFn.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (fun (f : MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) => (forall (i : Fin n), M (Fin.succ n i)) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (coeFn.{max (succ u2) (succ (max u2 u3)), max (succ u2) (succ (max u2 u3))} (LinearMap.{u1, u1, u2, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_5 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (fun (_x : LinearMap.{u1, u1, u2, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_5 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) => (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) -> (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7)) (LinearMap.hasCoeToFun.{u1, u1, u2, max u2 u3} R R (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_5 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) f (m (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n))))))) (Fin.tail.{u2} n M m))
but is expected to have type
  forall {R : Type.{u1}} {n : Nat} {M : (Fin (Nat.succ n)) -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_5 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] (f : LinearMap.{u1, u1, u2, max u3 u2} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_5 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (m : forall (i : Fin (Nat.succ n)), M i), Eq.{succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) m) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) (forall (i : Fin (Nat.succ n)), M i) (fun (f : forall (i : Fin (Nat.succ n)), M i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) (LinearMap.uncurryLeft.{u1, u2, u3} R n M M₂ _inst_1 _inst_2 _inst_4 _inst_5 _inst_7 f) m) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} ((fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6191 : M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) => MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (m (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n))))) (forall (i : Fin n), M (Fin.succ n i)) (fun (f : forall (i : Fin n), M (Fin.succ n i)) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin n), M (Fin.succ n i)) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (FunLike.coe.{max (succ u2) (succ u3), succ u2, max (succ u2) (succ u3)} (LinearMap.{u1, u1, u2, max u3 u2} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_5 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (fun (_x : M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6191 : M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) => MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) _x) (LinearMap.instFunLikeLinearMap.{u1, u1, u2, max u2 u3} R R (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_5 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) f (m (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n))))) (Fin.tail.{u2} n M m))
Case conversion may be inaccurate. Consider using '#align linear_map.uncurry_left_apply LinearMap.uncurryLeft_applyₓ'. -/
@[simp]
theorem LinearMap.uncurryLeft_apply (f : M 0 →ₗ[R] MultilinearMap R (fun i : Fin n => M i.succ) M₂)
    (m : ∀ i, M i) : f.uncurryLeft m = f (m 0) (tail m) :=
  rfl
#align linear_map.uncurry_left_apply LinearMap.uncurryLeft_apply

/- warning: multilinear_map.curry_left -> MultilinearMap.curryLeft is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {n : Nat} {M : (Fin (Nat.succ n)) -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_5 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4], (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) -> (LinearMap.{u1, u1, u2, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_5 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7 _inst_7 (MultilinearMap.curryLeft._proof_1.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)))
but is expected to have type
  forall {R : Type.{u1}} {n : Nat} {M : (Fin (Nat.succ n)) -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_5 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4], (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) -> (LinearMap.{u1, u1, u2, max u3 u2} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_5 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))
Case conversion may be inaccurate. Consider using '#align multilinear_map.curry_left MultilinearMap.curryLeftₓ'. -/
/-- Given a multilinear map `f` in `n+1` variables, split the first variable to obtain
a linear map into multilinear maps in `n` variables, given by `x ↦ (m ↦ f (cons x m))`. -/
def MultilinearMap.curryLeft (f : MultilinearMap R M M₂) :
    M 0 →ₗ[R] MultilinearMap R (fun i : Fin n => M i.succ) M₂
    where
  toFun x :=
    { toFun := fun m => f (cons x m)
      map_add' := fun dec m i y y' =>
        by
        rw [Subsingleton.elim dec (by infer_instance)]
        simp
      map_smul' := fun dec m i y c =>
        by
        rw [Subsingleton.elim dec (by infer_instance)]
        simp }
  map_add' x y := by
    ext m
    exact cons_add f m x y
  map_smul' c x := by
    ext m
    exact cons_smul f m c x
#align multilinear_map.curry_left MultilinearMap.curryLeft

/- warning: multilinear_map.curry_left_apply -> MultilinearMap.curryLeft_apply is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {n : Nat} {M : (Fin (Nat.succ n)) -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_5 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] (f : MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) (x : M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (m : forall (i : Fin n), M (Fin.succ n i)), Eq.{succ u3} M₂ (coeFn.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_2 i) (Fin.succ n i)) _inst_4 (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_5 i) (Fin.succ n i)) _inst_7) (fun (f : MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_2 i) (Fin.succ n i)) _inst_4 (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_5 i) (Fin.succ n i)) _inst_7) => (forall (i : Fin n), M (Fin.succ n i)) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_2 i) (Fin.succ n i)) _inst_4 (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_5 i) (Fin.succ n i)) _inst_7) (coeFn.{max (succ u2) (succ (max u2 u3)), max (succ u2) (succ (max u2 u3))} (LinearMap.{u1, u1, u2, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_2 i) (Fin.succ n i)) _inst_4 (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_5 i) (Fin.succ n i)) _inst_7) ((fun (i : Fin (Nat.succ n)) => _inst_2 i) (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_2 i) (Fin.succ n i)) _inst_4 (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_5 i) (Fin.succ n i)) _inst_7) ((fun (i : Fin (Nat.succ n)) => _inst_5 i) (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_2 i) (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_5 i) (Fin.succ n i)) _inst_7 _inst_7 (MultilinearMap.curryLeft._proof_1.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (fun (_x : LinearMap.{u1, u1, u2, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_2 i) (Fin.succ n i)) _inst_4 (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_5 i) (Fin.succ n i)) _inst_7) ((fun (i : Fin (Nat.succ n)) => _inst_2 i) (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_2 i) (Fin.succ n i)) _inst_4 (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_5 i) (Fin.succ n i)) _inst_7) ((fun (i : Fin (Nat.succ n)) => _inst_5 i) (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_2 i) (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_5 i) (Fin.succ n i)) _inst_7 _inst_7 (MultilinearMap.curryLeft._proof_1.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) => (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) -> (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_2 i) (Fin.succ n i)) _inst_4 (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_5 i) (Fin.succ n i)) _inst_7)) (LinearMap.hasCoeToFun.{u1, u1, u2, max u2 u3} R R (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_2 i) (Fin.succ n i)) _inst_4 (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_5 i) (Fin.succ n i)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) ((fun (i : Fin (Nat.succ n)) => _inst_2 i) (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_2 i) (Fin.succ n i)) _inst_4 (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_5 i) (Fin.succ n i)) _inst_7) ((fun (i : Fin (Nat.succ n)) => _inst_5 i) (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_2 i) (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_5 i) (Fin.succ n i)) _inst_7 _inst_7 (MultilinearMap.curryLeft._proof_1.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (MultilinearMap.curryLeft.{u1, u2, u3} R n M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7 f) x) m) (coeFn.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) (fun (f : MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) => (forall (i : Fin (Nat.succ n)), M i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) f (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) x m))
but is expected to have type
  forall {R : Type.{u1}} {n : Nat} {M : (Fin (Nat.succ n)) -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_5 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] (f : MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) (x : M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (m : forall (i : Fin n), M (Fin.succ n i)), Eq.{succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin n), M (Fin.succ n i)) => M₂) m) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} ((fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6191 : M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) => MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) x) (forall (i : Fin n), M (Fin.succ n i)) (fun (f : forall (i : Fin n), M (Fin.succ n i)) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin n), M (Fin.succ n i)) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (FunLike.coe.{max (succ u2) (succ u3), succ u2, max (succ u2) (succ u3)} (LinearMap.{u1, u1, u2, max u3 u2} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_5 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (fun (_x : M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6191 : M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) => MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) _x) (LinearMap.instFunLikeLinearMap.{u1, u1, u2, max u2 u3} R R (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_5 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (MultilinearMap.curryLeft.{u1, u2, u3} R n M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7 f) x) m) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) (forall (i : Fin (Nat.succ n)), M i) (fun (f : forall (i : Fin (Nat.succ n)), M i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) f (Fin.cons.{u2} n (fun (i : Fin (Nat.succ n)) => M i) x m))
Case conversion may be inaccurate. Consider using '#align multilinear_map.curry_left_apply MultilinearMap.curryLeft_applyₓ'. -/
@[simp]
theorem MultilinearMap.curryLeft_apply (f : MultilinearMap R M M₂) (x : M 0)
    (m : ∀ i : Fin n, M i.succ) : f.curryLeft x m = f (cons x m) :=
  rfl
#align multilinear_map.curry_left_apply MultilinearMap.curryLeft_apply

/- warning: linear_map.curry_uncurry_left -> LinearMap.curry_uncurryLeft is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {n : Nat} {M : (Fin (Nat.succ n)) -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_5 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] (f : LinearMap.{u1, u1, u2, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_5 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))), Eq.{max (succ u2) (succ (max u2 u3))} (LinearMap.{u1, u1, u2, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_5 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7 _inst_7 (MultilinearMap.curryLeft._proof_1.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.curryLeft.{u1, u2, u3} R n M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7 (LinearMap.uncurryLeft.{u1, u2, u3} R n M M₂ _inst_1 _inst_2 _inst_4 _inst_5 _inst_7 f)) f
but is expected to have type
  forall {R : Type.{u1}} {n : Nat} {M : (Fin (Nat.succ n)) -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_5 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] (f : LinearMap.{u1, u1, u2, max u3 u2} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_5 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))), Eq.{max (succ u2) (succ u3)} (LinearMap.{u1, u1, u2, max u3 u2} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_5 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.curryLeft.{u1, u2, u3} R n M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7 (LinearMap.uncurryLeft.{u1, u2, u3} R n M M₂ _inst_1 _inst_2 _inst_4 _inst_5 _inst_7 f)) f
Case conversion may be inaccurate. Consider using '#align linear_map.curry_uncurry_left LinearMap.curry_uncurryLeftₓ'. -/
@[simp]
theorem LinearMap.curry_uncurryLeft
    (f : M 0 →ₗ[R] MultilinearMap R (fun i : Fin n => M i.succ) M₂) : f.uncurryLeft.curryLeft = f :=
  by
  ext (m x)
  simp only [tail_cons, LinearMap.uncurryLeft_apply, MultilinearMap.curryLeft_apply]
  rw [cons_zero]
#align linear_map.curry_uncurry_left LinearMap.curry_uncurryLeft

#print MultilinearMap.uncurry_curryLeft /-
@[simp]
theorem MultilinearMap.uncurry_curryLeft (f : MultilinearMap R M M₂) :
    f.curryLeft.uncurryLeft = f := by
  ext m
  simp
#align multilinear_map.uncurry_curry_left MultilinearMap.uncurry_curryLeft
-/

variable (R M M₂)

/- warning: multilinear_curry_left_equiv -> multilinearCurryLeftEquiv is a dubious translation:
lean 3 declaration is
  forall (R : Type.{u1}) {n : Nat} (M : (Fin (Nat.succ n)) -> Type.{u2}) (M₂ : Type.{u3}) [_inst_1 : CommSemiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_5 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4], LinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (multilinearCurryLeftEquiv._proof_1.{u1} R _inst_1) (multilinearCurryLeftEquiv._proof_2.{u1} R _inst_1) (LinearMap.{u1, u1, u2, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_5 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7 _inst_7 (multilinearCurryLeftEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) (LinearMap.addCommMonoid.{u1, u1, u2, max u2 u3} R R (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_5 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7 _inst_7 (multilinearCurryLeftEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) (LinearMap.module.{u1, u1, u1, u2, max u2 u3} R R R (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_5 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (OfNat.mk.{0} (Fin (Nat.succ n)) 0 (Zero.zero.{0} (Fin (Nat.succ n)) (Fin.hasZeroOfNeZero (Nat.succ n) (NeZero.succ n)))))) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7 _inst_7 (multilinearCurryLeftEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7 _inst_7 (multilinearCurryLeftEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (multilinearCurryLeftEquiv._proof_4.{u1, u2, u3} R n M M₂ _inst_1 _inst_2 _inst_4 _inst_5 _inst_7)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin (Nat.succ n)) M M₂ (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7 _inst_7 (multilinearCurryLeftEquiv._proof_5.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))
but is expected to have type
  forall (R : Type.{u1}) {n : Nat} (M : (Fin (Nat.succ n)) -> Type.{u2}) (M₂ : Type.{u3}) [_inst_1 : CommSemiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_5 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4], LinearEquiv.{u1, u1, max u3 u2, max u3 u2} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (LinearMap.{u1, u1, u2, max u3 u2} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_5 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) (LinearMap.addCommMonoid.{u1, u1, u2, max u2 u3} R R (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_5 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) (LinearMap.instModuleLinearMapAddCommMonoid.{u1, u1, u1, u2, max u2 u3} R R R (M (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (_inst_5 (OfNat.ofNat.{0} (Fin (Nat.succ n)) 0 (Fin.instOfNatFin (Nat.succ n) 0 (NeZero.succ n)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (Fin.succ n i)) M₂ (fun (i : Fin n) => _inst_2 (Fin.succ n i)) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_5 (Fin.succ n i)) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin (Nat.succ n)) M M₂ (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))
Case conversion may be inaccurate. Consider using '#align multilinear_curry_left_equiv multilinearCurryLeftEquivₓ'. -/
/-- The space of multilinear maps on `Π(i : fin (n+1)), M i` is canonically isomorphic to
the space of linear maps from `M 0` to the space of multilinear maps on
`Π(i : fin n), M i.succ `, by separating the first variable. We register this isomorphism as a
linear isomorphism in `multilinear_curry_left_equiv R M M₂`.

The direct and inverse maps are given by `f.uncurry_left` and `f.curry_left`. Use these
unless you need the full framework of linear equivs. -/
def multilinearCurryLeftEquiv :
    (M 0 →ₗ[R] MultilinearMap R (fun i : Fin n => M i.succ) M₂) ≃ₗ[R] MultilinearMap R M M₂
    where
  toFun := LinearMap.uncurryLeft
  map_add' f₁ f₂ := by
    ext m
    rfl
  map_smul' c f := by
    ext m
    rfl
  invFun := MultilinearMap.curryLeft
  left_inv := LinearMap.curry_uncurryLeft
  right_inv := MultilinearMap.uncurry_curryLeft
#align multilinear_curry_left_equiv multilinearCurryLeftEquiv

variable {R M M₂}

/-! #### Right currying -/


/- warning: multilinear_map.uncurry_right -> MultilinearMap.uncurryRight is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {n : Nat} {M : (Fin (Nat.succ n)) -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_5 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4], (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin n) (fun (i : Fin n) => M (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.addCommMonoid.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (fun (i : Fin n) => _inst_5 (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.module.{u1, u1, u1, u2, u3} R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_7 (MultilinearMap.uncurryRight._proof_1.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) -> (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7)
but is expected to have type
  forall {R : Type.{u1}} {n : Nat} {M : (Fin (Nat.succ n)) -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_5 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4], (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin n) (fun (i : Fin n) => M (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.addCommMonoid.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (fun (i : Fin n) => _inst_5 (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.instModuleLinearMapAddCommMonoid.{u1, u1, u1, u2, u3} R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) -> (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7)
Case conversion may be inaccurate. Consider using '#align multilinear_map.uncurry_right MultilinearMap.uncurryRightₓ'. -/
/-- Given a multilinear map `f` in `n` variables to the space of linear maps from `M (last n)` to
`M₂`, construct the corresponding multilinear map on `n+1` variables obtained by concatenating
the variables, given by `m ↦ f (init m) (m (last n))`-/
def MultilinearMap.uncurryRight
    (f : MultilinearMap R (fun i : Fin n => M i.cast_succ) (M (last n) →ₗ[R] M₂)) :
    MultilinearMap R M M₂ where
  toFun m := f (init m) (m (last n))
  map_add' dec m i x y := by
    rw [Subsingleton.elim dec (by infer_instance)]
    by_cases h : i.val < n
    · have : last n ≠ i := Ne.symm (ne_of_lt h)
      rw [update_noteq this, update_noteq this, update_noteq this]
      revert x y
      rw [(cast_succ_cast_lt i h).symm]
      intro x y
      rw [init_update_cast_succ, MultilinearMap.map_add, init_update_cast_succ,
        init_update_cast_succ, LinearMap.add_apply]
    · revert x y
      rw [eq_last_of_not_lt h]
      intro x y
      rw [init_update_last, init_update_last, init_update_last, update_same, update_same,
        update_same, LinearMap.map_add]
  map_smul' dec m i c x := by
    rw [Subsingleton.elim dec (by infer_instance)]
    by_cases h : i.val < n
    · have : last n ≠ i := Ne.symm (ne_of_lt h)
      rw [update_noteq this, update_noteq this]
      revert x
      rw [(cast_succ_cast_lt i h).symm]
      intro x
      rw [init_update_cast_succ, init_update_cast_succ, MultilinearMap.map_smul,
        LinearMap.smul_apply]
    · revert x
      rw [eq_last_of_not_lt h]
      intro x
      rw [update_same, update_same, init_update_last, init_update_last, map_smul]
#align multilinear_map.uncurry_right MultilinearMap.uncurryRight

/- warning: multilinear_map.uncurry_right_apply -> MultilinearMap.uncurryRight_apply is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {n : Nat} {M : (Fin (Nat.succ n)) -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_5 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] (f : MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin n) (fun (i : Fin n) => M (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.addCommMonoid.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (fun (i : Fin n) => _inst_5 (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.module.{u1, u1, u1, u2, u3} R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (m : forall (i : Fin (Nat.succ n)), M i), Eq.{succ u3} M₂ (coeFn.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) (fun (f : MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) => (forall (i : Fin (Nat.succ n)), M i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) (MultilinearMap.uncurryRight.{u1, u2, u3} R n M M₂ _inst_1 _inst_2 _inst_4 _inst_5 _inst_7 f) m) (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) (fun (_x : LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) => (M (Fin.last n)) -> M₂) (LinearMap.hasCoeToFun.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (coeFn.{max 1 (succ u2) (succ (max u2 u3)), max (succ u2) (succ (max u2 u3))} (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin n) (fun (i : Fin n) => M (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.addCommMonoid.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (fun (i : Fin n) => _inst_5 (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.module.{u1, u1, u1, u2, u3} R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (fun (f : MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin n) (fun (i : Fin n) => M (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.addCommMonoid.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (fun (i : Fin n) => _inst_5 (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.module.{u1, u1, u1, u2, u3} R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) => (forall (i : Fin n), M (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) -> (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7)) (MultilinearMap.hasCoeToFun.{u1, u2, max u2 u3, 0} R (Fin n) (fun (i : Fin n) => M (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.addCommMonoid.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (fun (i : Fin n) => _inst_5 (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.module.{u1, u1, u1, u2, u3} R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) f (Fin.init.{u2} n M m)) (m (Fin.last n)))
but is expected to have type
  forall {R : Type.{u1}} {n : Nat} {M : (Fin (Nat.succ n)) -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_5 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] (f : MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin n) (fun (i : Fin n) => M (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.addCommMonoid.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (fun (i : Fin n) => _inst_5 (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.instModuleLinearMapAddCommMonoid.{u1, u1, u1, u2, u3} R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (m : forall (i : Fin (Nat.succ n)), M i), Eq.{succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) m) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) (forall (i : Fin (Nat.succ n)), M i) (fun (f : forall (i : Fin (Nat.succ n)), M i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) (MultilinearMap.uncurryRight.{u1, u2, u3} R n M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7 f) m) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin n), M (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (a : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) a) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) => LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) (Fin.init.{u2} n M m)) (M (Fin.last n)) (fun (_x : M (Fin.last n)) => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6191 : M (Fin.last n)) => M₂) _x) (LinearMap.instFunLikeLinearMap.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (FunLike.coe.{max (succ u2) (succ u3), succ u2, max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin n) (fun (i : Fin n) => M (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (a : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) a) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (a : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) a) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.addCommMonoid.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (fun (i : Fin n) => _inst_5 (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (a : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) a) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.instModuleLinearMapAddCommMonoid.{u1, u1, u1, u2, u3} R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (forall (i : Fin n), M (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (a : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) a) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (fun (f : forall (i : Fin n), M (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (a : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) a) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin n), M (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (a : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) a) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) => LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, max u2 u3, 0} R (Fin n) (fun (i : Fin n) => M (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.addCommMonoid.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (fun (i : Fin n) => _inst_5 (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.instModuleLinearMapAddCommMonoid.{u1, u1, u1, u2, u3} R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) f (Fin.init.{u2} n M m)) (m (Fin.last n)))
Case conversion may be inaccurate. Consider using '#align multilinear_map.uncurry_right_apply MultilinearMap.uncurryRight_applyₓ'. -/
@[simp]
theorem MultilinearMap.uncurryRight_apply
    (f : MultilinearMap R (fun i : Fin n => M i.cast_succ) (M (last n) →ₗ[R] M₂)) (m : ∀ i, M i) :
    f.uncurryRight m = f (init m) (m (last n)) :=
  rfl
#align multilinear_map.uncurry_right_apply MultilinearMap.uncurryRight_apply

/- warning: multilinear_map.curry_right -> MultilinearMap.curryRight is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {n : Nat} {M : (Fin (Nat.succ n)) -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_5 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4], (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) -> (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin n) (fun (i : Fin n) => M (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.addCommMonoid.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (fun (i : Fin n) => _inst_5 (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.module.{u1, u1, u1, u2, u3} R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_7 (MultilinearMap.curryRight._proof_1.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)))
but is expected to have type
  forall {R : Type.{u1}} {n : Nat} {M : (Fin (Nat.succ n)) -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_5 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4], (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) -> (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin n) (fun (i : Fin n) => M (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.addCommMonoid.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (fun (i : Fin n) => _inst_5 (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.instModuleLinearMapAddCommMonoid.{u1, u1, u1, u2, u3} R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))
Case conversion may be inaccurate. Consider using '#align multilinear_map.curry_right MultilinearMap.curryRightₓ'. -/
/-- Given a multilinear map `f` in `n+1` variables, split the last variable to obtain
a multilinear map in `n` variables taking values in linear maps from `M (last n)` to `M₂`, given by
`m ↦ (x ↦ f (snoc m x))`. -/
def MultilinearMap.curryRight (f : MultilinearMap R M M₂) :
    MultilinearMap R (fun i : Fin n => M (Fin.castSucc i)) (M (last n) →ₗ[R] M₂)
    where
  toFun m :=
    { toFun := fun x => f (snoc m x)
      map_add' := fun x y => by rw [f.snoc_add]
      map_smul' := fun c x => by simp only [f.snoc_smul, RingHom.id_apply] }
  map_add' dec m i x y := by
    rw [Subsingleton.elim dec (by infer_instance)]
    ext z
    change f (snoc (update m i (x + y)) z) = f (snoc (update m i x) z) + f (snoc (update m i y) z)
    rw [snoc_update, snoc_update, snoc_update, f.map_add]
  map_smul' dec m i c x := by
    rw [Subsingleton.elim dec (by infer_instance)]
    ext z
    change f (snoc (update m i (c • x)) z) = c • f (snoc (update m i x) z)
    rw [snoc_update, snoc_update, f.map_smul]
#align multilinear_map.curry_right MultilinearMap.curryRight

/- warning: multilinear_map.curry_right_apply -> MultilinearMap.curryRight_apply is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {n : Nat} {M : (Fin (Nat.succ n)) -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_5 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] (f : MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) (m : forall (i : Fin n), M (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (x : M (Fin.last n)), Eq.{succ u3} M₂ (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ ((fun (i : Fin (Nat.succ n)) => _inst_2 i) (Fin.last n)) _inst_4 ((fun (i : Fin (Nat.succ n)) => _inst_5 i) (Fin.last n)) _inst_7) (fun (_x : LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ ((fun (i : Fin (Nat.succ n)) => _inst_2 i) (Fin.last n)) _inst_4 ((fun (i : Fin (Nat.succ n)) => _inst_5 i) (Fin.last n)) _inst_7) => (M (Fin.last n)) -> M₂) (LinearMap.hasCoeToFun.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) ((fun (i : Fin (Nat.succ n)) => _inst_2 i) (Fin.last n)) _inst_4 ((fun (i : Fin (Nat.succ n)) => _inst_5 i) (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (coeFn.{max 1 (succ u2) (succ (max u2 u3)), max (succ u2) (succ (max u2 u3))} (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin n) (fun (i : Fin n) => M (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ ((fun (i : Fin (Nat.succ n)) => _inst_2 i) (Fin.last n)) _inst_4 ((fun (i : Fin (Nat.succ n)) => _inst_5 i) (Fin.last n)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_2 i) (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.addCommMonoid.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) ((fun (i : Fin (Nat.succ n)) => _inst_2 i) (Fin.last n)) _inst_4 ((fun (i : Fin (Nat.succ n)) => _inst_5 i) (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_5 i) (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.module.{u1, u1, u1, u2, u3} R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) ((fun (i : Fin (Nat.succ n)) => _inst_2 i) (Fin.last n)) _inst_4 ((fun (i : Fin (Nat.succ n)) => _inst_5 i) (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_7 (MultilinearMap.curryRight._proof_1.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (fun (f : MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin n) (fun (i : Fin n) => M (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ ((fun (i : Fin (Nat.succ n)) => _inst_2 i) (Fin.last n)) _inst_4 ((fun (i : Fin (Nat.succ n)) => _inst_5 i) (Fin.last n)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_2 i) (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.addCommMonoid.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) ((fun (i : Fin (Nat.succ n)) => _inst_2 i) (Fin.last n)) _inst_4 ((fun (i : Fin (Nat.succ n)) => _inst_5 i) (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_5 i) (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.module.{u1, u1, u1, u2, u3} R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) ((fun (i : Fin (Nat.succ n)) => _inst_2 i) (Fin.last n)) _inst_4 ((fun (i : Fin (Nat.succ n)) => _inst_5 i) (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_7 (MultilinearMap.curryRight._proof_1.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) => (forall (i : Fin n), M (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) -> (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ ((fun (i : Fin (Nat.succ n)) => _inst_2 i) (Fin.last n)) _inst_4 ((fun (i : Fin (Nat.succ n)) => _inst_5 i) (Fin.last n)) _inst_7)) (MultilinearMap.hasCoeToFun.{u1, u2, max u2 u3, 0} R (Fin n) (fun (i : Fin n) => M (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ ((fun (i : Fin (Nat.succ n)) => _inst_2 i) (Fin.last n)) _inst_4 ((fun (i : Fin (Nat.succ n)) => _inst_5 i) (Fin.last n)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_2 i) (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.addCommMonoid.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) ((fun (i : Fin (Nat.succ n)) => _inst_2 i) (Fin.last n)) _inst_4 ((fun (i : Fin (Nat.succ n)) => _inst_5 i) (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (fun (i : Fin n) => (fun (i : Fin (Nat.succ n)) => _inst_5 i) (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.module.{u1, u1, u1, u2, u3} R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) ((fun (i : Fin (Nat.succ n)) => _inst_2 i) (Fin.last n)) _inst_4 ((fun (i : Fin (Nat.succ n)) => _inst_5 i) (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_7 (MultilinearMap.curryRight._proof_1.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.curryRight.{u1, u2, u3} R n M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7 f) m) x) (coeFn.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) (fun (f : MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) => (forall (i : Fin (Nat.succ n)), M i) -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) f (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m x))
but is expected to have type
  forall {R : Type.{u1}} {n : Nat} {M : (Fin (Nat.succ n)) -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_5 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] (f : MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) (m : forall (i : Fin n), M (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (x : M (Fin.last n)), Eq.{succ u3} ((fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6191 : M (Fin.last n)) => M₂) x) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin n), M (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (a : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) a) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) => LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) m) (M (Fin.last n)) (fun (_x : M (Fin.last n)) => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6191 : M (Fin.last n)) => M₂) _x) (LinearMap.instFunLikeLinearMap.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (FunLike.coe.{max (succ u2) (succ u3), succ u2, max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin n) (fun (i : Fin n) => M (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (a : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) a) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (a : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) a) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.addCommMonoid.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (fun (i : Fin n) => _inst_5 (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (a : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) a) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.instModuleLinearMapAddCommMonoid.{u1, u1, u1, u2, u3} R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (forall (i : Fin n), M (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (a : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) a) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (fun (f : forall (i : Fin n), M (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (a : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) a) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin n), M (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (a : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) a) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) => LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, max u2 u3, 0} R (Fin n) (fun (i : Fin n) => M (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.addCommMonoid.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (fun (i : Fin n) => _inst_5 (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.instModuleLinearMapAddCommMonoid.{u1, u1, u1, u2, u3} R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.curryRight.{u1, u2, u3} R n M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7 f) m) x) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) (forall (i : Fin (Nat.succ n)), M i) (fun (f : forall (i : Fin (Nat.succ n)), M i) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : forall (i : Fin (Nat.succ n)), M i) => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) f (Fin.snoc.{u2} n (fun (i : Fin (Nat.succ n)) => M i) m x))
Case conversion may be inaccurate. Consider using '#align multilinear_map.curry_right_apply MultilinearMap.curryRight_applyₓ'. -/
@[simp]
theorem MultilinearMap.curryRight_apply (f : MultilinearMap R M M₂) (m : ∀ i : Fin n, M i.cast_succ)
    (x : M (last n)) : f.curryRight m x = f (snoc m x) :=
  rfl
#align multilinear_map.curry_right_apply MultilinearMap.curryRight_apply

/- warning: multilinear_map.curry_uncurry_right -> MultilinearMap.curry_uncurryRight is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {n : Nat} {M : (Fin (Nat.succ n)) -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_5 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] (f : MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin n) (fun (i : Fin n) => M (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.addCommMonoid.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (fun (i : Fin n) => _inst_5 (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.module.{u1, u1, u1, u2, u3} R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))), Eq.{max 1 (succ u2) (succ (max u2 u3))} (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin n) (fun (i : Fin n) => M (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.addCommMonoid.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (fun (i : Fin n) => _inst_5 (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.module.{u1, u1, u1, u2, u3} R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_7 (MultilinearMap.curryRight._proof_1.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.curryRight.{u1, u2, u3} R n M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7 (MultilinearMap.uncurryRight.{u1, u2, u3} R n M M₂ _inst_1 _inst_2 _inst_4 _inst_5 _inst_7 f)) f
but is expected to have type
  forall {R : Type.{u1}} {n : Nat} {M : (Fin (Nat.succ n)) -> Type.{u2}} {M₂ : Type.{u3}} [_inst_1 : CommSemiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_5 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] (f : MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin n) (fun (i : Fin n) => M (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.addCommMonoid.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (fun (i : Fin n) => _inst_5 (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.instModuleLinearMapAddCommMonoid.{u1, u1, u1, u2, u3} R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))), Eq.{max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin n) (fun (i : Fin n) => M (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.addCommMonoid.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (fun (i : Fin n) => _inst_5 (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.instModuleLinearMapAddCommMonoid.{u1, u1, u1, u2, u3} R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.curryRight.{u1, u2, u3} R n M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7 (MultilinearMap.uncurryRight.{u1, u2, u3} R n M M₂ _inst_1 (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7 f)) f
Case conversion may be inaccurate. Consider using '#align multilinear_map.curry_uncurry_right MultilinearMap.curry_uncurryRightₓ'. -/
@[simp]
theorem MultilinearMap.curry_uncurryRight
    (f : MultilinearMap R (fun i : Fin n => M i.cast_succ) (M (last n) →ₗ[R] M₂)) :
    f.uncurryRight.curryRight = f := by
  ext (m x)
  simp only [snoc_last, MultilinearMap.curryRight_apply, MultilinearMap.uncurryRight_apply]
  rw [init_snoc]
#align multilinear_map.curry_uncurry_right MultilinearMap.curry_uncurryRight

#print MultilinearMap.uncurry_curryRight /-
@[simp]
theorem MultilinearMap.uncurry_curryRight (f : MultilinearMap R M M₂) :
    f.curryRight.uncurryRight = f := by
  ext m
  simp
#align multilinear_map.uncurry_curry_right MultilinearMap.uncurry_curryRight
-/

variable (R M M₂)

/- warning: multilinear_curry_right_equiv -> multilinearCurryRightEquiv is a dubious translation:
lean 3 declaration is
  forall (R : Type.{u1}) {n : Nat} (M : (Fin (Nat.succ n)) -> Type.{u2}) (M₂ : Type.{u3}) [_inst_1 : CommSemiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_5 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4], LinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (multilinearCurryRightEquiv._proof_1.{u1} R _inst_1) (multilinearCurryRightEquiv._proof_2.{u1} R _inst_1) (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin n) (fun (i : Fin n) => M (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.addCommMonoid.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (fun (i : Fin n) => _inst_5 (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.module.{u1, u1, u1, u2, u3} R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_7 (multilinearCurryRightEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin n) (fun (i : Fin n) => M (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.addCommMonoid.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (fun (i : Fin n) => _inst_5 (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.module.{u1, u1, u1, u2, u3} R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_7 (multilinearCurryRightEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) (MultilinearMap.module.{u2, max u2 u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) (fun (i : Fin n) => _inst_2 (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.addCommMonoid.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_5 (coeFn.{1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe n) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (fun (_x : RelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) => (Fin n) -> (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (RelEmbedding.hasCoeToFun.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (LE.le.{0} (Fin n) (Fin.hasLe n)) (LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))) (Fin.hasLe (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne))))))) (Fin.castSucc n) i)) (LinearMap.module.{u1, u1, u1, u2, u3} R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_7 (multilinearCurryRightEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (LinearMap.module.{u1, u1, u1, u2, u3} R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_7 (multilinearCurryRightEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (multilinearCurryRightEquiv._proof_4.{u1, u2, u3} R n M M₂ _inst_1 _inst_2 _inst_4 _inst_5 _inst_7)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin (Nat.succ n)) M M₂ (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7 _inst_7 (multilinearCurryRightEquiv._proof_5.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))
but is expected to have type
  forall (R : Type.{u1}) {n : Nat} (M : (Fin (Nat.succ n)) -> Type.{u2}) (M₂ : Type.{u3}) [_inst_1 : CommSemiring.{u1} R] [_inst_2 : forall (i : Fin (Nat.succ n)), AddCommMonoid.{u2} (M i)] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_5 : forall (i : Fin (Nat.succ n)), Module.{u1, u2} R (M i) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 i)] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4], LinearEquiv.{u1, u1, max u3 u2, max u3 u2} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin n) (fun (i : Fin n) => M (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.addCommMonoid.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (fun (i : Fin n) => _inst_5 (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.instModuleLinearMapAddCommMonoid.{u1, u1, u1, u2, u3} R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin n) (fun (i : Fin n) => M (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_2 (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.addCommMonoid.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) (fun (i : Fin n) => _inst_5 (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.instModuleLinearMapAddCommMonoid.{u1, u1, u1, u2, u3} R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin (Nat.succ n)) M M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin n) (fun (i : Fin n) => M (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.{u1, u1, u2, u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (M (Fin.last n)) M₂ (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7) (fun (i : Fin n) => _inst_2 (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.addCommMonoid.{u1, u1, u2, u3} R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)))) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_5 (FunLike.coe.{1, 1, 1} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Order.Hom.Lattice._hyg.494 : Fin n) => Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) _x) (InfHomClass.toFunLike.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Lattice.toInf.{0} (Fin n) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n)))) (Lattice.toInf.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n)) (LatticeHomClass.toInfHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (DistribLattice.toLattice.{0} (Fin n) (instDistribLattice.{0} (Fin n) (Fin.instLinearOrderFin n))) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (OrderHomClass.toLatticeHomClass.{0, 0, 0} (OrderEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin n) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (Fin.instLinearOrderFin n) (Fin.instLatticeFinHAddNatInstHAddInstAddNatOfNat n) (RelEmbedding.instRelHomClassRelEmbedding.{0, 0} (Fin n) (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.682 : Fin n) (x._@.Mathlib.Order.Hom.Basic._hyg.684 : Fin n) => LE.le.{0} (Fin n) (instLEFin n) x._@.Mathlib.Order.Hom.Basic._hyg.682 x._@.Mathlib.Order.Hom.Basic._hyg.684) (fun (x._@.Mathlib.Order.Hom.Basic._hyg.697 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (x._@.Mathlib.Order.Hom.Basic._hyg.699 : Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) => LE.le.{0} (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) (instLEFin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) x._@.Mathlib.Order.Hom.Basic._hyg.697 x._@.Mathlib.Order.Hom.Basic._hyg.699))))) (Fin.castSucc n) i)) (LinearMap.instModuleLinearMapAddCommMonoid.{u1, u1, u1, u2, u3} R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (LinearMap.instModuleLinearMapAddCommMonoid.{u1, u1, u1, u2, u3} R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (CommSemiring.toSemiring.{u1} R _inst_1) _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (LinearMap.instSMulCommClassLinearMapInstSMulLinearMapInstSMulLinearMap.{u1, u1, u1, u1, u2, u3} R R R R (M (Fin.last n)) M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (_inst_2 (Fin.last n)) _inst_4 (_inst_5 (Fin.last n)) _inst_7 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (Module.toDistribMulAction.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7) (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (Module.toDistribMulAction.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7) (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))) (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin (Nat.succ n)) M M₂ (fun (i : Fin (Nat.succ n)) => _inst_2 i) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin (Nat.succ n)) => _inst_5 i) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))
Case conversion may be inaccurate. Consider using '#align multilinear_curry_right_equiv multilinearCurryRightEquivₓ'. -/
/-- The space of multilinear maps on `Π(i : fin (n+1)), M i` is canonically isomorphic to
the space of linear maps from the space of multilinear maps on `Π(i : fin n), M i.cast_succ` to the
space of linear maps on `M (last n)`, by separating the last variable. We register this isomorphism
as a linear isomorphism in `multilinear_curry_right_equiv R M M₂`.

The direct and inverse maps are given by `f.uncurry_right` and `f.curry_right`. Use these
unless you need the full framework of linear equivs. -/
def multilinearCurryRightEquiv :
    MultilinearMap R (fun i : Fin n => M i.cast_succ) (M (last n) →ₗ[R] M₂) ≃ₗ[R]
      MultilinearMap R M M₂
    where
  toFun := MultilinearMap.uncurryRight
  map_add' f₁ f₂ := by
    ext m
    rfl
  map_smul' c f := by
    ext m
    rw [smul_apply]
    rfl
  invFun := MultilinearMap.curryRight
  left_inv := MultilinearMap.curry_uncurryRight
  right_inv := MultilinearMap.uncurry_curryRight
#align multilinear_curry_right_equiv multilinearCurryRightEquiv

namespace MultilinearMap

variable {ι' : Type _} {R M₂}

#print MultilinearMap.currySum /-
/-- A multilinear map on `Π i : ι ⊕ ι', M'` defines a multilinear map on `Π i : ι, M'`
taking values in the space of multilinear maps on `Π i : ι', M'`. -/
def currySum (f : MultilinearMap R (fun x : Sum ι ι' => M') M₂) :
    MultilinearMap R (fun x : ι => M') (MultilinearMap R (fun x : ι' => M') M₂)
    where
  toFun u :=
    { toFun := fun v => f (Sum.elim u v)
      map_add' := fun _ v i x y => by
        skip
        letI := Classical.decEq ι
        simp only [← Sum.update_elim_inr, f.map_add]
      map_smul' := fun _ v i c x => by
        skip
        letI := Classical.decEq ι
        simp only [← Sum.update_elim_inr, f.map_smul] }
  map_add' _ u i x y :=
    ext fun v => by
      skip
      letI := Classical.decEq ι'
      simp only [MultilinearMap.coe_mk, add_apply, ← Sum.update_elim_inl, f.map_add]
  map_smul' _ u i c x :=
    ext fun v => by
      skip
      letI := Classical.decEq ι'
      simp only [MultilinearMap.coe_mk, smul_apply, ← Sum.update_elim_inl, f.map_smul]
#align multilinear_map.curry_sum MultilinearMap.currySum
-/

/- warning: multilinear_map.curry_sum_apply -> MultilinearMap.currySum_apply is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₂ : Type.{u3}} {M' : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_3 : AddCommMonoid.{u2} M'] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_6 : Module.{u1, u2} R M' (CommSemiring.toSemiring.{u1} R _inst_1) _inst_3] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] {ι' : Type.{u5}} (f : MultilinearMap.{u1, u2, u3, max u4 u5} R (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7) (u : ι -> M') (v : ι' -> M'), Eq.{succ u3} M₂ (coeFn.{max (succ u5) (succ u2) (succ u3), max (max (succ u5) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (f : MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) => (ι' -> M') -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (coeFn.{max (succ u4) (succ u2) (succ (max u5 u2 u3)), max (max (succ u4) (succ u2)) (succ (max u5 u2 u3))} (MultilinearMap.{u1, u2, max u5 u2 u3, u4} R ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySum._proof_1.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (fun (f : MultilinearMap.{u1, u2, max u5 u2 u3, u4} R ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySum._proof_1.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) => (ι -> M') -> (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7)) (MultilinearMap.hasCoeToFun.{u1, u2, max u5 u2 u3, u4} R ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySum._proof_1.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.currySum.{u1, u2, u3, u4, u5} R ι M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 ι' f) u) v) (coeFn.{max (succ (max u4 u5)) (succ u2) (succ u3), max (max (succ (max u4 u5)) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, max u4 u5} R (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7) (fun (f : MultilinearMap.{u1, u2, u3, max u4 u5} R (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7) => ((Sum.{u4, u5} ι ι') -> M') -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, max u4 u5} R (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7) f (Sum.elim.{u4, u5, succ u2} ι ι' M' u v))
but is expected to have type
  forall {R : Type.{u2}} {ι : Type.{u5}} {M₂ : Type.{u4}} {M' : Type.{u3}} [_inst_1 : CommSemiring.{u2} R] [_inst_3 : AddCommMonoid.{u3} M'] [_inst_4 : AddCommMonoid.{u4} M₂] [_inst_6 : Module.{u2, u3} R M' (CommSemiring.toSemiring.{u2} R _inst_1) _inst_3] [_inst_7 : Module.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4] {ι' : Type.{u1}} (f : MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (u : ι -> M') (v : ι' -> M'), Eq.{succ u4} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : ι' -> M') => M₂) v) (FunLike.coe.{max (max (succ u3) (succ u4)) (succ u1), max (succ u3) (succ u1), succ u4} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : ι -> M') => MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24021 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) u) (ι' -> M') (fun (f : ι' -> M') => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : ι' -> M') => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u2, u3, u4, u1} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (FunLike.coe.{max (max (max (succ u5) (succ u3)) (succ u4)) (succ u1), max (succ u5) (succ u3), max (max (succ u3) (succ u4)) (succ u1)} (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24008 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24021 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24021 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24021 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (ι -> M') (fun (f : ι -> M') => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : ι -> M') => MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24021 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.currySum.{u2, u3, u4, u5, u1} R ι M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 ι' f) u) v) (FunLike.coe.{max (max (max (succ u5) (succ u3)) (succ u4)) (succ u1), max (max (succ u5) (succ u3)) (succ u1), succ u4} (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24248 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) ((Sum.{u5, u1} ι ι') -> M') (fun (f : (Sum.{u5, u1} ι ι') -> M') => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Sum.{u5, u1} ι ι') -> M') => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) f (Sum.elim.{u5, u1, succ u3} ι ι' M' u v))
Case conversion may be inaccurate. Consider using '#align multilinear_map.curry_sum_apply MultilinearMap.currySum_applyₓ'. -/
@[simp]
theorem currySum_apply (f : MultilinearMap R (fun x : Sum ι ι' => M') M₂) (u : ι → M')
    (v : ι' → M') : f.currySum u v = f (Sum.elim u v) :=
  rfl
#align multilinear_map.curry_sum_apply MultilinearMap.currySum_apply

#print MultilinearMap.uncurrySum /-
/-- A multilinear map on `Π i : ι, M'` taking values in the space of multilinear maps
on `Π i : ι', M'` defines a multilinear map on `Π i : ι ⊕ ι', M'`. -/
def uncurrySum (f : MultilinearMap R (fun x : ι => M') (MultilinearMap R (fun x : ι' => M') M₂)) :
    MultilinearMap R (fun x : Sum ι ι' => M') M₂
    where
  toFun u := f (u ∘ Sum.inl) (u ∘ Sum.inr)
  map_add' _ u i x y := by
    skip
    letI := (@Sum.inl_injective ι ι').DecidableEq
    letI := (@Sum.inr_injective ι ι').DecidableEq
    cases i <;>
      simp only [MultilinearMap.map_add, add_apply, Sum.update_inl_comp_inl,
        Sum.update_inl_comp_inr, Sum.update_inr_comp_inl, Sum.update_inr_comp_inr]
  map_smul' _ u i c x := by
    skip
    letI := (@Sum.inl_injective ι ι').DecidableEq
    letI := (@Sum.inr_injective ι ι').DecidableEq
    cases i <;>
      simp only [MultilinearMap.map_smul, smul_apply, Sum.update_inl_comp_inl,
        Sum.update_inl_comp_inr, Sum.update_inr_comp_inl, Sum.update_inr_comp_inr]
#align multilinear_map.uncurry_sum MultilinearMap.uncurrySum
-/

/- warning: multilinear_map.uncurry_sum_aux_apply -> MultilinearMap.uncurrySum_aux_apply is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₂ : Type.{u3}} {M' : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_3 : AddCommMonoid.{u2} M'] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_6 : Module.{u1, u2} R M' (CommSemiring.toSemiring.{u1} R _inst_1) _inst_3] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] {ι' : Type.{u5}} (f : MultilinearMap.{u1, u2, max u5 u2 u3, u4} R ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (u : (Sum.{u4, u5} ι ι') -> M'), Eq.{succ u3} M₂ (coeFn.{max (succ (max u4 u5)) (succ u2) (succ u3), max (max (succ (max u4 u5)) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, max u4 u5} R (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7) (fun (f : MultilinearMap.{u1, u2, u3, max u4 u5} R (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7) => ((Sum.{u4, u5} ι ι') -> M') -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, max u4 u5} R (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7) (MultilinearMap.uncurrySum.{u1, u2, u3, u4, u5} R ι M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 ι' f) u) (coeFn.{max (succ u5) (succ u2) (succ u3), max (max (succ u5) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (f : MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) => (ι' -> M') -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (coeFn.{max (succ u4) (succ u2) (succ (max u5 u2 u3)), max (max (succ u4) (succ u2)) (succ (max u5 u2 u3))} (MultilinearMap.{u1, u2, max u5 u2 u3, u4} R ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (fun (f : MultilinearMap.{u1, u2, max u5 u2 u3, u4} R ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) => (ι -> M') -> (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7)) (MultilinearMap.hasCoeToFun.{u1, u2, max u5 u2 u3, u4} R ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) f (Function.comp.{succ u4, max (succ u4) (succ u5), succ u2} ι (Sum.{u4, u5} ι ι') M' u (Sum.inl.{u4, u5} ι ι'))) (Function.comp.{succ u5, max (succ u4) (succ u5), succ u2} ι' (Sum.{u4, u5} ι ι') M' u (Sum.inr.{u4, u5} ι ι')))
but is expected to have type
  forall {R : Type.{u2}} {ι : Type.{u5}} {M₂ : Type.{u4}} {M' : Type.{u3}} [_inst_1 : CommSemiring.{u2} R] [_inst_3 : AddCommMonoid.{u3} M'] [_inst_4 : AddCommMonoid.{u4} M₂] [_inst_6 : Module.{u2, u3} R M' (CommSemiring.toSemiring.{u2} R _inst_1) _inst_3] [_inst_7 : Module.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4] {ι' : Type.{u1}} (f : MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (u : (Sum.{u5, u1} ι ι') -> M'), Eq.{succ u4} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Sum.{u5, u1} ι ι') -> M') => M₂) u) (FunLike.coe.{max (max (max (succ u5) (succ u3)) (succ u4)) (succ u1), max (max (succ u5) (succ u3)) (succ u1), succ u4} (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24363 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) ((Sum.{u5, u1} ι ι') -> M') (fun (f : (Sum.{u5, u1} ι ι') -> M') => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Sum.{u5, u1} ι ι') -> M') => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.uncurrySum.{u2, u3, u4, u5, u1} R ι M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 ι' f) u) (FunLike.coe.{max (max (succ u3) (succ u4)) (succ u1), max (succ u3) (succ u1), succ u4} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : ι -> M') => MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24628 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Function.comp.{succ u5, max (succ u5) (succ u1), succ u3} ι (Sum.{u5, u1} ι ι') M' u (Sum.inl.{u5, u1} ι ι'))) (ι' -> M') (fun (f : ι' -> M') => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : ι' -> M') => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u2, u3, u4, u1} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (FunLike.coe.{max (max (max (succ u5) (succ u3)) (succ u4)) (succ u1), max (succ u5) (succ u3), max (max (succ u3) (succ u4)) (succ u1)} (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24615 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24628 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24628 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24628 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (ι -> M') (fun (f : ι -> M') => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : ι -> M') => MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24628 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) f (Function.comp.{succ u5, max (succ u5) (succ u1), succ u3} ι (Sum.{u5, u1} ι ι') M' u (Sum.inl.{u5, u1} ι ι'))) (Function.comp.{succ u1, max (succ u5) (succ u1), succ u3} ι' (Sum.{u5, u1} ι ι') M' u (Sum.inr.{u5, u1} ι ι')))
Case conversion may be inaccurate. Consider using '#align multilinear_map.uncurry_sum_aux_apply MultilinearMap.uncurrySum_aux_applyₓ'. -/
@[simp]
theorem uncurrySum_aux_apply
    (f : MultilinearMap R (fun x : ι => M') (MultilinearMap R (fun x : ι' => M') M₂))
    (u : Sum ι ι' → M') : f.uncurrySum u = f (u ∘ Sum.inl) (u ∘ Sum.inr) :=
  rfl
#align multilinear_map.uncurry_sum_aux_apply MultilinearMap.uncurrySum_aux_apply

variable (ι ι' R M₂ M')

#print MultilinearMap.currySumEquiv /-
/-- Linear equivalence between the space of multilinear maps on `Π i : ι ⊕ ι', M'` and the space
of multilinear maps on `Π i : ι, M'` taking values in the space of multilinear maps
on `Π i : ι', M'`. -/
def currySumEquiv :
    MultilinearMap R (fun x : Sum ι ι' => M') M₂ ≃ₗ[R]
      MultilinearMap R (fun x : ι => M') (MultilinearMap R (fun x : ι' => M') M₂)
    where
  toFun := currySum
  invFun := uncurrySum
  left_inv f := ext fun u => by simp
  right_inv f := by
    ext
    simp
  map_add' f g := by
    ext
    rfl
  map_smul' c f := by
    ext
    rfl
#align multilinear_map.curry_sum_equiv MultilinearMap.currySumEquiv
-/

variable {ι ι' R M₂ M'}

/- warning: multilinear_map.coe_curry_sum_equiv -> MultilinearMap.coe_currySumEquiv is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₂ : Type.{u3}} {M' : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_3 : AddCommMonoid.{u2} M'] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_6 : Module.{u1, u2} R M' (CommSemiring.toSemiring.{u1} R _inst_1) _inst_3] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] {ι' : Type.{u5}}, Eq.{max (succ (max (max u4 u5) u2 u3)) (succ (max u4 u2 u5 u2 u3))} ((MultilinearMap.{u1, u2, u3, max u4 u5} R (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7) -> (MultilinearMap.{u1, u2, max u5 u2 u3, u4} R ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)))) (coeFn.{max (succ (max (max u4 u5) u2 u3)) (succ (max u4 u2 u5 u2 u3)), max (succ (max (max u4 u5) u2 u3)) (succ (max u4 u2 u5 u2 u3))} (LinearEquiv.{u1, u1, max (max u4 u5) u2 u3, max u4 u2 u5 u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (MultilinearMap.currySumEquiv._proof_1.{u1} R _inst_1) (MultilinearMap.currySumEquiv._proof_2.{u1} R _inst_1) (MultilinearMap.{u1, u2, u3, max u4 u5} R (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u5 u2 u3, u4} R ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.addCommMonoid.{u1, u2, u3, max u4 u5} R (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u5 u2 u3, u4} R ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.module.{u2, u3, max u4 u5, u1, u1} (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_4.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, max u5 u2 u3, u4, u1, u1} ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.currySumEquiv._proof_5.{u1, u5, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 ι'))) (fun (_x : LinearEquiv.{u1, u1, max (max u4 u5) u2 u3, max u4 u2 u5 u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (MultilinearMap.currySumEquiv._proof_1.{u1} R _inst_1) (MultilinearMap.currySumEquiv._proof_2.{u1} R _inst_1) (MultilinearMap.{u1, u2, u3, max u4 u5} R (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u5 u2 u3, u4} R ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.addCommMonoid.{u1, u2, u3, max u4 u5} R (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u5 u2 u3, u4} R ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.module.{u2, u3, max u4 u5, u1, u1} (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_4.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, max u5 u2 u3, u4, u1, u1} ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.currySumEquiv._proof_5.{u1, u5, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 ι'))) => (MultilinearMap.{u1, u2, u3, max u4 u5} R (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7) -> (MultilinearMap.{u1, u2, max u5 u2 u3, u4} R ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)))) (LinearEquiv.hasCoeToFun.{u1, u1, max (max u4 u5) u2 u3, max u4 u2 u5 u2 u3} R R (MultilinearMap.{u1, u2, u3, max u4 u5} R (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u5 u2 u3, u4} R ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, max u4 u5} R (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u5 u2 u3, u4} R ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.module.{u2, u3, max u4 u5, u1, u1} (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_4.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, max u5 u2 u3, u4, u1, u1} ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.currySumEquiv._proof_5.{u1, u5, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 ι')) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (MultilinearMap.currySumEquiv._proof_1.{u1} R _inst_1) (MultilinearMap.currySumEquiv._proof_2.{u1} R _inst_1)) (MultilinearMap.currySumEquiv.{u1, u2, u3, u4, u5} R ι M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 ι')) (MultilinearMap.currySum.{u1, u2, u3, u4, u5} R ι M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 ι')
but is expected to have type
  forall {R : Type.{u2}} {ι : Type.{u5}} {M₂ : Type.{u4}} {M' : Type.{u3}} [_inst_1 : CommSemiring.{u2} R] [_inst_3 : AddCommMonoid.{u3} M'] [_inst_4 : AddCommMonoid.{u4} M₂] [_inst_6 : Module.{u2, u3} R M' (CommSemiring.toSemiring.{u2} R _inst_1) _inst_3] [_inst_7 : Module.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4] {ι' : Type.{u1}}, Eq.{max (max (max (succ u5) (succ u3)) (succ u4)) (succ u1)} (forall (ᾰ : MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7), (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) => MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) ᾰ) (FunLike.coe.{max (max (max (succ u5) (succ u3)) (succ u4)) (succ u1), max (max (max (succ u5) (succ u3)) (succ u4)) (succ u1), max (max (max (succ u5) (succ u3)) (succ u4)) (succ u1)} (LinearEquiv.{u2, u2, max (max (max u5 u1) u4) u3, max (max u5 (max u1 u4) u3) u3} R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, max u5 u1, u2, u2} (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, max (max u3 u4) u1, u5, u2, u2} ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Module.toMulActionWithZero.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))))))) (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (fun (_x : MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) => MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) _x) (SMulHomClass.toFunLike.{max (max (max u5 u3) u4) u1, u2, max (max (max u5 u3) u4) u1, max (max (max u5 u3) u4) u1} (LinearEquiv.{u2, u2, max (max (max u5 u1) u4) u3, max (max u5 (max u1 u4) u3) u3} R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, max u5 u1, u2, u2} (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, max (max u3 u4) u1, u5, u2, u2} ι (fun (x : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Module.toMulActionWithZero.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))))))) R (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (SMulZeroClass.toSMul.{u2, max (max (max u5 u3) u4) u1} R (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (AddMonoid.toZero.{max (max (max u5 u3) u4) u1} (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (AddCommMonoid.toAddMonoid.{max (max (max u5 u3) u4) u1} (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7))) (DistribSMul.toSMulZeroClass.{u2, max (max (max u5 u3) u4) u1} R (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (AddMonoid.toAddZeroClass.{max (max (max u5 u3) u4) u1} (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (AddCommMonoid.toAddMonoid.{max (max (max u5 u3) u4) u1} (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7))) (DistribMulAction.toDistribSMul.{u2, max (max (max u5 u3) u4) u1} R (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{max (max (max u5 u3) u4) u1} (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7)) (Module.toDistribMulAction.{u2, max (max (max u5 u3) u4) u1} R (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, max u5 u1, u2, u2} (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))))))) (SMulZeroClass.toSMul.{u2, max (max (max u5 u3) u4) u1} R (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (AddMonoid.toZero.{max (max (max u5 u3) u4) u1} (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (AddCommMonoid.toAddMonoid.{max (max (max u5 u3) u4) u1} (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))))) (DistribSMul.toSMulZeroClass.{u2, max (max (max u5 u3) u4) u1} R (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (AddMonoid.toAddZeroClass.{max (max (max u5 u3) u4) u1} (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (AddCommMonoid.toAddMonoid.{max (max (max u5 u3) u4) u1} (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))))) (DistribMulAction.toDistribSMul.{u2, max (max (max u5 u3) u4) u1} R (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{max (max (max u5 u3) u4) u1} (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))))) (Module.toDistribMulAction.{u2, max (max (max u5 u3) u4) u1} R (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, max (max u3 u4) u1, u5, u2, u2} ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Module.toMulActionWithZero.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))))))))))) (DistribMulActionHomClass.toSMulHomClass.{max (max (max u5 u3) u4) u1, u2, max (max (max u5 u3) u4) u1, max (max (max u5 u3) u4) u1} (LinearEquiv.{u2, u2, max (max (max u5 u1) u4) u3, max (max u5 (max u1 u4) u3) u3} R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, max u5 u1, u2, u2} (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, max (max u3 u4) u1, u5, u2, u2} ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Module.toMulActionWithZero.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))))))) R (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{max (max (max u5 u3) u4) u1} (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7)) (AddCommMonoid.toAddMonoid.{max (max (max u5 u3) u4) u1} (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))))) (Module.toDistribMulAction.{u2, max (max (max u5 u3) u4) u1} R (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, max u5 u1, u2, u2} (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (Module.toDistribMulAction.{u2, max (max (max u5 u3) u4) u1} R (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, max (max u3 u4) u1, u5, u2, u2} ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Module.toMulActionWithZero.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))))))) (SemilinearMapClass.distribMulActionHomClass.{u2, max (max (max u5 u3) u4) u1, max (max (max u5 u3) u4) u1, max (max (max u5 u3) u4) u1} R (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (LinearEquiv.{u2, u2, max (max (max u5 u1) u4) u3, max (max u5 (max u1 u4) u3) u3} R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, max u5 u1, u2, u2} (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, max (max u3 u4) u1, u5, u2, u2} ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Module.toMulActionWithZero.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))))))) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, max u5 u1, u2, u2} (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, max (max u3 u4) u1, u5, u2, u2} ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Module.toMulActionWithZero.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))))))) (SemilinearEquivClass.instSemilinearMapClass.{u2, u2, max (max (max u5 u3) u4) u1, max (max (max u5 u3) u4) u1, max (max (max u5 u3) u4) u1} R R (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (LinearEquiv.{u2, u2, max (max (max u5 u1) u4) u3, max (max u5 (max u1 u4) u3) u3} R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, max u5 u1, u2, u2} (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, max (max u3 u4) u1, u5, u2, u2} ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Module.toMulActionWithZero.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))))))) (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, max u5 u1, u2, u2} (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, max (max u3 u4) u1, u5, u2, u2} ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Module.toMulActionWithZero.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))))))) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (LinearEquiv.instSemilinearEquivClassLinearEquiv.{u2, u2, max (max (max u5 u3) u4) u1, max (max (max u5 u3) u4) u1} R R (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, max u5 u1, u2, u2} (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, max (max u3 u4) u1, u5, u2, u2} ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Module.toMulActionWithZero.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))))))) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))))))) (MultilinearMap.currySumEquiv.{u2, u3, u4, u5, u1} R ι M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 ι')) (MultilinearMap.currySum.{u2, u3, u4, u5, u1} R ι M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 ι')
Case conversion may be inaccurate. Consider using '#align multilinear_map.coe_curry_sum_equiv MultilinearMap.coe_currySumEquivₓ'. -/
@[simp]
theorem coe_currySumEquiv : ⇑(currySumEquiv R ι M₂ M' ι') = currySum :=
  rfl
#align multilinear_map.coe_curry_sum_equiv MultilinearMap.coe_currySumEquiv

/- warning: multilinear_map.coe_curr_sum_equiv_symm -> MultilinearMap.coe_currySumEquiv_symm is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {ι : Type.{u4}} {M₂ : Type.{u3}} {M' : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_3 : AddCommMonoid.{u2} M'] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_6 : Module.{u1, u2} R M' (CommSemiring.toSemiring.{u1} R _inst_1) _inst_3] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] {ι' : Type.{u5}}, Eq.{max (succ (max u4 u2 u5 u2 u3)) (succ (max (max u4 u5) u2 u3))} ((MultilinearMap.{u1, u2, max u5 u2 u3, u4} R ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) -> (MultilinearMap.{u1, u2, u3, max u4 u5} R (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7)) (coeFn.{max (succ (max u4 u2 u5 u2 u3)) (succ (max (max u4 u5) u2 u3)), max (succ (max u4 u2 u5 u2 u3)) (succ (max (max u4 u5) u2 u3))} (LinearEquiv.{u1, u1, max u4 u2 u5 u2 u3, max (max u4 u5) u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (MultilinearMap.currySumEquiv._proof_2.{u1} R _inst_1) (MultilinearMap.currySumEquiv._proof_1.{u1} R _inst_1) (MultilinearMap.{u1, u2, max u5 u2 u3, u4} R ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.{u1, u2, u3, max u4 u5} R (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u5 u2 u3, u4} R ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.addCommMonoid.{u1, u2, u3, max u4 u5} R (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7) (MultilinearMap.module.{u2, max u5 u2 u3, u4, u1, u1} ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.currySumEquiv._proof_5.{u1, u5, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 ι')) (MultilinearMap.module.{u2, u3, max u4 u5, u1, u1} (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_4.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (fun (_x : LinearEquiv.{u1, u1, max u4 u2 u5 u2 u3, max (max u4 u5) u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (MultilinearMap.currySumEquiv._proof_2.{u1} R _inst_1) (MultilinearMap.currySumEquiv._proof_1.{u1} R _inst_1) (MultilinearMap.{u1, u2, max u5 u2 u3, u4} R ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.{u1, u2, u3, max u4 u5} R (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u5 u2 u3, u4} R ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.addCommMonoid.{u1, u2, u3, max u4 u5} R (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7) (MultilinearMap.module.{u2, max u5 u2 u3, u4, u1, u1} ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.currySumEquiv._proof_5.{u1, u5, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 ι')) (MultilinearMap.module.{u2, u3, max u4 u5, u1, u1} (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_4.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) => (MultilinearMap.{u1, u2, max u5 u2 u3, u4} R ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) -> (MultilinearMap.{u1, u2, u3, max u4 u5} R (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7)) (LinearEquiv.hasCoeToFun.{u1, u1, max u4 u2 u5 u2 u3, max (max u4 u5) u2 u3} R R (MultilinearMap.{u1, u2, max u5 u2 u3, u4} R ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.{u1, u2, u3, max u4 u5} R (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, max u5 u2 u3, u4} R ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.addCommMonoid.{u1, u2, u3, max u4 u5} R (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7) (MultilinearMap.module.{u2, max u5 u2 u3, u4, u1, u1} ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.currySumEquiv._proof_5.{u1, u5, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 ι')) (MultilinearMap.module.{u2, u3, max u4 u5, u1, u1} (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_4.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (MultilinearMap.currySumEquiv._proof_2.{u1} R _inst_1) (MultilinearMap.currySumEquiv._proof_1.{u1} R _inst_1)) (LinearEquiv.symm.{u1, u1, max (max u4 u5) u2 u3, max u4 u2 u5 u2 u3} R R (MultilinearMap.{u1, u2, u3, max u4 u5} R (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u5 u2 u3, u4} R ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, max u4 u5} R (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u5 u2 u3, u4} R ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.module.{u2, u3, max u4 u5, u1, u1} (Sum.{u4, u5} ι ι') (fun (x : Sum.{u4, u5} ι ι') => M') M₂ (fun (i : Sum.{u4, u5} ι ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Sum.{u4, u5} ι ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_4.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, max u5 u2 u3, u4, u1, u1} ι (fun (x : ι) => M') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, u5} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι) => _inst_6) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, u3, u5, u1, u1} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (MultilinearMap.currySumEquiv._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.currySumEquiv._proof_5.{u1, u5, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 ι')) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (MultilinearMap.currySumEquiv._proof_1.{u1} R _inst_1) (MultilinearMap.currySumEquiv._proof_2.{u1} R _inst_1) (MultilinearMap.currySumEquiv.{u1, u2, u3, u4, u5} R ι M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 ι'))) (MultilinearMap.uncurrySum.{u1, u2, u3, u4, u5} R ι M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 ι')
but is expected to have type
  forall {R : Type.{u2}} {ι : Type.{u5}} {M₂ : Type.{u4}} {M' : Type.{u3}} [_inst_1 : CommSemiring.{u2} R] [_inst_3 : AddCommMonoid.{u3} M'] [_inst_4 : AddCommMonoid.{u4} M₂] [_inst_6 : Module.{u2, u3} R M' (CommSemiring.toSemiring.{u2} R _inst_1) _inst_3] [_inst_7 : Module.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4] {ι' : Type.{u1}}, Eq.{max (max (max (succ u5) (succ u3)) (succ u4)) (succ u1)} (forall (ᾰ : MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))), (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) => MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) ᾰ) (FunLike.coe.{max (max (max (succ u5) (succ u3)) (succ u4)) (succ u1), max (max (max (succ u5) (succ u3)) (succ u4)) (succ u1), max (max (max (succ u5) (succ u3)) (succ u4)) (succ u1)} (LinearEquiv.{u2, u2, max (max (max u5 u3) u4) u1, max (max (max u5 u3) u4) u1} R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, max (max u3 u4) u1, u5, u2, u2} ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Module.toMulActionWithZero.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, max u5 u1, u2, u2} (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (fun (_x : MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) => MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) _x) (SMulHomClass.toFunLike.{max (max (max u5 u3) u4) u1, u2, max (max (max u5 u3) u4) u1, max (max (max u5 u3) u4) u1} (LinearEquiv.{u2, u2, max (max (max u5 u3) u4) u1, max (max (max u5 u3) u4) u1} R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, max (max u3 u4) u1, u5, u2, u2} ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Module.toMulActionWithZero.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, max u5 u1, u2, u2} (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) R (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (SMulZeroClass.toSMul.{u2, max (max (max u5 u3) u4) u1} R (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (AddMonoid.toZero.{max (max (max u5 u3) u4) u1} (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (AddCommMonoid.toAddMonoid.{max (max (max u5 u3) u4) u1} (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))))) (DistribSMul.toSMulZeroClass.{u2, max (max (max u5 u3) u4) u1} R (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (AddMonoid.toAddZeroClass.{max (max (max u5 u3) u4) u1} (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (AddCommMonoid.toAddMonoid.{max (max (max u5 u3) u4) u1} (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))))) (DistribMulAction.toDistribSMul.{u2, max (max (max u5 u3) u4) u1} R (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{max (max (max u5 u3) u4) u1} (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))))) (Module.toDistribMulAction.{u2, max (max (max u5 u3) u4) u1} R (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, max (max u3 u4) u1, u5, u2, u2} ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Module.toMulActionWithZero.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))))))))))) (SMulZeroClass.toSMul.{u2, max (max (max u5 u3) u4) u1} R (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (AddMonoid.toZero.{max (max (max u5 u3) u4) u1} (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (AddCommMonoid.toAddMonoid.{max (max (max u5 u3) u4) u1} (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7))) (DistribSMul.toSMulZeroClass.{u2, max (max (max u5 u3) u4) u1} R (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (AddMonoid.toAddZeroClass.{max (max (max u5 u3) u4) u1} (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (AddCommMonoid.toAddMonoid.{max (max (max u5 u3) u4) u1} (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7))) (DistribMulAction.toDistribSMul.{u2, max (max (max u5 u3) u4) u1} R (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{max (max (max u5 u3) u4) u1} (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7)) (Module.toDistribMulAction.{u2, max (max (max u5 u3) u4) u1} R (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, max u5 u1, u2, u2} (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))))))) (DistribMulActionHomClass.toSMulHomClass.{max (max (max u5 u3) u4) u1, u2, max (max (max u5 u3) u4) u1, max (max (max u5 u3) u4) u1} (LinearEquiv.{u2, u2, max (max (max u5 u3) u4) u1, max (max (max u5 u3) u4) u1} R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, max (max u3 u4) u1, u5, u2, u2} ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Module.toMulActionWithZero.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, max u5 u1, u2, u2} (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) R (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MonoidWithZero.toMonoid.{u2} R (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (AddCommMonoid.toAddMonoid.{max (max (max u5 u3) u4) u1} (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))))) (AddCommMonoid.toAddMonoid.{max (max (max u5 u3) u4) u1} (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7)) (Module.toDistribMulAction.{u2, max (max (max u5 u3) u4) u1} R (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, max (max u3 u4) u1, u5, u2, u2} ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Module.toMulActionWithZero.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))))))) (Module.toDistribMulAction.{u2, max (max (max u5 u3) u4) u1} R (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, max u5 u1, u2, u2} (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (SemilinearMapClass.distribMulActionHomClass.{u2, max (max (max u5 u3) u4) u1, max (max (max u5 u3) u4) u1, max (max (max u5 u3) u4) u1} R (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (LinearEquiv.{u2, u2, max (max (max u5 u3) u4) u1, max (max (max u5 u3) u4) u1} R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, max (max u3 u4) u1, u5, u2, u2} ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Module.toMulActionWithZero.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, max u5 u1, u2, u2} (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, max (max u3 u4) u1, u5, u2, u2} ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Module.toMulActionWithZero.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, max u5 u1, u2, u2} (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (SemilinearEquivClass.instSemilinearMapClass.{u2, u2, max (max (max u5 u3) u4) u1, max (max (max u5 u3) u4) u1, max (max (max u5 u3) u4) u1} R R (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (LinearEquiv.{u2, u2, max (max (max u5 u3) u4) u1, max (max (max u5 u3) u4) u1} R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, max (max u3 u4) u1, u5, u2, u2} ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Module.toMulActionWithZero.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, max u5 u1, u2, u2} (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, max (max u3 u4) u1, u5, u2, u2} ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Module.toMulActionWithZero.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, max u5 u1, u2, u2} (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (LinearEquiv.instSemilinearEquivClassLinearEquiv.{u2, u2, max (max (max u5 u3) u4) u1, max (max (max u5 u3) u4) u1} R R (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, max (max u3 u4) u1, u5, u2, u2} ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24802 : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Module.toMulActionWithZero.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, max u5 u1, u2, u2} (Sum.{u5, u1} ι ι') (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24788 : Sum.{u5, u1} ι ι') => M') M₂ (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))))))) (LinearEquiv.symm.{u2, u2, max (max (max u5 u3) u4) u1, max (max (max u5 u3) u4) u1} R R (MultilinearMap.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.{u2, u3, max (max u1 u4) u3, u5} R ι (fun (x : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, max u5 u1} R (Sum.{u5, u1} ι ι') (fun (x : Sum.{u5, u1} ι ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u2, u3, max (max u3 u4) u1, u5} R ι (fun (x : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, max u5 u1, u2, u2} (Sum.{u5, u1} ι ι') (fun (x : Sum.{u5, u1} ι ι') => M') M₂ (fun (i : Sum.{u5, u1} ι ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : Sum.{u5, u1} ι ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, max (max u3 u4) u1, u5, u2, u2} ι (fun (x : ι) => M') (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (fun (i : ι) => _inst_3) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (Module.toMulActionWithZero.{u2, max (max u3 u4) u1} R (MultilinearMap.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (CommSemiring.toSemiring.{u2} R _inst_1) (MultilinearMap.addCommMonoid.{u2, u3, u4, u1} R ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_3) _inst_4 (fun (i : ι') => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u3, u4, u1, u2, u2} ι' (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.24815 : ι') => M') M₂ (fun (i : ι') => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u2} R _inst_1) (CommSemiring.toSemiring.{u2} R _inst_1) (fun (i : ι') => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u2, u4} R M₂ (CommSemiring.toCommMonoid.{u2} R _inst_1) (MulActionWithZero.toMulAction.{u2, u4} R M₂ (Semiring.toMonoidWithZero.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (AddMonoid.toZero.{u4} M₂ (AddCommMonoid.toAddMonoid.{u4} M₂ _inst_4)) (Module.toMulActionWithZero.{u2, u4} R M₂ (CommSemiring.toSemiring.{u2} R _inst_1) _inst_4 _inst_7)))))))) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHom.id.{u2} R (Semiring.toNonAssocSemiring.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1))) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (RingHomInvPair.ids.{u2} R (CommSemiring.toSemiring.{u2} R _inst_1)) (MultilinearMap.currySumEquiv.{u2, u3, u4, u5, u1} R ι M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 ι'))) (MultilinearMap.uncurrySum.{u2, u3, u4, u5, u1} R ι M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 ι')
Case conversion may be inaccurate. Consider using '#align multilinear_map.coe_curr_sum_equiv_symm MultilinearMap.coe_currySumEquiv_symmₓ'. -/
@[simp]
theorem coe_currySumEquiv_symm : ⇑(currySumEquiv R ι M₂ M' ι').symm = uncurrySum :=
  rfl
#align multilinear_map.coe_curr_sum_equiv_symm MultilinearMap.coe_currySumEquiv_symm

variable (R M₂ M')

/- warning: multilinear_map.curry_fin_finset -> MultilinearMap.curryFinFinset is a dubious translation:
lean 3 declaration is
  forall (R : Type.{u1}) (M₂ : Type.{u3}) (M' : Type.{u2}) [_inst_1 : CommSemiring.{u1} R] [_inst_3 : AddCommMonoid.{u2} M'] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_6 : Module.{u1, u2} R M' (CommSemiring.toSemiring.{u1} R _inst_1) _inst_3] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] {k : Nat} {l : Nat} {n : Nat} {s : Finset.{0} (Fin n)}, (Eq.{1} Nat (Finset.card.{0} (Fin n) s) k) -> (Eq.{1} Nat (Finset.card.{0} (Fin n) (HasCompl.compl.{0} (Finset.{0} (Fin n)) (BooleanAlgebra.toHasCompl.{0} (Finset.{0} (Fin n)) (Finset.booleanAlgebra.{0} (Fin n) (Fin.fintype n) (fun (a : Fin n) (b : Fin n) => Fin.decidableEq n a b))) s)) l) -> (LinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (MultilinearMap.curryFinFinset._proof_1.{u1} R _inst_1) (MultilinearMap.curryFinFinset._proof_2.{u1} R _inst_1) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (x : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_4.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.curryFinFinset._proof_5.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 l)))
but is expected to have type
  forall (R : Type.{u1}) (M₂ : Type.{u3}) (M' : Type.{u2}) [_inst_1 : CommSemiring.{u1} R] [_inst_3 : AddCommMonoid.{u2} M'] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_6 : Module.{u1, u2} R M' (CommSemiring.toSemiring.{u1} R _inst_1) _inst_3] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] {k : Nat} {l : Nat} {n : Nat} {s : Finset.{0} (Fin n)}, (Eq.{1} Nat (Finset.card.{0} (Fin n) s) k) -> (Eq.{1} Nat (Finset.card.{0} (Fin n) (HasCompl.compl.{0} (Finset.{0} (Fin n)) (BooleanAlgebra.toHasCompl.{0} (Finset.{0} (Fin n)) (Finset.booleanAlgebra.{0} (Fin n) (Fin.fintype n) (fun (a : Fin n) (b : Fin n) => instDecidableEqFin n a b))) s)) l) -> (LinearEquiv.{u1, u1, max u3 u2, max u3 u2} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))))
Case conversion may be inaccurate. Consider using '#align multilinear_map.curry_fin_finset MultilinearMap.curryFinFinsetₓ'. -/
/-- If `s : finset (fin n)` is a finite set of cardinality `k` and its complement has cardinality
`l`, then the space of multilinear maps on `λ i : fin n, M'` is isomorphic to the space of
multilinear maps on `λ i : fin k, M'` taking values in the space of multilinear maps
on `λ i : fin l, M'`. -/
def curryFinFinset {k l n : ℕ} {s : Finset (Fin n)} (hk : s.card = k) (hl : sᶜ.card = l) :
    MultilinearMap R (fun x : Fin n => M') M₂ ≃ₗ[R]
      MultilinearMap R (fun x : Fin k => M') (MultilinearMap R (fun x : Fin l => M') M₂) :=
  (domDomCongrLinearEquiv M' M₂ R R (finSumEquivOfFinset hk hl).symm).trans
    (currySumEquiv R (Fin k) M₂ M' (Fin l))
#align multilinear_map.curry_fin_finset MultilinearMap.curryFinFinset

variable {R M₂ M'}

/- warning: multilinear_map.curry_fin_finset_apply -> MultilinearMap.curryFinFinset_apply is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M₂ : Type.{u3}} {M' : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_3 : AddCommMonoid.{u2} M'] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_6 : Module.{u1, u2} R M' (CommSemiring.toSemiring.{u1} R _inst_1) _inst_3] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] {k : Nat} {l : Nat} {n : Nat} {s : Finset.{0} (Fin n)} (hk : Eq.{1} Nat (Finset.card.{0} (Fin n) s) k) (hl : Eq.{1} Nat (Finset.card.{0} (Fin n) (HasCompl.compl.{0} (Finset.{0} (Fin n)) (BooleanAlgebra.toHasCompl.{0} (Finset.{0} (Fin n)) (Finset.booleanAlgebra.{0} (Fin n) (Fin.fintype n) (fun (a : Fin n) (b : Fin n) => Fin.decidableEq n a b))) s)) l) (f : MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (mk : (Fin k) -> M') (ml : (Fin l) -> M'), Eq.{succ u3} M₂ (coeFn.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (f : MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) => ((Fin l) -> M') -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (coeFn.{max 1 (succ u2) (succ (max u2 u3)), max (succ u2) (succ (max u2 u3))} (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (fun (f : MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) => ((Fin k) -> M') -> (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7)) (MultilinearMap.hasCoeToFun.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (coeFn.{succ (max u2 u3), succ (max u2 u3)} (LinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (MultilinearMap.curryFinFinset._proof_1.{u1} R _inst_1) (MultilinearMap.curryFinFinset._proof_2.{u1} R _inst_1) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (x : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_4.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.curryFinFinset._proof_5.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 l))) (fun (_x : LinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (MultilinearMap.curryFinFinset._proof_1.{u1} R _inst_1) (MultilinearMap.curryFinFinset._proof_2.{u1} R _inst_1) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (x : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_4.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.curryFinFinset._proof_5.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 l))) => (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) -> (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)))) (LinearEquiv.hasCoeToFun.{u1, u1, max u2 u3, max u2 u3} R R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (x : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_4.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.curryFinFinset._proof_5.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 l)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (MultilinearMap.curryFinFinset._proof_1.{u1} R _inst_1) (MultilinearMap.curryFinFinset._proof_2.{u1} R _inst_1)) (MultilinearMap.curryFinFinset.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 k l n s hk hl) f) mk) ml) (coeFn.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (fun (f : MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) => ((Fin n) -> M') -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) f (fun (i : Fin n) => Sum.elim.{0, 0, succ u2} (Fin k) (Fin l) M' mk ml (coeFn.{1, 1} (Equiv.{1, 1} (Fin n) (Sum.{0, 0} (Fin k) (Fin l))) (fun (_x : Equiv.{1, 1} (Fin n) (Sum.{0, 0} (Fin k) (Fin l))) => (Fin n) -> (Sum.{0, 0} (Fin k) (Fin l))) (Equiv.hasCoeToFun.{1, 1} (Fin n) (Sum.{0, 0} (Fin k) (Fin l))) (Equiv.symm.{1, 1} (Sum.{0, 0} (Fin k) (Fin l)) (Fin n) (finSumEquivOfFinset.{0} (Fin n) (fun (a : Fin n) (b : Fin n) => Fin.decidableEq n a b) (Fin.fintype n) (Fin.linearOrder n) k l s hk hl)) i)))
but is expected to have type
  forall {R : Type.{u1}} {M₂ : Type.{u3}} {M' : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_3 : AddCommMonoid.{u2} M'] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_6 : Module.{u1, u2} R M' (CommSemiring.toSemiring.{u1} R _inst_1) _inst_3] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] {k : Nat} {l : Nat} {n : Nat} {s : Finset.{0} (Fin n)} (hk : Eq.{1} Nat (Finset.card.{0} (Fin n) s) k) (hl : Eq.{1} Nat (Finset.card.{0} (Fin n) (HasCompl.compl.{0} (Finset.{0} (Fin n)) (BooleanAlgebra.toHasCompl.{0} (Finset.{0} (Fin n)) (Finset.booleanAlgebra.{0} (Fin n) (Fin.fintype n) (fun (a : Fin n) (b : Fin n) => instDecidableEqFin n a b))) s)) l) (f : MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (mk : (Fin k) -> M') (ml : (Fin l) -> M'), Eq.{succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin l) -> M') => M₂) ml) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin k) -> M') => MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) mk) ((Fin l) -> M') (fun (f : (Fin l) -> M') => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin l) -> M') => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (FunLike.coe.{max (succ u2) (succ u3), succ u2, max (succ u2) (succ u3)} ((fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) => MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) f) ((Fin k) -> M') (fun (f : (Fin k) -> M') => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin k) -> M') => MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (FunLike.coe.{max (succ u2) (succ u3), max (succ u2) (succ u3), max (succ u2) (succ u3)} (LinearEquiv.{u1, u1, max u3 u2, max u3 u2} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (fun (_x : MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) => MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) _x) (SMulHomClass.toFunLike.{max u2 u3, u1, max u2 u3, max u2 u3} (LinearEquiv.{u1, u1, max u3 u2, max u3 u2} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))))))) R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (SMulZeroClass.toSMul.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (AddMonoid.toZero.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7))) (DistribSMul.toSMulZeroClass.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (AddMonoid.toAddZeroClass.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7))) (DistribMulAction.toDistribSMul.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7)) (Module.toDistribMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (SMulZeroClass.toSMul.{u1, max u2 u3} R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (AddMonoid.toZero.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))))) (DistribSMul.toSMulZeroClass.{u1, max u2 u3} R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (AddMonoid.toAddZeroClass.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))))) (DistribMulAction.toDistribSMul.{u1, max u2 u3} R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))) (Module.toDistribMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u3, u1, max u2 u3, max u2 u3} (LinearEquiv.{u1, u1, max u3 u2, max u3 u2} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))))))) R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7)) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))) (Module.toDistribMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (Module.toDistribMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))))))) (SemilinearMapClass.distribMulActionHomClass.{u1, max u2 u3, max u2 u3, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (LinearEquiv.{u1, u1, max u3 u2, max u3 u2} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))))))) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (SemilinearEquivClass.instSemilinearMapClass.{u1, u1, max u2 u3, max u2 u3, max u2 u3} R R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (LinearEquiv.{u1, u1, max u3 u2, max u3 u2} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))))))) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (LinearEquiv.instSemilinearEquivClassLinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))))))) (MultilinearMap.curryFinFinset.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 k l n s hk hl) f) mk) ml) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25434 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) ((Fin n) -> M') (fun (f : (Fin n) -> M') => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin n) -> M') => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) f (fun (i : Fin n) => Sum.elim.{0, 0, succ u2} (Fin k) (Fin l) M' mk ml (FunLike.coe.{1, 1, 1} (Equiv.{1, 1} (Fin n) (Sum.{0, 0} (Fin k) (Fin l))) (Fin n) (fun (_x : Fin n) => (fun (x._@.Mathlib.Logic.Equiv.Defs._hyg.812 : Fin n) => Sum.{0, 0} (Fin k) (Fin l)) _x) (Equiv.instFunLikeEquiv.{1, 1} (Fin n) (Sum.{0, 0} (Fin k) (Fin l))) (Equiv.symm.{1, 1} (Sum.{0, 0} (Fin k) (Fin l)) (Fin n) (finSumEquivOfFinset.{0} (Fin n) (fun (a : Fin n) (b : Fin n) => instDecidableEqFin n a b) (Fin.fintype n) (Fin.instLinearOrderFin n) k l s hk hl)) i)))
Case conversion may be inaccurate. Consider using '#align multilinear_map.curry_fin_finset_apply MultilinearMap.curryFinFinset_applyₓ'. -/
@[simp]
theorem curryFinFinset_apply {k l n : ℕ} {s : Finset (Fin n)} (hk : s.card = k) (hl : sᶜ.card = l)
    (f : MultilinearMap R (fun x : Fin n => M') M₂) (mk : Fin k → M') (ml : Fin l → M') :
    curryFinFinset R M₂ M' hk hl f mk ml =
      f fun i => Sum.elim mk ml ((finSumEquivOfFinset hk hl).symm i) :=
  rfl
#align multilinear_map.curry_fin_finset_apply MultilinearMap.curryFinFinset_apply

/- warning: multilinear_map.curry_fin_finset_symm_apply -> MultilinearMap.curryFinFinset_symm_apply is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M₂ : Type.{u3}} {M' : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_3 : AddCommMonoid.{u2} M'] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_6 : Module.{u1, u2} R M' (CommSemiring.toSemiring.{u1} R _inst_1) _inst_3] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] {k : Nat} {l : Nat} {n : Nat} {s : Finset.{0} (Fin n)} (hk : Eq.{1} Nat (Finset.card.{0} (Fin n) s) k) (hl : Eq.{1} Nat (Finset.card.{0} (Fin n) (HasCompl.compl.{0} (Finset.{0} (Fin n)) (BooleanAlgebra.toHasCompl.{0} (Finset.{0} (Fin n)) (Finset.booleanAlgebra.{0} (Fin n) (Fin.fintype n) (fun (a : Fin n) (b : Fin n) => Fin.decidableEq n a b))) s)) l) (f : MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (m : (Fin n) -> M'), Eq.{succ u3} M₂ (coeFn.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (fun (f : MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) => ((Fin n) -> M') -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (coeFn.{succ (max u2 u3), succ (max u2 u3)} (LinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (MultilinearMap.curryFinFinset._proof_2.{u1} R _inst_1) (MultilinearMap.curryFinFinset._proof_1.{u1} R _inst_1) (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.module.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.curryFinFinset._proof_5.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 l)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (x : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_4.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (fun (_x : LinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (MultilinearMap.curryFinFinset._proof_2.{u1} R _inst_1) (MultilinearMap.curryFinFinset._proof_1.{u1} R _inst_1) (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.module.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.curryFinFinset._proof_5.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 l)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (x : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_4.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) => (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) -> (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7)) (LinearEquiv.hasCoeToFun.{u1, u1, max u2 u3, max u2 u3} R R (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.module.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.curryFinFinset._proof_5.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 l)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (x : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_4.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (MultilinearMap.curryFinFinset._proof_2.{u1} R _inst_1) (MultilinearMap.curryFinFinset._proof_1.{u1} R _inst_1)) (LinearEquiv.symm.{u1, u1, max u2 u3, max u2 u3} R R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (x : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_4.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.curryFinFinset._proof_5.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 l)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (MultilinearMap.curryFinFinset._proof_1.{u1} R _inst_1) (MultilinearMap.curryFinFinset._proof_2.{u1} R _inst_1) (MultilinearMap.curryFinFinset.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 k l n s hk hl)) f) m) (coeFn.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (f : MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) => ((Fin l) -> M') -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (coeFn.{max 1 (succ u2) (succ (max u2 u3)), max (succ u2) (succ (max u2 u3))} (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (fun (f : MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) => ((Fin k) -> M') -> (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7)) (MultilinearMap.hasCoeToFun.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) f (fun (i : Fin k) => m (coeFn.{1, 1} (Equiv.{1, 1} (Sum.{0, 0} (Fin k) (Fin l)) (Fin n)) (fun (_x : Equiv.{1, 1} (Sum.{0, 0} (Fin k) (Fin l)) (Fin n)) => (Sum.{0, 0} (Fin k) (Fin l)) -> (Fin n)) (Equiv.hasCoeToFun.{1, 1} (Sum.{0, 0} (Fin k) (Fin l)) (Fin n)) (finSumEquivOfFinset.{0} (Fin n) (fun (a : Fin n) (b : Fin n) => Fin.decidableEq n a b) (Fin.fintype n) (Fin.linearOrder n) k l s hk hl) (Sum.inl.{0, 0} (Fin k) (Fin l) i)))) (fun (i : Fin l) => m (coeFn.{1, 1} (Equiv.{1, 1} (Sum.{0, 0} (Fin k) (Fin l)) (Fin n)) (fun (_x : Equiv.{1, 1} (Sum.{0, 0} (Fin k) (Fin l)) (Fin n)) => (Sum.{0, 0} (Fin k) (Fin l)) -> (Fin n)) (Equiv.hasCoeToFun.{1, 1} (Sum.{0, 0} (Fin k) (Fin l)) (Fin n)) (finSumEquivOfFinset.{0} (Fin n) (fun (a : Fin n) (b : Fin n) => Fin.decidableEq n a b) (Fin.fintype n) (Fin.linearOrder n) k l s hk hl) (Sum.inr.{0, 0} (Fin k) (Fin l) i))))
but is expected to have type
  forall {R : Type.{u1}} {M₂ : Type.{u3}} {M' : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_3 : AddCommMonoid.{u2} M'] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_6 : Module.{u1, u2} R M' (CommSemiring.toSemiring.{u1} R _inst_1) _inst_3] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] {k : Nat} {l : Nat} {n : Nat} {s : Finset.{0} (Fin n)} (hk : Eq.{1} Nat (Finset.card.{0} (Fin n) s) k) (hl : Eq.{1} Nat (Finset.card.{0} (Fin n) (HasCompl.compl.{0} (Finset.{0} (Fin n)) (BooleanAlgebra.toHasCompl.{0} (Finset.{0} (Fin n)) (Finset.booleanAlgebra.{0} (Fin n) (Fin.fintype n) (fun (a : Fin n) (b : Fin n) => instDecidableEqFin n a b))) s)) l) (f : MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (m : (Fin n) -> M'), Eq.{succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin n) -> M') => M₂) m) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} ((fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) => MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) f) ((Fin n) -> M') (fun (f : (Fin n) -> M') => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin n) -> M') => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (FunLike.coe.{max (succ u2) (succ u3), max (succ u2) (succ u3), max (succ u2) (succ u3)} (LinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (fun (_x : MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) => MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) _x) (SMulHomClass.toFunLike.{max u2 u3, u1, max u2 u3, max u2 u3} (LinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (SMulZeroClass.toSMul.{u1, max u2 u3} R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (AddMonoid.toZero.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))))) (DistribSMul.toSMulZeroClass.{u1, max u2 u3} R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (AddMonoid.toAddZeroClass.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))))) (DistribMulAction.toDistribSMul.{u1, max u2 u3} R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))) (Module.toDistribMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))))))) (SMulZeroClass.toSMul.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (AddMonoid.toZero.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7))) (DistribSMul.toSMulZeroClass.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (AddMonoid.toAddZeroClass.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7))) (DistribMulAction.toDistribSMul.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7)) (Module.toDistribMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u3, u1, max u2 u3, max u2 u3} (LinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7)) (Module.toDistribMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))))))) (Module.toDistribMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (SemilinearMapClass.distribMulActionHomClass.{u1, max u2 u3, max u2 u3, max u2 u3} R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (LinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (SemilinearEquivClass.instSemilinearMapClass.{u1, u1, max u2 u3, max u2 u3, max u2 u3} R R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (LinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (LinearEquiv.instSemilinearEquivClassLinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))))))) (LinearEquiv.symm.{u1, u1, max u2 u3, max u2 u3} R R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.curryFinFinset.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 k l n s hk hl)) f) m) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin k) -> M') => MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25585 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => m (FunLike.coe.{1, 1, 1} (Equiv.{1, 1} (Sum.{0, 0} (Fin k) (Fin l)) (Fin n)) (Sum.{0, 0} (Fin k) (Fin l)) (fun (a : Sum.{0, 0} (Fin k) (Fin l)) => (fun (x._@.Mathlib.Logic.Equiv.Defs._hyg.812 : Sum.{0, 0} (Fin k) (Fin l)) => Fin n) a) (Equiv.instFunLikeEquiv.{1, 1} (Sum.{0, 0} (Fin k) (Fin l)) (Fin n)) (finSumEquivOfFinset.{0} (Fin n) (fun (a : Fin n) (b : Fin n) => instDecidableEqFin n a b) (Fin.fintype n) (Fin.instLinearOrderFin n) k l s hk hl) (Sum.inl.{0, 0} (Fin k) (Fin l) i)))) ((Fin l) -> M') (fun (f : (Fin l) -> M') => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin l) -> M') => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (FunLike.coe.{max (succ u2) (succ u3), succ u2, max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25571 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25585 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25585 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25585 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) ((Fin k) -> M') (fun (f : (Fin k) -> M') => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin k) -> M') => MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25585 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) f (fun (i : Fin k) => m (FunLike.coe.{1, 1, 1} (Equiv.{1, 1} (Sum.{0, 0} (Fin k) (Fin l)) (Fin n)) (Sum.{0, 0} (Fin k) (Fin l)) (fun (_x : Sum.{0, 0} (Fin k) (Fin l)) => (fun (x._@.Mathlib.Logic.Equiv.Defs._hyg.812 : Sum.{0, 0} (Fin k) (Fin l)) => Fin n) _x) (Equiv.instFunLikeEquiv.{1, 1} (Sum.{0, 0} (Fin k) (Fin l)) (Fin n)) (finSumEquivOfFinset.{0} (Fin n) (fun (a : Fin n) (b : Fin n) => instDecidableEqFin n a b) (Fin.fintype n) (Fin.instLinearOrderFin n) k l s hk hl) (Sum.inl.{0, 0} (Fin k) (Fin l) i)))) (fun (i : Fin l) => m (FunLike.coe.{1, 1, 1} (Equiv.{1, 1} (Sum.{0, 0} (Fin k) (Fin l)) (Fin n)) (Sum.{0, 0} (Fin k) (Fin l)) (fun (_x : Sum.{0, 0} (Fin k) (Fin l)) => (fun (x._@.Mathlib.Logic.Equiv.Defs._hyg.812 : Sum.{0, 0} (Fin k) (Fin l)) => Fin n) _x) (Equiv.instFunLikeEquiv.{1, 1} (Sum.{0, 0} (Fin k) (Fin l)) (Fin n)) (finSumEquivOfFinset.{0} (Fin n) (fun (a : Fin n) (b : Fin n) => instDecidableEqFin n a b) (Fin.fintype n) (Fin.instLinearOrderFin n) k l s hk hl) (Sum.inr.{0, 0} (Fin k) (Fin l) i))))
Case conversion may be inaccurate. Consider using '#align multilinear_map.curry_fin_finset_symm_apply MultilinearMap.curryFinFinset_symm_applyₓ'. -/
@[simp]
theorem curryFinFinset_symm_apply {k l n : ℕ} {s : Finset (Fin n)} (hk : s.card = k)
    (hl : sᶜ.card = l)
    (f : MultilinearMap R (fun x : Fin k => M') (MultilinearMap R (fun x : Fin l => M') M₂))
    (m : Fin n → M') :
    (curryFinFinset R M₂ M' hk hl).symm f m =
      f (fun i => m <| finSumEquivOfFinset hk hl (Sum.inl i)) fun i =>
        m <| finSumEquivOfFinset hk hl (Sum.inr i) :=
  rfl
#align multilinear_map.curry_fin_finset_symm_apply MultilinearMap.curryFinFinset_symm_apply

/- warning: multilinear_map.curry_fin_finset_symm_apply_piecewise_const -> MultilinearMap.curryFinFinset_symm_apply_piecewise_const is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M₂ : Type.{u3}} {M' : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_3 : AddCommMonoid.{u2} M'] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_6 : Module.{u1, u2} R M' (CommSemiring.toSemiring.{u1} R _inst_1) _inst_3] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] {k : Nat} {l : Nat} {n : Nat} {s : Finset.{0} (Fin n)} (hk : Eq.{1} Nat (Finset.card.{0} (Fin n) s) k) (hl : Eq.{1} Nat (Finset.card.{0} (Fin n) (HasCompl.compl.{0} (Finset.{0} (Fin n)) (BooleanAlgebra.toHasCompl.{0} (Finset.{0} (Fin n)) (Finset.booleanAlgebra.{0} (Fin n) (Fin.fintype n) (fun (a : Fin n) (b : Fin n) => Fin.decidableEq n a b))) s)) l) (f : MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (x : M') (y : M'), Eq.{succ u3} M₂ (coeFn.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (fun (f : MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) => ((Fin n) -> M') -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (coeFn.{succ (max u2 u3), succ (max u2 u3)} (LinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (MultilinearMap.curryFinFinset._proof_2.{u1} R _inst_1) (MultilinearMap.curryFinFinset._proof_1.{u1} R _inst_1) (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.module.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.curryFinFinset._proof_5.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 l)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (x : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_4.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (fun (_x : LinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (MultilinearMap.curryFinFinset._proof_2.{u1} R _inst_1) (MultilinearMap.curryFinFinset._proof_1.{u1} R _inst_1) (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.module.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.curryFinFinset._proof_5.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 l)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (x : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_4.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) => (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) -> (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7)) (LinearEquiv.hasCoeToFun.{u1, u1, max u2 u3, max u2 u3} R R (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.module.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.curryFinFinset._proof_5.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 l)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (x : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_4.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (MultilinearMap.curryFinFinset._proof_2.{u1} R _inst_1) (MultilinearMap.curryFinFinset._proof_1.{u1} R _inst_1)) (LinearEquiv.symm.{u1, u1, max u2 u3, max u2 u3} R R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (x : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_4.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.curryFinFinset._proof_5.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 l)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (MultilinearMap.curryFinFinset._proof_1.{u1} R _inst_1) (MultilinearMap.curryFinFinset._proof_2.{u1} R _inst_1) (MultilinearMap.curryFinFinset.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 k l n s hk hl)) f) (Finset.piecewise.{0, succ u2} (Fin n) (fun (i : Fin n) => M') s (fun (_x : Fin n) => x) (fun (_x : Fin n) => y) (fun (j : Fin n) => Finset.decidableMem.{0} (Fin n) (fun (a : Fin n) (b : Fin n) => Fin.decidableEq n a b) j s))) (coeFn.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (f : MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) => ((Fin l) -> M') -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (coeFn.{max 1 (succ u2) (succ (max u2 u3)), max (succ u2) (succ (max u2 u3))} (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (fun (f : MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) => ((Fin k) -> M') -> (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7)) (MultilinearMap.hasCoeToFun.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) f (fun (_x : Fin k) => x)) (fun (_x : Fin l) => y))
but is expected to have type
  forall {R : Type.{u1}} {M₂ : Type.{u3}} {M' : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_3 : AddCommMonoid.{u2} M'] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_6 : Module.{u1, u2} R M' (CommSemiring.toSemiring.{u1} R _inst_1) _inst_3] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] {k : Nat} {l : Nat} {n : Nat} {s : Finset.{0} (Fin n)} (hk : Eq.{1} Nat (Finset.card.{0} (Fin n) s) k) (hl : Eq.{1} Nat (Finset.card.{0} (Fin n) (HasCompl.compl.{0} (Finset.{0} (Fin n)) (BooleanAlgebra.toHasCompl.{0} (Finset.{0} (Fin n)) (Finset.booleanAlgebra.{0} (Fin n) (Fin.fintype n) (fun (a : Fin n) (b : Fin n) => instDecidableEqFin n a b))) s)) l) (f : MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (x : M') (y : M'), Eq.{succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin n) -> M') => M₂) (Finset.piecewise.{0, succ u2} (Fin n) (fun (i : Fin n) => M') s (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25777 : Fin n) => x) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25782 : Fin n) => y) (fun (j : Fin n) => Finset.decidableMem.{0} (Fin n) (fun (a : Fin n) (b : Fin n) => instDecidableEqFin n a b) j s))) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} ((fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) => MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) f) ((Fin n) -> M') (fun (f : (Fin n) -> M') => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin n) -> M') => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (FunLike.coe.{max (succ u2) (succ u3), max (succ u2) (succ u3), max (succ u2) (succ u3)} (LinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (fun (_x : MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) => MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) _x) (SMulHomClass.toFunLike.{max u2 u3, u1, max u2 u3, max u2 u3} (LinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (SMulZeroClass.toSMul.{u1, max u2 u3} R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (AddMonoid.toZero.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))))) (DistribSMul.toSMulZeroClass.{u1, max u2 u3} R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (AddMonoid.toAddZeroClass.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))))) (DistribMulAction.toDistribSMul.{u1, max u2 u3} R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))) (Module.toDistribMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))))))) (SMulZeroClass.toSMul.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (AddMonoid.toZero.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7))) (DistribSMul.toSMulZeroClass.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (AddMonoid.toAddZeroClass.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7))) (DistribMulAction.toDistribSMul.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7)) (Module.toDistribMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u3, u1, max u2 u3, max u2 u3} (LinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7)) (Module.toDistribMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))))))) (Module.toDistribMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (SemilinearMapClass.distribMulActionHomClass.{u1, max u2 u3, max u2 u3, max u2 u3} R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (LinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (SemilinearEquivClass.instSemilinearMapClass.{u1, u1, max u2 u3, max u2 u3, max u2 u3} R R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (LinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (LinearEquiv.instSemilinearEquivClassLinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))))))) (LinearEquiv.symm.{u1, u1, max u2 u3, max u2 u3} R R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.curryFinFinset.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 k l n s hk hl)) f) (Finset.piecewise.{0, succ u2} (Fin n) (fun (i : Fin n) => M') s (fun (_x : Fin n) => x) (fun (_x : Fin n) => y) (fun (j : Fin n) => Finset.decidableMem.{0} (Fin n) (fun (a : Fin n) (b : Fin n) => instDecidableEqFin n a b) j s))) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin k) -> M') => MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25748 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25791 : Fin k) => x)) ((Fin l) -> M') (fun (f : (Fin l) -> M') => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin l) -> M') => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (FunLike.coe.{max (succ u2) (succ u3), succ u2, max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25734 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25748 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25748 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25748 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) ((Fin k) -> M') (fun (f : (Fin k) -> M') => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin k) -> M') => MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25748 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) f (fun (_x : Fin k) => x)) (fun (_x : Fin l) => y))
Case conversion may be inaccurate. Consider using '#align multilinear_map.curry_fin_finset_symm_apply_piecewise_const MultilinearMap.curryFinFinset_symm_apply_piecewise_constₓ'. -/
@[simp]
theorem curryFinFinset_symm_apply_piecewise_const {k l n : ℕ} {s : Finset (Fin n)} (hk : s.card = k)
    (hl : sᶜ.card = l)
    (f : MultilinearMap R (fun x : Fin k => M') (MultilinearMap R (fun x : Fin l => M') M₂))
    (x y : M') :
    (curryFinFinset R M₂ M' hk hl).symm f (s.piecewise (fun _ => x) fun _ => y) =
      f (fun _ => x) fun _ => y :=
  by
  rw [curry_fin_finset_symm_apply]; congr
  · ext i
    rw [finSumEquivOfFinset_inl, Finset.piecewise_eq_of_mem]
    apply Finset.orderEmbOfFin_mem
  · ext i
    rw [finSumEquivOfFinset_inr, Finset.piecewise_eq_of_not_mem]
    exact Finset.mem_compl.1 (Finset.orderEmbOfFin_mem _ _ _)
#align multilinear_map.curry_fin_finset_symm_apply_piecewise_const MultilinearMap.curryFinFinset_symm_apply_piecewise_const

/- warning: multilinear_map.curry_fin_finset_symm_apply_const -> MultilinearMap.curryFinFinset_symm_apply_const is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M₂ : Type.{u3}} {M' : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_3 : AddCommMonoid.{u2} M'] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_6 : Module.{u1, u2} R M' (CommSemiring.toSemiring.{u1} R _inst_1) _inst_3] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] {k : Nat} {l : Nat} {n : Nat} {s : Finset.{0} (Fin n)} (hk : Eq.{1} Nat (Finset.card.{0} (Fin n) s) k) (hl : Eq.{1} Nat (Finset.card.{0} (Fin n) (HasCompl.compl.{0} (Finset.{0} (Fin n)) (BooleanAlgebra.toHasCompl.{0} (Finset.{0} (Fin n)) (Finset.booleanAlgebra.{0} (Fin n) (Fin.fintype n) (fun (a : Fin n) (b : Fin n) => Fin.decidableEq n a b))) s)) l) (f : MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (x : M'), Eq.{succ u3} M₂ (coeFn.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (fun (f : MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) => ((Fin n) -> M') -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (coeFn.{succ (max u2 u3), succ (max u2 u3)} (LinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (MultilinearMap.curryFinFinset._proof_2.{u1} R _inst_1) (MultilinearMap.curryFinFinset._proof_1.{u1} R _inst_1) (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.module.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.curryFinFinset._proof_5.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 l)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (x : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_4.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (fun (_x : LinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (MultilinearMap.curryFinFinset._proof_2.{u1} R _inst_1) (MultilinearMap.curryFinFinset._proof_1.{u1} R _inst_1) (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.module.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.curryFinFinset._proof_5.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 l)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (x : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_4.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) => (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) -> (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7)) (LinearEquiv.hasCoeToFun.{u1, u1, max u2 u3, max u2 u3} R R (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.module.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.curryFinFinset._proof_5.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 l)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (x : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_4.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (MultilinearMap.curryFinFinset._proof_2.{u1} R _inst_1) (MultilinearMap.curryFinFinset._proof_1.{u1} R _inst_1)) (LinearEquiv.symm.{u1, u1, max u2 u3, max u2 u3} R R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (x : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_4.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.curryFinFinset._proof_5.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 l)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (MultilinearMap.curryFinFinset._proof_1.{u1} R _inst_1) (MultilinearMap.curryFinFinset._proof_2.{u1} R _inst_1) (MultilinearMap.curryFinFinset.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 k l n s hk hl)) f) (fun (_x : Fin n) => x)) (coeFn.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (f : MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) => ((Fin l) -> M') -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (coeFn.{max 1 (succ u2) (succ (max u2 u3)), max (succ u2) (succ (max u2 u3))} (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (fun (f : MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) => ((Fin k) -> M') -> (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7)) (MultilinearMap.hasCoeToFun.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddZeroClass.toHasZero.{u3} M₂ (AddMonoid.toAddZeroClass.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4))) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) f (fun (_x : Fin k) => x)) (fun (_x : Fin l) => x))
but is expected to have type
  forall {R : Type.{u1}} {M₂ : Type.{u3}} {M' : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_3 : AddCommMonoid.{u2} M'] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_6 : Module.{u1, u2} R M' (CommSemiring.toSemiring.{u1} R _inst_1) _inst_3] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] {k : Nat} {l : Nat} {n : Nat} {s : Finset.{0} (Fin n)} (hk : Eq.{1} Nat (Finset.card.{0} (Fin n) s) k) (hl : Eq.{1} Nat (Finset.card.{0} (Fin n) (HasCompl.compl.{0} (Finset.{0} (Fin n)) (BooleanAlgebra.toHasCompl.{0} (Finset.{0} (Fin n)) (Finset.booleanAlgebra.{0} (Fin n) (Fin.fintype n) (fun (a : Fin n) (b : Fin n) => instDecidableEqFin n a b))) s)) l) (f : MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (x : M'), Eq.{succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin n) -> M') => M₂) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.26251 : Fin n) => x)) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} ((fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) => MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) f) ((Fin n) -> M') (fun (f : (Fin n) -> M') => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin n) -> M') => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (FunLike.coe.{max (succ u2) (succ u3), max (succ u2) (succ u3), max (succ u2) (succ u3)} (LinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (fun (_x : MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) => MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) _x) (SMulHomClass.toFunLike.{max u2 u3, u1, max u2 u3, max u2 u3} (LinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (SMulZeroClass.toSMul.{u1, max u2 u3} R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (AddMonoid.toZero.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))))) (DistribSMul.toSMulZeroClass.{u1, max u2 u3} R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (AddMonoid.toAddZeroClass.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))))) (DistribMulAction.toDistribSMul.{u1, max u2 u3} R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))) (Module.toDistribMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))))))) (SMulZeroClass.toSMul.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (AddMonoid.toZero.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7))) (DistribSMul.toSMulZeroClass.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (AddMonoid.toAddZeroClass.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7))) (DistribMulAction.toDistribSMul.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7)) (Module.toDistribMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u3, u1, max u2 u3, max u2 u3} (LinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7)) (Module.toDistribMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))))))) (Module.toDistribMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (SemilinearMapClass.distribMulActionHomClass.{u1, max u2 u3, max u2 u3, max u2 u3} R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (LinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (SemilinearEquivClass.instSemilinearMapClass.{u1, u1, max u2 u3, max u2 u3, max u2 u3} R R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (LinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (LinearEquiv.instSemilinearEquivClassLinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))))))) (LinearEquiv.symm.{u1, u1, max u2 u3, max u2 u3} R R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.curryFinFinset.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 k l n s hk hl)) f) (fun (_x : Fin n) => x)) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin k) -> M') => MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.26228 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.26260 : Fin k) => x)) ((Fin l) -> M') (fun (f : (Fin l) -> M') => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin l) -> M') => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (FunLike.coe.{max (succ u2) (succ u3), succ u2, max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.26214 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.26228 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.26228 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.26228 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) ((Fin k) -> M') (fun (f : (Fin k) -> M') => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin k) -> M') => MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.26228 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) f (fun (_x : Fin k) => x)) (fun (_x : Fin l) => x))
Case conversion may be inaccurate. Consider using '#align multilinear_map.curry_fin_finset_symm_apply_const MultilinearMap.curryFinFinset_symm_apply_constₓ'. -/
@[simp]
theorem curryFinFinset_symm_apply_const {k l n : ℕ} {s : Finset (Fin n)} (hk : s.card = k)
    (hl : sᶜ.card = l)
    (f : MultilinearMap R (fun x : Fin k => M') (MultilinearMap R (fun x : Fin l => M') M₂))
    (x : M') : ((curryFinFinset R M₂ M' hk hl).symm f fun _ => x) = f (fun _ => x) fun _ => x :=
  rfl
#align multilinear_map.curry_fin_finset_symm_apply_const MultilinearMap.curryFinFinset_symm_apply_const

/- warning: multilinear_map.curry_fin_finset_apply_const -> MultilinearMap.curryFinFinset_apply_const is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} {M₂ : Type.{u3}} {M' : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_3 : AddCommMonoid.{u2} M'] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_6 : Module.{u1, u2} R M' (CommSemiring.toSemiring.{u1} R _inst_1) _inst_3] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] {k : Nat} {l : Nat} {n : Nat} {s : Finset.{0} (Fin n)} (hk : Eq.{1} Nat (Finset.card.{0} (Fin n) s) k) (hl : Eq.{1} Nat (Finset.card.{0} (Fin n) (HasCompl.compl.{0} (Finset.{0} (Fin n)) (BooleanAlgebra.toHasCompl.{0} (Finset.{0} (Fin n)) (Finset.booleanAlgebra.{0} (Fin n) (Fin.fintype n) (fun (a : Fin n) (b : Fin n) => Fin.decidableEq n a b))) s)) l) (f : MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (x : M') (y : M'), Eq.{succ u3} M₂ (coeFn.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (f : MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) => ((Fin l) -> M') -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (coeFn.{max 1 (succ u2) (succ (max u2 u3)), max (succ u2) (succ (max u2 u3))} (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (fun (f : MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) => ((Fin k) -> M') -> (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7)) (MultilinearMap.hasCoeToFun.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (coeFn.{succ (max u2 u3), succ (max u2 u3)} (LinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (MultilinearMap.curryFinFinset._proof_1.{u1} R _inst_1) (MultilinearMap.curryFinFinset._proof_2.{u1} R _inst_1) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (x : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_4.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.curryFinFinset._proof_5.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 l))) (fun (_x : LinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (MultilinearMap.curryFinFinset._proof_1.{u1} R _inst_1) (MultilinearMap.curryFinFinset._proof_2.{u1} R _inst_1) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (x : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_4.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.curryFinFinset._proof_5.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 l))) => (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) -> (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)))) (LinearEquiv.hasCoeToFun.{u1, u1, max u2 u3, max u2 u3} R R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7))) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin n) (fun (x : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_4.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.module.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (MultilinearMap.curryFinFinset._proof_3.{u1, u3} R M₂ _inst_1 _inst_4 _inst_7)) (MultilinearMap.curryFinFinset._proof_5.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 l)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (MultilinearMap.curryFinFinset._proof_1.{u1} R _inst_1) (MultilinearMap.curryFinFinset._proof_2.{u1} R _inst_1)) (MultilinearMap.curryFinFinset.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 k l n s hk hl) f) (fun (_x : Fin k) => x)) (fun (_x : Fin l) => y)) (coeFn.{max 1 (succ u2) (succ u3), max (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (fun (f : MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) => ((Fin n) -> M') -> M₂) (MultilinearMap.hasCoeToFun.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) f (Finset.piecewise.{0, succ u2} (Fin n) (fun (i : Fin n) => M') s (fun (_x : Fin n) => x) (fun (_x : Fin n) => y) (fun (j : Fin n) => Finset.decidableMem.{0} (Fin n) (fun (a : Fin n) (b : Fin n) => Fin.decidableEq n a b) j s)))
but is expected to have type
  forall {R : Type.{u1}} {M₂ : Type.{u3}} {M' : Type.{u2}} [_inst_1 : CommSemiring.{u1} R] [_inst_3 : AddCommMonoid.{u2} M'] [_inst_4 : AddCommMonoid.{u3} M₂] [_inst_6 : Module.{u1, u2} R M' (CommSemiring.toSemiring.{u1} R _inst_1) _inst_3] [_inst_7 : Module.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4] {k : Nat} {l : Nat} {n : Nat} {s : Finset.{0} (Fin n)} (hk : Eq.{1} Nat (Finset.card.{0} (Fin n) s) k) (hl : Eq.{1} Nat (Finset.card.{0} (Fin n) (HasCompl.compl.{0} (Finset.{0} (Fin n)) (BooleanAlgebra.toHasCompl.{0} (Finset.{0} (Fin n)) (Finset.booleanAlgebra.{0} (Fin n) (Fin.fintype n) (fun (a : Fin n) (b : Fin n) => instDecidableEqFin n a b))) s)) l) (f : MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (x : M') (y : M'), Eq.{succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin l) -> M') => M₂) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.26389 : Fin l) => y)) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin k) -> M') => MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.26383 : Fin k) => x)) ((Fin l) -> M') (fun (f : (Fin l) -> M') => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin l) -> M') => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (FunLike.coe.{max (succ u2) (succ u3), succ u2, max (succ u2) (succ u3)} ((fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) => MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) f) ((Fin k) -> M') (fun (f : (Fin k) -> M') => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin k) -> M') => MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (FunLike.coe.{max (succ u2) (succ u3), max (succ u2) (succ u3), max (succ u2) (succ u3)} (LinearEquiv.{u1, u1, max u3 u2, max u3 u2} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))))))) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (fun (_x : MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) => (fun (x._@.Mathlib.Algebra.Hom.GroupAction._hyg.2186 : MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) => MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) _x) (SMulHomClass.toFunLike.{max u2 u3, u1, max u2 u3, max u2 u3} (LinearEquiv.{u1, u1, max u3 u2, max u3 u2} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))))))) R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (SMulZeroClass.toSMul.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (AddMonoid.toZero.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7))) (DistribSMul.toSMulZeroClass.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (AddMonoid.toAddZeroClass.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7))) (DistribMulAction.toDistribSMul.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7)) (Module.toDistribMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (SMulZeroClass.toSMul.{u1, max u2 u3} R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (AddMonoid.toZero.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))))) (DistribSMul.toSMulZeroClass.{u1, max u2 u3} R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (AddMonoid.toAddZeroClass.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))))) (DistribMulAction.toDistribSMul.{u1, max u2 u3} R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))) (Module.toDistribMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))))))) (DistribMulActionHomClass.toSMulHomClass.{max u2 u3, u1, max u2 u3, max u2 u3} (LinearEquiv.{u1, u1, max u3 u2, max u3 u2} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))))))) R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7)) (AddCommMonoid.toAddMonoid.{max u2 u3} (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))) (Module.toDistribMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (Module.toDistribMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))))))) (SemilinearMapClass.distribMulActionHomClass.{u1, max u2 u3, max u2 u3, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (LinearEquiv.{u1, u1, max u3 u2, max u3 u2} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))))))) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (SemilinearEquivClass.instSemilinearMapClass.{u1, u1, max u2 u3, max u2 u3, max u2 u3} R R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (LinearEquiv.{u1, u1, max u3 u2, max u3 u2} R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))))))) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (LinearEquiv.instSemilinearEquivClassLinearEquiv.{u1, u1, max u2 u3, max u2 u3} R R (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.{u1, u2, max u3 u2, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) (MultilinearMap.addCommMonoid.{u1, u2, max u2 u3, 0} R (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7))))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25228 : Fin n) => M') M₂ (fun (i : Fin n) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, max u2 u3, 0, u1, u1} (Fin k) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25241 : Fin k) => M') (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (fun (i : Fin k) => _inst_3) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin k) => _inst_6) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))) (smulCommClass_self.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (MultilinearMap.instZeroMultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (Module.toMulActionWithZero.{u1, max u2 u3} R (MultilinearMap.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (CommSemiring.toSemiring.{u1} R _inst_1) (MultilinearMap.addCommMonoid.{u1, u2, u3, 0} R (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_3) _inst_4 (fun (i : Fin l) => _inst_6) _inst_7) (MultilinearMap.instModuleMultilinearMapAddCommMonoid.{u2, u3, 0, u1, u1} (Fin l) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.25255 : Fin l) => M') M₂ (fun (i : Fin l) => _inst_3) _inst_4 R R (CommSemiring.toSemiring.{u1} R _inst_1) (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin l) => _inst_6) _inst_7 _inst_7 (smulCommClass_self.{u1, u3} R M₂ (CommSemiring.toCommMonoid.{u1} R _inst_1) (MulActionWithZero.toMulAction.{u1, u3} R M₂ (Semiring.toMonoidWithZero.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (AddMonoid.toZero.{u3} M₂ (AddCommMonoid.toAddMonoid.{u3} M₂ _inst_4)) (Module.toMulActionWithZero.{u1, u3} R M₂ (CommSemiring.toSemiring.{u1} R _inst_1) _inst_4 _inst_7)))))))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R (CommSemiring.toSemiring.{u1} R _inst_1))))))) (MultilinearMap.curryFinFinset.{u1, u2, u3} R M₂ M' _inst_1 _inst_3 _inst_4 _inst_6 _inst_7 k l n s hk hl) f) (fun (_x : Fin k) => x)) (fun (_x : Fin l) => y)) (FunLike.coe.{max (succ u2) (succ u3), succ u2, succ u3} (MultilinearMap.{u1, u2, u3, 0} R (Fin n) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.26360 : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) ((Fin n) -> M') (fun (f : (Fin n) -> M') => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.418 : (Fin n) -> M') => M₂) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u2, u3, 0} R (Fin n) (fun (x : Fin n) => M') M₂ (CommSemiring.toSemiring.{u1} R _inst_1) (fun (i : Fin n) => _inst_3) _inst_4 (fun (i : Fin n) => _inst_6) _inst_7) f (Finset.piecewise.{0, succ u2} (Fin n) (fun (i : Fin n) => M') s (fun (_x : Fin n) => x) (fun (_x : Fin n) => y) (fun (j : Fin n) => Finset.decidableMem.{0} (Fin n) (fun (a : Fin n) (b : Fin n) => instDecidableEqFin n a b) j s)))
Case conversion may be inaccurate. Consider using '#align multilinear_map.curry_fin_finset_apply_const MultilinearMap.curryFinFinset_apply_constₓ'. -/
@[simp]
theorem curryFinFinset_apply_const {k l n : ℕ} {s : Finset (Fin n)} (hk : s.card = k)
    (hl : sᶜ.card = l) (f : MultilinearMap R (fun x : Fin n => M') M₂) (x y : M') :
    (curryFinFinset R M₂ M' hk hl f (fun _ => x) fun _ => y) =
      f (s.piecewise (fun _ => x) fun _ => y) :=
  by
  refine' (curry_fin_finset_symm_apply_piecewise_const hk hl _ _ _).symm.trans _
  -- `rw` fails
  rw [LinearEquiv.symm_apply_apply]
#align multilinear_map.curry_fin_finset_apply_const MultilinearMap.curryFinFinset_apply_const

end MultilinearMap

end Currying

namespace MultilinearMap

section Submodule

variable {R M M₂} [Ring R] [∀ i, AddCommMonoid (M₁ i)] [AddCommMonoid M'] [AddCommMonoid M₂]
  [∀ i, Module R (M₁ i)] [Module R M'] [Module R M₂]

#print MultilinearMap.map /-
/-- The pushforward of an indexed collection of submodule `p i ⊆ M₁ i` by `f : M₁ → M₂`.

Note that this is not a submodule - it is not closed under addition. -/
def map [Nonempty ι] (f : MultilinearMap R M₁ M₂) (p : ∀ i, Submodule R (M₁ i)) : SubMulAction R M₂
    where
  carrier := f '' { v | ∀ i, v i ∈ p i }
  smul_mem' := fun c _ ⟨x, hx, hf⟩ => by
    let ⟨i⟩ := ‹Nonempty ι›
    letI := Classical.decEq ι
    refine' ⟨update x i (c • x i), fun j => if hij : j = i then _ else _, hf ▸ _⟩
    · rw [hij, update_same]
      exact (p i).smul_mem _ (hx i)
    · rw [update_noteq hij]
      exact hx j
    · rw [f.map_smul, update_eq_self]
#align multilinear_map.map MultilinearMap.map
-/

#print MultilinearMap.map_nonempty /-
/-- The map is always nonempty. This lemma is needed to apply `sub_mul_action.zero_mem`. -/
theorem map_nonempty [Nonempty ι] (f : MultilinearMap R M₁ M₂) (p : ∀ i, Submodule R (M₁ i)) :
    (map f p : Set M₂).Nonempty :=
  ⟨f 0, 0, fun i => (p i).zero_mem, rfl⟩
#align multilinear_map.map_nonempty MultilinearMap.map_nonempty
-/

#print MultilinearMap.range /-
/-- The range of a multilinear map, closed under scalar multiplication. -/
def range [Nonempty ι] (f : MultilinearMap R M₁ M₂) : SubMulAction R M₂ :=
  f.map fun i => ⊤
#align multilinear_map.range MultilinearMap.range
-/

end Submodule

end MultilinearMap

