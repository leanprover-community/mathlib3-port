/-
Copyright (c) 2020 Zhangir Azerbayev. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Eric Wieser, Zhangir Azerbayev

! This file was ported from Lean 3 source module linear_algebra.alternating
! leanprover-community/mathlib commit 25a9423c6b2c8626e91c688bfd6c1d0a986a3e6e
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.GroupTheory.GroupAction.Quotient
import Mathbin.GroupTheory.Perm.Sign
import Mathbin.GroupTheory.Perm.Subgroup
import Mathbin.LinearAlgebra.LinearIndependent
import Mathbin.LinearAlgebra.Multilinear.Basis
import Mathbin.LinearAlgebra.Multilinear.TensorProduct

/-!
# Alternating Maps

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

We construct the bundled function `alternating_map`, which extends `multilinear_map` with all the
arguments of the same type.

## Main definitions
* `alternating_map R M N ι` is the space of `R`-linear alternating maps from `ι → M` to `N`.
* `f.map_eq_zero_of_eq` expresses that `f` is zero when two inputs are equal.
* `f.map_swap` expresses that `f` is negated when two inputs are swapped.
* `f.map_perm` expresses how `f` varies by a sign change under a permutation of its inputs.
* An `add_comm_monoid`, `add_comm_group`, and `module` structure over `alternating_map`s that
  matches the definitions over `multilinear_map`s.
* `multilinear_map.dom_dom_congr`, for permutating the elements within a family.
* `multilinear_map.alternatization`, which makes an alternating map out of a non-alternating one.
* `alternating_map.dom_coprod`, which behaves as a product between two alternating maps.
* `alternating_map.curry_left`, for binding the leftmost argument of an alternating map indexed
  by `fin n.succ`.

## Implementation notes
`alternating_map` is defined in terms of `map_eq_zero_of_eq`, as this is easier to work with than
using `map_swap` as a definition, and does not require `has_neg N`.

`alternating_map`s are provided with a coercion to `multilinear_map`, along with a set of
`norm_cast` lemmas that act on the algebraic structure:

* `alternating_map.coe_add`
* `alternating_map.coe_zero`
* `alternating_map.coe_sub`
* `alternating_map.coe_neg`
* `alternating_map.coe_smul`
-/


-- semiring / add_comm_monoid
variable {R : Type _} [Semiring R]

variable {M : Type _} [AddCommMonoid M] [Module R M]

variable {N : Type _} [AddCommMonoid N] [Module R N]

-- semiring / add_comm_group
variable {M' : Type _} [AddCommGroup M'] [Module R M']

variable {N' : Type _} [AddCommGroup N'] [Module R N']

variable {ι ι' ι'' : Type _}

section

variable (R M N ι)

#print AlternatingMap /-
/-- An alternating map is a multilinear map that vanishes when two of its arguments are equal.
-/
structure AlternatingMap extends MultilinearMap R (fun i : ι => M) N where
  map_eq_zero_of_eq' : ∀ (v : ι → M) (i j : ι) (h : v i = v j) (hij : i ≠ j), to_fun v = 0
#align alternating_map AlternatingMap
-/

end

/-- The multilinear map associated to an alternating map -/
add_decl_doc AlternatingMap.toMultilinearMap

namespace AlternatingMap

variable (f f' : AlternatingMap R M N ι)

variable (g g₂ : AlternatingMap R M N' ι)

variable (g' : AlternatingMap R M' N' ι)

variable (v : ι → M) (v' : ι → M')

open Function

/-! Basic coercion simp lemmas, largely copied from `ring_hom` and `multilinear_map` -/


section Coercions

#print AlternatingMap.funLike /-
instance funLike : FunLike (AlternatingMap R M N ι) (ι → M) fun _ => N
    where
  coe := AlternatingMap.toFun
  coe_injective' f g h := by
    cases f
    cases g
    congr
#align alternating_map.fun_like AlternatingMap.funLike
-/

-- shortcut instance
instance : CoeFun (AlternatingMap R M N ι) fun _ => (ι → M) → N :=
  ⟨FunLike.coe⟩

initialize_simps_projections AlternatingMap (toFun → apply)

/- warning: alternating_map.to_fun_eq_coe -> AlternatingMap.toFun_eq_coe is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι), Eq.{max (max (succ u4) (succ u2)) (succ u3)} ((forall (i : ι), (fun (i : ι) => M) i) -> N) (AlternatingMap.toFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι f) (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f)
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u4}} [_inst_2 : AddCommMonoid.{u4} M] [_inst_3 : Module.{u1, u4} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u2}} (f : AlternatingMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι), Eq.{max (max (succ u4) (succ u3)) (succ u2)} ((ι -> M) -> N) (MultilinearMap.toFun.{u1, u4, u3, u2} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.259 : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5 (AlternatingMap.toMultilinearMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι f)) (FunLike.coe.{max (max (succ u4) (succ u3)) (succ u2), max (succ u4) (succ u2), succ u3} (AlternatingMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f)
Case conversion may be inaccurate. Consider using '#align alternating_map.to_fun_eq_coe AlternatingMap.toFun_eq_coeₓ'. -/
@[simp]
theorem toFun_eq_coe : f.toFun = f :=
  rfl
#align alternating_map.to_fun_eq_coe AlternatingMap.toFun_eq_coe

@[simp]
theorem coe_mk (f : (ι → M) → N) (h₁ h₂ h₃) : ⇑(⟨f, h₁, h₂, h₃⟩ : AlternatingMap R M N ι) = f :=
  rfl
#align alternating_map.coe_mk AlternatingMap.coe_mkₓ

/- warning: alternating_map.congr_fun -> AlternatingMap.congr_fun is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} {f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι} {g : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι}, (Eq.{max (succ u2) (succ u3) (succ u4)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f g) -> (forall (x : ι -> M), Eq.{succ u3} N (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f x) (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) g x))
but is expected to have type
  forall {R : Type.{u4}} [_inst_1 : Semiring.{u4} R] {M : Type.{u3}} [_inst_2 : AddCommMonoid.{u3} M] [_inst_3 : Module.{u4, u3} R M _inst_1 _inst_2] {N : Type.{u2}} [_inst_4 : AddCommMonoid.{u2} N] [_inst_5 : Module.{u4, u2} R N _inst_1 _inst_4] {ι : Type.{u1}} {f : AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι} {g : AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι}, (Eq.{max (max (succ u3) (succ u2)) (succ u1)} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f g) -> (forall (x : ι -> M), Eq.{succ u2} N (FunLike.coe.{max (max (succ u3) (succ u2)) (succ u1), max (succ u3) (succ u1), succ u2} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f x) (FunLike.coe.{max (max (succ u3) (succ u2)) (succ u1), max (succ u3) (succ u1), succ u2} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) g x))
Case conversion may be inaccurate. Consider using '#align alternating_map.congr_fun AlternatingMap.congr_funₓ'. -/
theorem congr_fun {f g : AlternatingMap R M N ι} (h : f = g) (x : ι → M) : f x = g x :=
  congr_arg (fun h : AlternatingMap R M N ι => h x) h
#align alternating_map.congr_fun AlternatingMap.congr_fun

/- warning: alternating_map.congr_arg -> AlternatingMap.congr_arg is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) {x : ι -> M} {y : ι -> M}, (Eq.{max (succ u4) (succ u2)} (ι -> M) x y) -> (Eq.{succ u3} N (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f x) (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f y))
but is expected to have type
  forall {R : Type.{u4}} [_inst_1 : Semiring.{u4} R] {M : Type.{u3}} [_inst_2 : AddCommMonoid.{u3} M] [_inst_3 : Module.{u4, u3} R M _inst_1 _inst_2] {N : Type.{u2}} [_inst_4 : AddCommMonoid.{u2} N] [_inst_5 : Module.{u4, u2} R N _inst_1 _inst_4] {ι : Type.{u1}} (f : AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) {x : ι -> M} {y : ι -> M}, (Eq.{max (succ u3) (succ u1)} (ι -> M) x y) -> (Eq.{succ u2} N (FunLike.coe.{max (max (succ u3) (succ u2)) (succ u1), max (succ u3) (succ u1), succ u2} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f x) (FunLike.coe.{max (max (succ u3) (succ u2)) (succ u1), max (succ u3) (succ u1), succ u2} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f y))
Case conversion may be inaccurate. Consider using '#align alternating_map.congr_arg AlternatingMap.congr_argₓ'. -/
theorem congr_arg (f : AlternatingMap R M N ι) {x y : ι → M} (h : x = y) : f x = f y :=
  congr_arg (fun x : ι → M => f x) h
#align alternating_map.congr_arg AlternatingMap.congr_arg

/- warning: alternating_map.coe_injective -> AlternatingMap.coe_injective is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}}, Function.Injective.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) ((ι -> M) -> N) (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (ᾰ : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u4}} [_inst_2 : AddCommMonoid.{u4} M] [_inst_3 : Module.{u1, u4} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u2}}, Function.Injective.{max (max (succ u4) (succ u3)) (succ u2), max (max (succ u4) (succ u3)) (succ u2)} (AlternatingMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) ((ι -> M) -> N) (FunLike.coe.{max (max (succ u4) (succ u3)) (succ u2), max (succ u4) (succ u2), succ u3} (AlternatingMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (ᾰ : ι -> M) => N) (AlternatingMap.funLike.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))
Case conversion may be inaccurate. Consider using '#align alternating_map.coe_injective AlternatingMap.coe_injectiveₓ'. -/
theorem coe_injective : Injective (coeFn : AlternatingMap R M N ι → (ι → M) → N) :=
  FunLike.coe_injective
#align alternating_map.coe_injective AlternatingMap.coe_injective

/- warning: alternating_map.coe_inj -> AlternatingMap.coe_inj is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} {f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι} {g : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι}, Iff (Eq.{max (max (succ u4) (succ u2)) (succ u3)} ((fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) f) (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f) (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) g)) (Eq.{max (succ u2) (succ u3) (succ u4)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f g)
but is expected to have type
  forall {R : Type.{u4}} [_inst_1 : Semiring.{u4} R] {M : Type.{u3}} [_inst_2 : AddCommMonoid.{u3} M] [_inst_3 : Module.{u4, u3} R M _inst_1 _inst_2] {N : Type.{u2}} [_inst_4 : AddCommMonoid.{u2} N] [_inst_5 : Module.{u4, u2} R N _inst_1 _inst_4] {ι : Type.{u1}} {f : AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι} {g : AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι}, Iff (Eq.{max (max (succ u3) (succ u2)) (succ u1)} ((ι -> M) -> N) (FunLike.coe.{max (max (succ u3) (succ u2)) (succ u1), max (succ u3) (succ u1), succ u2} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f) (FunLike.coe.{max (max (succ u3) (succ u2)) (succ u1), max (succ u3) (succ u1), succ u2} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) g)) (Eq.{max (max (succ u3) (succ u2)) (succ u1)} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f g)
Case conversion may be inaccurate. Consider using '#align alternating_map.coe_inj AlternatingMap.coe_injₓ'. -/
@[simp, norm_cast]
theorem coe_inj {f g : AlternatingMap R M N ι} : (f : (ι → M) → N) = g ↔ f = g :=
  coe_injective.eq_iff
#align alternating_map.coe_inj AlternatingMap.coe_inj

/- warning: alternating_map.ext -> AlternatingMap.ext is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} {f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι} {f' : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι}, (forall (x : ι -> M), Eq.{succ u3} N (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f x) (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f' x)) -> (Eq.{max (succ u2) (succ u3) (succ u4)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f f')
but is expected to have type
  forall {R : Type.{u4}} [_inst_1 : Semiring.{u4} R] {M : Type.{u3}} [_inst_2 : AddCommMonoid.{u3} M] [_inst_3 : Module.{u4, u3} R M _inst_1 _inst_2] {N : Type.{u2}} [_inst_4 : AddCommMonoid.{u2} N] [_inst_5 : Module.{u4, u2} R N _inst_1 _inst_4] {ι : Type.{u1}} {f : AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι} {f' : AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι}, (forall (x : ι -> M), Eq.{succ u2} N (FunLike.coe.{max (max (succ u3) (succ u2)) (succ u1), max (succ u3) (succ u1), succ u2} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f x) (FunLike.coe.{max (max (succ u3) (succ u2)) (succ u1), max (succ u3) (succ u1), succ u2} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f' x)) -> (Eq.{max (max (succ u3) (succ u2)) (succ u1)} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f f')
Case conversion may be inaccurate. Consider using '#align alternating_map.ext AlternatingMap.extₓ'. -/
@[ext]
theorem ext {f f' : AlternatingMap R M N ι} (H : ∀ x, f x = f' x) : f = f' :=
  FunLike.ext _ _ H
#align alternating_map.ext AlternatingMap.ext

/- warning: alternating_map.ext_iff -> AlternatingMap.ext_iff is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} {f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι} {g : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι}, Iff (Eq.{max (succ u2) (succ u3) (succ u4)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f g) (forall (x : ι -> M), Eq.{succ u3} N (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f x) (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) g x))
but is expected to have type
  forall {R : Type.{u4}} [_inst_1 : Semiring.{u4} R] {M : Type.{u3}} [_inst_2 : AddCommMonoid.{u3} M] [_inst_3 : Module.{u4, u3} R M _inst_1 _inst_2] {N : Type.{u2}} [_inst_4 : AddCommMonoid.{u2} N] [_inst_5 : Module.{u4, u2} R N _inst_1 _inst_4] {ι : Type.{u1}} {f : AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι} {g : AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι}, Iff (Eq.{max (max (succ u3) (succ u2)) (succ u1)} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f g) (forall (x : ι -> M), Eq.{succ u2} N (FunLike.coe.{max (max (succ u3) (succ u2)) (succ u1), max (succ u3) (succ u1), succ u2} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f x) (FunLike.coe.{max (max (succ u3) (succ u2)) (succ u1), max (succ u3) (succ u1), succ u2} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) g x))
Case conversion may be inaccurate. Consider using '#align alternating_map.ext_iff AlternatingMap.ext_iffₓ'. -/
theorem ext_iff {f g : AlternatingMap R M N ι} : f = g ↔ ∀ x, f x = g x :=
  ⟨fun h x => h ▸ rfl, fun h => ext h⟩
#align alternating_map.ext_iff AlternatingMap.ext_iff

instance : Coe (AlternatingMap R M N ι) (MultilinearMap R (fun i : ι => M) N) :=
  ⟨fun x => x.toMultilinearMap⟩

/- warning: alternating_map.coe_multilinear_map -> AlternatingMap.coe_multilinearMap is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι), Eq.{max (max (succ u4) (succ u2)) (succ u3)} ((ι -> M) -> N) (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) => (ι -> M) -> N) (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) ((fun (a : Sort.{max (succ u2) (succ u3) (succ u4)}) (b : Sort.{max (succ u4) (succ u2) (succ u3)}) [self : HasLiftT.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} a b] => self.0) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (HasLiftT.mk.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (CoeTCₓ.coe.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (coeBase.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (AlternatingMap.coe.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))) f)) (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f)
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u4}} [_inst_2 : AddCommMonoid.{u4} M] [_inst_3 : Module.{u1, u4} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u2}} (f : AlternatingMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι), Eq.{max (max (succ u4) (succ u3)) (succ u2)} (forall (ᾰ : ι -> M), (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : ι -> M) => N) ᾰ) (FunLike.coe.{max (max (succ u4) (succ u3)) (succ u2), max (succ u4) (succ u2), succ u3} (MultilinearMap.{u1, u4, u3, u2} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.259 : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (ι -> M) (fun (f : ι -> M) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : ι -> M) => N) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u1, u4, u3, u2} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (AlternatingMap.toMultilinearMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι f)) (FunLike.coe.{max (max (succ u4) (succ u3)) (succ u2), max (succ u4) (succ u2), succ u3} (AlternatingMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f)
Case conversion may be inaccurate. Consider using '#align alternating_map.coe_multilinear_map AlternatingMap.coe_multilinearMapₓ'. -/
@[simp, norm_cast]
theorem coe_multilinearMap : ⇑(f : MultilinearMap R (fun i : ι => M) N) = f :=
  rfl
#align alternating_map.coe_multilinear_map AlternatingMap.coe_multilinearMap

/- warning: alternating_map.coe_multilinear_map_injective -> AlternatingMap.coe_multilinearMap_injective is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}}, Function.Injective.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) ((fun (a : Sort.{max (succ u2) (succ u3) (succ u4)}) (b : Sort.{max (succ u4) (succ u2) (succ u3)}) [self : HasLiftT.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} a b] => self.0) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (HasLiftT.mk.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (CoeTCₓ.coe.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (coeBase.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (AlternatingMap.coe.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))))
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u4}} [_inst_2 : AddCommMonoid.{u4} M] [_inst_3 : Module.{u1, u4} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u2}}, Function.Injective.{max (max (succ u4) (succ u3)) (succ u2), max (max (succ u4) (succ u3)) (succ u2)} (AlternatingMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u4, u3, u2} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (AlternatingMap.toMultilinearMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)
Case conversion may be inaccurate. Consider using '#align alternating_map.coe_multilinear_map_injective AlternatingMap.coe_multilinearMap_injectiveₓ'. -/
theorem coe_multilinearMap_injective :
    Function.Injective (coe : AlternatingMap R M N ι → MultilinearMap R (fun i : ι => M) N) :=
  fun x y h => ext <| MultilinearMap.congr_fun h
#align alternating_map.coe_multilinear_map_injective AlternatingMap.coe_multilinearMap_injective

/- warning: alternating_map.to_multilinear_map_eq_coe clashes with [anonymous] -> [anonymous]
warning: alternating_map.to_multilinear_map_eq_coe -> [anonymous] is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u_1}} [_inst_1 : Semiring.{u_1} R] {M : Type.{u_2}} [_inst_2 : AddCommMonoid.{u_2} M] [_inst_3 : Module.{u_1, u_2} R M _inst_1 _inst_2] {N : Type.{u_3}} [_inst_4 : AddCommMonoid.{u_3} N] [_inst_5 : Module.{u_1, u_3} R N _inst_1 _inst_4] {ι : Type.{u_6}} (f : AlternatingMap.{u_1, u_2, u_3, u_6} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι), Eq.{max (succ u_6) (succ u_2) (succ u_3)} (MultilinearMap.{u_1, u_2, u_3, u_6} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (AlternatingMap.toMultilinearMap.{u_1, u_2, u_3, u_6} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι f) ((fun (a : Sort.{max (succ u_2) (succ u_3) (succ u_6)}) (b : Sort.{max (succ u_6) (succ u_2) (succ u_3)}) [self : HasLiftT.{max (succ u_2) (succ u_3) (succ u_6), max (succ u_6) (succ u_2) (succ u_3)} a b] => self.0) (AlternatingMap.{u_1, u_2, u_3, u_6} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u_1, u_2, u_3, u_6} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (HasLiftT.mk.{max (succ u_2) (succ u_3) (succ u_6), max (succ u_6) (succ u_2) (succ u_3)} (AlternatingMap.{u_1, u_2, u_3, u_6} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u_1, u_2, u_3, u_6} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (CoeTCₓ.coe.{max (succ u_2) (succ u_3) (succ u_6), max (succ u_6) (succ u_2) (succ u_3)} (AlternatingMap.{u_1, u_2, u_3, u_6} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u_1, u_2, u_3, u_6} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (coeBase.{max (succ u_2) (succ u_3) (succ u_6), max (succ u_6) (succ u_2) (succ u_3)} (AlternatingMap.{u_1, u_2, u_3, u_6} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u_1, u_2, u_3, u_6} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (AlternatingMap.coe.{u_1, u_2, u_3, u_6} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))) f)
but is expected to have type
  forall {R : Type.{u}} {_inst_1 : Type.{v}}, (Nat -> R -> _inst_1) -> Nat -> (List.{u} R) -> (List.{v} _inst_1)
Case conversion may be inaccurate. Consider using '#align alternating_map.to_multilinear_map_eq_coe [anonymous]ₓ'. -/
@[simp]
theorem [anonymous] : f.toMultilinearMap = f :=
  rfl
#align alternating_map.to_multilinear_map_eq_coe [anonymous]

/- warning: alternating_map.coe_multilinear_map_mk -> AlternatingMap.coe_multilinearMap_mk is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : (ι -> M) -> N) (h₁ : forall [_inst_1 : DecidableEq.{succ u4} ι] (m : forall (i : ι), (fun (i : ι) => M) i) (i : ι) (x : M) (y : M), Eq.{succ u3} N (f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => (fun (i : ι) => M) i) (fun (a : ι) (b : ι) => _inst_1 a b) m i (HAdd.hAdd.{u2, u2, u2} ((fun (i : ι) => M) i) ((fun (i : ι) => M) i) ((fun (i : ι) => M) i) (instHAdd.{u2} ((fun (i : ι) => M) i) (AddZeroClass.toHasAdd.{u2} ((fun (i : ι) => M) i) (AddMonoid.toAddZeroClass.{u2} ((fun (i : ι) => M) i) (AddCommMonoid.toAddMonoid.{u2} ((fun (i : ι) => M) i) ((fun (i : ι) => _inst_2) i))))) x y))) (HAdd.hAdd.{u3, u3, u3} N N N (instHAdd.{u3} N (AddZeroClass.toHasAdd.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)))) (f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => (fun (i : ι) => M) i) (fun (a : ι) (b : ι) => _inst_1 a b) m i x)) (f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => (fun (i : ι) => M) i) (fun (a : ι) (b : ι) => _inst_1 a b) m i y)))) (h₂ : forall [_inst_1_1 : DecidableEq.{succ u4} ι] (m : forall (i : ι), (fun (i : ι) => M) i) (i : ι) (c : R) (x : M), Eq.{succ u3} N (f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => (fun (i : ι) => M) i) (fun (a : ι) (b : ι) => _inst_1_1 a b) m i (SMul.smul.{u1, u2} R ((fun (i : ι) => M) i) (SMulZeroClass.toHasSmul.{u1, u2} R ((fun (i : ι) => M) i) (AddZeroClass.toHasZero.{u2} ((fun (i : ι) => M) i) (AddMonoid.toAddZeroClass.{u2} ((fun (i : ι) => M) i) (AddCommMonoid.toAddMonoid.{u2} ((fun (i : ι) => M) i) ((fun (i : ι) => _inst_2) i)))) (SMulWithZero.toSmulZeroClass.{u1, u2} R ((fun (i : ι) => M) i) (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)))) (AddZeroClass.toHasZero.{u2} ((fun (i : ι) => M) i) (AddMonoid.toAddZeroClass.{u2} ((fun (i : ι) => M) i) (AddCommMonoid.toAddMonoid.{u2} ((fun (i : ι) => M) i) ((fun (i : ι) => _inst_2) i)))) (MulActionWithZero.toSMulWithZero.{u1, u2} R ((fun (i : ι) => M) i) (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddZeroClass.toHasZero.{u2} ((fun (i : ι) => M) i) (AddMonoid.toAddZeroClass.{u2} ((fun (i : ι) => M) i) (AddCommMonoid.toAddMonoid.{u2} ((fun (i : ι) => M) i) ((fun (i : ι) => _inst_2) i)))) (Module.toMulActionWithZero.{u1, u2} R ((fun (i : ι) => M) i) _inst_1 ((fun (i : ι) => _inst_2) i) ((fun (i : ι) => _inst_3) i))))) c x))) (SMul.smul.{u1, u3} R N (SMulZeroClass.toHasSmul.{u1, u3} R N (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (SMulWithZero.toSmulZeroClass.{u1, u3} R N (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)))) (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (MulActionWithZero.toSMulWithZero.{u1, u3} R N (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (Module.toMulActionWithZero.{u1, u3} R N _inst_1 _inst_4 _inst_5)))) c (f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => (fun (i : ι) => M) i) (fun (a : ι) (b : ι) => _inst_1_1 a b) m i x)))) (h₃ : forall (v : ι -> M) (i : ι) (j : ι), (Eq.{succ u2} M (v i) (v j)) -> (Ne.{succ u4} ι i j) -> (Eq.{succ u3} N (f v) (OfNat.ofNat.{u3} N 0 (OfNat.mk.{u3} N 0 (Zero.zero.{u3} N (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)))))))), Eq.{max (succ u4) (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) ((fun (a : Sort.{max (succ u2) (succ u3) (succ u4)}) (b : Sort.{max (succ u4) (succ u2) (succ u3)}) [self : HasLiftT.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} a b] => self.0) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (HasLiftT.mk.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (CoeTCₓ.coe.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (coeBase.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (AlternatingMap.coe.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))) (AlternatingMap.mk.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι f h₁ h₂ h₃)) (MultilinearMap.mk.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5 f h₁ h₂)
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : (ι -> M) -> N) (h₁ : forall [_inst_1 : DecidableEq.{succ u4} ι] (m : ι -> M) (i : ι) (x : M) (y : M), Eq.{succ u3} N (f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M) (fun (a : ι) (b : ι) => _inst_1 a b) m i (HAdd.hAdd.{u2, u2, u2} M M M (instHAdd.{u2} M (AddZeroClass.toAdd.{u2} M (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2)))) x y))) (HAdd.hAdd.{u3, u3, u3} N N N (instHAdd.{u3} N (AddZeroClass.toAdd.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)))) (f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M) (fun (a : ι) (b : ι) => _inst_1 a b) m i x)) (f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M) (fun (a : ι) (b : ι) => _inst_1 a b) m i y)))) (h₂ : forall [_inst_1_1 : DecidableEq.{succ u4} ι] (m : ι -> M) (i : ι) (c : R) (x : M), Eq.{succ u3} N (f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M) (fun (a : ι) (b : ι) => _inst_1_1 a b) m i (HSMul.hSMul.{u1, u2, u2} R M M (instHSMul.{u1, u2} R M (SMulZeroClass.toSMul.{u1, u2} R M (AddMonoid.toZero.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2)) (SMulWithZero.toSMulZeroClass.{u1, u2} R M (MonoidWithZero.toZero.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)) (AddMonoid.toZero.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2)) (MulActionWithZero.toSMulWithZero.{u1, u2} R M (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddMonoid.toZero.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2)) (Module.toMulActionWithZero.{u1, u2} R M _inst_1 _inst_2 _inst_3))))) c x))) (HSMul.hSMul.{u1, u3, u3} R N N (instHSMul.{u1, u3} R N (SMulZeroClass.toSMul.{u1, u3} R N (AddMonoid.toZero.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)) (SMulWithZero.toSMulZeroClass.{u1, u3} R N (MonoidWithZero.toZero.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)) (AddMonoid.toZero.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)) (MulActionWithZero.toSMulWithZero.{u1, u3} R N (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddMonoid.toZero.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)) (Module.toMulActionWithZero.{u1, u3} R N _inst_1 _inst_4 _inst_5))))) c (f (Function.update.{succ u4, succ u2} ι (fun (i : ι) => M) (fun (a : ι) (b : ι) => _inst_1_1 a b) m i x)))) (h₃ : forall (v : ι -> M) (i : ι) (j : ι), (Eq.{succ u2} M (v i) (v j)) -> (Ne.{succ u4} ι i j) -> (Eq.{succ u3} N (MultilinearMap.toFun.{u1, u2, u3, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.259 : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5 (MultilinearMap.mk.{u1, u2, u3, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.259 : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5 f (fun [inst._@.Mathlib.LinearAlgebra.Multilinear.Basic.93.Mathlib.LinearAlgebra.Alternating._hyg.2122 : DecidableEq.{succ u4} ι] => h₁ (fun (a : ι) (b : ι) => inst._@.Mathlib.LinearAlgebra.Multilinear.Basic.93.Mathlib.LinearAlgebra.Alternating._hyg.2122 a b)) (fun [inst._@.Mathlib.LinearAlgebra.Multilinear.Basic.139.Mathlib.LinearAlgebra.Alternating._hyg.2124 : DecidableEq.{succ u4} ι] => h₂ (fun (a : ι) (b : ι) => inst._@.Mathlib.LinearAlgebra.Multilinear.Basic.139.Mathlib.LinearAlgebra.Alternating._hyg.2124 a b))) v) (OfNat.ofNat.{u3} N 0 (Zero.toOfNat0.{u3} N (AddMonoid.toZero.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)))))), Eq.{max (max (succ u2) (succ u3)) (succ u4)} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (AlternatingMap.toMultilinearMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι (AlternatingMap.mk.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι (MultilinearMap.mk.{u1, u2, u3, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.259 : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5 f (fun [inst._@.Mathlib.LinearAlgebra.Multilinear.Basic.93.Mathlib.LinearAlgebra.Alternating._hyg.2122 : DecidableEq.{succ u4} ι] => h₁ (fun (a : ι) (b : ι) => inst._@.Mathlib.LinearAlgebra.Multilinear.Basic.93.Mathlib.LinearAlgebra.Alternating._hyg.2122 a b)) (fun [inst._@.Mathlib.LinearAlgebra.Multilinear.Basic.139.Mathlib.LinearAlgebra.Alternating._hyg.2124 : DecidableEq.{succ u4} ι] => h₂ (fun (a : ι) (b : ι) => inst._@.Mathlib.LinearAlgebra.Multilinear.Basic.139.Mathlib.LinearAlgebra.Alternating._hyg.2124 a b))) h₃)) (MultilinearMap.mk.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5 f h₁ h₂)
Case conversion may be inaccurate. Consider using '#align alternating_map.coe_multilinear_map_mk AlternatingMap.coe_multilinearMap_mkₓ'. -/
@[simp]
theorem coe_multilinearMap_mk (f : (ι → M) → N) (h₁ h₂ h₃) :
    ((⟨f, h₁, h₂, h₃⟩ : AlternatingMap R M N ι) : MultilinearMap R (fun i : ι => M) N) =
      ⟨f, @h₁, @h₂⟩ :=
  rfl
#align alternating_map.coe_multilinear_map_mk AlternatingMap.coe_multilinearMap_mk

end Coercions

/-!
### Simp-normal forms of the structure fields

These are expressed in terms of `⇑f` instead of `f.to_fun`.
-/


/- warning: alternating_map.map_add -> AlternatingMap.map_add is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (v : ι -> M) [_inst_10 : DecidableEq.{succ u4} ι] (i : ι) (x : M) (y : M), Eq.{succ u3} N (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f (Function.update.{succ u4, succ u2} ι (fun (ᾰ : ι) => M) (fun (a : ι) (b : ι) => _inst_10 a b) v i (HAdd.hAdd.{u2, u2, u2} M M M (instHAdd.{u2} M (AddZeroClass.toHasAdd.{u2} M (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2)))) x y))) (HAdd.hAdd.{u3, u3, u3} N N N (instHAdd.{u3} N (AddZeroClass.toHasAdd.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)))) (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f (Function.update.{succ u4, succ u2} ι (fun (ᾰ : ι) => M) (fun (a : ι) (b : ι) => _inst_10 a b) v i x)) (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f (Function.update.{succ u4, succ u2} ι (fun (ᾰ : ι) => M) (fun (a : ι) (b : ι) => _inst_10 a b) v i y)))
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (v : ι -> M) [_inst_10 : DecidableEq.{succ u4} ι] (i : ι) (x : M) (y : M), Eq.{succ u3} N (FunLike.coe.{max (max (succ u2) (succ u3)) (succ u4), max (succ u2) (succ u4), succ u3} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f (Function.update.{succ u4, succ u2} ι (fun (ᾰ : ι) => M) (fun (a : ι) (b : ι) => _inst_10 a b) v i (HAdd.hAdd.{u2, u2, u2} M M M (instHAdd.{u2} M (AddZeroClass.toAdd.{u2} M (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2)))) x y))) (HAdd.hAdd.{u3, u3, u3} N N N (instHAdd.{u3} N (AddZeroClass.toAdd.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)))) (FunLike.coe.{max (max (succ u2) (succ u3)) (succ u4), max (succ u2) (succ u4), succ u3} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f (Function.update.{succ u4, succ u2} ι (fun (ᾰ : ι) => M) (fun (a : ι) (b : ι) => _inst_10 a b) v i x)) (FunLike.coe.{max (max (succ u2) (succ u3)) (succ u4), max (succ u2) (succ u4), succ u3} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f (Function.update.{succ u4, succ u2} ι (fun (ᾰ : ι) => M) (fun (a : ι) (b : ι) => _inst_10 a b) v i y)))
Case conversion may be inaccurate. Consider using '#align alternating_map.map_add AlternatingMap.map_addₓ'. -/
@[simp]
theorem map_add [DecidableEq ι] (i : ι) (x y : M) :
    f (update v i (x + y)) = f (update v i x) + f (update v i y) :=
  f.toMultilinearMap.map_add' v i x y
#align alternating_map.map_add AlternatingMap.map_add

/- warning: alternating_map.map_sub -> AlternatingMap.map_sub is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M' : Type.{u2}} [_inst_6 : AddCommGroup.{u2} M'] [_inst_7 : Module.{u1, u2} R M' _inst_1 (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6)] {N' : Type.{u3}} [_inst_8 : AddCommGroup.{u3} N'] [_inst_9 : Module.{u1, u3} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)] {ι : Type.{u4}} (g' : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (v' : ι -> M') [_inst_10 : DecidableEq.{succ u4} ι] (i : ι) (x : M') (y : M'), Eq.{succ u3} N' (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) => (ι -> M') -> N') (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) g' (Function.update.{succ u4, succ u2} ι (fun (ᾰ : ι) => M') (fun (a : ι) (b : ι) => _inst_10 a b) v' i (HSub.hSub.{u2, u2, u2} M' M' M' (instHSub.{u2} M' (SubNegMonoid.toHasSub.{u2} M' (AddGroup.toSubNegMonoid.{u2} M' (AddCommGroup.toAddGroup.{u2} M' _inst_6)))) x y))) (HSub.hSub.{u3, u3, u3} N' N' N' (instHSub.{u3} N' (SubNegMonoid.toHasSub.{u3} N' (AddGroup.toSubNegMonoid.{u3} N' (AddCommGroup.toAddGroup.{u3} N' _inst_8)))) (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) => (ι -> M') -> N') (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) g' (Function.update.{succ u4, succ u2} ι (fun (ᾰ : ι) => M') (fun (a : ι) (b : ι) => _inst_10 a b) v' i x)) (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) => (ι -> M') -> N') (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) g' (Function.update.{succ u4, succ u2} ι (fun (ᾰ : ι) => M') (fun (a : ι) (b : ι) => _inst_10 a b) v' i y)))
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M' : Type.{u2}} [_inst_6 : AddCommGroup.{u2} M'] [_inst_7 : Module.{u1, u2} R M' _inst_1 (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6)] {N' : Type.{u3}} [_inst_8 : AddCommGroup.{u3} N'] [_inst_9 : Module.{u1, u3} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)] {ι : Type.{u4}} (g' : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (v' : ι -> M') [_inst_10 : DecidableEq.{succ u4} ι] (i : ι) (x : M') (y : M'), Eq.{succ u3} N' (FunLike.coe.{max (max (succ u2) (succ u3)) (succ u4), max (succ u2) (succ u4), succ u3} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (ι -> M') (fun (_x : ι -> M') => N') (AlternatingMap.funLike.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) g' (Function.update.{succ u4, succ u2} ι (fun (ᾰ : ι) => M') (fun (a : ι) (b : ι) => _inst_10 a b) v' i (HSub.hSub.{u2, u2, u2} M' M' M' (instHSub.{u2} M' (SubNegMonoid.toSub.{u2} M' (AddGroup.toSubNegMonoid.{u2} M' (AddCommGroup.toAddGroup.{u2} M' _inst_6)))) x y))) (HSub.hSub.{u3, u3, u3} N' N' N' (instHSub.{u3} N' (SubNegMonoid.toSub.{u3} N' (AddGroup.toSubNegMonoid.{u3} N' (AddCommGroup.toAddGroup.{u3} N' _inst_8)))) (FunLike.coe.{max (max (succ u2) (succ u3)) (succ u4), max (succ u2) (succ u4), succ u3} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (ι -> M') (fun (_x : ι -> M') => N') (AlternatingMap.funLike.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) g' (Function.update.{succ u4, succ u2} ι (fun (ᾰ : ι) => M') (fun (a : ι) (b : ι) => _inst_10 a b) v' i x)) (FunLike.coe.{max (max (succ u2) (succ u3)) (succ u4), max (succ u2) (succ u4), succ u3} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (ι -> M') (fun (_x : ι -> M') => N') (AlternatingMap.funLike.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) g' (Function.update.{succ u4, succ u2} ι (fun (ᾰ : ι) => M') (fun (a : ι) (b : ι) => _inst_10 a b) v' i y)))
Case conversion may be inaccurate. Consider using '#align alternating_map.map_sub AlternatingMap.map_subₓ'. -/
@[simp]
theorem map_sub [DecidableEq ι] (i : ι) (x y : M') :
    g' (update v' i (x - y)) = g' (update v' i x) - g' (update v' i y) :=
  g'.toMultilinearMap.map_sub v' i x y
#align alternating_map.map_sub AlternatingMap.map_sub

/- warning: alternating_map.map_neg -> AlternatingMap.map_neg is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M' : Type.{u2}} [_inst_6 : AddCommGroup.{u2} M'] [_inst_7 : Module.{u1, u2} R M' _inst_1 (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6)] {N' : Type.{u3}} [_inst_8 : AddCommGroup.{u3} N'] [_inst_9 : Module.{u1, u3} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)] {ι : Type.{u4}} (g' : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (v' : ι -> M') [_inst_10 : DecidableEq.{succ u4} ι] (i : ι) (x : M'), Eq.{succ u3} N' (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) => (ι -> M') -> N') (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) g' (Function.update.{succ u4, succ u2} ι (fun (ᾰ : ι) => M') (fun (a : ι) (b : ι) => _inst_10 a b) v' i (Neg.neg.{u2} M' (SubNegMonoid.toHasNeg.{u2} M' (AddGroup.toSubNegMonoid.{u2} M' (AddCommGroup.toAddGroup.{u2} M' _inst_6))) x))) (Neg.neg.{u3} N' (SubNegMonoid.toHasNeg.{u3} N' (AddGroup.toSubNegMonoid.{u3} N' (AddCommGroup.toAddGroup.{u3} N' _inst_8))) (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) => (ι -> M') -> N') (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) g' (Function.update.{succ u4, succ u2} ι (fun (ᾰ : ι) => M') (fun (a : ι) (b : ι) => _inst_10 a b) v' i x)))
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M' : Type.{u2}} [_inst_6 : AddCommGroup.{u2} M'] [_inst_7 : Module.{u1, u2} R M' _inst_1 (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6)] {N' : Type.{u3}} [_inst_8 : AddCommGroup.{u3} N'] [_inst_9 : Module.{u1, u3} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)] {ι : Type.{u4}} (g' : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (v' : ι -> M') [_inst_10 : DecidableEq.{succ u4} ι] (i : ι) (x : M'), Eq.{succ u3} N' (FunLike.coe.{max (max (succ u2) (succ u3)) (succ u4), max (succ u2) (succ u4), succ u3} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (ι -> M') (fun (_x : ι -> M') => N') (AlternatingMap.funLike.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) g' (Function.update.{succ u4, succ u2} ι (fun (ᾰ : ι) => M') (fun (a : ι) (b : ι) => _inst_10 a b) v' i (Neg.neg.{u2} M' (NegZeroClass.toNeg.{u2} M' (SubNegZeroMonoid.toNegZeroClass.{u2} M' (SubtractionMonoid.toSubNegZeroMonoid.{u2} M' (SubtractionCommMonoid.toSubtractionMonoid.{u2} M' (AddCommGroup.toDivisionAddCommMonoid.{u2} M' _inst_6))))) x))) (Neg.neg.{u3} N' (NegZeroClass.toNeg.{u3} N' (SubNegZeroMonoid.toNegZeroClass.{u3} N' (SubtractionMonoid.toSubNegZeroMonoid.{u3} N' (SubtractionCommMonoid.toSubtractionMonoid.{u3} N' (AddCommGroup.toDivisionAddCommMonoid.{u3} N' _inst_8))))) (FunLike.coe.{max (max (succ u2) (succ u3)) (succ u4), max (succ u2) (succ u4), succ u3} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (ι -> M') (fun (_x : ι -> M') => N') (AlternatingMap.funLike.{u1, u2, u3, u4} R _inst_1 M' (AddCommGroup.toAddCommMonoid.{u2} M' _inst_6) _inst_7 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) g' (Function.update.{succ u4, succ u2} ι (fun (ᾰ : ι) => M') (fun (a : ι) (b : ι) => _inst_10 a b) v' i x)))
Case conversion may be inaccurate. Consider using '#align alternating_map.map_neg AlternatingMap.map_negₓ'. -/
@[simp]
theorem map_neg [DecidableEq ι] (i : ι) (x : M') : g' (update v' i (-x)) = -g' (update v' i x) :=
  g'.toMultilinearMap.map_neg v' i x
#align alternating_map.map_neg AlternatingMap.map_neg

#print AlternatingMap.map_smul /-
@[simp]
theorem map_smul [DecidableEq ι] (i : ι) (r : R) (x : M) :
    f (update v i (r • x)) = r • f (update v i x) :=
  f.toMultilinearMap.map_smul' v i r x
#align alternating_map.map_smul AlternatingMap.map_smul
-/

/- warning: alternating_map.map_eq_zero_of_eq -> AlternatingMap.map_eq_zero_of_eq is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (v : ι -> M) {i : ι} {j : ι}, (Eq.{succ u2} M (v i) (v j)) -> (Ne.{succ u4} ι i j) -> (Eq.{succ u3} N (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f v) (OfNat.ofNat.{u3} N 0 (OfNat.mk.{u3} N 0 (Zero.zero.{u3} N (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)))))))
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u4}} [_inst_2 : AddCommMonoid.{u4} M] [_inst_3 : Module.{u1, u4} R M _inst_1 _inst_2] {N : Type.{u2}} [_inst_4 : AddCommMonoid.{u2} N] [_inst_5 : Module.{u1, u2} R N _inst_1 _inst_4] {ι : Type.{u3}} (f : AlternatingMap.{u1, u4, u2, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (v : ι -> M) {i : ι} {j : ι}, (Eq.{succ u4} M (v i) (v j)) -> (Ne.{succ u3} ι i j) -> (Eq.{succ u2} N (FunLike.coe.{max (max (succ u4) (succ u2)) (succ u3), max (succ u4) (succ u3), succ u2} (AlternatingMap.{u1, u4, u2, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u1, u4, u2, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f v) (OfNat.ofNat.{u2} N 0 (Zero.toOfNat0.{u2} N (AddMonoid.toZero.{u2} N (AddCommMonoid.toAddMonoid.{u2} N _inst_4)))))
Case conversion may be inaccurate. Consider using '#align alternating_map.map_eq_zero_of_eq AlternatingMap.map_eq_zero_of_eqₓ'. -/
@[simp]
theorem map_eq_zero_of_eq (v : ι → M) {i j : ι} (h : v i = v j) (hij : i ≠ j) : f v = 0 :=
  f.map_eq_zero_of_eq' v i j h hij
#align alternating_map.map_eq_zero_of_eq AlternatingMap.map_eq_zero_of_eq

/- warning: alternating_map.map_coord_zero -> AlternatingMap.map_coord_zero is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) {m : ι -> M} (i : ι), (Eq.{succ u2} M (m i) (OfNat.ofNat.{u2} M 0 (OfNat.mk.{u2} M 0 (Zero.zero.{u2} M (AddZeroClass.toHasZero.{u2} M (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2))))))) -> (Eq.{succ u3} N (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f m) (OfNat.ofNat.{u3} N 0 (OfNat.mk.{u3} N 0 (Zero.zero.{u3} N (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)))))))
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u4}} [_inst_2 : AddCommMonoid.{u4} M] [_inst_3 : Module.{u1, u4} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u2}} (f : AlternatingMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) {m : ι -> M} (i : ι), (Eq.{succ u4} M (m i) (OfNat.ofNat.{u4} M 0 (Zero.toOfNat0.{u4} M (AddMonoid.toZero.{u4} M (AddCommMonoid.toAddMonoid.{u4} M _inst_2))))) -> (Eq.{succ u3} N (FunLike.coe.{max (max (succ u4) (succ u3)) (succ u2), max (succ u4) (succ u2), succ u3} (AlternatingMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f m) (OfNat.ofNat.{u3} N 0 (Zero.toOfNat0.{u3} N (AddMonoid.toZero.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)))))
Case conversion may be inaccurate. Consider using '#align alternating_map.map_coord_zero AlternatingMap.map_coord_zeroₓ'. -/
theorem map_coord_zero {m : ι → M} (i : ι) (h : m i = 0) : f m = 0 :=
  f.toMultilinearMap.map_coord_zero i h
#align alternating_map.map_coord_zero AlternatingMap.map_coord_zero

/- warning: alternating_map.map_update_zero -> AlternatingMap.map_update_zero is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) [_inst_10 : DecidableEq.{succ u4} ι] (m : ι -> M) (i : ι), Eq.{succ u3} N (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f (Function.update.{succ u4, succ u2} ι (fun (ᾰ : ι) => M) (fun (a : ι) (b : ι) => _inst_10 a b) m i (OfNat.ofNat.{u2} M 0 (OfNat.mk.{u2} M 0 (Zero.zero.{u2} M (AddZeroClass.toHasZero.{u2} M (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2)))))))) (OfNat.ofNat.{u3} N 0 (OfNat.mk.{u3} N 0 (Zero.zero.{u3} N (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))))))
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) [_inst_10 : DecidableEq.{succ u4} ι] (m : ι -> M) (i : ι), Eq.{succ u3} N (FunLike.coe.{max (max (succ u2) (succ u3)) (succ u4), max (succ u2) (succ u4), succ u3} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f (Function.update.{succ u4, succ u2} ι (fun (ᾰ : ι) => M) (fun (a : ι) (b : ι) => _inst_10 a b) m i (OfNat.ofNat.{u2} M 0 (Zero.toOfNat0.{u2} M (AddMonoid.toZero.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2)))))) (OfNat.ofNat.{u3} N 0 (Zero.toOfNat0.{u3} N (AddMonoid.toZero.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))))
Case conversion may be inaccurate. Consider using '#align alternating_map.map_update_zero AlternatingMap.map_update_zeroₓ'. -/
@[simp]
theorem map_update_zero [DecidableEq ι] (m : ι → M) (i : ι) : f (update m i 0) = 0 :=
  f.toMultilinearMap.map_update_zero m i
#align alternating_map.map_update_zero AlternatingMap.map_update_zero

/- warning: alternating_map.map_zero -> AlternatingMap.map_zero is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) [_inst_10 : Nonempty.{succ u4} ι], Eq.{succ u3} N (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f (OfNat.ofNat.{max u4 u2} (ι -> M) 0 (OfNat.mk.{max u4 u2} (ι -> M) 0 (Zero.zero.{max u4 u2} (ι -> M) (Pi.instZero.{u4, u2} ι (fun (ᾰ : ι) => M) (fun (i : ι) => AddZeroClass.toHasZero.{u2} M (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2)))))))) (OfNat.ofNat.{u3} N 0 (OfNat.mk.{u3} N 0 (Zero.zero.{u3} N (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))))))
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) [_inst_10 : Nonempty.{succ u4} ι], Eq.{succ u3} N (FunLike.coe.{max (max (succ u2) (succ u3)) (succ u4), max (succ u2) (succ u4), succ u3} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f (OfNat.ofNat.{max u2 u4} (ι -> M) 0 (Zero.toOfNat0.{max u2 u4} (ι -> M) (Pi.instZero.{u4, u2} ι (fun (a._@.Mathlib.LinearAlgebra.Alternating._hyg.836 : ι) => M) (fun (i : ι) => AddMonoid.toZero.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2)))))) (OfNat.ofNat.{u3} N 0 (Zero.toOfNat0.{u3} N (AddMonoid.toZero.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))))
Case conversion may be inaccurate. Consider using '#align alternating_map.map_zero AlternatingMap.map_zeroₓ'. -/
@[simp]
theorem map_zero [Nonempty ι] : f 0 = 0 :=
  f.toMultilinearMap.map_zero
#align alternating_map.map_zero AlternatingMap.map_zero

/- warning: alternating_map.map_eq_zero_of_not_injective -> AlternatingMap.map_eq_zero_of_not_injective is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (v : ι -> M), (Not (Function.Injective.{succ u4, succ u2} ι M v)) -> (Eq.{succ u3} N (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f v) (OfNat.ofNat.{u3} N 0 (OfNat.mk.{u3} N 0 (Zero.zero.{u3} N (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)))))))
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u3}} [_inst_2 : AddCommMonoid.{u3} M] [_inst_3 : Module.{u1, u3} R M _inst_1 _inst_2] {N : Type.{u2}} [_inst_4 : AddCommMonoid.{u2} N] [_inst_5 : Module.{u1, u2} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : AlternatingMap.{u1, u3, u2, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (v : ι -> M), (Not (Function.Injective.{succ u4, succ u3} ι M v)) -> (Eq.{succ u2} N (FunLike.coe.{max (max (succ u3) (succ u2)) (succ u4), max (succ u3) (succ u4), succ u2} (AlternatingMap.{u1, u3, u2, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u1, u3, u2, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f v) (OfNat.ofNat.{u2} N 0 (Zero.toOfNat0.{u2} N (AddMonoid.toZero.{u2} N (AddCommMonoid.toAddMonoid.{u2} N _inst_4)))))
Case conversion may be inaccurate. Consider using '#align alternating_map.map_eq_zero_of_not_injective AlternatingMap.map_eq_zero_of_not_injectiveₓ'. -/
theorem map_eq_zero_of_not_injective (v : ι → M) (hv : ¬Function.Injective v) : f v = 0 :=
  by
  rw [Function.Injective] at hv
  push_neg  at hv
  rcases hv with ⟨i₁, i₂, heq, hne⟩
  exact f.map_eq_zero_of_eq v HEq hne
#align alternating_map.map_eq_zero_of_not_injective AlternatingMap.map_eq_zero_of_not_injective

/-!
### Algebraic structure inherited from `multilinear_map`

`alternating_map` carries the same `add_comm_monoid`, `add_comm_group`, and `module` structure
as `multilinear_map`
-/


section SMul

variable {S : Type _} [Monoid S] [DistribMulAction S N] [SMulCommClass R S N]

instance : SMul S (AlternatingMap R M N ι) :=
  ⟨fun c f =>
    { (c • f : MultilinearMap R (fun i : ι => M) N) with
      map_eq_zero_of_eq' := fun v i j h hij => by simp [f.map_eq_zero_of_eq v h hij] }⟩

/- warning: alternating_map.smul_apply -> AlternatingMap.smul_apply is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) {S : Type.{u5}} [_inst_10 : Monoid.{u5} S] [_inst_11 : DistribMulAction.{u5, u3} S N _inst_10 (AddCommMonoid.toAddMonoid.{u3} N _inst_4)] [_inst_12 : SMulCommClass.{u1, u5, u3} R S N (SMulZeroClass.toHasSmul.{u1, u3} R N (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (SMulWithZero.toSmulZeroClass.{u1, u3} R N (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)))) (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (MulActionWithZero.toSMulWithZero.{u1, u3} R N (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (Module.toMulActionWithZero.{u1, u3} R N _inst_1 _inst_4 _inst_5)))) (SMulZeroClass.toHasSmul.{u5, u3} S N (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (DistribSMul.toSmulZeroClass.{u5, u3} S N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)) (DistribMulAction.toDistribSMul.{u5, u3} S N _inst_10 (AddCommMonoid.toAddMonoid.{u3} N _inst_4) _inst_11)))] (c : S) (m : ι -> M), Eq.{succ u3} N (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (SMul.smul.{u5, max u2 u3 u4} S (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.smul.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι S _inst_10 _inst_11 _inst_12) c f) m) (SMul.smul.{u5, u3} S N (SMulZeroClass.toHasSmul.{u5, u3} S N (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (DistribSMul.toSmulZeroClass.{u5, u3} S N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)) (DistribMulAction.toDistribSMul.{u5, u3} S N _inst_10 (AddCommMonoid.toAddMonoid.{u3} N _inst_4) _inst_11))) c (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f m))
but is expected to have type
  forall {R : Type.{u2}} [_inst_1 : Semiring.{u2} R] {M : Type.{u4}} [_inst_2 : AddCommMonoid.{u4} M] [_inst_3 : Module.{u2, u4} R M _inst_1 _inst_2] {N : Type.{u5}} [_inst_4 : AddCommMonoid.{u5} N] [_inst_5 : Module.{u2, u5} R N _inst_1 _inst_4] {ι : Type.{u3}} (f : AlternatingMap.{u2, u4, u5, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) {S : Type.{u1}} [_inst_10 : Monoid.{u1} S] [_inst_11 : DistribMulAction.{u1, u5} S N _inst_10 (AddCommMonoid.toAddMonoid.{u5} N _inst_4)] [_inst_12 : SMulCommClass.{u2, u1, u5} R S N (SMulZeroClass.toSMul.{u2, u5} R N (AddMonoid.toZero.{u5} N (AddCommMonoid.toAddMonoid.{u5} N _inst_4)) (SMulWithZero.toSMulZeroClass.{u2, u5} R N (MonoidWithZero.toZero.{u2} R (Semiring.toMonoidWithZero.{u2} R _inst_1)) (AddMonoid.toZero.{u5} N (AddCommMonoid.toAddMonoid.{u5} N _inst_4)) (MulActionWithZero.toSMulWithZero.{u2, u5} R N (Semiring.toMonoidWithZero.{u2} R _inst_1) (AddMonoid.toZero.{u5} N (AddCommMonoid.toAddMonoid.{u5} N _inst_4)) (Module.toMulActionWithZero.{u2, u5} R N _inst_1 _inst_4 _inst_5)))) (SMulZeroClass.toSMul.{u1, u5} S N (AddMonoid.toZero.{u5} N (AddCommMonoid.toAddMonoid.{u5} N _inst_4)) (DistribSMul.toSMulZeroClass.{u1, u5} S N (AddMonoid.toAddZeroClass.{u5} N (AddCommMonoid.toAddMonoid.{u5} N _inst_4)) (DistribMulAction.toDistribSMul.{u1, u5} S N _inst_10 (AddCommMonoid.toAddMonoid.{u5} N _inst_4) _inst_11)))] (c : S) (m : ι -> M), Eq.{succ u5} N (FunLike.coe.{max (max (succ u4) (succ u5)) (succ u3), max (succ u4) (succ u3), succ u5} (AlternatingMap.{u2, u4, u5, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u2, u4, u5, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (HSMul.hSMul.{u1, max (max u4 u5) u3, max (max u4 u5) u3} S (AlternatingMap.{u2, u4, u5, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u2, u4, u5, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (instHSMul.{u1, max (max u4 u5) u3} S (AlternatingMap.{u2, u4, u5, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.smul.{u2, u4, u5, u3, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι S _inst_10 _inst_11 _inst_12)) c f) m) (HSMul.hSMul.{u1, u5, u5} S N N (instHSMul.{u1, u5} S N (SMulZeroClass.toSMul.{u1, u5} S N (AddMonoid.toZero.{u5} N (AddCommMonoid.toAddMonoid.{u5} N _inst_4)) (DistribSMul.toSMulZeroClass.{u1, u5} S N (AddMonoid.toAddZeroClass.{u5} N (AddCommMonoid.toAddMonoid.{u5} N _inst_4)) (DistribMulAction.toDistribSMul.{u1, u5} S N _inst_10 (AddCommMonoid.toAddMonoid.{u5} N _inst_4) _inst_11)))) c (FunLike.coe.{max (max (succ u4) (succ u5)) (succ u3), max (succ u4) (succ u3), succ u5} (AlternatingMap.{u2, u4, u5, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u2, u4, u5, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f m))
Case conversion may be inaccurate. Consider using '#align alternating_map.smul_apply AlternatingMap.smul_applyₓ'. -/
@[simp]
theorem smul_apply (c : S) (m : ι → M) : (c • f) m = c • f m :=
  rfl
#align alternating_map.smul_apply AlternatingMap.smul_apply

/- warning: alternating_map.coe_smul -> AlternatingMap.coe_smul is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) {S : Type.{u5}} [_inst_10 : Monoid.{u5} S] [_inst_11 : DistribMulAction.{u5, u3} S N _inst_10 (AddCommMonoid.toAddMonoid.{u3} N _inst_4)] [_inst_12 : SMulCommClass.{u1, u5, u3} R S N (SMulZeroClass.toHasSmul.{u1, u3} R N (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (SMulWithZero.toSmulZeroClass.{u1, u3} R N (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)))) (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (MulActionWithZero.toSMulWithZero.{u1, u3} R N (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (Module.toMulActionWithZero.{u1, u3} R N _inst_1 _inst_4 _inst_5)))) (SMulZeroClass.toHasSmul.{u5, u3} S N (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (DistribSMul.toSmulZeroClass.{u5, u3} S N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)) (DistribMulAction.toDistribSMul.{u5, u3} S N _inst_10 (AddCommMonoid.toAddMonoid.{u3} N _inst_4) _inst_11)))] (c : S), Eq.{max (succ u4) (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) ((fun (a : Sort.{max (succ u2) (succ u3) (succ u4)}) (b : Sort.{max (succ u4) (succ u2) (succ u3)}) [self : HasLiftT.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} a b] => self.0) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (HasLiftT.mk.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (CoeTCₓ.coe.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (coeBase.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (AlternatingMap.coe.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))) (SMul.smul.{u5, max u2 u3 u4} S (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.smul.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι S _inst_10 _inst_11 _inst_12) c f)) (SMul.smul.{u5, max u4 u2 u3} S (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (MultilinearMap.hasSmul.{u2, u3, u4, u5, u1} ι (fun (i : ι) => M) N (fun (i : ι) => _inst_2) _inst_4 S R _inst_10 _inst_1 (fun (i : ι) => _inst_3) _inst_11 _inst_5 _inst_12) c ((fun (a : Sort.{max (succ u2) (succ u3) (succ u4)}) (b : Sort.{max (succ u4) (succ u2) (succ u3)}) [self : HasLiftT.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} a b] => self.0) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (HasLiftT.mk.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (CoeTCₓ.coe.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (coeBase.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (AlternatingMap.coe.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))) f))
but is expected to have type
  forall {R : Type.{u2}} [_inst_1 : Semiring.{u2} R] {M : Type.{u5}} [_inst_2 : AddCommMonoid.{u5} M] [_inst_3 : Module.{u2, u5} R M _inst_1 _inst_2] {N : Type.{u4}} [_inst_4 : AddCommMonoid.{u4} N] [_inst_5 : Module.{u2, u4} R N _inst_1 _inst_4] {ι : Type.{u3}} (f : AlternatingMap.{u2, u5, u4, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) {S : Type.{u1}} [_inst_10 : Monoid.{u1} S] [_inst_11 : DistribMulAction.{u1, u4} S N _inst_10 (AddCommMonoid.toAddMonoid.{u4} N _inst_4)] [_inst_12 : SMulCommClass.{u2, u1, u4} R S N (SMulZeroClass.toSMul.{u2, u4} R N (AddMonoid.toZero.{u4} N (AddCommMonoid.toAddMonoid.{u4} N _inst_4)) (SMulWithZero.toSMulZeroClass.{u2, u4} R N (MonoidWithZero.toZero.{u2} R (Semiring.toMonoidWithZero.{u2} R _inst_1)) (AddMonoid.toZero.{u4} N (AddCommMonoid.toAddMonoid.{u4} N _inst_4)) (MulActionWithZero.toSMulWithZero.{u2, u4} R N (Semiring.toMonoidWithZero.{u2} R _inst_1) (AddMonoid.toZero.{u4} N (AddCommMonoid.toAddMonoid.{u4} N _inst_4)) (Module.toMulActionWithZero.{u2, u4} R N _inst_1 _inst_4 _inst_5)))) (SMulZeroClass.toSMul.{u1, u4} S N (AddMonoid.toZero.{u4} N (AddCommMonoid.toAddMonoid.{u4} N _inst_4)) (DistribSMul.toSMulZeroClass.{u1, u4} S N (AddMonoid.toAddZeroClass.{u4} N (AddCommMonoid.toAddMonoid.{u4} N _inst_4)) (DistribMulAction.toDistribSMul.{u1, u4} S N _inst_10 (AddCommMonoid.toAddMonoid.{u4} N _inst_4) _inst_11)))] (c : S), Eq.{max (max (succ u5) (succ u4)) (succ u3)} (MultilinearMap.{u2, u5, u4, u3} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (AlternatingMap.toMultilinearMap.{u2, u5, u4, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι (HSMul.hSMul.{u1, max (max u5 u4) u3, max (max u5 u4) u3} S (AlternatingMap.{u2, u5, u4, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u2, u5, u4, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (instHSMul.{u1, max (max u5 u4) u3} S (AlternatingMap.{u2, u5, u4, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.smul.{u2, u5, u4, u3, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι S _inst_10 _inst_11 _inst_12)) c f)) (HSMul.hSMul.{u1, max (max u5 u4) u3, max (max u5 u4) u3} S (MultilinearMap.{u2, u5, u4, u3} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.259 : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (MultilinearMap.{u2, u5, u4, u3} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (instHSMul.{u1, max (max u5 u4) u3} S (MultilinearMap.{u2, u5, u4, u3} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.259 : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (MultilinearMap.instSMulMultilinearMap.{u5, u4, u3, u1, u2} ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.259 : ι) => M) N (fun (i : ι) => _inst_2) _inst_4 S R _inst_10 _inst_1 (fun (i : ι) => _inst_3) _inst_11 _inst_5 _inst_12)) c (AlternatingMap.toMultilinearMap.{u2, u5, u4, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι f))
Case conversion may be inaccurate. Consider using '#align alternating_map.coe_smul AlternatingMap.coe_smulₓ'. -/
@[norm_cast]
theorem coe_smul (c : S) :
    ((c • f : AlternatingMap R M N ι) : MultilinearMap R (fun i : ι => M) N) = c • f :=
  rfl
#align alternating_map.coe_smul AlternatingMap.coe_smul

/- warning: alternating_map.coe_fn_smul -> AlternatingMap.coeFn_smul is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} {S : Type.{u5}} [_inst_10 : Monoid.{u5} S] [_inst_11 : DistribMulAction.{u5, u3} S N _inst_10 (AddCommMonoid.toAddMonoid.{u3} N _inst_4)] [_inst_12 : SMulCommClass.{u1, u5, u3} R S N (SMulZeroClass.toHasSmul.{u1, u3} R N (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (SMulWithZero.toSmulZeroClass.{u1, u3} R N (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)))) (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (MulActionWithZero.toSMulWithZero.{u1, u3} R N (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (Module.toMulActionWithZero.{u1, u3} R N _inst_1 _inst_4 _inst_5)))) (SMulZeroClass.toHasSmul.{u5, u3} S N (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (DistribSMul.toSmulZeroClass.{u5, u3} S N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)) (DistribMulAction.toDistribSMul.{u5, u3} S N _inst_10 (AddCommMonoid.toAddMonoid.{u3} N _inst_4) _inst_11)))] (c : S) (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι), Eq.{succ (max (max u4 u2) u3)} ((ι -> M) -> N) (coeFn.{succ (max u2 u3 u4), succ (max (max u4 u2) u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (SMul.smul.{u5, max u2 u3 u4} S (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.smul.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι S _inst_10 _inst_11 _inst_12) c f)) (SMul.smul.{u5, max (max u4 u2) u3} S ((ι -> M) -> N) (Function.hasSMul.{max u4 u2, u5, u3} (ι -> M) S N (SMulZeroClass.toHasSmul.{u5, u3} S N (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (DistribSMul.toSmulZeroClass.{u5, u3} S N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)) (DistribMulAction.toDistribSMul.{u5, u3} S N _inst_10 (AddCommMonoid.toAddMonoid.{u3} N _inst_4) _inst_11)))) c (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f))
but is expected to have type
  forall {R : Type.{u5}} [_inst_1 : Semiring.{u5} R] {M : Type.{u4}} [_inst_2 : AddCommMonoid.{u4} M] [_inst_3 : Module.{u5, u4} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u5, u3} R N _inst_1 _inst_4] {ι : Type.{u2}} {S : Type.{u1}} [_inst_10 : Monoid.{u1} S] [_inst_11 : DistribMulAction.{u1, u3} S N _inst_10 (AddCommMonoid.toAddMonoid.{u3} N _inst_4)] [_inst_12 : SMulCommClass.{u5, u1, u3} R S N (SMulZeroClass.toSMul.{u5, u3} R N (AddMonoid.toZero.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)) (SMulWithZero.toSMulZeroClass.{u5, u3} R N (MonoidWithZero.toZero.{u5} R (Semiring.toMonoidWithZero.{u5} R _inst_1)) (AddMonoid.toZero.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)) (MulActionWithZero.toSMulWithZero.{u5, u3} R N (Semiring.toMonoidWithZero.{u5} R _inst_1) (AddMonoid.toZero.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)) (Module.toMulActionWithZero.{u5, u3} R N _inst_1 _inst_4 _inst_5)))) (SMulZeroClass.toSMul.{u1, u3} S N (AddMonoid.toZero.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)) (DistribSMul.toSMulZeroClass.{u1, u3} S N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)) (DistribMulAction.toDistribSMul.{u1, u3} S N _inst_10 (AddCommMonoid.toAddMonoid.{u3} N _inst_4) _inst_11)))] (c : S) (f : AlternatingMap.{u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι), Eq.{max (max (succ u4) (succ u3)) (succ u2)} ((ι -> M) -> N) (FunLike.coe.{max (max (succ u4) (succ u3)) (succ u2), max (succ u4) (succ u2), succ u3} (AlternatingMap.{u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (HSMul.hSMul.{u1, max (max u4 u3) u2, max (max u4 u3) u2} S (AlternatingMap.{u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (instHSMul.{u1, max (max u4 u3) u2} S (AlternatingMap.{u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.smul.{u5, u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι S _inst_10 _inst_11 _inst_12)) c f)) (HSMul.hSMul.{u1, max (max u4 u3) u2, max (max u4 u3) u2} S ((ι -> M) -> N) ((ι -> M) -> N) (instHSMul.{u1, max (max u4 u3) u2} S ((ι -> M) -> N) (Pi.instSMul.{max u4 u2, u3, u1} (ι -> M) S (fun (a : ι -> M) => N) (fun (i : ι -> M) => SMulZeroClass.toSMul.{u1, u3} S N (AddMonoid.toZero.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)) (DistribSMul.toSMulZeroClass.{u1, u3} S N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)) (DistribMulAction.toDistribSMul.{u1, u3} S N _inst_10 (AddCommMonoid.toAddMonoid.{u3} N _inst_4) _inst_11))))) c (FunLike.coe.{max (max (succ u4) (succ u3)) (succ u2), max (succ u4) (succ u2), succ u3} (AlternatingMap.{u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f))
Case conversion may be inaccurate. Consider using '#align alternating_map.coe_fn_smul AlternatingMap.coeFn_smulₓ'. -/
theorem coeFn_smul (c : S) (f : AlternatingMap R M N ι) : ⇑(c • f) = c • f :=
  rfl
#align alternating_map.coe_fn_smul AlternatingMap.coeFn_smul

instance [DistribMulAction Sᵐᵒᵖ N] [IsCentralScalar S N] :
    IsCentralScalar S (AlternatingMap R M N ι) :=
  ⟨fun c f => ext fun x => op_smul_eq_smul _ _⟩

end SMul

instance : Add (AlternatingMap R M N ι) :=
  ⟨fun a b =>
    { (a + b : MultilinearMap R (fun i : ι => M) N) with
      map_eq_zero_of_eq' := fun v i j h hij => by
        simp [a.map_eq_zero_of_eq v h hij, b.map_eq_zero_of_eq v h hij] }⟩

/- warning: alternating_map.add_apply -> AlternatingMap.add_apply is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (f' : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (v : ι -> M), Eq.{succ u3} N (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (HAdd.hAdd.{max u2 u3 u4, max u2 u3 u4, max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (instHAdd.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.add.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)) f f') v) (HAdd.hAdd.{u3, u3, u3} N N N (instHAdd.{u3} N (AddZeroClass.toHasAdd.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)))) (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f v) (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f' v))
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u3}} [_inst_2 : AddCommMonoid.{u3} M] [_inst_3 : Module.{u1, u3} R M _inst_1 _inst_2] {N : Type.{u4}} [_inst_4 : AddCommMonoid.{u4} N] [_inst_5 : Module.{u1, u4} R N _inst_1 _inst_4] {ι : Type.{u2}} (f : AlternatingMap.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (f' : AlternatingMap.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (v : ι -> M), Eq.{succ u4} N (FunLike.coe.{max (max (succ u3) (succ u4)) (succ u2), max (succ u3) (succ u2), succ u4} (AlternatingMap.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (HAdd.hAdd.{max (max u3 u4) u2, max (max u3 u4) u2, max (max u3 u4) u2} (AlternatingMap.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (instHAdd.{max (max u3 u4) u2} (AlternatingMap.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.add.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)) f f') v) (HAdd.hAdd.{u4, u4, u4} N N N (instHAdd.{u4} N (AddZeroClass.toAdd.{u4} N (AddMonoid.toAddZeroClass.{u4} N (AddCommMonoid.toAddMonoid.{u4} N _inst_4)))) (FunLike.coe.{max (max (succ u3) (succ u4)) (succ u2), max (succ u3) (succ u2), succ u4} (AlternatingMap.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f v) (FunLike.coe.{max (max (succ u3) (succ u4)) (succ u2), max (succ u3) (succ u2), succ u4} (AlternatingMap.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f' v))
Case conversion may be inaccurate. Consider using '#align alternating_map.add_apply AlternatingMap.add_applyₓ'. -/
@[simp]
theorem add_apply : (f + f') v = f v + f' v :=
  rfl
#align alternating_map.add_apply AlternatingMap.add_apply

/- warning: alternating_map.coe_add -> AlternatingMap.coe_add is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (f' : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι), Eq.{max (succ u4) (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) ((fun (a : Type.{max u2 u3 u4}) (b : Sort.{max (succ u4) (succ u2) (succ u3)}) [self : HasLiftT.{succ (max u2 u3 u4), max (succ u4) (succ u2) (succ u3)} a b] => self.0) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (HasLiftT.mk.{succ (max u2 u3 u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (CoeTCₓ.coe.{succ (max u2 u3 u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (coeBase.{succ (max u2 u3 u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (AlternatingMap.coe.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))) (HAdd.hAdd.{max u2 u3 u4, max u2 u3 u4, max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (instHAdd.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.add.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)) f f')) (HAdd.hAdd.{max u4 u2 u3, max u4 u2 u3, max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (instHAdd.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (MultilinearMap.hasAdd.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5)) ((fun (a : Sort.{max (succ u2) (succ u3) (succ u4)}) (b : Sort.{max (succ u4) (succ u2) (succ u3)}) [self : HasLiftT.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} a b] => self.0) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (HasLiftT.mk.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (CoeTCₓ.coe.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (coeBase.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (AlternatingMap.coe.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))) f) ((fun (a : Sort.{max (succ u2) (succ u3) (succ u4)}) (b : Sort.{max (succ u4) (succ u2) (succ u3)}) [self : HasLiftT.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} a b] => self.0) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (HasLiftT.mk.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (CoeTCₓ.coe.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (coeBase.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (AlternatingMap.coe.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))) f'))
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u4}} [_inst_2 : AddCommMonoid.{u4} M] [_inst_3 : Module.{u1, u4} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u2}} (f : AlternatingMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (f' : AlternatingMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι), Eq.{max (max (succ u4) (succ u3)) (succ u2)} (MultilinearMap.{u1, u4, u3, u2} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (AlternatingMap.toMultilinearMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι (HAdd.hAdd.{max (max u4 u3) u2, max (max u4 u3) u2, max (max u4 u3) u2} (AlternatingMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (instHAdd.{max (max u4 u3) u2} (AlternatingMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.add.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)) f f')) (HAdd.hAdd.{max (max u4 u3) u2, max (max u4 u3) u2, max (max u4 u3) u2} (MultilinearMap.{u1, u4, u3, u2} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (MultilinearMap.{u1, u4, u3, u2} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (MultilinearMap.{u1, u4, u3, u2} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (instHAdd.{max (max u4 u3) u2} (MultilinearMap.{u1, u4, u3, u2} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (MultilinearMap.instAddMultilinearMap.{u1, u4, u3, u2} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5)) (AlternatingMap.toMultilinearMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι f) (AlternatingMap.toMultilinearMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι f'))
Case conversion may be inaccurate. Consider using '#align alternating_map.coe_add AlternatingMap.coe_addₓ'. -/
@[norm_cast]
theorem coe_add : (↑(f + f') : MultilinearMap R (fun i : ι => M) N) = f + f' :=
  rfl
#align alternating_map.coe_add AlternatingMap.coe_add

instance : Zero (AlternatingMap R M N ι) :=
  ⟨{ (0 : MultilinearMap R (fun i : ι => M) N) with
      map_eq_zero_of_eq' := fun v i j h hij => by simp }⟩

/- warning: alternating_map.zero_apply -> AlternatingMap.zero_apply is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (v : ι -> M), Eq.{succ u3} N (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (OfNat.ofNat.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) 0 (OfNat.mk.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) 0 (Zero.zero.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.zero.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))) v) (OfNat.ofNat.{u3} N 0 (OfNat.mk.{u3} N 0 (Zero.zero.{u3} N (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))))))
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u3}} [_inst_2 : AddCommMonoid.{u3} M] [_inst_3 : Module.{u1, u3} R M _inst_1 _inst_2] {N : Type.{u4}} [_inst_4 : AddCommMonoid.{u4} N] [_inst_5 : Module.{u1, u4} R N _inst_1 _inst_4] {ι : Type.{u2}} (v : ι -> M), Eq.{succ u4} N (FunLike.coe.{max (max (succ u3) (succ u4)) (succ u2), max (succ u3) (succ u2), succ u4} (AlternatingMap.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (OfNat.ofNat.{max (max u3 u4) u2} (AlternatingMap.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) 0 (Zero.toOfNat0.{max (max u3 u4) u2} (AlternatingMap.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.zero.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) v) (OfNat.ofNat.{u4} N 0 (Zero.toOfNat0.{u4} N (AddMonoid.toZero.{u4} N (AddCommMonoid.toAddMonoid.{u4} N _inst_4))))
Case conversion may be inaccurate. Consider using '#align alternating_map.zero_apply AlternatingMap.zero_applyₓ'. -/
@[simp]
theorem zero_apply : (0 : AlternatingMap R M N ι) v = 0 :=
  rfl
#align alternating_map.zero_apply AlternatingMap.zero_apply

/- warning: alternating_map.coe_zero -> AlternatingMap.coe_zero is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}}, Eq.{max (succ u4) (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) ((fun (a : Sort.{max (succ u2) (succ u3) (succ u4)}) (b : Sort.{max (succ u4) (succ u2) (succ u3)}) [self : HasLiftT.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} a b] => self.0) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (HasLiftT.mk.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (CoeTCₓ.coe.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (coeBase.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (AlternatingMap.coe.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))) (OfNat.ofNat.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) 0 (OfNat.mk.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) 0 (Zero.zero.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.zero.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))))) (OfNat.ofNat.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) 0 (OfNat.mk.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) 0 (Zero.zero.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (MultilinearMap.hasZero.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5))))
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u4}} [_inst_2 : AddCommMonoid.{u4} M] [_inst_3 : Module.{u1, u4} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u2}}, Eq.{max (max (succ u4) (succ u3)) (succ u2)} (MultilinearMap.{u1, u4, u3, u2} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (AlternatingMap.toMultilinearMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι (OfNat.ofNat.{max (max u4 u3) u2} (AlternatingMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) 0 (Zero.toOfNat0.{max (max u4 u3) u2} (AlternatingMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.zero.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))) (OfNat.ofNat.{max (max u4 u3) u2} (MultilinearMap.{u1, u4, u3, u2} R ι (fun (i : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) 0 (Zero.toOfNat0.{max (max u4 u3) u2} (MultilinearMap.{u1, u4, u3, u2} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.259 : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (MultilinearMap.instZeroMultilinearMap.{u1, u4, u3, u2} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.259 : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5)))
Case conversion may be inaccurate. Consider using '#align alternating_map.coe_zero AlternatingMap.coe_zeroₓ'. -/
@[norm_cast]
theorem coe_zero : ((0 : AlternatingMap R M N ι) : MultilinearMap R (fun i : ι => M) N) = 0 :=
  rfl
#align alternating_map.coe_zero AlternatingMap.coe_zero

instance : Inhabited (AlternatingMap R M N ι) :=
  ⟨0⟩

instance : AddCommMonoid (AlternatingMap R M N ι) :=
  coe_injective.AddCommMonoid _ rfl (fun _ _ => rfl) fun _ _ => coeFn_smul _ _

instance : Neg (AlternatingMap R M N' ι) :=
  ⟨fun f =>
    { -(f : MultilinearMap R (fun i : ι => M) N') with
      map_eq_zero_of_eq' := fun v i j h hij => by simp [f.map_eq_zero_of_eq v h hij] }⟩

/- warning: alternating_map.neg_apply -> AlternatingMap.neg_apply is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N' : Type.{u3}} [_inst_8 : AddCommGroup.{u3} N'] [_inst_9 : Module.{u1, u3} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)] {ι : Type.{u4}} (g : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (m : ι -> M), Eq.{succ u3} N' (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) => (ι -> M) -> N') (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (Neg.neg.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.neg.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι) g) m) (Neg.neg.{u3} N' (SubNegMonoid.toHasNeg.{u3} N' (AddGroup.toSubNegMonoid.{u3} N' (AddCommGroup.toAddGroup.{u3} N' _inst_8))) (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) => (ι -> M) -> N') (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) g m))
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u3}} [_inst_2 : AddCommMonoid.{u3} M] [_inst_3 : Module.{u1, u3} R M _inst_1 _inst_2] {N' : Type.{u4}} [_inst_8 : AddCommGroup.{u4} N'] [_inst_9 : Module.{u1, u4} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8)] {ι : Type.{u2}} (g : AlternatingMap.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (m : ι -> M), Eq.{succ u4} N' (FunLike.coe.{max (max (succ u3) (succ u4)) (succ u2), max (succ u3) (succ u2), succ u4} (AlternatingMap.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (ι -> M) (fun (_x : ι -> M) => N') (AlternatingMap.funLike.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (Neg.neg.{max (max u3 u4) u2} (AlternatingMap.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AlternatingMap.neg.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι) g) m) (Neg.neg.{u4} N' (NegZeroClass.toNeg.{u4} N' (SubNegZeroMonoid.toNegZeroClass.{u4} N' (SubtractionMonoid.toSubNegZeroMonoid.{u4} N' (SubtractionCommMonoid.toSubtractionMonoid.{u4} N' (AddCommGroup.toDivisionAddCommMonoid.{u4} N' _inst_8))))) (FunLike.coe.{max (max (succ u3) (succ u4)) (succ u2), max (succ u3) (succ u2), succ u4} (AlternatingMap.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (ι -> M) (fun (_x : ι -> M) => N') (AlternatingMap.funLike.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) g m))
Case conversion may be inaccurate. Consider using '#align alternating_map.neg_apply AlternatingMap.neg_applyₓ'. -/
@[simp]
theorem neg_apply (m : ι → M) : (-g) m = -g m :=
  rfl
#align alternating_map.neg_apply AlternatingMap.neg_apply

/- warning: alternating_map.coe_neg -> AlternatingMap.coe_neg is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N' : Type.{u3}} [_inst_8 : AddCommGroup.{u3} N'] [_inst_9 : Module.{u1, u3} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)] {ι : Type.{u4}} (g : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι), Eq.{max (succ u4) (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) ((fun (a : Sort.{max (succ u2) (succ u3) (succ u4)}) (b : Sort.{max (succ u4) (succ u2) (succ u3)}) [self : HasLiftT.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} a b] => self.0) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (HasLiftT.mk.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (CoeTCₓ.coe.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (coeBase.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.coe.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι)))) (Neg.neg.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.neg.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι) g)) (Neg.neg.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.hasNeg.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9) ((fun (a : Sort.{max (succ u2) (succ u3) (succ u4)}) (b : Sort.{max (succ u4) (succ u2) (succ u3)}) [self : HasLiftT.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} a b] => self.0) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (HasLiftT.mk.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (CoeTCₓ.coe.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (coeBase.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.coe.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι)))) g))
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u4}} [_inst_2 : AddCommMonoid.{u4} M] [_inst_3 : Module.{u1, u4} R M _inst_1 _inst_2] {N' : Type.{u3}} [_inst_8 : AddCommGroup.{u3} N'] [_inst_9 : Module.{u1, u3} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)] {ι : Type.{u2}} (g : AlternatingMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι), Eq.{max (max (succ u4) (succ u3)) (succ u2)} (MultilinearMap.{u1, u4, u3, u2} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.toMultilinearMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι (Neg.neg.{max (max u4 u3) u2} (AlternatingMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.neg.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι) g)) (Neg.neg.{max (max u4 u3) u2} (MultilinearMap.{u1, u4, u3, u2} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instNegMultilinearMapToAddCommMonoid.{u1, u4, u3, u2} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.toMultilinearMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι g))
Case conversion may be inaccurate. Consider using '#align alternating_map.coe_neg AlternatingMap.coe_negₓ'. -/
@[norm_cast]
theorem coe_neg : ((-g : AlternatingMap R M N' ι) : MultilinearMap R (fun i : ι => M) N') = -g :=
  rfl
#align alternating_map.coe_neg AlternatingMap.coe_neg

instance : Sub (AlternatingMap R M N' ι) :=
  ⟨fun f g =>
    { (f - g : MultilinearMap R (fun i : ι => M) N') with
      map_eq_zero_of_eq' := fun v i j h hij => by
        simp [f.map_eq_zero_of_eq v h hij, g.map_eq_zero_of_eq v h hij] }⟩

/- warning: alternating_map.sub_apply -> AlternatingMap.sub_apply is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N' : Type.{u3}} [_inst_8 : AddCommGroup.{u3} N'] [_inst_9 : Module.{u1, u3} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)] {ι : Type.{u4}} (g : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (g₂ : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (m : ι -> M), Eq.{succ u3} N' (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) => (ι -> M) -> N') (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (HSub.hSub.{max u2 u3 u4, max u2 u3 u4, max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (instHSub.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.sub.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)) g g₂) m) (HSub.hSub.{u3, u3, u3} N' N' N' (instHSub.{u3} N' (SubNegMonoid.toHasSub.{u3} N' (AddGroup.toSubNegMonoid.{u3} N' (AddCommGroup.toAddGroup.{u3} N' _inst_8)))) (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) => (ι -> M) -> N') (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) g m) (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) => (ι -> M) -> N') (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) g₂ m))
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u3}} [_inst_2 : AddCommMonoid.{u3} M] [_inst_3 : Module.{u1, u3} R M _inst_1 _inst_2] {N' : Type.{u4}} [_inst_8 : AddCommGroup.{u4} N'] [_inst_9 : Module.{u1, u4} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8)] {ι : Type.{u2}} (g : AlternatingMap.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (g₂ : AlternatingMap.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (m : ι -> M), Eq.{succ u4} N' (FunLike.coe.{max (max (succ u3) (succ u4)) (succ u2), max (succ u3) (succ u2), succ u4} (AlternatingMap.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (ι -> M) (fun (_x : ι -> M) => N') (AlternatingMap.funLike.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (HSub.hSub.{max (max u3 u4) u2, max (max u3 u4) u2, max (max u3 u4) u2} (AlternatingMap.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AlternatingMap.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AlternatingMap.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (instHSub.{max (max u3 u4) u2} (AlternatingMap.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AlternatingMap.sub.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)) g g₂) m) (HSub.hSub.{u4, u4, u4} N' N' N' (instHSub.{u4} N' (SubNegMonoid.toSub.{u4} N' (AddGroup.toSubNegMonoid.{u4} N' (AddCommGroup.toAddGroup.{u4} N' _inst_8)))) (FunLike.coe.{max (max (succ u3) (succ u4)) (succ u2), max (succ u3) (succ u2), succ u4} (AlternatingMap.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (ι -> M) (fun (_x : ι -> M) => N') (AlternatingMap.funLike.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) g m) (FunLike.coe.{max (max (succ u3) (succ u4)) (succ u2), max (succ u3) (succ u2), succ u4} (AlternatingMap.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (ι -> M) (fun (_x : ι -> M) => N') (AlternatingMap.funLike.{u1, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) g₂ m))
Case conversion may be inaccurate. Consider using '#align alternating_map.sub_apply AlternatingMap.sub_applyₓ'. -/
@[simp]
theorem sub_apply (m : ι → M) : (g - g₂) m = g m - g₂ m :=
  rfl
#align alternating_map.sub_apply AlternatingMap.sub_apply

/- warning: alternating_map.coe_sub -> AlternatingMap.coe_sub is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N' : Type.{u3}} [_inst_8 : AddCommGroup.{u3} N'] [_inst_9 : Module.{u1, u3} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)] {ι : Type.{u4}} (g : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (g₂ : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι), Eq.{max (succ u4) (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) ((fun (a : Type.{max u2 u3 u4}) (b : Sort.{max (succ u4) (succ u2) (succ u3)}) [self : HasLiftT.{succ (max u2 u3 u4), max (succ u4) (succ u2) (succ u3)} a b] => self.0) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (HasLiftT.mk.{succ (max u2 u3 u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (CoeTCₓ.coe.{succ (max u2 u3 u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (coeBase.{succ (max u2 u3 u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.coe.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι)))) (HSub.hSub.{max u2 u3 u4, max u2 u3 u4, max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (instHSub.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.sub.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)) g g₂)) (HSub.hSub.{max u4 u2 u3, max u4 u2 u3, max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (instHSub.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.hasSub.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9)) ((fun (a : Sort.{max (succ u2) (succ u3) (succ u4)}) (b : Sort.{max (succ u4) (succ u2) (succ u3)}) [self : HasLiftT.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} a b] => self.0) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (HasLiftT.mk.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (CoeTCₓ.coe.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (coeBase.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.coe.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι)))) g) ((fun (a : Sort.{max (succ u2) (succ u3) (succ u4)}) (b : Sort.{max (succ u4) (succ u2) (succ u3)}) [self : HasLiftT.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} a b] => self.0) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (HasLiftT.mk.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (CoeTCₓ.coe.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (coeBase.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.coe.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι)))) g₂))
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u4}} [_inst_2 : AddCommMonoid.{u4} M] [_inst_3 : Module.{u1, u4} R M _inst_1 _inst_2] {N' : Type.{u3}} [_inst_8 : AddCommGroup.{u3} N'] [_inst_9 : Module.{u1, u3} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)] {ι : Type.{u2}} (g : AlternatingMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (g₂ : AlternatingMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι), Eq.{max (max (succ u4) (succ u3)) (succ u2)} (MultilinearMap.{u1, u4, u3, u2} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.toMultilinearMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι (HSub.hSub.{max (max u4 u3) u2, max (max u4 u3) u2, max (max u4 u3) u2} (AlternatingMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (instHSub.{max (max u4 u3) u2} (AlternatingMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.sub.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)) g g₂)) (HSub.hSub.{max (max u4 u3) u2, max (max u4 u3) u2, max (max u4 u3) u2} (MultilinearMap.{u1, u4, u3, u2} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.{u1, u4, u3, u2} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.{u1, u4, u3, u2} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (instHSub.{max (max u4 u3) u2} (MultilinearMap.{u1, u4, u3, u2} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instSubMultilinearMapToAddCommMonoid.{u1, u4, u3, u2} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9)) (AlternatingMap.toMultilinearMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι g) (AlternatingMap.toMultilinearMap.{u1, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι g₂))
Case conversion may be inaccurate. Consider using '#align alternating_map.coe_sub AlternatingMap.coe_subₓ'. -/
@[norm_cast]
theorem coe_sub : (↑(g - g₂) : MultilinearMap R (fun i : ι => M) N') = g - g₂ :=
  rfl
#align alternating_map.coe_sub AlternatingMap.coe_sub

instance : AddCommGroup (AlternatingMap R M N' ι) :=
  coe_injective.AddCommGroup _ rfl (fun _ _ => rfl) (fun _ => rfl) (fun _ _ => rfl)
    (fun _ _ => coeFn_smul _ _) fun _ _ => coeFn_smul _ _

section DistribMulAction

variable {S : Type _} [Monoid S] [DistribMulAction S N] [SMulCommClass R S N]

instance : DistribMulAction S (AlternatingMap R M N ι)
    where
  one_smul f := ext fun x => one_smul _ _
  mul_smul c₁ c₂ f := ext fun x => mul_smul _ _ _
  smul_zero r := ext fun x => smul_zero _
  smul_add r f₁ f₂ := ext fun x => smul_add _ _ _

end DistribMulAction

section Module

variable {S : Type _} [Semiring S] [Module S N] [SMulCommClass R S N]

/-- The space of multilinear maps over an algebra over `R` is a module over `R`, for the pointwise
addition and scalar multiplication. -/
instance : Module S (AlternatingMap R M N ι)
    where
  add_smul r₁ r₂ f := ext fun x => add_smul _ _ _
  zero_smul f := ext fun x => zero_smul _ _

instance [NoZeroSMulDivisors S N] : NoZeroSMulDivisors S (AlternatingMap R M N ι) :=
  coe_injective.NoZeroSMulDivisors _ rfl coeFn_smul

end Module

section

variable (R M)

#print AlternatingMap.ofSubsingleton /-
/-- The evaluation map from `ι → M` to `M` at a given `i` is alternating when `ι` is subsingleton.
-/
@[simps]
def ofSubsingleton [Subsingleton ι] (i : ι) : AlternatingMap R M M ι :=
  {
    MultilinearMap.ofSubsingleton R M
      i with
    toFun := Function.eval i
    map_eq_zero_of_eq' := fun v i j hv hij => (hij <| Subsingleton.elim _ _).elim }
#align alternating_map.of_subsingleton AlternatingMap.ofSubsingleton
-/

#print AlternatingMap.constOfIsEmpty /-
/-- The constant map is alternating when `ι` is empty. -/
@[simps (config := { fullyApplied := false })]
def constOfIsEmpty [IsEmpty ι] (m : N) : AlternatingMap R M N ι :=
  {
    MultilinearMap.constOfIsEmpty R _
      m with
    toFun := Function.const _ m
    map_eq_zero_of_eq' := fun v => isEmptyElim }
#align alternating_map.const_of_is_empty AlternatingMap.constOfIsEmpty
-/

end

#print AlternatingMap.codRestrict /-
/-- Restrict the codomain of an alternating map to a submodule. -/
@[simps]
def codRestrict (f : AlternatingMap R M N ι) (p : Submodule R N) (h : ∀ v, f v ∈ p) :
    AlternatingMap R M p ι :=
  {
    f.toMultilinearMap.codRestrict p
      h with
    toFun := fun v => ⟨f v, h v⟩
    map_eq_zero_of_eq' := fun v i j hv hij => Subtype.ext <| map_eq_zero_of_eq _ _ hv hij }
#align alternating_map.cod_restrict AlternatingMap.codRestrict
-/

end AlternatingMap

/-!
### Composition with linear maps
-/


namespace LinearMap

variable {N₂ : Type _} [AddCommMonoid N₂] [Module R N₂]

#print LinearMap.compAlternatingMap /-
/-- Composing a alternating map with a linear map on the left gives again an alternating map. -/
def compAlternatingMap (g : N →ₗ[R] N₂) : AlternatingMap R M N ι →+ AlternatingMap R M N₂ ι
    where
  toFun f :=
    { g.compMultilinearMap (f : MultilinearMap R (fun _ : ι => M) N) with
      map_eq_zero_of_eq' := fun v i j h hij => by simp [f.map_eq_zero_of_eq v h hij] }
  map_zero' := by
    ext
    simp
  map_add' a b := by
    ext
    simp
#align linear_map.comp_alternating_map LinearMap.compAlternatingMap
-/

/- warning: linear_map.coe_comp_alternating_map -> LinearMap.coe_compAlternatingMap is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} {N₂ : Type.{u5}} [_inst_10 : AddCommMonoid.{u5} N₂] [_inst_11 : Module.{u1, u5} R N₂ _inst_1 _inst_10] (g : LinearMap.{u1, u1, u3, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) N N₂ _inst_4 _inst_10 _inst_5 _inst_11) (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι), Eq.{max (max (succ u4) (succ u2)) (succ u5)} ((ι -> M) -> N₂) (coeFn.{max (succ u2) (succ u5) (succ u4), max (max (succ u4) (succ u2)) (succ u5)} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (fun (_x : AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) => (ι -> M) -> N₂) (AlternatingMap.coeFun.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (coeFn.{max (succ (max u2 u5 u4)) (succ (max u2 u3 u4)), max (succ (max u2 u3 u4)) (succ (max u2 u5 u4))} (AddMonoidHom.{max u2 u3 u4, max u2 u5 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddCommMonoid.toAddMonoid.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AlternatingMap.addCommMonoid.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι)))) (fun (_x : AddMonoidHom.{max u2 u3 u4, max u2 u5 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddCommMonoid.toAddMonoid.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AlternatingMap.addCommMonoid.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι)))) => (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) -> (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι)) (AddMonoidHom.hasCoeToFun.{max u2 u3 u4, max u2 u5 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddCommMonoid.toAddMonoid.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AlternatingMap.addCommMonoid.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι)))) (LinearMap.compAlternatingMap.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι N₂ _inst_10 _inst_11 g) f)) (Function.comp.{max (succ u4) (succ u2), succ u3, succ u5} (ι -> M) N N₂ (coeFn.{max (succ u3) (succ u5), max (succ u3) (succ u5)} (LinearMap.{u1, u1, u3, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) N N₂ _inst_4 _inst_10 _inst_5 _inst_11) (fun (_x : LinearMap.{u1, u1, u3, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) N N₂ _inst_4 _inst_10 _inst_5 _inst_11) => N -> N₂) (LinearMap.hasCoeToFun.{u1, u1, u3, u5} R R N N₂ _inst_1 _inst_1 _inst_4 _inst_10 _inst_5 _inst_11 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1))) g) (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f))
but is expected to have type
  forall {R : Type.{u5}} [_inst_1 : Semiring.{u5} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u5, u2} R M _inst_1 _inst_2] {N : Type.{u4}} [_inst_4 : AddCommMonoid.{u4} N] [_inst_5 : Module.{u5, u4} R N _inst_1 _inst_4] {ι : Type.{u1}} {N₂ : Type.{u3}} [_inst_10 : AddCommMonoid.{u3} N₂] [_inst_11 : Module.{u5, u3} R N₂ _inst_1 _inst_10] (g : LinearMap.{u5, u5, u4, u3} R R _inst_1 _inst_1 (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1)) N N₂ _inst_4 _inst_10 _inst_5 _inst_11) (f : AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι), Eq.{max (max (succ u2) (succ u1)) (succ u3)} ((ι -> M) -> N₂) (FunLike.coe.{max (max (succ u2) (succ u3)) (succ u1), max (succ u2) (succ u1), succ u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (ι -> M) (fun (_x : ι -> M) => N₂) (AlternatingMap.funLike.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (FunLike.coe.{max (max (max (succ u4) (succ u3)) (succ u1)) (succ u2), max (max (succ u4) (succ u1)) (succ u2), max (max (succ u3) (succ u1)) (succ u2)} (AddMonoidHom.{max (max u1 u4) u2, max (max u1 u3) u2} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι)))) (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) _x) (AddHomClass.toFunLike.{max (max (max u4 u3) u1) u2, max (max u4 u1) u2, max (max u3 u1) u2} (AddMonoidHom.{max (max u1 u4) u2, max (max u1 u3) u2} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι)))) (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddZeroClass.toAdd.{max (max u4 u1) u2} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))) (AddZeroClass.toAdd.{max (max u3 u1) u2} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι)))) (AddMonoidHomClass.toAddHomClass.{max (max (max u4 u3) u1) u2, max (max u4 u1) u2, max (max u3 u1) u2} (AddMonoidHom.{max (max u1 u4) u2, max (max u1 u3) u2} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι)))) (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι))) (AddMonoidHom.addMonoidHomClass.{max (max u4 u1) u2, max (max u3 u1) u2} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι)))))) (LinearMap.compAlternatingMap.{u5, u2, u4, u1, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι N₂ _inst_10 _inst_11 g) f)) (Function.comp.{max (succ u2) (succ u1), succ u4, succ u3} (ι -> M) N N₂ (FunLike.coe.{max (succ u4) (succ u3), succ u4, succ u3} (LinearMap.{u5, u5, u4, u3} R R _inst_1 _inst_1 (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1)) N N₂ _inst_4 _inst_10 _inst_5 _inst_11) N (fun (_x : N) => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : N) => N₂) _x) (LinearMap.instFunLikeLinearMap.{u5, u5, u4, u3} R R N N₂ _inst_1 _inst_1 _inst_4 _inst_10 _inst_5 _inst_11 (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1))) g) (FunLike.coe.{max (max (succ u2) (succ u4)) (succ u1), max (succ u2) (succ u1), succ u4} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f))
Case conversion may be inaccurate. Consider using '#align linear_map.coe_comp_alternating_map LinearMap.coe_compAlternatingMapₓ'. -/
@[simp]
theorem coe_compAlternatingMap (g : N →ₗ[R] N₂) (f : AlternatingMap R M N ι) :
    ⇑(g.compAlternatingMap f) = g ∘ f :=
  rfl
#align linear_map.coe_comp_alternating_map LinearMap.coe_compAlternatingMap

/- warning: linear_map.comp_alternating_map_apply -> LinearMap.compAlternatingMap_apply is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} {N₂ : Type.{u5}} [_inst_10 : AddCommMonoid.{u5} N₂] [_inst_11 : Module.{u1, u5} R N₂ _inst_1 _inst_10] (g : LinearMap.{u1, u1, u3, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) N N₂ _inst_4 _inst_10 _inst_5 _inst_11) (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (m : ι -> M), Eq.{succ u5} N₂ (coeFn.{max (succ u2) (succ u5) (succ u4), max (max (succ u4) (succ u2)) (succ u5)} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (fun (_x : AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) => (ι -> M) -> N₂) (AlternatingMap.coeFun.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (coeFn.{max (succ (max u2 u5 u4)) (succ (max u2 u3 u4)), max (succ (max u2 u3 u4)) (succ (max u2 u5 u4))} (AddMonoidHom.{max u2 u3 u4, max u2 u5 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddCommMonoid.toAddMonoid.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AlternatingMap.addCommMonoid.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι)))) (fun (_x : AddMonoidHom.{max u2 u3 u4, max u2 u5 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddCommMonoid.toAddMonoid.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AlternatingMap.addCommMonoid.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι)))) => (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) -> (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι)) (AddMonoidHom.hasCoeToFun.{max u2 u3 u4, max u2 u5 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddCommMonoid.toAddMonoid.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AlternatingMap.addCommMonoid.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι)))) (LinearMap.compAlternatingMap.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι N₂ _inst_10 _inst_11 g) f) m) (coeFn.{max (succ u3) (succ u5), max (succ u3) (succ u5)} (LinearMap.{u1, u1, u3, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) N N₂ _inst_4 _inst_10 _inst_5 _inst_11) (fun (_x : LinearMap.{u1, u1, u3, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) N N₂ _inst_4 _inst_10 _inst_5 _inst_11) => N -> N₂) (LinearMap.hasCoeToFun.{u1, u1, u3, u5} R R N N₂ _inst_1 _inst_1 _inst_4 _inst_10 _inst_5 _inst_11 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1))) g (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f m))
but is expected to have type
  forall {R : Type.{u5}} [_inst_1 : Semiring.{u5} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u5, u2} R M _inst_1 _inst_2] {N : Type.{u4}} [_inst_4 : AddCommMonoid.{u4} N] [_inst_5 : Module.{u5, u4} R N _inst_1 _inst_4] {ι : Type.{u1}} {N₂ : Type.{u3}} [_inst_10 : AddCommMonoid.{u3} N₂] [_inst_11 : Module.{u5, u3} R N₂ _inst_1 _inst_10] (g : LinearMap.{u5, u5, u4, u3} R R _inst_1 _inst_1 (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1)) N N₂ _inst_4 _inst_10 _inst_5 _inst_11) (f : AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (m : ι -> M), Eq.{succ u3} N₂ (FunLike.coe.{max (max (succ u2) (succ u3)) (succ u1), max (succ u2) (succ u1), succ u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (ι -> M) (fun (_x : ι -> M) => N₂) (AlternatingMap.funLike.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (FunLike.coe.{max (max (max (succ u4) (succ u3)) (succ u1)) (succ u2), max (max (succ u4) (succ u1)) (succ u2), max (max (succ u3) (succ u1)) (succ u2)} (AddMonoidHom.{max (max u1 u4) u2, max (max u1 u3) u2} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι)))) (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) _x) (AddHomClass.toFunLike.{max (max (max u4 u3) u1) u2, max (max u4 u1) u2, max (max u3 u1) u2} (AddMonoidHom.{max (max u1 u4) u2, max (max u1 u3) u2} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι)))) (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddZeroClass.toAdd.{max (max u4 u1) u2} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))) (AddZeroClass.toAdd.{max (max u3 u1) u2} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι)))) (AddMonoidHomClass.toAddHomClass.{max (max (max u4 u3) u1) u2, max (max u4 u1) u2, max (max u3 u1) u2} (AddMonoidHom.{max (max u1 u4) u2, max (max u1 u3) u2} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι)))) (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι))) (AddMonoidHom.addMonoidHomClass.{max (max u4 u1) u2, max (max u3 u1) u2} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι)))))) (LinearMap.compAlternatingMap.{u5, u2, u4, u1, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι N₂ _inst_10 _inst_11 g) f) m) (FunLike.coe.{max (succ u4) (succ u3), succ u4, succ u3} (LinearMap.{u5, u5, u4, u3} R R _inst_1 _inst_1 (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1)) N N₂ _inst_4 _inst_10 _inst_5 _inst_11) N (fun (_x : N) => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : N) => N₂) _x) (LinearMap.instFunLikeLinearMap.{u5, u5, u4, u3} R R N N₂ _inst_1 _inst_1 _inst_4 _inst_10 _inst_5 _inst_11 (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1))) g (FunLike.coe.{max (max (succ u2) (succ u4)) (succ u1), max (succ u2) (succ u1), succ u4} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f m))
Case conversion may be inaccurate. Consider using '#align linear_map.comp_alternating_map_apply LinearMap.compAlternatingMap_applyₓ'. -/
@[simp]
theorem compAlternatingMap_apply (g : N →ₗ[R] N₂) (f : AlternatingMap R M N ι) (m : ι → M) :
    g.compAlternatingMap f m = g (f m) :=
  rfl
#align linear_map.comp_alternating_map_apply LinearMap.compAlternatingMap_apply

/- warning: linear_map.subtype_comp_alternating_map_cod_restrict -> LinearMap.subtype_compAlternatingMap_codRestrict is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (p : Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) (h : forall (v : ι -> M), Membership.Mem.{u3, u3} N (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) (SetLike.hasMem.{u3, u3} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u1, u3} R N _inst_1 _inst_4 _inst_5)) (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f v) p), Eq.{max (succ u2) (succ u3) (succ u4)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (coeFn.{succ (max u2 u3 u4), succ (max u2 u3 u4)} (AddMonoidHom.{max u2 u3 u4, max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 (coeSort.{succ u3, succ (succ u3)} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u1, u3} R N _inst_1 _inst_4 _inst_5)) p) (Submodule.addCommMonoid.{u1, u3} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u1, u3} R N _inst_1 _inst_4 _inst_5 p) ι) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 (coeSort.{succ u3, succ (succ u3)} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u1, u3} R N _inst_1 _inst_4 _inst_5)) p) (Submodule.addCommMonoid.{u1, u3} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u1, u3} R N _inst_1 _inst_4 _inst_5 p) ι) (AddCommMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 (coeSort.{succ u3, succ (succ u3)} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u1, u3} R N _inst_1 _inst_4 _inst_5)) p) (Submodule.addCommMonoid.{u1, u3} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u1, u3} R N _inst_1 _inst_4 _inst_5 p) ι) (AlternatingMap.addCommMonoid.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 (coeSort.{succ u3, succ (succ u3)} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u1, u3} R N _inst_1 _inst_4 _inst_5)) p) (Submodule.addCommMonoid.{u1, u3} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u1, u3} R N _inst_1 _inst_4 _inst_5 p) ι))) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))) (fun (_x : AddMonoidHom.{max u2 u3 u4, max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 (coeSort.{succ u3, succ (succ u3)} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u1, u3} R N _inst_1 _inst_4 _inst_5)) p) (Submodule.addCommMonoid.{u1, u3} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u1, u3} R N _inst_1 _inst_4 _inst_5 p) ι) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 (coeSort.{succ u3, succ (succ u3)} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u1, u3} R N _inst_1 _inst_4 _inst_5)) p) (Submodule.addCommMonoid.{u1, u3} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u1, u3} R N _inst_1 _inst_4 _inst_5 p) ι) (AddCommMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 (coeSort.{succ u3, succ (succ u3)} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u1, u3} R N _inst_1 _inst_4 _inst_5)) p) (Submodule.addCommMonoid.{u1, u3} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u1, u3} R N _inst_1 _inst_4 _inst_5 p) ι) (AlternatingMap.addCommMonoid.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 (coeSort.{succ u3, succ (succ u3)} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u1, u3} R N _inst_1 _inst_4 _inst_5)) p) (Submodule.addCommMonoid.{u1, u3} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u1, u3} R N _inst_1 _inst_4 _inst_5 p) ι))) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))) => (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 (coeSort.{succ u3, succ (succ u3)} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u1, u3} R N _inst_1 _inst_4 _inst_5)) p) (Submodule.addCommMonoid.{u1, u3} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u1, u3} R N _inst_1 _inst_4 _inst_5 p) ι) -> (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)) (AddMonoidHom.hasCoeToFun.{max u2 u3 u4, max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 (coeSort.{succ u3, succ (succ u3)} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u1, u3} R N _inst_1 _inst_4 _inst_5)) p) (Submodule.addCommMonoid.{u1, u3} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u1, u3} R N _inst_1 _inst_4 _inst_5 p) ι) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 (coeSort.{succ u3, succ (succ u3)} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u1, u3} R N _inst_1 _inst_4 _inst_5)) p) (Submodule.addCommMonoid.{u1, u3} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u1, u3} R N _inst_1 _inst_4 _inst_5 p) ι) (AddCommMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 (coeSort.{succ u3, succ (succ u3)} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u1, u3} R N _inst_1 _inst_4 _inst_5)) p) (Submodule.addCommMonoid.{u1, u3} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u1, u3} R N _inst_1 _inst_4 _inst_5 p) ι) (AlternatingMap.addCommMonoid.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 (coeSort.{succ u3, succ (succ u3)} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u1, u3} R N _inst_1 _inst_4 _inst_5)) p) (Submodule.addCommMonoid.{u1, u3} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u1, u3} R N _inst_1 _inst_4 _inst_5 p) ι))) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))) (LinearMap.compAlternatingMap.{u1, u2, u3, u4, u3} R _inst_1 M _inst_2 _inst_3 (coeSort.{succ u3, succ (succ u3)} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) Type.{u3} (SetLike.hasCoeToSort.{u3, u3} (Submodule.{u1, u3} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u1, u3} R N _inst_1 _inst_4 _inst_5)) p) (Submodule.addCommMonoid.{u1, u3} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u1, u3} R N _inst_1 _inst_4 _inst_5 p) ι N _inst_4 _inst_5 (Submodule.subtype.{u1, u3} R N _inst_1 _inst_4 _inst_5 p)) (AlternatingMap.codRestrict.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι f p h)) f
but is expected to have type
  forall {R : Type.{u4}} [_inst_1 : Semiring.{u4} R] {M : Type.{u3}} [_inst_2 : AddCommMonoid.{u3} M] [_inst_3 : Module.{u4, u3} R M _inst_1 _inst_2] {N : Type.{u2}} [_inst_4 : AddCommMonoid.{u2} N] [_inst_5 : Module.{u4, u2} R N _inst_1 _inst_4] {ι : Type.{u1}} (f : AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (p : Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (h : forall (v : ι -> M), Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) (FunLike.coe.{max (max (succ u3) (succ u2)) (succ u1), max (succ u3) (succ u1), succ u2} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f v) p), Eq.{max (max (succ u3) (succ u2)) (succ u1)} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι) => AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.codRestrict.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι f p h)) (FunLike.coe.{max (max (succ u2) (succ u1)) (succ u3), max (max (succ u2) (succ u1)) (succ u3), max (max (succ u2) (succ u1)) (succ u3)} (AddMonoidHom.{max (max u1 u2) u3, max (max u1 u2) u3} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι) (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι) (AddCommMonoid.toAddMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι) (AlternatingMap.addCommMonoid.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι))) (AddMonoid.toAddZeroClass.{max (max u3 u1) u2} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u3 u1) u2} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))) (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι) (fun (_x : AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι) => AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) _x) (AddHomClass.toFunLike.{max (max u2 u1) u3, max (max u2 u1) u3, max (max u2 u1) u3} (AddMonoidHom.{max (max u1 u2) u3, max (max u1 u2) u3} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι) (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι) (AddCommMonoid.toAddMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι) (AlternatingMap.addCommMonoid.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι))) (AddMonoid.toAddZeroClass.{max (max u3 u1) u2} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u3 u1) u2} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))) (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι) (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddZeroClass.toAdd.{max (max u2 u1) u3} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι) (AddCommMonoid.toAddMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι) (AlternatingMap.addCommMonoid.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι)))) (AddZeroClass.toAdd.{max (max u2 u1) u3} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddMonoid.toAddZeroClass.{max (max u3 u1) u2} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u3 u1) u2} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))) (AddMonoidHomClass.toAddHomClass.{max (max u2 u1) u3, max (max u2 u1) u3, max (max u2 u1) u3} (AddMonoidHom.{max (max u1 u2) u3, max (max u1 u2) u3} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι) (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι) (AddCommMonoid.toAddMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι) (AlternatingMap.addCommMonoid.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι))) (AddMonoid.toAddZeroClass.{max (max u3 u1) u2} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u3 u1) u2} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))) (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι) (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι) (AddCommMonoid.toAddMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι) (AlternatingMap.addCommMonoid.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι))) (AddMonoid.toAddZeroClass.{max (max u3 u1) u2} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u3 u1) u2} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoidHom.addMonoidHomClass.{max (max u2 u1) u3, max (max u2 u1) u3} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι) (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι) (AddCommMonoid.toAddMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι) (AlternatingMap.addCommMonoid.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι))) (AddMonoid.toAddZeroClass.{max (max u3 u1) u2} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u3 u1) u2} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))))) (LinearMap.compAlternatingMap.{u4, u3, u2, u1, u2} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u2} N (fun (x : N) => Membership.mem.{u2, u2} N (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) (SetLike.instMembership.{u2, u2} (Submodule.{u4, u2} R N _inst_1 _inst_4 _inst_5) N (Submodule.setLike.{u4, u2} R N _inst_1 _inst_4 _inst_5)) x p)) (Submodule.addCommMonoid.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) (Submodule.module.{u4, u2} R N _inst_1 _inst_4 _inst_5 p) ι N _inst_4 _inst_5 (Submodule.subtype.{u4, u2} R N _inst_1 _inst_4 _inst_5 p)) (AlternatingMap.codRestrict.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι f p h)) f
Case conversion may be inaccurate. Consider using '#align linear_map.subtype_comp_alternating_map_cod_restrict LinearMap.subtype_compAlternatingMap_codRestrictₓ'. -/
@[simp]
theorem subtype_compAlternatingMap_codRestrict (f : AlternatingMap R M N ι) (p : Submodule R N)
    (h) : p.Subtype.compAlternatingMap (f.codRestrict p h) = f :=
  AlternatingMap.ext fun v => rfl
#align linear_map.subtype_comp_alternating_map_cod_restrict LinearMap.subtype_compAlternatingMap_codRestrict

/- warning: linear_map.comp_alternating_map_cod_restrict -> LinearMap.compAlternatingMap_codRestrict is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} {N₂ : Type.{u5}} [_inst_10 : AddCommMonoid.{u5} N₂] [_inst_11 : Module.{u1, u5} R N₂ _inst_1 _inst_10] (g : LinearMap.{u1, u1, u3, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) N N₂ _inst_4 _inst_10 _inst_5 _inst_11) (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (p : Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) (h : forall (c : N), Membership.Mem.{u5, u5} N₂ (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.hasMem.{u5, u5} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11)) (coeFn.{max (succ u3) (succ u5), max (succ u3) (succ u5)} (LinearMap.{u1, u1, u3, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) N N₂ _inst_4 _inst_10 _inst_5 _inst_11) (fun (_x : LinearMap.{u1, u1, u3, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) N N₂ _inst_4 _inst_10 _inst_5 _inst_11) => N -> N₂) (LinearMap.hasCoeToFun.{u1, u1, u3, u5} R R N N₂ _inst_1 _inst_1 _inst_4 _inst_10 _inst_5 _inst_11 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1))) g c) p), Eq.{max (succ u2) (succ u5) (succ u4)} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 (coeSort.{succ u5, succ (succ u5)} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) Type.{u5} (SetLike.hasCoeToSort.{u5, u5} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11)) p) (Submodule.addCommMonoid.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (coeFn.{max (succ (max u2 u5 u4)) (succ (max u2 u3 u4)), max (succ (max u2 u3 u4)) (succ (max u2 u5 u4))} (AddMonoidHom.{max u2 u3 u4, max u2 u5 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 (coeSort.{succ u5, succ (succ u5)} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) Type.{u5} (SetLike.hasCoeToSort.{u5, u5} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11)) p) (Submodule.addCommMonoid.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 (coeSort.{succ u5, succ (succ u5)} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) Type.{u5} (SetLike.hasCoeToSort.{u5, u5} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11)) p) (Submodule.addCommMonoid.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (AddCommMonoid.toAddMonoid.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 (coeSort.{succ u5, succ (succ u5)} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) Type.{u5} (SetLike.hasCoeToSort.{u5, u5} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11)) p) (Submodule.addCommMonoid.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (AlternatingMap.addCommMonoid.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 (coeSort.{succ u5, succ (succ u5)} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) Type.{u5} (SetLike.hasCoeToSort.{u5, u5} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11)) p) (Submodule.addCommMonoid.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) ι)))) (fun (_x : AddMonoidHom.{max u2 u3 u4, max u2 u5 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 (coeSort.{succ u5, succ (succ u5)} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) Type.{u5} (SetLike.hasCoeToSort.{u5, u5} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11)) p) (Submodule.addCommMonoid.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 (coeSort.{succ u5, succ (succ u5)} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) Type.{u5} (SetLike.hasCoeToSort.{u5, u5} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11)) p) (Submodule.addCommMonoid.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (AddCommMonoid.toAddMonoid.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 (coeSort.{succ u5, succ (succ u5)} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) Type.{u5} (SetLike.hasCoeToSort.{u5, u5} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11)) p) (Submodule.addCommMonoid.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (AlternatingMap.addCommMonoid.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 (coeSort.{succ u5, succ (succ u5)} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) Type.{u5} (SetLike.hasCoeToSort.{u5, u5} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11)) p) (Submodule.addCommMonoid.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) ι)))) => (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) -> (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 (coeSort.{succ u5, succ (succ u5)} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) Type.{u5} (SetLike.hasCoeToSort.{u5, u5} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11)) p) (Submodule.addCommMonoid.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) ι)) (AddMonoidHom.hasCoeToFun.{max u2 u3 u4, max u2 u5 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 (coeSort.{succ u5, succ (succ u5)} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) Type.{u5} (SetLike.hasCoeToSort.{u5, u5} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11)) p) (Submodule.addCommMonoid.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 (coeSort.{succ u5, succ (succ u5)} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) Type.{u5} (SetLike.hasCoeToSort.{u5, u5} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11)) p) (Submodule.addCommMonoid.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (AddCommMonoid.toAddMonoid.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 (coeSort.{succ u5, succ (succ u5)} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) Type.{u5} (SetLike.hasCoeToSort.{u5, u5} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11)) p) (Submodule.addCommMonoid.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (AlternatingMap.addCommMonoid.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 (coeSort.{succ u5, succ (succ u5)} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) Type.{u5} (SetLike.hasCoeToSort.{u5, u5} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11)) p) (Submodule.addCommMonoid.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) ι)))) (LinearMap.compAlternatingMap.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι (coeSort.{succ u5, succ (succ u5)} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) Type.{u5} (SetLike.hasCoeToSort.{u5, u5} (Submodule.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11)) p) (Submodule.addCommMonoid.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u1, u5} R N₂ _inst_1 _inst_10 _inst_11 p) (LinearMap.codRestrict.{u1, u1, u3, u5} R R N N₂ _inst_1 _inst_1 _inst_4 _inst_10 _inst_5 _inst_11 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) p g h)) f) (AlternatingMap.codRestrict.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι (coeFn.{max (succ (max u2 u5 u4)) (succ (max u2 u3 u4)), max (succ (max u2 u3 u4)) (succ (max u2 u5 u4))} (AddMonoidHom.{max u2 u3 u4, max u2 u5 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddCommMonoid.toAddMonoid.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AlternatingMap.addCommMonoid.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι)))) (fun (_x : AddMonoidHom.{max u2 u3 u4, max u2 u5 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddCommMonoid.toAddMonoid.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AlternatingMap.addCommMonoid.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι)))) => (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) -> (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι)) (AddMonoidHom.hasCoeToFun.{max u2 u3 u4, max u2 u5 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddCommMonoid.toAddMonoid.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AlternatingMap.addCommMonoid.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι)))) (LinearMap.compAlternatingMap.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι N₂ _inst_10 _inst_11 g) f) p (fun (v : ι -> M) => h (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f v)))
but is expected to have type
  forall {R : Type.{u5}} [_inst_1 : Semiring.{u5} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u5, u2} R M _inst_1 _inst_2] {N : Type.{u4}} [_inst_4 : AddCommMonoid.{u4} N] [_inst_5 : Module.{u5, u4} R N _inst_1 _inst_4] {ι : Type.{u1}} {N₂ : Type.{u3}} [_inst_10 : AddCommMonoid.{u3} N₂] [_inst_11 : Module.{u5, u3} R N₂ _inst_1 _inst_10] (g : LinearMap.{u5, u5, u4, u3} R R _inst_1 _inst_1 (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1)) N N₂ _inst_4 _inst_10 _inst_5 _inst_11) (f : AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (p : Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (h : forall (c : N), Membership.mem.{u3, u3} ((fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : N) => N₂) c) (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) (FunLike.coe.{max (succ u4) (succ u3), succ u4, succ u3} (LinearMap.{u5, u5, u4, u3} R R _inst_1 _inst_1 (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1)) N N₂ _inst_4 _inst_10 _inst_5 _inst_11) N (fun (_x : N) => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : N) => N₂) _x) (LinearMap.instFunLikeLinearMap.{u5, u5, u4, u3} R R N N₂ _inst_1 _inst_1 _inst_4 _inst_10 _inst_5 _inst_11 (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1))) g c) p), Eq.{max (max (succ u2) (succ u1)) (succ u3)} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u3} N₂ (fun (x : N₂) => Membership.mem.{u3, u3} N₂ (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) x p)) (Submodule.addCommMonoid.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) ι) f) (FunLike.coe.{max (max (max (succ u4) (succ u3)) (succ u1)) (succ u2), max (max (succ u4) (succ u1)) (succ u2), max (max (succ u3) (succ u1)) (succ u2)} (AddMonoidHom.{max (max u1 u4) u2, max (max u1 u3) u2} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u3} N₂ (fun (x : N₂) => Membership.mem.{u3, u3} N₂ (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) x p)) (Submodule.addCommMonoid.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u3} N₂ (fun (x : N₂) => Membership.mem.{u3, u3} N₂ (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) x p)) (Submodule.addCommMonoid.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u3} N₂ (fun (x : N₂) => Membership.mem.{u3, u3} N₂ (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) x p)) (Submodule.addCommMonoid.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u3} N₂ (fun (x : N₂) => Membership.mem.{u3, u3} N₂ (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) x p)) (Submodule.addCommMonoid.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) ι)))) (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u3} N₂ (fun (x : N₂) => Membership.mem.{u3, u3} N₂ (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) x p)) (Submodule.addCommMonoid.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) ι) _x) (AddHomClass.toFunLike.{max (max (max u4 u3) u1) u2, max (max u4 u1) u2, max (max u3 u1) u2} (AddMonoidHom.{max (max u1 u4) u2, max (max u1 u3) u2} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u3} N₂ (fun (x : N₂) => Membership.mem.{u3, u3} N₂ (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) x p)) (Submodule.addCommMonoid.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u3} N₂ (fun (x : N₂) => Membership.mem.{u3, u3} N₂ (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) x p)) (Submodule.addCommMonoid.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u3} N₂ (fun (x : N₂) => Membership.mem.{u3, u3} N₂ (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) x p)) (Submodule.addCommMonoid.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u3} N₂ (fun (x : N₂) => Membership.mem.{u3, u3} N₂ (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) x p)) (Submodule.addCommMonoid.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) ι)))) (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u3} N₂ (fun (x : N₂) => Membership.mem.{u3, u3} N₂ (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) x p)) (Submodule.addCommMonoid.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (AddZeroClass.toAdd.{max (max u4 u1) u2} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))) (AddZeroClass.toAdd.{max (max u3 u1) u2} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u3} N₂ (fun (x : N₂) => Membership.mem.{u3, u3} N₂ (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) x p)) (Submodule.addCommMonoid.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u3} N₂ (fun (x : N₂) => Membership.mem.{u3, u3} N₂ (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) x p)) (Submodule.addCommMonoid.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u3} N₂ (fun (x : N₂) => Membership.mem.{u3, u3} N₂ (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) x p)) (Submodule.addCommMonoid.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u3} N₂ (fun (x : N₂) => Membership.mem.{u3, u3} N₂ (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) x p)) (Submodule.addCommMonoid.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) ι)))) (AddMonoidHomClass.toAddHomClass.{max (max (max u4 u3) u1) u2, max (max u4 u1) u2, max (max u3 u1) u2} (AddMonoidHom.{max (max u1 u4) u2, max (max u1 u3) u2} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u3} N₂ (fun (x : N₂) => Membership.mem.{u3, u3} N₂ (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) x p)) (Submodule.addCommMonoid.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u3} N₂ (fun (x : N₂) => Membership.mem.{u3, u3} N₂ (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) x p)) (Submodule.addCommMonoid.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u3} N₂ (fun (x : N₂) => Membership.mem.{u3, u3} N₂ (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) x p)) (Submodule.addCommMonoid.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u3} N₂ (fun (x : N₂) => Membership.mem.{u3, u3} N₂ (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) x p)) (Submodule.addCommMonoid.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) ι)))) (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u3} N₂ (fun (x : N₂) => Membership.mem.{u3, u3} N₂ (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) x p)) (Submodule.addCommMonoid.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u3} N₂ (fun (x : N₂) => Membership.mem.{u3, u3} N₂ (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) x p)) (Submodule.addCommMonoid.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u3} N₂ (fun (x : N₂) => Membership.mem.{u3, u3} N₂ (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) x p)) (Submodule.addCommMonoid.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u3} N₂ (fun (x : N₂) => Membership.mem.{u3, u3} N₂ (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) x p)) (Submodule.addCommMonoid.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) ι))) (AddMonoidHom.addMonoidHomClass.{max (max u4 u1) u2, max (max u3 u1) u2} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u3} N₂ (fun (x : N₂) => Membership.mem.{u3, u3} N₂ (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) x p)) (Submodule.addCommMonoid.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u3} N₂ (fun (x : N₂) => Membership.mem.{u3, u3} N₂ (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) x p)) (Submodule.addCommMonoid.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u3} N₂ (fun (x : N₂) => Membership.mem.{u3, u3} N₂ (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) x p)) (Submodule.addCommMonoid.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 (Subtype.{succ u3} N₂ (fun (x : N₂) => Membership.mem.{u3, u3} N₂ (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) x p)) (Submodule.addCommMonoid.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) ι)))))) (LinearMap.compAlternatingMap.{u5, u2, u4, u1, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι (Subtype.{succ u3} N₂ (fun (x : N₂) => Membership.mem.{u3, u3} N₂ (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) (SetLike.instMembership.{u3, u3} (Submodule.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11) N₂ (Submodule.setLike.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11)) x p)) (Submodule.addCommMonoid.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (Submodule.module.{u5, u3} R N₂ _inst_1 _inst_10 _inst_11 p) (LinearMap.codRestrict.{u5, u5, u4, u3} R R N N₂ _inst_1 _inst_1 _inst_4 _inst_10 _inst_5 _inst_11 (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1)) p g h)) f) (AlternatingMap.codRestrict.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι (FunLike.coe.{max (max (max (succ u4) (succ u3)) (succ u1)) (succ u2), max (max (succ u4) (succ u1)) (succ u2), max (max (succ u3) (succ u1)) (succ u2)} (AddMonoidHom.{max (max u1 u4) u2, max (max u1 u3) u2} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι)))) (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) _x) (AddHomClass.toFunLike.{max (max (max u4 u3) u1) u2, max (max u4 u1) u2, max (max u3 u1) u2} (AddMonoidHom.{max (max u1 u4) u2, max (max u1 u3) u2} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι)))) (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddZeroClass.toAdd.{max (max u4 u1) u2} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))) (AddZeroClass.toAdd.{max (max u3 u1) u2} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι)))) (AddMonoidHomClass.toAddHomClass.{max (max (max u4 u3) u1) u2, max (max u4 u1) u2, max (max u3 u1) u2} (AddMonoidHom.{max (max u1 u4) u2, max (max u1 u3) u2} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι)))) (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι))) (AddMonoidHom.addMonoidHomClass.{max (max u4 u1) u2, max (max u3 u1) u2} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N₂ _inst_10 _inst_11 ι)))))) (LinearMap.compAlternatingMap.{u5, u2, u4, u1, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι N₂ _inst_10 _inst_11 g) f) p (fun (v : ι -> M) => h (FunLike.coe.{max (max (succ u2) (succ u4)) (succ u1), max (succ u2) (succ u1), succ u4} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f v)))
Case conversion may be inaccurate. Consider using '#align linear_map.comp_alternating_map_cod_restrict LinearMap.compAlternatingMap_codRestrictₓ'. -/
@[simp]
theorem compAlternatingMap_codRestrict (g : N →ₗ[R] N₂) (f : AlternatingMap R M N ι)
    (p : Submodule R N₂) (h) :
    (g.codRestrict p h).compAlternatingMap f =
      (g.compAlternatingMap f).codRestrict p fun v => h (f v) :=
  AlternatingMap.ext fun v => rfl
#align linear_map.comp_alternating_map_cod_restrict LinearMap.compAlternatingMap_codRestrict

end LinearMap

namespace AlternatingMap

variable {M₂ : Type _} [AddCommMonoid M₂] [Module R M₂]

variable {M₃ : Type _} [AddCommMonoid M₃] [Module R M₃]

#print AlternatingMap.compLinearMap /-
/-- Composing a alternating map with the same linear map on each argument gives again an
alternating map. -/
def compLinearMap (f : AlternatingMap R M N ι) (g : M₂ →ₗ[R] M) : AlternatingMap R M₂ N ι :=
  { (f : MultilinearMap R (fun _ : ι => M) N).compLinearMap fun _ => g with
    map_eq_zero_of_eq' := fun v i j h hij => f.map_eq_zero_of_eq _ (LinearMap.congr_arg h) hij }
#align alternating_map.comp_linear_map AlternatingMap.compLinearMap
-/

/- warning: alternating_map.coe_comp_linear_map -> AlternatingMap.coe_compLinearMap is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} {M₂ : Type.{u5}} [_inst_10 : AddCommMonoid.{u5} M₂] [_inst_11 : Module.{u1, u5} R M₂ _inst_1 _inst_10] (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (g : LinearMap.{u1, u1, u5, u2} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3), Eq.{max (max (succ u4) (succ u5)) (succ u3)} ((ι -> M₂) -> N) (coeFn.{max (succ u5) (succ u3) (succ u4), max (max (succ u4) (succ u5)) (succ u3)} (AlternatingMap.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) => (ι -> M₂) -> N) (AlternatingMap.coeFun.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.compLinearMap.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₂ _inst_10 _inst_11 f g)) (Function.comp.{max (succ u4) (succ u5), max (succ u4) (succ u2), succ u3} (ι -> M₂) (ι -> M) N (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f) (Function.comp.{succ u4, succ u5, succ u2} ι M₂ M (coeFn.{max (succ u5) (succ u2), max (succ u5) (succ u2)} (LinearMap.{u1, u1, u5, u2} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) (fun (_x : LinearMap.{u1, u1, u5, u2} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) => M₂ -> M) (LinearMap.hasCoeToFun.{u1, u1, u5, u2} R R M₂ M _inst_1 _inst_1 _inst_10 _inst_2 _inst_11 _inst_3 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1))) g)))
but is expected to have type
  forall {R : Type.{u5}} [_inst_1 : Semiring.{u5} R] {M : Type.{u4}} [_inst_2 : AddCommMonoid.{u4} M] [_inst_3 : Module.{u5, u4} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u5, u3} R N _inst_1 _inst_4] {ι : Type.{u2}} {M₂ : Type.{u1}} [_inst_10 : AddCommMonoid.{u1} M₂] [_inst_11 : Module.{u5, u1} R M₂ _inst_1 _inst_10] (f : AlternatingMap.{u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (g : LinearMap.{u5, u5, u1, u4} R R _inst_1 _inst_1 (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3), Eq.{max (max (succ u3) (succ u2)) (succ u1)} ((ι -> M₂) -> N) (FunLike.coe.{max (max (succ u1) (succ u3)) (succ u2), max (succ u1) (succ u2), succ u3} (AlternatingMap.{u5, u1, u3, u2} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (ι -> M₂) (fun (_x : ι -> M₂) => N) (AlternatingMap.funLike.{u5, u1, u3, u2} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.compLinearMap.{u5, u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₂ _inst_10 _inst_11 f g)) (Function.comp.{max (succ u1) (succ u2), max (succ u4) (succ u2), succ u3} (ι -> M₂) (ι -> M) N (FunLike.coe.{max (max (succ u4) (succ u3)) (succ u2), max (succ u4) (succ u2), succ u3} (AlternatingMap.{u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f) ((fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.7564 : M₂ -> M) (x._@.Mathlib.LinearAlgebra.Alternating._hyg.7566 : ι -> M₂) => Function.comp.{succ u2, succ u1, succ u4} ι M₂ M x._@.Mathlib.LinearAlgebra.Alternating._hyg.7564 x._@.Mathlib.LinearAlgebra.Alternating._hyg.7566) (FunLike.coe.{max (succ u4) (succ u1), succ u1, succ u4} (LinearMap.{u5, u5, u1, u4} R R _inst_1 _inst_1 (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) M₂ (fun (_x : M₂) => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : M₂) => M) _x) (LinearMap.instFunLikeLinearMap.{u5, u5, u1, u4} R R M₂ M _inst_1 _inst_1 _inst_10 _inst_2 _inst_11 _inst_3 (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1))) g)))
Case conversion may be inaccurate. Consider using '#align alternating_map.coe_comp_linear_map AlternatingMap.coe_compLinearMapₓ'. -/
theorem coe_compLinearMap (f : AlternatingMap R M N ι) (g : M₂ →ₗ[R] M) :
    ⇑(f.compLinearMap g) = f ∘ (· ∘ ·) g :=
  rfl
#align alternating_map.coe_comp_linear_map AlternatingMap.coe_compLinearMap

/- warning: alternating_map.comp_linear_map_apply -> AlternatingMap.compLinearMap_apply is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} {M₂ : Type.{u5}} [_inst_10 : AddCommMonoid.{u5} M₂] [_inst_11 : Module.{u1, u5} R M₂ _inst_1 _inst_10] (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (g : LinearMap.{u1, u1, u5, u2} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) (v : ι -> M₂), Eq.{succ u3} N (coeFn.{max (succ u5) (succ u3) (succ u4), max (max (succ u4) (succ u5)) (succ u3)} (AlternatingMap.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) => (ι -> M₂) -> N) (AlternatingMap.coeFun.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.compLinearMap.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₂ _inst_10 _inst_11 f g) v) (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f (fun (i : ι) => coeFn.{max (succ u5) (succ u2), max (succ u5) (succ u2)} (LinearMap.{u1, u1, u5, u2} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) (fun (_x : LinearMap.{u1, u1, u5, u2} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) => M₂ -> M) (LinearMap.hasCoeToFun.{u1, u1, u5, u2} R R M₂ M _inst_1 _inst_1 _inst_10 _inst_2 _inst_11 _inst_3 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1))) g (v i)))
but is expected to have type
  forall {R : Type.{u5}} [_inst_1 : Semiring.{u5} R] {M : Type.{u4}} [_inst_2 : AddCommMonoid.{u4} M] [_inst_3 : Module.{u5, u4} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u5, u3} R N _inst_1 _inst_4] {ι : Type.{u2}} {M₂ : Type.{u1}} [_inst_10 : AddCommMonoid.{u1} M₂] [_inst_11 : Module.{u5, u1} R M₂ _inst_1 _inst_10] (f : AlternatingMap.{u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (g : LinearMap.{u5, u5, u1, u4} R R _inst_1 _inst_1 (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) (v : ι -> M₂), Eq.{succ u3} N (FunLike.coe.{max (max (succ u1) (succ u3)) (succ u2), max (succ u1) (succ u2), succ u3} (AlternatingMap.{u5, u1, u3, u2} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (ι -> M₂) (fun (_x : ι -> M₂) => N) (AlternatingMap.funLike.{u5, u1, u3, u2} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.compLinearMap.{u5, u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₂ _inst_10 _inst_11 f g) v) (FunLike.coe.{max (max (succ u4) (succ u3)) (succ u2), max (succ u4) (succ u2), succ u3} (AlternatingMap.{u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f (fun (i : ι) => FunLike.coe.{max (succ u4) (succ u1), succ u1, succ u4} (LinearMap.{u5, u5, u1, u4} R R _inst_1 _inst_1 (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) M₂ (fun (_x : M₂) => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : M₂) => M) _x) (LinearMap.instFunLikeLinearMap.{u5, u5, u1, u4} R R M₂ M _inst_1 _inst_1 _inst_10 _inst_2 _inst_11 _inst_3 (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1))) g (v i)))
Case conversion may be inaccurate. Consider using '#align alternating_map.comp_linear_map_apply AlternatingMap.compLinearMap_applyₓ'. -/
@[simp]
theorem compLinearMap_apply (f : AlternatingMap R M N ι) (g : M₂ →ₗ[R] M) (v : ι → M₂) :
    f.compLinearMap g v = f fun i => g (v i) :=
  rfl
#align alternating_map.comp_linear_map_apply AlternatingMap.compLinearMap_apply

/- warning: alternating_map.comp_linear_map_assoc -> AlternatingMap.compLinearMap_assoc is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} {M₂ : Type.{u5}} [_inst_10 : AddCommMonoid.{u5} M₂] [_inst_11 : Module.{u1, u5} R M₂ _inst_1 _inst_10] {M₃ : Type.{u6}} [_inst_12 : AddCommMonoid.{u6} M₃] [_inst_13 : Module.{u1, u6} R M₃ _inst_1 _inst_12] (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (g₁ : LinearMap.{u1, u1, u5, u2} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) (g₂ : LinearMap.{u1, u1, u6, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₃ M₂ _inst_12 _inst_10 _inst_13 _inst_11), Eq.{max (succ u6) (succ u3) (succ u4)} (AlternatingMap.{u1, u6, u3, u4} R _inst_1 M₃ _inst_12 _inst_13 N _inst_4 _inst_5 ι) (AlternatingMap.compLinearMap.{u1, u5, u3, u4, u6} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι M₃ _inst_12 _inst_13 (AlternatingMap.compLinearMap.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₂ _inst_10 _inst_11 f g₁) g₂) (AlternatingMap.compLinearMap.{u1, u2, u3, u4, u6} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₃ _inst_12 _inst_13 f (LinearMap.comp.{u1, u1, u1, u6, u5, u2} R R R M₃ M₂ M _inst_1 _inst_1 _inst_1 _inst_12 _inst_10 _inst_2 _inst_13 _inst_11 _inst_3 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHomCompTriple.ids.{u1, u1} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1))) g₁ g₂))
but is expected to have type
  forall {R : Type.{u6}} [_inst_1 : Semiring.{u6} R] {M : Type.{u5}} [_inst_2 : AddCommMonoid.{u5} M] [_inst_3 : Module.{u6, u5} R M _inst_1 _inst_2] {N : Type.{u4}} [_inst_4 : AddCommMonoid.{u4} N] [_inst_5 : Module.{u6, u4} R N _inst_1 _inst_4] {ι : Type.{u3}} {M₂ : Type.{u2}} [_inst_10 : AddCommMonoid.{u2} M₂] [_inst_11 : Module.{u6, u2} R M₂ _inst_1 _inst_10] {M₃ : Type.{u1}} [_inst_12 : AddCommMonoid.{u1} M₃] [_inst_13 : Module.{u6, u1} R M₃ _inst_1 _inst_12] (f : AlternatingMap.{u6, u5, u4, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (g₁ : LinearMap.{u6, u6, u2, u5} R R _inst_1 _inst_1 (RingHom.id.{u6} R (Semiring.toNonAssocSemiring.{u6} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) (g₂ : LinearMap.{u6, u6, u1, u2} R R _inst_1 _inst_1 (RingHom.id.{u6} R (Semiring.toNonAssocSemiring.{u6} R _inst_1)) M₃ M₂ _inst_12 _inst_10 _inst_13 _inst_11), Eq.{max (max (succ u4) (succ u3)) (succ u1)} (AlternatingMap.{u6, u1, u4, u3} R _inst_1 M₃ _inst_12 _inst_13 N _inst_4 _inst_5 ι) (AlternatingMap.compLinearMap.{u6, u2, u4, u3, u1} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι M₃ _inst_12 _inst_13 (AlternatingMap.compLinearMap.{u6, u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₂ _inst_10 _inst_11 f g₁) g₂) (AlternatingMap.compLinearMap.{u6, u5, u4, u3, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₃ _inst_12 _inst_13 f (LinearMap.comp.{u6, u6, u6, u1, u2, u5} R R R M₃ M₂ M _inst_1 _inst_1 _inst_1 _inst_12 _inst_10 _inst_2 _inst_13 _inst_11 _inst_3 (RingHom.id.{u6} R (Semiring.toNonAssocSemiring.{u6} R _inst_1)) (RingHom.id.{u6} R (Semiring.toNonAssocSemiring.{u6} R _inst_1)) (RingHom.id.{u6} R (Semiring.toNonAssocSemiring.{u6} R _inst_1)) (RingHomCompTriple.ids.{u6, u6} R R _inst_1 _inst_1 (RingHom.id.{u6} R (Semiring.toNonAssocSemiring.{u6} R _inst_1))) g₁ g₂))
Case conversion may be inaccurate. Consider using '#align alternating_map.comp_linear_map_assoc AlternatingMap.compLinearMap_assocₓ'. -/
/-- Composing an alternating map twice with the same linear map in each argument is
the same as composing with their composition. -/
theorem compLinearMap_assoc (f : AlternatingMap R M N ι) (g₁ : M₂ →ₗ[R] M) (g₂ : M₃ →ₗ[R] M₂) :
    (f.compLinearMap g₁).compLinearMap g₂ = f.compLinearMap (g₁ ∘ₗ g₂) :=
  rfl
#align alternating_map.comp_linear_map_assoc AlternatingMap.compLinearMap_assoc

/- warning: alternating_map.zero_comp_linear_map -> AlternatingMap.zero_compLinearMap is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} {M₂ : Type.{u5}} [_inst_10 : AddCommMonoid.{u5} M₂] [_inst_11 : Module.{u1, u5} R M₂ _inst_1 _inst_10] (g : LinearMap.{u1, u1, u5, u2} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3), Eq.{max (succ u5) (succ u3) (succ u4)} (AlternatingMap.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.compLinearMap.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₂ _inst_10 _inst_11 (OfNat.ofNat.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) 0 (OfNat.mk.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) 0 (Zero.zero.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.zero.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))) g) (OfNat.ofNat.{max u5 u3 u4} (AlternatingMap.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) 0 (OfNat.mk.{max u5 u3 u4} (AlternatingMap.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) 0 (Zero.zero.{max u5 u3 u4} (AlternatingMap.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.zero.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι))))
but is expected to have type
  forall {R : Type.{u5}} [_inst_1 : Semiring.{u5} R] {M : Type.{u3}} [_inst_2 : AddCommMonoid.{u3} M] [_inst_3 : Module.{u5, u3} R M _inst_1 _inst_2] {N : Type.{u2}} [_inst_4 : AddCommMonoid.{u2} N] [_inst_5 : Module.{u5, u2} R N _inst_1 _inst_4] {ι : Type.{u1}} {M₂ : Type.{u4}} [_inst_10 : AddCommMonoid.{u4} M₂] [_inst_11 : Module.{u5, u4} R M₂ _inst_1 _inst_10] (g : LinearMap.{u5, u5, u4, u3} R R _inst_1 _inst_1 (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3), Eq.{max (max (succ u2) (succ u1)) (succ u4)} (AlternatingMap.{u5, u4, u2, u1} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.compLinearMap.{u5, u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₂ _inst_10 _inst_11 (OfNat.ofNat.{max (max u3 u2) u1} (AlternatingMap.{u5, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) 0 (Zero.toOfNat0.{max (max u3 u2) u1} (AlternatingMap.{u5, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.zero.{u5, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))) g) (OfNat.ofNat.{max (max u2 u1) u4} (AlternatingMap.{u5, u4, u2, u1} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) 0 (Zero.toOfNat0.{max (max u2 u1) u4} (AlternatingMap.{u5, u4, u2, u1} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.zero.{u5, u4, u2, u1} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι)))
Case conversion may be inaccurate. Consider using '#align alternating_map.zero_comp_linear_map AlternatingMap.zero_compLinearMapₓ'. -/
@[simp]
theorem zero_compLinearMap (g : M₂ →ₗ[R] M) : (0 : AlternatingMap R M N ι).compLinearMap g = 0 :=
  by
  ext
  simp only [comp_linear_map_apply, zero_apply]
#align alternating_map.zero_comp_linear_map AlternatingMap.zero_compLinearMap

/- warning: alternating_map.add_comp_linear_map -> AlternatingMap.add_compLinearMap is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} {M₂ : Type.{u5}} [_inst_10 : AddCommMonoid.{u5} M₂] [_inst_11 : Module.{u1, u5} R M₂ _inst_1 _inst_10] (f₁ : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (f₂ : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (g : LinearMap.{u1, u1, u5, u2} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3), Eq.{max (succ u5) (succ u3) (succ u4)} (AlternatingMap.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.compLinearMap.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₂ _inst_10 _inst_11 (HAdd.hAdd.{max u2 u3 u4, max u2 u3 u4, max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (instHAdd.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.add.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)) f₁ f₂) g) (HAdd.hAdd.{max u5 u3 u4, max u5 u3 u4, max u5 u3 u4} (AlternatingMap.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (instHAdd.{max u5 u3 u4} (AlternatingMap.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.add.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι)) (AlternatingMap.compLinearMap.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₂ _inst_10 _inst_11 f₁ g) (AlternatingMap.compLinearMap.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₂ _inst_10 _inst_11 f₂ g))
but is expected to have type
  forall {R : Type.{u5}} [_inst_1 : Semiring.{u5} R] {M : Type.{u4}} [_inst_2 : AddCommMonoid.{u4} M] [_inst_3 : Module.{u5, u4} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u5, u3} R N _inst_1 _inst_4] {ι : Type.{u2}} {M₂ : Type.{u1}} [_inst_10 : AddCommMonoid.{u1} M₂] [_inst_11 : Module.{u5, u1} R M₂ _inst_1 _inst_10] (f₁ : AlternatingMap.{u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (f₂ : AlternatingMap.{u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (g : LinearMap.{u5, u5, u1, u4} R R _inst_1 _inst_1 (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3), Eq.{max (max (succ u3) (succ u2)) (succ u1)} (AlternatingMap.{u5, u1, u3, u2} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.compLinearMap.{u5, u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₂ _inst_10 _inst_11 (HAdd.hAdd.{max (max u4 u3) u2, max (max u4 u3) u2, max (max u4 u3) u2} (AlternatingMap.{u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (instHAdd.{max (max u4 u3) u2} (AlternatingMap.{u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.add.{u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)) f₁ f₂) g) (HAdd.hAdd.{max (max u3 u2) u1, max (max u3 u2) u1, max (max u3 u2) u1} (AlternatingMap.{u5, u1, u3, u2} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u1, u3, u2} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u1, u3, u2} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (instHAdd.{max (max u3 u2) u1} (AlternatingMap.{u5, u1, u3, u2} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.add.{u5, u1, u3, u2} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι)) (AlternatingMap.compLinearMap.{u5, u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₂ _inst_10 _inst_11 f₁ g) (AlternatingMap.compLinearMap.{u5, u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₂ _inst_10 _inst_11 f₂ g))
Case conversion may be inaccurate. Consider using '#align alternating_map.add_comp_linear_map AlternatingMap.add_compLinearMapₓ'. -/
@[simp]
theorem add_compLinearMap (f₁ f₂ : AlternatingMap R M N ι) (g : M₂ →ₗ[R] M) :
    (f₁ + f₂).compLinearMap g = f₁.compLinearMap g + f₂.compLinearMap g :=
  by
  ext
  simp only [comp_linear_map_apply, add_apply]
#align alternating_map.add_comp_linear_map AlternatingMap.add_compLinearMap

/- warning: alternating_map.comp_linear_map_zero -> AlternatingMap.compLinearMap_zero is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} {M₂ : Type.{u5}} [_inst_10 : AddCommMonoid.{u5} M₂] [_inst_11 : Module.{u1, u5} R M₂ _inst_1 _inst_10] [_inst_14 : Nonempty.{succ u4} ι] (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι), Eq.{max (succ u5) (succ u3) (succ u4)} (AlternatingMap.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.compLinearMap.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₂ _inst_10 _inst_11 f (OfNat.ofNat.{max u5 u2} (LinearMap.{u1, u1, u5, u2} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) 0 (OfNat.mk.{max u5 u2} (LinearMap.{u1, u1, u5, u2} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) 0 (Zero.zero.{max u5 u2} (LinearMap.{u1, u1, u5, u2} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) (LinearMap.hasZero.{u1, u1, u5, u2} R R M₂ M _inst_1 _inst_1 _inst_10 _inst_2 _inst_11 _inst_3 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1))))))) (OfNat.ofNat.{max u5 u3 u4} (AlternatingMap.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) 0 (OfNat.mk.{max u5 u3 u4} (AlternatingMap.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) 0 (Zero.zero.{max u5 u3 u4} (AlternatingMap.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.zero.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι))))
but is expected to have type
  forall {R : Type.{u4}} [_inst_1 : Semiring.{u4} R] {M : Type.{u3}} [_inst_2 : AddCommMonoid.{u3} M] [_inst_3 : Module.{u4, u3} R M _inst_1 _inst_2] {N : Type.{u2}} [_inst_4 : AddCommMonoid.{u2} N] [_inst_5 : Module.{u4, u2} R N _inst_1 _inst_4] {ι : Type.{u5}} {M₂ : Type.{u1}} [_inst_10 : AddCommMonoid.{u1} M₂] [_inst_11 : Module.{u4, u1} R M₂ _inst_1 _inst_10] [_inst_14 : Nonempty.{succ u5} ι] (f : AlternatingMap.{u4, u3, u2, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι), Eq.{max (max (succ u2) (succ u5)) (succ u1)} (AlternatingMap.{u4, u1, u2, u5} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.compLinearMap.{u4, u3, u2, u5, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₂ _inst_10 _inst_11 f (OfNat.ofNat.{max u3 u1} (LinearMap.{u4, u4, u1, u3} R R _inst_1 _inst_1 (RingHom.id.{u4} R (Semiring.toNonAssocSemiring.{u4} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) 0 (Zero.toOfNat0.{max u3 u1} (LinearMap.{u4, u4, u1, u3} R R _inst_1 _inst_1 (RingHom.id.{u4} R (Semiring.toNonAssocSemiring.{u4} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) (LinearMap.instZeroLinearMap.{u4, u4, u1, u3} R R M₂ M _inst_1 _inst_1 _inst_10 _inst_2 _inst_11 _inst_3 (RingHom.id.{u4} R (Semiring.toNonAssocSemiring.{u4} R _inst_1)))))) (OfNat.ofNat.{max (max u2 u5) u1} (AlternatingMap.{u4, u1, u2, u5} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) 0 (Zero.toOfNat0.{max (max u2 u5) u1} (AlternatingMap.{u4, u1, u2, u5} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.zero.{u4, u1, u2, u5} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι)))
Case conversion may be inaccurate. Consider using '#align alternating_map.comp_linear_map_zero AlternatingMap.compLinearMap_zeroₓ'. -/
@[simp]
theorem compLinearMap_zero [Nonempty ι] (f : AlternatingMap R M N ι) :
    f.compLinearMap (0 : M₂ →ₗ[R] M) = 0 := by
  ext
  simp_rw [comp_linear_map_apply, LinearMap.zero_apply, ← Pi.zero_def, map_zero, zero_apply]
#align alternating_map.comp_linear_map_zero AlternatingMap.compLinearMap_zero

/- warning: alternating_map.comp_linear_map_id -> AlternatingMap.compLinearMap_id is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι), Eq.{max (succ u2) (succ u3) (succ u4)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.compLinearMap.{u1, u2, u3, u4, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M _inst_2 _inst_3 f (LinearMap.id.{u1, u2} R M _inst_1 _inst_2 _inst_3)) f
but is expected to have type
  forall {R : Type.{u4}} [_inst_1 : Semiring.{u4} R] {M : Type.{u3}} [_inst_2 : AddCommMonoid.{u3} M] [_inst_3 : Module.{u4, u3} R M _inst_1 _inst_2] {N : Type.{u2}} [_inst_4 : AddCommMonoid.{u2} N] [_inst_5 : Module.{u4, u2} R N _inst_1 _inst_4] {ι : Type.{u1}} (f : AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι), Eq.{max (max (succ u3) (succ u2)) (succ u1)} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.compLinearMap.{u4, u3, u2, u1, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M _inst_2 _inst_3 f (LinearMap.id.{u4, u3} R M _inst_1 _inst_2 _inst_3)) f
Case conversion may be inaccurate. Consider using '#align alternating_map.comp_linear_map_id AlternatingMap.compLinearMap_idₓ'. -/
/-- Composing an alternating map with the identity linear map in each argument. -/
@[simp]
theorem compLinearMap_id (f : AlternatingMap R M N ι) : f.compLinearMap LinearMap.id = f :=
  ext fun _ => rfl
#align alternating_map.comp_linear_map_id AlternatingMap.compLinearMap_id

/- warning: alternating_map.comp_linear_map_injective -> AlternatingMap.compLinearMap_injective is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} {M₂ : Type.{u5}} [_inst_10 : AddCommMonoid.{u5} M₂] [_inst_11 : Module.{u1, u5} R M₂ _inst_1 _inst_10] (f : LinearMap.{u1, u1, u5, u2} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3), (Function.Surjective.{succ u5, succ u2} M₂ M (coeFn.{max (succ u5) (succ u2), max (succ u5) (succ u2)} (LinearMap.{u1, u1, u5, u2} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) (fun (_x : LinearMap.{u1, u1, u5, u2} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) => M₂ -> M) (LinearMap.hasCoeToFun.{u1, u1, u5, u2} R R M₂ M _inst_1 _inst_1 _inst_10 _inst_2 _inst_11 _inst_3 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1))) f)) -> (Function.Injective.{max (succ u2) (succ u3) (succ u4), max (succ u5) (succ u3) (succ u4)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (fun (g : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => AlternatingMap.compLinearMap.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₂ _inst_10 _inst_11 g f))
but is expected to have type
  forall {R : Type.{u5}} [_inst_1 : Semiring.{u5} R] {M : Type.{u3}} [_inst_2 : AddCommMonoid.{u3} M] [_inst_3 : Module.{u5, u3} R M _inst_1 _inst_2] {N : Type.{u2}} [_inst_4 : AddCommMonoid.{u2} N] [_inst_5 : Module.{u5, u2} R N _inst_1 _inst_4] {ι : Type.{u1}} {M₂ : Type.{u4}} [_inst_10 : AddCommMonoid.{u4} M₂] [_inst_11 : Module.{u5, u4} R M₂ _inst_1 _inst_10] (f : LinearMap.{u5, u5, u4, u3} R R _inst_1 _inst_1 (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3), (Function.Surjective.{succ u4, succ u3} M₂ M (FunLike.coe.{max (succ u3) (succ u4), succ u4, succ u3} (LinearMap.{u5, u5, u4, u3} R R _inst_1 _inst_1 (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) M₂ (fun (_x : M₂) => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : M₂) => M) _x) (LinearMap.instFunLikeLinearMap.{u5, u5, u4, u3} R R M₂ M _inst_1 _inst_1 _inst_10 _inst_2 _inst_11 _inst_3 (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1))) f)) -> (Function.Injective.{max (max (succ u3) (succ u2)) (succ u1), max (max (succ u2) (succ u1)) (succ u4)} (AlternatingMap.{u5, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u5, u4, u2, u1} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (fun (g : AlternatingMap.{u5, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => AlternatingMap.compLinearMap.{u5, u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₂ _inst_10 _inst_11 g f))
Case conversion may be inaccurate. Consider using '#align alternating_map.comp_linear_map_injective AlternatingMap.compLinearMap_injectiveₓ'. -/
/-- Composing with a surjective linear map is injective. -/
theorem compLinearMap_injective (f : M₂ →ₗ[R] M) (hf : Function.Surjective f) :
    Function.Injective fun g : AlternatingMap R M N ι => g.compLinearMap f := fun g₁ g₂ h =>
  ext fun x => by simpa [Function.surjInv_eq hf] using ext_iff.mp h (Function.surjInv hf ∘ x)
#align alternating_map.comp_linear_map_injective AlternatingMap.compLinearMap_injective

/- warning: alternating_map.comp_linear_map_inj -> AlternatingMap.compLinearMap_inj is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} {M₂ : Type.{u5}} [_inst_10 : AddCommMonoid.{u5} M₂] [_inst_11 : Module.{u1, u5} R M₂ _inst_1 _inst_10] (f : LinearMap.{u1, u1, u5, u2} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3), (Function.Surjective.{succ u5, succ u2} M₂ M (coeFn.{max (succ u5) (succ u2), max (succ u5) (succ u2)} (LinearMap.{u1, u1, u5, u2} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) (fun (_x : LinearMap.{u1, u1, u5, u2} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) => M₂ -> M) (LinearMap.hasCoeToFun.{u1, u1, u5, u2} R R M₂ M _inst_1 _inst_1 _inst_10 _inst_2 _inst_11 _inst_3 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1))) f)) -> (forall (g₁ : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (g₂ : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι), Iff (Eq.{max (succ u5) (succ u3) (succ u4)} (AlternatingMap.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.compLinearMap.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₂ _inst_10 _inst_11 g₁ f) (AlternatingMap.compLinearMap.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₂ _inst_10 _inst_11 g₂ f)) (Eq.{max (succ u2) (succ u3) (succ u4)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) g₁ g₂))
but is expected to have type
  forall {R : Type.{u5}} [_inst_1 : Semiring.{u5} R] {M : Type.{u3}} [_inst_2 : AddCommMonoid.{u3} M] [_inst_3 : Module.{u5, u3} R M _inst_1 _inst_2] {N : Type.{u2}} [_inst_4 : AddCommMonoid.{u2} N] [_inst_5 : Module.{u5, u2} R N _inst_1 _inst_4] {ι : Type.{u1}} {M₂ : Type.{u4}} [_inst_10 : AddCommMonoid.{u4} M₂] [_inst_11 : Module.{u5, u4} R M₂ _inst_1 _inst_10] (f : LinearMap.{u5, u5, u4, u3} R R _inst_1 _inst_1 (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3), (Function.Surjective.{succ u4, succ u3} M₂ M (FunLike.coe.{max (succ u3) (succ u4), succ u4, succ u3} (LinearMap.{u5, u5, u4, u3} R R _inst_1 _inst_1 (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) M₂ (fun (_x : M₂) => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : M₂) => M) _x) (LinearMap.instFunLikeLinearMap.{u5, u5, u4, u3} R R M₂ M _inst_1 _inst_1 _inst_10 _inst_2 _inst_11 _inst_3 (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1))) f)) -> (forall (g₁ : AlternatingMap.{u5, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (g₂ : AlternatingMap.{u5, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι), Iff (Eq.{max (max (succ u2) (succ u1)) (succ u4)} (AlternatingMap.{u5, u4, u2, u1} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.compLinearMap.{u5, u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₂ _inst_10 _inst_11 g₁ f) (AlternatingMap.compLinearMap.{u5, u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₂ _inst_10 _inst_11 g₂ f)) (Eq.{max (max (succ u3) (succ u2)) (succ u1)} (AlternatingMap.{u5, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) g₁ g₂))
Case conversion may be inaccurate. Consider using '#align alternating_map.comp_linear_map_inj AlternatingMap.compLinearMap_injₓ'. -/
theorem compLinearMap_inj (f : M₂ →ₗ[R] M) (hf : Function.Surjective f)
    (g₁ g₂ : AlternatingMap R M N ι) : g₁.compLinearMap f = g₂.compLinearMap f ↔ g₁ = g₂ :=
  (compLinearMap_injective _ hf).eq_iff
#align alternating_map.comp_linear_map_inj AlternatingMap.compLinearMap_inj

section DomLcongr

variable (ι R N) (S : Type _) [Semiring S] [Module S N] [SMulCommClass R S N]

#print AlternatingMap.domLCongr /-
/-- Construct a linear equivalence between maps from a linear equivalence between domains. -/
@[simps apply]
def domLCongr (e : M ≃ₗ[R] M₂) : AlternatingMap R M N ι ≃ₗ[S] AlternatingMap R M₂ N ι
    where
  toFun f := f.compLinearMap e.symm
  invFun g := g.compLinearMap e
  map_add' _ _ := rfl
  map_smul' _ _ := rfl
  left_inv f := AlternatingMap.ext fun v => f.congr_arg <| funext fun i => e.symm_apply_apply _
  right_inv f := AlternatingMap.ext fun v => f.congr_arg <| funext fun i => e.apply_symm_apply _
#align alternating_map.dom_lcongr AlternatingMap.domLCongr
-/

/- warning: alternating_map.dom_lcongr_refl -> AlternatingMap.domLCongr_refl is a dubious translation:
lean 3 declaration is
  forall (R : Type.{u1}) [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] (N : Type.{u3}) [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] (ι : Type.{u4}) (S : Type.{u5}) [_inst_14 : Semiring.{u5} S] [_inst_15 : Module.{u5, u3} S N _inst_14 _inst_4] [_inst_16 : SMulCommClass.{u1, u5, u3} R S N (SMulZeroClass.toHasSmul.{u1, u3} R N (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (SMulWithZero.toSmulZeroClass.{u1, u3} R N (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)))) (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (MulActionWithZero.toSMulWithZero.{u1, u3} R N (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (Module.toMulActionWithZero.{u1, u3} R N _inst_1 _inst_4 _inst_5)))) (SMulZeroClass.toHasSmul.{u5, u3} S N (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (SMulWithZero.toSmulZeroClass.{u5, u3} S N (MulZeroClass.toHasZero.{u5} S (MulZeroOneClass.toMulZeroClass.{u5} S (MonoidWithZero.toMulZeroOneClass.{u5} S (Semiring.toMonoidWithZero.{u5} S _inst_14)))) (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (MulActionWithZero.toSMulWithZero.{u5, u3} S N (Semiring.toMonoidWithZero.{u5} S _inst_14) (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (Module.toMulActionWithZero.{u5, u3} S N _inst_14 _inst_4 _inst_15))))], Eq.{succ (max u2 u3 u4)} (LinearEquiv.{u5, u5, max u2 u3 u4, max u2 u3 u4} S S _inst_14 _inst_14 (RingHom.id.{u5} S (Semiring.toNonAssocSemiring.{u5} S _inst_14)) (RingHom.id.{u5} S (Semiring.toNonAssocSemiring.{u5} S _inst_14)) (RingHomInvPair.ids.{u5} S _inst_14) (RingHomInvPair.ids.{u5} S _inst_14) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.module.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι S _inst_14 _inst_15 _inst_16) (AlternatingMap.module.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι S _inst_14 _inst_15 _inst_16)) (AlternatingMap.domLCongr.{u1, u2, u3, u4, u2, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M _inst_2 _inst_3 S _inst_14 _inst_15 _inst_16 (LinearEquiv.refl.{u1, u2} R M _inst_1 _inst_2 _inst_3)) (LinearEquiv.refl.{u5, max u2 u3 u4} S (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) _inst_14 (AlternatingMap.addCommMonoid.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.module.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι S _inst_14 _inst_15 _inst_16))
but is expected to have type
  forall (R : Type.{u1}) [_inst_1 : Semiring.{u1} R] {M : Type.{u5}} [_inst_2 : AddCommMonoid.{u5} M] [_inst_3 : Module.{u1, u5} R M _inst_1 _inst_2] (N : Type.{u4}) [_inst_4 : AddCommMonoid.{u4} N] [_inst_5 : Module.{u1, u4} R N _inst_1 _inst_4] (ι : Type.{u3}) (S : Type.{u2}) [_inst_14 : Semiring.{u2} S] [_inst_15 : Module.{u2, u4} S N _inst_14 _inst_4] [_inst_16 : SMulCommClass.{u1, u2, u4} R S N (SMulZeroClass.toSMul.{u1, u4} R N (AddMonoid.toZero.{u4} N (AddCommMonoid.toAddMonoid.{u4} N _inst_4)) (SMulWithZero.toSMulZeroClass.{u1, u4} R N (MonoidWithZero.toZero.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)) (AddMonoid.toZero.{u4} N (AddCommMonoid.toAddMonoid.{u4} N _inst_4)) (MulActionWithZero.toSMulWithZero.{u1, u4} R N (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddMonoid.toZero.{u4} N (AddCommMonoid.toAddMonoid.{u4} N _inst_4)) (Module.toMulActionWithZero.{u1, u4} R N _inst_1 _inst_4 _inst_5)))) (SMulZeroClass.toSMul.{u2, u4} S N (AddMonoid.toZero.{u4} N (AddCommMonoid.toAddMonoid.{u4} N _inst_4)) (SMulWithZero.toSMulZeroClass.{u2, u4} S N (MonoidWithZero.toZero.{u2} S (Semiring.toMonoidWithZero.{u2} S _inst_14)) (AddMonoid.toZero.{u4} N (AddCommMonoid.toAddMonoid.{u4} N _inst_4)) (MulActionWithZero.toSMulWithZero.{u2, u4} S N (Semiring.toMonoidWithZero.{u2} S _inst_14) (AddMonoid.toZero.{u4} N (AddCommMonoid.toAddMonoid.{u4} N _inst_4)) (Module.toMulActionWithZero.{u2, u4} S N _inst_14 _inst_4 _inst_15))))], Eq.{max (max (succ u5) (succ u4)) (succ u3)} (LinearEquiv.{u2, u2, max (max u3 u4) u5, max (max u3 u4) u5} S S _inst_14 _inst_14 (RingHom.id.{u2} S (Semiring.toNonAssocSemiring.{u2} S _inst_14)) (RingHom.id.{u2} S (Semiring.toNonAssocSemiring.{u2} S _inst_14)) (RingHomInvPair.ids.{u2} S _inst_14) (RingHomInvPair.ids.{u2} S _inst_14) (AlternatingMap.{u1, u5, u4, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u5, u4, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u1, u5, u4, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u1, u5, u4, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.module.{u1, u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι S _inst_14 _inst_15 _inst_16) (AlternatingMap.module.{u1, u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι S _inst_14 _inst_15 _inst_16)) (AlternatingMap.domLCongr.{u1, u5, u4, u3, u5, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M _inst_2 _inst_3 S _inst_14 _inst_15 _inst_16 (LinearEquiv.refl.{u1, u5} R M _inst_1 _inst_2 _inst_3)) (LinearEquiv.refl.{u2, max (max u5 u4) u3} S (AlternatingMap.{u1, u5, u4, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) _inst_14 (AlternatingMap.addCommMonoid.{u1, u5, u4, u3} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.module.{u1, u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι S _inst_14 _inst_15 _inst_16))
Case conversion may be inaccurate. Consider using '#align alternating_map.dom_lcongr_refl AlternatingMap.domLCongr_reflₓ'. -/
@[simp]
theorem domLCongr_refl : domLCongr R N ι S (LinearEquiv.refl R M) = LinearEquiv.refl S _ :=
  LinearEquiv.ext fun _ => AlternatingMap.ext fun v => rfl
#align alternating_map.dom_lcongr_refl AlternatingMap.domLCongr_refl

/- warning: alternating_map.dom_lcongr_symm -> AlternatingMap.domLCongr_symm is a dubious translation:
lean 3 declaration is
  forall (R : Type.{u1}) [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] (N : Type.{u3}) [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] (ι : Type.{u4}) {M₂ : Type.{u5}} [_inst_10 : AddCommMonoid.{u5} M₂] [_inst_11 : Module.{u1, u5} R M₂ _inst_1 _inst_10] (S : Type.{u6}) [_inst_14 : Semiring.{u6} S] [_inst_15 : Module.{u6, u3} S N _inst_14 _inst_4] [_inst_16 : SMulCommClass.{u1, u6, u3} R S N (SMulZeroClass.toHasSmul.{u1, u3} R N (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (SMulWithZero.toSmulZeroClass.{u1, u3} R N (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)))) (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (MulActionWithZero.toSMulWithZero.{u1, u3} R N (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (Module.toMulActionWithZero.{u1, u3} R N _inst_1 _inst_4 _inst_5)))) (SMulZeroClass.toHasSmul.{u6, u3} S N (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (SMulWithZero.toSmulZeroClass.{u6, u3} S N (MulZeroClass.toHasZero.{u6} S (MulZeroOneClass.toMulZeroClass.{u6} S (MonoidWithZero.toMulZeroOneClass.{u6} S (Semiring.toMonoidWithZero.{u6} S _inst_14)))) (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (MulActionWithZero.toSMulWithZero.{u6, u3} S N (Semiring.toMonoidWithZero.{u6} S _inst_14) (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (Module.toMulActionWithZero.{u6, u3} S N _inst_14 _inst_4 _inst_15))))] (e : LinearEquiv.{u1, u1, u2, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R _inst_1) (RingHomInvPair.ids.{u1} R _inst_1) M M₂ _inst_2 _inst_10 _inst_3 _inst_11), Eq.{max (succ (max u5 u3 u4)) (succ (max u2 u3 u4))} (LinearEquiv.{u6, u6, max u5 u3 u4, max u2 u3 u4} S S _inst_14 _inst_14 (RingHom.id.{u6} S (Semiring.toNonAssocSemiring.{u6} S _inst_14)) (RingHom.id.{u6} S (Semiring.toNonAssocSemiring.{u6} S _inst_14)) (RingHomInvPair.ids.{u6} S _inst_14) (RingHomInvPair.ids.{u6} S _inst_14) (AlternatingMap.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.module.{u1, u5, u3, u4, u6} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι S _inst_14 _inst_15 _inst_16) (AlternatingMap.module.{u1, u2, u3, u4, u6} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι S _inst_14 _inst_15 _inst_16)) (LinearEquiv.symm.{u6, u6, max u2 u3 u4, max u5 u3 u4} S S (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) _inst_14 _inst_14 (AlternatingMap.addCommMonoid.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.module.{u1, u2, u3, u4, u6} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι S _inst_14 _inst_15 _inst_16) (AlternatingMap.module.{u1, u5, u3, u4, u6} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι S _inst_14 _inst_15 _inst_16) (RingHom.id.{u6} S (Semiring.toNonAssocSemiring.{u6} S _inst_14)) (RingHom.id.{u6} S (Semiring.toNonAssocSemiring.{u6} S _inst_14)) (RingHomInvPair.ids.{u6} S _inst_14) (RingHomInvPair.ids.{u6} S _inst_14) (AlternatingMap.domLCongr.{u1, u2, u3, u4, u5, u6} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₂ _inst_10 _inst_11 S _inst_14 _inst_15 _inst_16 e)) (AlternatingMap.domLCongr.{u1, u5, u3, u4, u2, u6} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι M _inst_2 _inst_3 S _inst_14 _inst_15 _inst_16 (LinearEquiv.symm.{u1, u1, u2, u5} R R M M₂ _inst_1 _inst_1 _inst_2 _inst_10 _inst_3 _inst_11 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R _inst_1) (RingHomInvPair.ids.{u1} R _inst_1) e))
but is expected to have type
  forall (R : Type.{u6}) [_inst_1 : Semiring.{u6} R] {M : Type.{u5}} [_inst_2 : AddCommMonoid.{u5} M] [_inst_3 : Module.{u6, u5} R M _inst_1 _inst_2] (N : Type.{u3}) [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u6, u3} R N _inst_1 _inst_4] (ι : Type.{u2}) {M₂ : Type.{u4}} [_inst_10 : AddCommMonoid.{u4} M₂] [_inst_11 : Module.{u6, u4} R M₂ _inst_1 _inst_10] (S : Type.{u1}) [_inst_14 : Semiring.{u1} S] [_inst_15 : Module.{u1, u3} S N _inst_14 _inst_4] [_inst_16 : SMulCommClass.{u6, u1, u3} R S N (SMulZeroClass.toSMul.{u6, u3} R N (AddMonoid.toZero.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)) (SMulWithZero.toSMulZeroClass.{u6, u3} R N (MonoidWithZero.toZero.{u6} R (Semiring.toMonoidWithZero.{u6} R _inst_1)) (AddMonoid.toZero.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)) (MulActionWithZero.toSMulWithZero.{u6, u3} R N (Semiring.toMonoidWithZero.{u6} R _inst_1) (AddMonoid.toZero.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)) (Module.toMulActionWithZero.{u6, u3} R N _inst_1 _inst_4 _inst_5)))) (SMulZeroClass.toSMul.{u1, u3} S N (AddMonoid.toZero.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)) (SMulWithZero.toSMulZeroClass.{u1, u3} S N (MonoidWithZero.toZero.{u1} S (Semiring.toMonoidWithZero.{u1} S _inst_14)) (AddMonoid.toZero.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)) (MulActionWithZero.toSMulWithZero.{u1, u3} S N (Semiring.toMonoidWithZero.{u1} S _inst_14) (AddMonoid.toZero.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)) (Module.toMulActionWithZero.{u1, u3} S N _inst_14 _inst_4 _inst_15))))] (e : LinearEquiv.{u6, u6, u5, u4} R R _inst_1 _inst_1 (RingHom.id.{u6} R (Semiring.toNonAssocSemiring.{u6} R _inst_1)) (RingHom.id.{u6} R (Semiring.toNonAssocSemiring.{u6} R _inst_1)) (RingHomInvPair.ids.{u6} R _inst_1) (RingHomInvPair.ids.{u6} R _inst_1) M M₂ _inst_2 _inst_10 _inst_3 _inst_11), Eq.{max (max (max (succ u5) (succ u3)) (succ u2)) (succ u4)} (LinearEquiv.{u1, u1, max (max u3 u2) u4, max (max u5 u3) u2} S S _inst_14 _inst_14 (RingHom.id.{u1} S (Semiring.toNonAssocSemiring.{u1} S _inst_14)) (RingHom.id.{u1} S (Semiring.toNonAssocSemiring.{u1} S _inst_14)) (RingHomInvPair.ids.{u1} S _inst_14) (RingHomInvPair.ids.{u1} S _inst_14) (AlternatingMap.{u6, u4, u3, u2} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.{u6, u5, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u6, u4, u3, u2} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u6, u5, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.module.{u6, u4, u3, u2, u1} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι S _inst_14 _inst_15 _inst_16) (AlternatingMap.module.{u6, u5, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι S _inst_14 _inst_15 _inst_16)) (LinearEquiv.symm.{u1, u1, max (max u5 u3) u2, max (max u3 u2) u4} S S (AlternatingMap.{u6, u5, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u6, u4, u3, u2} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) _inst_14 _inst_14 (AlternatingMap.addCommMonoid.{u6, u5, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u6, u4, u3, u2} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.module.{u6, u5, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι S _inst_14 _inst_15 _inst_16) (AlternatingMap.module.{u6, u4, u3, u2, u1} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι S _inst_14 _inst_15 _inst_16) (RingHom.id.{u1} S (Semiring.toNonAssocSemiring.{u1} S _inst_14)) (RingHom.id.{u1} S (Semiring.toNonAssocSemiring.{u1} S _inst_14)) (RingHomInvPair.ids.{u1} S _inst_14) (RingHomInvPair.ids.{u1} S _inst_14) (AlternatingMap.domLCongr.{u6, u5, u3, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₂ _inst_10 _inst_11 S _inst_14 _inst_15 _inst_16 e)) (AlternatingMap.domLCongr.{u6, u4, u3, u2, u5, u1} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι M _inst_2 _inst_3 S _inst_14 _inst_15 _inst_16 (LinearEquiv.symm.{u6, u6, u5, u4} R R M M₂ _inst_1 _inst_1 _inst_2 _inst_10 _inst_3 _inst_11 (RingHom.id.{u6} R (Semiring.toNonAssocSemiring.{u6} R _inst_1)) (RingHom.id.{u6} R (Semiring.toNonAssocSemiring.{u6} R _inst_1)) (RingHomInvPair.ids.{u6} R _inst_1) (RingHomInvPair.ids.{u6} R _inst_1) e))
Case conversion may be inaccurate. Consider using '#align alternating_map.dom_lcongr_symm AlternatingMap.domLCongr_symmₓ'. -/
@[simp]
theorem domLCongr_symm (e : M ≃ₗ[R] M₂) : (domLCongr R N ι S e).symm = domLCongr R N ι S e.symm :=
  rfl
#align alternating_map.dom_lcongr_symm AlternatingMap.domLCongr_symm

/- warning: alternating_map.dom_lcongr_trans -> AlternatingMap.domLCongr_trans is a dubious translation:
lean 3 declaration is
  forall (R : Type.{u1}) [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] (N : Type.{u3}) [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] (ι : Type.{u4}) {M₂ : Type.{u5}} [_inst_10 : AddCommMonoid.{u5} M₂] [_inst_11 : Module.{u1, u5} R M₂ _inst_1 _inst_10] {M₃ : Type.{u6}} [_inst_12 : AddCommMonoid.{u6} M₃] [_inst_13 : Module.{u1, u6} R M₃ _inst_1 _inst_12] (S : Type.{u7}) [_inst_14 : Semiring.{u7} S] [_inst_15 : Module.{u7, u3} S N _inst_14 _inst_4] [_inst_16 : SMulCommClass.{u1, u7, u3} R S N (SMulZeroClass.toHasSmul.{u1, u3} R N (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (SMulWithZero.toSmulZeroClass.{u1, u3} R N (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)))) (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (MulActionWithZero.toSMulWithZero.{u1, u3} R N (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (Module.toMulActionWithZero.{u1, u3} R N _inst_1 _inst_4 _inst_5)))) (SMulZeroClass.toHasSmul.{u7, u3} S N (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (SMulWithZero.toSmulZeroClass.{u7, u3} S N (MulZeroClass.toHasZero.{u7} S (MulZeroOneClass.toMulZeroClass.{u7} S (MonoidWithZero.toMulZeroOneClass.{u7} S (Semiring.toMonoidWithZero.{u7} S _inst_14)))) (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (MulActionWithZero.toSMulWithZero.{u7, u3} S N (Semiring.toMonoidWithZero.{u7} S _inst_14) (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (Module.toMulActionWithZero.{u7, u3} S N _inst_14 _inst_4 _inst_15))))] (e : LinearEquiv.{u1, u1, u2, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R _inst_1) (RingHomInvPair.ids.{u1} R _inst_1) M M₂ _inst_2 _inst_10 _inst_3 _inst_11) (f : LinearEquiv.{u1, u1, u5, u6} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R _inst_1) (RingHomInvPair.ids.{u1} R _inst_1) M₂ M₃ _inst_10 _inst_12 _inst_11 _inst_13), Eq.{max (succ (max u2 u3 u4)) (succ (max u6 u3 u4))} (LinearEquiv.{u7, u7, max u2 u3 u4, max u6 u3 u4} S S _inst_14 _inst_14 (RingHom.id.{u7} S (Semiring.toNonAssocSemiring.{u7} S _inst_14)) (RingHom.id.{u7} S (Semiring.toNonAssocSemiring.{u7} S _inst_14)) (RingHomInvPair.ids.{u7} S _inst_14) (RingHomInvPair.ids.{u7} S _inst_14) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u6, u3, u4} R _inst_1 M₃ _inst_12 _inst_13 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u1, u6, u3, u4} R _inst_1 M₃ _inst_12 _inst_13 N _inst_4 _inst_5 ι) (AlternatingMap.module.{u1, u2, u3, u4, u7} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι S _inst_14 _inst_15 _inst_16) (AlternatingMap.module.{u1, u6, u3, u4, u7} R _inst_1 M₃ _inst_12 _inst_13 N _inst_4 _inst_5 ι S _inst_14 _inst_15 _inst_16)) (LinearEquiv.trans.{u7, u7, u7, max u2 u3 u4, max u5 u3 u4, max u6 u3 u4} S S S (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u6, u3, u4} R _inst_1 M₃ _inst_12 _inst_13 N _inst_4 _inst_5 ι) _inst_14 _inst_14 _inst_14 (AlternatingMap.addCommMonoid.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u1, u6, u3, u4} R _inst_1 M₃ _inst_12 _inst_13 N _inst_4 _inst_5 ι) (AlternatingMap.module.{u1, u2, u3, u4, u7} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι S _inst_14 _inst_15 _inst_16) (AlternatingMap.module.{u1, u5, u3, u4, u7} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι S _inst_14 _inst_15 _inst_16) (AlternatingMap.module.{u1, u6, u3, u4, u7} R _inst_1 M₃ _inst_12 _inst_13 N _inst_4 _inst_5 ι S _inst_14 _inst_15 _inst_16) (RingHom.id.{u7} S (Semiring.toNonAssocSemiring.{u7} S _inst_14)) (RingHom.id.{u7} S (Semiring.toNonAssocSemiring.{u7} S _inst_14)) (RingHom.id.{u7} S (Semiring.toNonAssocSemiring.{u7} S _inst_14)) (RingHom.id.{u7} S (Semiring.toNonAssocSemiring.{u7} S _inst_14)) (RingHom.id.{u7} S (Semiring.toNonAssocSemiring.{u7} S _inst_14)) (RingHom.id.{u7} S (Semiring.toNonAssocSemiring.{u7} S _inst_14)) (RingHomCompTriple.right_ids.{u7, u7} S S _inst_14 _inst_14 (RingHom.id.{u7} S (Semiring.toNonAssocSemiring.{u7} S _inst_14))) (RingHomCompTriple.right_ids.{u7, u7} S S _inst_14 _inst_14 (RingHom.id.{u7} S (Semiring.toNonAssocSemiring.{u7} S _inst_14))) (RingHomInvPair.ids.{u7} S _inst_14) (RingHomInvPair.ids.{u7} S _inst_14) (RingHomInvPair.ids.{u7} S _inst_14) (RingHomInvPair.ids.{u7} S _inst_14) (RingHomInvPair.ids.{u7} S _inst_14) (RingHomInvPair.ids.{u7} S _inst_14) (AlternatingMap.domLCongr.{u1, u2, u3, u4, u5, u7} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₂ _inst_10 _inst_11 S _inst_14 _inst_15 _inst_16 e) (AlternatingMap.domLCongr.{u1, u5, u3, u4, u6, u7} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι M₃ _inst_12 _inst_13 S _inst_14 _inst_15 _inst_16 f)) (AlternatingMap.domLCongr.{u1, u2, u3, u4, u6, u7} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₃ _inst_12 _inst_13 S _inst_14 _inst_15 _inst_16 (LinearEquiv.trans.{u1, u1, u1, u2, u5, u6} R R R M M₂ M₃ _inst_1 _inst_1 _inst_1 _inst_2 _inst_10 _inst_12 _inst_3 _inst_11 _inst_13 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHomCompTriple.right_ids.{u1, u1} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1))) (RingHomCompTriple.right_ids.{u1, u1} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1))) (RingHomInvPair.ids.{u1} R _inst_1) (RingHomInvPair.ids.{u1} R _inst_1) (RingHomInvPair.ids.{u1} R _inst_1) (RingHomInvPair.ids.{u1} R _inst_1) (RingHomInvPair.ids.{u1} R _inst_1) (RingHomInvPair.ids.{u1} R _inst_1) e f))
but is expected to have type
  forall (R : Type.{u7}) [_inst_1 : Semiring.{u7} R] {M : Type.{u6}} [_inst_2 : AddCommMonoid.{u6} M] [_inst_3 : Module.{u7, u6} R M _inst_1 _inst_2] (N : Type.{u3}) [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u7, u3} R N _inst_1 _inst_4] (ι : Type.{u2}) {M₂ : Type.{u5}} [_inst_10 : AddCommMonoid.{u5} M₂] [_inst_11 : Module.{u7, u5} R M₂ _inst_1 _inst_10] {M₃ : Type.{u4}} [_inst_12 : AddCommMonoid.{u4} M₃] [_inst_13 : Module.{u7, u4} R M₃ _inst_1 _inst_12] (S : Type.{u1}) [_inst_14 : Semiring.{u1} S] [_inst_15 : Module.{u1, u3} S N _inst_14 _inst_4] [_inst_16 : SMulCommClass.{u7, u1, u3} R S N (SMulZeroClass.toSMul.{u7, u3} R N (AddMonoid.toZero.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)) (SMulWithZero.toSMulZeroClass.{u7, u3} R N (MonoidWithZero.toZero.{u7} R (Semiring.toMonoidWithZero.{u7} R _inst_1)) (AddMonoid.toZero.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)) (MulActionWithZero.toSMulWithZero.{u7, u3} R N (Semiring.toMonoidWithZero.{u7} R _inst_1) (AddMonoid.toZero.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)) (Module.toMulActionWithZero.{u7, u3} R N _inst_1 _inst_4 _inst_5)))) (SMulZeroClass.toSMul.{u1, u3} S N (AddMonoid.toZero.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)) (SMulWithZero.toSMulZeroClass.{u1, u3} S N (MonoidWithZero.toZero.{u1} S (Semiring.toMonoidWithZero.{u1} S _inst_14)) (AddMonoid.toZero.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)) (MulActionWithZero.toSMulWithZero.{u1, u3} S N (Semiring.toMonoidWithZero.{u1} S _inst_14) (AddMonoid.toZero.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)) (Module.toMulActionWithZero.{u1, u3} S N _inst_14 _inst_4 _inst_15))))] (e : LinearEquiv.{u7, u7, u6, u5} R R _inst_1 _inst_1 (RingHom.id.{u7} R (Semiring.toNonAssocSemiring.{u7} R _inst_1)) (RingHom.id.{u7} R (Semiring.toNonAssocSemiring.{u7} R _inst_1)) (RingHomInvPair.ids.{u7} R _inst_1) (RingHomInvPair.ids.{u7} R _inst_1) M M₂ _inst_2 _inst_10 _inst_3 _inst_11) (f : LinearEquiv.{u7, u7, u5, u4} R R _inst_1 _inst_1 (RingHom.id.{u7} R (Semiring.toNonAssocSemiring.{u7} R _inst_1)) (RingHom.id.{u7} R (Semiring.toNonAssocSemiring.{u7} R _inst_1)) (RingHomInvPair.ids.{u7} R _inst_1) (RingHomInvPair.ids.{u7} R _inst_1) M₂ M₃ _inst_10 _inst_12 _inst_11 _inst_13), Eq.{max (max (max (succ u6) (succ u3)) (succ u2)) (succ u4)} (LinearEquiv.{u1, u1, max (max u6 u3) u2, max (max u3 u2) u4} S S _inst_14 _inst_14 (RingHom.id.{u1} S (Semiring.toNonAssocSemiring.{u1} S _inst_14)) (RingHom.id.{u1} S (Semiring.toNonAssocSemiring.{u1} S _inst_14)) (RingHomInvPair.ids.{u1} S _inst_14) (RingHomInvPair.ids.{u1} S _inst_14) (AlternatingMap.{u7, u6, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u7, u4, u3, u2} R _inst_1 M₃ _inst_12 _inst_13 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u7, u6, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u7, u4, u3, u2} R _inst_1 M₃ _inst_12 _inst_13 N _inst_4 _inst_5 ι) (AlternatingMap.module.{u7, u6, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι S _inst_14 _inst_15 _inst_16) (AlternatingMap.module.{u7, u4, u3, u2, u1} R _inst_1 M₃ _inst_12 _inst_13 N _inst_4 _inst_5 ι S _inst_14 _inst_15 _inst_16)) (LinearEquiv.trans.{u1, u1, u1, max (max u6 u3) u2, max (max u3 u2) u5, max (max u3 u2) u4} S S S (AlternatingMap.{u7, u6, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u7, u5, u3, u2} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.{u7, u4, u3, u2} R _inst_1 M₃ _inst_12 _inst_13 N _inst_4 _inst_5 ι) _inst_14 _inst_14 _inst_14 (AlternatingMap.addCommMonoid.{u7, u6, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u7, u5, u3, u2} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.addCommMonoid.{u7, u4, u3, u2} R _inst_1 M₃ _inst_12 _inst_13 N _inst_4 _inst_5 ι) (AlternatingMap.module.{u7, u6, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι S _inst_14 _inst_15 _inst_16) (AlternatingMap.module.{u7, u5, u3, u2, u1} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι S _inst_14 _inst_15 _inst_16) (AlternatingMap.module.{u7, u4, u3, u2, u1} R _inst_1 M₃ _inst_12 _inst_13 N _inst_4 _inst_5 ι S _inst_14 _inst_15 _inst_16) (RingHom.id.{u1} S (Semiring.toNonAssocSemiring.{u1} S _inst_14)) (RingHom.id.{u1} S (Semiring.toNonAssocSemiring.{u1} S _inst_14)) (RingHom.id.{u1} S (Semiring.toNonAssocSemiring.{u1} S _inst_14)) (RingHom.id.{u1} S (Semiring.toNonAssocSemiring.{u1} S _inst_14)) (RingHom.id.{u1} S (Semiring.toNonAssocSemiring.{u1} S _inst_14)) (RingHom.id.{u1} S (Semiring.toNonAssocSemiring.{u1} S _inst_14)) (RingHomCompTriple.ids.{u1, u1} S S _inst_14 _inst_14 (RingHom.id.{u1} S (Semiring.toNonAssocSemiring.{u1} S _inst_14))) (RingHomCompTriple.ids.{u1, u1} S S _inst_14 _inst_14 (RingHom.id.{u1} S (Semiring.toNonAssocSemiring.{u1} S _inst_14))) (RingHomInvPair.ids.{u1} S _inst_14) (RingHomInvPair.ids.{u1} S _inst_14) (RingHomInvPair.ids.{u1} S _inst_14) (RingHomInvPair.ids.{u1} S _inst_14) (RingHomInvPair.ids.{u1} S _inst_14) (RingHomInvPair.ids.{u1} S _inst_14) (AlternatingMap.domLCongr.{u7, u6, u3, u2, u5, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₂ _inst_10 _inst_11 S _inst_14 _inst_15 _inst_16 e) (AlternatingMap.domLCongr.{u7, u5, u3, u2, u4, u1} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι M₃ _inst_12 _inst_13 S _inst_14 _inst_15 _inst_16 f)) (AlternatingMap.domLCongr.{u7, u6, u3, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₃ _inst_12 _inst_13 S _inst_14 _inst_15 _inst_16 (LinearEquiv.trans.{u7, u7, u7, u6, u5, u4} R R R M M₂ M₃ _inst_1 _inst_1 _inst_1 _inst_2 _inst_10 _inst_12 _inst_3 _inst_11 _inst_13 (RingHom.id.{u7} R (Semiring.toNonAssocSemiring.{u7} R _inst_1)) (RingHom.id.{u7} R (Semiring.toNonAssocSemiring.{u7} R _inst_1)) (RingHom.id.{u7} R (Semiring.toNonAssocSemiring.{u7} R _inst_1)) (RingHom.id.{u7} R (Semiring.toNonAssocSemiring.{u7} R _inst_1)) (RingHom.id.{u7} R (Semiring.toNonAssocSemiring.{u7} R _inst_1)) (RingHom.id.{u7} R (Semiring.toNonAssocSemiring.{u7} R _inst_1)) (RingHomCompTriple.ids.{u7, u7} R R _inst_1 _inst_1 (RingHom.id.{u7} R (Semiring.toNonAssocSemiring.{u7} R _inst_1))) (RingHomCompTriple.ids.{u7, u7} R R _inst_1 _inst_1 (RingHom.id.{u7} R (Semiring.toNonAssocSemiring.{u7} R _inst_1))) (RingHomInvPair.ids.{u7} R _inst_1) (RingHomInvPair.ids.{u7} R _inst_1) (RingHomInvPair.ids.{u7} R _inst_1) (RingHomInvPair.ids.{u7} R _inst_1) (RingHomInvPair.ids.{u7} R _inst_1) (RingHomInvPair.ids.{u7} R _inst_1) e f))
Case conversion may be inaccurate. Consider using '#align alternating_map.dom_lcongr_trans AlternatingMap.domLCongr_transₓ'. -/
theorem domLCongr_trans (e : M ≃ₗ[R] M₂) (f : M₂ ≃ₗ[R] M₃) :
    (domLCongr R N ι S e).trans (domLCongr R N ι S f) = domLCongr R N ι S (e.trans f) :=
  rfl
#align alternating_map.dom_lcongr_trans AlternatingMap.domLCongr_trans

end DomLcongr

/- warning: alternating_map.comp_linear_equiv_eq_zero_iff -> AlternatingMap.compLinearEquiv_eq_zero_iff is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} {M₂ : Type.{u5}} [_inst_10 : AddCommMonoid.{u5} M₂] [_inst_11 : Module.{u1, u5} R M₂ _inst_1 _inst_10] (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (g : LinearEquiv.{u1, u1, u5, u2} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R _inst_1) (RingHomInvPair.ids.{u1} R _inst_1) M₂ M _inst_10 _inst_2 _inst_11 _inst_3), Iff (Eq.{max (succ u5) (succ u3) (succ u4)} (AlternatingMap.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.compLinearMap.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₂ _inst_10 _inst_11 f ((fun (a : Sort.{max (succ u5) (succ u2)}) (b : Sort.{max (succ u5) (succ u2)}) [self : HasLiftT.{max (succ u5) (succ u2), max (succ u5) (succ u2)} a b] => self.0) (LinearEquiv.{u1, u1, u5, u2} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R _inst_1) (RingHomInvPair.ids.{u1} R _inst_1) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) (LinearMap.{u1, u1, u5, u2} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) (HasLiftT.mk.{max (succ u5) (succ u2), max (succ u5) (succ u2)} (LinearEquiv.{u1, u1, u5, u2} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R _inst_1) (RingHomInvPair.ids.{u1} R _inst_1) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) (LinearMap.{u1, u1, u5, u2} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) (CoeTCₓ.coe.{max (succ u5) (succ u2), max (succ u5) (succ u2)} (LinearEquiv.{u1, u1, u5, u2} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R _inst_1) (RingHomInvPair.ids.{u1} R _inst_1) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) (LinearMap.{u1, u1, u5, u2} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) (coeBase.{max (succ u5) (succ u2), max (succ u5) (succ u2)} (LinearEquiv.{u1, u1, u5, u2} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R _inst_1) (RingHomInvPair.ids.{u1} R _inst_1) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) (LinearMap.{u1, u1, u5, u2} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) M₂ M _inst_10 _inst_2 _inst_11 _inst_3) (LinearEquiv.LinearMap.hasCoe.{u1, u1, u5, u2} R R M₂ M _inst_1 _inst_1 _inst_10 _inst_2 _inst_11 _inst_3 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) (RingHomInvPair.ids.{u1} R _inst_1) (RingHomInvPair.ids.{u1} R _inst_1))))) g)) (OfNat.ofNat.{max u5 u3 u4} (AlternatingMap.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) 0 (OfNat.mk.{max u5 u3 u4} (AlternatingMap.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) 0 (Zero.zero.{max u5 u3 u4} (AlternatingMap.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.zero.{u1, u5, u3, u4} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι))))) (Eq.{max (succ u2) (succ u3) (succ u4)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f (OfNat.ofNat.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) 0 (OfNat.mk.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) 0 (Zero.zero.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.zero.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))))
but is expected to have type
  forall {R : Type.{u5}} [_inst_1 : Semiring.{u5} R] {M : Type.{u4}} [_inst_2 : AddCommMonoid.{u4} M] [_inst_3 : Module.{u5, u4} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u5, u3} R N _inst_1 _inst_4] {ι : Type.{u2}} {M₂ : Type.{u1}} [_inst_10 : AddCommMonoid.{u1} M₂] [_inst_11 : Module.{u5, u1} R M₂ _inst_1 _inst_10] (f : AlternatingMap.{u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (g : LinearEquiv.{u5, u5, u1, u4} R R _inst_1 _inst_1 (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1)) (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1)) (RingHomInvPair.ids.{u5} R _inst_1) (RingHomInvPair.ids.{u5} R _inst_1) M₂ M _inst_10 _inst_2 _inst_11 _inst_3), Iff (Eq.{max (max (succ u3) (succ u2)) (succ u1)} (AlternatingMap.{u5, u1, u3, u2} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.compLinearMap.{u5, u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι M₂ _inst_10 _inst_11 f (LinearEquiv.toLinearMap.{u5, u5, u1, u4} R R _inst_1 _inst_1 (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1)) (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1)) (RingHomInvPair.ids.{u5} R _inst_1) (RingHomInvPair.ids.{u5} R _inst_1) M₂ M _inst_10 _inst_2 _inst_11 _inst_3 g)) (OfNat.ofNat.{max (max u3 u2) u1} (AlternatingMap.{u5, u1, u3, u2} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) 0 (Zero.toOfNat0.{max (max u3 u2) u1} (AlternatingMap.{u5, u1, u3, u2} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι) (AlternatingMap.zero.{u5, u1, u3, u2} R _inst_1 M₂ _inst_10 _inst_11 N _inst_4 _inst_5 ι)))) (Eq.{max (max (succ u4) (succ u3)) (succ u2)} (AlternatingMap.{u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f (OfNat.ofNat.{max (max u4 u3) u2} (AlternatingMap.{u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) 0 (Zero.toOfNat0.{max (max u4 u3) u2} (AlternatingMap.{u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.zero.{u5, u4, u3, u2} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))))
Case conversion may be inaccurate. Consider using '#align alternating_map.comp_linear_equiv_eq_zero_iff AlternatingMap.compLinearEquiv_eq_zero_iffₓ'. -/
/-- Composing an alternating map with the same linear equiv on each argument gives the zero map
if and only if the alternating map is the zero map. -/
@[simp]
theorem compLinearEquiv_eq_zero_iff (f : AlternatingMap R M N ι) (g : M₂ ≃ₗ[R] M) :
    f.compLinearMap (g : M₂ →ₗ[R] M) = 0 ↔ f = 0 :=
  (domLCongr R N ι ℕ g.symm).map_eq_zero_iff
#align alternating_map.comp_linear_equiv_eq_zero_iff AlternatingMap.compLinearEquiv_eq_zero_iff

variable (f f' : AlternatingMap R M N ι)

variable (g g₂ : AlternatingMap R M N' ι)

variable (g' : AlternatingMap R M' N' ι)

variable (v : ι → M) (v' : ι → M')

open Function

/-!
### Other lemmas from `multilinear_map`
-/


section

open BigOperators

#print AlternatingMap.map_update_sum /-
theorem map_update_sum {α : Type _} [DecidableEq ι] (t : Finset α) (i : ι) (g : α → M) (m : ι → M) :
    f (update m i (∑ a in t, g a)) = ∑ a in t, f (update m i (g a)) :=
  f.toMultilinearMap.map_update_sum t i g m
#align alternating_map.map_update_sum AlternatingMap.map_update_sum
-/

end

/-!
### Theorems specific to alternating maps

Various properties of reordered and repeated inputs which follow from
`alternating_map.map_eq_zero_of_eq`.
-/


/- warning: alternating_map.map_update_self -> AlternatingMap.map_update_self is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (v : ι -> M) [_inst_14 : DecidableEq.{succ u4} ι] {i : ι} {j : ι}, (Ne.{succ u4} ι i j) -> (Eq.{succ u3} N (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f (Function.update.{succ u4, succ u2} ι (fun (ᾰ : ι) => M) (fun (a : ι) (b : ι) => _inst_14 a b) v i (v j))) (OfNat.ofNat.{u3} N 0 (OfNat.mk.{u3} N 0 (Zero.zero.{u3} N (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)))))))
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (v : ι -> M) [_inst_14 : DecidableEq.{succ u4} ι] {i : ι} {j : ι}, (Ne.{succ u4} ι i j) -> (Eq.{succ u3} N (FunLike.coe.{max (max (succ u2) (succ u3)) (succ u4), max (succ u2) (succ u4), succ u3} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f (Function.update.{succ u4, succ u2} ι (fun (ᾰ : ι) => M) (fun (a : ι) (b : ι) => _inst_14 a b) v i (v j))) (OfNat.ofNat.{u3} N 0 (Zero.toOfNat0.{u3} N (AddMonoid.toZero.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)))))
Case conversion may be inaccurate. Consider using '#align alternating_map.map_update_self AlternatingMap.map_update_selfₓ'. -/
theorem map_update_self [DecidableEq ι] {i j : ι} (hij : i ≠ j) :
    f (Function.update v i (v j)) = 0 :=
  f.map_eq_zero_of_eq _ (by rw [Function.update_same, Function.update_noteq hij.symm]) hij
#align alternating_map.map_update_self AlternatingMap.map_update_self

/- warning: alternating_map.map_update_update -> AlternatingMap.map_update_update is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (v : ι -> M) [_inst_14 : DecidableEq.{succ u4} ι] {i : ι} {j : ι}, (Ne.{succ u4} ι i j) -> (forall (m : M), Eq.{succ u3} N (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f (Function.update.{succ u4, succ u2} ι (fun (ᾰ : ι) => M) (fun (a : ι) (b : ι) => _inst_14 a b) (Function.update.{succ u4, succ u2} ι (fun (a : ι) => M) (fun (a : ι) (b : ι) => _inst_14 a b) v i m) j m)) (OfNat.ofNat.{u3} N 0 (OfNat.mk.{u3} N 0 (Zero.zero.{u3} N (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)))))))
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (v : ι -> M) [_inst_14 : DecidableEq.{succ u4} ι] {i : ι} {j : ι}, (Ne.{succ u4} ι i j) -> (forall (m : M), Eq.{succ u3} N (FunLike.coe.{max (max (succ u2) (succ u3)) (succ u4), max (succ u2) (succ u4), succ u3} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f (Function.update.{succ u4, succ u2} ι (fun (ᾰ : ι) => M) (fun (a : ι) (b : ι) => _inst_14 a b) (Function.update.{succ u4, succ u2} ι (fun (a : ι) => M) (fun (a : ι) (b : ι) => _inst_14 a b) v i m) j m)) (OfNat.ofNat.{u3} N 0 (Zero.toOfNat0.{u3} N (AddMonoid.toZero.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)))))
Case conversion may be inaccurate. Consider using '#align alternating_map.map_update_update AlternatingMap.map_update_updateₓ'. -/
theorem map_update_update [DecidableEq ι] {i j : ι} (hij : i ≠ j) (m : M) :
    f (Function.update (Function.update v i m) j m) = 0 :=
  f.map_eq_zero_of_eq _
    (by rw [Function.update_same, Function.update_noteq hij, Function.update_same]) hij
#align alternating_map.map_update_update AlternatingMap.map_update_update

/- warning: alternating_map.map_swap_add -> AlternatingMap.map_swap_add is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (v : ι -> M) [_inst_14 : DecidableEq.{succ u4} ι] {i : ι} {j : ι}, (Ne.{succ u4} ι i j) -> (Eq.{succ u3} N (HAdd.hAdd.{u3, u3, u3} N N N (instHAdd.{u3} N (AddZeroClass.toHasAdd.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)))) (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f (Function.comp.{succ u4, succ u4, succ u2} ι ι M v (coeFn.{succ u4, succ u4} (Equiv.Perm.{succ u4} ι) (fun (_x : Equiv.{succ u4, succ u4} ι ι) => ι -> ι) (Equiv.hasCoeToFun.{succ u4, succ u4} ι ι) (Equiv.swap.{succ u4} ι (fun (a : ι) (b : ι) => _inst_14 a b) i j)))) (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f v)) (OfNat.ofNat.{u3} N 0 (OfNat.mk.{u3} N 0 (Zero.zero.{u3} N (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)))))))
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (v : ι -> M) [_inst_14 : DecidableEq.{succ u4} ι] {i : ι} {j : ι}, (Ne.{succ u4} ι i j) -> (Eq.{succ u3} N (HAdd.hAdd.{u3, u3, u3} N N N (instHAdd.{u3} N (AddZeroClass.toAdd.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)))) (FunLike.coe.{max (max (succ u2) (succ u3)) (succ u4), max (succ u2) (succ u4), succ u3} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f (Function.comp.{succ u4, succ u4, succ u2} ι ι M v (FunLike.coe.{succ u4, succ u4, succ u4} (Equiv.Perm.{succ u4} ι) ι (fun (_x : ι) => (fun (x._@.Mathlib.Logic.Equiv.Defs._hyg.808 : ι) => ι) _x) (Equiv.instFunLikeEquiv.{succ u4, succ u4} ι ι) (Equiv.swap.{succ u4} ι (fun (a : ι) (b : ι) => _inst_14 a b) i j)))) (FunLike.coe.{max (max (succ u2) (succ u3)) (succ u4), max (succ u2) (succ u4), succ u3} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f v)) (OfNat.ofNat.{u3} N 0 (Zero.toOfNat0.{u3} N (AddMonoid.toZero.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)))))
Case conversion may be inaccurate. Consider using '#align alternating_map.map_swap_add AlternatingMap.map_swap_addₓ'. -/
theorem map_swap_add [DecidableEq ι] {i j : ι} (hij : i ≠ j) : f (v ∘ Equiv.swap i j) + f v = 0 :=
  by
  rw [Equiv.comp_swap_eq_update]
  convert f.map_update_update v hij (v i + v j)
  simp [f.map_update_self _ hij, f.map_update_self _ hij.symm,
    Function.update_comm hij (v i + v j) (v _) v, Function.update_comm hij.symm (v i) (v i) v]
#align alternating_map.map_swap_add AlternatingMap.map_swap_add

/- warning: alternating_map.map_add_swap -> AlternatingMap.map_add_swap is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (v : ι -> M) [_inst_14 : DecidableEq.{succ u4} ι] {i : ι} {j : ι}, (Ne.{succ u4} ι i j) -> (Eq.{succ u3} N (HAdd.hAdd.{u3, u3, u3} N N N (instHAdd.{u3} N (AddZeroClass.toHasAdd.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)))) (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f v) (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f (Function.comp.{succ u4, succ u4, succ u2} ι ι M v (coeFn.{succ u4, succ u4} (Equiv.Perm.{succ u4} ι) (fun (_x : Equiv.{succ u4, succ u4} ι ι) => ι -> ι) (Equiv.hasCoeToFun.{succ u4, succ u4} ι ι) (Equiv.swap.{succ u4} ι (fun (a : ι) (b : ι) => _inst_14 a b) i j))))) (OfNat.ofNat.{u3} N 0 (OfNat.mk.{u3} N 0 (Zero.zero.{u3} N (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)))))))
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (v : ι -> M) [_inst_14 : DecidableEq.{succ u4} ι] {i : ι} {j : ι}, (Ne.{succ u4} ι i j) -> (Eq.{succ u3} N (HAdd.hAdd.{u3, u3, u3} N N N (instHAdd.{u3} N (AddZeroClass.toAdd.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)))) (FunLike.coe.{max (max (succ u2) (succ u3)) (succ u4), max (succ u2) (succ u4), succ u3} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f v) (FunLike.coe.{max (max (succ u2) (succ u3)) (succ u4), max (succ u2) (succ u4), succ u3} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f (Function.comp.{succ u4, succ u4, succ u2} ι ι M v (FunLike.coe.{succ u4, succ u4, succ u4} (Equiv.Perm.{succ u4} ι) ι (fun (_x : ι) => (fun (x._@.Mathlib.Logic.Equiv.Defs._hyg.808 : ι) => ι) _x) (Equiv.instFunLikeEquiv.{succ u4, succ u4} ι ι) (Equiv.swap.{succ u4} ι (fun (a : ι) (b : ι) => _inst_14 a b) i j))))) (OfNat.ofNat.{u3} N 0 (Zero.toOfNat0.{u3} N (AddMonoid.toZero.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)))))
Case conversion may be inaccurate. Consider using '#align alternating_map.map_add_swap AlternatingMap.map_add_swapₓ'. -/
theorem map_add_swap [DecidableEq ι] {i j : ι} (hij : i ≠ j) : f v + f (v ∘ Equiv.swap i j) = 0 :=
  by
  rw [add_comm]
  exact f.map_swap_add v hij
#align alternating_map.map_add_swap AlternatingMap.map_add_swap

#print AlternatingMap.map_swap /-
theorem map_swap [DecidableEq ι] {i j : ι} (hij : i ≠ j) : g (v ∘ Equiv.swap i j) = -g v :=
  eq_neg_of_add_eq_zero_left <| g.map_swap_add v hij
#align alternating_map.map_swap AlternatingMap.map_swap
-/

#print AlternatingMap.map_perm /-
theorem map_perm [DecidableEq ι] [Fintype ι] (v : ι → M) (σ : Equiv.Perm ι) :
    g (v ∘ σ) = σ.sign • g v :=
  by
  apply Equiv.Perm.swap_induction_on' σ
  · simp
  · intro s x y hxy hI
    simpa [g.map_swap (v ∘ s) hxy, Equiv.Perm.sign_swap hxy] using hI
#align alternating_map.map_perm AlternatingMap.map_perm
-/

/- warning: alternating_map.map_congr_perm -> AlternatingMap.map_congr_perm is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N' : Type.{u3}} [_inst_8 : AddCommGroup.{u3} N'] [_inst_9 : Module.{u1, u3} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)] {ι : Type.{u4}} (g : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (v : ι -> M) [_inst_14 : DecidableEq.{succ u4} ι] [_inst_15 : Fintype.{u4} ι] (σ : Equiv.Perm.{succ u4} ι), Eq.{succ u3} N' (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) => (ι -> M) -> N') (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) g v) (SMul.smul.{0, u3} (Units.{0} Int Int.monoid) N' (Units.hasSmul.{0, u3} Int N' Int.monoid (SubNegMonoid.SMulInt.{u3} N' (AddGroup.toSubNegMonoid.{u3} N' (AddCommGroup.toAddGroup.{u3} N' _inst_8)))) (coeFn.{succ u4, succ u4} (MonoidHom.{u4, 0} (Equiv.Perm.{succ u4} ι) (Units.{0} Int Int.monoid) (Monoid.toMulOneClass.{u4} (Equiv.Perm.{succ u4} ι) (DivInvMonoid.toMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Group.toDivInvMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.Perm.permGroup.{u4} ι)))) (Units.mulOneClass.{0} Int Int.monoid)) (fun (_x : MonoidHom.{u4, 0} (Equiv.Perm.{succ u4} ι) (Units.{0} Int Int.monoid) (Monoid.toMulOneClass.{u4} (Equiv.Perm.{succ u4} ι) (DivInvMonoid.toMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Group.toDivInvMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.Perm.permGroup.{u4} ι)))) (Units.mulOneClass.{0} Int Int.monoid)) => (Equiv.Perm.{succ u4} ι) -> (Units.{0} Int Int.monoid)) (MonoidHom.hasCoeToFun.{u4, 0} (Equiv.Perm.{succ u4} ι) (Units.{0} Int Int.monoid) (Monoid.toMulOneClass.{u4} (Equiv.Perm.{succ u4} ι) (DivInvMonoid.toMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Group.toDivInvMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.Perm.permGroup.{u4} ι)))) (Units.mulOneClass.{0} Int Int.monoid)) (Equiv.Perm.sign.{u4} ι (fun (a : ι) (b : ι) => _inst_14 a b) _inst_15) σ) (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) => (ι -> M) -> N') (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) g (Function.comp.{succ u4, succ u4, succ u2} ι ι M v (coeFn.{succ u4, succ u4} (Equiv.Perm.{succ u4} ι) (fun (_x : Equiv.{succ u4, succ u4} ι ι) => ι -> ι) (Equiv.hasCoeToFun.{succ u4, succ u4} ι ι) σ))))
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N' : Type.{u3}} [_inst_8 : AddCommGroup.{u3} N'] [_inst_9 : Module.{u1, u3} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)] {ι : Type.{u4}} (g : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (v : ι -> M) [_inst_14 : DecidableEq.{succ u4} ι] [_inst_15 : Fintype.{u4} ι] (σ : Equiv.Perm.{succ u4} ι), Eq.{succ u3} N' (FunLike.coe.{max (max (succ u2) (succ u3)) (succ u4), max (succ u2) (succ u4), succ u3} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (ι -> M) (fun (_x : ι -> M) => N') (AlternatingMap.funLike.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) g v) (HSMul.hSMul.{0, u3, u3} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : Equiv.Perm.{succ u4} ι) => Units.{0} Int Int.instMonoidInt) σ) N' N' (instHSMul.{0, u3} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : Equiv.Perm.{succ u4} ι) => Units.{0} Int Int.instMonoidInt) σ) N' (Units.instSMulUnits.{0, u3} Int N' Int.instMonoidInt (SubNegMonoid.SMulInt.{u3} N' (AddGroup.toSubNegMonoid.{u3} N' (AddCommGroup.toAddGroup.{u3} N' _inst_8))))) (FunLike.coe.{succ u4, succ u4, 1} (MonoidHom.{u4, 0} (Equiv.Perm.{succ u4} ι) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u4} (Equiv.Perm.{succ u4} ι) (DivInvMonoid.toMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Group.toDivInvMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.Perm.permGroup.{u4} ι)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (Equiv.Perm.{succ u4} ι) (fun (_x : Equiv.Perm.{succ u4} ι) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : Equiv.Perm.{succ u4} ι) => Units.{0} Int Int.instMonoidInt) _x) (MulHomClass.toFunLike.{u4, u4, 0} (MonoidHom.{u4, 0} (Equiv.Perm.{succ u4} ι) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u4} (Equiv.Perm.{succ u4} ι) (DivInvMonoid.toMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Group.toDivInvMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.Perm.permGroup.{u4} ι)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (Equiv.Perm.{succ u4} ι) (Units.{0} Int Int.instMonoidInt) (MulOneClass.toMul.{u4} (Equiv.Perm.{succ u4} ι) (Monoid.toMulOneClass.{u4} (Equiv.Perm.{succ u4} ι) (DivInvMonoid.toMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Group.toDivInvMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.Perm.permGroup.{u4} ι))))) (MulOneClass.toMul.{0} (Units.{0} Int Int.instMonoidInt) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (MonoidHomClass.toMulHomClass.{u4, u4, 0} (MonoidHom.{u4, 0} (Equiv.Perm.{succ u4} ι) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u4} (Equiv.Perm.{succ u4} ι) (DivInvMonoid.toMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Group.toDivInvMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.Perm.permGroup.{u4} ι)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (Equiv.Perm.{succ u4} ι) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u4} (Equiv.Perm.{succ u4} ι) (DivInvMonoid.toMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Group.toDivInvMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.Perm.permGroup.{u4} ι)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt) (MonoidHom.monoidHomClass.{u4, 0} (Equiv.Perm.{succ u4} ι) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u4} (Equiv.Perm.{succ u4} ι) (DivInvMonoid.toMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Group.toDivInvMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.Perm.permGroup.{u4} ι)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)))) (Equiv.Perm.sign.{u4} ι (fun (a : ι) (b : ι) => _inst_14 a b) _inst_15) σ) (FunLike.coe.{max (max (succ u2) (succ u3)) (succ u4), max (succ u2) (succ u4), succ u3} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (ι -> M) (fun (_x : ι -> M) => N') (AlternatingMap.funLike.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) g (Function.comp.{succ u4, succ u4, succ u2} ι ι M v (FunLike.coe.{succ u4, succ u4, succ u4} (Equiv.Perm.{succ u4} ι) ι (fun (_x : ι) => (fun (x._@.Mathlib.Logic.Equiv.Defs._hyg.808 : ι) => ι) _x) (Equiv.instFunLikeEquiv.{succ u4, succ u4} ι ι) σ))))
Case conversion may be inaccurate. Consider using '#align alternating_map.map_congr_perm AlternatingMap.map_congr_permₓ'. -/
theorem map_congr_perm [DecidableEq ι] [Fintype ι] (σ : Equiv.Perm ι) : g v = σ.sign • g (v ∘ σ) :=
  by
  rw [g.map_perm, smul_smul]
  simp
#align alternating_map.map_congr_perm AlternatingMap.map_congr_perm

section DomDomCongr

#print AlternatingMap.domDomCongr /-
/-- Transfer the arguments to a map along an equivalence between argument indices.

This is the alternating version of `multilinear_map.dom_dom_congr`. -/
@[simps]
def domDomCongr (σ : ι ≃ ι') (f : AlternatingMap R M N ι) : AlternatingMap R M N ι' :=
  {
    f.toMultilinearMap.domDomCongr
      σ with
    toFun := fun v => f (v ∘ σ)
    map_eq_zero_of_eq' := fun v i j hv hij =>
      f.map_eq_zero_of_eq (v ∘ σ) (by simpa using hv) (σ.symm.Injective.Ne hij) }
#align alternating_map.dom_dom_congr AlternatingMap.domDomCongr
-/

/- warning: alternating_map.dom_dom_congr_refl -> AlternatingMap.domDomCongr_refl is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι), Eq.{max (succ u2) (succ u3) (succ u4)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.domDomCongr.{u1, u2, u3, u4, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι ι (Equiv.refl.{succ u4} ι) f) f
but is expected to have type
  forall {R : Type.{u4}} [_inst_1 : Semiring.{u4} R] {M : Type.{u3}} [_inst_2 : AddCommMonoid.{u3} M] [_inst_3 : Module.{u4, u3} R M _inst_1 _inst_2] {N : Type.{u2}} [_inst_4 : AddCommMonoid.{u2} N] [_inst_5 : Module.{u4, u2} R N _inst_1 _inst_4] {ι : Type.{u1}} (f : AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι), Eq.{max (max (succ u3) (succ u2)) (succ u1)} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.domDomCongr.{u4, u3, u2, u1, u1} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι ι (Equiv.refl.{succ u1} ι) f) f
Case conversion may be inaccurate. Consider using '#align alternating_map.dom_dom_congr_refl AlternatingMap.domDomCongr_reflₓ'. -/
@[simp]
theorem domDomCongr_refl (f : AlternatingMap R M N ι) : f.domDomCongr (Equiv.refl ι) = f :=
  ext fun v => rfl
#align alternating_map.dom_dom_congr_refl AlternatingMap.domDomCongr_refl

/- warning: alternating_map.dom_dom_congr_trans -> AlternatingMap.domDomCongr_trans is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} {ι' : Type.{u5}} {ι'' : Type.{u6}} (σ₁ : Equiv.{succ u4, succ u5} ι ι') (σ₂ : Equiv.{succ u5, succ u6} ι' ι'') (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι), Eq.{max (succ u2) (succ u3) (succ u6)} (AlternatingMap.{u1, u2, u3, u6} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι'') (AlternatingMap.domDomCongr.{u1, u2, u3, u4, u6} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι ι'' (Equiv.trans.{succ u4, succ u5, succ u6} ι ι' ι'' σ₁ σ₂) f) (AlternatingMap.domDomCongr.{u1, u2, u3, u5, u6} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι' ι'' σ₂ (AlternatingMap.domDomCongr.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι ι' σ₁ f))
but is expected to have type
  forall {R : Type.{u3}} [_inst_1 : Semiring.{u3} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u3, u2} R M _inst_1 _inst_2] {N : Type.{u1}} [_inst_4 : AddCommMonoid.{u1} N] [_inst_5 : Module.{u3, u1} R N _inst_1 _inst_4] {ι : Type.{u6}} {ι' : Type.{u5}} {ι'' : Type.{u4}} (σ₁ : Equiv.{succ u6, succ u5} ι ι') (σ₂ : Equiv.{succ u5, succ u4} ι' ι'') (f : AlternatingMap.{u3, u2, u1, u6} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι), Eq.{max (max (succ u2) (succ u1)) (succ u4)} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι'') (AlternatingMap.domDomCongr.{u3, u2, u1, u6, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι ι'' (Equiv.trans.{succ u6, succ u5, succ u4} ι ι' ι'' σ₁ σ₂) f) (AlternatingMap.domDomCongr.{u3, u2, u1, u5, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι' ι'' σ₂ (AlternatingMap.domDomCongr.{u3, u2, u1, u6, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι ι' σ₁ f))
Case conversion may be inaccurate. Consider using '#align alternating_map.dom_dom_congr_trans AlternatingMap.domDomCongr_transₓ'. -/
theorem domDomCongr_trans (σ₁ : ι ≃ ι') (σ₂ : ι' ≃ ι'') (f : AlternatingMap R M N ι) :
    f.domDomCongr (σ₁.trans σ₂) = (f.domDomCongr σ₁).domDomCongr σ₂ :=
  rfl
#align alternating_map.dom_dom_congr_trans AlternatingMap.domDomCongr_trans

/- warning: alternating_map.dom_dom_congr_zero -> AlternatingMap.domDomCongr_zero is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} {ι' : Type.{u5}} (σ : Equiv.{succ u4, succ u5} ι ι'), Eq.{max (succ u2) (succ u3) (succ u5)} (AlternatingMap.{u1, u2, u3, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') (AlternatingMap.domDomCongr.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι ι' σ (OfNat.ofNat.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) 0 (OfNat.mk.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) 0 (Zero.zero.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.zero.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))))) (OfNat.ofNat.{max u2 u3 u5} (AlternatingMap.{u1, u2, u3, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') 0 (OfNat.mk.{max u2 u3 u5} (AlternatingMap.{u1, u2, u3, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') 0 (Zero.zero.{max u2 u3 u5} (AlternatingMap.{u1, u2, u3, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') (AlternatingMap.zero.{u1, u2, u3, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι'))))
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u3}} [_inst_2 : AddCommMonoid.{u3} M] [_inst_3 : Module.{u1, u3} R M _inst_1 _inst_2] {N : Type.{u2}} [_inst_4 : AddCommMonoid.{u2} N] [_inst_5 : Module.{u1, u2} R N _inst_1 _inst_4] {ι : Type.{u5}} {ι' : Type.{u4}} (σ : Equiv.{succ u5, succ u4} ι ι'), Eq.{max (max (succ u3) (succ u2)) (succ u4)} (AlternatingMap.{u1, u3, u2, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') (AlternatingMap.domDomCongr.{u1, u3, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι ι' σ (OfNat.ofNat.{max (max u3 u2) u5} (AlternatingMap.{u1, u3, u2, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) 0 (Zero.toOfNat0.{max (max u3 u2) u5} (AlternatingMap.{u1, u3, u2, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.zero.{u1, u3, u2, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))) (OfNat.ofNat.{max (max u3 u2) u4} (AlternatingMap.{u1, u3, u2, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') 0 (Zero.toOfNat0.{max (max u3 u2) u4} (AlternatingMap.{u1, u3, u2, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') (AlternatingMap.zero.{u1, u3, u2, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι')))
Case conversion may be inaccurate. Consider using '#align alternating_map.dom_dom_congr_zero AlternatingMap.domDomCongr_zeroₓ'. -/
@[simp]
theorem domDomCongr_zero (σ : ι ≃ ι') : (0 : AlternatingMap R M N ι).domDomCongr σ = 0 :=
  rfl
#align alternating_map.dom_dom_congr_zero AlternatingMap.domDomCongr_zero

/- warning: alternating_map.dom_dom_congr_add -> AlternatingMap.domDomCongr_add is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} {ι' : Type.{u5}} (σ : Equiv.{succ u4, succ u5} ι ι') (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (g : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι), Eq.{max (succ u2) (succ u3) (succ u5)} (AlternatingMap.{u1, u2, u3, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') (AlternatingMap.domDomCongr.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι ι' σ (HAdd.hAdd.{max u2 u3 u4, max u2 u3 u4, max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (instHAdd.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.add.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)) f g)) (HAdd.hAdd.{max u2 u3 u5, max u2 u3 u5, max u2 u3 u5} (AlternatingMap.{u1, u2, u3, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') (AlternatingMap.{u1, u2, u3, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') (AlternatingMap.{u1, u2, u3, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') (instHAdd.{max u2 u3 u5} (AlternatingMap.{u1, u2, u3, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') (AlternatingMap.add.{u1, u2, u3, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι')) (AlternatingMap.domDomCongr.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι ι' σ f) (AlternatingMap.domDomCongr.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι ι' σ g))
but is expected to have type
  forall {R : Type.{u3}} [_inst_1 : Semiring.{u3} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u3, u2} R M _inst_1 _inst_2] {N : Type.{u1}} [_inst_4 : AddCommMonoid.{u1} N] [_inst_5 : Module.{u3, u1} R N _inst_1 _inst_4] {ι : Type.{u5}} {ι' : Type.{u4}} (σ : Equiv.{succ u5, succ u4} ι ι') (f : AlternatingMap.{u3, u2, u1, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (g : AlternatingMap.{u3, u2, u1, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι), Eq.{max (max (succ u2) (succ u1)) (succ u4)} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') (AlternatingMap.domDomCongr.{u3, u2, u1, u5, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι ι' σ (HAdd.hAdd.{max (max u2 u1) u5, max (max u2 u1) u5, max (max u2 u1) u5} (AlternatingMap.{u3, u2, u1, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u3, u2, u1, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.{u3, u2, u1, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (instHAdd.{max (max u2 u1) u5} (AlternatingMap.{u3, u2, u1, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.add.{u3, u2, u1, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)) f g)) (HAdd.hAdd.{max (max u2 u1) u4, max (max u2 u1) u4, max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') (instHAdd.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') (AlternatingMap.add.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι')) (AlternatingMap.domDomCongr.{u3, u2, u1, u5, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι ι' σ f) (AlternatingMap.domDomCongr.{u3, u2, u1, u5, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι ι' σ g))
Case conversion may be inaccurate. Consider using '#align alternating_map.dom_dom_congr_add AlternatingMap.domDomCongr_addₓ'. -/
@[simp]
theorem domDomCongr_add (σ : ι ≃ ι') (f g : AlternatingMap R M N ι) :
    (f + g).domDomCongr σ = f.domDomCongr σ + g.domDomCongr σ :=
  rfl
#align alternating_map.dom_dom_congr_add AlternatingMap.domDomCongr_add

#print AlternatingMap.domDomCongrEquiv /-
/-- `alternating_map.dom_dom_congr` as an equivalence.

This is declared separately because it does not work with dot notation. -/
@[simps apply symm_apply]
def domDomCongrEquiv (σ : ι ≃ ι') : AlternatingMap R M N ι ≃+ AlternatingMap R M N ι'
    where
  toFun := domDomCongr σ
  invFun := domDomCongr σ.symm
  left_inv f := by
    ext
    simp [Function.comp]
  right_inv m := by
    ext
    simp [Function.comp]
  map_add' := domDomCongr_add σ
#align alternating_map.dom_dom_congr_equiv AlternatingMap.domDomCongrEquiv
-/

/- warning: alternating_map.dom_dom_congr_eq_iff -> AlternatingMap.domDomCongr_eq_iff is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} {ι' : Type.{u5}} (σ : Equiv.{succ u4, succ u5} ι ι') (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (g : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι), Iff (Eq.{max (succ u2) (succ u3) (succ u5)} (AlternatingMap.{u1, u2, u3, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') (AlternatingMap.domDomCongr.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι ι' σ f) (AlternatingMap.domDomCongr.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι ι' σ g)) (Eq.{max (succ u2) (succ u3) (succ u4)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f g)
but is expected to have type
  forall {R : Type.{u3}} [_inst_1 : Semiring.{u3} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u3, u2} R M _inst_1 _inst_2] {N : Type.{u1}} [_inst_4 : AddCommMonoid.{u1} N] [_inst_5 : Module.{u3, u1} R N _inst_1 _inst_4] {ι : Type.{u5}} {ι' : Type.{u4}} (σ : Equiv.{succ u5, succ u4} ι ι') (f : AlternatingMap.{u3, u2, u1, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (g : AlternatingMap.{u3, u2, u1, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι), Iff (Eq.{max (max (succ u2) (succ u1)) (succ u4)} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') (AlternatingMap.domDomCongr.{u3, u2, u1, u5, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι ι' σ f) (AlternatingMap.domDomCongr.{u3, u2, u1, u5, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι ι' σ g)) (Eq.{max (max (succ u2) (succ u1)) (succ u5)} (AlternatingMap.{u3, u2, u1, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f g)
Case conversion may be inaccurate. Consider using '#align alternating_map.dom_dom_congr_eq_iff AlternatingMap.domDomCongr_eq_iffₓ'. -/
/-- The results of applying `dom_dom_congr` to two maps are equal if and only if those maps are. -/
@[simp]
theorem domDomCongr_eq_iff (σ : ι ≃ ι') (f g : AlternatingMap R M N ι) :
    f.domDomCongr σ = g.domDomCongr σ ↔ f = g :=
  (domDomCongrEquiv σ : _ ≃+ AlternatingMap R M N ι').apply_eq_iff_eq
#align alternating_map.dom_dom_congr_eq_iff AlternatingMap.domDomCongr_eq_iff

/- warning: alternating_map.dom_dom_congr_eq_zero_iff -> AlternatingMap.domDomCongr_eq_zero_iff is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} {ι' : Type.{u5}} (σ : Equiv.{succ u4, succ u5} ι ι') (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι), Iff (Eq.{max (succ u2) (succ u3) (succ u5)} (AlternatingMap.{u1, u2, u3, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') (AlternatingMap.domDomCongr.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι ι' σ f) (OfNat.ofNat.{max u2 u3 u5} (AlternatingMap.{u1, u2, u3, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') 0 (OfNat.mk.{max u2 u3 u5} (AlternatingMap.{u1, u2, u3, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') 0 (Zero.zero.{max u2 u3 u5} (AlternatingMap.{u1, u2, u3, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') (AlternatingMap.zero.{u1, u2, u3, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι'))))) (Eq.{max (succ u2) (succ u3) (succ u4)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f (OfNat.ofNat.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) 0 (OfNat.mk.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) 0 (Zero.zero.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.zero.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))))
but is expected to have type
  forall {R : Type.{u3}} [_inst_1 : Semiring.{u3} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u3, u2} R M _inst_1 _inst_2] {N : Type.{u1}} [_inst_4 : AddCommMonoid.{u1} N] [_inst_5 : Module.{u3, u1} R N _inst_1 _inst_4] {ι : Type.{u5}} {ι' : Type.{u4}} (σ : Equiv.{succ u5, succ u4} ι ι') (f : AlternatingMap.{u3, u2, u1, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι), Iff (Eq.{max (max (succ u2) (succ u1)) (succ u4)} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') (AlternatingMap.domDomCongr.{u3, u2, u1, u5, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι ι' σ f) (OfNat.ofNat.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') 0 (Zero.toOfNat0.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') (AlternatingMap.zero.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι')))) (Eq.{max (max (succ u2) (succ u1)) (succ u5)} (AlternatingMap.{u3, u2, u1, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) f (OfNat.ofNat.{max (max u2 u1) u5} (AlternatingMap.{u3, u2, u1, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) 0 (Zero.toOfNat0.{max (max u2 u1) u5} (AlternatingMap.{u3, u2, u1, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (AlternatingMap.zero.{u3, u2, u1, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι))))
Case conversion may be inaccurate. Consider using '#align alternating_map.dom_dom_congr_eq_zero_iff AlternatingMap.domDomCongr_eq_zero_iffₓ'. -/
@[simp]
theorem domDomCongr_eq_zero_iff (σ : ι ≃ ι') (f : AlternatingMap R M N ι) :
    f.domDomCongr σ = 0 ↔ f = 0 :=
  (domDomCongrEquiv σ : AlternatingMap R M N ι ≃+ AlternatingMap R M N ι').map_eq_zero_iff
#align alternating_map.dom_dom_congr_eq_zero_iff AlternatingMap.domDomCongr_eq_zero_iff

/- warning: alternating_map.dom_dom_congr_perm -> AlternatingMap.domDomCongr_perm is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N' : Type.{u3}} [_inst_8 : AddCommGroup.{u3} N'] [_inst_9 : Module.{u1, u3} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)] {ι : Type.{u4}} (g : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) [_inst_14 : Fintype.{u4} ι] [_inst_15 : DecidableEq.{succ u4} ι] (σ : Equiv.Perm.{succ u4} ι), Eq.{max (succ u2) (succ u3) (succ u4)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.domDomCongr.{u1, u2, u3, u4, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι ι σ g) (SMul.smul.{0, max u2 u3 u4} (Units.{0} Int Int.monoid) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.smul.{u1, u2, u3, u4, 0} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι (Units.{0} Int Int.monoid) (DivInvMonoid.toMonoid.{0} (Units.{0} Int Int.monoid) (Group.toDivInvMonoid.{0} (Units.{0} Int Int.monoid) (Units.group.{0} Int Int.monoid))) (Units.distribMulAction.{0, u3} Int N' Int.monoid (AddCommMonoid.toAddMonoid.{u3} N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)) (Module.toDistribMulAction.{0, u3} Int N' Int.semiring (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (AddCommGroup.intModule.{u3} N' _inst_8))) (Units.smulCommClass_right.{u1, 0, u3} R Int N' Int.monoid (SMulZeroClass.toHasSmul.{u1, u3} R N' (AddZeroClass.toHasZero.{u3} N' (AddMonoid.toAddZeroClass.{u3} N' (AddCommMonoid.toAddMonoid.{u3} N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)))) (SMulWithZero.toSmulZeroClass.{u1, u3} R N' (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)))) (AddZeroClass.toHasZero.{u3} N' (AddMonoid.toAddZeroClass.{u3} N' (AddCommMonoid.toAddMonoid.{u3} N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)))) (MulActionWithZero.toSMulWithZero.{u1, u3} R N' (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddZeroClass.toHasZero.{u3} N' (AddMonoid.toAddZeroClass.{u3} N' (AddCommMonoid.toAddMonoid.{u3} N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)))) (Module.toMulActionWithZero.{u1, u3} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9)))) (SubNegMonoid.SMulInt.{u3} N' (AddGroup.toSubNegMonoid.{u3} N' (AddCommGroup.toAddGroup.{u3} N' _inst_8))) (AddGroup.int_smulCommClass'.{u1, u3} R N' (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)) (AddCommGroup.toAddGroup.{u3} N' _inst_8) (Module.toDistribMulAction.{u1, u3} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9)))) (coeFn.{succ u4, succ u4} (MonoidHom.{u4, 0} (Equiv.Perm.{succ u4} ι) (Units.{0} Int Int.monoid) (Monoid.toMulOneClass.{u4} (Equiv.Perm.{succ u4} ι) (DivInvMonoid.toMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Group.toDivInvMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.Perm.permGroup.{u4} ι)))) (Units.mulOneClass.{0} Int Int.monoid)) (fun (_x : MonoidHom.{u4, 0} (Equiv.Perm.{succ u4} ι) (Units.{0} Int Int.monoid) (Monoid.toMulOneClass.{u4} (Equiv.Perm.{succ u4} ι) (DivInvMonoid.toMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Group.toDivInvMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.Perm.permGroup.{u4} ι)))) (Units.mulOneClass.{0} Int Int.monoid)) => (Equiv.Perm.{succ u4} ι) -> (Units.{0} Int Int.monoid)) (MonoidHom.hasCoeToFun.{u4, 0} (Equiv.Perm.{succ u4} ι) (Units.{0} Int Int.monoid) (Monoid.toMulOneClass.{u4} (Equiv.Perm.{succ u4} ι) (DivInvMonoid.toMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Group.toDivInvMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.Perm.permGroup.{u4} ι)))) (Units.mulOneClass.{0} Int Int.monoid)) (Equiv.Perm.sign.{u4} ι (fun (a : ι) (b : ι) => _inst_15 a b) _inst_14) σ) g)
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u3}} [_inst_2 : AddCommMonoid.{u3} M] [_inst_3 : Module.{u1, u3} R M _inst_1 _inst_2] {N' : Type.{u2}} [_inst_8 : AddCommGroup.{u2} N'] [_inst_9 : Module.{u1, u2} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8)] {ι : Type.{u4}} (g : AlternatingMap.{u1, u3, u2, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) [_inst_14 : Fintype.{u4} ι] [_inst_15 : DecidableEq.{succ u4} ι] (σ : Equiv.Perm.{succ u4} ι), Eq.{max (max (succ u3) (succ u2)) (succ u4)} (AlternatingMap.{u1, u3, u2, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AlternatingMap.domDomCongr.{u1, u3, u2, u4, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι ι σ g) (HSMul.hSMul.{0, max (max u3 u2) u4, max (max u3 u2) u4} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : Equiv.Perm.{succ u4} ι) => Units.{0} Int Int.instMonoidInt) σ) (AlternatingMap.{u1, u3, u2, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AlternatingMap.{u1, u3, u2, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (instHSMul.{0, max (max u3 u2) u4} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : Equiv.Perm.{succ u4} ι) => Units.{0} Int Int.instMonoidInt) σ) (AlternatingMap.{u1, u3, u2, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (Units.instSMulUnits.{0, max (max u3 u2) u4} Int (AlternatingMap.{u1, u3, u2, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) Int.instMonoidInt (SubNegMonoid.SMulInt.{max (max u3 u2) u4} (AlternatingMap.{u1, u3, u2, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u3 u2) u4} (AlternatingMap.{u1, u3, u2, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u3 u2) u4} (AlternatingMap.{u1, u3, u2, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u1, u3, u2, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (FunLike.coe.{succ u4, succ u4, 1} (MonoidHom.{u4, 0} (Equiv.Perm.{succ u4} ι) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u4} (Equiv.Perm.{succ u4} ι) (DivInvMonoid.toMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Group.toDivInvMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.Perm.permGroup.{u4} ι)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (Equiv.Perm.{succ u4} ι) (fun (_x : Equiv.Perm.{succ u4} ι) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : Equiv.Perm.{succ u4} ι) => Units.{0} Int Int.instMonoidInt) _x) (MulHomClass.toFunLike.{u4, u4, 0} (MonoidHom.{u4, 0} (Equiv.Perm.{succ u4} ι) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u4} (Equiv.Perm.{succ u4} ι) (DivInvMonoid.toMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Group.toDivInvMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.Perm.permGroup.{u4} ι)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (Equiv.Perm.{succ u4} ι) (Units.{0} Int Int.instMonoidInt) (MulOneClass.toMul.{u4} (Equiv.Perm.{succ u4} ι) (Monoid.toMulOneClass.{u4} (Equiv.Perm.{succ u4} ι) (DivInvMonoid.toMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Group.toDivInvMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.Perm.permGroup.{u4} ι))))) (MulOneClass.toMul.{0} (Units.{0} Int Int.instMonoidInt) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (MonoidHomClass.toMulHomClass.{u4, u4, 0} (MonoidHom.{u4, 0} (Equiv.Perm.{succ u4} ι) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u4} (Equiv.Perm.{succ u4} ι) (DivInvMonoid.toMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Group.toDivInvMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.Perm.permGroup.{u4} ι)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (Equiv.Perm.{succ u4} ι) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u4} (Equiv.Perm.{succ u4} ι) (DivInvMonoid.toMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Group.toDivInvMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.Perm.permGroup.{u4} ι)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt) (MonoidHom.monoidHomClass.{u4, 0} (Equiv.Perm.{succ u4} ι) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u4} (Equiv.Perm.{succ u4} ι) (DivInvMonoid.toMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Group.toDivInvMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.Perm.permGroup.{u4} ι)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)))) (Equiv.Perm.sign.{u4} ι (fun (a : ι) (b : ι) => _inst_15 a b) _inst_14) σ) g)
Case conversion may be inaccurate. Consider using '#align alternating_map.dom_dom_congr_perm AlternatingMap.domDomCongr_permₓ'. -/
theorem domDomCongr_perm [Fintype ι] [DecidableEq ι] (σ : Equiv.Perm ι) :
    g.domDomCongr σ = σ.sign • g :=
  AlternatingMap.ext fun v => g.map_perm v σ
#align alternating_map.dom_dom_congr_perm AlternatingMap.domDomCongr_perm

/- warning: alternating_map.coe_dom_dom_congr -> AlternatingMap.coe_domDomCongr is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {ι : Type.{u4}} {ι' : Type.{u5}} (f : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (σ : Equiv.{succ u4, succ u5} ι ι'), Eq.{max (succ u5) (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (i : ι') => M) N _inst_1 (fun (i : ι') => _inst_2) _inst_4 (fun (i : ι') => _inst_3) _inst_5) ((fun (a : Sort.{max (succ u2) (succ u3) (succ u5)}) (b : Sort.{max (succ u5) (succ u2) (succ u3)}) [self : HasLiftT.{max (succ u2) (succ u3) (succ u5), max (succ u5) (succ u2) (succ u3)} a b] => self.0) (AlternatingMap.{u1, u2, u3, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (i : ι') => M) N _inst_1 (fun (i : ι') => _inst_2) _inst_4 (fun (i : ι') => _inst_3) _inst_5) (HasLiftT.mk.{max (succ u2) (succ u3) (succ u5), max (succ u5) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (i : ι') => M) N _inst_1 (fun (i : ι') => _inst_2) _inst_4 (fun (i : ι') => _inst_3) _inst_5) (CoeTCₓ.coe.{max (succ u2) (succ u3) (succ u5), max (succ u5) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (i : ι') => M) N _inst_1 (fun (i : ι') => _inst_2) _inst_4 (fun (i : ι') => _inst_3) _inst_5) (coeBase.{max (succ u2) (succ u3) (succ u5), max (succ u5) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι') (MultilinearMap.{u1, u2, u3, u5} R ι' (fun (i : ι') => M) N _inst_1 (fun (i : ι') => _inst_2) _inst_4 (fun (i : ι') => _inst_3) _inst_5) (AlternatingMap.coe.{u1, u2, u3, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι')))) (AlternatingMap.domDomCongr.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι ι' σ f)) (MultilinearMap.domDomCongr.{u1, u2, u3, u4, u5} R M N _inst_1 _inst_2 _inst_4 _inst_3 _inst_5 ι ι' σ ((fun (a : Sort.{max (succ u2) (succ u3) (succ u4)}) (b : Sort.{max (succ u4) (succ u2) (succ u3)}) [self : HasLiftT.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} a b] => self.0) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (_x : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (HasLiftT.mk.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (_x : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (CoeTCₓ.coe.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (_x : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (coeBase.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (_x : ι) => M) N _inst_1 (fun (i : ι) => _inst_2) _inst_4 (fun (i : ι) => _inst_3) _inst_5) (AlternatingMap.coe.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι)))) f))
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u3}} [_inst_2 : AddCommMonoid.{u3} M] [_inst_3 : Module.{u1, u3} R M _inst_1 _inst_2] {N : Type.{u2}} [_inst_4 : AddCommMonoid.{u2} N] [_inst_5 : Module.{u1, u2} R N _inst_1 _inst_4] {ι : Type.{u5}} {ι' : Type.{u4}} (f : AlternatingMap.{u1, u3, u2, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι) (σ : Equiv.{succ u5, succ u4} ι ι'), Eq.{max (max (succ u3) (succ u2)) (succ u4)} (MultilinearMap.{u1, u3, u2, u4} R ι' (fun (i : ι') => M) N _inst_1 (fun (i : ι') => _inst_2) _inst_4 (fun (i : ι') => _inst_3) _inst_5) (AlternatingMap.toMultilinearMap.{u1, u3, u2, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι' (AlternatingMap.domDomCongr.{u1, u3, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι ι' σ f)) (MultilinearMap.domDomCongr.{u1, u3, u2, u5, u4} R M N _inst_1 _inst_2 _inst_4 _inst_3 _inst_5 ι ι' σ (AlternatingMap.toMultilinearMap.{u1, u3, u2, u5} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 ι f))
Case conversion may be inaccurate. Consider using '#align alternating_map.coe_dom_dom_congr AlternatingMap.coe_domDomCongrₓ'. -/
@[norm_cast]
theorem coe_domDomCongr (σ : ι ≃ ι') :
    ↑(f.domDomCongr σ) = (f : MultilinearMap R (fun _ : ι => M) N).domDomCongr σ :=
  MultilinearMap.ext fun v => rfl
#align alternating_map.coe_dom_dom_congr AlternatingMap.coe_domDomCongr

end DomDomCongr

/- warning: alternating_map.map_linear_dependent -> AlternatingMap.map_linearDependent is a dubious translation:
lean 3 declaration is
  forall {ι : Type.{u1}} {K : Type.{u2}} [_inst_14 : Ring.{u2} K] {M : Type.{u3}} [_inst_15 : AddCommGroup.{u3} M] [_inst_16 : Module.{u2, u3} K M (Ring.toSemiring.{u2} K _inst_14) (AddCommGroup.toAddCommMonoid.{u3} M _inst_15)] {N : Type.{u4}} [_inst_17 : AddCommGroup.{u4} N] [_inst_18 : Module.{u2, u4} K N (Ring.toSemiring.{u2} K _inst_14) (AddCommGroup.toAddCommMonoid.{u4} N _inst_17)] [_inst_19 : NoZeroSMulDivisors.{u2, u4} K N (MulZeroClass.toHasZero.{u2} K (NonUnitalNonAssocSemiring.toMulZeroClass.{u2} K (NonUnitalNonAssocRing.toNonUnitalNonAssocSemiring.{u2} K (NonAssocRing.toNonUnitalNonAssocRing.{u2} K (Ring.toNonAssocRing.{u2} K _inst_14))))) (AddZeroClass.toHasZero.{u4} N (AddMonoid.toAddZeroClass.{u4} N (SubNegMonoid.toAddMonoid.{u4} N (AddGroup.toSubNegMonoid.{u4} N (AddCommGroup.toAddGroup.{u4} N _inst_17))))) (SMulZeroClass.toHasSmul.{u2, u4} K N (AddZeroClass.toHasZero.{u4} N (AddMonoid.toAddZeroClass.{u4} N (AddCommMonoid.toAddMonoid.{u4} N (AddCommGroup.toAddCommMonoid.{u4} N _inst_17)))) (SMulWithZero.toSmulZeroClass.{u2, u4} K N (MulZeroClass.toHasZero.{u2} K (MulZeroOneClass.toMulZeroClass.{u2} K (MonoidWithZero.toMulZeroOneClass.{u2} K (Semiring.toMonoidWithZero.{u2} K (Ring.toSemiring.{u2} K _inst_14))))) (AddZeroClass.toHasZero.{u4} N (AddMonoid.toAddZeroClass.{u4} N (AddCommMonoid.toAddMonoid.{u4} N (AddCommGroup.toAddCommMonoid.{u4} N _inst_17)))) (MulActionWithZero.toSMulWithZero.{u2, u4} K N (Semiring.toMonoidWithZero.{u2} K (Ring.toSemiring.{u2} K _inst_14)) (AddZeroClass.toHasZero.{u4} N (AddMonoid.toAddZeroClass.{u4} N (AddCommMonoid.toAddMonoid.{u4} N (AddCommGroup.toAddCommMonoid.{u4} N _inst_17)))) (Module.toMulActionWithZero.{u2, u4} K N (Ring.toSemiring.{u2} K _inst_14) (AddCommGroup.toAddCommMonoid.{u4} N _inst_17) _inst_18))))] (f : AlternatingMap.{u2, u3, u4, u1} K (Ring.toSemiring.{u2} K _inst_14) M (AddCommGroup.toAddCommMonoid.{u3} M _inst_15) _inst_16 N (AddCommGroup.toAddCommMonoid.{u4} N _inst_17) _inst_18 ι) (v : ι -> M), (Not (LinearIndependent.{u1, u2, u3} ι K M v (Ring.toSemiring.{u2} K _inst_14) (AddCommGroup.toAddCommMonoid.{u3} M _inst_15) _inst_16)) -> (Eq.{succ u4} N (coeFn.{max (succ u3) (succ u4) (succ u1), max (max (succ u1) (succ u3)) (succ u4)} (AlternatingMap.{u2, u3, u4, u1} K (Ring.toSemiring.{u2} K _inst_14) M (AddCommGroup.toAddCommMonoid.{u3} M _inst_15) _inst_16 N (AddCommGroup.toAddCommMonoid.{u4} N _inst_17) _inst_18 ι) (fun (_x : AlternatingMap.{u2, u3, u4, u1} K (Ring.toSemiring.{u2} K _inst_14) M (AddCommGroup.toAddCommMonoid.{u3} M _inst_15) _inst_16 N (AddCommGroup.toAddCommMonoid.{u4} N _inst_17) _inst_18 ι) => (ι -> M) -> N) (AlternatingMap.coeFun.{u2, u3, u4, u1} K (Ring.toSemiring.{u2} K _inst_14) M (AddCommGroup.toAddCommMonoid.{u3} M _inst_15) _inst_16 N (AddCommGroup.toAddCommMonoid.{u4} N _inst_17) _inst_18 ι) f v) (OfNat.ofNat.{u4} N 0 (OfNat.mk.{u4} N 0 (Zero.zero.{u4} N (AddZeroClass.toHasZero.{u4} N (AddMonoid.toAddZeroClass.{u4} N (SubNegMonoid.toAddMonoid.{u4} N (AddGroup.toSubNegMonoid.{u4} N (AddCommGroup.toAddGroup.{u4} N _inst_17)))))))))
but is expected to have type
  forall {ι : Type.{u1}} {K : Type.{u4}} [_inst_14 : Ring.{u4} K] {M : Type.{u3}} [_inst_15 : AddCommGroup.{u3} M] [_inst_16 : Module.{u4, u3} K M (Ring.toSemiring.{u4} K _inst_14) (AddCommGroup.toAddCommMonoid.{u3} M _inst_15)] {N : Type.{u2}} [_inst_17 : AddCommGroup.{u2} N] [_inst_18 : Module.{u4, u2} K N (Ring.toSemiring.{u4} K _inst_14) (AddCommGroup.toAddCommMonoid.{u2} N _inst_17)] [_inst_19 : NoZeroSMulDivisors.{u4, u2} K N (MonoidWithZero.toZero.{u4} K (Semiring.toMonoidWithZero.{u4} K (Ring.toSemiring.{u4} K _inst_14))) (NegZeroClass.toZero.{u2} N (SubNegZeroMonoid.toNegZeroClass.{u2} N (SubtractionMonoid.toSubNegZeroMonoid.{u2} N (SubtractionCommMonoid.toSubtractionMonoid.{u2} N (AddCommGroup.toDivisionAddCommMonoid.{u2} N _inst_17))))) (SMulZeroClass.toSMul.{u4, u2} K N (NegZeroClass.toZero.{u2} N (SubNegZeroMonoid.toNegZeroClass.{u2} N (SubtractionMonoid.toSubNegZeroMonoid.{u2} N (SubtractionCommMonoid.toSubtractionMonoid.{u2} N (AddCommGroup.toDivisionAddCommMonoid.{u2} N _inst_17))))) (SMulWithZero.toSMulZeroClass.{u4, u2} K N (MonoidWithZero.toZero.{u4} K (Semiring.toMonoidWithZero.{u4} K (Ring.toSemiring.{u4} K _inst_14))) (NegZeroClass.toZero.{u2} N (SubNegZeroMonoid.toNegZeroClass.{u2} N (SubtractionMonoid.toSubNegZeroMonoid.{u2} N (SubtractionCommMonoid.toSubtractionMonoid.{u2} N (AddCommGroup.toDivisionAddCommMonoid.{u2} N _inst_17))))) (MulActionWithZero.toSMulWithZero.{u4, u2} K N (Semiring.toMonoidWithZero.{u4} K (Ring.toSemiring.{u4} K _inst_14)) (NegZeroClass.toZero.{u2} N (SubNegZeroMonoid.toNegZeroClass.{u2} N (SubtractionMonoid.toSubNegZeroMonoid.{u2} N (SubtractionCommMonoid.toSubtractionMonoid.{u2} N (AddCommGroup.toDivisionAddCommMonoid.{u2} N _inst_17))))) (Module.toMulActionWithZero.{u4, u2} K N (Ring.toSemiring.{u4} K _inst_14) (AddCommGroup.toAddCommMonoid.{u2} N _inst_17) _inst_18))))] (f : AlternatingMap.{u4, u3, u2, u1} K (Ring.toSemiring.{u4} K _inst_14) M (AddCommGroup.toAddCommMonoid.{u3} M _inst_15) _inst_16 N (AddCommGroup.toAddCommMonoid.{u2} N _inst_17) _inst_18 ι) (v : ι -> M), (Not (LinearIndependent.{u1, u4, u3} ι K M v (Ring.toSemiring.{u4} K _inst_14) (AddCommGroup.toAddCommMonoid.{u3} M _inst_15) _inst_16)) -> (Eq.{succ u2} N (FunLike.coe.{max (max (succ u3) (succ u2)) (succ u1), max (succ u3) (succ u1), succ u2} (AlternatingMap.{u4, u3, u2, u1} K (Ring.toSemiring.{u4} K _inst_14) M (AddCommGroup.toAddCommMonoid.{u3} M _inst_15) _inst_16 N (AddCommGroup.toAddCommMonoid.{u2} N _inst_17) _inst_18 ι) (ι -> M) (fun (_x : ι -> M) => N) (AlternatingMap.funLike.{u4, u3, u2, u1} K (Ring.toSemiring.{u4} K _inst_14) M (AddCommGroup.toAddCommMonoid.{u3} M _inst_15) _inst_16 N (AddCommGroup.toAddCommMonoid.{u2} N _inst_17) _inst_18 ι) f v) (OfNat.ofNat.{u2} N 0 (Zero.toOfNat0.{u2} N (NegZeroClass.toZero.{u2} N (SubNegZeroMonoid.toNegZeroClass.{u2} N (SubtractionMonoid.toSubNegZeroMonoid.{u2} N (SubtractionCommMonoid.toSubtractionMonoid.{u2} N (AddCommGroup.toDivisionAddCommMonoid.{u2} N _inst_17))))))))
Case conversion may be inaccurate. Consider using '#align alternating_map.map_linear_dependent AlternatingMap.map_linearDependentₓ'. -/
/-- If the arguments are linearly dependent then the result is `0`. -/
theorem map_linearDependent {K : Type _} [Ring K] {M : Type _} [AddCommGroup M] [Module K M]
    {N : Type _} [AddCommGroup N] [Module K N] [NoZeroSMulDivisors K N] (f : AlternatingMap K M N ι)
    (v : ι → M) (h : ¬LinearIndependent K v) : f v = 0 :=
  by
  obtain ⟨s, g, h, i, hi, hz⟩ := not_linear_independent_iff.mp h
  letI := Classical.decEq ι
  suffices f (update v i (g i • v i)) = 0
    by
    rw [f.map_smul, Function.update_eq_self, smul_eq_zero] at this
    exact Or.resolve_left this hz
  conv at h in g _ • v _ => rw [← if_t_t (i = x) (g _ • v _)]
  rw [Finset.sum_ite, Finset.filter_eq, Finset.filter_ne, if_pos hi, Finset.sum_singleton,
    add_eq_zero_iff_eq_neg] at h
  rw [h, f.map_neg, f.map_update_sum, neg_eq_zero, Finset.sum_eq_zero]
  intro j hj
  obtain ⟨hij, _⟩ := finset.mem_erase.mp hj
  rw [f.map_smul, f.map_update_self _ hij.symm, smul_zero]
#align alternating_map.map_linear_dependent AlternatingMap.map_linearDependent

section Fin

open Fin

/- warning: alternating_map.map_vec_cons_add -> AlternatingMap.map_vecCons_add is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {n : Nat} (f : AlternatingMap.{u1, u2, u3, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) (m : (Fin n) -> M) (x : M) (y : M), Eq.{succ u3} N (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) (fun (_x : AlternatingMap.{u1, u2, u3, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) => ((Fin (Nat.succ n)) -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) f (Matrix.vecCons.{u2} M n (HAdd.hAdd.{u2, u2, u2} M M M (instHAdd.{u2} M (AddZeroClass.toHasAdd.{u2} M (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2)))) x y) m)) (HAdd.hAdd.{u3, u3, u3} N N N (instHAdd.{u3} N (AddZeroClass.toHasAdd.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4)))) (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) (fun (_x : AlternatingMap.{u1, u2, u3, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) => ((Fin (Nat.succ n)) -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) f (Matrix.vecCons.{u2} M n x m)) (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) (fun (_x : AlternatingMap.{u1, u2, u3, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) => ((Fin (Nat.succ n)) -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) f (Matrix.vecCons.{u2} M n y m)))
but is expected to have type
  forall {R : Type.{u3}} [_inst_1 : Semiring.{u3} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u3, u2} R M _inst_1 _inst_2] {N : Type.{u1}} [_inst_4 : AddCommMonoid.{u1} N] [_inst_5 : Module.{u3, u1} R N _inst_1 _inst_4] {n : Nat} (f : AlternatingMap.{u3, u2, u1, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) (m : (Fin n) -> M) (x : M) (y : M), Eq.{succ u1} N (FunLike.coe.{max (max (succ u2) (succ u1)) 1, succ u2, succ u1} (AlternatingMap.{u3, u2, u1, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) ((Fin (Nat.succ n)) -> M) (fun (_x : (Fin (Nat.succ n)) -> M) => N) (AlternatingMap.funLike.{u3, u2, u1, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) f (Matrix.vecCons.{u2} M n (HAdd.hAdd.{u2, u2, u2} M M M (instHAdd.{u2} M (AddZeroClass.toAdd.{u2} M (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2)))) x y) m)) (HAdd.hAdd.{u1, u1, u1} N N N (instHAdd.{u1} N (AddZeroClass.toAdd.{u1} N (AddMonoid.toAddZeroClass.{u1} N (AddCommMonoid.toAddMonoid.{u1} N _inst_4)))) (FunLike.coe.{max (max (succ u2) (succ u1)) 1, succ u2, succ u1} (AlternatingMap.{u3, u2, u1, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) ((Fin (Nat.succ n)) -> M) (fun (_x : (Fin (Nat.succ n)) -> M) => N) (AlternatingMap.funLike.{u3, u2, u1, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) f (Matrix.vecCons.{u2} M n x m)) (FunLike.coe.{max (max (succ u2) (succ u1)) 1, succ u2, succ u1} (AlternatingMap.{u3, u2, u1, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) ((Fin (Nat.succ n)) -> M) (fun (_x : (Fin (Nat.succ n)) -> M) => N) (AlternatingMap.funLike.{u3, u2, u1, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) f (Matrix.vecCons.{u2} M n y m)))
Case conversion may be inaccurate. Consider using '#align alternating_map.map_vec_cons_add AlternatingMap.map_vecCons_addₓ'. -/
/-- A version of `multilinear_map.cons_add` for `alternating_map`. -/
theorem map_vecCons_add {n : ℕ} (f : AlternatingMap R M N (Fin n.succ)) (m : Fin n → M) (x y : M) :
    f (Matrix.vecCons (x + y) m) = f (Matrix.vecCons x m) + f (Matrix.vecCons y m) :=
  f.toMultilinearMap.cons_add _ _ _
#align alternating_map.map_vec_cons_add AlternatingMap.map_vecCons_add

/- warning: alternating_map.map_vec_cons_smul -> AlternatingMap.map_vecCons_smul is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N : Type.{u3}} [_inst_4 : AddCommMonoid.{u3} N] [_inst_5 : Module.{u1, u3} R N _inst_1 _inst_4] {n : Nat} (f : AlternatingMap.{u1, u2, u3, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) (m : (Fin n) -> M) (c : R) (x : M), Eq.{succ u3} N (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) (fun (_x : AlternatingMap.{u1, u2, u3, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) => ((Fin (Nat.succ n)) -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) f (Matrix.vecCons.{u2} M n (SMul.smul.{u1, u2} R M (SMulZeroClass.toHasSmul.{u1, u2} R M (AddZeroClass.toHasZero.{u2} M (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2))) (SMulWithZero.toSmulZeroClass.{u1, u2} R M (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)))) (AddZeroClass.toHasZero.{u2} M (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2))) (MulActionWithZero.toSMulWithZero.{u1, u2} R M (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddZeroClass.toHasZero.{u2} M (AddMonoid.toAddZeroClass.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2))) (Module.toMulActionWithZero.{u1, u2} R M _inst_1 _inst_2 _inst_3)))) c x) m)) (SMul.smul.{u1, u3} R N (SMulZeroClass.toHasSmul.{u1, u3} R N (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (SMulWithZero.toSmulZeroClass.{u1, u3} R N (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)))) (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (MulActionWithZero.toSMulWithZero.{u1, u3} R N (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddZeroClass.toHasZero.{u3} N (AddMonoid.toAddZeroClass.{u3} N (AddCommMonoid.toAddMonoid.{u3} N _inst_4))) (Module.toMulActionWithZero.{u1, u3} R N _inst_1 _inst_4 _inst_5)))) c (coeFn.{max (succ u2) (succ u3), max (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) (fun (_x : AlternatingMap.{u1, u2, u3, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) => ((Fin (Nat.succ n)) -> M) -> N) (AlternatingMap.coeFun.{u1, u2, u3, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) f (Matrix.vecCons.{u2} M n x m)))
but is expected to have type
  forall {R : Type.{u3}} [_inst_1 : Semiring.{u3} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u3, u2} R M _inst_1 _inst_2] {N : Type.{u1}} [_inst_4 : AddCommMonoid.{u1} N] [_inst_5 : Module.{u3, u1} R N _inst_1 _inst_4] {n : Nat} (f : AlternatingMap.{u3, u2, u1, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) (m : (Fin n) -> M) (c : R) (x : M), Eq.{succ u1} N (FunLike.coe.{max (max (succ u2) (succ u1)) 1, succ u2, succ u1} (AlternatingMap.{u3, u2, u1, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) ((Fin (Nat.succ n)) -> M) (fun (_x : (Fin (Nat.succ n)) -> M) => N) (AlternatingMap.funLike.{u3, u2, u1, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) f (Matrix.vecCons.{u2} M n (HSMul.hSMul.{u3, u2, u2} R M M (instHSMul.{u3, u2} R M (SMulZeroClass.toSMul.{u3, u2} R M (AddMonoid.toZero.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2)) (SMulWithZero.toSMulZeroClass.{u3, u2} R M (MonoidWithZero.toZero.{u3} R (Semiring.toMonoidWithZero.{u3} R _inst_1)) (AddMonoid.toZero.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2)) (MulActionWithZero.toSMulWithZero.{u3, u2} R M (Semiring.toMonoidWithZero.{u3} R _inst_1) (AddMonoid.toZero.{u2} M (AddCommMonoid.toAddMonoid.{u2} M _inst_2)) (Module.toMulActionWithZero.{u3, u2} R M _inst_1 _inst_2 _inst_3))))) c x) m)) (HSMul.hSMul.{u3, u1, u1} R N N (instHSMul.{u3, u1} R N (SMulZeroClass.toSMul.{u3, u1} R N (AddMonoid.toZero.{u1} N (AddCommMonoid.toAddMonoid.{u1} N _inst_4)) (SMulWithZero.toSMulZeroClass.{u3, u1} R N (MonoidWithZero.toZero.{u3} R (Semiring.toMonoidWithZero.{u3} R _inst_1)) (AddMonoid.toZero.{u1} N (AddCommMonoid.toAddMonoid.{u1} N _inst_4)) (MulActionWithZero.toSMulWithZero.{u3, u1} R N (Semiring.toMonoidWithZero.{u3} R _inst_1) (AddMonoid.toZero.{u1} N (AddCommMonoid.toAddMonoid.{u1} N _inst_4)) (Module.toMulActionWithZero.{u3, u1} R N _inst_1 _inst_4 _inst_5))))) c (FunLike.coe.{max (max (succ u2) (succ u1)) 1, succ u2, succ u1} (AlternatingMap.{u3, u2, u1, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) ((Fin (Nat.succ n)) -> M) (fun (_x : (Fin (Nat.succ n)) -> M) => N) (AlternatingMap.funLike.{u3, u2, u1, 0} R _inst_1 M _inst_2 _inst_3 N _inst_4 _inst_5 (Fin (Nat.succ n))) f (Matrix.vecCons.{u2} M n x m)))
Case conversion may be inaccurate. Consider using '#align alternating_map.map_vec_cons_smul AlternatingMap.map_vecCons_smulₓ'. -/
/-- A version of `multilinear_map.cons_smul` for `alternating_map`. -/
theorem map_vecCons_smul {n : ℕ} (f : AlternatingMap R M N (Fin n.succ)) (m : Fin n → M) (c : R)
    (x : M) : f (Matrix.vecCons (c • x) m) = c • f (Matrix.vecCons x m) :=
  f.toMultilinearMap.cons_smul _ _ _
#align alternating_map.map_vec_cons_smul AlternatingMap.map_vecCons_smul

end Fin

end AlternatingMap

open BigOperators

namespace MultilinearMap

open Equiv

variable [Fintype ι] [DecidableEq ι]

private theorem alternization_map_eq_zero_of_eq_aux (m : MultilinearMap R (fun i : ι => M) N')
    (v : ι → M) (i j : ι) (i_ne_j : i ≠ j) (hv : v i = v j) :
    (∑ σ : Perm ι, σ.sign • m.domDomCongr σ) v = 0 :=
  by
  rw [sum_apply]
  exact
    Finset.sum_involution (fun σ _ => swap i j * σ)
      (fun σ _ => by simp [perm.sign_swap i_ne_j, apply_swap_eq_self hv])
      (fun σ _ _ => (not_congr swap_mul_eq_iff).mpr i_ne_j) (fun σ _ => Finset.mem_univ _)
      fun σ _ => swap_mul_involutive i j σ
#align multilinear_map.alternization_map_eq_zero_of_eq_aux multilinear_map.alternization_map_eq_zero_of_eq_aux

/- warning: multilinear_map.alternatization -> MultilinearMap.alternatization is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N' : Type.{u3}} [_inst_8 : AddCommGroup.{u3} N'] [_inst_9 : Module.{u1, u3} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)] {ι : Type.{u4}} [_inst_10 : Fintype.{u4} ι] [_inst_11 : DecidableEq.{succ u4} ι], AddMonoidHom.{max u4 u2 u3, max u2 u3 u4} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.addCommGroup.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))
but is expected to have type
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N' : Type.{u3}} [_inst_8 : AddCommGroup.{u3} N'] [_inst_9 : Module.{u1, u3} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)] {ι : Type.{u4}} [_inst_10 : Fintype.{u4} ι] [_inst_11 : DecidableEq.{succ u4} ι], AddMonoidHom.{max (max u4 u3) u2, max (max u4 u3) u2} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u2 u3) u4} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u2 u3) u4} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u2 u3) u4} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u2 u3) u4} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max (max u2 u3) u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u2 u3) u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u2 u3) u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u2 u3) u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))
Case conversion may be inaccurate. Consider using '#align multilinear_map.alternatization MultilinearMap.alternatizationₓ'. -/
/-- Produce an `alternating_map` out of a `multilinear_map`, by summing over all argument
permutations. -/
def alternatization : MultilinearMap R (fun i : ι => M) N' →+ AlternatingMap R M N' ι
    where
  toFun m :=
    {
      ∑ σ : Perm ι,
        σ.sign •
          m.domDomCongr
            σ with
      toFun := ⇑(∑ σ : Perm ι, σ.sign • m.domDomCongr σ)
      map_eq_zero_of_eq' := fun v i j hvij hij =>
        alternization_map_eq_zero_of_eq_aux m v i j hij hvij }
  map_add' a b := by
    ext
    simp only [Finset.sum_add_distrib, smul_add, add_apply, dom_dom_congr_apply,
      AlternatingMap.add_apply, AlternatingMap.coe_mk, smul_apply, sum_apply]
  map_zero' := by
    ext
    simp only [Finset.sum_const_zero, smul_zero, zero_apply, dom_dom_congr_apply,
      AlternatingMap.zero_apply, AlternatingMap.coe_mk, smul_apply, sum_apply]
#align multilinear_map.alternatization MultilinearMap.alternatization

/- warning: multilinear_map.alternatization_def -> MultilinearMap.alternatization_def is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N' : Type.{u3}} [_inst_8 : AddCommGroup.{u3} N'] [_inst_9 : Module.{u1, u3} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)] {ι : Type.{u4}} [_inst_10 : Fintype.{u4} ι] [_inst_11 : DecidableEq.{succ u4} ι] (m : MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9), Eq.{max (max (succ u4) (succ u2)) (succ u3)} ((ι -> M) -> N') (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) => (ι -> M) -> N') (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (coeFn.{max (succ (max u2 u3 u4)) (succ (max u4 u2 u3)), max (succ (max u4 u2 u3)) (succ (max u2 u3 u4))} (AddMonoidHom.{max u4 u2 u3, max u2 u3 u4} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.addCommGroup.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (fun (_x : AddMonoidHom.{max u4 u2 u3, max u2 u3 u4} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.addCommGroup.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) => (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) -> (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι)) (AddMonoidHom.hasCoeToFun.{max u4 u2 u3, max u2 u3 u4} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.addCommGroup.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (MultilinearMap.alternatization.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι _inst_10 (fun (a : ι) (b : ι) => _inst_11 a b)) m)) (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) => (ι -> M) -> N') (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (Finset.sum.{max u4 u2 u3, u4} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (Equiv.Perm.{succ u4} ι) (MultilinearMap.addCommMonoid.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (Finset.univ.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.fintype.{u4, u4} ι ι (fun (a : ι) (b : ι) => _inst_11 a b) (fun (a : ι) (b : ι) => _inst_11 a b) _inst_10 _inst_10)) (fun (σ : Equiv.Perm.{succ u4} ι) => SMul.smul.{0, max u4 u2 u3} (Units.{0} Int Int.monoid) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.hasSmul.{u2, u3, u4, 0, u1} ι (fun (i : ι) => M) N' (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (Units.{0} Int Int.monoid) R (DivInvMonoid.toMonoid.{0} (Units.{0} Int Int.monoid) (Group.toDivInvMonoid.{0} (Units.{0} Int Int.monoid) (Units.group.{0} Int Int.monoid))) _inst_1 (fun (i : ι) => _inst_3) (Units.distribMulAction.{0, u3} Int N' Int.monoid (AddCommMonoid.toAddMonoid.{u3} N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)) (Module.toDistribMulAction.{0, u3} Int N' Int.semiring (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (AddCommGroup.intModule.{u3} N' _inst_8))) _inst_9 (Units.smulCommClass_right.{u1, 0, u3} R Int N' Int.monoid (SMulZeroClass.toHasSmul.{u1, u3} R N' (AddZeroClass.toHasZero.{u3} N' (AddMonoid.toAddZeroClass.{u3} N' (AddCommMonoid.toAddMonoid.{u3} N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)))) (SMulWithZero.toSmulZeroClass.{u1, u3} R N' (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)))) (AddZeroClass.toHasZero.{u3} N' (AddMonoid.toAddZeroClass.{u3} N' (AddCommMonoid.toAddMonoid.{u3} N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)))) (MulActionWithZero.toSMulWithZero.{u1, u3} R N' (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddZeroClass.toHasZero.{u3} N' (AddMonoid.toAddZeroClass.{u3} N' (AddCommMonoid.toAddMonoid.{u3} N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)))) (Module.toMulActionWithZero.{u1, u3} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9)))) (SubNegMonoid.SMulInt.{u3} N' (AddGroup.toSubNegMonoid.{u3} N' (AddCommGroup.toAddGroup.{u3} N' _inst_8))) (AddGroup.int_smulCommClass'.{u1, u3} R N' (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)) (AddCommGroup.toAddGroup.{u3} N' _inst_8) (Module.toDistribMulAction.{u1, u3} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9)))) (coeFn.{succ u4, succ u4} (MonoidHom.{u4, 0} (Equiv.Perm.{succ u4} ι) (Units.{0} Int Int.monoid) (Monoid.toMulOneClass.{u4} (Equiv.Perm.{succ u4} ι) (DivInvMonoid.toMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Group.toDivInvMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.Perm.permGroup.{u4} ι)))) (Units.mulOneClass.{0} Int Int.monoid)) (fun (_x : MonoidHom.{u4, 0} (Equiv.Perm.{succ u4} ι) (Units.{0} Int Int.monoid) (Monoid.toMulOneClass.{u4} (Equiv.Perm.{succ u4} ι) (DivInvMonoid.toMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Group.toDivInvMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.Perm.permGroup.{u4} ι)))) (Units.mulOneClass.{0} Int Int.monoid)) => (Equiv.Perm.{succ u4} ι) -> (Units.{0} Int Int.monoid)) (MonoidHom.hasCoeToFun.{u4, 0} (Equiv.Perm.{succ u4} ι) (Units.{0} Int Int.monoid) (Monoid.toMulOneClass.{u4} (Equiv.Perm.{succ u4} ι) (DivInvMonoid.toMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Group.toDivInvMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.Perm.permGroup.{u4} ι)))) (Units.mulOneClass.{0} Int Int.monoid)) (Equiv.Perm.sign.{u4} ι (fun (a : ι) (b : ι) => _inst_11 a b) _inst_10) σ) (MultilinearMap.domDomCongr.{u1, u2, u3, u4, u4} R M N' _inst_1 _inst_2 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_3 _inst_9 ι ι σ m))))
but is expected to have type
  forall {R : Type.{u4}} [_inst_1 : Semiring.{u4} R] {M : Type.{u3}} [_inst_2 : AddCommMonoid.{u3} M] [_inst_3 : Module.{u4, u3} R M _inst_1 _inst_2] {N' : Type.{u2}} [_inst_8 : AddCommGroup.{u2} N'] [_inst_9 : Module.{u4, u2} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8)] {ι : Type.{u1}} [_inst_10 : Fintype.{u1} ι] [_inst_11 : DecidableEq.{succ u1} ι] (m : MultilinearMap.{u4, u3, u2, u1} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9), Eq.{max (max (succ u3) (succ u2)) (succ u1)} ((ι -> M) -> N') (FunLike.coe.{max (max (succ u3) (succ u2)) (succ u1), max (succ u3) (succ u1), succ u2} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (ι -> M) (fun (_x : ι -> M) => N') (AlternatingMap.funLike.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (FunLike.coe.{max (max (succ u1) (succ u2)) (succ u3), max (max (succ u1) (succ u2)) (succ u3), max (max (succ u1) (succ u2)) (succ u3)} (AddMonoidHom.{max (max u1 u2) u3, max (max u1 u2) u3} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (fun (_x : MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) => AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) _x) (AddHomClass.toFunLike.{max (max u1 u2) u3, max (max u1 u2) u3, max (max u1 u2) u3} (AddMonoidHom.{max (max u1 u2) u3, max (max u1 u2) u3} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddZeroClass.toAdd.{max (max u1 u2) u3} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9)))))) (AddZeroClass.toAdd.{max (max u1 u2) u3} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (AddMonoidHomClass.toAddHomClass.{max (max u1 u2) u3, max (max u1 u2) u3, max (max u1 u2) u3} (AddMonoidHom.{max (max u1 u2) u3, max (max u1 u2) u3} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι))))) (AddMonoidHom.addMonoidHomClass.{max (max u1 u2) u3, max (max u1 u2) u3} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))))) (MultilinearMap.alternatization.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι _inst_10 (fun (a : ι) (b : ι) => _inst_11 a b)) m)) (FunLike.coe.{max (max (succ u3) (succ u2)) (succ u1), max (succ u3) (succ u1), succ u2} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.13418 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (ι -> M) (fun (f : ι -> M) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : ι -> M) => N') f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u4, u3, u2, u1} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (Finset.sum.{max (max u3 u2) u1, u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (Equiv.Perm.{succ u1} ι) (MultilinearMap.addCommMonoid.{u4, u3, u2, u1} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (Finset.univ.{u1} (Equiv.Perm.{succ u1} ι) (equivFintype.{u1, u1} ι ι (fun (a : ι) (b : ι) => _inst_11 a b) (fun (a : ι) (b : ι) => _inst_11 a b) _inst_10 _inst_10)) (fun (σ : Equiv.Perm.{succ u1} ι) => HSMul.hSMul.{0, max (max u1 u2) u3, max (max u3 u2) u1} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : Equiv.Perm.{succ u1} ι) => Units.{0} Int Int.instMonoidInt) σ) (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.13418 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.{u4, u3, u2, u1} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (instHSMul.{0, max (max u3 u2) u1} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : Equiv.Perm.{succ u1} ι) => Units.{0} Int Int.instMonoidInt) σ) (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.13418 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (Units.instSMulUnits.{0, max (max u3 u2) u1} Int (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.13418 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) Int.instMonoidInt (SubNegMonoid.SMulInt.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.13418 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.13418 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.13418 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.13418 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9)))))) (FunLike.coe.{succ u1, succ u1, 1} (MonoidHom.{u1, 0} (Equiv.Perm.{succ u1} ι) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u1} (Equiv.Perm.{succ u1} ι) (DivInvMonoid.toMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Group.toDivInvMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Equiv.Perm.permGroup.{u1} ι)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (Equiv.Perm.{succ u1} ι) (fun (_x : Equiv.Perm.{succ u1} ι) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : Equiv.Perm.{succ u1} ι) => Units.{0} Int Int.instMonoidInt) _x) (MulHomClass.toFunLike.{u1, u1, 0} (MonoidHom.{u1, 0} (Equiv.Perm.{succ u1} ι) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u1} (Equiv.Perm.{succ u1} ι) (DivInvMonoid.toMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Group.toDivInvMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Equiv.Perm.permGroup.{u1} ι)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (Equiv.Perm.{succ u1} ι) (Units.{0} Int Int.instMonoidInt) (MulOneClass.toMul.{u1} (Equiv.Perm.{succ u1} ι) (Monoid.toMulOneClass.{u1} (Equiv.Perm.{succ u1} ι) (DivInvMonoid.toMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Group.toDivInvMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Equiv.Perm.permGroup.{u1} ι))))) (MulOneClass.toMul.{0} (Units.{0} Int Int.instMonoidInt) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (MonoidHomClass.toMulHomClass.{u1, u1, 0} (MonoidHom.{u1, 0} (Equiv.Perm.{succ u1} ι) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u1} (Equiv.Perm.{succ u1} ι) (DivInvMonoid.toMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Group.toDivInvMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Equiv.Perm.permGroup.{u1} ι)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (Equiv.Perm.{succ u1} ι) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u1} (Equiv.Perm.{succ u1} ι) (DivInvMonoid.toMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Group.toDivInvMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Equiv.Perm.permGroup.{u1} ι)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt) (MonoidHom.monoidHomClass.{u1, 0} (Equiv.Perm.{succ u1} ι) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u1} (Equiv.Perm.{succ u1} ι) (DivInvMonoid.toMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Group.toDivInvMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Equiv.Perm.permGroup.{u1} ι)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)))) (Equiv.Perm.sign.{u1} ι (fun (a : ι) (b : ι) => _inst_11 a b) _inst_10) σ) (MultilinearMap.domDomCongr.{u4, u3, u2, u1, u1} R M N' _inst_1 _inst_2 (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_3 _inst_9 ι ι σ m))))
Case conversion may be inaccurate. Consider using '#align multilinear_map.alternatization_def MultilinearMap.alternatization_defₓ'. -/
theorem alternatization_def (m : MultilinearMap R (fun i : ι => M) N') :
    ⇑(alternatization m) = (∑ σ : Perm ι, σ.sign • m.domDomCongr σ : _) :=
  rfl
#align multilinear_map.alternatization_def MultilinearMap.alternatization_def

/- warning: multilinear_map.alternatization_coe -> MultilinearMap.alternatization_coe is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N' : Type.{u3}} [_inst_8 : AddCommGroup.{u3} N'] [_inst_9 : Module.{u1, u3} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)] {ι : Type.{u4}} [_inst_10 : Fintype.{u4} ι] [_inst_11 : DecidableEq.{succ u4} ι] (m : MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9), Eq.{max (succ u4) (succ u2) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) ((fun (a : Sort.{max (succ u2) (succ u3) (succ u4)}) (b : Sort.{max (succ u4) (succ u2) (succ u3)}) [self : HasLiftT.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} a b] => self.0) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (HasLiftT.mk.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (CoeTCₓ.coe.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (coeBase.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.coe.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι)))) (coeFn.{max (succ (max u2 u3 u4)) (succ (max u4 u2 u3)), max (succ (max u4 u2 u3)) (succ (max u2 u3 u4))} (AddMonoidHom.{max u4 u2 u3, max u2 u3 u4} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.addCommGroup.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (fun (_x : AddMonoidHom.{max u4 u2 u3, max u2 u3 u4} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.addCommGroup.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) => (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) -> (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι)) (AddMonoidHom.hasCoeToFun.{max u4 u2 u3, max u2 u3 u4} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.addCommGroup.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (MultilinearMap.alternatization.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι _inst_10 (fun (a : ι) (b : ι) => _inst_11 a b)) m)) (Finset.sum.{max u4 u2 u3, u4} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (Equiv.Perm.{succ u4} ι) (MultilinearMap.addCommMonoid.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (Finset.univ.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.fintype.{u4, u4} ι ι (fun (a : ι) (b : ι) => _inst_11 a b) (fun (a : ι) (b : ι) => _inst_11 a b) _inst_10 _inst_10)) (fun (σ : Equiv.Perm.{succ u4} ι) => SMul.smul.{0, max u4 u2 u3} (Units.{0} Int Int.monoid) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.hasSmul.{u2, u3, u4, 0, u1} ι (fun (i : ι) => M) N' (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (Units.{0} Int Int.monoid) R (DivInvMonoid.toMonoid.{0} (Units.{0} Int Int.monoid) (Group.toDivInvMonoid.{0} (Units.{0} Int Int.monoid) (Units.group.{0} Int Int.monoid))) _inst_1 (fun (i : ι) => _inst_3) (Units.distribMulAction.{0, u3} Int N' Int.monoid (AddCommMonoid.toAddMonoid.{u3} N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)) (Module.toDistribMulAction.{0, u3} Int N' Int.semiring (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (AddCommGroup.intModule.{u3} N' _inst_8))) _inst_9 (Units.smulCommClass_right.{u1, 0, u3} R Int N' Int.monoid (SMulZeroClass.toHasSmul.{u1, u3} R N' (AddZeroClass.toHasZero.{u3} N' (AddMonoid.toAddZeroClass.{u3} N' (AddCommMonoid.toAddMonoid.{u3} N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)))) (SMulWithZero.toSmulZeroClass.{u1, u3} R N' (MulZeroClass.toHasZero.{u1} R (MulZeroOneClass.toMulZeroClass.{u1} R (MonoidWithZero.toMulZeroOneClass.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)))) (AddZeroClass.toHasZero.{u3} N' (AddMonoid.toAddZeroClass.{u3} N' (AddCommMonoid.toAddMonoid.{u3} N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)))) (MulActionWithZero.toSMulWithZero.{u1, u3} R N' (Semiring.toMonoidWithZero.{u1} R _inst_1) (AddZeroClass.toHasZero.{u3} N' (AddMonoid.toAddZeroClass.{u3} N' (AddCommMonoid.toAddMonoid.{u3} N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)))) (Module.toMulActionWithZero.{u1, u3} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9)))) (SubNegMonoid.SMulInt.{u3} N' (AddGroup.toSubNegMonoid.{u3} N' (AddCommGroup.toAddGroup.{u3} N' _inst_8))) (AddGroup.int_smulCommClass'.{u1, u3} R N' (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)) (AddCommGroup.toAddGroup.{u3} N' _inst_8) (Module.toDistribMulAction.{u1, u3} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9)))) (coeFn.{succ u4, succ u4} (MonoidHom.{u4, 0} (Equiv.Perm.{succ u4} ι) (Units.{0} Int Int.monoid) (Monoid.toMulOneClass.{u4} (Equiv.Perm.{succ u4} ι) (DivInvMonoid.toMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Group.toDivInvMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.Perm.permGroup.{u4} ι)))) (Units.mulOneClass.{0} Int Int.monoid)) (fun (_x : MonoidHom.{u4, 0} (Equiv.Perm.{succ u4} ι) (Units.{0} Int Int.monoid) (Monoid.toMulOneClass.{u4} (Equiv.Perm.{succ u4} ι) (DivInvMonoid.toMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Group.toDivInvMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.Perm.permGroup.{u4} ι)))) (Units.mulOneClass.{0} Int Int.monoid)) => (Equiv.Perm.{succ u4} ι) -> (Units.{0} Int Int.monoid)) (MonoidHom.hasCoeToFun.{u4, 0} (Equiv.Perm.{succ u4} ι) (Units.{0} Int Int.monoid) (Monoid.toMulOneClass.{u4} (Equiv.Perm.{succ u4} ι) (DivInvMonoid.toMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Group.toDivInvMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.Perm.permGroup.{u4} ι)))) (Units.mulOneClass.{0} Int Int.monoid)) (Equiv.Perm.sign.{u4} ι (fun (a : ι) (b : ι) => _inst_11 a b) _inst_10) σ) (MultilinearMap.domDomCongr.{u1, u2, u3, u4, u4} R M N' _inst_1 _inst_2 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_3 _inst_9 ι ι σ m)))
but is expected to have type
  forall {R : Type.{u4}} [_inst_1 : Semiring.{u4} R] {M : Type.{u3}} [_inst_2 : AddCommMonoid.{u3} M] [_inst_3 : Module.{u4, u3} R M _inst_1 _inst_2] {N' : Type.{u2}} [_inst_8 : AddCommGroup.{u2} N'] [_inst_9 : Module.{u4, u2} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8)] {ι : Type.{u1}} [_inst_10 : Fintype.{u1} ι] [_inst_11 : DecidableEq.{succ u1} ι] (m : MultilinearMap.{u4, u3, u2, u1} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9), Eq.{max (max (succ u3) (succ u2)) (succ u1)} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.toMultilinearMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι (FunLike.coe.{max (max (succ u1) (succ u2)) (succ u3), max (max (succ u1) (succ u2)) (succ u3), max (max (succ u1) (succ u2)) (succ u3)} (AddMonoidHom.{max (max u1 u2) u3, max (max u1 u2) u3} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (fun (_x : MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) => AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) _x) (AddHomClass.toFunLike.{max (max u1 u2) u3, max (max u1 u2) u3, max (max u1 u2) u3} (AddMonoidHom.{max (max u1 u2) u3, max (max u1 u2) u3} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddZeroClass.toAdd.{max (max u1 u2) u3} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9)))))) (AddZeroClass.toAdd.{max (max u1 u2) u3} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (AddMonoidHomClass.toAddHomClass.{max (max u1 u2) u3, max (max u1 u2) u3, max (max u1 u2) u3} (AddMonoidHom.{max (max u1 u2) u3, max (max u1 u2) u3} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι))))) (AddMonoidHom.addMonoidHomClass.{max (max u1 u2) u3, max (max u1 u2) u3} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))))) (MultilinearMap.alternatization.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι _inst_10 (fun (a : ι) (b : ι) => _inst_11 a b)) m)) (Finset.sum.{max (max u3 u2) u1, u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (Equiv.Perm.{succ u1} ι) (MultilinearMap.addCommMonoid.{u4, u3, u2, u1} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (Finset.univ.{u1} (Equiv.Perm.{succ u1} ι) (equivFintype.{u1, u1} ι ι (fun (a : ι) (b : ι) => _inst_11 a b) (fun (a : ι) (b : ι) => _inst_11 a b) _inst_10 _inst_10)) (fun (σ : Equiv.Perm.{succ u1} ι) => HSMul.hSMul.{0, max (max u1 u2) u3, max (max u3 u2) u1} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : Equiv.Perm.{succ u1} ι) => Units.{0} Int Int.instMonoidInt) σ) (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.13418 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.{u4, u3, u2, u1} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (instHSMul.{0, max (max u3 u2) u1} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : Equiv.Perm.{succ u1} ι) => Units.{0} Int Int.instMonoidInt) σ) (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.13418 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (Units.instSMulUnits.{0, max (max u3 u2) u1} Int (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.13418 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) Int.instMonoidInt (SubNegMonoid.SMulInt.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.13418 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.13418 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.13418 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.13418 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9)))))) (FunLike.coe.{succ u1, succ u1, 1} (MonoidHom.{u1, 0} (Equiv.Perm.{succ u1} ι) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u1} (Equiv.Perm.{succ u1} ι) (DivInvMonoid.toMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Group.toDivInvMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Equiv.Perm.permGroup.{u1} ι)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (Equiv.Perm.{succ u1} ι) (fun (_x : Equiv.Perm.{succ u1} ι) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : Equiv.Perm.{succ u1} ι) => Units.{0} Int Int.instMonoidInt) _x) (MulHomClass.toFunLike.{u1, u1, 0} (MonoidHom.{u1, 0} (Equiv.Perm.{succ u1} ι) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u1} (Equiv.Perm.{succ u1} ι) (DivInvMonoid.toMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Group.toDivInvMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Equiv.Perm.permGroup.{u1} ι)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (Equiv.Perm.{succ u1} ι) (Units.{0} Int Int.instMonoidInt) (MulOneClass.toMul.{u1} (Equiv.Perm.{succ u1} ι) (Monoid.toMulOneClass.{u1} (Equiv.Perm.{succ u1} ι) (DivInvMonoid.toMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Group.toDivInvMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Equiv.Perm.permGroup.{u1} ι))))) (MulOneClass.toMul.{0} (Units.{0} Int Int.instMonoidInt) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (MonoidHomClass.toMulHomClass.{u1, u1, 0} (MonoidHom.{u1, 0} (Equiv.Perm.{succ u1} ι) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u1} (Equiv.Perm.{succ u1} ι) (DivInvMonoid.toMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Group.toDivInvMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Equiv.Perm.permGroup.{u1} ι)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (Equiv.Perm.{succ u1} ι) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u1} (Equiv.Perm.{succ u1} ι) (DivInvMonoid.toMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Group.toDivInvMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Equiv.Perm.permGroup.{u1} ι)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt) (MonoidHom.monoidHomClass.{u1, 0} (Equiv.Perm.{succ u1} ι) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u1} (Equiv.Perm.{succ u1} ι) (DivInvMonoid.toMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Group.toDivInvMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Equiv.Perm.permGroup.{u1} ι)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)))) (Equiv.Perm.sign.{u1} ι (fun (a : ι) (b : ι) => _inst_11 a b) _inst_10) σ) (MultilinearMap.domDomCongr.{u4, u3, u2, u1, u1} R M N' _inst_1 _inst_2 (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_3 _inst_9 ι ι σ m)))
Case conversion may be inaccurate. Consider using '#align multilinear_map.alternatization_coe MultilinearMap.alternatization_coeₓ'. -/
theorem alternatization_coe (m : MultilinearMap R (fun i : ι => M) N') :
    ↑m.alternatization = (∑ σ : Perm ι, σ.sign • m.domDomCongr σ : _) :=
  coe_injective rfl
#align multilinear_map.alternatization_coe MultilinearMap.alternatization_coe

/- warning: multilinear_map.alternatization_apply -> MultilinearMap.alternatization_apply is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N' : Type.{u3}} [_inst_8 : AddCommGroup.{u3} N'] [_inst_9 : Module.{u1, u3} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)] {ι : Type.{u4}} [_inst_10 : Fintype.{u4} ι] [_inst_11 : DecidableEq.{succ u4} ι] (m : MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (v : ι -> M), Eq.{succ u3} N' (coeFn.{max (succ u2) (succ u3) (succ u4), max (max (succ u4) (succ u2)) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (fun (_x : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) => (ι -> M) -> N') (AlternatingMap.coeFun.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (coeFn.{max (succ (max u2 u3 u4)) (succ (max u4 u2 u3)), max (succ (max u4 u2 u3)) (succ (max u2 u3 u4))} (AddMonoidHom.{max u4 u2 u3, max u2 u3 u4} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.addCommGroup.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (fun (_x : AddMonoidHom.{max u4 u2 u3, max u2 u3 u4} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.addCommGroup.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) => (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) -> (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι)) (AddMonoidHom.hasCoeToFun.{max u4 u2 u3, max u2 u3 u4} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.addCommGroup.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (MultilinearMap.alternatization.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι _inst_10 (fun (a : ι) (b : ι) => _inst_11 a b)) m) v) (Finset.sum.{u3, u4} N' (Equiv.Perm.{succ u4} ι) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (Finset.univ.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.fintype.{u4, u4} ι ι (fun (a : ι) (b : ι) => _inst_11 a b) (fun (a : ι) (b : ι) => _inst_11 a b) _inst_10 _inst_10)) (fun (σ : Equiv.Perm.{succ u4} ι) => SMul.smul.{0, u3} (Units.{0} Int Int.monoid) N' (Units.hasSmul.{0, u3} Int N' Int.monoid (SubNegMonoid.SMulInt.{u3} N' (AddGroup.toSubNegMonoid.{u3} N' (AddCommGroup.toAddGroup.{u3} N' _inst_8)))) (coeFn.{succ u4, succ u4} (MonoidHom.{u4, 0} (Equiv.Perm.{succ u4} ι) (Units.{0} Int Int.monoid) (Monoid.toMulOneClass.{u4} (Equiv.Perm.{succ u4} ι) (DivInvMonoid.toMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Group.toDivInvMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.Perm.permGroup.{u4} ι)))) (Units.mulOneClass.{0} Int Int.monoid)) (fun (_x : MonoidHom.{u4, 0} (Equiv.Perm.{succ u4} ι) (Units.{0} Int Int.monoid) (Monoid.toMulOneClass.{u4} (Equiv.Perm.{succ u4} ι) (DivInvMonoid.toMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Group.toDivInvMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.Perm.permGroup.{u4} ι)))) (Units.mulOneClass.{0} Int Int.monoid)) => (Equiv.Perm.{succ u4} ι) -> (Units.{0} Int Int.monoid)) (MonoidHom.hasCoeToFun.{u4, 0} (Equiv.Perm.{succ u4} ι) (Units.{0} Int Int.monoid) (Monoid.toMulOneClass.{u4} (Equiv.Perm.{succ u4} ι) (DivInvMonoid.toMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Group.toDivInvMonoid.{u4} (Equiv.Perm.{succ u4} ι) (Equiv.Perm.permGroup.{u4} ι)))) (Units.mulOneClass.{0} Int Int.monoid)) (Equiv.Perm.sign.{u4} ι (fun (a : ι) (b : ι) => _inst_11 a b) _inst_10) σ) (coeFn.{max (succ u4) (succ u2) (succ u3), max (max (succ u4) (succ u2)) (succ u3)} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (fun (f : MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) => (ι -> M) -> N') (MultilinearMap.hasCoeToFun.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.domDomCongr.{u1, u2, u3, u4, u4} R M N' _inst_1 _inst_2 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_3 _inst_9 ι ι σ m) v)))
but is expected to have type
  forall {R : Type.{u4}} [_inst_1 : Semiring.{u4} R] {M : Type.{u3}} [_inst_2 : AddCommMonoid.{u3} M] [_inst_3 : Module.{u4, u3} R M _inst_1 _inst_2] {N' : Type.{u2}} [_inst_8 : AddCommGroup.{u2} N'] [_inst_9 : Module.{u4, u2} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8)] {ι : Type.{u1}} [_inst_10 : Fintype.{u1} ι] [_inst_11 : DecidableEq.{succ u1} ι] (m : MultilinearMap.{u4, u3, u2, u1} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (v : ι -> M), Eq.{succ u2} N' (FunLike.coe.{max (max (succ u3) (succ u2)) (succ u1), max (succ u3) (succ u1), succ u2} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (ι -> M) (fun (_x : ι -> M) => N') (AlternatingMap.funLike.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (FunLike.coe.{max (max (succ u1) (succ u2)) (succ u3), max (max (succ u1) (succ u2)) (succ u3), max (max (succ u1) (succ u2)) (succ u3)} (AddMonoidHom.{max (max u1 u2) u3, max (max u1 u2) u3} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (fun (_x : MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) => AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) _x) (AddHomClass.toFunLike.{max (max u1 u2) u3, max (max u1 u2) u3, max (max u1 u2) u3} (AddMonoidHom.{max (max u1 u2) u3, max (max u1 u2) u3} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddZeroClass.toAdd.{max (max u1 u2) u3} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9)))))) (AddZeroClass.toAdd.{max (max u1 u2) u3} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (AddMonoidHomClass.toAddHomClass.{max (max u1 u2) u3, max (max u1 u2) u3, max (max u1 u2) u3} (AddMonoidHom.{max (max u1 u2) u3, max (max u1 u2) u3} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι))))) (AddMonoidHom.addMonoidHomClass.{max (max u1 u2) u3, max (max u1 u2) u3} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u3 u2) u1} (AlternatingMap.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))))) (MultilinearMap.alternatization.{u4, u3, u2, u1} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι _inst_10 (fun (a : ι) (b : ι) => _inst_11 a b)) m) v) (Finset.sum.{u2, u1} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : ι -> M) => N') v) (Equiv.Perm.{succ u1} ι) (AddCommGroup.toAddCommMonoid.{u2} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : ι -> M) => N') v) _inst_8) (Finset.univ.{u1} (Equiv.Perm.{succ u1} ι) (equivFintype.{u1, u1} ι ι (fun (a : ι) (b : ι) => _inst_11 a b) (fun (a : ι) (b : ι) => _inst_11 a b) _inst_10 _inst_10)) (fun (σ : Equiv.Perm.{succ u1} ι) => HSMul.hSMul.{0, u2, u2} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : Equiv.Perm.{succ u1} ι) => Units.{0} Int Int.instMonoidInt) σ) ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : ι -> M) => N') v) ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : ι -> M) => N') v) (instHSMul.{0, u2} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : Equiv.Perm.{succ u1} ι) => Units.{0} Int Int.instMonoidInt) σ) ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : ι -> M) => N') v) (Units.instSMulUnits.{0, u2} Int ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : ι -> M) => N') v) Int.instMonoidInt (SubNegMonoid.SMulInt.{u2} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : ι -> M) => N') v) (AddGroup.toSubNegMonoid.{u2} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : ι -> M) => N') v) (AddCommGroup.toAddGroup.{u2} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : ι -> M) => N') v) _inst_8))))) (FunLike.coe.{succ u1, succ u1, 1} (MonoidHom.{u1, 0} (Equiv.Perm.{succ u1} ι) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u1} (Equiv.Perm.{succ u1} ι) (DivInvMonoid.toMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Group.toDivInvMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Equiv.Perm.permGroup.{u1} ι)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (Equiv.Perm.{succ u1} ι) (fun (_x : Equiv.Perm.{succ u1} ι) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : Equiv.Perm.{succ u1} ι) => Units.{0} Int Int.instMonoidInt) _x) (MulHomClass.toFunLike.{u1, u1, 0} (MonoidHom.{u1, 0} (Equiv.Perm.{succ u1} ι) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u1} (Equiv.Perm.{succ u1} ι) (DivInvMonoid.toMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Group.toDivInvMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Equiv.Perm.permGroup.{u1} ι)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (Equiv.Perm.{succ u1} ι) (Units.{0} Int Int.instMonoidInt) (MulOneClass.toMul.{u1} (Equiv.Perm.{succ u1} ι) (Monoid.toMulOneClass.{u1} (Equiv.Perm.{succ u1} ι) (DivInvMonoid.toMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Group.toDivInvMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Equiv.Perm.permGroup.{u1} ι))))) (MulOneClass.toMul.{0} (Units.{0} Int Int.instMonoidInt) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (MonoidHomClass.toMulHomClass.{u1, u1, 0} (MonoidHom.{u1, 0} (Equiv.Perm.{succ u1} ι) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u1} (Equiv.Perm.{succ u1} ι) (DivInvMonoid.toMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Group.toDivInvMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Equiv.Perm.permGroup.{u1} ι)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (Equiv.Perm.{succ u1} ι) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u1} (Equiv.Perm.{succ u1} ι) (DivInvMonoid.toMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Group.toDivInvMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Equiv.Perm.permGroup.{u1} ι)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt) (MonoidHom.monoidHomClass.{u1, 0} (Equiv.Perm.{succ u1} ι) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u1} (Equiv.Perm.{succ u1} ι) (DivInvMonoid.toMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Group.toDivInvMonoid.{u1} (Equiv.Perm.{succ u1} ι) (Equiv.Perm.permGroup.{u1} ι)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)))) (Equiv.Perm.sign.{u1} ι (fun (a : ι) (b : ι) => _inst_11 a b) _inst_10) σ) (FunLike.coe.{max (max (succ u3) (succ u2)) (succ u1), max (succ u3) (succ u1), succ u2} (MultilinearMap.{u4, u3, u2, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.13418 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (ι -> M) (fun (f : ι -> M) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : ι -> M) => N') f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u4, u3, u2, u1} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.domDomCongr.{u4, u3, u2, u1, u1} R M N' _inst_1 _inst_2 (AddCommGroup.toAddCommMonoid.{u2} N' _inst_8) _inst_3 _inst_9 ι ι σ m) v)))
Case conversion may be inaccurate. Consider using '#align multilinear_map.alternatization_apply MultilinearMap.alternatization_applyₓ'. -/
theorem alternatization_apply (m : MultilinearMap R (fun i : ι => M) N') (v : ι → M) :
    alternatization m v = ∑ σ : Perm ι, σ.sign • m.domDomCongr σ v := by
  simp only [alternatization_def, smul_apply, sum_apply]
#align multilinear_map.alternatization_apply MultilinearMap.alternatization_apply

end MultilinearMap

namespace AlternatingMap

/- warning: alternating_map.coe_alternatization -> AlternatingMap.coe_alternatization is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N' : Type.{u3}} [_inst_8 : AddCommGroup.{u3} N'] [_inst_9 : Module.{u1, u3} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)] {ι : Type.{u4}} [_inst_10 : DecidableEq.{succ u4} ι] [_inst_11 : Fintype.{u4} ι] (a : AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι), Eq.{max (succ u2) (succ u3) (succ u4)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (coeFn.{max (succ (max u2 u3 u4)) (succ (max u4 u2 u3)), max (succ (max u4 u2 u3)) (succ (max u2 u3 u4))} (AddMonoidHom.{max u4 u2 u3, max u2 u3 u4} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.addCommGroup.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (fun (_x : AddMonoidHom.{max u4 u2 u3, max u2 u3 u4} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.addCommGroup.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) => (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) -> (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι)) (AddMonoidHom.hasCoeToFun.{max u4 u2 u3, max u2 u3 u4} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.addCommGroup.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (MultilinearMap.alternatization.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι _inst_11 (fun (a : ι) (b : ι) => _inst_10 a b)) ((fun (a : Sort.{max (succ u2) (succ u3) (succ u4)}) (b : Sort.{max (succ u4) (succ u2) (succ u3)}) [self : HasLiftT.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} a b] => self.0) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (ι : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (HasLiftT.mk.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (ι : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (CoeTCₓ.coe.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (ι : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (coeBase.{max (succ u2) (succ u3) (succ u4), max (succ u4) (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (MultilinearMap.{u1, u2, u3, u4} R ι (fun (ι : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.coe.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι)))) a)) (SMul.smul.{0, max u2 u3 u4} Nat (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.smul.{u1, u2, u3, u4, 0} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι Nat Nat.monoid (Module.toDistribMulAction.{0, u3} Nat N' Nat.semiring (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (AddCommMonoid.natModule.{u3} N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8))) (AddMonoid.nat_smulCommClass'.{u1, u3} R N' (MonoidWithZero.toMonoid.{u1} R (Semiring.toMonoidWithZero.{u1} R _inst_1)) (SubNegMonoid.toAddMonoid.{u3} N' (AddGroup.toSubNegMonoid.{u3} N' (AddCommGroup.toAddGroup.{u3} N' _inst_8))) (Module.toDistribMulAction.{u1, u3} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9))) (Nat.factorial (Fintype.card.{u4} ι _inst_11)) a)
but is expected to have type
  forall {R : Type.{u3}} [_inst_1 : Semiring.{u3} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u3, u2} R M _inst_1 _inst_2] {N' : Type.{u1}} [_inst_8 : AddCommGroup.{u1} N'] [_inst_9 : Module.{u3, u1} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8)] {ι : Type.{u4}} [_inst_10 : DecidableEq.{succ u4} ι] [_inst_11 : Fintype.{u4} ι] (a : AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι), Eq.{max (max (succ u2) (succ u1)) (succ u4)} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) => AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AlternatingMap.toMultilinearMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι a)) (FunLike.coe.{max (max (succ u4) (succ u1)) (succ u2), max (max (succ u4) (succ u1)) (succ u2), max (max (succ u4) (succ u1)) (succ u2)} (AddMonoidHom.{max (max u4 u1) u2, max (max u4 u1) u2} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u2 u1) u4} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u2 u1) u4} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u2 u1) u4} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u2 u1) u4} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (fun (_x : MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) => AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) _x) (AddHomClass.toFunLike.{max (max u4 u1) u2, max (max u4 u1) u2, max (max u4 u1) u2} (AddMonoidHom.{max (max u4 u1) u2, max (max u4 u1) u2} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u2 u1) u4} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u2 u1) u4} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u2 u1) u4} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u2 u1) u4} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AddZeroClass.toAdd.{max (max u4 u1) u2} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddMonoid.toAddZeroClass.{max (max u2 u1) u4} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u2 u1) u4} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u2 u1) u4} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u2 u1) u4} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9)))))) (AddZeroClass.toAdd.{max (max u4 u1) u2} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (AddMonoidHomClass.toAddHomClass.{max (max u4 u1) u2, max (max u4 u1) u2, max (max u4 u1) u2} (AddMonoidHom.{max (max u4 u1) u2, max (max u4 u1) u2} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u2 u1) u4} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u2 u1) u4} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u2 u1) u4} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u2 u1) u4} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u2 u1) u4} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u2 u1) u4} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u2 u1) u4} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u2 u1) u4} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι))))) (AddMonoidHom.addMonoidHomClass.{max (max u4 u1) u2, max (max u4 u1) u2} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u2 u1) u4} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u2 u1) u4} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u2 u1) u4} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u2 u1) u4} (MultilinearMap.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u3, u2, u1, u4} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))))) (MultilinearMap.alternatization.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι _inst_11 (fun (a : ι) (b : ι) => _inst_10 a b)) (AlternatingMap.toMultilinearMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι a)) (HSMul.hSMul.{0, max (max u2 u1) u4, max (max u2 u1) u4} Nat (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (instHSMul.{0, max (max u2 u1) u4} Nat (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AddMonoid.SMul.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u2 u1) u4} (AlternatingMap.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u1} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u3, u2, u1, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (Nat.factorial (Fintype.card.{u4} ι _inst_11)) a)
Case conversion may be inaccurate. Consider using '#align alternating_map.coe_alternatization AlternatingMap.coe_alternatizationₓ'. -/
/-- Alternatizing a multilinear map that is already alternating results in a scale factor of `n!`,
where `n` is the number of inputs. -/
theorem coe_alternatization [DecidableEq ι] [Fintype ι] (a : AlternatingMap R M N' ι) :
    (↑a : MultilinearMap R (fun ι => M) N').alternatization = Nat.factorial (Fintype.card ι) • a :=
  by
  apply AlternatingMap.coe_injective
  simp_rw [MultilinearMap.alternatization_def, ← coe_dom_dom_congr, dom_dom_congr_perm, coe_smul,
    smul_smul, Int.units_mul_self, one_smul, Finset.sum_const, Finset.card_univ, Fintype.card_perm,
    ← coe_multilinear_map, coe_smul]
#align alternating_map.coe_alternatization AlternatingMap.coe_alternatization

end AlternatingMap

namespace LinearMap

variable {N'₂ : Type _} [AddCommGroup N'₂] [Module R N'₂] [DecidableEq ι] [Fintype ι]

/- warning: linear_map.comp_multilinear_map_alternatization -> LinearMap.compMultilinearMap_alternatization is a dubious translation:
lean 3 declaration is
  forall {R : Type.{u1}} [_inst_1 : Semiring.{u1} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u1, u2} R M _inst_1 _inst_2] {N' : Type.{u3}} [_inst_8 : AddCommGroup.{u3} N'] [_inst_9 : Module.{u1, u3} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8)] {ι : Type.{u4}} {N'₂ : Type.{u5}} [_inst_10 : AddCommGroup.{u5} N'₂] [_inst_11 : Module.{u1, u5} R N'₂ _inst_1 (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10)] [_inst_12 : DecidableEq.{succ u4} ι] [_inst_13 : Fintype.{u4} ι] (g : LinearMap.{u1, u1, u3, u5} R R _inst_1 _inst_1 (RingHom.id.{u1} R (Semiring.toNonAssocSemiring.{u1} R _inst_1)) N' N'₂ (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_9 _inst_11) (f : MultilinearMap.{u1, u2, u3, u4} R ι (fun (_x : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9), Eq.{max (succ u2) (succ u5) (succ u4)} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι) (coeFn.{max (succ (max u2 u5 u4)) (succ (max u4 u2 u5)), max (succ (max u4 u2 u5)) (succ (max u2 u5 u4))} (AddMonoidHom.{max u4 u2 u5, max u2 u5 u4} (MultilinearMap.{u1, u2, u5, u4} R ι (fun (i : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι) (AddMonoid.toAddZeroClass.{max u4 u2 u5} (MultilinearMap.{u1, u2, u5, u4} R ι (fun (i : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (SubNegMonoid.toAddMonoid.{max u4 u2 u5} (MultilinearMap.{u1, u2, u5, u4} R ι (fun (i : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (AddGroup.toSubNegMonoid.{max u4 u2 u5} (MultilinearMap.{u1, u2, u5, u4} R ι (fun (i : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (AddCommGroup.toAddGroup.{max u4 u2 u5} (MultilinearMap.{u1, u2, u5, u4} R ι (fun (i : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (MultilinearMap.addCommGroup.{u1, u2, u5, u4} R ι (fun (i : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) _inst_10 (fun (i : ι) => _inst_3) _inst_11))))) (AddMonoid.toAddZeroClass.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι) (SubNegMonoid.toAddMonoid.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι) (AddGroup.toSubNegMonoid.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι) (AddCommGroup.toAddGroup.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι) (AlternatingMap.addCommGroup.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ _inst_10 _inst_11 ι)))))) (fun (_x : AddMonoidHom.{max u4 u2 u5, max u2 u5 u4} (MultilinearMap.{u1, u2, u5, u4} R ι (fun (i : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι) (AddMonoid.toAddZeroClass.{max u4 u2 u5} (MultilinearMap.{u1, u2, u5, u4} R ι (fun (i : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (SubNegMonoid.toAddMonoid.{max u4 u2 u5} (MultilinearMap.{u1, u2, u5, u4} R ι (fun (i : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (AddGroup.toSubNegMonoid.{max u4 u2 u5} (MultilinearMap.{u1, u2, u5, u4} R ι (fun (i : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (AddCommGroup.toAddGroup.{max u4 u2 u5} (MultilinearMap.{u1, u2, u5, u4} R ι (fun (i : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (MultilinearMap.addCommGroup.{u1, u2, u5, u4} R ι (fun (i : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) _inst_10 (fun (i : ι) => _inst_3) _inst_11))))) (AddMonoid.toAddZeroClass.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι) (SubNegMonoid.toAddMonoid.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι) (AddGroup.toSubNegMonoid.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι) (AddCommGroup.toAddGroup.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι) (AlternatingMap.addCommGroup.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ _inst_10 _inst_11 ι)))))) => (MultilinearMap.{u1, u2, u5, u4} R ι (fun (i : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) -> (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι)) (AddMonoidHom.hasCoeToFun.{max u4 u2 u5, max u2 u5 u4} (MultilinearMap.{u1, u2, u5, u4} R ι (fun (i : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι) (AddMonoid.toAddZeroClass.{max u4 u2 u5} (MultilinearMap.{u1, u2, u5, u4} R ι (fun (i : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (SubNegMonoid.toAddMonoid.{max u4 u2 u5} (MultilinearMap.{u1, u2, u5, u4} R ι (fun (i : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (AddGroup.toSubNegMonoid.{max u4 u2 u5} (MultilinearMap.{u1, u2, u5, u4} R ι (fun (i : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (AddCommGroup.toAddGroup.{max u4 u2 u5} (MultilinearMap.{u1, u2, u5, u4} R ι (fun (i : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (MultilinearMap.addCommGroup.{u1, u2, u5, u4} R ι (fun (i : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) _inst_10 (fun (i : ι) => _inst_3) _inst_11))))) (AddMonoid.toAddZeroClass.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι) (SubNegMonoid.toAddMonoid.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι) (AddGroup.toSubNegMonoid.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι) (AddCommGroup.toAddGroup.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι) (AlternatingMap.addCommGroup.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ _inst_10 _inst_11 ι)))))) (MultilinearMap.alternatization.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ _inst_10 _inst_11 ι _inst_13 (fun (a : ι) (b : ι) => _inst_12 a b)) (LinearMap.compMultilinearMap.{u1, u2, u3, u5, u4} R ι (fun (_x : ι) => M) N' N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_9 _inst_11 g f)) (coeFn.{max (succ (max u2 u5 u4)) (succ (max u2 u3 u4)), max (succ (max u2 u3 u4)) (succ (max u2 u5 u4))} (AddMonoidHom.{max u2 u3 u4, max u2 u5 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddCommMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommMonoid.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι))) (AddMonoid.toAddZeroClass.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι) (AddCommMonoid.toAddMonoid.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι) (AlternatingMap.addCommMonoid.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι)))) (fun (_x : AddMonoidHom.{max u2 u3 u4, max u2 u5 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddCommMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommMonoid.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι))) (AddMonoid.toAddZeroClass.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι) (AddCommMonoid.toAddMonoid.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι) (AlternatingMap.addCommMonoid.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι)))) => (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) -> (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι)) (AddMonoidHom.hasCoeToFun.{max u2 u3 u4, max u2 u5 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddCommMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommMonoid.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι))) (AddMonoid.toAddZeroClass.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι) (AddCommMonoid.toAddMonoid.{max u2 u5 u4} (AlternatingMap.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι) (AlternatingMap.addCommMonoid.{u1, u2, u5, u4} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 ι)))) (LinearMap.compAlternatingMap.{u1, u2, u3, u4, u5} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι N'₂ (AddCommGroup.toAddCommMonoid.{u5} N'₂ _inst_10) _inst_11 g) (coeFn.{max (succ (max u2 u3 u4)) (succ (max u4 u2 u3)), max (succ (max u4 u2 u3)) (succ (max u2 u3 u4))} (AddMonoidHom.{max u4 u2 u3, max u2 u3 u4} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.addCommGroup.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (fun (_x : AddMonoidHom.{max u4 u2 u3, max u2 u3 u4} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.addCommGroup.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) => (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) -> (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι)) (AddMonoidHom.hasCoeToFun.{max u4 u2 u3, max u2 u3 u4} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max u4 u2 u3} (MultilinearMap.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.addCommGroup.{u1, u2, u3, u4} R ι (fun (i : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max u2 u3 u4} (AlternatingMap.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u3} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (MultilinearMap.alternatization.{u1, u2, u3, u4} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι _inst_13 (fun (a : ι) (b : ι) => _inst_12 a b)) f))
but is expected to have type
  forall {R : Type.{u5}} [_inst_1 : Semiring.{u5} R] {M : Type.{u2}} [_inst_2 : AddCommMonoid.{u2} M] [_inst_3 : Module.{u5, u2} R M _inst_1 _inst_2] {N' : Type.{u4}} [_inst_8 : AddCommGroup.{u4} N'] [_inst_9 : Module.{u5, u4} R N' _inst_1 (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8)] {ι : Type.{u1}} {N'₂ : Type.{u3}} [_inst_10 : AddCommGroup.{u3} N'₂] [_inst_11 : Module.{u5, u3} R N'₂ _inst_1 (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10)] [_inst_12 : DecidableEq.{succ u1} ι] [_inst_13 : Fintype.{u1} ι] (g : LinearMap.{u5, u5, u4, u3} R R _inst_1 _inst_1 (RingHom.id.{u5} R (Semiring.toNonAssocSemiring.{u5} R _inst_1)) N' N'₂ (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_9 _inst_11) (f : MultilinearMap.{u5, u2, u4, u1} R ι (fun (_x : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9), Eq.{max (max (succ u2) (succ u1)) (succ u3)} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) => AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (LinearMap.compMultilinearMap.{u5, u2, u4, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_9 _inst_11 g f)) (FunLike.coe.{max (max (succ u1) (succ u3)) (succ u2), max (max (succ u1) (succ u3)) (succ u2), max (max (succ u1) (succ u3)) (succ u2)} (AddMonoidHom.{max (max u1 u3) u2, max (max u1 u3) u2} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u3) u1} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (SubNegMonoid.toAddMonoid.{max (max u2 u3) u1} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (AddGroup.toSubNegMonoid.{max (max u2 u3) u1} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (AddCommGroup.toAddGroup.{max (max u2 u3) u1} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) _inst_10 (fun (i : ι) => _inst_3) _inst_11))))) (AddMonoid.toAddZeroClass.{max (max u2 u3) u1} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (SubNegMonoid.toAddMonoid.{max (max u2 u3) u1} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddGroup.toSubNegMonoid.{max (max u2 u3) u1} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddCommGroup.toAddGroup.{max (max u2 u3) u1} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AlternatingMap.addCommGroup.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ _inst_10 _inst_11 ι)))))) (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (fun (_x : MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) => AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) _x) (AddHomClass.toFunLike.{max (max u1 u3) u2, max (max u1 u3) u2, max (max u1 u3) u2} (AddMonoidHom.{max (max u1 u3) u2, max (max u1 u3) u2} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u3) u1} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (SubNegMonoid.toAddMonoid.{max (max u2 u3) u1} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (AddGroup.toSubNegMonoid.{max (max u2 u3) u1} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (AddCommGroup.toAddGroup.{max (max u2 u3) u1} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) _inst_10 (fun (i : ι) => _inst_3) _inst_11))))) (AddMonoid.toAddZeroClass.{max (max u2 u3) u1} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (SubNegMonoid.toAddMonoid.{max (max u2 u3) u1} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddGroup.toSubNegMonoid.{max (max u2 u3) u1} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddCommGroup.toAddGroup.{max (max u2 u3) u1} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AlternatingMap.addCommGroup.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ _inst_10 _inst_11 ι)))))) (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddZeroClass.toAdd.{max (max u1 u3) u2} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (AddMonoid.toAddZeroClass.{max (max u2 u3) u1} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (SubNegMonoid.toAddMonoid.{max (max u2 u3) u1} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (AddGroup.toSubNegMonoid.{max (max u2 u3) u1} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (AddCommGroup.toAddGroup.{max (max u2 u3) u1} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) _inst_10 (fun (i : ι) => _inst_3) _inst_11)))))) (AddZeroClass.toAdd.{max (max u1 u3) u2} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u3) u1} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (SubNegMonoid.toAddMonoid.{max (max u2 u3) u1} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddGroup.toSubNegMonoid.{max (max u2 u3) u1} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddCommGroup.toAddGroup.{max (max u2 u3) u1} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AlternatingMap.addCommGroup.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ _inst_10 _inst_11 ι)))))) (AddMonoidHomClass.toAddHomClass.{max (max u1 u3) u2, max (max u1 u3) u2, max (max u1 u3) u2} (AddMonoidHom.{max (max u1 u3) u2, max (max u1 u3) u2} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u3) u1} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (SubNegMonoid.toAddMonoid.{max (max u2 u3) u1} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (AddGroup.toSubNegMonoid.{max (max u2 u3) u1} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (AddCommGroup.toAddGroup.{max (max u2 u3) u1} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) _inst_10 (fun (i : ι) => _inst_3) _inst_11))))) (AddMonoid.toAddZeroClass.{max (max u2 u3) u1} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (SubNegMonoid.toAddMonoid.{max (max u2 u3) u1} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddGroup.toSubNegMonoid.{max (max u2 u3) u1} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddCommGroup.toAddGroup.{max (max u2 u3) u1} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AlternatingMap.addCommGroup.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ _inst_10 _inst_11 ι)))))) (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u3) u1} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (SubNegMonoid.toAddMonoid.{max (max u2 u3) u1} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (AddGroup.toSubNegMonoid.{max (max u2 u3) u1} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (AddCommGroup.toAddGroup.{max (max u2 u3) u1} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) _inst_10 (fun (i : ι) => _inst_3) _inst_11))))) (AddMonoid.toAddZeroClass.{max (max u2 u3) u1} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (SubNegMonoid.toAddMonoid.{max (max u2 u3) u1} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddGroup.toSubNegMonoid.{max (max u2 u3) u1} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddCommGroup.toAddGroup.{max (max u2 u3) u1} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AlternatingMap.addCommGroup.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ _inst_10 _inst_11 ι))))) (AddMonoidHom.addMonoidHomClass.{max (max u1 u3) u2, max (max u1 u3) u2} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u3) u1} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (SubNegMonoid.toAddMonoid.{max (max u2 u3) u1} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (AddGroup.toSubNegMonoid.{max (max u2 u3) u1} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (AddCommGroup.toAddGroup.{max (max u2 u3) u1} (MultilinearMap.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_11) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u5, u2, u3, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N'₂ _inst_1 (fun (i : ι) => _inst_2) _inst_10 (fun (i : ι) => _inst_3) _inst_11))))) (AddMonoid.toAddZeroClass.{max (max u2 u3) u1} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (SubNegMonoid.toAddMonoid.{max (max u2 u3) u1} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddGroup.toSubNegMonoid.{max (max u2 u3) u1} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddCommGroup.toAddGroup.{max (max u2 u3) u1} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AlternatingMap.addCommGroup.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ _inst_10 _inst_11 ι)))))))) (MultilinearMap.alternatization.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ _inst_10 _inst_11 ι _inst_13 (fun (a : ι) (b : ι) => _inst_12 a b)) (LinearMap.compMultilinearMap.{u5, u2, u4, u3, u1} R ι (fun (_x : ι) => M) N' N'₂ _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) (fun (i : ι) => _inst_3) _inst_9 _inst_11 g f)) (FunLike.coe.{max (max (max (succ u4) (succ u3)) (succ u1)) (succ u2), max (max (succ u4) (succ u1)) (succ u2), max (max (succ u3) (succ u1)) (succ u2)} (AddMonoidHom.{max (max u1 u4) u2, max (max u1 u3) u2} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι)))) (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (fun (_x : AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) => AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) _x) (AddHomClass.toFunLike.{max (max (max u4 u3) u1) u2, max (max u4 u1) u2, max (max u3 u1) u2} (AddMonoidHom.{max (max u1 u4) u2, max (max u1 u3) u2} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι)))) (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddZeroClass.toAdd.{max (max u4 u1) u2} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι)))) (AddZeroClass.toAdd.{max (max u3 u1) u2} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι)))) (AddMonoidHomClass.toAddHomClass.{max (max (max u4 u3) u1) u2, max (max u4 u1) u2, max (max u3 u1) u2} (AddMonoidHom.{max (max u1 u4) u2, max (max u1 u3) u2} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι)))) (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι))) (AddMonoidHom.addMonoidHomClass.{max (max u4 u1) u2, max (max u3 u1) u2} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommMonoid.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι))) (AddMonoid.toAddZeroClass.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AddCommMonoid.toAddMonoid.{max (max u2 u1) u3} (AlternatingMap.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι) (AlternatingMap.addCommMonoid.{u5, u2, u3, u1} R _inst_1 M _inst_2 _inst_3 N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 ι)))))) (LinearMap.compAlternatingMap.{u5, u2, u4, u1, u3} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι N'₂ (AddCommGroup.toAddCommMonoid.{u3} N'₂ _inst_10) _inst_11 g) (FunLike.coe.{max (max (succ u1) (succ u4)) (succ u2), max (max (succ u1) (succ u4)) (succ u2), max (max (succ u1) (succ u4)) (succ u2)} (AddMonoidHom.{max (max u1 u4) u2, max (max u1 u4) u2} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u2 u4) u1} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u2 u4) u1} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u2 u4) u1} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (fun (_x : MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) => AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) _x) (AddHomClass.toFunLike.{max (max u1 u4) u2, max (max u1 u4) u2, max (max u1 u4) u2} (AddMonoidHom.{max (max u1 u4) u2, max (max u1 u4) u2} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u2 u4) u1} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u2 u4) u1} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u2 u4) u1} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AddZeroClass.toAdd.{max (max u1 u4) u2} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u2 u4) u1} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u2 u4) u1} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u2 u4) u1} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9)))))) (AddZeroClass.toAdd.{max (max u1 u4) u2} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (AddMonoidHomClass.toAddHomClass.{max (max u1 u4) u2, max (max u1 u4) u2, max (max u1 u4) u2} (AddMonoidHom.{max (max u1 u4) u2, max (max u1 u4) u2} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u2 u4) u1} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u2 u4) u1} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u2 u4) u1} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))) (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u2 u4) u1} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u2 u4) u1} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u2 u4) u1} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι))))) (AddMonoidHom.addMonoidHomClass.{max (max u1 u4) u2, max (max u1 u4) u2} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (SubNegMonoid.toAddMonoid.{max (max u2 u4) u1} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddGroup.toSubNegMonoid.{max (max u2 u4) u1} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (AddCommGroup.toAddGroup.{max (max u2 u4) u1} (MultilinearMap.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) (fun (i : ι) => _inst_3) _inst_9) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u5, u2, u4, u1} R ι (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ι) => M) N' _inst_1 (fun (i : ι) => _inst_2) _inst_8 (fun (i : ι) => _inst_3) _inst_9))))) (AddMonoid.toAddZeroClass.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (SubNegMonoid.toAddMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AddGroup.toSubNegMonoid.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AddCommGroup.toAddGroup.{max (max u2 u4) u1} (AlternatingMap.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' (AddCommGroup.toAddCommMonoid.{u4} N' _inst_8) _inst_9 ι) (AlternatingMap.addCommGroup.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι)))))))) (MultilinearMap.alternatization.{u5, u2, u4, u1} R _inst_1 M _inst_2 _inst_3 N' _inst_8 _inst_9 ι _inst_13 (fun (a : ι) (b : ι) => _inst_12 a b)) f))
Case conversion may be inaccurate. Consider using '#align linear_map.comp_multilinear_map_alternatization LinearMap.compMultilinearMap_alternatizationₓ'. -/
/-- Composition with a linear map before and after alternatization are equivalent. -/
theorem compMultilinearMap_alternatization (g : N' →ₗ[R] N'₂)
    (f : MultilinearMap R (fun _ : ι => M) N') :
    (g.compMultilinearMap f).alternatization = g.compAlternatingMap f.alternatization :=
  by
  ext
  simp [MultilinearMap.alternatization_def]
#align linear_map.comp_multilinear_map_alternatization LinearMap.compMultilinearMap_alternatization

end LinearMap

section Coprod

open BigOperators

open TensorProduct

variable {ιa ιb : Type _} [Fintype ιa] [Fintype ιb]

variable {R' : Type _} {Mᵢ N₁ N₂ : Type _} [CommSemiring R'] [AddCommGroup N₁] [Module R' N₁]
  [AddCommGroup N₂] [Module R' N₂] [AddCommMonoid Mᵢ] [Module R' Mᵢ]

namespace Equiv.Perm

#print Equiv.Perm.ModSumCongr /-
/-- Elements which are considered equivalent if they differ only by swaps within α or β  -/
abbrev ModSumCongr (α β : Type _) :=
  _ ⧸ (Equiv.Perm.sumCongrHom α β).range
#align equiv.perm.mod_sum_congr Equiv.Perm.ModSumCongr
-/

/- warning: equiv.perm.mod_sum_congr.swap_smul_involutive -> Equiv.Perm.ModSumCongr.swap_smul_involutive is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} [_inst_19 : DecidableEq.{max (succ u1) (succ u2)} (Sum.{u1, u2} α β)] (i : Sum.{u1, u2} α β) (j : Sum.{u1, u2} α β), Function.Involutive.{succ (max u1 u2)} (Equiv.Perm.ModSumCongr.{u1, u2} α β) (SMul.smul.{max u1 u2, max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} α β)) (Equiv.Perm.ModSumCongr.{u1, u2} α β) (MulAction.toHasSmul.{max u1 u2, max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} α β)) (Equiv.Perm.ModSumCongr.{u1, u2} α β) (DivInvMonoid.toMonoid.{max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} α β)) (Group.toDivInvMonoid.{max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} α β)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} α β)))) (MulAction.quotient.{max u1 u2, max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} α β)) (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} α β)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} α β)) (DivInvMonoid.toMonoid.{max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} α β)) (Group.toDivInvMonoid.{max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} α β)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} α β)))) (Monoid.toMulAction.{max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} α β)) (DivInvMonoid.toMonoid.{max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} α β)) (Group.toDivInvMonoid.{max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} α β)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} α β))))) (MonoidHom.range.{max u1 u2, max u1 u2} (Prod.{u1, u2} (Equiv.Perm.{succ u1} α) (Equiv.Perm.{succ u2} β)) (Prod.group.{u1, u2} (Equiv.Perm.{succ u1} α) (Equiv.Perm.{succ u2} β) (Equiv.Perm.permGroup.{u1} α) (Equiv.Perm.permGroup.{u2} β)) (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} α β)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} α β)) (Equiv.Perm.sumCongrHom.{u1, u2} α β)) (MulAction.left_quotientAction.{max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} α β)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} α β)) (MonoidHom.range.{max u1 u2, max u1 u2} (Prod.{u1, u2} (Equiv.Perm.{succ u1} α) (Equiv.Perm.{succ u2} β)) (Prod.group.{u1, u2} (Equiv.Perm.{succ u1} α) (Equiv.Perm.{succ u2} β) (Equiv.Perm.permGroup.{u1} α) (Equiv.Perm.permGroup.{u2} β)) (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} α β)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} α β)) (Equiv.Perm.sumCongrHom.{u1, u2} α β))))) (Equiv.swap.{max (succ u1) (succ u2)} (Sum.{u1, u2} α β) (fun (a : Sum.{u1, u2} α β) (b : Sum.{u1, u2} α β) => _inst_19 a b) i j))
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} [_inst_19 : DecidableEq.{max (succ u1) (succ u2)} (Sum.{u2, u1} α β)] (i : Sum.{u2, u1} α β) (j : Sum.{u2, u1} α β), Function.Involutive.{max (succ u2) (succ u1)} (Equiv.Perm.ModSumCongr.{u2, u1} α β) (SMul.smul.{max u2 u1, max u2 u1} (Equiv.Perm.{max (succ u2) (succ u1)} (Sum.{u2, u1} α β)) (Equiv.Perm.ModSumCongr.{u2, u1} α β) (MulAction.toSMul.{max u2 u1, max u2 u1} (Equiv.Perm.{max (succ u2) (succ u1)} (Sum.{u2, u1} α β)) (Equiv.Perm.ModSumCongr.{u2, u1} α β) (DivInvMonoid.toMonoid.{max u2 u1} (Equiv.Perm.{max (succ u2) (succ u1)} (Sum.{u2, u1} α β)) (Group.toDivInvMonoid.{max u2 u1} (Equiv.Perm.{max (succ u2) (succ u1)} (Sum.{u2, u1} α β)) (Equiv.Perm.permGroup.{max u2 u1} (Sum.{u2, u1} α β)))) (MulAction.quotient.{max u2 u1, max u2 u1} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u2, u1} α β)) (Equiv.Perm.{max (succ u2) (succ u1)} (Sum.{u2, u1} α β)) (Equiv.Perm.permGroup.{max u2 u1} (Sum.{u2, u1} α β)) (DivInvMonoid.toMonoid.{max u2 u1} (Equiv.Perm.{max (succ u2) (succ u1)} (Sum.{u2, u1} α β)) (Group.toDivInvMonoid.{max u2 u1} (Equiv.Perm.{max (succ u2) (succ u1)} (Sum.{u2, u1} α β)) (Equiv.Perm.permGroup.{max u2 u1} (Sum.{u2, u1} α β)))) (Monoid.toMulAction.{max u2 u1} (Equiv.Perm.{max (succ u2) (succ u1)} (Sum.{u2, u1} α β)) (DivInvMonoid.toMonoid.{max u2 u1} (Equiv.Perm.{max (succ u2) (succ u1)} (Sum.{u2, u1} α β)) (Group.toDivInvMonoid.{max u2 u1} (Equiv.Perm.{max (succ u2) (succ u1)} (Sum.{u2, u1} α β)) (Equiv.Perm.permGroup.{max u2 u1} (Sum.{u2, u1} α β))))) (MonoidHom.range.{max u2 u1, max u2 u1} (Prod.{u2, u1} (Equiv.Perm.{succ u2} α) (Equiv.Perm.{succ u1} β)) (Prod.instGroupProd.{u2, u1} (Equiv.Perm.{succ u2} α) (Equiv.Perm.{succ u1} β) (Equiv.Perm.permGroup.{u2} α) (Equiv.Perm.permGroup.{u1} β)) (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u2, u1} α β)) (Equiv.Perm.permGroup.{max u2 u1} (Sum.{u2, u1} α β)) (Equiv.Perm.sumCongrHom.{u2, u1} α β)) (MulAction.left_quotientAction.{max u2 u1} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u2, u1} α β)) (Equiv.Perm.permGroup.{max u2 u1} (Sum.{u2, u1} α β)) (MonoidHom.range.{max u2 u1, max u2 u1} (Prod.{u2, u1} (Equiv.Perm.{succ u2} α) (Equiv.Perm.{succ u1} β)) (Prod.instGroupProd.{u2, u1} (Equiv.Perm.{succ u2} α) (Equiv.Perm.{succ u1} β) (Equiv.Perm.permGroup.{u2} α) (Equiv.Perm.permGroup.{u1} β)) (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u2, u1} α β)) (Equiv.Perm.permGroup.{max u2 u1} (Sum.{u2, u1} α β)) (Equiv.Perm.sumCongrHom.{u2, u1} α β))))) (Equiv.swap.{max (succ u2) (succ u1)} (Sum.{u2, u1} α β) (fun (a : Sum.{u2, u1} α β) (b : Sum.{u2, u1} α β) => _inst_19 a b) i j))
Case conversion may be inaccurate. Consider using '#align equiv.perm.mod_sum_congr.swap_smul_involutive Equiv.Perm.ModSumCongr.swap_smul_involutiveₓ'. -/
theorem ModSumCongr.swap_smul_involutive {α β : Type _} [DecidableEq (Sum α β)] (i j : Sum α β) :
    Function.Involutive (SMul.smul (Equiv.swap i j) : ModSumCongr α β → ModSumCongr α β) := fun σ =>
  by
  apply σ.induction_on' fun σ => _
  exact _root_.congr_arg Quotient.mk'' (Equiv.swap_mul_involutive i j σ)
#align equiv.perm.mod_sum_congr.swap_smul_involutive Equiv.Perm.ModSumCongr.swap_smul_involutive

end Equiv.Perm

namespace AlternatingMap

open Equiv

variable [DecidableEq ιa] [DecidableEq ιb]

/- warning: alternating_map.dom_coprod.summand -> AlternatingMap.domCoprod.summand is a dubious translation:
lean 3 declaration is
  forall {ιa : Type.{u1}} {ιb : Type.{u2}} [_inst_10 : Fintype.{u1} ιa] [_inst_11 : Fintype.{u2} ιb] {R' : Type.{u3}} {Mᵢ : Type.{u4}} {N₁ : Type.{u5}} {N₂ : Type.{u6}} [_inst_12 : CommSemiring.{u3} R'] [_inst_13 : AddCommGroup.{u5} N₁] [_inst_14 : Module.{u3, u5} R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13)] [_inst_15 : AddCommGroup.{u6} N₂] [_inst_16 : Module.{u3, u6} R' N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15)] [_inst_17 : AddCommMonoid.{u4} Mᵢ] [_inst_18 : Module.{u3, u4} R' Mᵢ (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_17] [_inst_19 : DecidableEq.{succ u1} ιa] [_inst_20 : DecidableEq.{succ u2} ιb], (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) -> (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) -> (Equiv.Perm.ModSumCongr.{u1, u2} ιa ιb) -> (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16))
but is expected to have type
  forall {ιa : Type.{u1}} {ιb : Type.{u2}} [_inst_10 : Fintype.{u1} ιa] [_inst_11 : Fintype.{u2} ιb] {R' : Type.{u3}} {Mᵢ : Type.{u4}} {N₁ : Type.{u5}} {N₂ : Type.{u6}} [_inst_12 : CommSemiring.{u3} R'] [_inst_13 : AddCommGroup.{u5} N₁] [_inst_14 : Module.{u3, u5} R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13)] [_inst_15 : AddCommGroup.{u6} N₂] [_inst_16 : Module.{u3, u6} R' N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15)] [_inst_17 : AddCommMonoid.{u4} Mᵢ] [_inst_18 : Module.{u3, u4} R' Mᵢ (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_17] [_inst_19 : DecidableEq.{succ u1} ιa] [_inst_20 : DecidableEq.{succ u2} ιb], (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) -> (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) -> (Equiv.Perm.ModSumCongr.{u1, u2} ιa ιb) -> (MultilinearMap.{u3, u4, max u6 u5, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16))
Case conversion may be inaccurate. Consider using '#align alternating_map.dom_coprod.summand AlternatingMap.domCoprod.summandₓ'. -/
/-- summand used in `alternating_map.dom_coprod` -/
def domCoprod.summand (a : AlternatingMap R' Mᵢ N₁ ιa) (b : AlternatingMap R' Mᵢ N₂ ιb)
    (σ : Perm.ModSumCongr ιa ιb) : MultilinearMap R' (fun _ : Sum ιa ιb => Mᵢ) (N₁ ⊗[R'] N₂) :=
  Quotient.liftOn' σ
    (fun σ =>
      σ.sign •
        (MultilinearMap.domCoprod ↑a ↑b : MultilinearMap R' (fun _ => Mᵢ) (N₁ ⊗ N₂)).domDomCongr σ)
    fun σ₁ σ₂ H => by
    rw [QuotientGroup.leftRel_apply] at H
    obtain ⟨⟨sl, sr⟩, h⟩ := H
    ext v
    simp only [MultilinearMap.domDomCongr_apply, MultilinearMap.domCoprod_apply,
      coe_multilinear_map, MultilinearMap.smul_apply]
    replace h := inv_mul_eq_iff_eq_mul.mp h.symm
    have : (σ₁ * perm.sum_congr_hom _ _ (sl, sr)).sign = σ₁.sign * (sl.sign * sr.sign) := by simp
    rw [h, this, mul_smul, mul_smul, smul_left_cancel_iff, ← TensorProduct.tmul_smul,
      TensorProduct.smul_tmul']
    simp only [Sum.map_inr, perm.sum_congr_hom_apply, perm.sum_congr_apply, Sum.map_inl,
      Function.comp_apply, perm.coe_mul]
    rw [← a.map_congr_perm fun i => v (σ₁ _), ← b.map_congr_perm fun i => v (σ₁ _)]
#align alternating_map.dom_coprod.summand AlternatingMap.domCoprod.summand

/- warning: alternating_map.dom_coprod.summand_mk' -> AlternatingMap.domCoprod.summand_mk'' is a dubious translation:
lean 3 declaration is
  forall {ιa : Type.{u1}} {ιb : Type.{u2}} [_inst_10 : Fintype.{u1} ιa] [_inst_11 : Fintype.{u2} ιb] {R' : Type.{u3}} {Mᵢ : Type.{u4}} {N₁ : Type.{u5}} {N₂ : Type.{u6}} [_inst_12 : CommSemiring.{u3} R'] [_inst_13 : AddCommGroup.{u5} N₁] [_inst_14 : Module.{u3, u5} R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13)] [_inst_15 : AddCommGroup.{u6} N₂] [_inst_16 : Module.{u3, u6} R' N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15)] [_inst_17 : AddCommMonoid.{u4} Mᵢ] [_inst_18 : Module.{u3, u4} R' Mᵢ (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_17] [_inst_19 : DecidableEq.{succ u1} ιa] [_inst_20 : DecidableEq.{succ u2} ιb] (a : AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (b : AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (σ : Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)), Eq.{max (succ (max u1 u2)) (succ u4) (succ (max u5 u6))} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (AlternatingMap.domCoprod.summand.{u1, u2, u3, u4, u5, u6} ιa ιb _inst_10 _inst_11 R' Mᵢ N₁ N₂ _inst_12 _inst_13 _inst_14 _inst_15 _inst_16 _inst_17 _inst_18 (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) a b (Quotient.mk''.{succ (max u1 u2)} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (QuotientGroup.leftRel.{max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} ιa ιb)) (MonoidHom.range.{max u1 u2, max u1 u2} (Prod.{u1, u2} (Equiv.Perm.{succ u1} ιa) (Equiv.Perm.{succ u2} ιb)) (Prod.group.{u1, u2} (Equiv.Perm.{succ u1} ιa) (Equiv.Perm.{succ u2} ιb) (Equiv.Perm.permGroup.{u1} ιa) (Equiv.Perm.permGroup.{u2} ιb)) (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.sumCongrHom.{u1, u2} ιa ιb))) σ)) (SMul.smul.{0, max (max u1 u2) u4 u5 u6} (Units.{0} Int Int.monoid) (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.hasSmul.{u4, max u5 u6, max u1 u2, 0, u3} (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Units.{0} Int Int.monoid) R' (DivInvMonoid.toMonoid.{0} (Units.{0} Int Int.monoid) (Group.toDivInvMonoid.{0} (Units.{0} Int Int.monoid) (Units.group.{0} Int Int.monoid))) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.leftDistribMulAction.{u3, 0, u5, u6} R' _inst_12 (Units.{0} Int Int.monoid) (DivInvMonoid.toMonoid.{0} (Units.{0} Int Int.monoid) (Group.toDivInvMonoid.{0} (Units.{0} Int Int.monoid) (Units.group.{0} Int Int.monoid))) N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16 (Units.distribMulAction.{0, u5} Int N₁ Int.monoid (AddCommMonoid.toAddMonoid.{u5} N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13)) (Module.toDistribMulAction.{0, u5} Int N₁ Int.semiring (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.intModule.{u5} N₁ _inst_13))) (Units.smulCommClass_right.{u3, 0, u5} R' Int N₁ Int.monoid (SMulZeroClass.toHasSmul.{u3, u5} R' N₁ (AddZeroClass.toHasZero.{u5} N₁ (AddMonoid.toAddZeroClass.{u5} N₁ (AddCommMonoid.toAddMonoid.{u5} N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13)))) (SMulWithZero.toSmulZeroClass.{u3, u5} R' N₁ (MulZeroClass.toHasZero.{u3} R' (MulZeroOneClass.toMulZeroClass.{u3} R' (MonoidWithZero.toMulZeroOneClass.{u3} R' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12))))) (AddZeroClass.toHasZero.{u5} N₁ (AddMonoid.toAddZeroClass.{u5} N₁ (AddCommMonoid.toAddMonoid.{u5} N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13)))) (MulActionWithZero.toSMulWithZero.{u3, u5} R' N₁ (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12)) (AddZeroClass.toHasZero.{u5} N₁ (AddMonoid.toAddZeroClass.{u5} N₁ (AddCommMonoid.toAddMonoid.{u5} N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13)))) (Module.toMulActionWithZero.{u3, u5} R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14)))) (SubNegMonoid.SMulInt.{u5} N₁ (AddGroup.toSubNegMonoid.{u5} N₁ (AddCommGroup.toAddGroup.{u5} N₁ _inst_13))) (AddGroup.int_smulCommClass'.{u3, u5} R' N₁ (MonoidWithZero.toMonoid.{u3} R' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12))) (AddCommGroup.toAddGroup.{u5} N₁ _inst_13) (Module.toDistribMulAction.{u3, u5} R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14)))) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Units.smulCommClass_right.{u3, 0, max u5 u6} R' Int (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) Int.monoid (SMulZeroClass.toHasSmul.{u3, max u5 u6} R' (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddZeroClass.toHasZero.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddMonoid.toAddZeroClass.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommMonoid.toAddMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)))) (SMulWithZero.toSmulZeroClass.{u3, max u5 u6} R' (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (MulZeroClass.toHasZero.{u3} R' (MulZeroOneClass.toMulZeroClass.{u3} R' (MonoidWithZero.toMulZeroOneClass.{u3} R' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12))))) (AddZeroClass.toHasZero.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddMonoid.toAddZeroClass.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommMonoid.toAddMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)))) (MulActionWithZero.toSMulWithZero.{u3, max u5 u6} R' (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12)) (AddZeroClass.toHasZero.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddMonoid.toAddZeroClass.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommMonoid.toAddMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)))) (Module.toMulActionWithZero.{u3, max u5 u6} R' (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16))))) (TensorProduct.leftHasSMul.{u3, 0, u5, u6} R' _inst_12 Int Int.monoid N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16 (Module.toDistribMulAction.{0, u5} Int N₁ Int.semiring (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.intModule.{u5} N₁ _inst_13)) (AddGroup.int_smulCommClass'.{u3, u5} R' N₁ (MonoidWithZero.toMonoid.{u3} R' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12))) (AddCommGroup.toAddGroup.{u5} N₁ _inst_13) (Module.toDistribMulAction.{u3, u5} R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14))) (AddGroup.int_smulCommClass'.{u3, max u5 u6} R' (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (MonoidWithZero.toMonoid.{u3} R' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12))) (AddCommGroup.toAddGroup.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.distribMulAction.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)))) (coeFn.{succ (max u1 u2), succ (max u1 u2)} (MonoidHom.{max u1 u2, 0} (Equiv.Perm.{succ (max u1 u2)} (Sum.{u1, u2} ιa ιb)) (Units.{0} Int Int.monoid) (Monoid.toMulOneClass.{max u1 u2} (Equiv.Perm.{succ (max u1 u2)} (Sum.{u1, u2} ιa ιb)) (DivInvMonoid.toMonoid.{max u1 u2} (Equiv.Perm.{succ (max u1 u2)} (Sum.{u1, u2} ιa ιb)) (Group.toDivInvMonoid.{max u1 u2} (Equiv.Perm.{succ (max u1 u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} ιa ιb))))) (Units.mulOneClass.{0} Int Int.monoid)) (fun (_x : MonoidHom.{max u1 u2, 0} (Equiv.Perm.{succ (max u1 u2)} (Sum.{u1, u2} ιa ιb)) (Units.{0} Int Int.monoid) (Monoid.toMulOneClass.{max u1 u2} (Equiv.Perm.{succ (max u1 u2)} (Sum.{u1, u2} ιa ιb)) (DivInvMonoid.toMonoid.{max u1 u2} (Equiv.Perm.{succ (max u1 u2)} (Sum.{u1, u2} ιa ιb)) (Group.toDivInvMonoid.{max u1 u2} (Equiv.Perm.{succ (max u1 u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} ιa ιb))))) (Units.mulOneClass.{0} Int Int.monoid)) => (Equiv.Perm.{succ (max u1 u2)} (Sum.{u1, u2} ιa ιb)) -> (Units.{0} Int Int.monoid)) (MonoidHom.hasCoeToFun.{max u1 u2, 0} (Equiv.Perm.{succ (max u1 u2)} (Sum.{u1, u2} ιa ιb)) (Units.{0} Int Int.monoid) (Monoid.toMulOneClass.{max u1 u2} (Equiv.Perm.{succ (max u1 u2)} (Sum.{u1, u2} ιa ιb)) (DivInvMonoid.toMonoid.{max u1 u2} (Equiv.Perm.{succ (max u1 u2)} (Sum.{u1, u2} ιa ιb)) (Group.toDivInvMonoid.{max u1 u2} (Equiv.Perm.{succ (max u1 u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} ιa ιb))))) (Units.mulOneClass.{0} Int Int.monoid)) (Equiv.Perm.sign.{max u1 u2} (Sum.{u1, u2} ιa ιb) (fun (a : Sum.{u1, u2} ιa ιb) (b : Sum.{u1, u2} ιa ιb) => Sum.decidableEq.{u1, u2} ιa (fun (a : ιa) (b : ιa) => _inst_19 a b) ιb (fun (a : ιb) (b : ιb) => _inst_20 a b) a b) (Sum.fintype.{u1, u2} ιa ιb _inst_10 _inst_11)) σ) (MultilinearMap.domDomCongr.{u3, u4, max u5 u6, max u1 u2, max u1 u2} R' Mᵢ (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_17 (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) _inst_18 (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb) (Sum.{u1, u2} ιa ιb) σ (MultilinearMap.domCoprod.{u3, u1, u2, u5, u6, u4} R' ιa ιb _inst_12 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 Mᵢ _inst_17 _inst_18 ((fun (a : Sort.{max (succ u4) (succ u5) (succ u1)}) (b : Sort.{max (succ u1) (succ u4) (succ u5)}) [self : HasLiftT.{max (succ u4) (succ u5) (succ u1), max (succ u1) (succ u4) (succ u5)} a b] => self.0) (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (_x : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (HasLiftT.mk.{max (succ u4) (succ u5) (succ u1), max (succ u1) (succ u4) (succ u5)} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (_x : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (CoeTCₓ.coe.{max (succ u4) (succ u5) (succ u1), max (succ u1) (succ u4) (succ u5)} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (_x : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (coeBase.{max (succ u4) (succ u5) (succ u1), max (succ u1) (succ u4) (succ u5)} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (_x : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AlternatingMap.coe.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa)))) a) ((fun (a : Sort.{max (succ u4) (succ u6) (succ u2)}) (b : Sort.{max (succ u2) (succ u4) (succ u6)}) [self : HasLiftT.{max (succ u4) (succ u6) (succ u2), max (succ u2) (succ u4) (succ u6)} a b] => self.0) (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (_x : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (HasLiftT.mk.{max (succ u4) (succ u6) (succ u2), max (succ u2) (succ u4) (succ u6)} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (_x : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (CoeTCₓ.coe.{max (succ u4) (succ u6) (succ u2), max (succ u2) (succ u4) (succ u6)} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (_x : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (coeBase.{max (succ u4) (succ u6) (succ u2), max (succ u2) (succ u4) (succ u6)} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (_x : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AlternatingMap.coe.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb)))) b))))
but is expected to have type
  forall {ιa : Type.{u3}} {ιb : Type.{u1}} [_inst_10 : Fintype.{u3} ιa] [_inst_11 : Fintype.{u1} ιb] {R' : Type.{u6}} {Mᵢ : Type.{u5}} {N₁ : Type.{u4}} {N₂ : Type.{u2}} [_inst_12 : CommSemiring.{u6} R'] [_inst_13 : AddCommGroup.{u4} N₁] [_inst_14 : Module.{u6, u4} R' N₁ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13)] [_inst_15 : AddCommGroup.{u2} N₂] [_inst_16 : Module.{u6, u2} R' N₂ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15)] [_inst_17 : AddCommMonoid.{u5} Mᵢ] [_inst_18 : Module.{u6, u5} R' Mᵢ (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_17] [_inst_19 : DecidableEq.{succ u3} ιa] [_inst_20 : DecidableEq.{succ u1} ιb] (a : AlternatingMap.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (b : AlternatingMap.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb) (σ : Equiv.Perm.{max (succ u1) (succ u3)} (Sum.{u3, u1} ιa ιb)), Eq.{max (max (max (max (succ u3) (succ u1)) (succ u5)) (succ u4)) (succ u2)} (MultilinearMap.{u6, u5, max u2 u4, max u3 u1} R' (Sum.{u3, u1} ιa ιb) (fun (_x : Sum.{u3, u1} ιa ιb) => Mᵢ) (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u6} R' _inst_12) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16)) (AlternatingMap.domCoprod.summand.{u3, u1, u6, u5, u4, u2} ιa ιb _inst_10 _inst_11 R' Mᵢ N₁ N₂ _inst_12 _inst_13 _inst_14 _inst_15 _inst_16 _inst_17 _inst_18 (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) a b (Quotient.mk''.{max (succ u3) (succ u1)} (Equiv.Perm.{max (succ u1) (succ u3)} (Sum.{u3, u1} ιa ιb)) (QuotientGroup.leftRel.{max u3 u1} (Equiv.Perm.{max (succ u1) (succ u3)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.permGroup.{max u3 u1} (Sum.{u3, u1} ιa ιb)) (MonoidHom.range.{max u3 u1, max u3 u1} (Prod.{u3, u1} (Equiv.Perm.{succ u3} ιa) (Equiv.Perm.{succ u1} ιb)) (Prod.instGroupProd.{u3, u1} (Equiv.Perm.{succ u3} ιa) (Equiv.Perm.{succ u1} ιb) (Equiv.Perm.permGroup.{u3} ιa) (Equiv.Perm.permGroup.{u1} ιb)) (Equiv.Perm.{max (succ u1) (succ u3)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.permGroup.{max u3 u1} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.sumCongrHom.{u3, u1} ιa ιb))) σ)) (HSMul.hSMul.{0, max (max (max u3 u1) u4 u2) u5, max (max (max (max u3 u1) u5) u4) u2} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) => Units.{0} Int Int.instMonoidInt) σ) (MultilinearMap.{u6, u5, max u4 u2, max u3 u1} R' (Sum.{u3, u1} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.13418 : Sum.{u3, u1} ιa ιb) => Mᵢ) (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u6} R' _inst_12) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.{u6, u5, max u4 u2, max u3 u1} R' (Sum.{u3, u1} ιa ιb) (fun (_x : Sum.{u3, u1} ιa ιb) => Mᵢ) (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u6} R' _inst_12) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16)) (instHSMul.{0, max (max (max (max u3 u1) u5) u4) u2} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) => Units.{0} Int Int.instMonoidInt) σ) (MultilinearMap.{u6, u5, max u4 u2, max u3 u1} R' (Sum.{u3, u1} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.13418 : Sum.{u3, u1} ιa ιb) => Mᵢ) (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u6} R' _inst_12) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16)) (Units.instSMulUnits.{0, max (max (max (max u3 u1) u5) u4) u2} Int (MultilinearMap.{u6, u5, max u4 u2, max u3 u1} R' (Sum.{u3, u1} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.13418 : Sum.{u3, u1} ιa ιb) => Mᵢ) (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u6} R' _inst_12) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16)) Int.instMonoidInt (SubNegMonoid.SMulInt.{max (max (max (max u3 u1) u5) u4) u2} (MultilinearMap.{u6, u5, max u4 u2, max u3 u1} R' (Sum.{u3, u1} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.13418 : Sum.{u3, u1} ιa ιb) => Mᵢ) (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u6} R' _inst_12) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16)) (AddGroup.toSubNegMonoid.{max (max (max (max u3 u1) u5) u4) u2} (MultilinearMap.{u6, u5, max u4 u2, max u3 u1} R' (Sum.{u3, u1} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.13418 : Sum.{u3, u1} ιa ιb) => Mᵢ) (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u6} R' _inst_12) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16)) (AddCommGroup.toAddGroup.{max (max (max (max u3 u1) u5) u4) u2} (MultilinearMap.{u6, u5, max u4 u2, max u3 u1} R' (Sum.{u3, u1} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.13418 : Sum.{u3, u1} ιa ιb) => Mᵢ) (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u6} R' _inst_12) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u6, u5, max u4 u2, max u3 u1} R' (Sum.{u3, u1} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.13418 : Sum.{u3, u1} ιa ιb) => Mᵢ) (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u6} R' _inst_12) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_17) (TensorProduct.addCommGroup.{u6, u4, u2} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16))))))) (FunLike.coe.{succ (max u3 u1), succ (max u3 u1), 1} (MonoidHom.{max u3 u1, 0} (Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{max u3 u1} (Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) (DivInvMonoid.toMonoid.{max u3 u1} (Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) (Group.toDivInvMonoid.{max u3 u1} (Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.permGroup.{max u3 u1} (Sum.{u3, u1} ιa ιb))))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) (fun (_x : Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) => Units.{0} Int Int.instMonoidInt) _x) (MulHomClass.toFunLike.{max u3 u1, max u3 u1, 0} (MonoidHom.{max u3 u1, 0} (Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{max u3 u1} (Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) (DivInvMonoid.toMonoid.{max u3 u1} (Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) (Group.toDivInvMonoid.{max u3 u1} (Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.permGroup.{max u3 u1} (Sum.{u3, u1} ιa ιb))))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) (Units.{0} Int Int.instMonoidInt) (MulOneClass.toMul.{max u3 u1} (Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) (Monoid.toMulOneClass.{max u3 u1} (Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) (DivInvMonoid.toMonoid.{max u3 u1} (Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) (Group.toDivInvMonoid.{max u3 u1} (Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.permGroup.{max u3 u1} (Sum.{u3, u1} ιa ιb)))))) (MulOneClass.toMul.{0} (Units.{0} Int Int.instMonoidInt) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (MonoidHomClass.toMulHomClass.{max u3 u1, max u3 u1, 0} (MonoidHom.{max u3 u1, 0} (Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{max u3 u1} (Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) (DivInvMonoid.toMonoid.{max u3 u1} (Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) (Group.toDivInvMonoid.{max u3 u1} (Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.permGroup.{max u3 u1} (Sum.{u3, u1} ιa ιb))))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{max u3 u1} (Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) (DivInvMonoid.toMonoid.{max u3 u1} (Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) (Group.toDivInvMonoid.{max u3 u1} (Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.permGroup.{max u3 u1} (Sum.{u3, u1} ιa ιb))))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt) (MonoidHom.monoidHomClass.{max u3 u1, 0} (Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{max u3 u1} (Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) (DivInvMonoid.toMonoid.{max u3 u1} (Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) (Group.toDivInvMonoid.{max u3 u1} (Equiv.Perm.{succ (max u3 u1)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.permGroup.{max u3 u1} (Sum.{u3, u1} ιa ιb))))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)))) (Equiv.Perm.sign.{max u3 u1} (Sum.{u3, u1} ιa ιb) (fun (a : Sum.{u3, u1} ιa ιb) (b : Sum.{u3, u1} ιa ιb) => Sum.instDecidableEqSum.{u3, u1} ιa ιb (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) a b) (instFintypeSum.{u3, u1} ιa ιb _inst_10 _inst_11)) σ) (MultilinearMap.domDomCongr.{u6, u5, max u4 u2, max u3 u1, max u3 u1} R' Mᵢ (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_17 (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) _inst_18 (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u3, u1} ιa ιb) (Sum.{u3, u1} ιa ιb) σ (MultilinearMap.domCoprod.{u6, u3, u1, u4, u2, u5} R' ιa ιb _inst_12 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 Mᵢ _inst_17 _inst_18 (AlternatingMap.toMultilinearMap.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa a) (AlternatingMap.toMultilinearMap.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb b))))
Case conversion may be inaccurate. Consider using '#align alternating_map.dom_coprod.summand_mk' AlternatingMap.domCoprod.summand_mk''ₓ'. -/
theorem domCoprod.summand_mk'' (a : AlternatingMap R' Mᵢ N₁ ιa) (b : AlternatingMap R' Mᵢ N₂ ιb)
    (σ : Equiv.Perm (Sum ιa ιb)) :
    domCoprod.summand a b (Quotient.mk'' σ) =
      σ.sign •
        (MultilinearMap.domCoprod ↑a ↑b : MultilinearMap R' (fun _ => Mᵢ) (N₁ ⊗ N₂)).domDomCongr
          σ :=
  rfl
#align alternating_map.dom_coprod.summand_mk' AlternatingMap.domCoprod.summand_mk''

/- warning: alternating_map.dom_coprod.summand_add_swap_smul_eq_zero -> AlternatingMap.domCoprod.summand_add_swap_smul_eq_zero is a dubious translation:
lean 3 declaration is
  forall {ιa : Type.{u1}} {ιb : Type.{u2}} [_inst_10 : Fintype.{u1} ιa] [_inst_11 : Fintype.{u2} ιb] {R' : Type.{u3}} {Mᵢ : Type.{u4}} {N₁ : Type.{u5}} {N₂ : Type.{u6}} [_inst_12 : CommSemiring.{u3} R'] [_inst_13 : AddCommGroup.{u5} N₁] [_inst_14 : Module.{u3, u5} R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13)] [_inst_15 : AddCommGroup.{u6} N₂] [_inst_16 : Module.{u3, u6} R' N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15)] [_inst_17 : AddCommMonoid.{u4} Mᵢ] [_inst_18 : Module.{u3, u4} R' Mᵢ (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_17] [_inst_19 : DecidableEq.{succ u1} ιa] [_inst_20 : DecidableEq.{succ u2} ιb] (a : AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (b : AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (σ : Equiv.Perm.ModSumCongr.{u1, u2} ιa ιb) {v : (Sum.{u1, u2} ιa ιb) -> Mᵢ} {i : Sum.{u1, u2} ιa ιb} {j : Sum.{u1, u2} ιa ιb}, (Eq.{succ u4} Mᵢ (v i) (v j)) -> (Ne.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb) i j) -> (Eq.{succ (max u5 u6)} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (HAdd.hAdd.{max u5 u6, max u5 u6, max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (instHAdd.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddZeroClass.toHasAdd.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addZeroClass.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16))) (coeFn.{max (succ (max u1 u2)) (succ u4) (succ (max u5 u6)), max (max (succ (max u1 u2)) (succ u4)) (succ (max u5 u6))} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (fun (f : MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) => ((Sum.{u1, u2} ιa ιb) -> Mᵢ) -> (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.hasCoeToFun.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (AlternatingMap.domCoprod.summand.{u1, u2, u3, u4, u5, u6} ιa ιb _inst_10 _inst_11 R' Mᵢ N₁ N₂ _inst_12 _inst_13 _inst_14 _inst_15 _inst_16 _inst_17 _inst_18 (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) a b σ) v) (coeFn.{max (succ (max u1 u2)) (succ u4) (succ (max u5 u6)), max (max (succ (max u1 u2)) (succ u4)) (succ (max u5 u6))} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (fun (f : MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) => ((Sum.{u1, u2} ιa ιb) -> Mᵢ) -> (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.hasCoeToFun.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (AlternatingMap.domCoprod.summand.{u1, u2, u3, u4, u5, u6} ιa ιb _inst_10 _inst_11 R' Mᵢ N₁ N₂ _inst_12 _inst_13 _inst_14 _inst_15 _inst_16 _inst_17 _inst_18 (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) a b (SMul.smul.{max u1 u2, max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.ModSumCongr.{u1, u2} ιa ιb) (MulAction.toHasSmul.{max u1 u2, max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.ModSumCongr.{u1, u2} ιa ιb) (DivInvMonoid.toMonoid.{max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Group.toDivInvMonoid.{max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} ιa ιb)))) (MulAction.quotient.{max u1 u2, max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} ιa ιb)) (DivInvMonoid.toMonoid.{max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Group.toDivInvMonoid.{max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} ιa ιb)))) (Monoid.toMulAction.{max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (DivInvMonoid.toMonoid.{max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Group.toDivInvMonoid.{max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} ιa ιb))))) (MonoidHom.range.{max u1 u2, max u1 u2} (Prod.{u1, u2} (Equiv.Perm.{succ u1} ιa) (Equiv.Perm.{succ u2} ιb)) (Prod.group.{u1, u2} (Equiv.Perm.{succ u1} ιa) (Equiv.Perm.{succ u2} ιb) (Equiv.Perm.permGroup.{u1} ιa) (Equiv.Perm.permGroup.{u2} ιb)) (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.sumCongrHom.{u1, u2} ιa ιb)) (MulAction.left_quotientAction.{max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} ιa ιb)) (MonoidHom.range.{max u1 u2, max u1 u2} (Prod.{u1, u2} (Equiv.Perm.{succ u1} ιa) (Equiv.Perm.{succ u2} ιb)) (Prod.group.{u1, u2} (Equiv.Perm.{succ u1} ιa) (Equiv.Perm.{succ u2} ιb) (Equiv.Perm.permGroup.{u1} ιa) (Equiv.Perm.permGroup.{u2} ιb)) (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.sumCongrHom.{u1, u2} ιa ιb))))) (Equiv.swap.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb) (fun (a : Sum.{u1, u2} ιa ιb) (b : Sum.{u1, u2} ιa ιb) => Sum.decidableEq.{u1, u2} ιa (fun (a : ιa) (b : ιa) => _inst_19 a b) ιb (fun (a : ιb) (b : ιb) => _inst_20 a b) a b) i j) σ)) v)) (OfNat.ofNat.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) 0 (OfNat.mk.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) 0 (Zero.zero.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddZeroClass.toHasZero.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addZeroClass.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16))))))
but is expected to have type
  forall {ιa : Type.{u3}} {ιb : Type.{u1}} [_inst_10 : Fintype.{u3} ιa] [_inst_11 : Fintype.{u1} ιb] {R' : Type.{u6}} {Mᵢ : Type.{u5}} {N₁ : Type.{u4}} {N₂ : Type.{u2}} [_inst_12 : CommSemiring.{u6} R'] [_inst_13 : AddCommGroup.{u4} N₁] [_inst_14 : Module.{u6, u4} R' N₁ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13)] [_inst_15 : AddCommGroup.{u2} N₂] [_inst_16 : Module.{u6, u2} R' N₂ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15)] [_inst_17 : AddCommMonoid.{u5} Mᵢ] [_inst_18 : Module.{u6, u5} R' Mᵢ (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_17] [_inst_19 : DecidableEq.{succ u3} ιa] [_inst_20 : DecidableEq.{succ u1} ιb] (a : AlternatingMap.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (b : AlternatingMap.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb) (σ : Equiv.Perm.ModSumCongr.{u3, u1} ιa ιb) {v : (Sum.{u3, u1} ιa ιb) -> Mᵢ} {i : Sum.{u3, u1} ιa ιb} {j : Sum.{u3, u1} ιa ιb}, (Eq.{succ u5} Mᵢ (v i) (v j)) -> (Ne.{max (succ u3) (succ u1)} (Sum.{u3, u1} ιa ιb) i j) -> (Eq.{max (succ u4) (succ u2)} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : (Sum.{u3, u1} ιa ιb) -> Mᵢ) => TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) v) (HAdd.hAdd.{max u4 u2, max u4 u2, max u4 u2} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : (Sum.{u3, u1} ιa ιb) -> Mᵢ) => TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) v) ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : (Sum.{u3, u1} ιa ιb) -> Mᵢ) => TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) v) ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : (Sum.{u3, u1} ιa ιb) -> Mᵢ) => TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) v) (instHAdd.{max u4 u2} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : (Sum.{u3, u1} ιa ιb) -> Mᵢ) => TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) v) (AddZeroClass.toAdd.{max u4 u2} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : (Sum.{u3, u1} ιa ιb) -> Mᵢ) => TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) v) (TensorProduct.addZeroClass.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16))) (FunLike.coe.{max (max (max (max (succ u3) (succ u1)) (succ u5)) (succ u4)) (succ u2), max (max (succ u3) (succ u1)) (succ u5), max (succ u4) (succ u2)} (MultilinearMap.{u6, u5, max u2 u4, max u3 u1} R' (Sum.{u3, u1} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.14167 : Sum.{u3, u1} ιa ιb) => Mᵢ) (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u6} R' _inst_12) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16)) ((Sum.{u3, u1} ιa ιb) -> Mᵢ) (fun (f : (Sum.{u3, u1} ιa ιb) -> Mᵢ) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : (Sum.{u3, u1} ιa ιb) -> Mᵢ) => TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u6, u5, max u4 u2, max u3 u1} R' (Sum.{u3, u1} ιa ιb) (fun (_x : Sum.{u3, u1} ιa ιb) => Mᵢ) (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u6} R' _inst_12) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16)) (AlternatingMap.domCoprod.summand.{u3, u1, u6, u5, u4, u2} ιa ιb _inst_10 _inst_11 R' Mᵢ N₁ N₂ _inst_12 _inst_13 _inst_14 _inst_15 _inst_16 _inst_17 _inst_18 (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) a b σ) v) (FunLike.coe.{max (max (max (max (succ u3) (succ u1)) (succ u5)) (succ u4)) (succ u2), max (max (succ u3) (succ u1)) (succ u5), max (succ u4) (succ u2)} (MultilinearMap.{u6, u5, max u2 u4, max u3 u1} R' (Sum.{u3, u1} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.14167 : Sum.{u3, u1} ιa ιb) => Mᵢ) (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u6} R' _inst_12) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16)) ((Sum.{u3, u1} ιa ιb) -> Mᵢ) (fun (f : (Sum.{u3, u1} ιa ιb) -> Mᵢ) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : (Sum.{u3, u1} ιa ιb) -> Mᵢ) => TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u6, u5, max u4 u2, max u3 u1} R' (Sum.{u3, u1} ιa ιb) (fun (_x : Sum.{u3, u1} ιa ιb) => Mᵢ) (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u6} R' _inst_12) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16)) (AlternatingMap.domCoprod.summand.{u3, u1, u6, u5, u4, u2} ιa ιb _inst_10 _inst_11 R' Mᵢ N₁ N₂ _inst_12 _inst_13 _inst_14 _inst_15 _inst_16 _inst_17 _inst_18 (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) a b (HSMul.hSMul.{max u3 u1, max u3 u1, max u3 u1} (Equiv.Perm.{max (succ u3) (succ u1)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.ModSumCongr.{u3, u1} ιa ιb) (Equiv.Perm.ModSumCongr.{u3, u1} ιa ιb) (instHSMul.{max u3 u1, max u3 u1} (Equiv.Perm.{max (succ u3) (succ u1)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.ModSumCongr.{u3, u1} ιa ιb) (MulAction.toSMul.{max u3 u1, max u3 u1} (Equiv.Perm.{max (succ u3) (succ u1)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.ModSumCongr.{u3, u1} ιa ιb) (DivInvMonoid.toMonoid.{max u3 u1} (Equiv.Perm.{max (succ u3) (succ u1)} (Sum.{u3, u1} ιa ιb)) (Group.toDivInvMonoid.{max u3 u1} (Equiv.Perm.{max (succ u3) (succ u1)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.permGroup.{max u3 u1} (Sum.{u3, u1} ιa ιb)))) (MulAction.quotient.{max u3 u1, max u3 u1} (Equiv.Perm.{max (succ u1) (succ u3)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.{max (succ u3) (succ u1)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.permGroup.{max u3 u1} (Sum.{u3, u1} ιa ιb)) (DivInvMonoid.toMonoid.{max u3 u1} (Equiv.Perm.{max (succ u3) (succ u1)} (Sum.{u3, u1} ιa ιb)) (Group.toDivInvMonoid.{max u3 u1} (Equiv.Perm.{max (succ u3) (succ u1)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.permGroup.{max u3 u1} (Sum.{u3, u1} ιa ιb)))) (Monoid.toMulAction.{max u3 u1} (Equiv.Perm.{max (succ u3) (succ u1)} (Sum.{u3, u1} ιa ιb)) (DivInvMonoid.toMonoid.{max u3 u1} (Equiv.Perm.{max (succ u3) (succ u1)} (Sum.{u3, u1} ιa ιb)) (Group.toDivInvMonoid.{max u3 u1} (Equiv.Perm.{max (succ u3) (succ u1)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.permGroup.{max u3 u1} (Sum.{u3, u1} ιa ιb))))) (MonoidHom.range.{max u3 u1, max u3 u1} (Prod.{u3, u1} (Equiv.Perm.{succ u3} ιa) (Equiv.Perm.{succ u1} ιb)) (Prod.instGroupProd.{u3, u1} (Equiv.Perm.{succ u3} ιa) (Equiv.Perm.{succ u1} ιb) (Equiv.Perm.permGroup.{u3} ιa) (Equiv.Perm.permGroup.{u1} ιb)) (Equiv.Perm.{max (succ u1) (succ u3)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.permGroup.{max u3 u1} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.sumCongrHom.{u3, u1} ιa ιb)) (MulAction.left_quotientAction.{max u3 u1} (Equiv.Perm.{max (succ u1) (succ u3)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.permGroup.{max u3 u1} (Sum.{u3, u1} ιa ιb)) (MonoidHom.range.{max u3 u1, max u3 u1} (Prod.{u3, u1} (Equiv.Perm.{succ u3} ιa) (Equiv.Perm.{succ u1} ιb)) (Prod.instGroupProd.{u3, u1} (Equiv.Perm.{succ u3} ιa) (Equiv.Perm.{succ u1} ιb) (Equiv.Perm.permGroup.{u3} ιa) (Equiv.Perm.permGroup.{u1} ιb)) (Equiv.Perm.{max (succ u1) (succ u3)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.permGroup.{max u3 u1} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.sumCongrHom.{u3, u1} ιa ιb)))))) (Equiv.swap.{max (succ u3) (succ u1)} (Sum.{u3, u1} ιa ιb) (fun (a : Sum.{u3, u1} ιa ιb) (b : Sum.{u3, u1} ιa ιb) => Sum.instDecidableEqSum.{u3, u1} ιa ιb (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) a b) i j) σ)) v)) (OfNat.ofNat.{max u4 u2} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : (Sum.{u3, u1} ιa ιb) -> Mᵢ) => TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) v) 0 (Zero.toOfNat0.{max u4 u2} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : (Sum.{u3, u1} ιa ιb) -> Mᵢ) => TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) v) (NegZeroClass.toZero.{max u4 u2} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : (Sum.{u3, u1} ιa ιb) -> Mᵢ) => TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) v) (SubNegZeroMonoid.toNegZeroClass.{max u4 u2} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : (Sum.{u3, u1} ιa ιb) -> Mᵢ) => TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) v) (SubtractionMonoid.toSubNegZeroMonoid.{max u4 u2} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : (Sum.{u3, u1} ιa ιb) -> Mᵢ) => TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) v) (SubtractionCommMonoid.toSubtractionMonoid.{max u4 u2} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : (Sum.{u3, u1} ιa ιb) -> Mᵢ) => TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) v) (AddCommGroup.toDivisionAddCommMonoid.{max u4 u2} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : (Sum.{u3, u1} ιa ιb) -> Mᵢ) => TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) v) (TensorProduct.addCommGroup.{u6, u4, u2} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)))))))))
Case conversion may be inaccurate. Consider using '#align alternating_map.dom_coprod.summand_add_swap_smul_eq_zero AlternatingMap.domCoprod.summand_add_swap_smul_eq_zeroₓ'. -/
/-- Swapping elements in `σ` with equal values in `v` results in an addition that cancels -/
theorem domCoprod.summand_add_swap_smul_eq_zero (a : AlternatingMap R' Mᵢ N₁ ιa)
    (b : AlternatingMap R' Mᵢ N₂ ιb) (σ : Perm.ModSumCongr ιa ιb) {v : Sum ιa ιb → Mᵢ}
    {i j : Sum ιa ιb} (hv : v i = v j) (hij : i ≠ j) :
    domCoprod.summand a b σ v + domCoprod.summand a b (swap i j • σ) v = 0 :=
  by
  apply σ.induction_on' fun σ => _
  dsimp only [Quotient.liftOn'_mk'', Quotient.map'_mk'', MulAction.Quotient.smul_mk,
    dom_coprod.summand]
  rw [smul_eq_mul, perm.sign_mul, perm.sign_swap hij]
  simp only [one_mul, neg_mul, Function.comp_apply, Units.neg_smul, perm.coe_mul, Units.val_neg,
    MultilinearMap.smul_apply, MultilinearMap.neg_apply, MultilinearMap.domDomCongr_apply,
    MultilinearMap.domCoprod_apply]
  convert add_right_neg _ <;>
    · ext k
      rw [Equiv.apply_swap_eq_self hv]
#align alternating_map.dom_coprod.summand_add_swap_smul_eq_zero AlternatingMap.domCoprod.summand_add_swap_smul_eq_zero

/- warning: alternating_map.dom_coprod.summand_eq_zero_of_smul_invariant -> AlternatingMap.domCoprod.summand_eq_zero_of_smul_invariant is a dubious translation:
lean 3 declaration is
  forall {ιa : Type.{u1}} {ιb : Type.{u2}} [_inst_10 : Fintype.{u1} ιa] [_inst_11 : Fintype.{u2} ιb] {R' : Type.{u3}} {Mᵢ : Type.{u4}} {N₁ : Type.{u5}} {N₂ : Type.{u6}} [_inst_12 : CommSemiring.{u3} R'] [_inst_13 : AddCommGroup.{u5} N₁] [_inst_14 : Module.{u3, u5} R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13)] [_inst_15 : AddCommGroup.{u6} N₂] [_inst_16 : Module.{u3, u6} R' N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15)] [_inst_17 : AddCommMonoid.{u4} Mᵢ] [_inst_18 : Module.{u3, u4} R' Mᵢ (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_17] [_inst_19 : DecidableEq.{succ u1} ιa] [_inst_20 : DecidableEq.{succ u2} ιb] (a : AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (b : AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (σ : Equiv.Perm.ModSumCongr.{u1, u2} ιa ιb) {v : (Sum.{u1, u2} ιa ιb) -> Mᵢ} {i : Sum.{u1, u2} ιa ιb} {j : Sum.{u1, u2} ιa ιb}, (Eq.{succ u4} Mᵢ (v i) (v j)) -> (Ne.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb) i j) -> (Eq.{succ (max u1 u2)} (Equiv.Perm.ModSumCongr.{u1, u2} ιa ιb) (SMul.smul.{max u1 u2, max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.ModSumCongr.{u1, u2} ιa ιb) (MulAction.toHasSmul.{max u1 u2, max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.ModSumCongr.{u1, u2} ιa ιb) (DivInvMonoid.toMonoid.{max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Group.toDivInvMonoid.{max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} ιa ιb)))) (MulAction.quotient.{max u1 u2, max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} ιa ιb)) (DivInvMonoid.toMonoid.{max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Group.toDivInvMonoid.{max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} ιa ιb)))) (Monoid.toMulAction.{max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (DivInvMonoid.toMonoid.{max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Group.toDivInvMonoid.{max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} ιa ιb))))) (MonoidHom.range.{max u1 u2, max u1 u2} (Prod.{u1, u2} (Equiv.Perm.{succ u1} ιa) (Equiv.Perm.{succ u2} ιb)) (Prod.group.{u1, u2} (Equiv.Perm.{succ u1} ιa) (Equiv.Perm.{succ u2} ιb) (Equiv.Perm.permGroup.{u1} ιa) (Equiv.Perm.permGroup.{u2} ιb)) (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.sumCongrHom.{u1, u2} ιa ιb)) (MulAction.left_quotientAction.{max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} ιa ιb)) (MonoidHom.range.{max u1 u2, max u1 u2} (Prod.{u1, u2} (Equiv.Perm.{succ u1} ιa) (Equiv.Perm.{succ u2} ιb)) (Prod.group.{u1, u2} (Equiv.Perm.{succ u1} ιa) (Equiv.Perm.{succ u2} ιb) (Equiv.Perm.permGroup.{u1} ιa) (Equiv.Perm.permGroup.{u2} ιb)) (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.sumCongrHom.{u1, u2} ιa ιb))))) (Equiv.swap.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb) (fun (a : Sum.{u1, u2} ιa ιb) (b : Sum.{u1, u2} ιa ιb) => Sum.decidableEq.{u1, u2} ιa (fun (a : ιa) (b : ιa) => _inst_19 a b) ιb (fun (a : ιb) (b : ιb) => _inst_20 a b) a b) i j) σ) σ) -> (Eq.{succ (max u5 u6)} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (coeFn.{max (succ (max u1 u2)) (succ u4) (succ (max u5 u6)), max (max (succ (max u1 u2)) (succ u4)) (succ (max u5 u6))} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (fun (f : MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) => ((Sum.{u1, u2} ιa ιb) -> Mᵢ) -> (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.hasCoeToFun.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (AlternatingMap.domCoprod.summand.{u1, u2, u3, u4, u5, u6} ιa ιb _inst_10 _inst_11 R' Mᵢ N₁ N₂ _inst_12 _inst_13 _inst_14 _inst_15 _inst_16 _inst_17 _inst_18 (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) a b σ) v) (OfNat.ofNat.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) 0 (OfNat.mk.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) 0 (Zero.zero.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddZeroClass.toHasZero.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addZeroClass.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16))))))
but is expected to have type
  forall {ιa : Type.{u3}} {ιb : Type.{u1}} [_inst_10 : Fintype.{u3} ιa] [_inst_11 : Fintype.{u1} ιb] {R' : Type.{u6}} {Mᵢ : Type.{u5}} {N₁ : Type.{u4}} {N₂ : Type.{u2}} [_inst_12 : CommSemiring.{u6} R'] [_inst_13 : AddCommGroup.{u4} N₁] [_inst_14 : Module.{u6, u4} R' N₁ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13)] [_inst_15 : AddCommGroup.{u2} N₂] [_inst_16 : Module.{u6, u2} R' N₂ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15)] [_inst_17 : AddCommMonoid.{u5} Mᵢ] [_inst_18 : Module.{u6, u5} R' Mᵢ (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_17] [_inst_19 : DecidableEq.{succ u3} ιa] [_inst_20 : DecidableEq.{succ u1} ιb] (a : AlternatingMap.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (b : AlternatingMap.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb) (σ : Equiv.Perm.ModSumCongr.{u3, u1} ιa ιb) {v : (Sum.{u3, u1} ιa ιb) -> Mᵢ} {i : Sum.{u3, u1} ιa ιb} {j : Sum.{u3, u1} ιa ιb}, (Eq.{succ u5} Mᵢ (v i) (v j)) -> (Ne.{max (succ u3) (succ u1)} (Sum.{u3, u1} ιa ιb) i j) -> (Eq.{max (succ u3) (succ u1)} (Equiv.Perm.ModSumCongr.{u3, u1} ιa ιb) (HSMul.hSMul.{max u3 u1, max u3 u1, max u3 u1} (Equiv.Perm.{max (succ u3) (succ u1)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.ModSumCongr.{u3, u1} ιa ιb) (Equiv.Perm.ModSumCongr.{u3, u1} ιa ιb) (instHSMul.{max u3 u1, max u3 u1} (Equiv.Perm.{max (succ u3) (succ u1)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.ModSumCongr.{u3, u1} ιa ιb) (MulAction.toSMul.{max u3 u1, max u3 u1} (Equiv.Perm.{max (succ u3) (succ u1)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.ModSumCongr.{u3, u1} ιa ιb) (DivInvMonoid.toMonoid.{max u3 u1} (Equiv.Perm.{max (succ u3) (succ u1)} (Sum.{u3, u1} ιa ιb)) (Group.toDivInvMonoid.{max u3 u1} (Equiv.Perm.{max (succ u3) (succ u1)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.permGroup.{max u3 u1} (Sum.{u3, u1} ιa ιb)))) (MulAction.quotient.{max u3 u1, max u3 u1} (Equiv.Perm.{max (succ u1) (succ u3)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.{max (succ u3) (succ u1)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.permGroup.{max u3 u1} (Sum.{u3, u1} ιa ιb)) (DivInvMonoid.toMonoid.{max u3 u1} (Equiv.Perm.{max (succ u3) (succ u1)} (Sum.{u3, u1} ιa ιb)) (Group.toDivInvMonoid.{max u3 u1} (Equiv.Perm.{max (succ u3) (succ u1)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.permGroup.{max u3 u1} (Sum.{u3, u1} ιa ιb)))) (Monoid.toMulAction.{max u3 u1} (Equiv.Perm.{max (succ u3) (succ u1)} (Sum.{u3, u1} ιa ιb)) (DivInvMonoid.toMonoid.{max u3 u1} (Equiv.Perm.{max (succ u3) (succ u1)} (Sum.{u3, u1} ιa ιb)) (Group.toDivInvMonoid.{max u3 u1} (Equiv.Perm.{max (succ u3) (succ u1)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.permGroup.{max u3 u1} (Sum.{u3, u1} ιa ιb))))) (MonoidHom.range.{max u3 u1, max u3 u1} (Prod.{u3, u1} (Equiv.Perm.{succ u3} ιa) (Equiv.Perm.{succ u1} ιb)) (Prod.instGroupProd.{u3, u1} (Equiv.Perm.{succ u3} ιa) (Equiv.Perm.{succ u1} ιb) (Equiv.Perm.permGroup.{u3} ιa) (Equiv.Perm.permGroup.{u1} ιb)) (Equiv.Perm.{max (succ u1) (succ u3)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.permGroup.{max u3 u1} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.sumCongrHom.{u3, u1} ιa ιb)) (MulAction.left_quotientAction.{max u3 u1} (Equiv.Perm.{max (succ u1) (succ u3)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.permGroup.{max u3 u1} (Sum.{u3, u1} ιa ιb)) (MonoidHom.range.{max u3 u1, max u3 u1} (Prod.{u3, u1} (Equiv.Perm.{succ u3} ιa) (Equiv.Perm.{succ u1} ιb)) (Prod.instGroupProd.{u3, u1} (Equiv.Perm.{succ u3} ιa) (Equiv.Perm.{succ u1} ιb) (Equiv.Perm.permGroup.{u3} ιa) (Equiv.Perm.permGroup.{u1} ιb)) (Equiv.Perm.{max (succ u1) (succ u3)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.permGroup.{max u3 u1} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.sumCongrHom.{u3, u1} ιa ιb)))))) (Equiv.swap.{max (succ u3) (succ u1)} (Sum.{u3, u1} ιa ιb) (fun (a : Sum.{u3, u1} ιa ιb) (b : Sum.{u3, u1} ιa ιb) => Sum.instDecidableEqSum.{u3, u1} ιa ιb (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) a b) i j) σ) σ) -> (Eq.{max (succ u4) (succ u2)} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : (Sum.{u3, u1} ιa ιb) -> Mᵢ) => TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) v) (FunLike.coe.{max (max (max (max (succ u3) (succ u1)) (succ u5)) (succ u4)) (succ u2), max (max (succ u3) (succ u1)) (succ u5), max (succ u4) (succ u2)} (MultilinearMap.{u6, u5, max u2 u4, max u3 u1} R' (Sum.{u3, u1} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.14167 : Sum.{u3, u1} ιa ιb) => Mᵢ) (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u6} R' _inst_12) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16)) ((Sum.{u3, u1} ιa ιb) -> Mᵢ) (fun (f : (Sum.{u3, u1} ιa ιb) -> Mᵢ) => (fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : (Sum.{u3, u1} ιa ιb) -> Mᵢ) => TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) f) (MultilinearMap.instFunLikeMultilinearMapForAll.{u6, u5, max u4 u2, max u3 u1} R' (Sum.{u3, u1} ιa ιb) (fun (_x : Sum.{u3, u1} ιa ιb) => Mᵢ) (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u6} R' _inst_12) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16)) (AlternatingMap.domCoprod.summand.{u3, u1, u6, u5, u4, u2} ιa ιb _inst_10 _inst_11 R' Mᵢ N₁ N₂ _inst_12 _inst_13 _inst_14 _inst_15 _inst_16 _inst_17 _inst_18 (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) a b σ) v) (OfNat.ofNat.{max u4 u2} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : (Sum.{u3, u1} ιa ιb) -> Mᵢ) => TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) v) 0 (Zero.toOfNat0.{max u4 u2} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : (Sum.{u3, u1} ιa ιb) -> Mᵢ) => TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) v) (NegZeroClass.toZero.{max u4 u2} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : (Sum.{u3, u1} ιa ιb) -> Mᵢ) => TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) v) (SubNegZeroMonoid.toNegZeroClass.{max u4 u2} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : (Sum.{u3, u1} ιa ιb) -> Mᵢ) => TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) v) (SubtractionMonoid.toSubNegZeroMonoid.{max u4 u2} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : (Sum.{u3, u1} ιa ιb) -> Mᵢ) => TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) v) (SubtractionCommMonoid.toSubtractionMonoid.{max u4 u2} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : (Sum.{u3, u1} ιa ιb) -> Mᵢ) => TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) v) (AddCommGroup.toDivisionAddCommMonoid.{max u4 u2} ((fun (x._@.Mathlib.LinearAlgebra.Multilinear.Basic._hyg.419 : (Sum.{u3, u1} ιa ιb) -> Mᵢ) => TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) v) (TensorProduct.addCommGroup.{u6, u4, u2} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)))))))))
Case conversion may be inaccurate. Consider using '#align alternating_map.dom_coprod.summand_eq_zero_of_smul_invariant AlternatingMap.domCoprod.summand_eq_zero_of_smul_invariantₓ'. -/
/-- Swapping elements in `σ` with equal values in `v` result in zero if the swap has no effect
on the quotient. -/
theorem domCoprod.summand_eq_zero_of_smul_invariant (a : AlternatingMap R' Mᵢ N₁ ιa)
    (b : AlternatingMap R' Mᵢ N₂ ιb) (σ : Perm.ModSumCongr ιa ιb) {v : Sum ιa ιb → Mᵢ}
    {i j : Sum ιa ιb} (hv : v i = v j) (hij : i ≠ j) :
    swap i j • σ = σ → domCoprod.summand a b σ v = 0 :=
  by
  apply σ.induction_on' fun σ => _
  dsimp only [Quotient.liftOn'_mk'', Quotient.map'_mk'', MultilinearMap.smul_apply,
    MultilinearMap.domDomCongr_apply, MultilinearMap.domCoprod_apply, dom_coprod.summand]
  intro hσ
  cases hi : σ⁻¹ i <;> cases hj : σ⁻¹ j <;> rw [perm.inv_eq_iff_eq] at hi hj <;> substs hi hj <;>
    revert val val_1
  case inl.inr |
    inr.inl =>
    -- the term pairs with and cancels another term
    all_goals
      intro i' j' hv hij hσ
      obtain ⟨⟨sl, sr⟩, hσ⟩ := quotient_group.left_rel_apply.mp (Quotient.exact' hσ)
    on_goal 1 => replace hσ := Equiv.congr_fun hσ (Sum.inl i')
    on_goal 2 => replace hσ := Equiv.congr_fun hσ (Sum.inr i')
    all_goals
      rw [smul_eq_mul, ← mul_swap_eq_swap_mul, mul_inv_rev, swap_inv, inv_mul_cancel_right] at hσ
      simpa using hσ
  case inr.inr |
    inl.inl =>
    -- the term does not pair but is zero
    all_goals
      intro i' j' hv hij hσ
      convert smul_zero _
    on_goal 1 => convert TensorProduct.tmul_zero _ _
    on_goal 2 => convert TensorProduct.zero_tmul _ _
    all_goals exact AlternatingMap.map_eq_zero_of_eq _ _ hv fun hij' => hij (hij' ▸ rfl)
#align alternating_map.dom_coprod.summand_eq_zero_of_smul_invariant AlternatingMap.domCoprod.summand_eq_zero_of_smul_invariant

/- warning: alternating_map.dom_coprod -> AlternatingMap.domCoprod is a dubious translation:
lean 3 declaration is
  forall {ιa : Type.{u1}} {ιb : Type.{u2}} [_inst_10 : Fintype.{u1} ιa] [_inst_11 : Fintype.{u2} ιb] {R' : Type.{u3}} {Mᵢ : Type.{u4}} {N₁ : Type.{u5}} {N₂ : Type.{u6}} [_inst_12 : CommSemiring.{u3} R'] [_inst_13 : AddCommGroup.{u5} N₁] [_inst_14 : Module.{u3, u5} R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13)] [_inst_15 : AddCommGroup.{u6} N₂] [_inst_16 : Module.{u3, u6} R' N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15)] [_inst_17 : AddCommMonoid.{u4} Mᵢ] [_inst_18 : Module.{u3, u4} R' Mᵢ (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_17] [_inst_19 : DecidableEq.{succ u1} ιa] [_inst_20 : DecidableEq.{succ u2} ιb], (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) -> (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) -> (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb))
but is expected to have type
  forall {ιa : Type.{u1}} {ιb : Type.{u2}} [_inst_10 : Fintype.{u1} ιa] [_inst_11 : Fintype.{u2} ιb] {R' : Type.{u3}} {Mᵢ : Type.{u4}} {N₁ : Type.{u5}} {N₂ : Type.{u6}} [_inst_12 : CommSemiring.{u3} R'] [_inst_13 : AddCommGroup.{u5} N₁] [_inst_14 : Module.{u3, u5} R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13)] [_inst_15 : AddCommGroup.{u6} N₂] [_inst_16 : Module.{u3, u6} R' N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15)] [_inst_17 : AddCommMonoid.{u4} Mᵢ] [_inst_18 : Module.{u3, u4} R' Mᵢ (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_17] [_inst_19 : DecidableEq.{succ u1} ιa] [_inst_20 : DecidableEq.{succ u2} ιb], (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) -> (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) -> (AlternatingMap.{u3, u4, max u6 u5, max u2 u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb))
Case conversion may be inaccurate. Consider using '#align alternating_map.dom_coprod AlternatingMap.domCoprodₓ'. -/
/-- Like `multilinear_map.dom_coprod`, but ensures the result is also alternating.

Note that this is usually defined (for instance, as used in Proposition 22.24 in [Gallier2011Notes])
over integer indices `ιa = fin n` and `ιb = fin m`, as
$$
(f \wedge g)(u_1, \ldots, u_{m+n}) =
  \sum_{\operatorname{shuffle}(m, n)} \operatorname{sign}(\sigma)
    f(u_{\sigma(1)}, \ldots, u_{\sigma(m)}) g(u_{\sigma(m+1)}, \ldots, u_{\sigma(m+n)}),
$$
where $\operatorname{shuffle}(m, n)$ consists of all permutations of $[1, m+n]$ such that
$\sigma(1) < \cdots < \sigma(m)$ and $\sigma(m+1) < \cdots < \sigma(m+n)$.

Here, we generalize this by replacing:
* the product in the sum with a tensor product
* the filtering of $[1, m+n]$ to shuffles with an isomorphic quotient
* the additions in the subscripts of $\sigma$ with an index of type `sum`

The specialized version can be obtained by combining this definition with `fin_sum_fin_equiv` and
`linear_map.mul'`.
-/
@[simps]
def domCoprod (a : AlternatingMap R' Mᵢ N₁ ιa) (b : AlternatingMap R' Mᵢ N₂ ιb) :
    AlternatingMap R' Mᵢ (N₁ ⊗[R'] N₂) (Sum ιa ιb) :=
  {
    ∑ σ : Perm.ModSumCongr ιa ιb,
      domCoprod.summand a b
        σ with
    toFun := fun v => (⇑(∑ σ : Perm.ModSumCongr ιa ιb, domCoprod.summand a b σ)) v
    map_eq_zero_of_eq' := fun v i j hv hij => by
      dsimp only
      rw [MultilinearMap.sum_apply]
      exact
        Finset.sum_involution (fun σ _ => Equiv.swap i j • σ)
          (fun σ _ => dom_coprod.summand_add_swap_smul_eq_zero a b σ hv hij)
          (fun σ _ => mt <| dom_coprod.summand_eq_zero_of_smul_invariant a b σ hv hij)
          (fun σ _ => Finset.mem_univ _) fun σ _ =>
          Equiv.Perm.ModSumCongr.swap_smul_involutive i j σ }
#align alternating_map.dom_coprod AlternatingMap.domCoprod

/- warning: alternating_map.dom_coprod_coe -> AlternatingMap.domCoprod_coe is a dubious translation:
lean 3 declaration is
  forall {ιa : Type.{u1}} {ιb : Type.{u2}} [_inst_10 : Fintype.{u1} ιa] [_inst_11 : Fintype.{u2} ιb] {R' : Type.{u3}} {Mᵢ : Type.{u4}} {N₁ : Type.{u5}} {N₂ : Type.{u6}} [_inst_12 : CommSemiring.{u3} R'] [_inst_13 : AddCommGroup.{u5} N₁] [_inst_14 : Module.{u3, u5} R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13)] [_inst_15 : AddCommGroup.{u6} N₂] [_inst_16 : Module.{u3, u6} R' N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15)] [_inst_17 : AddCommMonoid.{u4} Mᵢ] [_inst_18 : Module.{u3, u4} R' Mᵢ (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_17] [_inst_19 : DecidableEq.{succ u1} ιa] [_inst_20 : DecidableEq.{succ u2} ιb] (a : AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (b : AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb), Eq.{max (succ (max u1 u2)) (succ u4) (succ (max u5 u6))} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) ((fun (a : Sort.{max (succ u4) (succ (max u5 u6)) (succ (max u1 u2))}) (b : Sort.{max (succ (max u1 u2)) (succ u4) (succ (max u5 u6))}) [self : HasLiftT.{max (succ u4) (succ (max u5 u6)) (succ (max u1 u2)), max (succ (max u1 u2)) (succ u4) (succ (max u5 u6))} a b] => self.0) (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (HasLiftT.mk.{max (succ u4) (succ (max u5 u6)) (succ (max u1 u2)), max (succ (max u1 u2)) (succ u4) (succ (max u5 u6))} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (CoeTCₓ.coe.{max (succ u4) (succ (max u5 u6)) (succ (max u1 u2)), max (succ (max u1 u2)) (succ u4) (succ (max u5 u6))} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (coeBase.{max (succ u4) (succ (max u5 u6)) (succ (max u1 u2)), max (succ (max u1 u2)) (succ u4) (succ (max u5 u6))} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (AlternatingMap.coe.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb))))) (AlternatingMap.domCoprod.{u1, u2, u3, u4, u5, u6} ιa ιb _inst_10 _inst_11 R' Mᵢ N₁ N₂ _inst_12 _inst_13 _inst_14 _inst_15 _inst_16 _inst_17 _inst_18 (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) a b)) (Finset.sum.{max (max u1 u2) u4 u5 u6, max u1 u2} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (Equiv.Perm.ModSumCongr.{u1, u2} ιa ιb) (MultilinearMap.addCommMonoid.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (Finset.univ.{max u1 u2} (Equiv.Perm.ModSumCongr.{u1, u2} ιa ιb) (QuotientGroup.fintype.{max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} ιa ιb)) (Equiv.fintype.{max u1 u2, max u1 u2} (Sum.{u1, u2} ιa ιb) (Sum.{u1, u2} ιa ιb) (fun (a : Sum.{u1, u2} ιa ιb) (b : Sum.{u1, u2} ιa ιb) => Sum.decidableEq.{u1, u2} ιa (fun (a : ιa) (b : ιa) => _inst_19 a b) ιb (fun (a : ιb) (b : ιb) => _inst_20 a b) a b) (fun (a : Sum.{u1, u2} ιa ιb) (b : Sum.{u1, u2} ιa ιb) => Sum.decidableEq.{u1, u2} ιa (fun (a : ιa) (b : ιa) => _inst_19 a b) ιb (fun (a : ιb) (b : ιb) => _inst_20 a b) a b) (Sum.fintype.{u1, u2} ιa ιb _inst_10 _inst_11) (Sum.fintype.{u1, u2} ιa ιb _inst_10 _inst_11)) (MonoidHom.range.{max u1 u2, max u1 u2} (Prod.{u1, u2} (Equiv.Perm.{succ u1} ιa) (Equiv.Perm.{succ u2} ιb)) (Prod.group.{u1, u2} (Equiv.Perm.{succ u1} ιa) (Equiv.Perm.{succ u2} ιb) (Equiv.Perm.permGroup.{u1} ιa) (Equiv.Perm.permGroup.{u2} ιb)) (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.sumCongrHom.{u1, u2} ιa ιb)) (fun (a : Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (b : Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) => QuotientGroup.leftRelDecidable.{max u1 u2} (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} ιa ιb)) (MonoidHom.range.{max u1 u2, max u1 u2} (Prod.{u1, u2} (Equiv.Perm.{succ u1} ιa) (Equiv.Perm.{succ u2} ιb)) (Prod.group.{u1, u2} (Equiv.Perm.{succ u1} ιa) (Equiv.Perm.{succ u2} ιb) (Equiv.Perm.permGroup.{u1} ιa) (Equiv.Perm.permGroup.{u2} ιb)) (Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.permGroup.{max u1 u2} (Sum.{u1, u2} ιa ιb)) (Equiv.Perm.sumCongrHom.{u1, u2} ιa ιb)) (fun (a : Equiv.Perm.{max (succ u1) (succ u2)} (Sum.{u1, u2} ιa ιb)) => Equiv.Perm.sumCongrHom.decidableMemRange.{u1, u2} ιa ιb (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) _inst_10 _inst_11 a) a b))) (fun (σ : Equiv.Perm.ModSumCongr.{u1, u2} ιa ιb) => AlternatingMap.domCoprod.summand.{u1, u2, u3, u4, u5, u6} ιa ιb _inst_10 _inst_11 R' Mᵢ N₁ N₂ _inst_12 _inst_13 _inst_14 _inst_15 _inst_16 _inst_17 _inst_18 (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) a b σ))
but is expected to have type
  forall {ιa : Type.{u3}} {ιb : Type.{u1}} [_inst_10 : Fintype.{u3} ιa] [_inst_11 : Fintype.{u1} ιb] {R' : Type.{u6}} {Mᵢ : Type.{u5}} {N₁ : Type.{u4}} {N₂ : Type.{u2}} [_inst_12 : CommSemiring.{u6} R'] [_inst_13 : AddCommGroup.{u4} N₁] [_inst_14 : Module.{u6, u4} R' N₁ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13)] [_inst_15 : AddCommGroup.{u2} N₂] [_inst_16 : Module.{u6, u2} R' N₂ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15)] [_inst_17 : AddCommMonoid.{u5} Mᵢ] [_inst_18 : Module.{u6, u5} R' Mᵢ (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_17] [_inst_19 : DecidableEq.{succ u3} ιa] [_inst_20 : DecidableEq.{succ u1} ιb] (a : AlternatingMap.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (b : AlternatingMap.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb), Eq.{max (max (max (max (succ u3) (succ u1)) (succ u5)) (succ u4)) (succ u2)} (MultilinearMap.{u6, u5, max u4 u2, max u3 u1} R' (Sum.{u3, u1} ιa ιb) (fun (_x : Sum.{u3, u1} ιa ιb) => Mᵢ) (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u6} R' _inst_12) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16)) (AlternatingMap.toMultilinearMap.{u6, u5, max u4 u2, max u3 u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u3, u1} ιa ιb) (AlternatingMap.domCoprod.{u3, u1, u6, u5, u4, u2} ιa ιb _inst_10 _inst_11 R' Mᵢ N₁ N₂ _inst_12 _inst_13 _inst_14 _inst_15 _inst_16 _inst_17 _inst_18 (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) a b)) (Finset.sum.{max (max (max (max u2 u4) u5) u1) u3, max u3 u1} (MultilinearMap.{u6, u5, max u2 u4, max u3 u1} R' (Sum.{u3, u1} ιa ιb) (fun (_x : Sum.{u3, u1} ιa ιb) => Mᵢ) (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u6} R' _inst_12) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16)) (Equiv.Perm.ModSumCongr.{u3, u1} ιa ιb) (MultilinearMap.addCommMonoid.{u6, u5, max u4 u2, max u3 u1} R' (Sum.{u3, u1} ιa ιb) (fun (_x : Sum.{u3, u1} ιa ιb) => Mᵢ) (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u6} R' _inst_12) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u3, u1} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16)) (Finset.univ.{max u3 u1} (Equiv.Perm.ModSumCongr.{u3, u1} ιa ιb) (QuotientGroup.fintype.{max u3 u1} (Equiv.Perm.{max (succ u1) (succ u3)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.permGroup.{max u3 u1} (Sum.{u3, u1} ιa ιb)) (equivFintype.{max u3 u1, max u3 u1} (Sum.{u3, u1} ιa ιb) (Sum.{u3, u1} ιa ιb) (fun (a : Sum.{u3, u1} ιa ιb) (b : Sum.{u3, u1} ιa ιb) => Sum.instDecidableEqSum.{u3, u1} ιa ιb (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) a b) (fun (a : Sum.{u3, u1} ιa ιb) (b : Sum.{u3, u1} ιa ιb) => Sum.instDecidableEqSum.{u3, u1} ιa ιb (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) a b) (instFintypeSum.{u3, u1} ιa ιb _inst_10 _inst_11) (instFintypeSum.{u3, u1} ιa ιb _inst_10 _inst_11)) (MonoidHom.range.{max u3 u1, max u3 u1} (Prod.{u3, u1} (Equiv.Perm.{succ u3} ιa) (Equiv.Perm.{succ u1} ιb)) (Prod.instGroupProd.{u3, u1} (Equiv.Perm.{succ u3} ιa) (Equiv.Perm.{succ u1} ιb) (Equiv.Perm.permGroup.{u3} ιa) (Equiv.Perm.permGroup.{u1} ιb)) (Equiv.Perm.{max (succ u1) (succ u3)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.permGroup.{max u3 u1} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.sumCongrHom.{u3, u1} ιa ιb)) (fun (a : Equiv.Perm.{max (succ u1) (succ u3)} (Sum.{u3, u1} ιa ιb)) (b : Equiv.Perm.{max (succ u1) (succ u3)} (Sum.{u3, u1} ιa ιb)) => QuotientGroup.leftRelDecidable.{max u3 u1} (Equiv.Perm.{max (succ u1) (succ u3)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.permGroup.{max u3 u1} (Sum.{u3, u1} ιa ιb)) (MonoidHom.range.{max u3 u1, max u3 u1} (Prod.{u3, u1} (Equiv.Perm.{succ u3} ιa) (Equiv.Perm.{succ u1} ιb)) (Prod.instGroupProd.{u3, u1} (Equiv.Perm.{succ u3} ιa) (Equiv.Perm.{succ u1} ιb) (Equiv.Perm.permGroup.{u3} ιa) (Equiv.Perm.permGroup.{u1} ιb)) (Equiv.Perm.{max (succ u1) (succ u3)} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.permGroup.{max u3 u1} (Sum.{u3, u1} ιa ιb)) (Equiv.Perm.sumCongrHom.{u3, u1} ιa ιb)) (fun (a : Equiv.Perm.{max (succ u1) (succ u3)} (Sum.{u3, u1} ιa ιb)) => Equiv.Perm.sumCongrHom.decidableMemRange.{u3, u1} ιa ιb (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) _inst_10 _inst_11 a) a b))) (fun (σ : Equiv.Perm.ModSumCongr.{u3, u1} ιa ιb) => AlternatingMap.domCoprod.summand.{u3, u1, u6, u5, u4, u2} ιa ιb _inst_10 _inst_11 R' Mᵢ N₁ N₂ _inst_12 _inst_13 _inst_14 _inst_15 _inst_16 _inst_17 _inst_18 (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) a b σ))
Case conversion may be inaccurate. Consider using '#align alternating_map.dom_coprod_coe AlternatingMap.domCoprod_coeₓ'. -/
theorem domCoprod_coe (a : AlternatingMap R' Mᵢ N₁ ιa) (b : AlternatingMap R' Mᵢ N₂ ιb) :
    (↑(a.domCoprod b) : MultilinearMap R' (fun _ => Mᵢ) _) =
      ∑ σ : Perm.ModSumCongr ιa ιb, domCoprod.summand a b σ :=
  MultilinearMap.ext fun _ => rfl
#align alternating_map.dom_coprod_coe AlternatingMap.domCoprod_coe

#print AlternatingMap.domCoprod' /-
/-- A more bundled version of `alternating_map.dom_coprod` that maps
`((ι₁ → N) → N₁) ⊗ ((ι₂ → N) → N₂)` to `(ι₁ ⊕ ι₂ → N) → N₁ ⊗ N₂`. -/
def domCoprod' :
    AlternatingMap R' Mᵢ N₁ ιa ⊗[R'] AlternatingMap R' Mᵢ N₂ ιb →ₗ[R']
      AlternatingMap R' Mᵢ (N₁ ⊗[R'] N₂) (Sum ιa ιb) :=
  TensorProduct.lift <| by
    refine'
        LinearMap.mk₂ R' dom_coprod (fun m₁ m₂ n => _) (fun c m n => _) (fun m n₁ n₂ => _)
          fun c m n => _ <;>
      · ext
        simp only [dom_coprod_apply, add_apply, smul_apply, ← Finset.sum_add_distrib,
          Finset.smul_sum, MultilinearMap.sum_apply, dom_coprod.summand]
        congr
        ext σ
        apply σ.induction_on' fun σ => _
        simp only [Quotient.liftOn'_mk'', coe_add, coe_smul, MultilinearMap.smul_apply, ←
          MultilinearMap.domCoprod'_apply]
        simp only [TensorProduct.add_tmul, ← TensorProduct.smul_tmul', TensorProduct.tmul_add,
          TensorProduct.tmul_smul, LinearMap.map_add, LinearMap.map_smul]
        first |rw [← smul_add]|rw [smul_comm]
        congr
#align alternating_map.dom_coprod' AlternatingMap.domCoprod'
-/

/- warning: alternating_map.dom_coprod'_apply -> AlternatingMap.domCoprod'_apply is a dubious translation:
lean 3 declaration is
  forall {ιa : Type.{u1}} {ιb : Type.{u2}} [_inst_10 : Fintype.{u1} ιa] [_inst_11 : Fintype.{u2} ιb] {R' : Type.{u3}} {Mᵢ : Type.{u4}} {N₁ : Type.{u5}} {N₂ : Type.{u6}} [_inst_12 : CommSemiring.{u3} R'] [_inst_13 : AddCommGroup.{u5} N₁] [_inst_14 : Module.{u3, u5} R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13)] [_inst_15 : AddCommGroup.{u6} N₂] [_inst_16 : Module.{u3, u6} R' N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15)] [_inst_17 : AddCommMonoid.{u4} Mᵢ] [_inst_18 : Module.{u3, u4} R' Mᵢ (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_17] [_inst_19 : DecidableEq.{succ u1} ιa] [_inst_20 : DecidableEq.{succ u2} ιb] (a : AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (b : AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb), Eq.{max (succ u4) (succ (max u5 u6)) (succ (max u1 u2))} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (coeFn.{max (succ (max (max u4 u5 u1) u4 u6 u2)) (succ (max u4 (max u5 u6) u1 u2)), max (succ (max (max u4 u5 u1) u4 u6 u2)) (succ (max u4 (max u5 u6) u1 u2))} (LinearMap.{u3, u3, max (max u4 u5 u1) u4 u6 u2, max u4 (max u5 u6) u1 u2} R' R' (CommSemiring.toSemiring.{u3} R' _inst_12) (CommSemiring.toSemiring.{u3} R' _inst_12) (RingHom.id.{u3} R' (Semiring.toNonAssocSemiring.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12))) (TensorProduct.{u3, max u4 u5 u1, max u4 u6 u2} R' _inst_12 (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommMonoid.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommMonoid.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.module.{u3, u4, u5, u1, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa R' (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_14 (AlternatingMap.domCoprod'._proof_1.{u3, u5} R' N₁ _inst_12 _inst_13 _inst_14)) (AlternatingMap.module.{u3, u4, u6, u2, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb R' (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_16 (AlternatingMap.domCoprod'._proof_2.{u3, u6} R' N₂ _inst_12 _inst_15 _inst_16))) (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (TensorProduct.addCommMonoid.{u3, max u4 u5 u1, max u4 u6 u2} R' _inst_12 (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommMonoid.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommMonoid.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.module.{u3, u4, u5, u1, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa R' (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_14 (AlternatingMap.domCoprod'._proof_1.{u3, u5} R' N₁ _inst_12 _inst_13 _inst_14)) (AlternatingMap.module.{u3, u4, u6, u2, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb R' (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_16 (AlternatingMap.domCoprod'._proof_2.{u3, u6} R' N₂ _inst_12 _inst_15 _inst_16))) (AlternatingMap.addCommMonoid.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (TensorProduct.module.{u3, max u4 u5 u1, max u4 u6 u2} R' _inst_12 (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommMonoid.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommMonoid.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.module.{u3, u4, u5, u1, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa R' (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_14 (AlternatingMap.domCoprod'._proof_1.{u3, u5} R' N₁ _inst_12 _inst_13 _inst_14)) (AlternatingMap.module.{u3, u4, u6, u2, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb R' (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_16 (AlternatingMap.domCoprod'._proof_2.{u3, u6} R' N₂ _inst_12 _inst_15 _inst_16))) (AlternatingMap.module.{u3, u4, max u5 u6, max u1 u2, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb) R' (CommSemiring.toSemiring.{u3} R' _inst_12) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AlternatingMap.domCoprod'._proof_3.{u3, u5, u6} R' N₁ N₂ _inst_12 _inst_13 _inst_14 _inst_15 _inst_16))) (fun (_x : LinearMap.{u3, u3, max (max u4 u5 u1) u4 u6 u2, max u4 (max u5 u6) u1 u2} R' R' (CommSemiring.toSemiring.{u3} R' _inst_12) (CommSemiring.toSemiring.{u3} R' _inst_12) (RingHom.id.{u3} R' (Semiring.toNonAssocSemiring.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12))) (TensorProduct.{u3, max u4 u5 u1, max u4 u6 u2} R' _inst_12 (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommMonoid.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommMonoid.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.module.{u3, u4, u5, u1, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa R' (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_14 (AlternatingMap.domCoprod'._proof_1.{u3, u5} R' N₁ _inst_12 _inst_13 _inst_14)) (AlternatingMap.module.{u3, u4, u6, u2, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb R' (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_16 (AlternatingMap.domCoprod'._proof_2.{u3, u6} R' N₂ _inst_12 _inst_15 _inst_16))) (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (TensorProduct.addCommMonoid.{u3, max u4 u5 u1, max u4 u6 u2} R' _inst_12 (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommMonoid.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommMonoid.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.module.{u3, u4, u5, u1, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa R' (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_14 (AlternatingMap.domCoprod'._proof_1.{u3, u5} R' N₁ _inst_12 _inst_13 _inst_14)) (AlternatingMap.module.{u3, u4, u6, u2, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb R' (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_16 (AlternatingMap.domCoprod'._proof_2.{u3, u6} R' N₂ _inst_12 _inst_15 _inst_16))) (AlternatingMap.addCommMonoid.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (TensorProduct.module.{u3, max u4 u5 u1, max u4 u6 u2} R' _inst_12 (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommMonoid.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommMonoid.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.module.{u3, u4, u5, u1, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa R' (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_14 (AlternatingMap.domCoprod'._proof_1.{u3, u5} R' N₁ _inst_12 _inst_13 _inst_14)) (AlternatingMap.module.{u3, u4, u6, u2, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb R' (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_16 (AlternatingMap.domCoprod'._proof_2.{u3, u6} R' N₂ _inst_12 _inst_15 _inst_16))) (AlternatingMap.module.{u3, u4, max u5 u6, max u1 u2, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb) R' (CommSemiring.toSemiring.{u3} R' _inst_12) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AlternatingMap.domCoprod'._proof_3.{u3, u5, u6} R' N₁ N₂ _inst_12 _inst_13 _inst_14 _inst_15 _inst_16))) => (TensorProduct.{u3, max u4 u5 u1, max u4 u6 u2} R' _inst_12 (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommMonoid.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommMonoid.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.module.{u3, u4, u5, u1, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa R' (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_14 (AlternatingMap.domCoprod'._proof_1.{u3, u5} R' N₁ _inst_12 _inst_13 _inst_14)) (AlternatingMap.module.{u3, u4, u6, u2, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb R' (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_16 (AlternatingMap.domCoprod'._proof_2.{u3, u6} R' N₂ _inst_12 _inst_15 _inst_16))) -> (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb))) (LinearMap.hasCoeToFun.{u3, u3, max (max u4 u5 u1) u4 u6 u2, max u4 (max u5 u6) u1 u2} R' R' (TensorProduct.{u3, max u4 u5 u1, max u4 u6 u2} R' _inst_12 (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommMonoid.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommMonoid.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.module.{u3, u4, u5, u1, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa R' (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_14 (AlternatingMap.domCoprod'._proof_1.{u3, u5} R' N₁ _inst_12 _inst_13 _inst_14)) (AlternatingMap.module.{u3, u4, u6, u2, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb R' (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_16 (AlternatingMap.domCoprod'._proof_2.{u3, u6} R' N₂ _inst_12 _inst_15 _inst_16))) (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (CommSemiring.toSemiring.{u3} R' _inst_12) (CommSemiring.toSemiring.{u3} R' _inst_12) (TensorProduct.addCommMonoid.{u3, max u4 u5 u1, max u4 u6 u2} R' _inst_12 (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommMonoid.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommMonoid.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.module.{u3, u4, u5, u1, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa R' (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_14 (AlternatingMap.domCoprod'._proof_1.{u3, u5} R' N₁ _inst_12 _inst_13 _inst_14)) (AlternatingMap.module.{u3, u4, u6, u2, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb R' (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_16 (AlternatingMap.domCoprod'._proof_2.{u3, u6} R' N₂ _inst_12 _inst_15 _inst_16))) (AlternatingMap.addCommMonoid.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (TensorProduct.module.{u3, max u4 u5 u1, max u4 u6 u2} R' _inst_12 (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommMonoid.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommMonoid.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.module.{u3, u4, u5, u1, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa R' (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_14 (AlternatingMap.domCoprod'._proof_1.{u3, u5} R' N₁ _inst_12 _inst_13 _inst_14)) (AlternatingMap.module.{u3, u4, u6, u2, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb R' (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_16 (AlternatingMap.domCoprod'._proof_2.{u3, u6} R' N₂ _inst_12 _inst_15 _inst_16))) (AlternatingMap.module.{u3, u4, max u5 u6, max u1 u2, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb) R' (CommSemiring.toSemiring.{u3} R' _inst_12) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AlternatingMap.domCoprod'._proof_3.{u3, u5, u6} R' N₁ N₂ _inst_12 _inst_13 _inst_14 _inst_15 _inst_16)) (RingHom.id.{u3} R' (Semiring.toNonAssocSemiring.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12)))) (AlternatingMap.domCoprod'.{u1, u2, u3, u4, u5, u6} ιa ιb _inst_10 _inst_11 R' Mᵢ N₁ N₂ _inst_12 _inst_13 _inst_14 _inst_15 _inst_16 _inst_17 _inst_18 (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b)) (TensorProduct.tmul.{u3, max u4 u5 u1, max u4 u6 u2} R' _inst_12 (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommMonoid.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommMonoid.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.module.{u3, u4, u5, u1, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa R' (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_14 (AlternatingMap.domCoprod'._proof_1.{u3, u5} R' N₁ _inst_12 _inst_13 _inst_14)) (AlternatingMap.module.{u3, u4, u6, u2, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb R' (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_16 (AlternatingMap.domCoprod'._proof_2.{u3, u6} R' N₂ _inst_12 _inst_15 _inst_16)) a b)) (AlternatingMap.domCoprod.{u1, u2, u3, u4, u5, u6} ιa ιb _inst_10 _inst_11 R' Mᵢ N₁ N₂ _inst_12 _inst_13 _inst_14 _inst_15 _inst_16 _inst_17 _inst_18 (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) a b)
but is expected to have type
  forall {ιa : Type.{u3}} {ιb : Type.{u1}} [_inst_10 : Fintype.{u3} ιa] [_inst_11 : Fintype.{u1} ιb] {R' : Type.{u6}} {Mᵢ : Type.{u5}} {N₁ : Type.{u4}} {N₂ : Type.{u2}} [_inst_12 : CommSemiring.{u6} R'] [_inst_13 : AddCommGroup.{u4} N₁] [_inst_14 : Module.{u6, u4} R' N₁ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13)] [_inst_15 : AddCommGroup.{u2} N₂] [_inst_16 : Module.{u6, u2} R' N₂ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15)] [_inst_17 : AddCommMonoid.{u5} Mᵢ] [_inst_18 : Module.{u6, u5} R' Mᵢ (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_17] [_inst_19 : DecidableEq.{succ u3} ιa] [_inst_20 : DecidableEq.{succ u1} ιb] (a : AlternatingMap.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (b : AlternatingMap.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb), Eq.{max (max (max (max (succ u3) (succ u1)) (succ u5)) (succ u4)) (succ u2)} ((fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : TensorProduct.{u6, max (max u3 u4) u5, max (max u1 u2) u5} R' _inst_12 (AlternatingMap.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommMonoid.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommMonoid.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.module.{u6, u5, u4, u3, u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa R' (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_14 (smulCommClass_self.{u6, u4} R' N₁ (CommSemiring.toCommMonoid.{u6} R' _inst_12) (MulActionWithZero.toMulAction.{u6, u4} R' N₁ (Semiring.toMonoidWithZero.{u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12)) (NegZeroClass.toZero.{u4} N₁ (SubNegZeroMonoid.toNegZeroClass.{u4} N₁ (SubtractionMonoid.toSubNegZeroMonoid.{u4} N₁ (SubtractionCommMonoid.toSubtractionMonoid.{u4} N₁ (AddCommGroup.toDivisionAddCommMonoid.{u4} N₁ _inst_13))))) (Module.toMulActionWithZero.{u6, u4} R' N₁ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14)))) (AlternatingMap.module.{u6, u5, u2, u1, u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb R' (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_16 (smulCommClass_self.{u6, u2} R' N₂ (CommSemiring.toCommMonoid.{u6} R' _inst_12) (MulActionWithZero.toMulAction.{u6, u2} R' N₂ (Semiring.toMonoidWithZero.{u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12)) (NegZeroClass.toZero.{u2} N₂ (SubNegZeroMonoid.toNegZeroClass.{u2} N₂ (SubtractionMonoid.toSubNegZeroMonoid.{u2} N₂ (SubtractionCommMonoid.toSubtractionMonoid.{u2} N₂ (AddCommGroup.toDivisionAddCommMonoid.{u2} N₂ _inst_15))))) (Module.toMulActionWithZero.{u6, u2} R' N₂ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16))))) => AlternatingMap.{u6, u5, max u2 u4, max u1 u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u3, u1} ιa ιb)) (TensorProduct.tmul.{u6, max (max u4 u5) u3, max (max u2 u5) u1} R' _inst_12 (AlternatingMap.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommMonoid.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommMonoid.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.module.{u6, u5, u4, u3, u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa R' (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_14 (smulCommClass_self.{u6, u4} R' N₁ (CommSemiring.toCommMonoid.{u6} R' _inst_12) (MulActionWithZero.toMulAction.{u6, u4} R' N₁ (Semiring.toMonoidWithZero.{u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12)) (NegZeroClass.toZero.{u4} N₁ (SubNegZeroMonoid.toNegZeroClass.{u4} N₁ (SubtractionMonoid.toSubNegZeroMonoid.{u4} N₁ (SubtractionCommMonoid.toSubtractionMonoid.{u4} N₁ (AddCommGroup.toDivisionAddCommMonoid.{u4} N₁ _inst_13))))) (Module.toMulActionWithZero.{u6, u4} R' N₁ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14)))) (AlternatingMap.module.{u6, u5, u2, u1, u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb R' (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_16 (smulCommClass_self.{u6, u2} R' N₂ (CommSemiring.toCommMonoid.{u6} R' _inst_12) (MulActionWithZero.toMulAction.{u6, u2} R' N₂ (Semiring.toMonoidWithZero.{u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12)) (NegZeroClass.toZero.{u2} N₂ (SubNegZeroMonoid.toNegZeroClass.{u2} N₂ (SubtractionMonoid.toSubNegZeroMonoid.{u2} N₂ (SubtractionCommMonoid.toSubtractionMonoid.{u2} N₂ (AddCommGroup.toDivisionAddCommMonoid.{u2} N₂ _inst_15))))) (Module.toMulActionWithZero.{u6, u2} R' N₂ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16)))) a b)) (FunLike.coe.{max (max (max (max (succ u2) (succ u4)) (succ u5)) (succ u1)) (succ u3), max (max (max (max (succ u2) (succ u4)) (succ u5)) (succ u1)) (succ u3), max (max (max (max (succ u2) (succ u4)) (succ u5)) (succ u1)) (succ u3)} (LinearMap.{u6, u6, max (max (max u1 u2) u5) (max u3 u4) u5, max (max (max u1 u3) u2 u4) u5} R' R' (CommSemiring.toSemiring.{u6} R' _inst_12) (CommSemiring.toSemiring.{u6} R' _inst_12) (RingHom.id.{u6} R' (Semiring.toNonAssocSemiring.{u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12))) (TensorProduct.{u6, max (max u3 u4) u5, max (max u1 u2) u5} R' _inst_12 (AlternatingMap.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommMonoid.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommMonoid.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.module.{u6, u5, u4, u3, u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa R' (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_14 (smulCommClass_self.{u6, u4} R' N₁ (CommSemiring.toCommMonoid.{u6} R' _inst_12) (MulActionWithZero.toMulAction.{u6, u4} R' N₁ (Semiring.toMonoidWithZero.{u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12)) (NegZeroClass.toZero.{u4} N₁ (SubNegZeroMonoid.toNegZeroClass.{u4} N₁ (SubtractionMonoid.toSubNegZeroMonoid.{u4} N₁ (SubtractionCommMonoid.toSubtractionMonoid.{u4} N₁ (AddCommGroup.toDivisionAddCommMonoid.{u4} N₁ _inst_13))))) (Module.toMulActionWithZero.{u6, u4} R' N₁ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14)))) (AlternatingMap.module.{u6, u5, u2, u1, u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb R' (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_16 (smulCommClass_self.{u6, u2} R' N₂ (CommSemiring.toCommMonoid.{u6} R' _inst_12) (MulActionWithZero.toMulAction.{u6, u2} R' N₂ (Semiring.toMonoidWithZero.{u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12)) (NegZeroClass.toZero.{u2} N₂ (SubNegZeroMonoid.toNegZeroClass.{u2} N₂ (SubtractionMonoid.toSubNegZeroMonoid.{u2} N₂ (SubtractionCommMonoid.toSubtractionMonoid.{u2} N₂ (AddCommGroup.toDivisionAddCommMonoid.{u2} N₂ _inst_15))))) (Module.toMulActionWithZero.{u6, u2} R' N₂ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16))))) (AlternatingMap.{u6, u5, max u2 u4, max u1 u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u3, u1} ιa ιb)) (TensorProduct.addCommMonoid.{u6, max (max u3 u5) u4, max (max u1 u5) u2} R' _inst_12 (AlternatingMap.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommMonoid.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommMonoid.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.module.{u6, u5, u4, u3, u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa R' (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_14 (smulCommClass_self.{u6, u4} R' N₁ (CommSemiring.toCommMonoid.{u6} R' _inst_12) (MulActionWithZero.toMulAction.{u6, u4} R' N₁ (Semiring.toMonoidWithZero.{u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12)) (NegZeroClass.toZero.{u4} N₁ (SubNegZeroMonoid.toNegZeroClass.{u4} N₁ (SubtractionMonoid.toSubNegZeroMonoid.{u4} N₁ (SubtractionCommMonoid.toSubtractionMonoid.{u4} N₁ (AddCommGroup.toDivisionAddCommMonoid.{u4} N₁ _inst_13))))) (Module.toMulActionWithZero.{u6, u4} R' N₁ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14)))) (AlternatingMap.module.{u6, u5, u2, u1, u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb R' (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_16 (smulCommClass_self.{u6, u2} R' N₂ (CommSemiring.toCommMonoid.{u6} R' _inst_12) (MulActionWithZero.toMulAction.{u6, u2} R' N₂ (Semiring.toMonoidWithZero.{u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12)) (NegZeroClass.toZero.{u2} N₂ (SubNegZeroMonoid.toNegZeroClass.{u2} N₂ (SubtractionMonoid.toSubNegZeroMonoid.{u2} N₂ (SubtractionCommMonoid.toSubtractionMonoid.{u2} N₂ (AddCommGroup.toDivisionAddCommMonoid.{u2} N₂ _inst_15))))) (Module.toMulActionWithZero.{u6, u2} R' N₂ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16))))) (AlternatingMap.addCommMonoid.{u6, u5, max u4 u2, max u3 u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u3, u1} ιa ιb)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, max (max u3 u5) u4, max (max u1 u5) u2} R' _inst_12 (AlternatingMap.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommMonoid.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommMonoid.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.module.{u6, u5, u4, u3, u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa R' (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_14 (smulCommClass_self.{u6, u4} R' N₁ (CommSemiring.toCommMonoid.{u6} R' _inst_12) (MulActionWithZero.toMulAction.{u6, u4} R' N₁ (Semiring.toMonoidWithZero.{u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12)) (NegZeroClass.toZero.{u4} N₁ (SubNegZeroMonoid.toNegZeroClass.{u4} N₁ (SubtractionMonoid.toSubNegZeroMonoid.{u4} N₁ (SubtractionCommMonoid.toSubtractionMonoid.{u4} N₁ (AddCommGroup.toDivisionAddCommMonoid.{u4} N₁ _inst_13))))) (Module.toMulActionWithZero.{u6, u4} R' N₁ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14)))) (AlternatingMap.module.{u6, u5, u2, u1, u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb R' (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_16 (smulCommClass_self.{u6, u2} R' N₂ (CommSemiring.toCommMonoid.{u6} R' _inst_12) (MulActionWithZero.toMulAction.{u6, u2} R' N₂ (Semiring.toMonoidWithZero.{u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12)) (NegZeroClass.toZero.{u2} N₂ (SubNegZeroMonoid.toNegZeroClass.{u2} N₂ (SubtractionMonoid.toSubNegZeroMonoid.{u2} N₂ (SubtractionCommMonoid.toSubtractionMonoid.{u2} N₂ (AddCommGroup.toDivisionAddCommMonoid.{u2} N₂ _inst_15))))) (Module.toMulActionWithZero.{u6, u2} R' N₂ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16))))) (AlternatingMap.module.{u6, u5, max u4 u2, max u3 u1, u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u3, u1} ιa ιb) R' (CommSemiring.toSemiring.{u6} R' _inst_12) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (smulCommClass_self.{u6, max u4 u2} R' (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toCommMonoid.{u6} R' _inst_12) (MulActionWithZero.toMulAction.{u6, max u4 u2} R' (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (Semiring.toMonoidWithZero.{u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12)) (NegZeroClass.toZero.{max u4 u2} (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (SubNegZeroMonoid.toNegZeroClass.{max u4 u2} (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (SubtractionMonoid.toSubNegZeroMonoid.{max u4 u2} (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (SubtractionCommMonoid.toSubtractionMonoid.{max u4 u2} (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toDivisionAddCommMonoid.{max u4 u2} (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u6, u4, u2} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)))))) (Module.toMulActionWithZero.{u6, max u4 u2} R' (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u6} R' _inst_12) (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16)))))) (TensorProduct.{u6, max (max u3 u4) u5, max (max u1 u2) u5} R' _inst_12 (AlternatingMap.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommMonoid.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommMonoid.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.module.{u6, u5, u4, u3, u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa R' (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_14 (smulCommClass_self.{u6, u4} R' N₁ (CommSemiring.toCommMonoid.{u6} R' _inst_12) (MulActionWithZero.toMulAction.{u6, u4} R' N₁ (Semiring.toMonoidWithZero.{u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12)) (NegZeroClass.toZero.{u4} N₁ (SubNegZeroMonoid.toNegZeroClass.{u4} N₁ (SubtractionMonoid.toSubNegZeroMonoid.{u4} N₁ (SubtractionCommMonoid.toSubtractionMonoid.{u4} N₁ (AddCommGroup.toDivisionAddCommMonoid.{u4} N₁ _inst_13))))) (Module.toMulActionWithZero.{u6, u4} R' N₁ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14)))) (AlternatingMap.module.{u6, u5, u2, u1, u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb R' (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_16 (smulCommClass_self.{u6, u2} R' N₂ (CommSemiring.toCommMonoid.{u6} R' _inst_12) (MulActionWithZero.toMulAction.{u6, u2} R' N₂ (Semiring.toMonoidWithZero.{u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12)) (NegZeroClass.toZero.{u2} N₂ (SubNegZeroMonoid.toNegZeroClass.{u2} N₂ (SubtractionMonoid.toSubNegZeroMonoid.{u2} N₂ (SubtractionCommMonoid.toSubtractionMonoid.{u2} N₂ (AddCommGroup.toDivisionAddCommMonoid.{u2} N₂ _inst_15))))) (Module.toMulActionWithZero.{u6, u2} R' N₂ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16))))) (fun (_x : TensorProduct.{u6, max (max u3 u4) u5, max (max u1 u2) u5} R' _inst_12 (AlternatingMap.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommMonoid.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommMonoid.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.module.{u6, u5, u4, u3, u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa R' (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_14 (smulCommClass_self.{u6, u4} R' N₁ (CommSemiring.toCommMonoid.{u6} R' _inst_12) (MulActionWithZero.toMulAction.{u6, u4} R' N₁ (Semiring.toMonoidWithZero.{u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12)) (NegZeroClass.toZero.{u4} N₁ (SubNegZeroMonoid.toNegZeroClass.{u4} N₁ (SubtractionMonoid.toSubNegZeroMonoid.{u4} N₁ (SubtractionCommMonoid.toSubtractionMonoid.{u4} N₁ (AddCommGroup.toDivisionAddCommMonoid.{u4} N₁ _inst_13))))) (Module.toMulActionWithZero.{u6, u4} R' N₁ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14)))) (AlternatingMap.module.{u6, u5, u2, u1, u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb R' (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_16 (smulCommClass_self.{u6, u2} R' N₂ (CommSemiring.toCommMonoid.{u6} R' _inst_12) (MulActionWithZero.toMulAction.{u6, u2} R' N₂ (Semiring.toMonoidWithZero.{u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12)) (NegZeroClass.toZero.{u2} N₂ (SubNegZeroMonoid.toNegZeroClass.{u2} N₂ (SubtractionMonoid.toSubNegZeroMonoid.{u2} N₂ (SubtractionCommMonoid.toSubtractionMonoid.{u2} N₂ (AddCommGroup.toDivisionAddCommMonoid.{u2} N₂ _inst_15))))) (Module.toMulActionWithZero.{u6, u2} R' N₂ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16))))) => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : TensorProduct.{u6, max (max u3 u4) u5, max (max u1 u2) u5} R' _inst_12 (AlternatingMap.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommMonoid.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommMonoid.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.module.{u6, u5, u4, u3, u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa R' (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_14 (smulCommClass_self.{u6, u4} R' N₁ (CommSemiring.toCommMonoid.{u6} R' _inst_12) (MulActionWithZero.toMulAction.{u6, u4} R' N₁ (Semiring.toMonoidWithZero.{u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12)) (NegZeroClass.toZero.{u4} N₁ (SubNegZeroMonoid.toNegZeroClass.{u4} N₁ (SubtractionMonoid.toSubNegZeroMonoid.{u4} N₁ (SubtractionCommMonoid.toSubtractionMonoid.{u4} N₁ (AddCommGroup.toDivisionAddCommMonoid.{u4} N₁ _inst_13))))) (Module.toMulActionWithZero.{u6, u4} R' N₁ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14)))) (AlternatingMap.module.{u6, u5, u2, u1, u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb R' (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_16 (smulCommClass_self.{u6, u2} R' N₂ (CommSemiring.toCommMonoid.{u6} R' _inst_12) (MulActionWithZero.toMulAction.{u6, u2} R' N₂ (Semiring.toMonoidWithZero.{u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12)) (NegZeroClass.toZero.{u2} N₂ (SubNegZeroMonoid.toNegZeroClass.{u2} N₂ (SubtractionMonoid.toSubNegZeroMonoid.{u2} N₂ (SubtractionCommMonoid.toSubtractionMonoid.{u2} N₂ (AddCommGroup.toDivisionAddCommMonoid.{u2} N₂ _inst_15))))) (Module.toMulActionWithZero.{u6, u2} R' N₂ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16))))) => AlternatingMap.{u6, u5, max u2 u4, max u1 u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u3, u1} ιa ιb)) _x) (LinearMap.instFunLikeLinearMap.{u6, u6, max (max (max (max u2 u4) u5) u1) u3, max (max (max (max u2 u4) u5) u1) u3} R' R' (TensorProduct.{u6, max (max u3 u4) u5, max (max u1 u2) u5} R' _inst_12 (AlternatingMap.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommMonoid.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommMonoid.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.module.{u6, u5, u4, u3, u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa R' (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_14 (smulCommClass_self.{u6, u4} R' N₁ (CommSemiring.toCommMonoid.{u6} R' _inst_12) (MulActionWithZero.toMulAction.{u6, u4} R' N₁ (Semiring.toMonoidWithZero.{u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12)) (NegZeroClass.toZero.{u4} N₁ (SubNegZeroMonoid.toNegZeroClass.{u4} N₁ (SubtractionMonoid.toSubNegZeroMonoid.{u4} N₁ (SubtractionCommMonoid.toSubtractionMonoid.{u4} N₁ (AddCommGroup.toDivisionAddCommMonoid.{u4} N₁ _inst_13))))) (Module.toMulActionWithZero.{u6, u4} R' N₁ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14)))) (AlternatingMap.module.{u6, u5, u2, u1, u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb R' (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_16 (smulCommClass_self.{u6, u2} R' N₂ (CommSemiring.toCommMonoid.{u6} R' _inst_12) (MulActionWithZero.toMulAction.{u6, u2} R' N₂ (Semiring.toMonoidWithZero.{u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12)) (NegZeroClass.toZero.{u2} N₂ (SubNegZeroMonoid.toNegZeroClass.{u2} N₂ (SubtractionMonoid.toSubNegZeroMonoid.{u2} N₂ (SubtractionCommMonoid.toSubtractionMonoid.{u2} N₂ (AddCommGroup.toDivisionAddCommMonoid.{u2} N₂ _inst_15))))) (Module.toMulActionWithZero.{u6, u2} R' N₂ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16))))) (AlternatingMap.{u6, u5, max u2 u4, max u1 u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u3, u1} ιa ιb)) (CommSemiring.toSemiring.{u6} R' _inst_12) (CommSemiring.toSemiring.{u6} R' _inst_12) (TensorProduct.addCommMonoid.{u6, max (max u3 u5) u4, max (max u1 u5) u2} R' _inst_12 (AlternatingMap.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommMonoid.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommMonoid.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.module.{u6, u5, u4, u3, u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa R' (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_14 (smulCommClass_self.{u6, u4} R' N₁ (CommSemiring.toCommMonoid.{u6} R' _inst_12) (MulActionWithZero.toMulAction.{u6, u4} R' N₁ (Semiring.toMonoidWithZero.{u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12)) (NegZeroClass.toZero.{u4} N₁ (SubNegZeroMonoid.toNegZeroClass.{u4} N₁ (SubtractionMonoid.toSubNegZeroMonoid.{u4} N₁ (SubtractionCommMonoid.toSubtractionMonoid.{u4} N₁ (AddCommGroup.toDivisionAddCommMonoid.{u4} N₁ _inst_13))))) (Module.toMulActionWithZero.{u6, u4} R' N₁ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14)))) (AlternatingMap.module.{u6, u5, u2, u1, u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb R' (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_16 (smulCommClass_self.{u6, u2} R' N₂ (CommSemiring.toCommMonoid.{u6} R' _inst_12) (MulActionWithZero.toMulAction.{u6, u2} R' N₂ (Semiring.toMonoidWithZero.{u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12)) (NegZeroClass.toZero.{u2} N₂ (SubNegZeroMonoid.toNegZeroClass.{u2} N₂ (SubtractionMonoid.toSubNegZeroMonoid.{u2} N₂ (SubtractionCommMonoid.toSubtractionMonoid.{u2} N₂ (AddCommGroup.toDivisionAddCommMonoid.{u2} N₂ _inst_15))))) (Module.toMulActionWithZero.{u6, u2} R' N₂ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16))))) (AlternatingMap.addCommMonoid.{u6, u5, max u4 u2, max u3 u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u3, u1} ιa ιb)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, max (max u3 u5) u4, max (max u1 u5) u2} R' _inst_12 (AlternatingMap.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommMonoid.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommMonoid.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.module.{u6, u5, u4, u3, u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa R' (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_14 (smulCommClass_self.{u6, u4} R' N₁ (CommSemiring.toCommMonoid.{u6} R' _inst_12) (MulActionWithZero.toMulAction.{u6, u4} R' N₁ (Semiring.toMonoidWithZero.{u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12)) (NegZeroClass.toZero.{u4} N₁ (SubNegZeroMonoid.toNegZeroClass.{u4} N₁ (SubtractionMonoid.toSubNegZeroMonoid.{u4} N₁ (SubtractionCommMonoid.toSubtractionMonoid.{u4} N₁ (AddCommGroup.toDivisionAddCommMonoid.{u4} N₁ _inst_13))))) (Module.toMulActionWithZero.{u6, u4} R' N₁ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14)))) (AlternatingMap.module.{u6, u5, u2, u1, u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb R' (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_16 (smulCommClass_self.{u6, u2} R' N₂ (CommSemiring.toCommMonoid.{u6} R' _inst_12) (MulActionWithZero.toMulAction.{u6, u2} R' N₂ (Semiring.toMonoidWithZero.{u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12)) (NegZeroClass.toZero.{u2} N₂ (SubNegZeroMonoid.toNegZeroClass.{u2} N₂ (SubtractionMonoid.toSubNegZeroMonoid.{u2} N₂ (SubtractionCommMonoid.toSubtractionMonoid.{u2} N₂ (AddCommGroup.toDivisionAddCommMonoid.{u2} N₂ _inst_15))))) (Module.toMulActionWithZero.{u6, u2} R' N₂ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16))))) (AlternatingMap.module.{u6, u5, max u4 u2, max u3 u1, u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u3, u1} ιa ιb) R' (CommSemiring.toSemiring.{u6} R' _inst_12) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (smulCommClass_self.{u6, max u4 u2} R' (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toCommMonoid.{u6} R' _inst_12) (MulActionWithZero.toMulAction.{u6, max u4 u2} R' (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (Semiring.toMonoidWithZero.{u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12)) (NegZeroClass.toZero.{max u4 u2} (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (SubNegZeroMonoid.toNegZeroClass.{max u4 u2} (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (SubtractionMonoid.toSubNegZeroMonoid.{max u4 u2} (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (SubtractionCommMonoid.toSubtractionMonoid.{max u4 u2} (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toDivisionAddCommMonoid.{max u4 u2} (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u6, u4, u2} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)))))) (Module.toMulActionWithZero.{u6, max u4 u2} R' (TensorProduct.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u6} R' _inst_12) (TensorProduct.addCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u6, u4, u2} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_14 _inst_16))))) (RingHom.id.{u6} R' (Semiring.toNonAssocSemiring.{u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12)))) (AlternatingMap.domCoprod'.{u3, u1, u6, u5, u4, u2} ιa ιb _inst_10 _inst_11 R' Mᵢ N₁ N₂ _inst_12 _inst_13 _inst_14 _inst_15 _inst_16 _inst_17 _inst_18 (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b)) (TensorProduct.tmul.{u6, max (max u4 u5) u3, max (max u2 u5) u1} R' _inst_12 (AlternatingMap.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommMonoid.{u6, u5, u4, u3} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommMonoid.{u6, u5, u2, u1} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.module.{u6, u5, u4, u3, u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14 ιa R' (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_14 (smulCommClass_self.{u6, u4} R' N₁ (CommSemiring.toCommMonoid.{u6} R' _inst_12) (MulActionWithZero.toMulAction.{u6, u4} R' N₁ (Semiring.toMonoidWithZero.{u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12)) (NegZeroClass.toZero.{u4} N₁ (SubNegZeroMonoid.toNegZeroClass.{u4} N₁ (SubtractionMonoid.toSubNegZeroMonoid.{u4} N₁ (SubtractionCommMonoid.toSubtractionMonoid.{u4} N₁ (AddCommGroup.toDivisionAddCommMonoid.{u4} N₁ _inst_13))))) (Module.toMulActionWithZero.{u6, u4} R' N₁ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u4} N₁ _inst_13) _inst_14)))) (AlternatingMap.module.{u6, u5, u2, u1, u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16 ιb R' (CommSemiring.toSemiring.{u6} R' _inst_12) _inst_16 (smulCommClass_self.{u6, u2} R' N₂ (CommSemiring.toCommMonoid.{u6} R' _inst_12) (MulActionWithZero.toMulAction.{u6, u2} R' N₂ (Semiring.toMonoidWithZero.{u6} R' (CommSemiring.toSemiring.{u6} R' _inst_12)) (NegZeroClass.toZero.{u2} N₂ (SubNegZeroMonoid.toNegZeroClass.{u2} N₂ (SubtractionMonoid.toSubNegZeroMonoid.{u2} N₂ (SubtractionCommMonoid.toSubtractionMonoid.{u2} N₂ (AddCommGroup.toDivisionAddCommMonoid.{u2} N₂ _inst_15))))) (Module.toMulActionWithZero.{u6, u2} R' N₂ (CommSemiring.toSemiring.{u6} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u2} N₂ _inst_15) _inst_16)))) a b)) (AlternatingMap.domCoprod.{u3, u1, u6, u5, u4, u2} ιa ιb _inst_10 _inst_11 R' Mᵢ N₁ N₂ _inst_12 _inst_13 _inst_14 _inst_15 _inst_16 _inst_17 _inst_18 (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) a b)
Case conversion may be inaccurate. Consider using '#align alternating_map.dom_coprod'_apply AlternatingMap.domCoprod'_applyₓ'. -/
@[simp]
theorem domCoprod'_apply (a : AlternatingMap R' Mᵢ N₁ ιa) (b : AlternatingMap R' Mᵢ N₂ ιb) :
    domCoprod' (a ⊗ₜ[R'] b) = domCoprod a b :=
  rfl
#align alternating_map.dom_coprod'_apply AlternatingMap.domCoprod'_apply

end AlternatingMap

open Equiv

/- warning: multilinear_map.dom_coprod_alternization_coe -> MultilinearMap.domCoprod_alternization_coe is a dubious translation:
lean 3 declaration is
  forall {ιa : Type.{u1}} {ιb : Type.{u2}} [_inst_10 : Fintype.{u1} ιa] [_inst_11 : Fintype.{u2} ιb] {R' : Type.{u3}} {Mᵢ : Type.{u4}} {N₁ : Type.{u5}} {N₂ : Type.{u6}} [_inst_12 : CommSemiring.{u3} R'] [_inst_13 : AddCommGroup.{u5} N₁] [_inst_14 : Module.{u3, u5} R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13)] [_inst_15 : AddCommGroup.{u6} N₂] [_inst_16 : Module.{u3, u6} R' N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15)] [_inst_17 : AddCommMonoid.{u4} Mᵢ] [_inst_18 : Module.{u3, u4} R' Mᵢ (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_17] [_inst_19 : DecidableEq.{succ u1} ιa] [_inst_20 : DecidableEq.{succ u2} ιb] (a : MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (_x : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (b : MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (_x : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16), Eq.{max (succ (max u1 u2)) (succ u4) (succ (max u5 u6))} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.domCoprod.{u3, u1, u2, u5, u6, u4} R' ιa ιb _inst_12 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 Mᵢ _inst_17 _inst_18 ((fun (a : Sort.{max (succ u4) (succ u5) (succ u1)}) (b : Sort.{max (succ u1) (succ u4) (succ u5)}) [self : HasLiftT.{max (succ u4) (succ u5) (succ u1), max (succ u1) (succ u4) (succ u5)} a b] => self.0) (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (_x : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (HasLiftT.mk.{max (succ u4) (succ u5) (succ u1), max (succ u1) (succ u4) (succ u5)} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (_x : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (CoeTCₓ.coe.{max (succ u4) (succ u5) (succ u1), max (succ u1) (succ u4) (succ u5)} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (_x : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (coeBase.{max (succ u4) (succ u5) (succ u1), max (succ u1) (succ u4) (succ u5)} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (_x : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AlternatingMap.coe.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa)))) (coeFn.{max (succ (max u4 u5 u1)) (succ (max u1 u4 u5)), max (succ (max u1 u4 u5)) (succ (max u4 u5 u1))} (AddMonoidHom.{max u1 u4 u5, max u4 u5 u1} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AddMonoid.toAddZeroClass.{max u1 u4 u5} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (SubNegMonoid.toAddMonoid.{max u1 u4 u5} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddGroup.toSubNegMonoid.{max u1 u4 u5} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddCommGroup.toAddGroup.{max u1 u4 u5} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (MultilinearMap.addCommGroup.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) _inst_13 (fun (i : ιa) => _inst_18) _inst_14))))) (AddMonoid.toAddZeroClass.{max u4 u5 u1} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (SubNegMonoid.toAddMonoid.{max u4 u5 u1} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AddGroup.toSubNegMonoid.{max u4 u5 u1} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AddCommGroup.toAddGroup.{max u4 u5 u1} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommGroup.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ _inst_13 _inst_14 ιa)))))) (fun (_x : AddMonoidHom.{max u1 u4 u5, max u4 u5 u1} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AddMonoid.toAddZeroClass.{max u1 u4 u5} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (SubNegMonoid.toAddMonoid.{max u1 u4 u5} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddGroup.toSubNegMonoid.{max u1 u4 u5} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddCommGroup.toAddGroup.{max u1 u4 u5} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (MultilinearMap.addCommGroup.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) _inst_13 (fun (i : ιa) => _inst_18) _inst_14))))) (AddMonoid.toAddZeroClass.{max u4 u5 u1} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (SubNegMonoid.toAddMonoid.{max u4 u5 u1} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AddGroup.toSubNegMonoid.{max u4 u5 u1} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AddCommGroup.toAddGroup.{max u4 u5 u1} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommGroup.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ _inst_13 _inst_14 ιa)))))) => (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) -> (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa)) (AddMonoidHom.hasCoeToFun.{max u1 u4 u5, max u4 u5 u1} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AddMonoid.toAddZeroClass.{max u1 u4 u5} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (SubNegMonoid.toAddMonoid.{max u1 u4 u5} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddGroup.toSubNegMonoid.{max u1 u4 u5} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddCommGroup.toAddGroup.{max u1 u4 u5} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (MultilinearMap.addCommGroup.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) _inst_13 (fun (i : ιa) => _inst_18) _inst_14))))) (AddMonoid.toAddZeroClass.{max u4 u5 u1} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (SubNegMonoid.toAddMonoid.{max u4 u5 u1} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AddGroup.toSubNegMonoid.{max u4 u5 u1} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AddCommGroup.toAddGroup.{max u4 u5 u1} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommGroup.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ _inst_13 _inst_14 ιa)))))) (MultilinearMap.alternatization.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ _inst_13 _inst_14 ιa _inst_10 (fun (a : ιa) (b : ιa) => _inst_19 a b)) a)) ((fun (a : Sort.{max (succ u4) (succ u6) (succ u2)}) (b : Sort.{max (succ u2) (succ u4) (succ u6)}) [self : HasLiftT.{max (succ u4) (succ u6) (succ u2), max (succ u2) (succ u4) (succ u6)} a b] => self.0) (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (_x : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (HasLiftT.mk.{max (succ u4) (succ u6) (succ u2), max (succ u2) (succ u4) (succ u6)} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (_x : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (CoeTCₓ.coe.{max (succ u4) (succ u6) (succ u2), max (succ u2) (succ u4) (succ u6)} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (_x : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (coeBase.{max (succ u4) (succ u6) (succ u2), max (succ u2) (succ u4) (succ u6)} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (_x : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AlternatingMap.coe.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb)))) (coeFn.{max (succ (max u4 u6 u2)) (succ (max u2 u4 u6)), max (succ (max u2 u4 u6)) (succ (max u4 u6 u2))} (AddMonoidHom.{max u2 u4 u6, max u4 u6 u2} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AddMonoid.toAddZeroClass.{max u2 u4 u6} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (SubNegMonoid.toAddMonoid.{max u2 u4 u6} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddGroup.toSubNegMonoid.{max u2 u4 u6} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddCommGroup.toAddGroup.{max u2 u4 u6} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (MultilinearMap.addCommGroup.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) _inst_15 (fun (i : ιb) => _inst_18) _inst_16))))) (AddMonoid.toAddZeroClass.{max u4 u6 u2} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (SubNegMonoid.toAddMonoid.{max u4 u6 u2} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AddGroup.toSubNegMonoid.{max u4 u6 u2} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AddCommGroup.toAddGroup.{max u4 u6 u2} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommGroup.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ _inst_15 _inst_16 ιb)))))) (fun (_x : AddMonoidHom.{max u2 u4 u6, max u4 u6 u2} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AddMonoid.toAddZeroClass.{max u2 u4 u6} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (SubNegMonoid.toAddMonoid.{max u2 u4 u6} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddGroup.toSubNegMonoid.{max u2 u4 u6} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddCommGroup.toAddGroup.{max u2 u4 u6} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (MultilinearMap.addCommGroup.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) _inst_15 (fun (i : ιb) => _inst_18) _inst_16))))) (AddMonoid.toAddZeroClass.{max u4 u6 u2} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (SubNegMonoid.toAddMonoid.{max u4 u6 u2} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AddGroup.toSubNegMonoid.{max u4 u6 u2} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AddCommGroup.toAddGroup.{max u4 u6 u2} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommGroup.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ _inst_15 _inst_16 ιb)))))) => (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) -> (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb)) (AddMonoidHom.hasCoeToFun.{max u2 u4 u6, max u4 u6 u2} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AddMonoid.toAddZeroClass.{max u2 u4 u6} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (SubNegMonoid.toAddMonoid.{max u2 u4 u6} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddGroup.toSubNegMonoid.{max u2 u4 u6} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddCommGroup.toAddGroup.{max u2 u4 u6} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (MultilinearMap.addCommGroup.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) _inst_15 (fun (i : ιb) => _inst_18) _inst_16))))) (AddMonoid.toAddZeroClass.{max u4 u6 u2} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (SubNegMonoid.toAddMonoid.{max u4 u6 u2} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AddGroup.toSubNegMonoid.{max u4 u6 u2} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AddCommGroup.toAddGroup.{max u4 u6 u2} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommGroup.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ _inst_15 _inst_16 ιb)))))) (MultilinearMap.alternatization.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ _inst_15 _inst_16 ιb _inst_11 (fun (a : ιb) (b : ιb) => _inst_20 a b)) b))) (Finset.sum.{max (max u1 u2) u4 u5 u6, u1} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (Equiv.Perm.{succ u1} ιa) (MultilinearMap.addCommMonoid.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (Finset.univ.{u1} (Equiv.Perm.{succ u1} ιa) (Equiv.fintype.{u1, u1} ιa ιa (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιa) (b : ιa) => _inst_19 a b) _inst_10 _inst_10)) (fun (σa : Equiv.Perm.{succ u1} ιa) => Finset.sum.{max (max u1 u2) u4 u5 u6, u2} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (Equiv.Perm.{succ u2} ιb) (MultilinearMap.addCommMonoid.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (Finset.univ.{u2} (Equiv.Perm.{succ u2} ιb) (Equiv.fintype.{u2, u2} ιb ιb (fun (a : ιb) (b : ιb) => _inst_20 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) _inst_11 _inst_11)) (fun (σb : Equiv.Perm.{succ u2} ιb) => SMul.smul.{0, max (max u1 u2) u4 u5 u6} (Units.{0} Int Int.monoid) (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.hasSmul.{u4, max u5 u6, max u1 u2, 0, u3} (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Units.{0} Int Int.monoid) R' (DivInvMonoid.toMonoid.{0} (Units.{0} Int Int.monoid) (Group.toDivInvMonoid.{0} (Units.{0} Int Int.monoid) (Units.group.{0} Int Int.monoid))) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.leftDistribMulAction.{u3, 0, u5, u6} R' _inst_12 (Units.{0} Int Int.monoid) (DivInvMonoid.toMonoid.{0} (Units.{0} Int Int.monoid) (Group.toDivInvMonoid.{0} (Units.{0} Int Int.monoid) (Units.group.{0} Int Int.monoid))) N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16 (Units.distribMulAction.{0, u5} Int N₁ Int.monoid (AddCommMonoid.toAddMonoid.{u5} N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13)) (Module.toDistribMulAction.{0, u5} Int N₁ Int.semiring (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.intModule.{u5} N₁ _inst_13))) (Units.smulCommClass_right.{u3, 0, u5} R' Int N₁ Int.monoid (SMulZeroClass.toHasSmul.{u3, u5} R' N₁ (AddZeroClass.toHasZero.{u5} N₁ (AddMonoid.toAddZeroClass.{u5} N₁ (AddCommMonoid.toAddMonoid.{u5} N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13)))) (SMulWithZero.toSmulZeroClass.{u3, u5} R' N₁ (MulZeroClass.toHasZero.{u3} R' (MulZeroOneClass.toMulZeroClass.{u3} R' (MonoidWithZero.toMulZeroOneClass.{u3} R' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12))))) (AddZeroClass.toHasZero.{u5} N₁ (AddMonoid.toAddZeroClass.{u5} N₁ (AddCommMonoid.toAddMonoid.{u5} N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13)))) (MulActionWithZero.toSMulWithZero.{u3, u5} R' N₁ (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12)) (AddZeroClass.toHasZero.{u5} N₁ (AddMonoid.toAddZeroClass.{u5} N₁ (AddCommMonoid.toAddMonoid.{u5} N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13)))) (Module.toMulActionWithZero.{u3, u5} R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14)))) (SubNegMonoid.SMulInt.{u5} N₁ (AddGroup.toSubNegMonoid.{u5} N₁ (AddCommGroup.toAddGroup.{u5} N₁ _inst_13))) (AddGroup.int_smulCommClass'.{u3, u5} R' N₁ (MonoidWithZero.toMonoid.{u3} R' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12))) (AddCommGroup.toAddGroup.{u5} N₁ _inst_13) (Module.toDistribMulAction.{u3, u5} R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14)))) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Units.smulCommClass_right.{u3, 0, max u5 u6} R' Int (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) Int.monoid (SMulZeroClass.toHasSmul.{u3, max u5 u6} R' (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddZeroClass.toHasZero.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddMonoid.toAddZeroClass.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommMonoid.toAddMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)))) (SMulWithZero.toSmulZeroClass.{u3, max u5 u6} R' (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (MulZeroClass.toHasZero.{u3} R' (MulZeroOneClass.toMulZeroClass.{u3} R' (MonoidWithZero.toMulZeroOneClass.{u3} R' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12))))) (AddZeroClass.toHasZero.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddMonoid.toAddZeroClass.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommMonoid.toAddMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)))) (MulActionWithZero.toSMulWithZero.{u3, max u5 u6} R' (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12)) (AddZeroClass.toHasZero.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddMonoid.toAddZeroClass.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommMonoid.toAddMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)))) (Module.toMulActionWithZero.{u3, max u5 u6} R' (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16))))) (TensorProduct.leftHasSMul.{u3, 0, u5, u6} R' _inst_12 Int Int.monoid N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16 (Module.toDistribMulAction.{0, u5} Int N₁ Int.semiring (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.intModule.{u5} N₁ _inst_13)) (AddGroup.int_smulCommClass'.{u3, u5} R' N₁ (MonoidWithZero.toMonoid.{u3} R' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12))) (AddCommGroup.toAddGroup.{u5} N₁ _inst_13) (Module.toDistribMulAction.{u3, u5} R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14))) (AddGroup.int_smulCommClass'.{u3, max u5 u6} R' (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (MonoidWithZero.toMonoid.{u3} R' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12))) (AddCommGroup.toAddGroup.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.distribMulAction.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)))) (coeFn.{succ u1, succ u1} (MonoidHom.{u1, 0} (Equiv.Perm.{succ u1} ιa) (Units.{0} Int Int.monoid) (Monoid.toMulOneClass.{u1} (Equiv.Perm.{succ u1} ιa) (DivInvMonoid.toMonoid.{u1} (Equiv.Perm.{succ u1} ιa) (Group.toDivInvMonoid.{u1} (Equiv.Perm.{succ u1} ιa) (Equiv.Perm.permGroup.{u1} ιa)))) (Units.mulOneClass.{0} Int Int.monoid)) (fun (_x : MonoidHom.{u1, 0} (Equiv.Perm.{succ u1} ιa) (Units.{0} Int Int.monoid) (Monoid.toMulOneClass.{u1} (Equiv.Perm.{succ u1} ιa) (DivInvMonoid.toMonoid.{u1} (Equiv.Perm.{succ u1} ιa) (Group.toDivInvMonoid.{u1} (Equiv.Perm.{succ u1} ιa) (Equiv.Perm.permGroup.{u1} ιa)))) (Units.mulOneClass.{0} Int Int.monoid)) => (Equiv.Perm.{succ u1} ιa) -> (Units.{0} Int Int.monoid)) (MonoidHom.hasCoeToFun.{u1, 0} (Equiv.Perm.{succ u1} ιa) (Units.{0} Int Int.monoid) (Monoid.toMulOneClass.{u1} (Equiv.Perm.{succ u1} ιa) (DivInvMonoid.toMonoid.{u1} (Equiv.Perm.{succ u1} ιa) (Group.toDivInvMonoid.{u1} (Equiv.Perm.{succ u1} ιa) (Equiv.Perm.permGroup.{u1} ιa)))) (Units.mulOneClass.{0} Int Int.monoid)) (Equiv.Perm.sign.{u1} ιa (fun (a : ιa) (b : ιa) => _inst_19 a b) _inst_10) σa) (SMul.smul.{0, max (max u1 u2) u4 u5 u6} (Units.{0} Int Int.monoid) (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.hasSmul.{u4, max u5 u6, max u1 u2, 0, u3} (Sum.{u1, u2} ιa ιb) (fun (_x : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Units.{0} Int Int.monoid) R' (DivInvMonoid.toMonoid.{0} (Units.{0} Int Int.monoid) (Group.toDivInvMonoid.{0} (Units.{0} Int Int.monoid) (Units.group.{0} Int Int.monoid))) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.leftDistribMulAction.{u3, 0, u5, u6} R' _inst_12 (Units.{0} Int Int.monoid) (DivInvMonoid.toMonoid.{0} (Units.{0} Int Int.monoid) (Group.toDivInvMonoid.{0} (Units.{0} Int Int.monoid) (Units.group.{0} Int Int.monoid))) N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16 (Units.distribMulAction.{0, u5} Int N₁ Int.monoid (AddCommMonoid.toAddMonoid.{u5} N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13)) (Module.toDistribMulAction.{0, u5} Int N₁ Int.semiring (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.intModule.{u5} N₁ _inst_13))) (Units.smulCommClass_right.{u3, 0, u5} R' Int N₁ Int.monoid (SMulZeroClass.toHasSmul.{u3, u5} R' N₁ (AddZeroClass.toHasZero.{u5} N₁ (AddMonoid.toAddZeroClass.{u5} N₁ (AddCommMonoid.toAddMonoid.{u5} N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13)))) (SMulWithZero.toSmulZeroClass.{u3, u5} R' N₁ (MulZeroClass.toHasZero.{u3} R' (MulZeroOneClass.toMulZeroClass.{u3} R' (MonoidWithZero.toMulZeroOneClass.{u3} R' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12))))) (AddZeroClass.toHasZero.{u5} N₁ (AddMonoid.toAddZeroClass.{u5} N₁ (AddCommMonoid.toAddMonoid.{u5} N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13)))) (MulActionWithZero.toSMulWithZero.{u3, u5} R' N₁ (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12)) (AddZeroClass.toHasZero.{u5} N₁ (AddMonoid.toAddZeroClass.{u5} N₁ (AddCommMonoid.toAddMonoid.{u5} N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13)))) (Module.toMulActionWithZero.{u3, u5} R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14)))) (SubNegMonoid.SMulInt.{u5} N₁ (AddGroup.toSubNegMonoid.{u5} N₁ (AddCommGroup.toAddGroup.{u5} N₁ _inst_13))) (AddGroup.int_smulCommClass'.{u3, u5} R' N₁ (MonoidWithZero.toMonoid.{u3} R' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12))) (AddCommGroup.toAddGroup.{u5} N₁ _inst_13) (Module.toDistribMulAction.{u3, u5} R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14)))) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Units.smulCommClass_right.{u3, 0, max u5 u6} R' Int (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) Int.monoid (SMulZeroClass.toHasSmul.{u3, max u5 u6} R' (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddZeroClass.toHasZero.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddMonoid.toAddZeroClass.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommMonoid.toAddMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)))) (SMulWithZero.toSmulZeroClass.{u3, max u5 u6} R' (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (MulZeroClass.toHasZero.{u3} R' (MulZeroOneClass.toMulZeroClass.{u3} R' (MonoidWithZero.toMulZeroOneClass.{u3} R' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12))))) (AddZeroClass.toHasZero.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddMonoid.toAddZeroClass.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommMonoid.toAddMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)))) (MulActionWithZero.toSMulWithZero.{u3, max u5 u6} R' (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12)) (AddZeroClass.toHasZero.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddMonoid.toAddZeroClass.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommMonoid.toAddMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)))) (Module.toMulActionWithZero.{u3, max u5 u6} R' (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (TensorProduct.addCommMonoid.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16))))) (TensorProduct.leftHasSMul.{u3, 0, u5, u6} R' _inst_12 Int Int.monoid N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16 (Module.toDistribMulAction.{0, u5} Int N₁ Int.semiring (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.intModule.{u5} N₁ _inst_13)) (AddGroup.int_smulCommClass'.{u3, u5} R' N₁ (MonoidWithZero.toMonoid.{u3} R' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12))) (AddCommGroup.toAddGroup.{u5} N₁ _inst_13) (Module.toDistribMulAction.{u3, u5} R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14))) (AddGroup.int_smulCommClass'.{u3, max u5 u6} R' (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (MonoidWithZero.toMonoid.{u3} R' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12))) (AddCommGroup.toAddGroup.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.distribMulAction.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)))) (coeFn.{succ u2, succ u2} (MonoidHom.{u2, 0} (Equiv.Perm.{succ u2} ιb) (Units.{0} Int Int.monoid) (Monoid.toMulOneClass.{u2} (Equiv.Perm.{succ u2} ιb) (DivInvMonoid.toMonoid.{u2} (Equiv.Perm.{succ u2} ιb) (Group.toDivInvMonoid.{u2} (Equiv.Perm.{succ u2} ιb) (Equiv.Perm.permGroup.{u2} ιb)))) (Units.mulOneClass.{0} Int Int.monoid)) (fun (_x : MonoidHom.{u2, 0} (Equiv.Perm.{succ u2} ιb) (Units.{0} Int Int.monoid) (Monoid.toMulOneClass.{u2} (Equiv.Perm.{succ u2} ιb) (DivInvMonoid.toMonoid.{u2} (Equiv.Perm.{succ u2} ιb) (Group.toDivInvMonoid.{u2} (Equiv.Perm.{succ u2} ιb) (Equiv.Perm.permGroup.{u2} ιb)))) (Units.mulOneClass.{0} Int Int.monoid)) => (Equiv.Perm.{succ u2} ιb) -> (Units.{0} Int Int.monoid)) (MonoidHom.hasCoeToFun.{u2, 0} (Equiv.Perm.{succ u2} ιb) (Units.{0} Int Int.monoid) (Monoid.toMulOneClass.{u2} (Equiv.Perm.{succ u2} ιb) (DivInvMonoid.toMonoid.{u2} (Equiv.Perm.{succ u2} ιb) (Group.toDivInvMonoid.{u2} (Equiv.Perm.{succ u2} ιb) (Equiv.Perm.permGroup.{u2} ιb)))) (Units.mulOneClass.{0} Int Int.monoid)) (Equiv.Perm.sign.{u2} ιb (fun (a : ιb) (b : ιb) => _inst_20 a b) _inst_11) σb) (MultilinearMap.domCoprod.{u3, u1, u2, u5, u6, u4} R' ιa ιb _inst_12 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 Mᵢ _inst_17 _inst_18 (MultilinearMap.domDomCongr.{u3, u4, u5, u1, u1} R' Mᵢ N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_17 (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_18 _inst_14 ιa ιa σa a) (MultilinearMap.domDomCongr.{u3, u4, u6, u2, u2} R' Mᵢ N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_17 (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_18 _inst_16 ιb ιb σb b))))))
but is expected to have type
  forall {ιa : Type.{u6}} {ιb : Type.{u5}} [_inst_10 : Fintype.{u6} ιa] [_inst_11 : Fintype.{u5} ιb] {R' : Type.{u4}} {Mᵢ : Type.{u3}} {N₁ : Type.{u2}} {N₂ : Type.{u1}} [_inst_12 : CommSemiring.{u4} R'] [_inst_13 : AddCommGroup.{u2} N₁] [_inst_14 : Module.{u4, u2} R' N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13)] [_inst_15 : AddCommGroup.{u1} N₂] [_inst_16 : Module.{u4, u1} R' N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15)] [_inst_17 : AddCommMonoid.{u3} Mᵢ] [_inst_18 : Module.{u4, u3} R' Mᵢ (CommSemiring.toSemiring.{u4} R' _inst_12) _inst_17] [_inst_19 : DecidableEq.{succ u6} ιa] [_inst_20 : DecidableEq.{succ u5} ιb] (a : MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (_x : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (b : MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (_x : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16), Eq.{max (max (max (max (succ u6) (succ u5)) (succ u3)) (succ u2)) (succ u1)} (MultilinearMap.{u4, u3, max u1 u2, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (_x : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.domCoprod.{u4, u6, u5, u2, u1, u3} R' ιa ιb _inst_12 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 Mᵢ _inst_17 _inst_18 (AlternatingMap.toMultilinearMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa (FunLike.coe.{max (max (succ u6) (succ u2)) (succ u3), max (max (succ u6) (succ u2)) (succ u3), max (max (succ u6) (succ u2)) (succ u3)} (AddMonoidHom.{max (max u6 u2) u3, max (max u6 u2) u3} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddMonoid.toAddZeroClass.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddGroup.toSubNegMonoid.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddCommGroup.toAddGroup.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) _inst_13 (fun (i : ιa) => _inst_18) _inst_14))))) (AddMonoid.toAddZeroClass.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddGroup.toSubNegMonoid.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddCommGroup.toAddGroup.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommGroup.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ _inst_13 _inst_14 ιa)))))) (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (fun (_x : MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) => AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) _x) (AddHomClass.toFunLike.{max (max u6 u2) u3, max (max u6 u2) u3, max (max u6 u2) u3} (AddMonoidHom.{max (max u6 u2) u3, max (max u6 u2) u3} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddMonoid.toAddZeroClass.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddGroup.toSubNegMonoid.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddCommGroup.toAddGroup.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) _inst_13 (fun (i : ιa) => _inst_18) _inst_14))))) (AddMonoid.toAddZeroClass.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddGroup.toSubNegMonoid.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddCommGroup.toAddGroup.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommGroup.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ _inst_13 _inst_14 ιa)))))) (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddZeroClass.toAdd.{max (max u6 u2) u3} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddMonoid.toAddZeroClass.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddGroup.toSubNegMonoid.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddCommGroup.toAddGroup.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) _inst_13 (fun (i : ιa) => _inst_18) _inst_14)))))) (AddZeroClass.toAdd.{max (max u6 u2) u3} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddMonoid.toAddZeroClass.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddGroup.toSubNegMonoid.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddCommGroup.toAddGroup.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommGroup.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ _inst_13 _inst_14 ιa)))))) (AddMonoidHomClass.toAddHomClass.{max (max u6 u2) u3, max (max u6 u2) u3, max (max u6 u2) u3} (AddMonoidHom.{max (max u6 u2) u3, max (max u6 u2) u3} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddMonoid.toAddZeroClass.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddGroup.toSubNegMonoid.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddCommGroup.toAddGroup.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) _inst_13 (fun (i : ιa) => _inst_18) _inst_14))))) (AddMonoid.toAddZeroClass.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddGroup.toSubNegMonoid.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddCommGroup.toAddGroup.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommGroup.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ _inst_13 _inst_14 ιa)))))) (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddMonoid.toAddZeroClass.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddGroup.toSubNegMonoid.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddCommGroup.toAddGroup.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) _inst_13 (fun (i : ιa) => _inst_18) _inst_14))))) (AddMonoid.toAddZeroClass.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddGroup.toSubNegMonoid.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddCommGroup.toAddGroup.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommGroup.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ _inst_13 _inst_14 ιa))))) (AddMonoidHom.addMonoidHomClass.{max (max u6 u2) u3, max (max u6 u2) u3} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddMonoid.toAddZeroClass.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddGroup.toSubNegMonoid.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddCommGroup.toAddGroup.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) _inst_13 (fun (i : ιa) => _inst_18) _inst_14))))) (AddMonoid.toAddZeroClass.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddGroup.toSubNegMonoid.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddCommGroup.toAddGroup.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommGroup.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ _inst_13 _inst_14 ιa)))))))) (MultilinearMap.alternatization.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ _inst_13 _inst_14 ιa _inst_10 (fun (a : ιa) (b : ιa) => _inst_19 a b)) a)) (AlternatingMap.toMultilinearMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb (FunLike.coe.{max (max (succ u5) (succ u1)) (succ u3), max (max (succ u5) (succ u1)) (succ u3), max (max (succ u5) (succ u1)) (succ u3)} (AddMonoidHom.{max (max u5 u1) u3, max (max u5 u1) u3} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddMonoid.toAddZeroClass.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (SubNegMonoid.toAddMonoid.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddGroup.toSubNegMonoid.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddCommGroup.toAddGroup.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) _inst_15 (fun (i : ιb) => _inst_18) _inst_16))))) (AddMonoid.toAddZeroClass.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (SubNegMonoid.toAddMonoid.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddGroup.toSubNegMonoid.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddCommGroup.toAddGroup.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommGroup.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ _inst_15 _inst_16 ιb)))))) (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (fun (_x : MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) => AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) _x) (AddHomClass.toFunLike.{max (max u5 u1) u3, max (max u5 u1) u3, max (max u5 u1) u3} (AddMonoidHom.{max (max u5 u1) u3, max (max u5 u1) u3} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddMonoid.toAddZeroClass.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (SubNegMonoid.toAddMonoid.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddGroup.toSubNegMonoid.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddCommGroup.toAddGroup.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) _inst_15 (fun (i : ιb) => _inst_18) _inst_16))))) (AddMonoid.toAddZeroClass.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (SubNegMonoid.toAddMonoid.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddGroup.toSubNegMonoid.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddCommGroup.toAddGroup.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommGroup.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ _inst_15 _inst_16 ιb)))))) (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddZeroClass.toAdd.{max (max u5 u1) u3} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddMonoid.toAddZeroClass.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (SubNegMonoid.toAddMonoid.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddGroup.toSubNegMonoid.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddCommGroup.toAddGroup.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) _inst_15 (fun (i : ιb) => _inst_18) _inst_16)))))) (AddZeroClass.toAdd.{max (max u5 u1) u3} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddMonoid.toAddZeroClass.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (SubNegMonoid.toAddMonoid.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddGroup.toSubNegMonoid.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddCommGroup.toAddGroup.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommGroup.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ _inst_15 _inst_16 ιb)))))) (AddMonoidHomClass.toAddHomClass.{max (max u5 u1) u3, max (max u5 u1) u3, max (max u5 u1) u3} (AddMonoidHom.{max (max u5 u1) u3, max (max u5 u1) u3} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddMonoid.toAddZeroClass.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (SubNegMonoid.toAddMonoid.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddGroup.toSubNegMonoid.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddCommGroup.toAddGroup.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) _inst_15 (fun (i : ιb) => _inst_18) _inst_16))))) (AddMonoid.toAddZeroClass.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (SubNegMonoid.toAddMonoid.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddGroup.toSubNegMonoid.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddCommGroup.toAddGroup.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommGroup.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ _inst_15 _inst_16 ιb)))))) (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddMonoid.toAddZeroClass.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (SubNegMonoid.toAddMonoid.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddGroup.toSubNegMonoid.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddCommGroup.toAddGroup.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) _inst_15 (fun (i : ιb) => _inst_18) _inst_16))))) (AddMonoid.toAddZeroClass.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (SubNegMonoid.toAddMonoid.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddGroup.toSubNegMonoid.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddCommGroup.toAddGroup.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommGroup.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ _inst_15 _inst_16 ιb))))) (AddMonoidHom.addMonoidHomClass.{max (max u5 u1) u3, max (max u5 u1) u3} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddMonoid.toAddZeroClass.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (SubNegMonoid.toAddMonoid.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddGroup.toSubNegMonoid.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddCommGroup.toAddGroup.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) _inst_15 (fun (i : ιb) => _inst_18) _inst_16))))) (AddMonoid.toAddZeroClass.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (SubNegMonoid.toAddMonoid.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddGroup.toSubNegMonoid.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddCommGroup.toAddGroup.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommGroup.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ _inst_15 _inst_16 ιb)))))))) (MultilinearMap.alternatization.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ _inst_15 _inst_16 ιb _inst_11 (fun (a : ιb) (b : ιb) => _inst_20 a b)) b))) (Finset.sum.{max (max (max (max u6 u5) u3) u2) u1, u6} (MultilinearMap.{u4, u3, max u1 u2, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (_x : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (Equiv.Perm.{succ u6} ιa) (MultilinearMap.addCommMonoid.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (_x : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (Finset.univ.{u6} (Equiv.Perm.{succ u6} ιa) (equivFintype.{u6, u6} ιa ιa (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιa) (b : ιa) => _inst_19 a b) _inst_10 _inst_10)) (fun (σa : Equiv.Perm.{succ u6} ιa) => Finset.sum.{max (max (max (max u6 u5) u3) u2) u1, u5} (MultilinearMap.{u4, u3, max u1 u2, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (_x : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (Equiv.Perm.{succ u5} ιb) (MultilinearMap.addCommMonoid.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (_x : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (Finset.univ.{u5} (Equiv.Perm.{succ u5} ιb) (equivFintype.{u5, u5} ιb ιb (fun (a : ιb) (b : ιb) => _inst_20 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) _inst_11 _inst_11)) (fun (σb : Equiv.Perm.{succ u5} ιb) => HSMul.hSMul.{0, max (max (max (max u6 u5) u3) u2) u1, max (max (max (max u6 u5) u3) u2) u1} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : Equiv.Perm.{succ u6} ιa) => Units.{0} Int Int.instMonoidInt) σa) (MultilinearMap.{u4, u3, max u1 u2, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.176 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.{u4, u3, max u1 u2, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (_x : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (instHSMul.{0, max (max (max (max u6 u5) u3) u2) u1} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : Equiv.Perm.{succ u6} ιa) => Units.{0} Int Int.instMonoidInt) σa) (MultilinearMap.{u4, u3, max u1 u2, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.176 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (Units.instSMulUnits.{0, max (max (max (max u6 u5) u3) u2) u1} Int (MultilinearMap.{u4, u3, max u1 u2, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.176 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) Int.instMonoidInt (SubNegMonoid.SMulInt.{max (max (max (max u6 u5) u3) u2) u1} (MultilinearMap.{u4, u3, max u1 u2, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.176 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddGroup.toSubNegMonoid.{max (max (max (max u6 u5) u3) u2) u1} (MultilinearMap.{u4, u3, max u1 u2, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.176 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddCommGroup.toAddGroup.{max (max (max (max u6 u5) u3) u2) u1} (MultilinearMap.{u4, u3, max u1 u2, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.176 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.176 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16))))))) (FunLike.coe.{succ u6, succ u6, 1} (MonoidHom.{u6, 0} (Equiv.Perm.{succ u6} ιa) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u6} (Equiv.Perm.{succ u6} ιa) (DivInvMonoid.toMonoid.{u6} (Equiv.Perm.{succ u6} ιa) (Group.toDivInvMonoid.{u6} (Equiv.Perm.{succ u6} ιa) (Equiv.Perm.permGroup.{u6} ιa)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (Equiv.Perm.{succ u6} ιa) (fun (_x : Equiv.Perm.{succ u6} ιa) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : Equiv.Perm.{succ u6} ιa) => Units.{0} Int Int.instMonoidInt) _x) (MulHomClass.toFunLike.{u6, u6, 0} (MonoidHom.{u6, 0} (Equiv.Perm.{succ u6} ιa) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u6} (Equiv.Perm.{succ u6} ιa) (DivInvMonoid.toMonoid.{u6} (Equiv.Perm.{succ u6} ιa) (Group.toDivInvMonoid.{u6} (Equiv.Perm.{succ u6} ιa) (Equiv.Perm.permGroup.{u6} ιa)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (Equiv.Perm.{succ u6} ιa) (Units.{0} Int Int.instMonoidInt) (MulOneClass.toMul.{u6} (Equiv.Perm.{succ u6} ιa) (Monoid.toMulOneClass.{u6} (Equiv.Perm.{succ u6} ιa) (DivInvMonoid.toMonoid.{u6} (Equiv.Perm.{succ u6} ιa) (Group.toDivInvMonoid.{u6} (Equiv.Perm.{succ u6} ιa) (Equiv.Perm.permGroup.{u6} ιa))))) (MulOneClass.toMul.{0} (Units.{0} Int Int.instMonoidInt) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (MonoidHomClass.toMulHomClass.{u6, u6, 0} (MonoidHom.{u6, 0} (Equiv.Perm.{succ u6} ιa) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u6} (Equiv.Perm.{succ u6} ιa) (DivInvMonoid.toMonoid.{u6} (Equiv.Perm.{succ u6} ιa) (Group.toDivInvMonoid.{u6} (Equiv.Perm.{succ u6} ιa) (Equiv.Perm.permGroup.{u6} ιa)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (Equiv.Perm.{succ u6} ιa) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u6} (Equiv.Perm.{succ u6} ιa) (DivInvMonoid.toMonoid.{u6} (Equiv.Perm.{succ u6} ιa) (Group.toDivInvMonoid.{u6} (Equiv.Perm.{succ u6} ιa) (Equiv.Perm.permGroup.{u6} ιa)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt) (MonoidHom.monoidHomClass.{u6, 0} (Equiv.Perm.{succ u6} ιa) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u6} (Equiv.Perm.{succ u6} ιa) (DivInvMonoid.toMonoid.{u6} (Equiv.Perm.{succ u6} ιa) (Group.toDivInvMonoid.{u6} (Equiv.Perm.{succ u6} ιa) (Equiv.Perm.permGroup.{u6} ιa)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)))) (Equiv.Perm.sign.{u6} ιa (fun (a : ιa) (b : ιa) => _inst_19 a b) _inst_10) σa) (HSMul.hSMul.{0, max (max (max (max u3 u1) u2) u5) u6, max (max (max (max u6 u5) u3) u2) u1} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : Equiv.Perm.{succ u5} ιb) => Units.{0} Int Int.instMonoidInt) σb) (MultilinearMap.{u4, u3, max u1 u2, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.176 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.{u4, u3, max u1 u2, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (_x : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (instHSMul.{0, max (max (max (max u6 u5) u3) u2) u1} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : Equiv.Perm.{succ u5} ιb) => Units.{0} Int Int.instMonoidInt) σb) (MultilinearMap.{u4, u3, max u1 u2, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.176 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (Units.instSMulUnits.{0, max (max (max (max u6 u5) u3) u2) u1} Int (MultilinearMap.{u4, u3, max u1 u2, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.176 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) Int.instMonoidInt (SubNegMonoid.SMulInt.{max (max (max (max u6 u5) u3) u2) u1} (MultilinearMap.{u4, u3, max u1 u2, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.176 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddGroup.toSubNegMonoid.{max (max (max (max u6 u5) u3) u2) u1} (MultilinearMap.{u4, u3, max u1 u2, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.176 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddCommGroup.toAddGroup.{max (max (max (max u6 u5) u3) u2) u1} (MultilinearMap.{u4, u3, max u1 u2, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.176 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Multilinear.TensorProduct._hyg.176 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16))))))) (FunLike.coe.{succ u5, succ u5, 1} (MonoidHom.{u5, 0} (Equiv.Perm.{succ u5} ιb) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u5} (Equiv.Perm.{succ u5} ιb) (DivInvMonoid.toMonoid.{u5} (Equiv.Perm.{succ u5} ιb) (Group.toDivInvMonoid.{u5} (Equiv.Perm.{succ u5} ιb) (Equiv.Perm.permGroup.{u5} ιb)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (Equiv.Perm.{succ u5} ιb) (fun (_x : Equiv.Perm.{succ u5} ιb) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : Equiv.Perm.{succ u5} ιb) => Units.{0} Int Int.instMonoidInt) _x) (MulHomClass.toFunLike.{u5, u5, 0} (MonoidHom.{u5, 0} (Equiv.Perm.{succ u5} ιb) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u5} (Equiv.Perm.{succ u5} ιb) (DivInvMonoid.toMonoid.{u5} (Equiv.Perm.{succ u5} ιb) (Group.toDivInvMonoid.{u5} (Equiv.Perm.{succ u5} ιb) (Equiv.Perm.permGroup.{u5} ιb)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (Equiv.Perm.{succ u5} ιb) (Units.{0} Int Int.instMonoidInt) (MulOneClass.toMul.{u5} (Equiv.Perm.{succ u5} ιb) (Monoid.toMulOneClass.{u5} (Equiv.Perm.{succ u5} ιb) (DivInvMonoid.toMonoid.{u5} (Equiv.Perm.{succ u5} ιb) (Group.toDivInvMonoid.{u5} (Equiv.Perm.{succ u5} ιb) (Equiv.Perm.permGroup.{u5} ιb))))) (MulOneClass.toMul.{0} (Units.{0} Int Int.instMonoidInt) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (MonoidHomClass.toMulHomClass.{u5, u5, 0} (MonoidHom.{u5, 0} (Equiv.Perm.{succ u5} ιb) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u5} (Equiv.Perm.{succ u5} ιb) (DivInvMonoid.toMonoid.{u5} (Equiv.Perm.{succ u5} ιb) (Group.toDivInvMonoid.{u5} (Equiv.Perm.{succ u5} ιb) (Equiv.Perm.permGroup.{u5} ιb)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)) (Equiv.Perm.{succ u5} ιb) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u5} (Equiv.Perm.{succ u5} ιb) (DivInvMonoid.toMonoid.{u5} (Equiv.Perm.{succ u5} ιb) (Group.toDivInvMonoid.{u5} (Equiv.Perm.{succ u5} ιb) (Equiv.Perm.permGroup.{u5} ιb)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt) (MonoidHom.monoidHomClass.{u5, 0} (Equiv.Perm.{succ u5} ιb) (Units.{0} Int Int.instMonoidInt) (Monoid.toMulOneClass.{u5} (Equiv.Perm.{succ u5} ιb) (DivInvMonoid.toMonoid.{u5} (Equiv.Perm.{succ u5} ιb) (Group.toDivInvMonoid.{u5} (Equiv.Perm.{succ u5} ιb) (Equiv.Perm.permGroup.{u5} ιb)))) (Units.instMulOneClassUnits.{0} Int Int.instMonoidInt)))) (Equiv.Perm.sign.{u5} ιb (fun (a : ιb) (b : ιb) => _inst_20 a b) _inst_11) σb) (MultilinearMap.domCoprod.{u4, u6, u5, u2, u1, u3} R' ιa ιb _inst_12 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 Mᵢ _inst_17 _inst_18 (MultilinearMap.domDomCongr.{u4, u3, u2, u6, u6} R' Mᵢ N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) _inst_17 (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_18 _inst_14 ιa ιa σa a) (MultilinearMap.domDomCongr.{u4, u3, u1, u5, u5} R' Mᵢ N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) _inst_17 (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_18 _inst_16 ιb ιb σb b))))))
Case conversion may be inaccurate. Consider using '#align multilinear_map.dom_coprod_alternization_coe MultilinearMap.domCoprod_alternization_coeₓ'. -/
/-- A helper lemma for `multilinear_map.dom_coprod_alternization`. -/
theorem MultilinearMap.domCoprod_alternization_coe [DecidableEq ιa] [DecidableEq ιb]
    (a : MultilinearMap R' (fun _ : ιa => Mᵢ) N₁) (b : MultilinearMap R' (fun _ : ιb => Mᵢ) N₂) :
    MultilinearMap.domCoprod ↑a.alternatization ↑b.alternatization =
      ∑ (σa : Perm ιa) (σb : Perm ιb),
        σa.sign • σb.sign • MultilinearMap.domCoprod (a.domDomCongr σa) (b.domDomCongr σb) :=
  by
  simp_rw [← MultilinearMap.domCoprod'_apply, MultilinearMap.alternatization_coe]
  simp_rw [TensorProduct.sum_tmul, TensorProduct.tmul_sum, LinearMap.map_sum, ←
    TensorProduct.smul_tmul', TensorProduct.tmul_smul, LinearMap.map_smul_of_tower]
#align multilinear_map.dom_coprod_alternization_coe MultilinearMap.domCoprod_alternization_coe

open AlternatingMap

/- warning: multilinear_map.dom_coprod_alternization -> MultilinearMap.domCoprod_alternization is a dubious translation:
lean 3 declaration is
  forall {ιa : Type.{u1}} {ιb : Type.{u2}} [_inst_10 : Fintype.{u1} ιa] [_inst_11 : Fintype.{u2} ιb] {R' : Type.{u3}} {Mᵢ : Type.{u4}} {N₁ : Type.{u5}} {N₂ : Type.{u6}} [_inst_12 : CommSemiring.{u3} R'] [_inst_13 : AddCommGroup.{u5} N₁] [_inst_14 : Module.{u3, u5} R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13)] [_inst_15 : AddCommGroup.{u6} N₂] [_inst_16 : Module.{u3, u6} R' N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15)] [_inst_17 : AddCommMonoid.{u4} Mᵢ] [_inst_18 : Module.{u3, u4} R' Mᵢ (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_17] [_inst_19 : DecidableEq.{succ u1} ιa] [_inst_20 : DecidableEq.{succ u2} ιb] (a : MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (_x : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (b : MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (_x : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16), Eq.{max (succ u4) (succ (max u5 u6)) (succ (max u1 u2))} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (coeFn.{max (succ (max u4 (max u5 u6) u1 u2)) (succ (max (max u1 u2) u4 u5 u6)), max (succ (max (max u1 u2) u4 u5 u6)) (succ (max u4 (max u5 u6) u1 u2))} (AddMonoidHom.{max (max u1 u2) u4 u5 u6, max u4 (max u5 u6) u1 u2} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (AddMonoid.toAddZeroClass.{max (max u1 u2) u4 u5 u6} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (SubNegMonoid.toAddMonoid.{max (max u1 u2) u4 u5 u6} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (AddGroup.toSubNegMonoid.{max (max u1 u2) u4 u5 u6} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (AddCommGroup.toAddGroup.{max (max u1 u2) u4 u5 u6} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.addCommGroup.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)))))) (AddMonoid.toAddZeroClass.{max u4 (max u5 u6) u1 u2} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (SubNegMonoid.toAddMonoid.{max u4 (max u5 u6) u1 u2} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (AddGroup.toSubNegMonoid.{max u4 (max u5 u6) u1 u2} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (AddCommGroup.toAddGroup.{max u4 (max u5 u6) u1 u2} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (AlternatingMap.addCommGroup.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb))))))) (fun (_x : AddMonoidHom.{max (max u1 u2) u4 u5 u6, max u4 (max u5 u6) u1 u2} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (AddMonoid.toAddZeroClass.{max (max u1 u2) u4 u5 u6} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (SubNegMonoid.toAddMonoid.{max (max u1 u2) u4 u5 u6} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (AddGroup.toSubNegMonoid.{max (max u1 u2) u4 u5 u6} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (AddCommGroup.toAddGroup.{max (max u1 u2) u4 u5 u6} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.addCommGroup.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)))))) (AddMonoid.toAddZeroClass.{max u4 (max u5 u6) u1 u2} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (SubNegMonoid.toAddMonoid.{max u4 (max u5 u6) u1 u2} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (AddGroup.toSubNegMonoid.{max u4 (max u5 u6) u1 u2} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (AddCommGroup.toAddGroup.{max u4 (max u5 u6) u1 u2} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (AlternatingMap.addCommGroup.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb))))))) => (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) -> (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb))) (AddMonoidHom.hasCoeToFun.{max (max u1 u2) u4 u5 u6, max u4 (max u5 u6) u1 u2} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (AddMonoid.toAddZeroClass.{max (max u1 u2) u4 u5 u6} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (SubNegMonoid.toAddMonoid.{max (max u1 u2) u4 u5 u6} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (AddGroup.toSubNegMonoid.{max (max u1 u2) u4 u5 u6} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (AddCommGroup.toAddGroup.{max (max u1 u2) u4 u5 u6} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.addCommGroup.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)))))) (AddMonoid.toAddZeroClass.{max u4 (max u5 u6) u1 u2} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (SubNegMonoid.toAddMonoid.{max u4 (max u5 u6) u1 u2} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (AddGroup.toSubNegMonoid.{max u4 (max u5 u6) u1 u2} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (AddCommGroup.toAddGroup.{max u4 (max u5 u6) u1 u2} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (AlternatingMap.addCommGroup.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb))))))) (MultilinearMap.alternatization.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb) (Sum.fintype.{u1, u2} ιa ιb _inst_10 _inst_11) (fun (a : Sum.{u1, u2} ιa ιb) (b : Sum.{u1, u2} ιa ιb) => Sum.decidableEq.{u1, u2} ιa (fun (a : ιa) (b : ιa) => _inst_19 a b) ιb (fun (a : ιb) (b : ιb) => _inst_20 a b) a b)) (MultilinearMap.domCoprod.{u3, u1, u2, u5, u6, u4} R' ιa ιb _inst_12 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 Mᵢ _inst_17 _inst_18 a b)) (AlternatingMap.domCoprod.{u1, u2, u3, u4, u5, u6} ιa ιb _inst_10 _inst_11 R' Mᵢ N₁ N₂ _inst_12 _inst_13 _inst_14 _inst_15 _inst_16 _inst_17 _inst_18 (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) (coeFn.{max (succ (max u4 u5 u1)) (succ (max u1 u4 u5)), max (succ (max u1 u4 u5)) (succ (max u4 u5 u1))} (AddMonoidHom.{max u1 u4 u5, max u4 u5 u1} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AddMonoid.toAddZeroClass.{max u1 u4 u5} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (SubNegMonoid.toAddMonoid.{max u1 u4 u5} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddGroup.toSubNegMonoid.{max u1 u4 u5} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddCommGroup.toAddGroup.{max u1 u4 u5} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (MultilinearMap.addCommGroup.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) _inst_13 (fun (i : ιa) => _inst_18) _inst_14))))) (AddMonoid.toAddZeroClass.{max u4 u5 u1} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (SubNegMonoid.toAddMonoid.{max u4 u5 u1} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AddGroup.toSubNegMonoid.{max u4 u5 u1} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AddCommGroup.toAddGroup.{max u4 u5 u1} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommGroup.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ _inst_13 _inst_14 ιa)))))) (fun (_x : AddMonoidHom.{max u1 u4 u5, max u4 u5 u1} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AddMonoid.toAddZeroClass.{max u1 u4 u5} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (SubNegMonoid.toAddMonoid.{max u1 u4 u5} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddGroup.toSubNegMonoid.{max u1 u4 u5} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddCommGroup.toAddGroup.{max u1 u4 u5} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (MultilinearMap.addCommGroup.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) _inst_13 (fun (i : ιa) => _inst_18) _inst_14))))) (AddMonoid.toAddZeroClass.{max u4 u5 u1} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (SubNegMonoid.toAddMonoid.{max u4 u5 u1} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AddGroup.toSubNegMonoid.{max u4 u5 u1} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AddCommGroup.toAddGroup.{max u4 u5 u1} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommGroup.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ _inst_13 _inst_14 ιa)))))) => (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) -> (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa)) (AddMonoidHom.hasCoeToFun.{max u1 u4 u5, max u4 u5 u1} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AddMonoid.toAddZeroClass.{max u1 u4 u5} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (SubNegMonoid.toAddMonoid.{max u1 u4 u5} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddGroup.toSubNegMonoid.{max u1 u4 u5} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddCommGroup.toAddGroup.{max u1 u4 u5} (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (MultilinearMap.addCommGroup.{u3, u4, u5, u1} R' ιa (fun (i : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) _inst_13 (fun (i : ιa) => _inst_18) _inst_14))))) (AddMonoid.toAddZeroClass.{max u4 u5 u1} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (SubNegMonoid.toAddMonoid.{max u4 u5 u1} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AddGroup.toSubNegMonoid.{max u4 u5 u1} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AddCommGroup.toAddGroup.{max u4 u5 u1} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommGroup.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ _inst_13 _inst_14 ιa)))))) (MultilinearMap.alternatization.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ _inst_13 _inst_14 ιa _inst_10 (fun (a : ιa) (b : ιa) => _inst_19 a b)) a) (coeFn.{max (succ (max u4 u6 u2)) (succ (max u2 u4 u6)), max (succ (max u2 u4 u6)) (succ (max u4 u6 u2))} (AddMonoidHom.{max u2 u4 u6, max u4 u6 u2} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AddMonoid.toAddZeroClass.{max u2 u4 u6} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (SubNegMonoid.toAddMonoid.{max u2 u4 u6} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddGroup.toSubNegMonoid.{max u2 u4 u6} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddCommGroup.toAddGroup.{max u2 u4 u6} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (MultilinearMap.addCommGroup.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) _inst_15 (fun (i : ιb) => _inst_18) _inst_16))))) (AddMonoid.toAddZeroClass.{max u4 u6 u2} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (SubNegMonoid.toAddMonoid.{max u4 u6 u2} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AddGroup.toSubNegMonoid.{max u4 u6 u2} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AddCommGroup.toAddGroup.{max u4 u6 u2} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommGroup.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ _inst_15 _inst_16 ιb)))))) (fun (_x : AddMonoidHom.{max u2 u4 u6, max u4 u6 u2} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AddMonoid.toAddZeroClass.{max u2 u4 u6} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (SubNegMonoid.toAddMonoid.{max u2 u4 u6} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddGroup.toSubNegMonoid.{max u2 u4 u6} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddCommGroup.toAddGroup.{max u2 u4 u6} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (MultilinearMap.addCommGroup.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) _inst_15 (fun (i : ιb) => _inst_18) _inst_16))))) (AddMonoid.toAddZeroClass.{max u4 u6 u2} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (SubNegMonoid.toAddMonoid.{max u4 u6 u2} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AddGroup.toSubNegMonoid.{max u4 u6 u2} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AddCommGroup.toAddGroup.{max u4 u6 u2} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommGroup.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ _inst_15 _inst_16 ιb)))))) => (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) -> (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb)) (AddMonoidHom.hasCoeToFun.{max u2 u4 u6, max u4 u6 u2} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AddMonoid.toAddZeroClass.{max u2 u4 u6} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (SubNegMonoid.toAddMonoid.{max u2 u4 u6} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddGroup.toSubNegMonoid.{max u2 u4 u6} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddCommGroup.toAddGroup.{max u2 u4 u6} (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (MultilinearMap.addCommGroup.{u3, u4, u6, u2} R' ιb (fun (i : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) _inst_15 (fun (i : ιb) => _inst_18) _inst_16))))) (AddMonoid.toAddZeroClass.{max u4 u6 u2} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (SubNegMonoid.toAddMonoid.{max u4 u6 u2} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AddGroup.toSubNegMonoid.{max u4 u6 u2} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AddCommGroup.toAddGroup.{max u4 u6 u2} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommGroup.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ _inst_15 _inst_16 ιb)))))) (MultilinearMap.alternatization.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ _inst_15 _inst_16 ιb _inst_11 (fun (a : ιb) (b : ιb) => _inst_20 a b)) b))
but is expected to have type
  forall {ιa : Type.{u6}} {ιb : Type.{u5}} [_inst_10 : Fintype.{u6} ιa] [_inst_11 : Fintype.{u5} ιb] {R' : Type.{u4}} {Mᵢ : Type.{u3}} {N₁ : Type.{u2}} {N₂ : Type.{u1}} [_inst_12 : CommSemiring.{u4} R'] [_inst_13 : AddCommGroup.{u2} N₁] [_inst_14 : Module.{u4, u2} R' N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13)] [_inst_15 : AddCommGroup.{u1} N₂] [_inst_16 : Module.{u4, u1} R' N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15)] [_inst_17 : AddCommMonoid.{u3} Mᵢ] [_inst_18 : Module.{u4, u3} R' Mᵢ (CommSemiring.toSemiring.{u4} R' _inst_12) _inst_17] [_inst_19 : DecidableEq.{succ u6} ιa] [_inst_20 : DecidableEq.{succ u5} ιb] (a : MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (_x : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (b : MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (_x : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16), Eq.{max (max (max (max (succ u6) (succ u5)) (succ u3)) (succ u2)) (succ u1)} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) => AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (MultilinearMap.domCoprod.{u4, u6, u5, u2, u1, u3} R' ιa ιb _inst_12 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 Mᵢ _inst_17 _inst_18 a b)) (FunLike.coe.{max (max (succ (max u6 u5)) (succ (max u2 u1))) (succ u3), max (max (succ (max u6 u5)) (succ (max u2 u1))) (succ u3), max (max (succ (max u6 u5)) (succ (max u2 u1))) (succ u3)} (AddMonoidHom.{max (max (max u6 u5) u2 u1) u3, max (max (max u6 u5) u2 u1) u3} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddMonoid.toAddZeroClass.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (SubNegMonoid.toAddMonoid.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddGroup.toSubNegMonoid.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddCommGroup.toAddGroup.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)))))) (AddMonoid.toAddZeroClass.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (SubNegMonoid.toAddMonoid.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddGroup.toSubNegMonoid.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddCommGroup.toAddGroup.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AlternatingMap.addCommGroup.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb))))))) (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (fun (_x : MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) => AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) _x) (AddHomClass.toFunLike.{max (max (max u6 u5) u2 u1) u3, max (max (max u6 u5) u2 u1) u3, max (max (max u6 u5) u2 u1) u3} (AddMonoidHom.{max (max (max u6 u5) u2 u1) u3, max (max (max u6 u5) u2 u1) u3} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddMonoid.toAddZeroClass.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (SubNegMonoid.toAddMonoid.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddGroup.toSubNegMonoid.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddCommGroup.toAddGroup.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)))))) (AddMonoid.toAddZeroClass.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (SubNegMonoid.toAddMonoid.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddGroup.toSubNegMonoid.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddCommGroup.toAddGroup.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AlternatingMap.addCommGroup.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb))))))) (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddZeroClass.toAdd.{max (max (max u6 u5) u2 u1) u3} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddMonoid.toAddZeroClass.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (SubNegMonoid.toAddMonoid.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddGroup.toSubNegMonoid.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddCommGroup.toAddGroup.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16))))))) (AddZeroClass.toAdd.{max (max (max u6 u5) u2 u1) u3} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddMonoid.toAddZeroClass.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (SubNegMonoid.toAddMonoid.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddGroup.toSubNegMonoid.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddCommGroup.toAddGroup.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AlternatingMap.addCommGroup.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb))))))) (AddMonoidHomClass.toAddHomClass.{max (max (max u6 u5) u2 u1) u3, max (max (max u6 u5) u2 u1) u3, max (max (max u6 u5) u2 u1) u3} (AddMonoidHom.{max (max (max u6 u5) u2 u1) u3, max (max (max u6 u5) u2 u1) u3} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddMonoid.toAddZeroClass.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (SubNegMonoid.toAddMonoid.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddGroup.toSubNegMonoid.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddCommGroup.toAddGroup.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)))))) (AddMonoid.toAddZeroClass.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (SubNegMonoid.toAddMonoid.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddGroup.toSubNegMonoid.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddCommGroup.toAddGroup.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AlternatingMap.addCommGroup.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb))))))) (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddMonoid.toAddZeroClass.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (SubNegMonoid.toAddMonoid.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddGroup.toSubNegMonoid.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddCommGroup.toAddGroup.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)))))) (AddMonoid.toAddZeroClass.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (SubNegMonoid.toAddMonoid.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddGroup.toSubNegMonoid.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddCommGroup.toAddGroup.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AlternatingMap.addCommGroup.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)))))) (AddMonoidHom.addMonoidHomClass.{max (max (max u6 u5) u2 u1) u3, max (max (max u6 u5) u2 u1) u3} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddMonoid.toAddZeroClass.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (SubNegMonoid.toAddMonoid.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddGroup.toSubNegMonoid.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddCommGroup.toAddGroup.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)))))) (AddMonoid.toAddZeroClass.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (SubNegMonoid.toAddMonoid.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddGroup.toSubNegMonoid.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddCommGroup.toAddGroup.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AlternatingMap.addCommGroup.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb))))))))) (MultilinearMap.alternatization.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb) (instFintypeSum.{u6, u5} ιa ιb _inst_10 _inst_11) (fun (a : Sum.{u6, u5} ιa ιb) (b : Sum.{u6, u5} ιa ιb) => Sum.instDecidableEqSum.{u6, u5} ιa ιb (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) a b)) (MultilinearMap.domCoprod.{u4, u6, u5, u2, u1, u3} R' ιa ιb _inst_12 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 Mᵢ _inst_17 _inst_18 a b)) (AlternatingMap.domCoprod.{u6, u5, u4, u3, u2, u1} ιa ιb _inst_10 _inst_11 R' Mᵢ N₁ N₂ _inst_12 _inst_13 _inst_14 _inst_15 _inst_16 _inst_17 _inst_18 (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) (FunLike.coe.{max (max (succ u6) (succ u2)) (succ u3), max (max (succ u6) (succ u2)) (succ u3), max (max (succ u6) (succ u2)) (succ u3)} (AddMonoidHom.{max (max u6 u2) u3, max (max u6 u2) u3} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddMonoid.toAddZeroClass.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddGroup.toSubNegMonoid.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddCommGroup.toAddGroup.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) _inst_13 (fun (i : ιa) => _inst_18) _inst_14))))) (AddMonoid.toAddZeroClass.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddGroup.toSubNegMonoid.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddCommGroup.toAddGroup.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommGroup.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ _inst_13 _inst_14 ιa)))))) (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (fun (_x : MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) => AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) _x) (AddHomClass.toFunLike.{max (max u6 u2) u3, max (max u6 u2) u3, max (max u6 u2) u3} (AddMonoidHom.{max (max u6 u2) u3, max (max u6 u2) u3} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddMonoid.toAddZeroClass.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddGroup.toSubNegMonoid.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddCommGroup.toAddGroup.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) _inst_13 (fun (i : ιa) => _inst_18) _inst_14))))) (AddMonoid.toAddZeroClass.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddGroup.toSubNegMonoid.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddCommGroup.toAddGroup.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommGroup.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ _inst_13 _inst_14 ιa)))))) (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddZeroClass.toAdd.{max (max u6 u2) u3} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddMonoid.toAddZeroClass.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddGroup.toSubNegMonoid.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddCommGroup.toAddGroup.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) _inst_13 (fun (i : ιa) => _inst_18) _inst_14)))))) (AddZeroClass.toAdd.{max (max u6 u2) u3} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddMonoid.toAddZeroClass.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddGroup.toSubNegMonoid.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddCommGroup.toAddGroup.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommGroup.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ _inst_13 _inst_14 ιa)))))) (AddMonoidHomClass.toAddHomClass.{max (max u6 u2) u3, max (max u6 u2) u3, max (max u6 u2) u3} (AddMonoidHom.{max (max u6 u2) u3, max (max u6 u2) u3} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddMonoid.toAddZeroClass.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddGroup.toSubNegMonoid.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddCommGroup.toAddGroup.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) _inst_13 (fun (i : ιa) => _inst_18) _inst_14))))) (AddMonoid.toAddZeroClass.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddGroup.toSubNegMonoid.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddCommGroup.toAddGroup.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommGroup.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ _inst_13 _inst_14 ιa)))))) (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddMonoid.toAddZeroClass.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddGroup.toSubNegMonoid.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddCommGroup.toAddGroup.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) _inst_13 (fun (i : ιa) => _inst_18) _inst_14))))) (AddMonoid.toAddZeroClass.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddGroup.toSubNegMonoid.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddCommGroup.toAddGroup.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommGroup.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ _inst_13 _inst_14 ιa))))) (AddMonoidHom.addMonoidHomClass.{max (max u6 u2) u3, max (max u6 u2) u3} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddMonoid.toAddZeroClass.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddGroup.toSubNegMonoid.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AddCommGroup.toAddGroup.{max (max u3 u2) u6} (MultilinearMap.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u2, u6} R' ιa (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιa) => _inst_17) _inst_13 (fun (i : ιa) => _inst_18) _inst_14))))) (AddMonoid.toAddZeroClass.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (SubNegMonoid.toAddMonoid.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddGroup.toSubNegMonoid.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AddCommGroup.toAddGroup.{max (max u3 u2) u6} (AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (AlternatingMap.addCommGroup.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ _inst_13 _inst_14 ιa)))))))) (MultilinearMap.alternatization.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ _inst_13 _inst_14 ιa _inst_10 (fun (a : ιa) (b : ιa) => _inst_19 a b)) a) (FunLike.coe.{max (max (succ u5) (succ u1)) (succ u3), max (max (succ u5) (succ u1)) (succ u3), max (max (succ u5) (succ u1)) (succ u3)} (AddMonoidHom.{max (max u5 u1) u3, max (max u5 u1) u3} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddMonoid.toAddZeroClass.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (SubNegMonoid.toAddMonoid.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddGroup.toSubNegMonoid.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddCommGroup.toAddGroup.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) _inst_15 (fun (i : ιb) => _inst_18) _inst_16))))) (AddMonoid.toAddZeroClass.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (SubNegMonoid.toAddMonoid.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddGroup.toSubNegMonoid.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddCommGroup.toAddGroup.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommGroup.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ _inst_15 _inst_16 ιb)))))) (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (fun (_x : MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) => AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) _x) (AddHomClass.toFunLike.{max (max u5 u1) u3, max (max u5 u1) u3, max (max u5 u1) u3} (AddMonoidHom.{max (max u5 u1) u3, max (max u5 u1) u3} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddMonoid.toAddZeroClass.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (SubNegMonoid.toAddMonoid.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddGroup.toSubNegMonoid.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddCommGroup.toAddGroup.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) _inst_15 (fun (i : ιb) => _inst_18) _inst_16))))) (AddMonoid.toAddZeroClass.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (SubNegMonoid.toAddMonoid.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddGroup.toSubNegMonoid.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddCommGroup.toAddGroup.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommGroup.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ _inst_15 _inst_16 ιb)))))) (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddZeroClass.toAdd.{max (max u5 u1) u3} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddMonoid.toAddZeroClass.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (SubNegMonoid.toAddMonoid.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddGroup.toSubNegMonoid.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddCommGroup.toAddGroup.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) _inst_15 (fun (i : ιb) => _inst_18) _inst_16)))))) (AddZeroClass.toAdd.{max (max u5 u1) u3} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddMonoid.toAddZeroClass.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (SubNegMonoid.toAddMonoid.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddGroup.toSubNegMonoid.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddCommGroup.toAddGroup.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommGroup.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ _inst_15 _inst_16 ιb)))))) (AddMonoidHomClass.toAddHomClass.{max (max u5 u1) u3, max (max u5 u1) u3, max (max u5 u1) u3} (AddMonoidHom.{max (max u5 u1) u3, max (max u5 u1) u3} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddMonoid.toAddZeroClass.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (SubNegMonoid.toAddMonoid.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddGroup.toSubNegMonoid.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddCommGroup.toAddGroup.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) _inst_15 (fun (i : ιb) => _inst_18) _inst_16))))) (AddMonoid.toAddZeroClass.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (SubNegMonoid.toAddMonoid.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddGroup.toSubNegMonoid.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddCommGroup.toAddGroup.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommGroup.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ _inst_15 _inst_16 ιb)))))) (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddMonoid.toAddZeroClass.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (SubNegMonoid.toAddMonoid.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddGroup.toSubNegMonoid.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddCommGroup.toAddGroup.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) _inst_15 (fun (i : ιb) => _inst_18) _inst_16))))) (AddMonoid.toAddZeroClass.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (SubNegMonoid.toAddMonoid.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddGroup.toSubNegMonoid.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddCommGroup.toAddGroup.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommGroup.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ _inst_15 _inst_16 ιb))))) (AddMonoidHom.addMonoidHomClass.{max (max u5 u1) u3, max (max u5 u1) u3} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddMonoid.toAddZeroClass.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (SubNegMonoid.toAddMonoid.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddGroup.toSubNegMonoid.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AddCommGroup.toAddGroup.{max (max u3 u1) u5} (MultilinearMap.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, u1, u5} R' ιb (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : ιb) => _inst_17) _inst_15 (fun (i : ιb) => _inst_18) _inst_16))))) (AddMonoid.toAddZeroClass.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (SubNegMonoid.toAddMonoid.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddGroup.toSubNegMonoid.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AddCommGroup.toAddGroup.{max (max u3 u1) u5} (AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb) (AlternatingMap.addCommGroup.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ _inst_15 _inst_16 ιb)))))))) (MultilinearMap.alternatization.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ _inst_15 _inst_16 ιb _inst_11 (fun (a : ιb) (b : ιb) => _inst_20 a b)) b))
Case conversion may be inaccurate. Consider using '#align multilinear_map.dom_coprod_alternization MultilinearMap.domCoprod_alternizationₓ'. -/
/-- Computing the `multilinear_map.alternatization` of the `multilinear_map.dom_coprod` is the same
as computing the `alternating_map.dom_coprod` of the `multilinear_map.alternatization`s.
-/
theorem MultilinearMap.domCoprod_alternization [DecidableEq ιa] [DecidableEq ιb]
    (a : MultilinearMap R' (fun _ : ιa => Mᵢ) N₁) (b : MultilinearMap R' (fun _ : ιb => Mᵢ) N₂) :
    (MultilinearMap.domCoprod a b).alternatization =
      a.alternatization.domCoprod b.alternatization :=
  by
  apply coe_multilinear_map_injective
  rw [dom_coprod_coe, MultilinearMap.alternatization_coe,
    Finset.sum_partition (QuotientGroup.leftRel (perm.sum_congr_hom ιa ιb).range)]
  congr 1
  ext1 σ
  apply σ.induction_on' fun σ => _
  -- unfold the quotient mess left by `finset.sum_partition`
  conv in _ = Quotient.mk'' _ =>
    change Quotient.mk'' _ = Quotient.mk'' _
    rw [QuotientGroup.eq']
  -- eliminate a multiplication
  rw [← Finset.map_univ_equiv (Equiv.mulLeft σ), Finset.filter_map, Finset.sum_map]
  simp_rw [Equiv.coe_toEmbedding, Equiv.coe_mulLeft, (· ∘ ·), mul_inv_rev, inv_mul_cancel_right,
    Subgroup.inv_mem_iff, MonoidHom.mem_range, Finset.univ_filter_exists,
    Finset.sum_image (perm.sum_congr_hom_injective.inj_on _)]
  -- now we're ready to clean up the RHS, pulling out the summation
  rw [dom_coprod.summand_mk', MultilinearMap.domCoprod_alternization_coe, ← Finset.sum_product',
    Finset.univ_product_univ, ← MultilinearMap.domDomCongrEquiv_apply, AddEquiv.map_sum,
    Finset.smul_sum]
  congr 1
  ext1 ⟨al, ar⟩
  dsimp only
  -- pull out the pair of smuls on the RHS, by rewriting to `_ →ₗ[ℤ] _` and back
  rw [← AddEquiv.coe_toAddMonoidHom, ← AddMonoidHom.coe_toIntLinearMap, LinearMap.map_smul_of_tower,
    LinearMap.map_smul_of_tower, AddMonoidHom.coe_toIntLinearMap, AddEquiv.coe_toAddMonoidHom,
    MultilinearMap.domDomCongrEquiv_apply]
  -- pick up the pieces
  rw [MultilinearMap.domDomCongr_mul, perm.sign_mul, perm.sum_congr_hom_apply,
    MultilinearMap.domCoprod_domDomCongr_sumCongr, perm.sign_sum_congr, mul_smul, mul_smul]
#align multilinear_map.dom_coprod_alternization MultilinearMap.domCoprod_alternization

/- warning: multilinear_map.dom_coprod_alternization_eq -> MultilinearMap.domCoprod_alternization_eq is a dubious translation:
lean 3 declaration is
  forall {ιa : Type.{u1}} {ιb : Type.{u2}} [_inst_10 : Fintype.{u1} ιa] [_inst_11 : Fintype.{u2} ιb] {R' : Type.{u3}} {Mᵢ : Type.{u4}} {N₁ : Type.{u5}} {N₂ : Type.{u6}} [_inst_12 : CommSemiring.{u3} R'] [_inst_13 : AddCommGroup.{u5} N₁] [_inst_14 : Module.{u3, u5} R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13)] [_inst_15 : AddCommGroup.{u6} N₂] [_inst_16 : Module.{u3, u6} R' N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15)] [_inst_17 : AddCommMonoid.{u4} Mᵢ] [_inst_18 : Module.{u3, u4} R' Mᵢ (CommSemiring.toSemiring.{u3} R' _inst_12) _inst_17] [_inst_19 : DecidableEq.{succ u1} ιa] [_inst_20 : DecidableEq.{succ u2} ιb] (a : AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (b : AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb), Eq.{max (succ u4) (succ (max u5 u6)) (succ (max u1 u2))} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (coeFn.{max (succ (max u4 (max u5 u6) u1 u2)) (succ (max (max u1 u2) u4 u5 u6)), max (succ (max (max u1 u2) u4 u5 u6)) (succ (max u4 (max u5 u6) u1 u2))} (AddMonoidHom.{max (max u1 u2) u4 u5 u6, max u4 (max u5 u6) u1 u2} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (AddMonoid.toAddZeroClass.{max (max u1 u2) u4 u5 u6} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (SubNegMonoid.toAddMonoid.{max (max u1 u2) u4 u5 u6} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (AddGroup.toSubNegMonoid.{max (max u1 u2) u4 u5 u6} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (AddCommGroup.toAddGroup.{max (max u1 u2) u4 u5 u6} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.addCommGroup.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)))))) (AddMonoid.toAddZeroClass.{max u4 (max u5 u6) u1 u2} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (SubNegMonoid.toAddMonoid.{max u4 (max u5 u6) u1 u2} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (AddGroup.toSubNegMonoid.{max u4 (max u5 u6) u1 u2} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (AddCommGroup.toAddGroup.{max u4 (max u5 u6) u1 u2} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (AlternatingMap.addCommGroup.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb))))))) (fun (_x : AddMonoidHom.{max (max u1 u2) u4 u5 u6, max u4 (max u5 u6) u1 u2} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (AddMonoid.toAddZeroClass.{max (max u1 u2) u4 u5 u6} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (SubNegMonoid.toAddMonoid.{max (max u1 u2) u4 u5 u6} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (AddGroup.toSubNegMonoid.{max (max u1 u2) u4 u5 u6} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (AddCommGroup.toAddGroup.{max (max u1 u2) u4 u5 u6} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.addCommGroup.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)))))) (AddMonoid.toAddZeroClass.{max u4 (max u5 u6) u1 u2} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (SubNegMonoid.toAddMonoid.{max u4 (max u5 u6) u1 u2} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (AddGroup.toSubNegMonoid.{max u4 (max u5 u6) u1 u2} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (AddCommGroup.toAddGroup.{max u4 (max u5 u6) u1 u2} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (AlternatingMap.addCommGroup.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb))))))) => (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) -> (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb))) (AddMonoidHom.hasCoeToFun.{max (max u1 u2) u4 u5 u6, max u4 (max u5 u6) u1 u2} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (AddMonoid.toAddZeroClass.{max (max u1 u2) u4 u5 u6} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (SubNegMonoid.toAddMonoid.{max (max u1 u2) u4 u5 u6} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (AddGroup.toSubNegMonoid.{max (max u1 u2) u4 u5 u6} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (AddCommGroup.toAddGroup.{max (max u1 u2) u4 u5 u6} (MultilinearMap.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.addCommGroup.{u3, u4, max u5 u6, max u1 u2} R' (Sum.{u1, u2} ιa ιb) (fun (i : Sum.{u1, u2} ιa ιb) => Mᵢ) (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_17) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (fun (i : Sum.{u1, u2} ιa ιb) => _inst_18) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16)))))) (AddMonoid.toAddZeroClass.{max u4 (max u5 u6) u1 u2} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (SubNegMonoid.toAddMonoid.{max u4 (max u5 u6) u1 u2} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (AddGroup.toSubNegMonoid.{max u4 (max u5 u6) u1 u2} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (AddCommGroup.toAddGroup.{max u4 (max u5 u6) u1 u2} (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (AlternatingMap.addCommGroup.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb))))))) (MultilinearMap.alternatization.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb) (Sum.fintype.{u1, u2} ιa ιb _inst_10 _inst_11) (fun (a : Sum.{u1, u2} ιa ιb) (b : Sum.{u1, u2} ιa ιb) => Sum.decidableEq.{u1, u2} ιa (fun (a : ιa) (b : ιa) => _inst_19 a b) ιb (fun (a : ιb) (b : ιb) => _inst_20 a b) a b)) (MultilinearMap.domCoprod.{u3, u1, u2, u5, u6, u4} R' ιa ιb _inst_12 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 Mᵢ _inst_17 _inst_18 ((fun (a : Sort.{max (succ u4) (succ u5) (succ u1)}) (b : Sort.{max (succ u1) (succ u4) (succ u5)}) [self : HasLiftT.{max (succ u4) (succ u5) (succ u1), max (succ u1) (succ u4) (succ u5)} a b] => self.0) (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (_x : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (HasLiftT.mk.{max (succ u4) (succ u5) (succ u1), max (succ u1) (succ u4) (succ u5)} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (_x : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (CoeTCₓ.coe.{max (succ u4) (succ u5) (succ u1), max (succ u1) (succ u4) (succ u5)} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (_x : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (coeBase.{max (succ u4) (succ u5) (succ u1), max (succ u1) (succ u4) (succ u5)} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa) (MultilinearMap.{u3, u4, u5, u1} R' ιa (fun (_x : ιa) => Mᵢ) N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιa) => _inst_17) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (fun (i : ιa) => _inst_18) _inst_14) (AlternatingMap.coe.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14 ιa)))) a) ((fun (a : Sort.{max (succ u4) (succ u6) (succ u2)}) (b : Sort.{max (succ u2) (succ u4) (succ u6)}) [self : HasLiftT.{max (succ u4) (succ u6) (succ u2), max (succ u2) (succ u4) (succ u6)} a b] => self.0) (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (_x : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (HasLiftT.mk.{max (succ u4) (succ u6) (succ u2), max (succ u2) (succ u4) (succ u6)} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (_x : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (CoeTCₓ.coe.{max (succ u4) (succ u6) (succ u2), max (succ u2) (succ u4) (succ u6)} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (_x : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (coeBase.{max (succ u4) (succ u6) (succ u2), max (succ u2) (succ u4) (succ u6)} (AlternatingMap.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb) (MultilinearMap.{u3, u4, u6, u2} R' ιb (fun (_x : ιb) => Mᵢ) N₂ (CommSemiring.toSemiring.{u3} R' _inst_12) (fun (i : ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) (fun (i : ιb) => _inst_18) _inst_16) (AlternatingMap.coe.{u3, u4, u6, u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_16 ιb)))) b))) (SMul.smul.{0, max u4 (max u5 u6) u1 u2} Nat (AlternatingMap.{u3, u4, max u5 u6, max u1 u2} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb)) (AlternatingMap.smul.{u3, u4, max u5 u6, max u1 u2, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.module.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u1, u2} ιa ιb) Nat Nat.monoid (TensorProduct.leftDistribMulAction.{u3, 0, u5, u6} R' _inst_12 Nat Nat.monoid N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16 (Module.toDistribMulAction.{0, u5} Nat N₁ Nat.semiring (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommMonoid.natModule.{u5} N₁ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13))) (AddMonoid.nat_smulCommClass'.{u3, u5} R' N₁ (MonoidWithZero.toMonoid.{u3} R' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12))) (SubNegMonoid.toAddMonoid.{u5} N₁ (AddGroup.toSubNegMonoid.{u5} N₁ (AddCommGroup.toAddGroup.{u5} N₁ _inst_13))) (Module.toDistribMulAction.{u3, u5} R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) _inst_14))) (AddMonoid.nat_smulCommClass'.{u3, max u5 u6} R' (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (MonoidWithZero.toMonoid.{u3} R' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_12))) (SubNegMonoid.toAddMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddGroup.toSubNegMonoid.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddGroup.{max u5 u6} (TensorProduct.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u3, u5, u6} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)))) (TensorProduct.distribMulAction.{u3, u5, u6} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u5} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u6} N₂ _inst_15) _inst_14 _inst_16))) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat Nat.hasMul) (Nat.factorial (Fintype.card.{u1} ιa _inst_10)) (Nat.factorial (Fintype.card.{u2} ιb _inst_11))) (AlternatingMap.domCoprod.{u1, u2, u3, u4, u5, u6} ιa ιb _inst_10 _inst_11 R' Mᵢ N₁ N₂ _inst_12 _inst_13 _inst_14 _inst_15 _inst_16 _inst_17 _inst_18 (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) a b))
but is expected to have type
  forall {ιa : Type.{u6}} {ιb : Type.{u5}} [_inst_10 : Fintype.{u6} ιa] [_inst_11 : Fintype.{u5} ιb] {R' : Type.{u4}} {Mᵢ : Type.{u3}} {N₁ : Type.{u2}} {N₂ : Type.{u1}} [_inst_12 : CommSemiring.{u4} R'] [_inst_13 : AddCommGroup.{u2} N₁] [_inst_14 : Module.{u4, u2} R' N₁ (CommSemiring.toSemiring.{u4} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13)] [_inst_15 : AddCommGroup.{u1} N₂] [_inst_16 : Module.{u4, u1} R' N₂ (CommSemiring.toSemiring.{u4} R' _inst_12) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15)] [_inst_17 : AddCommMonoid.{u3} Mᵢ] [_inst_18 : Module.{u4, u3} R' Mᵢ (CommSemiring.toSemiring.{u4} R' _inst_12) _inst_17] [_inst_19 : DecidableEq.{succ u6} ιa] [_inst_20 : DecidableEq.{succ u5} ιb] (a : AlternatingMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa) (b : AlternatingMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb), Eq.{max (max (max (max (succ u6) (succ u5)) (succ u3)) (succ u2)) (succ u1)} ((fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) => AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (MultilinearMap.domCoprod.{u4, u6, u5, u2, u1, u3} R' ιa ιb _inst_12 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 Mᵢ _inst_17 _inst_18 (AlternatingMap.toMultilinearMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa a) (AlternatingMap.toMultilinearMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb b))) (FunLike.coe.{max (max (succ (max u6 u5)) (succ (max u2 u1))) (succ u3), max (max (succ (max u6 u5)) (succ (max u2 u1))) (succ u3), max (max (succ (max u6 u5)) (succ (max u2 u1))) (succ u3)} (AddMonoidHom.{max (max (max u6 u5) u2 u1) u3, max (max (max u6 u5) u2 u1) u3} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddMonoid.toAddZeroClass.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (SubNegMonoid.toAddMonoid.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddGroup.toSubNegMonoid.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddCommGroup.toAddGroup.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)))))) (AddMonoid.toAddZeroClass.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (SubNegMonoid.toAddMonoid.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddGroup.toSubNegMonoid.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddCommGroup.toAddGroup.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AlternatingMap.addCommGroup.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb))))))) (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (fun (_x : MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) => AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) _x) (AddHomClass.toFunLike.{max (max (max u6 u5) u2 u1) u3, max (max (max u6 u5) u2 u1) u3, max (max (max u6 u5) u2 u1) u3} (AddMonoidHom.{max (max (max u6 u5) u2 u1) u3, max (max (max u6 u5) u2 u1) u3} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddMonoid.toAddZeroClass.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (SubNegMonoid.toAddMonoid.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddGroup.toSubNegMonoid.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddCommGroup.toAddGroup.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)))))) (AddMonoid.toAddZeroClass.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (SubNegMonoid.toAddMonoid.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddGroup.toSubNegMonoid.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddCommGroup.toAddGroup.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AlternatingMap.addCommGroup.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb))))))) (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddZeroClass.toAdd.{max (max (max u6 u5) u2 u1) u3} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddMonoid.toAddZeroClass.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (SubNegMonoid.toAddMonoid.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddGroup.toSubNegMonoid.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddCommGroup.toAddGroup.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16))))))) (AddZeroClass.toAdd.{max (max (max u6 u5) u2 u1) u3} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddMonoid.toAddZeroClass.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (SubNegMonoid.toAddMonoid.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddGroup.toSubNegMonoid.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddCommGroup.toAddGroup.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AlternatingMap.addCommGroup.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb))))))) (AddMonoidHomClass.toAddHomClass.{max (max (max u6 u5) u2 u1) u3, max (max (max u6 u5) u2 u1) u3, max (max (max u6 u5) u2 u1) u3} (AddMonoidHom.{max (max (max u6 u5) u2 u1) u3, max (max (max u6 u5) u2 u1) u3} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddMonoid.toAddZeroClass.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (SubNegMonoid.toAddMonoid.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddGroup.toSubNegMonoid.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddCommGroup.toAddGroup.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)))))) (AddMonoid.toAddZeroClass.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (SubNegMonoid.toAddMonoid.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddGroup.toSubNegMonoid.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddCommGroup.toAddGroup.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AlternatingMap.addCommGroup.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb))))))) (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddMonoid.toAddZeroClass.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (SubNegMonoid.toAddMonoid.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddGroup.toSubNegMonoid.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddCommGroup.toAddGroup.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)))))) (AddMonoid.toAddZeroClass.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (SubNegMonoid.toAddMonoid.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddGroup.toSubNegMonoid.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddCommGroup.toAddGroup.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AlternatingMap.addCommGroup.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)))))) (AddMonoidHom.addMonoidHomClass.{max (max (max u6 u5) u2 u1) u3, max (max (max u6 u5) u2 u1) u3} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddMonoid.toAddZeroClass.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (SubNegMonoid.toAddMonoid.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddGroup.toSubNegMonoid.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (AddCommGroup.toAddGroup.{max (max u3 u2 u1) u6 u5} (MultilinearMap.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)) (MultilinearMap.instAddCommGroupMultilinearMapToAddCommMonoid.{u4, u3, max u2 u1, max u6 u5} R' (Sum.{u6, u5} ιa ιb) (fun (x._@.Mathlib.LinearAlgebra.Alternating._hyg.12951 : Sum.{u6, u5} ιa ιb) => Mᵢ) (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (CommSemiring.toSemiring.{u4} R' _inst_12) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_17) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (fun (i : Sum.{u6, u5} ιa ιb) => _inst_18) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16)))))) (AddMonoid.toAddZeroClass.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (SubNegMonoid.toAddMonoid.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddGroup.toSubNegMonoid.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddCommGroup.toAddGroup.{max (max u3 u2 u1) u6 u5} (AlternatingMap.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (AddCommGroup.toAddCommMonoid.{max u2 u1} (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16)) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AlternatingMap.addCommGroup.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb))))))))) (MultilinearMap.alternatization.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb) (instFintypeSum.{u6, u5} ιa ιb _inst_10 _inst_11) (fun (a : Sum.{u6, u5} ιa ιb) (b : Sum.{u6, u5} ιa ιb) => Sum.instDecidableEqSum.{u6, u5} ιa ιb (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) a b)) (MultilinearMap.domCoprod.{u4, u6, u5, u2, u1, u3} R' ιa ιb _inst_12 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 Mᵢ _inst_17 _inst_18 (AlternatingMap.toMultilinearMap.{u4, u3, u2, u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₁ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) _inst_14 ιa a) (AlternatingMap.toMultilinearMap.{u4, u3, u1, u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 N₂ (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_16 ιb b))) (HSMul.hSMul.{0, max (max (max (max u6 u3) u2) u1) u5, max (max (max (max u6 u5) u3) u2) u1} Nat (AlternatingMap.{u4, u3, max u1 u2, max u5 u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AlternatingMap.{u4, u3, max u1 u2, max u5 u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (instHSMul.{0, max (max (max (max u6 u5) u3) u2) u1} Nat (AlternatingMap.{u4, u3, max u1 u2, max u5 u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddMonoid.SMul.{max (max (max (max u6 u5) u3) u2) u1} (AlternatingMap.{u4, u3, max u1 u2, max u5 u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (SubNegMonoid.toAddMonoid.{max (max (max (max u6 u5) u3) u2) u1} (AlternatingMap.{u4, u3, max u1 u2, max u5 u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddGroup.toSubNegMonoid.{max (max (max (max u6 u5) u3) u2) u1} (AlternatingMap.{u4, u3, max u1 u2, max u5 u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AddCommGroup.toAddGroup.{max (max (max (max u6 u5) u3) u2) u1} (AlternatingMap.{u4, u3, max u1 u2, max u5 u6} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb)) (AlternatingMap.addCommGroup.{u4, u3, max u2 u1, max u6 u5} R' (CommSemiring.toSemiring.{u4} R' _inst_12) Mᵢ _inst_17 _inst_18 (TensorProduct.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (TensorProduct.addCommGroup.{u4, u2, u1} R' _inst_12 N₁ N₂ _inst_13 _inst_15 _inst_14 _inst_16) (TensorProduct.instModuleTensorProductToSemiringAddCommMonoid.{u4, u2, u1} R' _inst_12 N₁ N₂ (AddCommGroup.toAddCommMonoid.{u2} N₁ _inst_13) (AddCommGroup.toAddCommMonoid.{u1} N₂ _inst_15) _inst_14 _inst_16) (Sum.{u6, u5} ιa ιb))))))) (HMul.hMul.{0, 0, 0} Nat Nat Nat (instHMul.{0} Nat instMulNat) (Nat.factorial (Fintype.card.{u6} ιa _inst_10)) (Nat.factorial (Fintype.card.{u5} ιb _inst_11))) (AlternatingMap.domCoprod.{u6, u5, u4, u3, u2, u1} ιa ιb _inst_10 _inst_11 R' Mᵢ N₁ N₂ _inst_12 _inst_13 _inst_14 _inst_15 _inst_16 _inst_17 _inst_18 (fun (a : ιa) (b : ιa) => _inst_19 a b) (fun (a : ιb) (b : ιb) => _inst_20 a b) a b))
Case conversion may be inaccurate. Consider using '#align multilinear_map.dom_coprod_alternization_eq MultilinearMap.domCoprod_alternization_eqₓ'. -/
/-- Taking the `multilinear_map.alternatization` of the `multilinear_map.dom_coprod` of two
`alternating_map`s gives a scaled version of the `alternating_map.coprod` of those maps.
-/
theorem MultilinearMap.domCoprod_alternization_eq [DecidableEq ιa] [DecidableEq ιb]
    (a : AlternatingMap R' Mᵢ N₁ ιa) (b : AlternatingMap R' Mᵢ N₂ ιb) :
    (MultilinearMap.domCoprod a b :
          MultilinearMap R' (fun _ : Sum ιa ιb => Mᵢ) (N₁ ⊗ N₂)).alternatization =
      ((Fintype.card ιa).factorial * (Fintype.card ιb).factorial) • a.domCoprod b :=
  by
  rw [MultilinearMap.domCoprod_alternization, coe_alternatization, coe_alternatization, mul_smul, ←
    dom_coprod'_apply, ← dom_coprod'_apply, ← TensorProduct.smul_tmul', TensorProduct.tmul_smul,
    LinearMap.map_smul_of_tower dom_coprod', LinearMap.map_smul_of_tower dom_coprod']
  -- typeclass resolution is a little confused here
  infer_instance;
  infer_instance
#align multilinear_map.dom_coprod_alternization_eq MultilinearMap.domCoprod_alternization_eq

end Coprod

section Basis

open AlternatingMap

variable {ι₁ : Type _} [Finite ι]

variable {R' : Type _} {N₁ N₂ : Type _} [CommSemiring R'] [AddCommMonoid N₁] [AddCommMonoid N₂]

variable [Module R' N₁] [Module R' N₂]

/- warning: basis.ext_alternating -> Basis.ext_alternating is a dubious translation:
lean 3 declaration is
  forall {ι : Type.{u1}} {ι₁ : Type.{u2}} [_inst_10 : Finite.{succ u1} ι] {R' : Type.{u3}} {N₁ : Type.{u4}} {N₂ : Type.{u5}} [_inst_11 : CommSemiring.{u3} R'] [_inst_12 : AddCommMonoid.{u4} N₁] [_inst_13 : AddCommMonoid.{u5} N₂] [_inst_14 : Module.{u3, u4} R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_11) _inst_12] [_inst_15 : Module.{u3, u5} R' N₂ (CommSemiring.toSemiring.{u3} R' _inst_11) _inst_13] {f : AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_11) N₁ _inst_12 _inst_14 N₂ _inst_13 _inst_15 ι} {g : AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_11) N₁ _inst_12 _inst_14 N₂ _inst_13 _inst_15 ι} (e : Basis.{u2, u3, u4} ι₁ R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_11) _inst_12 _inst_14), (forall (v : ι -> ι₁), (Function.Injective.{succ u1, succ u2} ι ι₁ v) -> (Eq.{succ u5} N₂ (coeFn.{max (succ u4) (succ u5) (succ u1), max (max (succ u1) (succ u4)) (succ u5)} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_11) N₁ _inst_12 _inst_14 N₂ _inst_13 _inst_15 ι) (fun (_x : AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_11) N₁ _inst_12 _inst_14 N₂ _inst_13 _inst_15 ι) => (ι -> N₁) -> N₂) (AlternatingMap.coeFun.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_11) N₁ _inst_12 _inst_14 N₂ _inst_13 _inst_15 ι) f (fun (i : ι) => coeFn.{max (succ u2) (succ u3) (succ u4), max (succ u2) (succ u4)} (Basis.{u2, u3, u4} ι₁ R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_11) _inst_12 _inst_14) (fun (_x : Basis.{u2, u3, u4} ι₁ R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_11) _inst_12 _inst_14) => ι₁ -> N₁) (FunLike.hasCoeToFun.{max (succ u2) (succ u3) (succ u4), succ u2, succ u4} (Basis.{u2, u3, u4} ι₁ R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_11) _inst_12 _inst_14) ι₁ (fun (_x : ι₁) => N₁) (Basis.funLike.{u2, u3, u4} ι₁ R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_11) _inst_12 _inst_14)) e (v i))) (coeFn.{max (succ u4) (succ u5) (succ u1), max (max (succ u1) (succ u4)) (succ u5)} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_11) N₁ _inst_12 _inst_14 N₂ _inst_13 _inst_15 ι) (fun (_x : AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_11) N₁ _inst_12 _inst_14 N₂ _inst_13 _inst_15 ι) => (ι -> N₁) -> N₂) (AlternatingMap.coeFun.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_11) N₁ _inst_12 _inst_14 N₂ _inst_13 _inst_15 ι) g (fun (i : ι) => coeFn.{max (succ u2) (succ u3) (succ u4), max (succ u2) (succ u4)} (Basis.{u2, u3, u4} ι₁ R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_11) _inst_12 _inst_14) (fun (_x : Basis.{u2, u3, u4} ι₁ R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_11) _inst_12 _inst_14) => ι₁ -> N₁) (FunLike.hasCoeToFun.{max (succ u2) (succ u3) (succ u4), succ u2, succ u4} (Basis.{u2, u3, u4} ι₁ R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_11) _inst_12 _inst_14) ι₁ (fun (_x : ι₁) => N₁) (Basis.funLike.{u2, u3, u4} ι₁ R' N₁ (CommSemiring.toSemiring.{u3} R' _inst_11) _inst_12 _inst_14)) e (v i))))) -> (Eq.{max (succ u4) (succ u5) (succ u1)} (AlternatingMap.{u3, u4, u5, u1} R' (CommSemiring.toSemiring.{u3} R' _inst_11) N₁ _inst_12 _inst_14 N₂ _inst_13 _inst_15 ι) f g)
but is expected to have type
  forall {ι : Type.{u2}} {ι₁ : Type.{u1}} [_inst_10 : Finite.{succ u2} ι] {R' : Type.{u5}} {N₁ : Type.{u4}} {N₂ : Type.{u3}} [_inst_11 : CommSemiring.{u5} R'] [_inst_12 : AddCommMonoid.{u4} N₁] [_inst_13 : AddCommMonoid.{u3} N₂] [_inst_14 : Module.{u5, u4} R' N₁ (CommSemiring.toSemiring.{u5} R' _inst_11) _inst_12] [_inst_15 : Module.{u5, u3} R' N₂ (CommSemiring.toSemiring.{u5} R' _inst_11) _inst_13] {f : AlternatingMap.{u5, u4, u3, u2} R' (CommSemiring.toSemiring.{u5} R' _inst_11) N₁ _inst_12 _inst_14 N₂ _inst_13 _inst_15 ι} {g : AlternatingMap.{u5, u4, u3, u2} R' (CommSemiring.toSemiring.{u5} R' _inst_11) N₁ _inst_12 _inst_14 N₂ _inst_13 _inst_15 ι} (e : Basis.{u1, u5, u4} ι₁ R' N₁ (CommSemiring.toSemiring.{u5} R' _inst_11) _inst_12 _inst_14), (forall (v : ι -> ι₁), (Function.Injective.{succ u2, succ u1} ι ι₁ v) -> (Eq.{succ u3} N₂ (FunLike.coe.{max (max (succ u4) (succ u3)) (succ u2), max (succ u4) (succ u2), succ u3} (AlternatingMap.{u5, u4, u3, u2} R' (CommSemiring.toSemiring.{u5} R' _inst_11) N₁ _inst_12 _inst_14 N₂ _inst_13 _inst_15 ι) (ι -> N₁) (fun (_x : ι -> N₁) => N₂) (AlternatingMap.funLike.{u5, u4, u3, u2} R' (CommSemiring.toSemiring.{u5} R' _inst_11) N₁ _inst_12 _inst_14 N₂ _inst_13 _inst_15 ι) f (fun (i : ι) => FunLike.coe.{max (max (succ u1) (succ u5)) (succ u4), succ u1, succ u4} (Basis.{u1, u5, u4} ι₁ R' N₁ (CommSemiring.toSemiring.{u5} R' _inst_11) _inst_12 _inst_14) ι₁ (fun (_x : ι₁) => (fun (x._@.Mathlib.LinearAlgebra.Basis._hyg.548 : ι₁) => N₁) _x) (Basis.funLike.{u1, u5, u4} ι₁ R' N₁ (CommSemiring.toSemiring.{u5} R' _inst_11) _inst_12 _inst_14) e (v i))) (FunLike.coe.{max (max (succ u4) (succ u3)) (succ u2), max (succ u4) (succ u2), succ u3} (AlternatingMap.{u5, u4, u3, u2} R' (CommSemiring.toSemiring.{u5} R' _inst_11) N₁ _inst_12 _inst_14 N₂ _inst_13 _inst_15 ι) (ι -> N₁) (fun (_x : ι -> N₁) => N₂) (AlternatingMap.funLike.{u5, u4, u3, u2} R' (CommSemiring.toSemiring.{u5} R' _inst_11) N₁ _inst_12 _inst_14 N₂ _inst_13 _inst_15 ι) g (fun (i : ι) => FunLike.coe.{max (max (succ u1) (succ u5)) (succ u4), succ u1, succ u4} (Basis.{u1, u5, u4} ι₁ R' N₁ (CommSemiring.toSemiring.{u5} R' _inst_11) _inst_12 _inst_14) ι₁ (fun (_x : ι₁) => (fun (x._@.Mathlib.LinearAlgebra.Basis._hyg.548 : ι₁) => N₁) _x) (Basis.funLike.{u1, u5, u4} ι₁ R' N₁ (CommSemiring.toSemiring.{u5} R' _inst_11) _inst_12 _inst_14) e (v i))))) -> (Eq.{max (max (succ u2) (succ u4)) (succ u3)} (AlternatingMap.{u5, u4, u3, u2} R' (CommSemiring.toSemiring.{u5} R' _inst_11) N₁ _inst_12 _inst_14 N₂ _inst_13 _inst_15 ι) f g)
Case conversion may be inaccurate. Consider using '#align basis.ext_alternating Basis.ext_alternatingₓ'. -/
/-- Two alternating maps indexed by a `fintype` are equal if they are equal when all arguments
are distinct basis vectors. -/
theorem Basis.ext_alternating {f g : AlternatingMap R' N₁ N₂ ι} (e : Basis ι₁ R' N₁)
    (h : ∀ v : ι → ι₁, Function.Injective v → (f fun i => e (v i)) = g fun i => e (v i)) : f = g :=
  by
  classical
    refine' AlternatingMap.coe_multilinearMap_injective (Basis.ext_multilinear e fun v => _)
    by_cases hi : Function.Injective v
    · exact h v hi
    · have : ¬Function.Injective fun i => e (v i) := hi.imp Function.Injective.of_comp
      rw [coe_multilinear_map, coe_multilinear_map, f.map_eq_zero_of_not_injective _ this,
        g.map_eq_zero_of_not_injective _ this]
#align basis.ext_alternating Basis.ext_alternating

end Basis

/-! ### Currying -/


section Currying

variable {R' : Type _} {M'' M₂'' N'' N₂'' : Type _} [CommSemiring R'] [AddCommMonoid M'']
  [AddCommMonoid M₂''] [AddCommMonoid N''] [AddCommMonoid N₂''] [Module R' M''] [Module R' M₂'']
  [Module R' N''] [Module R' N₂'']

namespace AlternatingMap

#print AlternatingMap.curryLeft /-
/-- Given an alternating map `f` in `n+1` variables, split the first variable to obtain
a linear map into alternating maps in `n` variables, given by `x ↦ (m ↦ f (matrix.vec_cons x m))`.
It can be thought of as a map $Hom(\bigwedge^{n+1} M, N) \to Hom(M, Hom(\bigwedge^n M, N))$.

This is `multilinear_map.curry_left` for `alternating_map`. See also
`alternating_map.curry_left_linear_map`. -/
@[simps]
def curryLeft {n : ℕ} (f : AlternatingMap R' M'' N'' (Fin n.succ)) :
    M'' →ₗ[R'] AlternatingMap R' M'' N'' (Fin n)
    where
  toFun m :=
    {
      f.toMultilinearMap.curryLeft
        m with
      toFun := fun v => f (Matrix.vecCons m v)
      map_eq_zero_of_eq' := fun v i j hv hij =>
        f.map_eq_zero_of_eq _ (by rwa [Matrix.cons_val_succ, Matrix.cons_val_succ])
          ((Fin.succ_injective _).Ne hij) }
  map_add' m₁ m₂ := ext fun v => f.map_vecCons_add _ _ _
  map_smul' r m := ext fun v => f.map_vecCons_smul _ _ _
#align alternating_map.curry_left AlternatingMap.curryLeft
-/

/- warning: alternating_map.curry_left_zero -> AlternatingMap.curryLeft_zero is a dubious translation:
lean 3 declaration is
  forall {R' : Type.{u1}} {M'' : Type.{u2}} {N'' : Type.{u3}} [_inst_10 : CommSemiring.{u1} R'] [_inst_11 : AddCommMonoid.{u2} M''] [_inst_13 : AddCommMonoid.{u3} N''] [_inst_15 : Module.{u1, u2} R' M'' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_11] [_inst_17 : Module.{u1, u3} R' N'' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_13] {n : Nat}, Eq.{max (succ u2) (succ (max u2 u3))} (LinearMap.{u1, u1, u2, max u2 u3} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M'' (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u2, u3, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u3, u1} R' N'' _inst_10 _inst_13 _inst_17))) (AlternatingMap.curryLeft.{u1, u2, u3} R' M'' N'' _inst_10 _inst_11 _inst_13 _inst_15 _inst_17 n (OfNat.ofNat.{max u2 u3} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) 0 (OfNat.mk.{max u2 u3} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) 0 (Zero.zero.{max u2 u3} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.zero.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))))))) (OfNat.ofNat.{max u2 u3} (LinearMap.{u1, u1, u2, max u2 u3} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M'' (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u2, u3, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u3, u1} R' N'' _inst_10 _inst_13 _inst_17))) 0 (OfNat.mk.{max u2 u3} (LinearMap.{u1, u1, u2, max u2 u3} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M'' (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u2, u3, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u3, u1} R' N'' _inst_10 _inst_13 _inst_17))) 0 (Zero.zero.{max u2 u3} (LinearMap.{u1, u1, u2, max u2 u3} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M'' (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u2, u3, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u3, u1} R' N'' _inst_10 _inst_13 _inst_17))) (LinearMap.hasZero.{u1, u1, u2, max u2 u3} R' R' M'' (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u2, u3, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u3, u1} R' N'' _inst_10 _inst_13 _inst_17)) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10)))))))
but is expected to have type
  forall {R' : Type.{u1}} {M'' : Type.{u3}} {N'' : Type.{u2}} [_inst_10 : CommSemiring.{u1} R'] [_inst_11 : AddCommMonoid.{u3} M''] [_inst_13 : AddCommMonoid.{u2} N''] [_inst_15 : Module.{u1, u3} R' M'' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_11] [_inst_17 : Module.{u1, u2} R' N'' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_13] {n : Nat}, Eq.{max (succ u3) (succ u2)} (LinearMap.{u1, u1, u3, max u2 u3} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M'' (AlternatingMap.{u1, u3, u2, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u1, u3, u2, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u3, u2, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (smulCommClass_self.{u1, u2} R' N'' (CommSemiring.toCommMonoid.{u1} R' _inst_10) (MulActionWithZero.toMulAction.{u1, u2} R' N'' (Semiring.toMonoidWithZero.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10)) (AddMonoid.toZero.{u2} N'' (AddCommMonoid.toAddMonoid.{u2} N'' _inst_13)) (Module.toMulActionWithZero.{u1, u2} R' N'' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_13 _inst_17))))) (AlternatingMap.curryLeft.{u1, u3, u2} R' M'' N'' _inst_10 _inst_11 _inst_13 _inst_15 _inst_17 n (OfNat.ofNat.{max u3 u2} (AlternatingMap.{u1, u3, u2, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) 0 (Zero.toOfNat0.{max u3 u2} (AlternatingMap.{u1, u3, u2, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.zero.{u1, u3, u2, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n)))))) (OfNat.ofNat.{max u3 u2} (LinearMap.{u1, u1, u3, max u2 u3} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M'' (AlternatingMap.{u1, u3, u2, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u1, u3, u2, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u3, u2, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (smulCommClass_self.{u1, u2} R' N'' (CommSemiring.toCommMonoid.{u1} R' _inst_10) (MulActionWithZero.toMulAction.{u1, u2} R' N'' (Semiring.toMonoidWithZero.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10)) (AddMonoid.toZero.{u2} N'' (AddCommMonoid.toAddMonoid.{u2} N'' _inst_13)) (Module.toMulActionWithZero.{u1, u2} R' N'' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_13 _inst_17))))) 0 (Zero.toOfNat0.{max u3 u2} (LinearMap.{u1, u1, u3, max u2 u3} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M'' (AlternatingMap.{u1, u3, u2, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u1, u3, u2, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u3, u2, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (smulCommClass_self.{u1, u2} R' N'' (CommSemiring.toCommMonoid.{u1} R' _inst_10) (MulActionWithZero.toMulAction.{u1, u2} R' N'' (Semiring.toMonoidWithZero.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10)) (AddMonoid.toZero.{u2} N'' (AddCommMonoid.toAddMonoid.{u2} N'' _inst_13)) (Module.toMulActionWithZero.{u1, u2} R' N'' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_13 _inst_17))))) (LinearMap.instZeroLinearMap.{u1, u1, u3, max u3 u2} R' R' M'' (AlternatingMap.{u1, u3, u2, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_11 (AlternatingMap.addCommMonoid.{u1, u3, u2, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u3, u2, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (smulCommClass_self.{u1, u2} R' N'' (CommSemiring.toCommMonoid.{u1} R' _inst_10) (MulActionWithZero.toMulAction.{u1, u2} R' N'' (Semiring.toMonoidWithZero.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10)) (AddMonoid.toZero.{u2} N'' (AddCommMonoid.toAddMonoid.{u2} N'' _inst_13)) (Module.toMulActionWithZero.{u1, u2} R' N'' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_13 _inst_17)))) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))))))
Case conversion may be inaccurate. Consider using '#align alternating_map.curry_left_zero AlternatingMap.curryLeft_zeroₓ'. -/
@[simp]
theorem curryLeft_zero {n : ℕ} : curryLeft (0 : AlternatingMap R' M'' N'' (Fin n.succ)) = 0 :=
  rfl
#align alternating_map.curry_left_zero AlternatingMap.curryLeft_zero

/- warning: alternating_map.curry_left_add -> AlternatingMap.curryLeft_add is a dubious translation:
lean 3 declaration is
  forall {R' : Type.{u1}} {M'' : Type.{u2}} {N'' : Type.{u3}} [_inst_10 : CommSemiring.{u1} R'] [_inst_11 : AddCommMonoid.{u2} M''] [_inst_13 : AddCommMonoid.{u3} N''] [_inst_15 : Module.{u1, u2} R' M'' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_11] [_inst_17 : Module.{u1, u3} R' N'' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_13] {n : Nat} (f : AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (g : AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))), Eq.{max (succ u2) (succ (max u2 u3))} (LinearMap.{u1, u1, u2, max u2 u3} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M'' (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u2, u3, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u3, u1} R' N'' _inst_10 _inst_13 _inst_17))) (AlternatingMap.curryLeft.{u1, u2, u3} R' M'' N'' _inst_10 _inst_11 _inst_13 _inst_15 _inst_17 n (HAdd.hAdd.{max u2 u3, max u2 u3, max u2 u3} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (instHAdd.{max u2 u3} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.add.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n)))) f g)) (HAdd.hAdd.{max u2 u3, max u2 u3, max u2 u3} (LinearMap.{u1, u1, u2, max u2 u3} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M'' (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u2, u3, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u3, u1} R' N'' _inst_10 _inst_13 _inst_17))) (LinearMap.{u1, u1, u2, max u2 u3} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M'' (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u2, u3, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u3, u1} R' N'' _inst_10 _inst_13 _inst_17))) (LinearMap.{u1, u1, u2, max u2 u3} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M'' (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u2, u3, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u3, u1} R' N'' _inst_10 _inst_13 _inst_17))) (instHAdd.{max u2 u3} (LinearMap.{u1, u1, u2, max u2 u3} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M'' (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u2, u3, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u3, u1} R' N'' _inst_10 _inst_13 _inst_17))) (LinearMap.hasAdd.{u1, u1, u2, max u2 u3} R' R' M'' (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u2, u3, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u3, u1} R' N'' _inst_10 _inst_13 _inst_17)) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))))) (AlternatingMap.curryLeft.{u1, u2, u3} R' M'' N'' _inst_10 _inst_11 _inst_13 _inst_15 _inst_17 n f) (AlternatingMap.curryLeft.{u1, u2, u3} R' M'' N'' _inst_10 _inst_11 _inst_13 _inst_15 _inst_17 n g))
but is expected to have type
  forall {R' : Type.{u3}} {M'' : Type.{u2}} {N'' : Type.{u1}} [_inst_10 : CommSemiring.{u3} R'] [_inst_11 : AddCommMonoid.{u2} M''] [_inst_13 : AddCommMonoid.{u1} N''] [_inst_15 : Module.{u3, u2} R' M'' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_11] [_inst_17 : Module.{u3, u1} R' N'' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_13] {n : Nat} (f : AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (g : AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))), Eq.{max (succ u2) (succ u1)} (LinearMap.{u3, u3, u2, max u1 u2} R' R' (CommSemiring.toSemiring.{u3} R' _inst_10) (CommSemiring.toSemiring.{u3} R' _inst_10) (RingHom.id.{u3} R' (Semiring.toNonAssocSemiring.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10))) M'' (AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u3, u2, u1, 0, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_17 (smulCommClass_self.{u3, u1} R' N'' (CommSemiring.toCommMonoid.{u3} R' _inst_10) (MulActionWithZero.toMulAction.{u3, u1} R' N'' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10)) (AddMonoid.toZero.{u1} N'' (AddCommMonoid.toAddMonoid.{u1} N'' _inst_13)) (Module.toMulActionWithZero.{u3, u1} R' N'' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_13 _inst_17))))) (AlternatingMap.curryLeft.{u3, u2, u1} R' M'' N'' _inst_10 _inst_11 _inst_13 _inst_15 _inst_17 n (HAdd.hAdd.{max u2 u1, max u2 u1, max u2 u1} (AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (instHAdd.{max u2 u1} (AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.add.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n)))) f g)) (HAdd.hAdd.{max u2 u1, max u2 u1, max u2 u1} (LinearMap.{u3, u3, u2, max u1 u2} R' R' (CommSemiring.toSemiring.{u3} R' _inst_10) (CommSemiring.toSemiring.{u3} R' _inst_10) (RingHom.id.{u3} R' (Semiring.toNonAssocSemiring.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10))) M'' (AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u3, u2, u1, 0, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_17 (smulCommClass_self.{u3, u1} R' N'' (CommSemiring.toCommMonoid.{u3} R' _inst_10) (MulActionWithZero.toMulAction.{u3, u1} R' N'' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10)) (AddMonoid.toZero.{u1} N'' (AddCommMonoid.toAddMonoid.{u1} N'' _inst_13)) (Module.toMulActionWithZero.{u3, u1} R' N'' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_13 _inst_17))))) (LinearMap.{u3, u3, u2, max u1 u2} R' R' (CommSemiring.toSemiring.{u3} R' _inst_10) (CommSemiring.toSemiring.{u3} R' _inst_10) (RingHom.id.{u3} R' (Semiring.toNonAssocSemiring.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10))) M'' (AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u3, u2, u1, 0, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_17 (smulCommClass_self.{u3, u1} R' N'' (CommSemiring.toCommMonoid.{u3} R' _inst_10) (MulActionWithZero.toMulAction.{u3, u1} R' N'' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10)) (AddMonoid.toZero.{u1} N'' (AddCommMonoid.toAddMonoid.{u1} N'' _inst_13)) (Module.toMulActionWithZero.{u3, u1} R' N'' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_13 _inst_17))))) (LinearMap.{u3, u3, u2, max u1 u2} R' R' (CommSemiring.toSemiring.{u3} R' _inst_10) (CommSemiring.toSemiring.{u3} R' _inst_10) (RingHom.id.{u3} R' (Semiring.toNonAssocSemiring.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10))) M'' (AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u3, u2, u1, 0, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_17 (smulCommClass_self.{u3, u1} R' N'' (CommSemiring.toCommMonoid.{u3} R' _inst_10) (MulActionWithZero.toMulAction.{u3, u1} R' N'' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10)) (AddMonoid.toZero.{u1} N'' (AddCommMonoid.toAddMonoid.{u1} N'' _inst_13)) (Module.toMulActionWithZero.{u3, u1} R' N'' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_13 _inst_17))))) (instHAdd.{max u2 u1} (LinearMap.{u3, u3, u2, max u1 u2} R' R' (CommSemiring.toSemiring.{u3} R' _inst_10) (CommSemiring.toSemiring.{u3} R' _inst_10) (RingHom.id.{u3} R' (Semiring.toNonAssocSemiring.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10))) M'' (AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u3, u2, u1, 0, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_17 (smulCommClass_self.{u3, u1} R' N'' (CommSemiring.toCommMonoid.{u3} R' _inst_10) (MulActionWithZero.toMulAction.{u3, u1} R' N'' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10)) (AddMonoid.toZero.{u1} N'' (AddCommMonoid.toAddMonoid.{u1} N'' _inst_13)) (Module.toMulActionWithZero.{u3, u1} R' N'' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_13 _inst_17))))) (LinearMap.instAddLinearMap.{u3, u3, u2, max u2 u1} R' R' M'' (AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (CommSemiring.toSemiring.{u3} R' _inst_10) (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_11 (AlternatingMap.addCommMonoid.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u3, u2, u1, 0, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_17 (smulCommClass_self.{u3, u1} R' N'' (CommSemiring.toCommMonoid.{u3} R' _inst_10) (MulActionWithZero.toMulAction.{u3, u1} R' N'' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10)) (AddMonoid.toZero.{u1} N'' (AddCommMonoid.toAddMonoid.{u1} N'' _inst_13)) (Module.toMulActionWithZero.{u3, u1} R' N'' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_13 _inst_17)))) (RingHom.id.{u3} R' (Semiring.toNonAssocSemiring.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10))))) (AlternatingMap.curryLeft.{u3, u2, u1} R' M'' N'' _inst_10 _inst_11 _inst_13 _inst_15 _inst_17 n f) (AlternatingMap.curryLeft.{u3, u2, u1} R' M'' N'' _inst_10 _inst_11 _inst_13 _inst_15 _inst_17 n g))
Case conversion may be inaccurate. Consider using '#align alternating_map.curry_left_add AlternatingMap.curryLeft_addₓ'. -/
@[simp]
theorem curryLeft_add {n : ℕ} (f g : AlternatingMap R' M'' N'' (Fin n.succ)) :
    curryLeft (f + g) = curryLeft f + curryLeft g :=
  rfl
#align alternating_map.curry_left_add AlternatingMap.curryLeft_add

/- warning: alternating_map.curry_left_smul -> AlternatingMap.curryLeft_smul is a dubious translation:
lean 3 declaration is
  forall {R' : Type.{u1}} {M'' : Type.{u2}} {N'' : Type.{u3}} [_inst_10 : CommSemiring.{u1} R'] [_inst_11 : AddCommMonoid.{u2} M''] [_inst_13 : AddCommMonoid.{u3} N''] [_inst_15 : Module.{u1, u2} R' M'' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_11] [_inst_17 : Module.{u1, u3} R' N'' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_13] {n : Nat} (r : R') (f : AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))), Eq.{max (succ u2) (succ (max u2 u3))} (LinearMap.{u1, u1, u2, max u2 u3} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M'' (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u2, u3, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u3, u1} R' N'' _inst_10 _inst_13 _inst_17))) (AlternatingMap.curryLeft.{u1, u2, u3} R' M'' N'' _inst_10 _inst_11 _inst_13 _inst_15 _inst_17 n (SMul.smul.{u1, max u2 u3} R' (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.smul.{u1, u2, u3, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n)) R' (MonoidWithZero.toMonoid.{u1} R' (Semiring.toMonoidWithZero.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) (Module.toDistribMulAction.{u1, u3} R' N'' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_13 _inst_17) (smulCommClass_self.{u1, u3} R' N'' (CommSemiring.toCommMonoid.{u1} R' _inst_10) (MulActionWithZero.toMulAction.{u1, u3} R' N'' (Semiring.toMonoidWithZero.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10)) (AddZeroClass.toHasZero.{u3} N'' (AddMonoid.toAddZeroClass.{u3} N'' (AddCommMonoid.toAddMonoid.{u3} N'' _inst_13))) (Module.toMulActionWithZero.{u1, u3} R' N'' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_13 _inst_17)))) r f)) (SMul.smul.{u1, max u2 u3} R' (LinearMap.{u1, u1, u2, max u2 u3} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M'' (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u2, u3, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u3, u1} R' N'' _inst_10 _inst_13 _inst_17))) (LinearMap.hasSmul.{u1, u1, u1, u2, max u2 u3} R' R' R' M'' (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u2, u3, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u3, u1} R' N'' _inst_10 _inst_13 _inst_17)) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) (MonoidWithZero.toMonoid.{u1} R' (Semiring.toMonoidWithZero.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) (AlternatingMap.distribMulAction.{u1, u2, u3, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (MonoidWithZero.toMonoid.{u1} R' (Semiring.toMonoidWithZero.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) (Module.toDistribMulAction.{u1, u3} R' N'' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_13 _inst_17) (smulCommClass_self.{u1, u3} R' N'' (CommSemiring.toCommMonoid.{u1} R' _inst_10) (MulActionWithZero.toMulAction.{u1, u3} R' N'' (Semiring.toMonoidWithZero.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10)) (AddZeroClass.toHasZero.{u3} N'' (AddMonoid.toAddZeroClass.{u3} N'' (AddCommMonoid.toAddMonoid.{u3} N'' _inst_13))) (Module.toMulActionWithZero.{u1, u3} R' N'' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_13 _inst_17)))) (smulCommClass_self.{u1, max u2 u3} R' (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (CommSemiring.toCommMonoid.{u1} R' _inst_10) (MulActionWithZero.toMulAction.{u1, max u2 u3} R' (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (Semiring.toMonoidWithZero.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10)) (AddZeroClass.toHasZero.{max u2 u3} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AddMonoid.toAddZeroClass.{max u2 u3} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AddCommMonoid.toAddMonoid.{max u2 u3} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n))))) (Module.toMulActionWithZero.{u1, max u2 u3} R' (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (CommSemiring.toSemiring.{u1} R' _inst_10) (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AlternatingMap.module.{u1, u2, u3, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (smulCommClass_self.{u1, u3} R' N'' (CommSemiring.toCommMonoid.{u1} R' _inst_10) (MulActionWithZero.toMulAction.{u1, u3} R' N'' (Semiring.toMonoidWithZero.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10)) (AddZeroClass.toHasZero.{u3} N'' (AddMonoid.toAddZeroClass.{u3} N'' (AddCommMonoid.toAddMonoid.{u3} N'' _inst_13))) (Module.toMulActionWithZero.{u1, u3} R' N'' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_13 _inst_17)))))))) r (AlternatingMap.curryLeft.{u1, u2, u3} R' M'' N'' _inst_10 _inst_11 _inst_13 _inst_15 _inst_17 n f))
but is expected to have type
  forall {R' : Type.{u3}} {M'' : Type.{u2}} {N'' : Type.{u1}} [_inst_10 : CommSemiring.{u3} R'] [_inst_11 : AddCommMonoid.{u2} M''] [_inst_13 : AddCommMonoid.{u1} N''] [_inst_15 : Module.{u3, u2} R' M'' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_11] [_inst_17 : Module.{u3, u1} R' N'' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_13] {n : Nat} (r : R') (f : AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))), Eq.{max (succ u2) (succ u1)} (LinearMap.{u3, u3, u2, max u1 u2} R' R' (CommSemiring.toSemiring.{u3} R' _inst_10) (CommSemiring.toSemiring.{u3} R' _inst_10) (RingHom.id.{u3} R' (Semiring.toNonAssocSemiring.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10))) M'' (AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u3, u2, u1, 0, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_17 (smulCommClass_self.{u3, u1} R' N'' (CommSemiring.toCommMonoid.{u3} R' _inst_10) (MulActionWithZero.toMulAction.{u3, u1} R' N'' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10)) (AddMonoid.toZero.{u1} N'' (AddCommMonoid.toAddMonoid.{u1} N'' _inst_13)) (Module.toMulActionWithZero.{u3, u1} R' N'' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_13 _inst_17))))) (AlternatingMap.curryLeft.{u3, u2, u1} R' M'' N'' _inst_10 _inst_11 _inst_13 _inst_15 _inst_17 n (HSMul.hSMul.{u3, max u2 u1, max u2 u1} R' (AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (instHSMul.{u3, max u2 u1} R' (AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.smul.{u3, u2, u1, 0, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n)) R' (MonoidWithZero.toMonoid.{u3} R' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10))) (Module.toDistribMulAction.{u3, u1} R' N'' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_13 _inst_17) (smulCommClass_self.{u3, u1} R' N'' (CommSemiring.toCommMonoid.{u3} R' _inst_10) (MulActionWithZero.toMulAction.{u3, u1} R' N'' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10)) (AddMonoid.toZero.{u1} N'' (AddCommMonoid.toAddMonoid.{u1} N'' _inst_13)) (Module.toMulActionWithZero.{u3, u1} R' N'' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_13 _inst_17))))) r f)) (HSMul.hSMul.{u3, max u1 u2, max u2 u1} R' (LinearMap.{u3, u3, u2, max u1 u2} R' R' (CommSemiring.toSemiring.{u3} R' _inst_10) (CommSemiring.toSemiring.{u3} R' _inst_10) (RingHom.id.{u3} R' (Semiring.toNonAssocSemiring.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10))) M'' (AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u3, u2, u1, 0, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_17 (smulCommClass_self.{u3, u1} R' N'' (CommSemiring.toCommMonoid.{u3} R' _inst_10) (MulActionWithZero.toMulAction.{u3, u1} R' N'' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10)) (AddMonoid.toZero.{u1} N'' (AddCommMonoid.toAddMonoid.{u1} N'' _inst_13)) (Module.toMulActionWithZero.{u3, u1} R' N'' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_13 _inst_17))))) (LinearMap.{u3, u3, u2, max u1 u2} R' R' (CommSemiring.toSemiring.{u3} R' _inst_10) (CommSemiring.toSemiring.{u3} R' _inst_10) (RingHom.id.{u3} R' (Semiring.toNonAssocSemiring.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10))) M'' (AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u3, u2, u1, 0, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_17 (smulCommClass_self.{u3, u1} R' N'' (CommSemiring.toCommMonoid.{u3} R' _inst_10) (MulActionWithZero.toMulAction.{u3, u1} R' N'' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10)) (AddMonoid.toZero.{u1} N'' (AddCommMonoid.toAddMonoid.{u1} N'' _inst_13)) (Module.toMulActionWithZero.{u3, u1} R' N'' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_13 _inst_17))))) (instHSMul.{u3, max u2 u1} R' (LinearMap.{u3, u3, u2, max u1 u2} R' R' (CommSemiring.toSemiring.{u3} R' _inst_10) (CommSemiring.toSemiring.{u3} R' _inst_10) (RingHom.id.{u3} R' (Semiring.toNonAssocSemiring.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10))) M'' (AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u3, u2, u1, 0, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_17 (smulCommClass_self.{u3, u1} R' N'' (CommSemiring.toCommMonoid.{u3} R' _inst_10) (MulActionWithZero.toMulAction.{u3, u1} R' N'' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10)) (AddMonoid.toZero.{u1} N'' (AddCommMonoid.toAddMonoid.{u1} N'' _inst_13)) (Module.toMulActionWithZero.{u3, u1} R' N'' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_13 _inst_17))))) (LinearMap.instSMulLinearMap.{u3, u3, u3, u2, max u2 u1} R' R' R' M'' (AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (CommSemiring.toSemiring.{u3} R' _inst_10) (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_11 (AlternatingMap.addCommMonoid.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u3, u2, u1, 0, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_17 (smulCommClass_self.{u3, u1} R' N'' (CommSemiring.toCommMonoid.{u3} R' _inst_10) (MulActionWithZero.toMulAction.{u3, u1} R' N'' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10)) (AddMonoid.toZero.{u1} N'' (AddCommMonoid.toAddMonoid.{u1} N'' _inst_13)) (Module.toMulActionWithZero.{u3, u1} R' N'' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_13 _inst_17)))) (RingHom.id.{u3} R' (Semiring.toNonAssocSemiring.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10))) (MonoidWithZero.toMonoid.{u3} R' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10))) (AlternatingMap.distribMulAction.{u3, u2, u1, 0, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (MonoidWithZero.toMonoid.{u3} R' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10))) (Module.toDistribMulAction.{u3, u1} R' N'' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_13 _inst_17) (smulCommClass_self.{u3, u1} R' N'' (CommSemiring.toCommMonoid.{u3} R' _inst_10) (MulActionWithZero.toMulAction.{u3, u1} R' N'' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10)) (AddMonoid.toZero.{u1} N'' (AddCommMonoid.toAddMonoid.{u1} N'' _inst_13)) (Module.toMulActionWithZero.{u3, u1} R' N'' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_13 _inst_17)))) (smulCommClass_self.{u3, max u2 u1} R' (AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (CommSemiring.toCommMonoid.{u3} R' _inst_10) (MulActionWithZero.toMulAction.{u3, max u2 u1} R' (AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10)) (AlternatingMap.zero.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (Module.toMulActionWithZero.{u3, max u2 u1} R' (AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (CommSemiring.toSemiring.{u3} R' _inst_10) (AlternatingMap.addCommMonoid.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AlternatingMap.module.{u3, u2, u1, 0, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_17 (smulCommClass_self.{u3, u1} R' N'' (CommSemiring.toCommMonoid.{u3} R' _inst_10) (MulActionWithZero.toMulAction.{u3, u1} R' N'' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10)) (AddMonoid.toZero.{u1} N'' (AddCommMonoid.toAddMonoid.{u1} N'' _inst_13)) (Module.toMulActionWithZero.{u3, u1} R' N'' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_13 _inst_17))))))))) r (AlternatingMap.curryLeft.{u3, u2, u1} R' M'' N'' _inst_10 _inst_11 _inst_13 _inst_15 _inst_17 n f))
Case conversion may be inaccurate. Consider using '#align alternating_map.curry_left_smul AlternatingMap.curryLeft_smulₓ'. -/
@[simp]
theorem curryLeft_smul {n : ℕ} (r : R') (f : AlternatingMap R' M'' N'' (Fin n.succ)) :
    curryLeft (r • f) = r • curryLeft f :=
  rfl
#align alternating_map.curry_left_smul AlternatingMap.curryLeft_smul

#print AlternatingMap.curryLeftLinearMap /-
/-- `alternating_map.curry_left` as a `linear_map`. This is a separate definition as dot notation
does not work for this version. -/
@[simps]
def curryLeftLinearMap {n : ℕ} :
    AlternatingMap R' M'' N'' (Fin n.succ) →ₗ[R'] M'' →ₗ[R'] AlternatingMap R' M'' N'' (Fin n)
    where
  toFun f := f.curryLeft
  map_add' := curryLeft_add
  map_smul' := curryLeft_smul
#align alternating_map.curry_left_linear_map AlternatingMap.curryLeftLinearMap
-/

/- warning: alternating_map.curry_left_same -> AlternatingMap.curryLeft_same is a dubious translation:
lean 3 declaration is
  forall {R' : Type.{u1}} {M'' : Type.{u2}} {N'' : Type.{u3}} [_inst_10 : CommSemiring.{u1} R'] [_inst_11 : AddCommMonoid.{u2} M''] [_inst_13 : AddCommMonoid.{u3} N''] [_inst_15 : Module.{u1, u2} R' M'' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_11] [_inst_17 : Module.{u1, u3} R' N'' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_13] {n : Nat} (f : AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ (Nat.succ n)))) (m : M''), Eq.{max (succ u2) (succ u3)} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (coeFn.{max (succ u2) (succ (max u2 u3)), max (succ u2) (succ (max u2 u3))} (LinearMap.{u1, u1, u2, max u2 u3} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M'' (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u2, u3, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u3, u1} R' N'' _inst_10 _inst_13 _inst_17))) (fun (_x : LinearMap.{u1, u1, u2, max u2 u3} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M'' (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u2, u3, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u3, u1} R' N'' _inst_10 _inst_13 _inst_17))) => M'' -> (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n))) (LinearMap.hasCoeToFun.{u1, u1, u2, max u2 u3} R' R' M'' (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u2, u3, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u3, u1} R' N'' _inst_10 _inst_13 _inst_17)) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10)))) (AlternatingMap.curryLeft.{u1, u2, u3} R' M'' N'' _inst_10 _inst_11 _inst_13 _inst_15 _inst_17 n (coeFn.{max (succ u2) (succ (max u2 u3)), max (succ u2) (succ (max u2 u3))} (LinearMap.{u1, u1, u2, max u2 u3} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M'' (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) _inst_15 (AlternatingMap.module.{u1, u2, u3, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n)) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u3, u1} R' N'' _inst_10 _inst_13 _inst_17))) (fun (_x : LinearMap.{u1, u1, u2, max u2 u3} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M'' (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) _inst_15 (AlternatingMap.module.{u1, u2, u3, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n)) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u3, u1} R' N'' _inst_10 _inst_13 _inst_17))) => M'' -> (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n)))) (LinearMap.hasCoeToFun.{u1, u1, u2, max u2 u3} R' R' M'' (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) _inst_15 (AlternatingMap.module.{u1, u2, u3, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n)) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u3, u1} R' N'' _inst_10 _inst_13 _inst_17)) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10)))) (AlternatingMap.curryLeft.{u1, u2, u3} R' M'' N'' _inst_10 _inst_11 _inst_13 _inst_15 _inst_17 (Nat.succ n) f) m)) m) (OfNat.ofNat.{max u2 u3} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) 0 (OfNat.mk.{max u2 u3} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) 0 (Zero.zero.{max u2 u3} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AlternatingMap.zero.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)))))
but is expected to have type
  forall {R' : Type.{u3}} {M'' : Type.{u2}} {N'' : Type.{u1}} [_inst_10 : CommSemiring.{u3} R'] [_inst_11 : AddCommMonoid.{u2} M''] [_inst_13 : AddCommMonoid.{u1} N''] [_inst_15 : Module.{u3, u2} R' M'' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_11] [_inst_17 : Module.{u3, u1} R' N'' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_13] {n : Nat} (f : AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ (Nat.succ n)))) (m : M''), Eq.{max (succ u2) (succ u1)} ((fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : M'') => AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) m) (FunLike.coe.{max (succ u2) (succ u1), succ u2, max (succ u2) (succ u1)} (LinearMap.{u3, u3, u2, max u1 u2} R' R' (CommSemiring.toSemiring.{u3} R' _inst_10) (CommSemiring.toSemiring.{u3} R' _inst_10) (RingHom.id.{u3} R' (Semiring.toNonAssocSemiring.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10))) M'' (AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u3, u2, u1, 0, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_17 (smulCommClass_self.{u3, u1} R' N'' (CommSemiring.toCommMonoid.{u3} R' _inst_10) (MulActionWithZero.toMulAction.{u3, u1} R' N'' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10)) (AddMonoid.toZero.{u1} N'' (AddCommMonoid.toAddMonoid.{u1} N'' _inst_13)) (Module.toMulActionWithZero.{u3, u1} R' N'' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_13 _inst_17))))) M'' (fun (_x : M'') => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : M'') => AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _x) (LinearMap.instFunLikeLinearMap.{u3, u3, u2, max u2 u1} R' R' M'' (AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (CommSemiring.toSemiring.{u3} R' _inst_10) (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_11 (AlternatingMap.addCommMonoid.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u3, u2, u1, 0, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_17 (smulCommClass_self.{u3, u1} R' N'' (CommSemiring.toCommMonoid.{u3} R' _inst_10) (MulActionWithZero.toMulAction.{u3, u1} R' N'' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10)) (AddMonoid.toZero.{u1} N'' (AddCommMonoid.toAddMonoid.{u1} N'' _inst_13)) (Module.toMulActionWithZero.{u3, u1} R' N'' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_13 _inst_17)))) (RingHom.id.{u3} R' (Semiring.toNonAssocSemiring.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10)))) (AlternatingMap.curryLeft.{u3, u2, u1} R' M'' N'' _inst_10 _inst_11 _inst_13 _inst_15 _inst_17 n (FunLike.coe.{max (succ u2) (succ u1), succ u2, max (succ u2) (succ u1)} (LinearMap.{u3, u3, u2, max u1 u2} R' R' (CommSemiring.toSemiring.{u3} R' _inst_10) (CommSemiring.toSemiring.{u3} R' _inst_10) (RingHom.id.{u3} R' (Semiring.toNonAssocSemiring.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10))) M'' (AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) _inst_11 (AlternatingMap.addCommMonoid.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) _inst_15 (AlternatingMap.module.{u3, u2, u1, 0, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) R' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_17 (smulCommClass_self.{u3, u1} R' N'' (CommSemiring.toCommMonoid.{u3} R' _inst_10) (MulActionWithZero.toMulAction.{u3, u1} R' N'' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10)) (AddMonoid.toZero.{u1} N'' (AddCommMonoid.toAddMonoid.{u1} N'' _inst_13)) (Module.toMulActionWithZero.{u3, u1} R' N'' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_13 _inst_17))))) M'' (fun (_x : M'') => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : M'') => AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) _x) (LinearMap.instFunLikeLinearMap.{u3, u3, u2, max u2 u1} R' R' M'' (AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (CommSemiring.toSemiring.{u3} R' _inst_10) (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_11 (AlternatingMap.addCommMonoid.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) _inst_15 (AlternatingMap.module.{u3, u2, u1, 0, u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1)))) R' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_17 (smulCommClass_self.{u3, u1} R' N'' (CommSemiring.toCommMonoid.{u3} R' _inst_10) (MulActionWithZero.toMulAction.{u3, u1} R' N'' (Semiring.toMonoidWithZero.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10)) (AddMonoid.toZero.{u1} N'' (AddCommMonoid.toAddMonoid.{u1} N'' _inst_13)) (Module.toMulActionWithZero.{u3, u1} R' N'' (CommSemiring.toSemiring.{u3} R' _inst_10) _inst_13 _inst_17)))) (RingHom.id.{u3} R' (Semiring.toNonAssocSemiring.{u3} R' (CommSemiring.toSemiring.{u3} R' _inst_10)))) (AlternatingMap.curryLeft.{u3, u2, u1} R' M'' N'' _inst_10 _inst_11 _inst_13 _inst_15 _inst_17 (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))) f) m)) m) (OfNat.ofNat.{max u2 u1} ((fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : M'') => AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) m) 0 (Zero.toOfNat0.{max u2 u1} ((fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : M'') => AlternatingMap.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) m) (AlternatingMap.zero.{u3, u2, u1, 0} R' (CommSemiring.toSemiring.{u3} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n))))
Case conversion may be inaccurate. Consider using '#align alternating_map.curry_left_same AlternatingMap.curryLeft_sameₓ'. -/
/-- Currying with the same element twice gives the zero map. -/
@[simp]
theorem curryLeft_same {n : ℕ} (f : AlternatingMap R' M'' N'' (Fin n.succ.succ)) (m : M'') :
    (f.curryLeft m).curryLeft m = 0 :=
  ext fun x => f.map_eq_zero_of_eq _ (by simp) Fin.zero_ne_one
#align alternating_map.curry_left_same AlternatingMap.curryLeft_same

/- warning: alternating_map.curry_left_comp_alternating_map -> AlternatingMap.curryLeft_compAlternatingMap is a dubious translation:
lean 3 declaration is
  forall {R' : Type.{u1}} {M'' : Type.{u2}} {N'' : Type.{u3}} {N₂'' : Type.{u4}} [_inst_10 : CommSemiring.{u1} R'] [_inst_11 : AddCommMonoid.{u2} M''] [_inst_13 : AddCommMonoid.{u3} N''] [_inst_14 : AddCommMonoid.{u4} N₂''] [_inst_15 : Module.{u1, u2} R' M'' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_11] [_inst_17 : Module.{u1, u3} R' N'' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_13] [_inst_18 : Module.{u1, u4} R' N₂'' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_14] {n : Nat} (g : LinearMap.{u1, u1, u3, u4} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) N'' N₂'' _inst_13 _inst_14 _inst_17 _inst_18) (f : AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (m : M''), Eq.{max (succ u2) (succ u4)} (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (coeFn.{max (succ u2) (succ (max u2 u4)), max (succ u2) (succ (max u2 u4))} (LinearMap.{u1, u1, u2, max u2 u4} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M'' (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u2, u4, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_18 (AlternatingMap.curryLeft._proof_1.{u4, u1} R' N₂'' _inst_10 _inst_14 _inst_18))) (fun (_x : LinearMap.{u1, u1, u2, max u2 u4} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M'' (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u2, u4, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_18 (AlternatingMap.curryLeft._proof_1.{u4, u1} R' N₂'' _inst_10 _inst_14 _inst_18))) => M'' -> (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n))) (LinearMap.hasCoeToFun.{u1, u1, u2, max u2 u4} R' R' M'' (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u2, u4, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_18 (AlternatingMap.curryLeft._proof_1.{u4, u1} R' N₂'' _inst_10 _inst_14 _inst_18)) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10)))) (AlternatingMap.curryLeft.{u1, u2, u4} R' M'' N₂'' _inst_10 _inst_11 _inst_14 _inst_15 _inst_18 n (coeFn.{max (succ (max u2 u4)) (succ (max u2 u3)), max (succ (max u2 u3)) (succ (max u2 u4))} (AddMonoidHom.{max u2 u3, max u2 u4} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) (AddMonoid.toAddZeroClass.{max u2 u3} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AddCommMonoid.toAddMonoid.{max u2 u3} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))))) (AddMonoid.toAddZeroClass.{max u2 u4} (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) (AddCommMonoid.toAddMonoid.{max u2 u4} (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) (AlternatingMap.addCommMonoid.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n)))))) (fun (_x : AddMonoidHom.{max u2 u3, max u2 u4} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) (AddMonoid.toAddZeroClass.{max u2 u3} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AddCommMonoid.toAddMonoid.{max u2 u3} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))))) (AddMonoid.toAddZeroClass.{max u2 u4} (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) (AddCommMonoid.toAddMonoid.{max u2 u4} (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) (AlternatingMap.addCommMonoid.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n)))))) => (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) -> (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n)))) (AddMonoidHom.hasCoeToFun.{max u2 u3, max u2 u4} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) (AddMonoid.toAddZeroClass.{max u2 u3} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AddCommMonoid.toAddMonoid.{max u2 u3} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))))) (AddMonoid.toAddZeroClass.{max u2 u4} (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) (AddCommMonoid.toAddMonoid.{max u2 u4} (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) (AlternatingMap.addCommMonoid.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n)))))) (LinearMap.compAlternatingMap.{u1, u2, u3, 0, u4} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n)) N₂'' _inst_14 _inst_18 g) f)) m) (coeFn.{max (succ (max u2 u4)) (succ (max u2 u3)), max (succ (max u2 u3)) (succ (max u2 u4))} (AddMonoidHom.{max u2 u3, max u2 u4} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (AddMonoid.toAddZeroClass.{max u2 u3} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AddCommMonoid.toAddMonoid.{max u2 u3} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)))) (AddMonoid.toAddZeroClass.{max u2 u4} (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (AddCommMonoid.toAddMonoid.{max u2 u4} (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (AlternatingMap.addCommMonoid.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n))))) (fun (_x : AddMonoidHom.{max u2 u3, max u2 u4} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (AddMonoid.toAddZeroClass.{max u2 u3} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AddCommMonoid.toAddMonoid.{max u2 u3} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)))) (AddMonoid.toAddZeroClass.{max u2 u4} (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (AddCommMonoid.toAddMonoid.{max u2 u4} (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (AlternatingMap.addCommMonoid.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n))))) => (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) -> (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n))) (AddMonoidHom.hasCoeToFun.{max u2 u3, max u2 u4} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (AddMonoid.toAddZeroClass.{max u2 u3} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AddCommMonoid.toAddMonoid.{max u2 u3} (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)))) (AddMonoid.toAddZeroClass.{max u2 u4} (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (AddCommMonoid.toAddMonoid.{max u2 u4} (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (AlternatingMap.addCommMonoid.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n))))) (LinearMap.compAlternatingMap.{u1, u2, u3, 0, u4} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) N₂'' _inst_14 _inst_18 g) (coeFn.{max (succ u2) (succ (max u2 u3)), max (succ u2) (succ (max u2 u3))} (LinearMap.{u1, u1, u2, max u2 u3} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M'' (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u2, u3, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u3, u1} R' N'' _inst_10 _inst_13 _inst_17))) (fun (_x : LinearMap.{u1, u1, u2, max u2 u3} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M'' (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u2, u3, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u3, u1} R' N'' _inst_10 _inst_13 _inst_17))) => M'' -> (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n))) (LinearMap.hasCoeToFun.{u1, u1, u2, max u2 u3} R' R' M'' (AlternatingMap.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u3, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u2, u3, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u3, u1} R' N'' _inst_10 _inst_13 _inst_17)) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10)))) (AlternatingMap.curryLeft.{u1, u2, u3} R' M'' N'' _inst_10 _inst_11 _inst_13 _inst_15 _inst_17 n f) m))
but is expected to have type
  forall {R' : Type.{u4}} {M'' : Type.{u1}} {N'' : Type.{u3}} {N₂'' : Type.{u2}} [_inst_10 : CommSemiring.{u4} R'] [_inst_11 : AddCommMonoid.{u1} M''] [_inst_13 : AddCommMonoid.{u3} N''] [_inst_14 : AddCommMonoid.{u2} N₂''] [_inst_15 : Module.{u4, u1} R' M'' (CommSemiring.toSemiring.{u4} R' _inst_10) _inst_11] [_inst_17 : Module.{u4, u3} R' N'' (CommSemiring.toSemiring.{u4} R' _inst_10) _inst_13] [_inst_18 : Module.{u4, u2} R' N₂'' (CommSemiring.toSemiring.{u4} R' _inst_10) _inst_14] {n : Nat} (g : LinearMap.{u4, u4, u3, u2} R' R' (CommSemiring.toSemiring.{u4} R' _inst_10) (CommSemiring.toSemiring.{u4} R' _inst_10) (RingHom.id.{u4} R' (Semiring.toNonAssocSemiring.{u4} R' (CommSemiring.toSemiring.{u4} R' _inst_10))) N'' N₂'' _inst_13 _inst_14 _inst_17 _inst_18) (f : AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (m : M''), Eq.{max (succ u1) (succ u2)} ((fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : M'') => AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) m) (FunLike.coe.{max (succ u1) (succ u2), succ u1, max (succ u1) (succ u2)} (LinearMap.{u4, u4, u1, max u2 u1} R' R' (CommSemiring.toSemiring.{u4} R' _inst_10) (CommSemiring.toSemiring.{u4} R' _inst_10) (RingHom.id.{u4} R' (Semiring.toNonAssocSemiring.{u4} R' (CommSemiring.toSemiring.{u4} R' _inst_10))) M'' (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) _inst_15 (AlternatingMap.module.{u4, u1, u2, 0, u4} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n) R' (CommSemiring.toSemiring.{u4} R' _inst_10) _inst_18 (smulCommClass_self.{u4, u2} R' N₂'' (CommSemiring.toCommMonoid.{u4} R' _inst_10) (MulActionWithZero.toMulAction.{u4, u2} R' N₂'' (Semiring.toMonoidWithZero.{u4} R' (CommSemiring.toSemiring.{u4} R' _inst_10)) (AddMonoid.toZero.{u2} N₂'' (AddCommMonoid.toAddMonoid.{u2} N₂'' _inst_14)) (Module.toMulActionWithZero.{u4, u2} R' N₂'' (CommSemiring.toSemiring.{u4} R' _inst_10) _inst_14 _inst_18))))) M'' (fun (_x : M'') => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : M'') => AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) _x) (LinearMap.instFunLikeLinearMap.{u4, u4, u1, max u1 u2} R' R' M'' (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (CommSemiring.toSemiring.{u4} R' _inst_10) (CommSemiring.toSemiring.{u4} R' _inst_10) _inst_11 (AlternatingMap.addCommMonoid.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) _inst_15 (AlternatingMap.module.{u4, u1, u2, 0, u4} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n) R' (CommSemiring.toSemiring.{u4} R' _inst_10) _inst_18 (smulCommClass_self.{u4, u2} R' N₂'' (CommSemiring.toCommMonoid.{u4} R' _inst_10) (MulActionWithZero.toMulAction.{u4, u2} R' N₂'' (Semiring.toMonoidWithZero.{u4} R' (CommSemiring.toSemiring.{u4} R' _inst_10)) (AddMonoid.toZero.{u2} N₂'' (AddCommMonoid.toAddMonoid.{u2} N₂'' _inst_14)) (Module.toMulActionWithZero.{u4, u2} R' N₂'' (CommSemiring.toSemiring.{u4} R' _inst_10) _inst_14 _inst_18)))) (RingHom.id.{u4} R' (Semiring.toNonAssocSemiring.{u4} R' (CommSemiring.toSemiring.{u4} R' _inst_10)))) (AlternatingMap.curryLeft.{u4, u1, u2} R' M'' N₂'' _inst_10 _inst_11 _inst_14 _inst_15 _inst_18 n (FunLike.coe.{max (max (max (succ u3) (succ u2)) 1) (succ u1), max (succ u3) (succ u1), max (succ u2) (succ u1)} (AddMonoidHom.{max u3 u1, max u2 u1} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) (AddMonoid.toAddZeroClass.{max u1 u3} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AddCommMonoid.toAddMonoid.{max u1 u3} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.addCommMonoid.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))))) (AddMonoid.toAddZeroClass.{max u1 u2} (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) (AddCommMonoid.toAddMonoid.{max u1 u2} (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) (AlternatingMap.addCommMonoid.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n)))))) (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (fun (_x : AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) => AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) _x) (AddHomClass.toFunLike.{max (max u3 u2) u1, max u3 u1, max u2 u1} (AddMonoidHom.{max u3 u1, max u2 u1} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) (AddMonoid.toAddZeroClass.{max u1 u3} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AddCommMonoid.toAddMonoid.{max u1 u3} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.addCommMonoid.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))))) (AddMonoid.toAddZeroClass.{max u1 u2} (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) (AddCommMonoid.toAddMonoid.{max u1 u2} (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) (AlternatingMap.addCommMonoid.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n)))))) (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) (AddZeroClass.toAdd.{max u3 u1} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AddMonoid.toAddZeroClass.{max u1 u3} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AddCommMonoid.toAddMonoid.{max u1 u3} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.addCommMonoid.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n)))))) (AddZeroClass.toAdd.{max u2 u1} (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) (AddMonoid.toAddZeroClass.{max u1 u2} (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) (AddCommMonoid.toAddMonoid.{max u1 u2} (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) (AlternatingMap.addCommMonoid.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n)))))) (AddMonoidHomClass.toAddHomClass.{max (max u3 u2) u1, max u3 u1, max u2 u1} (AddMonoidHom.{max u3 u1, max u2 u1} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) (AddMonoid.toAddZeroClass.{max u1 u3} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AddCommMonoid.toAddMonoid.{max u1 u3} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.addCommMonoid.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))))) (AddMonoid.toAddZeroClass.{max u1 u2} (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) (AddCommMonoid.toAddMonoid.{max u1 u2} (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) (AlternatingMap.addCommMonoid.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n)))))) (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) (AddMonoid.toAddZeroClass.{max u1 u3} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AddCommMonoid.toAddMonoid.{max u1 u3} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.addCommMonoid.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))))) (AddMonoid.toAddZeroClass.{max u1 u2} (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) (AddCommMonoid.toAddMonoid.{max u1 u2} (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) (AlternatingMap.addCommMonoid.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))))) (AddMonoidHom.addMonoidHomClass.{max u3 u1, max u2 u1} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) (AddMonoid.toAddZeroClass.{max u1 u3} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AddCommMonoid.toAddMonoid.{max u1 u3} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (AlternatingMap.addCommMonoid.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))))) (AddMonoid.toAddZeroClass.{max u1 u2} (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) (AddCommMonoid.toAddMonoid.{max u1 u2} (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n))) (AlternatingMap.addCommMonoid.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin (Nat.succ n)))))))) (LinearMap.compAlternatingMap.{u4, u1, u3, 0, u2} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n)) N₂'' _inst_14 _inst_18 g) f)) m) (FunLike.coe.{max (max (max (succ u3) (succ u2)) 1) (succ u1), max (succ u3) (succ u1), max (succ u2) (succ u1)} (AddMonoidHom.{max u3 u1, max u2 u1} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (AddMonoid.toAddZeroClass.{max u1 u3} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AddCommMonoid.toAddMonoid.{max u1 u3} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AlternatingMap.addCommMonoid.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)))) (AddMonoid.toAddZeroClass.{max u1 u2} (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (AddCommMonoid.toAddMonoid.{max u1 u2} (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (AlternatingMap.addCommMonoid.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n))))) (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (fun (_x : AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) => AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) _x) (AddHomClass.toFunLike.{max (max u3 u2) u1, max u3 u1, max u2 u1} (AddMonoidHom.{max u3 u1, max u2 u1} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (AddMonoid.toAddZeroClass.{max u1 u3} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AddCommMonoid.toAddMonoid.{max u1 u3} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AlternatingMap.addCommMonoid.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)))) (AddMonoid.toAddZeroClass.{max u1 u2} (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (AddCommMonoid.toAddMonoid.{max u1 u2} (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (AlternatingMap.addCommMonoid.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n))))) (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (AddZeroClass.toAdd.{max u3 u1} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AddMonoid.toAddZeroClass.{max u1 u3} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AddCommMonoid.toAddMonoid.{max u1 u3} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AlternatingMap.addCommMonoid.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n))))) (AddZeroClass.toAdd.{max u2 u1} (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (AddMonoid.toAddZeroClass.{max u1 u2} (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (AddCommMonoid.toAddMonoid.{max u1 u2} (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (AlternatingMap.addCommMonoid.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n))))) (AddMonoidHomClass.toAddHomClass.{max (max u3 u2) u1, max u3 u1, max u2 u1} (AddMonoidHom.{max u3 u1, max u2 u1} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (AddMonoid.toAddZeroClass.{max u1 u3} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AddCommMonoid.toAddMonoid.{max u1 u3} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AlternatingMap.addCommMonoid.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)))) (AddMonoid.toAddZeroClass.{max u1 u2} (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (AddCommMonoid.toAddMonoid.{max u1 u2} (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (AlternatingMap.addCommMonoid.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n))))) (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (AddMonoid.toAddZeroClass.{max u1 u3} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AddCommMonoid.toAddMonoid.{max u1 u3} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AlternatingMap.addCommMonoid.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)))) (AddMonoid.toAddZeroClass.{max u1 u2} (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (AddCommMonoid.toAddMonoid.{max u1 u2} (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (AlternatingMap.addCommMonoid.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)))) (AddMonoidHom.addMonoidHomClass.{max u3 u1, max u2 u1} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (AddMonoid.toAddZeroClass.{max u1 u3} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AddCommMonoid.toAddMonoid.{max u1 u3} (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (AlternatingMap.addCommMonoid.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)))) (AddMonoid.toAddZeroClass.{max u1 u2} (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (AddCommMonoid.toAddMonoid.{max u1 u2} (AlternatingMap.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n)) (AlternatingMap.addCommMonoid.{u4, u1, u2, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N₂'' _inst_14 _inst_18 (Fin n))))))) (LinearMap.compAlternatingMap.{u4, u1, u3, 0, u2} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) N₂'' _inst_14 _inst_18 g) (FunLike.coe.{max (succ u1) (succ u3), succ u1, max (succ u1) (succ u3)} (LinearMap.{u4, u4, u1, max u3 u1} R' R' (CommSemiring.toSemiring.{u4} R' _inst_10) (CommSemiring.toSemiring.{u4} R' _inst_10) (RingHom.id.{u4} R' (Semiring.toNonAssocSemiring.{u4} R' (CommSemiring.toSemiring.{u4} R' _inst_10))) M'' (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u4, u1, u3, 0, u4} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u4} R' _inst_10) _inst_17 (smulCommClass_self.{u4, u3} R' N'' (CommSemiring.toCommMonoid.{u4} R' _inst_10) (MulActionWithZero.toMulAction.{u4, u3} R' N'' (Semiring.toMonoidWithZero.{u4} R' (CommSemiring.toSemiring.{u4} R' _inst_10)) (AddMonoid.toZero.{u3} N'' (AddCommMonoid.toAddMonoid.{u3} N'' _inst_13)) (Module.toMulActionWithZero.{u4, u3} R' N'' (CommSemiring.toSemiring.{u4} R' _inst_10) _inst_13 _inst_17))))) M'' (fun (_x : M'') => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : M'') => AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _x) (LinearMap.instFunLikeLinearMap.{u4, u4, u1, max u1 u3} R' R' M'' (AlternatingMap.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (CommSemiring.toSemiring.{u4} R' _inst_10) (CommSemiring.toSemiring.{u4} R' _inst_10) _inst_11 (AlternatingMap.addCommMonoid.{u4, u1, u3, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u4, u1, u3, 0, u4} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u4} R' _inst_10) _inst_17 (smulCommClass_self.{u4, u3} R' N'' (CommSemiring.toCommMonoid.{u4} R' _inst_10) (MulActionWithZero.toMulAction.{u4, u3} R' N'' (Semiring.toMonoidWithZero.{u4} R' (CommSemiring.toSemiring.{u4} R' _inst_10)) (AddMonoid.toZero.{u3} N'' (AddCommMonoid.toAddMonoid.{u3} N'' _inst_13)) (Module.toMulActionWithZero.{u4, u3} R' N'' (CommSemiring.toSemiring.{u4} R' _inst_10) _inst_13 _inst_17)))) (RingHom.id.{u4} R' (Semiring.toNonAssocSemiring.{u4} R' (CommSemiring.toSemiring.{u4} R' _inst_10)))) (AlternatingMap.curryLeft.{u4, u1, u3} R' M'' N'' _inst_10 _inst_11 _inst_13 _inst_15 _inst_17 n f) m))
Case conversion may be inaccurate. Consider using '#align alternating_map.curry_left_comp_alternating_map AlternatingMap.curryLeft_compAlternatingMapₓ'. -/
@[simp]
theorem curryLeft_compAlternatingMap {n : ℕ} (g : N'' →ₗ[R'] N₂'')
    (f : AlternatingMap R' M'' N'' (Fin n.succ)) (m : M'') :
    (g.compAlternatingMap f).curryLeft m = g.compAlternatingMap (f.curryLeft m) :=
  rfl
#align alternating_map.curry_left_comp_alternating_map AlternatingMap.curryLeft_compAlternatingMap

/- warning: alternating_map.curry_left_comp_linear_map -> AlternatingMap.curryLeft_compLinearMap is a dubious translation:
lean 3 declaration is
  forall {R' : Type.{u1}} {M'' : Type.{u2}} {M₂'' : Type.{u3}} {N'' : Type.{u4}} [_inst_10 : CommSemiring.{u1} R'] [_inst_11 : AddCommMonoid.{u2} M''] [_inst_12 : AddCommMonoid.{u3} M₂''] [_inst_13 : AddCommMonoid.{u4} N''] [_inst_15 : Module.{u1, u2} R' M'' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_11] [_inst_16 : Module.{u1, u3} R' M₂'' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_12] [_inst_17 : Module.{u1, u4} R' N'' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_13] {n : Nat} (g : LinearMap.{u1, u1, u3, u2} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M₂'' M'' _inst_12 _inst_11 _inst_16 _inst_15) (f : AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (m : M₂''), Eq.{max (succ u3) (succ u4)} (AlternatingMap.{u1, u3, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M₂'' _inst_12 _inst_16 N'' _inst_13 _inst_17 (Fin n)) (coeFn.{max (succ u3) (succ (max u3 u4)), max (succ u3) (succ (max u3 u4))} (LinearMap.{u1, u1, u3, max u3 u4} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M₂'' (AlternatingMap.{u1, u3, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M₂'' _inst_12 _inst_16 N'' _inst_13 _inst_17 (Fin n)) _inst_12 (AlternatingMap.addCommMonoid.{u1, u3, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M₂'' _inst_12 _inst_16 N'' _inst_13 _inst_17 (Fin n)) _inst_16 (AlternatingMap.module.{u1, u3, u4, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M₂'' _inst_12 _inst_16 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u4, u1} R' N'' _inst_10 _inst_13 _inst_17))) (fun (_x : LinearMap.{u1, u1, u3, max u3 u4} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M₂'' (AlternatingMap.{u1, u3, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M₂'' _inst_12 _inst_16 N'' _inst_13 _inst_17 (Fin n)) _inst_12 (AlternatingMap.addCommMonoid.{u1, u3, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M₂'' _inst_12 _inst_16 N'' _inst_13 _inst_17 (Fin n)) _inst_16 (AlternatingMap.module.{u1, u3, u4, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M₂'' _inst_12 _inst_16 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u4, u1} R' N'' _inst_10 _inst_13 _inst_17))) => M₂'' -> (AlternatingMap.{u1, u3, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M₂'' _inst_12 _inst_16 N'' _inst_13 _inst_17 (Fin n))) (LinearMap.hasCoeToFun.{u1, u1, u3, max u3 u4} R' R' M₂'' (AlternatingMap.{u1, u3, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M₂'' _inst_12 _inst_16 N'' _inst_13 _inst_17 (Fin n)) (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_12 (AlternatingMap.addCommMonoid.{u1, u3, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M₂'' _inst_12 _inst_16 N'' _inst_13 _inst_17 (Fin n)) _inst_16 (AlternatingMap.module.{u1, u3, u4, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M₂'' _inst_12 _inst_16 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u4, u1} R' N'' _inst_10 _inst_13 _inst_17)) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10)))) (AlternatingMap.curryLeft.{u1, u3, u4} R' M₂'' N'' _inst_10 _inst_12 _inst_13 _inst_16 _inst_17 n (AlternatingMap.compLinearMap.{u1, u2, u4, 0, u3} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n)) M₂'' _inst_12 _inst_16 f g)) m) (AlternatingMap.compLinearMap.{u1, u2, u4, 0, u3} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) M₂'' _inst_12 _inst_16 (coeFn.{max (succ u2) (succ (max u2 u4)), max (succ u2) (succ (max u2 u4))} (LinearMap.{u1, u1, u2, max u2 u4} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M'' (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u2, u4, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u4, u1} R' N'' _inst_10 _inst_13 _inst_17))) (fun (_x : LinearMap.{u1, u1, u2, max u2 u4} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M'' (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u2, u4, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u4, u1} R' N'' _inst_10 _inst_13 _inst_17))) => M'' -> (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n))) (LinearMap.hasCoeToFun.{u1, u1, u2, max u2 u4} R' R' M'' (AlternatingMap.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_11 (AlternatingMap.addCommMonoid.{u1, u2, u4, 0} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u1, u2, u4, 0, u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_17 (AlternatingMap.curryLeft._proof_1.{u4, u1} R' N'' _inst_10 _inst_13 _inst_17)) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10)))) (AlternatingMap.curryLeft.{u1, u2, u4} R' M'' N'' _inst_10 _inst_11 _inst_13 _inst_15 _inst_17 n f) (coeFn.{max (succ u3) (succ u2), max (succ u3) (succ u2)} (LinearMap.{u1, u1, u3, u2} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M₂'' M'' _inst_12 _inst_11 _inst_16 _inst_15) (fun (_x : LinearMap.{u1, u1, u3, u2} R' R' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10))) M₂'' M'' _inst_12 _inst_11 _inst_16 _inst_15) => M₂'' -> M'') (LinearMap.hasCoeToFun.{u1, u1, u3, u2} R' R' M₂'' M'' (CommSemiring.toSemiring.{u1} R' _inst_10) (CommSemiring.toSemiring.{u1} R' _inst_10) _inst_12 _inst_11 _inst_16 _inst_15 (RingHom.id.{u1} R' (Semiring.toNonAssocSemiring.{u1} R' (CommSemiring.toSemiring.{u1} R' _inst_10)))) g m)) g)
but is expected to have type
  forall {R' : Type.{u4}} {M'' : Type.{u2}} {M₂'' : Type.{u3}} {N'' : Type.{u1}} [_inst_10 : CommSemiring.{u4} R'] [_inst_11 : AddCommMonoid.{u2} M''] [_inst_12 : AddCommMonoid.{u3} M₂''] [_inst_13 : AddCommMonoid.{u1} N''] [_inst_15 : Module.{u4, u2} R' M'' (CommSemiring.toSemiring.{u4} R' _inst_10) _inst_11] [_inst_16 : Module.{u4, u3} R' M₂'' (CommSemiring.toSemiring.{u4} R' _inst_10) _inst_12] [_inst_17 : Module.{u4, u1} R' N'' (CommSemiring.toSemiring.{u4} R' _inst_10) _inst_13] {n : Nat} (g : LinearMap.{u4, u4, u3, u2} R' R' (CommSemiring.toSemiring.{u4} R' _inst_10) (CommSemiring.toSemiring.{u4} R' _inst_10) (RingHom.id.{u4} R' (Semiring.toNonAssocSemiring.{u4} R' (CommSemiring.toSemiring.{u4} R' _inst_10))) M₂'' M'' _inst_12 _inst_11 _inst_16 _inst_15) (f : AlternatingMap.{u4, u2, u1, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n))) (m : M₂''), Eq.{max (succ u3) (succ u1)} ((fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : M₂'') => AlternatingMap.{u4, u3, u1, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M₂'' _inst_12 _inst_16 N'' _inst_13 _inst_17 (Fin n)) m) (FunLike.coe.{max (succ u3) (succ u1), succ u3, max (succ u3) (succ u1)} (LinearMap.{u4, u4, u3, max u1 u3} R' R' (CommSemiring.toSemiring.{u4} R' _inst_10) (CommSemiring.toSemiring.{u4} R' _inst_10) (RingHom.id.{u4} R' (Semiring.toNonAssocSemiring.{u4} R' (CommSemiring.toSemiring.{u4} R' _inst_10))) M₂'' (AlternatingMap.{u4, u3, u1, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M₂'' _inst_12 _inst_16 N'' _inst_13 _inst_17 (Fin n)) _inst_12 (AlternatingMap.addCommMonoid.{u4, u3, u1, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M₂'' _inst_12 _inst_16 N'' _inst_13 _inst_17 (Fin n)) _inst_16 (AlternatingMap.module.{u4, u3, u1, 0, u4} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M₂'' _inst_12 _inst_16 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u4} R' _inst_10) _inst_17 (smulCommClass_self.{u4, u1} R' N'' (CommSemiring.toCommMonoid.{u4} R' _inst_10) (MulActionWithZero.toMulAction.{u4, u1} R' N'' (Semiring.toMonoidWithZero.{u4} R' (CommSemiring.toSemiring.{u4} R' _inst_10)) (AddMonoid.toZero.{u1} N'' (AddCommMonoid.toAddMonoid.{u1} N'' _inst_13)) (Module.toMulActionWithZero.{u4, u1} R' N'' (CommSemiring.toSemiring.{u4} R' _inst_10) _inst_13 _inst_17))))) M₂'' (fun (_x : M₂'') => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : M₂'') => AlternatingMap.{u4, u3, u1, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M₂'' _inst_12 _inst_16 N'' _inst_13 _inst_17 (Fin n)) _x) (LinearMap.instFunLikeLinearMap.{u4, u4, u3, max u3 u1} R' R' M₂'' (AlternatingMap.{u4, u3, u1, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M₂'' _inst_12 _inst_16 N'' _inst_13 _inst_17 (Fin n)) (CommSemiring.toSemiring.{u4} R' _inst_10) (CommSemiring.toSemiring.{u4} R' _inst_10) _inst_12 (AlternatingMap.addCommMonoid.{u4, u3, u1, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M₂'' _inst_12 _inst_16 N'' _inst_13 _inst_17 (Fin n)) _inst_16 (AlternatingMap.module.{u4, u3, u1, 0, u4} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M₂'' _inst_12 _inst_16 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u4} R' _inst_10) _inst_17 (smulCommClass_self.{u4, u1} R' N'' (CommSemiring.toCommMonoid.{u4} R' _inst_10) (MulActionWithZero.toMulAction.{u4, u1} R' N'' (Semiring.toMonoidWithZero.{u4} R' (CommSemiring.toSemiring.{u4} R' _inst_10)) (AddMonoid.toZero.{u1} N'' (AddCommMonoid.toAddMonoid.{u1} N'' _inst_13)) (Module.toMulActionWithZero.{u4, u1} R' N'' (CommSemiring.toSemiring.{u4} R' _inst_10) _inst_13 _inst_17)))) (RingHom.id.{u4} R' (Semiring.toNonAssocSemiring.{u4} R' (CommSemiring.toSemiring.{u4} R' _inst_10)))) (AlternatingMap.curryLeft.{u4, u3, u1} R' M₂'' N'' _inst_10 _inst_12 _inst_13 _inst_16 _inst_17 n (AlternatingMap.compLinearMap.{u4, u2, u1, 0, u3} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin (Nat.succ n)) M₂'' _inst_12 _inst_16 f g)) m) (AlternatingMap.compLinearMap.{u4, u2, u1, 0, u3} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) M₂'' _inst_12 _inst_16 (FunLike.coe.{max (succ u2) (succ u1), succ u2, max (succ u2) (succ u1)} (LinearMap.{u4, u4, u2, max u1 u2} R' R' (CommSemiring.toSemiring.{u4} R' _inst_10) (CommSemiring.toSemiring.{u4} R' _inst_10) (RingHom.id.{u4} R' (Semiring.toNonAssocSemiring.{u4} R' (CommSemiring.toSemiring.{u4} R' _inst_10))) M'' (AlternatingMap.{u4, u2, u1, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_11 (AlternatingMap.addCommMonoid.{u4, u2, u1, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u4, u2, u1, 0, u4} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u4} R' _inst_10) _inst_17 (smulCommClass_self.{u4, u1} R' N'' (CommSemiring.toCommMonoid.{u4} R' _inst_10) (MulActionWithZero.toMulAction.{u4, u1} R' N'' (Semiring.toMonoidWithZero.{u4} R' (CommSemiring.toSemiring.{u4} R' _inst_10)) (AddMonoid.toZero.{u1} N'' (AddCommMonoid.toAddMonoid.{u1} N'' _inst_13)) (Module.toMulActionWithZero.{u4, u1} R' N'' (CommSemiring.toSemiring.{u4} R' _inst_10) _inst_13 _inst_17))))) M'' (fun (_x : M'') => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : M'') => AlternatingMap.{u4, u2, u1, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _x) (LinearMap.instFunLikeLinearMap.{u4, u4, u2, max u2 u1} R' R' M'' (AlternatingMap.{u4, u2, u1, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) (CommSemiring.toSemiring.{u4} R' _inst_10) (CommSemiring.toSemiring.{u4} R' _inst_10) _inst_11 (AlternatingMap.addCommMonoid.{u4, u2, u1, 0} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n)) _inst_15 (AlternatingMap.module.{u4, u2, u1, 0, u4} R' (CommSemiring.toSemiring.{u4} R' _inst_10) M'' _inst_11 _inst_15 N'' _inst_13 _inst_17 (Fin n) R' (CommSemiring.toSemiring.{u4} R' _inst_10) _inst_17 (smulCommClass_self.{u4, u1} R' N'' (CommSemiring.toCommMonoid.{u4} R' _inst_10) (MulActionWithZero.toMulAction.{u4, u1} R' N'' (Semiring.toMonoidWithZero.{u4} R' (CommSemiring.toSemiring.{u4} R' _inst_10)) (AddMonoid.toZero.{u1} N'' (AddCommMonoid.toAddMonoid.{u1} N'' _inst_13)) (Module.toMulActionWithZero.{u4, u1} R' N'' (CommSemiring.toSemiring.{u4} R' _inst_10) _inst_13 _inst_17)))) (RingHom.id.{u4} R' (Semiring.toNonAssocSemiring.{u4} R' (CommSemiring.toSemiring.{u4} R' _inst_10)))) (AlternatingMap.curryLeft.{u4, u2, u1} R' M'' N'' _inst_10 _inst_11 _inst_13 _inst_15 _inst_17 n f) (FunLike.coe.{max (succ u2) (succ u3), succ u3, succ u2} (LinearMap.{u4, u4, u3, u2} R' R' (CommSemiring.toSemiring.{u4} R' _inst_10) (CommSemiring.toSemiring.{u4} R' _inst_10) (RingHom.id.{u4} R' (Semiring.toNonAssocSemiring.{u4} R' (CommSemiring.toSemiring.{u4} R' _inst_10))) M₂'' M'' _inst_12 _inst_11 _inst_16 _inst_15) M₂'' (fun (_x : M₂'') => (fun (x._@.Mathlib.Algebra.Module.LinearMap._hyg.6190 : M₂'') => M'') _x) (LinearMap.instFunLikeLinearMap.{u4, u4, u3, u2} R' R' M₂'' M'' (CommSemiring.toSemiring.{u4} R' _inst_10) (CommSemiring.toSemiring.{u4} R' _inst_10) _inst_12 _inst_11 _inst_16 _inst_15 (RingHom.id.{u4} R' (Semiring.toNonAssocSemiring.{u4} R' (CommSemiring.toSemiring.{u4} R' _inst_10)))) g m)) g)
Case conversion may be inaccurate. Consider using '#align alternating_map.curry_left_comp_linear_map AlternatingMap.curryLeft_compLinearMapₓ'. -/
@[simp]
theorem curryLeft_compLinearMap {n : ℕ} (g : M₂'' →ₗ[R'] M'')
    (f : AlternatingMap R' M'' N'' (Fin n.succ)) (m : M₂'') :
    (f.compLinearMap g).curryLeft m = (f.curryLeft (g m)).compLinearMap g :=
  ext fun v =>
    congr_arg f <|
      funext <| by
        refine' Fin.cases _ _
        · rfl
        · simp
#align alternating_map.curry_left_comp_linear_map AlternatingMap.curryLeft_compLinearMap

#print AlternatingMap.constLinearEquivOfIsEmpty /-
/-- The space of constant maps is equivalent to the space of maps that are alternating with respect
to an empty family. -/
@[simps]
def constLinearEquivOfIsEmpty [IsEmpty ι] : N'' ≃ₗ[R'] AlternatingMap R' M'' N'' ι
    where
  toFun := AlternatingMap.constOfIsEmpty R' M''
  map_add' x y := rfl
  map_smul' t x := rfl
  invFun f := f 0
  left_inv _ := rfl
  right_inv f := ext fun x => AlternatingMap.congr_arg f <| Subsingleton.elim _ _
#align alternating_map.const_linear_equiv_of_is_empty AlternatingMap.constLinearEquivOfIsEmpty
-/

end AlternatingMap

end Currying

