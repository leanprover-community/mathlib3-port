/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, S√©bastien Gou√´zel, Patrick Massot

! This file was ported from Lean 3 source module topology.uniform_space.uniform_embedding
! leanprover-community/mathlib commit 195fcd60ff2bfe392543bceb0ec2adcdb472db4c
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Topology.UniformSpace.Cauchy
import Mathbin.Topology.UniformSpace.Separation
import Mathbin.Topology.DenseEmbedding

/-!
# Uniform embeddings of uniform spaces.

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

Extension of uniform continuous functions.
-/


open Filter TopologicalSpace Set Function Classical

open Classical uniformity Topology Filter

section

variable {Œ± : Type _} {Œ≤ : Type _} {Œ≥ : Type _} [UniformSpace Œ±] [UniformSpace Œ≤] [UniformSpace Œ≥]

universe u v

/-!
### Uniform inducing maps
-/


#print UniformInducing /-
/-- A map `f : Œ± ‚Üí Œ≤` between uniform spaces is called *uniform inducing* if the uniformity filter
on `Œ±` is the pullback of the uniformity filter on `Œ≤` under `prod.map f f`. If `Œ±` is a separated
space, then this implies that `f` is injective, hence it is a `uniform_embedding`. -/
@[mk_iff]
structure UniformInducing (f : Œ± ‚Üí Œ≤) : Prop where
  comap_uniformity : comap (fun x : Œ± √ó Œ± => (f x.1, f x.2)) (ùì§ Œ≤) = ùì§ Œ±
#align uniform_inducing UniformInducing
-/

#print UniformInducing.comap_uniformSpace /-
protected theorem UniformInducing.comap_uniformSpace {f : Œ± ‚Üí Œ≤} (hf : UniformInducing f) :
    ‚ÄπUniformSpace Œ≤‚Ä∫.comap f = ‚ÄπUniformSpace Œ±‚Ä∫ :=
  uniformSpace_eq hf.1
#align uniform_inducing.comap_uniform_space UniformInducing.comap_uniformSpace
-/

/- warning: uniform_inducing_iff' -> uniformInducing_iff' is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : UniformSpace.{u1} Œ±] [_inst_2 : UniformSpace.{u2} Œ≤] {f : Œ± -> Œ≤}, Iff (UniformInducing.{u1, u2} Œ± Œ≤ _inst_1 _inst_2 f) (And (UniformContinuous.{u1, u2} Œ± Œ≤ _inst_1 _inst_2 f) (LE.le.{u1} (Filter.{u1} (Prod.{u1, u1} Œ± Œ±)) (Preorder.toLE.{u1} (Filter.{u1} (Prod.{u1, u1} Œ± Œ±)) (PartialOrder.toPreorder.{u1} (Filter.{u1} (Prod.{u1, u1} Œ± Œ±)) (Filter.partialOrder.{u1} (Prod.{u1, u1} Œ± Œ±)))) (Filter.comap.{u1, u2} (Prod.{u1, u1} Œ± Œ±) (Prod.{u2, u2} Œ≤ Œ≤) (Prod.map.{u1, u2, u1, u2} Œ± Œ≤ Œ± Œ≤ f f) (uniformity.{u2} Œ≤ _inst_2)) (uniformity.{u1} Œ± _inst_1)))
but is expected to have type
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : UniformSpace.{u1} Œ±] [_inst_2 : UniformSpace.{u2} Œ≤] {f : Œ± -> Œ≤}, Iff (UniformInducing.{u1, u2} Œ± Œ≤ _inst_1 _inst_2 f) (And (UniformContinuous.{u1, u2} Œ± Œ≤ _inst_1 _inst_2 f) (LE.le.{u1} (Filter.{u1} (Prod.{u1, u1} Œ± Œ±)) (Preorder.toLE.{u1} (Filter.{u1} (Prod.{u1, u1} Œ± Œ±)) (PartialOrder.toPreorder.{u1} (Filter.{u1} (Prod.{u1, u1} Œ± Œ±)) (Filter.instPartialOrderFilter.{u1} (Prod.{u1, u1} Œ± Œ±)))) (Filter.comap.{u1, u2} (Prod.{u1, u1} Œ± Œ±) (Prod.{u2, u2} Œ≤ Œ≤) (Prod.map.{u1, u2, u1, u2} Œ± Œ≤ Œ± Œ≤ f f) (uniformity.{u2} Œ≤ _inst_2)) (uniformity.{u1} Œ± _inst_1)))
Case conversion may be inaccurate. Consider using '#align uniform_inducing_iff' uniformInducing_iff'‚Çì'. -/
theorem uniformInducing_iff' {f : Œ± ‚Üí Œ≤} :
    UniformInducing f ‚Üî UniformContinuous f ‚àß comap (Prod.map f f) (ùì§ Œ≤) ‚â§ ùì§ Œ± := by
  rw [uniformInducing_iff, UniformContinuous, tendsto_iff_comap, le_antisymm_iff, and_comm'] <;> rfl
#align uniform_inducing_iff' uniformInducing_iff'

/- warning: filter.has_basis.uniform_inducing_iff -> Filter.HasBasis.uniformInducing_iff is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : UniformSpace.{u1} Œ±] [_inst_2 : UniformSpace.{u2} Œ≤] {Œπ : Sort.{u3}} {Œπ' : Sort.{u4}} {p : Œπ -> Prop} {p' : Œπ' -> Prop} {s : Œπ -> (Set.{u1} (Prod.{u1, u1} Œ± Œ±))} {s' : Œπ' -> (Set.{u2} (Prod.{u2, u2} Œ≤ Œ≤))}, (Filter.HasBasis.{u1, u3} (Prod.{u1, u1} Œ± Œ±) Œπ (uniformity.{u1} Œ± _inst_1) p s) -> (Filter.HasBasis.{u2, u4} (Prod.{u2, u2} Œ≤ Œ≤) Œπ' (uniformity.{u2} Œ≤ _inst_2) p' s') -> (forall {f : Œ± -> Œ≤}, Iff (UniformInducing.{u1, u2} Œ± Œ≤ _inst_1 _inst_2 f) (And (forall (i : Œπ'), (p' i) -> (Exists.{u3} Œπ (fun (j : Œπ) => And (p j) (forall (x : Œ±) (y : Œ±), (Membership.Mem.{u1, u1} (Prod.{u1, u1} Œ± Œ±) (Set.{u1} (Prod.{u1, u1} Œ± Œ±)) (Set.hasMem.{u1} (Prod.{u1, u1} Œ± Œ±)) (Prod.mk.{u1, u1} Œ± Œ± x y) (s j)) -> (Membership.Mem.{u2, u2} (Prod.{u2, u2} Œ≤ Œ≤) (Set.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (Set.hasMem.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (Prod.mk.{u2, u2} Œ≤ Œ≤ (f x) (f y)) (s' i)))))) (forall (j : Œπ), (p j) -> (Exists.{u4} Œπ' (fun (i : Œπ') => And (p' i) (forall (x : Œ±) (y : Œ±), (Membership.Mem.{u2, u2} (Prod.{u2, u2} Œ≤ Œ≤) (Set.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (Set.hasMem.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (Prod.mk.{u2, u2} Œ≤ Œ≤ (f x) (f y)) (s' i)) -> (Membership.Mem.{u1, u1} (Prod.{u1, u1} Œ± Œ±) (Set.{u1} (Prod.{u1, u1} Œ± Œ±)) (Set.hasMem.{u1} (Prod.{u1, u1} Œ± Œ±)) (Prod.mk.{u1, u1} Œ± Œ± x y) (s j))))))))
but is expected to have type
  forall {Œ± : Type.{u3}} {Œ≤ : Type.{u4}} [_inst_1 : UniformSpace.{u3} Œ±] [_inst_2 : UniformSpace.{u4} Œ≤] {Œπ : Sort.{u2}} {Œπ' : Sort.{u1}} {p : Œπ -> Prop} {p' : Œπ' -> Prop} {s : Œπ -> (Set.{u3} (Prod.{u3, u3} Œ± Œ±))} {s' : Œπ' -> (Set.{u4} (Prod.{u4, u4} Œ≤ Œ≤))}, (Filter.HasBasis.{u3, u2} (Prod.{u3, u3} Œ± Œ±) Œπ (uniformity.{u3} Œ± _inst_1) p s) -> (Filter.HasBasis.{u4, u1} (Prod.{u4, u4} Œ≤ Œ≤) Œπ' (uniformity.{u4} Œ≤ _inst_2) p' s') -> (forall {f : Œ± -> Œ≤}, Iff (UniformInducing.{u3, u4} Œ± Œ≤ _inst_1 _inst_2 f) (And (forall (i : Œπ'), (p' i) -> (Exists.{u2} Œπ (fun (j : Œπ) => And (p j) (forall (x : Œ±) (y : Œ±), (Membership.mem.{u3, u3} (Prod.{u3, u3} Œ± Œ±) (Set.{u3} (Prod.{u3, u3} Œ± Œ±)) (Set.instMembershipSet.{u3} (Prod.{u3, u3} Œ± Œ±)) (Prod.mk.{u3, u3} Œ± Œ± x y) (s j)) -> (Membership.mem.{u4, u4} (Prod.{u4, u4} Œ≤ Œ≤) (Set.{u4} (Prod.{u4, u4} Œ≤ Œ≤)) (Set.instMembershipSet.{u4} (Prod.{u4, u4} Œ≤ Œ≤)) (Prod.mk.{u4, u4} Œ≤ Œ≤ (f x) (f y)) (s' i)))))) (forall (j : Œπ), (p j) -> (Exists.{u1} Œπ' (fun (i : Œπ') => And (p' i) (forall (x : Œ±) (y : Œ±), (Membership.mem.{u4, u4} (Prod.{u4, u4} Œ≤ Œ≤) (Set.{u4} (Prod.{u4, u4} Œ≤ Œ≤)) (Set.instMembershipSet.{u4} (Prod.{u4, u4} Œ≤ Œ≤)) (Prod.mk.{u4, u4} Œ≤ Œ≤ (f x) (f y)) (s' i)) -> (Membership.mem.{u3, u3} (Prod.{u3, u3} Œ± Œ±) (Set.{u3} (Prod.{u3, u3} Œ± Œ±)) (Set.instMembershipSet.{u3} (Prod.{u3, u3} Œ± Œ±)) (Prod.mk.{u3, u3} Œ± Œ± x y) (s j))))))))
Case conversion may be inaccurate. Consider using '#align filter.has_basis.uniform_inducing_iff Filter.HasBasis.uniformInducing_iff‚Çì'. -/
protected theorem Filter.HasBasis.uniformInducing_iff {Œπ Œπ'} {p : Œπ ‚Üí Prop} {p' : Œπ' ‚Üí Prop} {s s'}
    (h : (ùì§ Œ±).HasBasis p s) (h' : (ùì§ Œ≤).HasBasis p' s') {f : Œ± ‚Üí Œ≤} :
    UniformInducing f ‚Üî
      (‚àÄ i, p' i ‚Üí ‚àÉ j, p j ‚àß ‚àÄ x y, (x, y) ‚àà s j ‚Üí (f x, f y) ‚àà s' i) ‚àß
        ‚àÄ j, p j ‚Üí ‚àÉ i, p' i ‚àß ‚àÄ x y, (f x, f y) ‚àà s' i ‚Üí (x, y) ‚àà s j :=
  by
  simp [uniformInducing_iff', h.uniform_continuous_iff h', (h'.comap _).le_basis_iff‚Çì h, subset_def]
#align filter.has_basis.uniform_inducing_iff Filter.HasBasis.uniformInducing_iff

/- warning: uniform_inducing.mk' -> UniformInducing.mk' is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : UniformSpace.{u1} Œ±] [_inst_2 : UniformSpace.{u2} Œ≤] {f : Œ± -> Œ≤}, (forall (s : Set.{u1} (Prod.{u1, u1} Œ± Œ±)), Iff (Membership.Mem.{u1, u1} (Set.{u1} (Prod.{u1, u1} Œ± Œ±)) (Filter.{u1} (Prod.{u1, u1} Œ± Œ±)) (Filter.hasMem.{u1} (Prod.{u1, u1} Œ± Œ±)) s (uniformity.{u1} Œ± _inst_1)) (Exists.{succ u2} (Set.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (fun (t : Set.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) => Exists.{0} (Membership.Mem.{u2, u2} (Set.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (Filter.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (Filter.hasMem.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) t (uniformity.{u2} Œ≤ _inst_2)) (fun (H : Membership.Mem.{u2, u2} (Set.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (Filter.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (Filter.hasMem.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) t (uniformity.{u2} Œ≤ _inst_2)) => forall (x : Œ±) (y : Œ±), (Membership.Mem.{u2, u2} (Prod.{u2, u2} Œ≤ Œ≤) (Set.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (Set.hasMem.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (Prod.mk.{u2, u2} Œ≤ Œ≤ (f x) (f y)) t) -> (Membership.Mem.{u1, u1} (Prod.{u1, u1} Œ± Œ±) (Set.{u1} (Prod.{u1, u1} Œ± Œ±)) (Set.hasMem.{u1} (Prod.{u1, u1} Œ± Œ±)) (Prod.mk.{u1, u1} Œ± Œ± x y) s))))) -> (UniformInducing.{u1, u2} Œ± Œ≤ _inst_1 _inst_2 f)
but is expected to have type
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : UniformSpace.{u1} Œ±] [_inst_2 : UniformSpace.{u2} Œ≤] {f : Œ± -> Œ≤}, (forall (s : Set.{u1} (Prod.{u1, u1} Œ± Œ±)), Iff (Membership.mem.{u1, u1} (Set.{u1} (Prod.{u1, u1} Œ± Œ±)) (Filter.{u1} (Prod.{u1, u1} Œ± Œ±)) (instMembershipSetFilter.{u1} (Prod.{u1, u1} Œ± Œ±)) s (uniformity.{u1} Œ± _inst_1)) (Exists.{succ u2} (Set.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (fun (t : Set.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) => And (Membership.mem.{u2, u2} (Set.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (Filter.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (instMembershipSetFilter.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) t (uniformity.{u2} Œ≤ _inst_2)) (forall (x : Œ±) (y : Œ±), (Membership.mem.{u2, u2} (Prod.{u2, u2} Œ≤ Œ≤) (Set.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (Set.instMembershipSet.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (Prod.mk.{u2, u2} Œ≤ Œ≤ (f x) (f y)) t) -> (Membership.mem.{u1, u1} (Prod.{u1, u1} Œ± Œ±) (Set.{u1} (Prod.{u1, u1} Œ± Œ±)) (Set.instMembershipSet.{u1} (Prod.{u1, u1} Œ± Œ±)) (Prod.mk.{u1, u1} Œ± Œ± x y) s))))) -> (UniformInducing.{u1, u2} Œ± Œ≤ _inst_1 _inst_2 f)
Case conversion may be inaccurate. Consider using '#align uniform_inducing.mk' UniformInducing.mk'‚Çì'. -/
theorem UniformInducing.mk' {f : Œ± ‚Üí Œ≤}
    (h : ‚àÄ s, s ‚àà ùì§ Œ± ‚Üî ‚àÉ t ‚àà ùì§ Œ≤, ‚àÄ x y : Œ±, (f x, f y) ‚àà t ‚Üí (x, y) ‚àà s) : UniformInducing f :=
  ‚ü®by simp [eq_comm, Filter.ext_iff, subset_def, h]‚ü©
#align uniform_inducing.mk' UniformInducing.mk'

#print uniformInducing_id /-
theorem uniformInducing_id : UniformInducing (@id Œ±) :=
  ‚ü®by rw [‚Üê Prod.map_def, Prod.map_id, comap_id]‚ü©
#align uniform_inducing_id uniformInducing_id
-/

#print UniformInducing.comp /-
theorem UniformInducing.comp {g : Œ≤ ‚Üí Œ≥} (hg : UniformInducing g) {f : Œ± ‚Üí Œ≤}
    (hf : UniformInducing f) : UniformInducing (g ‚àò f) :=
  ‚ü®by rw [‚Üê hf.1, ‚Üê hg.1, comap_comap]‚ü©
#align uniform_inducing.comp UniformInducing.comp
-/

/- warning: uniform_inducing.basis_uniformity -> UniformInducing.basis_uniformity is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : UniformSpace.{u1} Œ±] [_inst_2 : UniformSpace.{u2} Œ≤] {f : Œ± -> Œ≤}, (UniformInducing.{u1, u2} Œ± Œ≤ _inst_1 _inst_2 f) -> (forall {Œπ : Sort.{u3}} {p : Œπ -> Prop} {s : Œπ -> (Set.{u2} (Prod.{u2, u2} Œ≤ Œ≤))}, (Filter.HasBasis.{u2, u3} (Prod.{u2, u2} Œ≤ Œ≤) Œπ (uniformity.{u2} Œ≤ _inst_2) p s) -> (Filter.HasBasis.{u1, u3} (Prod.{u1, u1} Œ± Œ±) Œπ (uniformity.{u1} Œ± _inst_1) p (fun (i : Œπ) => Set.preimage.{u1, u2} (Prod.{u1, u1} Œ± Œ±) (Prod.{u2, u2} Œ≤ Œ≤) (Prod.map.{u1, u2, u1, u2} Œ± Œ≤ Œ± Œ≤ f f) (s i))))
but is expected to have type
  forall {Œ± : Type.{u2}} {Œ≤ : Type.{u3}} [_inst_1 : UniformSpace.{u2} Œ±] [_inst_2 : UniformSpace.{u3} Œ≤] {f : Œ± -> Œ≤}, (UniformInducing.{u2, u3} Œ± Œ≤ _inst_1 _inst_2 f) -> (forall {Œπ : Sort.{u1}} {p : Œπ -> Prop} {s : Œπ -> (Set.{u3} (Prod.{u3, u3} Œ≤ Œ≤))}, (Filter.HasBasis.{u3, u1} (Prod.{u3, u3} Œ≤ Œ≤) Œπ (uniformity.{u3} Œ≤ _inst_2) p s) -> (Filter.HasBasis.{u2, u1} (Prod.{u2, u2} Œ± Œ±) Œπ (uniformity.{u2} Œ± _inst_1) p (fun (i : Œπ) => Set.preimage.{u2, u3} (Prod.{u2, u2} Œ± Œ±) (Prod.{u3, u3} Œ≤ Œ≤) (Prod.map.{u2, u3, u2, u3} Œ± Œ≤ Œ± Œ≤ f f) (s i))))
Case conversion may be inaccurate. Consider using '#align uniform_inducing.basis_uniformity UniformInducing.basis_uniformity‚Çì'. -/
theorem UniformInducing.basis_uniformity {f : Œ± ‚Üí Œ≤} (hf : UniformInducing f) {Œπ : Sort _}
    {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí Set (Œ≤ √ó Œ≤)} (H : (ùì§ Œ≤).HasBasis p s) :
    (ùì§ Œ±).HasBasis p fun i => Prod.map f f ‚Åª¬π' s i :=
  hf.1 ‚ñ∏ H.comap _
#align uniform_inducing.basis_uniformity UniformInducing.basis_uniformity

#print UniformInducing.cauchy_map_iff /-
theorem UniformInducing.cauchy_map_iff {f : Œ± ‚Üí Œ≤} (hf : UniformInducing f) {F : Filter Œ±} :
    Cauchy (map f F) ‚Üî Cauchy F := by
  simp only [Cauchy, map_ne_bot_iff, prod_map_map_eq, map_le_iff_le_comap, ‚Üê hf.comap_uniformity]
#align uniform_inducing.cauchy_map_iff UniformInducing.cauchy_map_iff
-/

#print uniformInducing_of_compose /-
theorem uniformInducing_of_compose {f : Œ± ‚Üí Œ≤} {g : Œ≤ ‚Üí Œ≥} (hf : UniformContinuous f)
    (hg : UniformContinuous g) (hgf : UniformInducing (g ‚àò f)) : UniformInducing f :=
  by
  refine' ‚ü®le_antisymm _ hf.le_comap‚ü©
  rw [‚Üê hgf.1, ‚Üê Prod.map_def, ‚Üê Prod.map_def, ‚Üê Prod.map_comp_map f f g g, ‚Üê
    @comap_comap _ _ _ _ (Prod.map f f)]
  exact comap_mono hg.le_comap
#align uniform_inducing_of_compose uniformInducing_of_compose
-/

#print UniformInducing.uniformContinuous /-
theorem UniformInducing.uniformContinuous {f : Œ± ‚Üí Œ≤} (hf : UniformInducing f) :
    UniformContinuous f :=
  (uniformInducing_iff'.1 hf).1
#align uniform_inducing.uniform_continuous UniformInducing.uniformContinuous
-/

#print UniformInducing.uniformContinuous_iff /-
theorem UniformInducing.uniformContinuous_iff {f : Œ± ‚Üí Œ≤} {g : Œ≤ ‚Üí Œ≥} (hg : UniformInducing g) :
    UniformContinuous f ‚Üî UniformContinuous (g ‚àò f) :=
  by
  dsimp only [UniformContinuous, tendsto]
  rw [‚Üê hg.comap_uniformity, ‚Üê map_le_iff_le_comap, Filter.map_map]
#align uniform_inducing.uniform_continuous_iff UniformInducing.uniformContinuous_iff
-/

#print UniformInducing.inducing /-
protected theorem UniformInducing.inducing {f : Œ± ‚Üí Œ≤} (h : UniformInducing f) : Inducing f :=
  by
  obtain rfl := h.comap_uniform_space
  letI := UniformSpace.comap f _
  exact ‚ü®rfl‚ü©
#align uniform_inducing.inducing UniformInducing.inducing
-/

/- warning: uniform_inducing.prod -> UniformInducing.prod is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : UniformSpace.{u1} Œ±] [_inst_2 : UniformSpace.{u2} Œ≤] {Œ±' : Type.{u3}} {Œ≤' : Type.{u4}} [_inst_4 : UniformSpace.{u3} Œ±'] [_inst_5 : UniformSpace.{u4} Œ≤'] {e‚ÇÅ : Œ± -> Œ±'} {e‚ÇÇ : Œ≤ -> Œ≤'}, (UniformInducing.{u1, u3} Œ± Œ±' _inst_1 _inst_4 e‚ÇÅ) -> (UniformInducing.{u2, u4} Œ≤ Œ≤' _inst_2 _inst_5 e‚ÇÇ) -> (UniformInducing.{max u1 u2, max u3 u4} (Prod.{u1, u2} Œ± Œ≤) (Prod.{u3, u4} Œ±' Œ≤') (Prod.uniformSpace.{u1, u2} Œ± Œ≤ _inst_1 _inst_2) (Prod.uniformSpace.{u3, u4} Œ±' Œ≤' _inst_4 _inst_5) (fun (p : Prod.{u1, u2} Œ± Œ≤) => Prod.mk.{u3, u4} Œ±' Œ≤' (e‚ÇÅ (Prod.fst.{u1, u2} Œ± Œ≤ p)) (e‚ÇÇ (Prod.snd.{u1, u2} Œ± Œ≤ p))))
but is expected to have type
  forall {Œ± : Type.{u3}} {Œ≤ : Type.{u4}} [_inst_1 : UniformSpace.{u3} Œ±] [_inst_2 : UniformSpace.{u4} Œ≤] {Œ±' : Type.{u2}} {Œ≤' : Type.{u1}} [_inst_4 : UniformSpace.{u2} Œ±'] [_inst_5 : UniformSpace.{u1} Œ≤'] {e‚ÇÅ : Œ± -> Œ±'} {e‚ÇÇ : Œ≤ -> Œ≤'}, (UniformInducing.{u3, u2} Œ± Œ±' _inst_1 _inst_4 e‚ÇÅ) -> (UniformInducing.{u4, u1} Œ≤ Œ≤' _inst_2 _inst_5 e‚ÇÇ) -> (UniformInducing.{max u3 u4, max u1 u2} (Prod.{u3, u4} Œ± Œ≤) (Prod.{u2, u1} Œ±' Œ≤') (instUniformSpaceProd.{u3, u4} Œ± Œ≤ _inst_1 _inst_2) (instUniformSpaceProd.{u2, u1} Œ±' Œ≤' _inst_4 _inst_5) (fun (p : Prod.{u3, u4} Œ± Œ≤) => Prod.mk.{u2, u1} Œ±' Œ≤' (e‚ÇÅ (Prod.fst.{u3, u4} Œ± Œ≤ p)) (e‚ÇÇ (Prod.snd.{u3, u4} Œ± Œ≤ p))))
Case conversion may be inaccurate. Consider using '#align uniform_inducing.prod UniformInducing.prod‚Çì'. -/
theorem UniformInducing.prod {Œ±' : Type _} {Œ≤' : Type _} [UniformSpace Œ±'] [UniformSpace Œ≤']
    {e‚ÇÅ : Œ± ‚Üí Œ±'} {e‚ÇÇ : Œ≤ ‚Üí Œ≤'} (h‚ÇÅ : UniformInducing e‚ÇÅ) (h‚ÇÇ : UniformInducing e‚ÇÇ) :
    UniformInducing fun p : Œ± √ó Œ≤ => (e‚ÇÅ p.1, e‚ÇÇ p.2) :=
  ‚ü®by
    simp [(¬∑ ‚àò ¬∑), uniformity_prod, h‚ÇÅ.comap_uniformity.symm, h‚ÇÇ.comap_uniformity.symm, comap_inf,
      comap_comap]‚ü©
#align uniform_inducing.prod UniformInducing.prod

#print UniformInducing.denseInducing /-
theorem UniformInducing.denseInducing {f : Œ± ‚Üí Œ≤} (h : UniformInducing f) (hd : DenseRange f) :
    DenseInducing f :=
  { dense := hd
    induced := h.Inducing.induced }
#align uniform_inducing.dense_inducing UniformInducing.denseInducing
-/

#print UniformInducing.injective /-
protected theorem UniformInducing.injective [T0Space Œ±] {f : Œ± ‚Üí Œ≤} (h : UniformInducing f) :
    Injective f :=
  h.Inducing.Injective
#align uniform_inducing.injective UniformInducing.injective
-/

#print UniformEmbedding /-
/-- A map `f : Œ± ‚Üí Œ≤` between uniform spaces is a *uniform embedding* if it is uniform inducing and
injective. If `Œ±` is a separated space, then the latter assumption follows from the former. -/
@[mk_iff]
structure UniformEmbedding (f : Œ± ‚Üí Œ≤) extends UniformInducing f : Prop where
  inj : Function.Injective f
#align uniform_embedding UniformEmbedding
-/

/- warning: uniform_embedding_iff' -> uniformEmbedding_iff' is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : UniformSpace.{u1} Œ±] [_inst_2 : UniformSpace.{u2} Œ≤] {f : Œ± -> Œ≤}, Iff (UniformEmbedding.{u1, u2} Œ± Œ≤ _inst_1 _inst_2 f) (And (Function.Injective.{succ u1, succ u2} Œ± Œ≤ f) (And (UniformContinuous.{u1, u2} Œ± Œ≤ _inst_1 _inst_2 f) (LE.le.{u1} (Filter.{u1} (Prod.{u1, u1} Œ± Œ±)) (Preorder.toLE.{u1} (Filter.{u1} (Prod.{u1, u1} Œ± Œ±)) (PartialOrder.toPreorder.{u1} (Filter.{u1} (Prod.{u1, u1} Œ± Œ±)) (Filter.partialOrder.{u1} (Prod.{u1, u1} Œ± Œ±)))) (Filter.comap.{u1, u2} (Prod.{u1, u1} Œ± Œ±) (Prod.{u2, u2} Œ≤ Œ≤) (Prod.map.{u1, u2, u1, u2} Œ± Œ≤ Œ± Œ≤ f f) (uniformity.{u2} Œ≤ _inst_2)) (uniformity.{u1} Œ± _inst_1))))
but is expected to have type
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : UniformSpace.{u1} Œ±] [_inst_2 : UniformSpace.{u2} Œ≤] {f : Œ± -> Œ≤}, Iff (UniformEmbedding.{u1, u2} Œ± Œ≤ _inst_1 _inst_2 f) (And (Function.Injective.{succ u1, succ u2} Œ± Œ≤ f) (And (UniformContinuous.{u1, u2} Œ± Œ≤ _inst_1 _inst_2 f) (LE.le.{u1} (Filter.{u1} (Prod.{u1, u1} Œ± Œ±)) (Preorder.toLE.{u1} (Filter.{u1} (Prod.{u1, u1} Œ± Œ±)) (PartialOrder.toPreorder.{u1} (Filter.{u1} (Prod.{u1, u1} Œ± Œ±)) (Filter.instPartialOrderFilter.{u1} (Prod.{u1, u1} Œ± Œ±)))) (Filter.comap.{u1, u2} (Prod.{u1, u1} Œ± Œ±) (Prod.{u2, u2} Œ≤ Œ≤) (Prod.map.{u1, u2, u1, u2} Œ± Œ≤ Œ± Œ≤ f f) (uniformity.{u2} Œ≤ _inst_2)) (uniformity.{u1} Œ± _inst_1))))
Case conversion may be inaccurate. Consider using '#align uniform_embedding_iff' uniformEmbedding_iff'‚Çì'. -/
theorem uniformEmbedding_iff' {f : Œ± ‚Üí Œ≤} :
    UniformEmbedding f ‚Üî Injective f ‚àß UniformContinuous f ‚àß comap (Prod.map f f) (ùì§ Œ≤) ‚â§ ùì§ Œ± := by
  rw [uniformEmbedding_iff, and_comm', uniformInducing_iff']
#align uniform_embedding_iff' uniformEmbedding_iff'

/- warning: filter.has_basis.uniform_embedding_iff' -> Filter.HasBasis.uniformEmbedding_iff' is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : UniformSpace.{u1} Œ±] [_inst_2 : UniformSpace.{u2} Œ≤] {Œπ : Sort.{u3}} {Œπ' : Sort.{u4}} {p : Œπ -> Prop} {p' : Œπ' -> Prop} {s : Œπ -> (Set.{u1} (Prod.{u1, u1} Œ± Œ±))} {s' : Œπ' -> (Set.{u2} (Prod.{u2, u2} Œ≤ Œ≤))}, (Filter.HasBasis.{u1, u3} (Prod.{u1, u1} Œ± Œ±) Œπ (uniformity.{u1} Œ± _inst_1) p s) -> (Filter.HasBasis.{u2, u4} (Prod.{u2, u2} Œ≤ Œ≤) Œπ' (uniformity.{u2} Œ≤ _inst_2) p' s') -> (forall {f : Œ± -> Œ≤}, Iff (UniformEmbedding.{u1, u2} Œ± Œ≤ _inst_1 _inst_2 f) (And (Function.Injective.{succ u1, succ u2} Œ± Œ≤ f) (And (forall (i : Œπ'), (p' i) -> (Exists.{u3} Œπ (fun (j : Œπ) => And (p j) (forall (x : Œ±) (y : Œ±), (Membership.Mem.{u1, u1} (Prod.{u1, u1} Œ± Œ±) (Set.{u1} (Prod.{u1, u1} Œ± Œ±)) (Set.hasMem.{u1} (Prod.{u1, u1} Œ± Œ±)) (Prod.mk.{u1, u1} Œ± Œ± x y) (s j)) -> (Membership.Mem.{u2, u2} (Prod.{u2, u2} Œ≤ Œ≤) (Set.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (Set.hasMem.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (Prod.mk.{u2, u2} Œ≤ Œ≤ (f x) (f y)) (s' i)))))) (forall (j : Œπ), (p j) -> (Exists.{u4} Œπ' (fun (i : Œπ') => And (p' i) (forall (x : Œ±) (y : Œ±), (Membership.Mem.{u2, u2} (Prod.{u2, u2} Œ≤ Œ≤) (Set.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (Set.hasMem.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (Prod.mk.{u2, u2} Œ≤ Œ≤ (f x) (f y)) (s' i)) -> (Membership.Mem.{u1, u1} (Prod.{u1, u1} Œ± Œ±) (Set.{u1} (Prod.{u1, u1} Œ± Œ±)) (Set.hasMem.{u1} (Prod.{u1, u1} Œ± Œ±)) (Prod.mk.{u1, u1} Œ± Œ± x y) (s j)))))))))
but is expected to have type
  forall {Œ± : Type.{u3}} {Œ≤ : Type.{u4}} [_inst_1 : UniformSpace.{u3} Œ±] [_inst_2 : UniformSpace.{u4} Œ≤] {Œπ : Sort.{u2}} {Œπ' : Sort.{u1}} {p : Œπ -> Prop} {p' : Œπ' -> Prop} {s : Œπ -> (Set.{u3} (Prod.{u3, u3} Œ± Œ±))} {s' : Œπ' -> (Set.{u4} (Prod.{u4, u4} Œ≤ Œ≤))}, (Filter.HasBasis.{u3, u2} (Prod.{u3, u3} Œ± Œ±) Œπ (uniformity.{u3} Œ± _inst_1) p s) -> (Filter.HasBasis.{u4, u1} (Prod.{u4, u4} Œ≤ Œ≤) Œπ' (uniformity.{u4} Œ≤ _inst_2) p' s') -> (forall {f : Œ± -> Œ≤}, Iff (UniformEmbedding.{u3, u4} Œ± Œ≤ _inst_1 _inst_2 f) (And (Function.Injective.{succ u3, succ u4} Œ± Œ≤ f) (And (forall (i : Œπ'), (p' i) -> (Exists.{u2} Œπ (fun (j : Œπ) => And (p j) (forall (x : Œ±) (y : Œ±), (Membership.mem.{u3, u3} (Prod.{u3, u3} Œ± Œ±) (Set.{u3} (Prod.{u3, u3} Œ± Œ±)) (Set.instMembershipSet.{u3} (Prod.{u3, u3} Œ± Œ±)) (Prod.mk.{u3, u3} Œ± Œ± x y) (s j)) -> (Membership.mem.{u4, u4} (Prod.{u4, u4} Œ≤ Œ≤) (Set.{u4} (Prod.{u4, u4} Œ≤ Œ≤)) (Set.instMembershipSet.{u4} (Prod.{u4, u4} Œ≤ Œ≤)) (Prod.mk.{u4, u4} Œ≤ Œ≤ (f x) (f y)) (s' i)))))) (forall (j : Œπ), (p j) -> (Exists.{u1} Œπ' (fun (i : Œπ') => And (p' i) (forall (x : Œ±) (y : Œ±), (Membership.mem.{u4, u4} (Prod.{u4, u4} Œ≤ Œ≤) (Set.{u4} (Prod.{u4, u4} Œ≤ Œ≤)) (Set.instMembershipSet.{u4} (Prod.{u4, u4} Œ≤ Œ≤)) (Prod.mk.{u4, u4} Œ≤ Œ≤ (f x) (f y)) (s' i)) -> (Membership.mem.{u3, u3} (Prod.{u3, u3} Œ± Œ±) (Set.{u3} (Prod.{u3, u3} Œ± Œ±)) (Set.instMembershipSet.{u3} (Prod.{u3, u3} Œ± Œ±)) (Prod.mk.{u3, u3} Œ± Œ± x y) (s j)))))))))
Case conversion may be inaccurate. Consider using '#align filter.has_basis.uniform_embedding_iff' Filter.HasBasis.uniformEmbedding_iff'‚Çì'. -/
theorem Filter.HasBasis.uniformEmbedding_iff' {Œπ Œπ'} {p : Œπ ‚Üí Prop} {p' : Œπ' ‚Üí Prop} {s s'}
    (h : (ùì§ Œ±).HasBasis p s) (h' : (ùì§ Œ≤).HasBasis p' s') {f : Œ± ‚Üí Œ≤} :
    UniformEmbedding f ‚Üî
      Injective f ‚àß
        (‚àÄ i, p' i ‚Üí ‚àÉ j, p j ‚àß ‚àÄ x y, (x, y) ‚àà s j ‚Üí (f x, f y) ‚àà s' i) ‚àß
          ‚àÄ j, p j ‚Üí ‚àÉ i, p' i ‚àß ‚àÄ x y, (f x, f y) ‚àà s' i ‚Üí (x, y) ‚àà s j :=
  by rw [uniformEmbedding_iff, and_comm', h.uniform_inducing_iff h']
#align filter.has_basis.uniform_embedding_iff' Filter.HasBasis.uniformEmbedding_iff'

/- warning: filter.has_basis.uniform_embedding_iff -> Filter.HasBasis.uniformEmbedding_iff is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : UniformSpace.{u1} Œ±] [_inst_2 : UniformSpace.{u2} Œ≤] {Œπ : Sort.{u3}} {Œπ' : Sort.{u4}} {p : Œπ -> Prop} {p' : Œπ' -> Prop} {s : Œπ -> (Set.{u1} (Prod.{u1, u1} Œ± Œ±))} {s' : Œπ' -> (Set.{u2} (Prod.{u2, u2} Œ≤ Œ≤))}, (Filter.HasBasis.{u1, u3} (Prod.{u1, u1} Œ± Œ±) Œπ (uniformity.{u1} Œ± _inst_1) p s) -> (Filter.HasBasis.{u2, u4} (Prod.{u2, u2} Œ≤ Œ≤) Œπ' (uniformity.{u2} Œ≤ _inst_2) p' s') -> (forall {f : Œ± -> Œ≤}, Iff (UniformEmbedding.{u1, u2} Œ± Œ≤ _inst_1 _inst_2 f) (And (Function.Injective.{succ u1, succ u2} Œ± Œ≤ f) (And (UniformContinuous.{u1, u2} Œ± Œ≤ _inst_1 _inst_2 f) (forall (j : Œπ), (p j) -> (Exists.{u4} Œπ' (fun (i : Œπ') => And (p' i) (forall (x : Œ±) (y : Œ±), (Membership.Mem.{u2, u2} (Prod.{u2, u2} Œ≤ Œ≤) (Set.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (Set.hasMem.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (Prod.mk.{u2, u2} Œ≤ Œ≤ (f x) (f y)) (s' i)) -> (Membership.Mem.{u1, u1} (Prod.{u1, u1} Œ± Œ±) (Set.{u1} (Prod.{u1, u1} Œ± Œ±)) (Set.hasMem.{u1} (Prod.{u1, u1} Œ± Œ±)) (Prod.mk.{u1, u1} Œ± Œ± x y) (s j)))))))))
but is expected to have type
  forall {Œ± : Type.{u3}} {Œ≤ : Type.{u4}} [_inst_1 : UniformSpace.{u3} Œ±] [_inst_2 : UniformSpace.{u4} Œ≤] {Œπ : Sort.{u2}} {Œπ' : Sort.{u1}} {p : Œπ -> Prop} {p' : Œπ' -> Prop} {s : Œπ -> (Set.{u3} (Prod.{u3, u3} Œ± Œ±))} {s' : Œπ' -> (Set.{u4} (Prod.{u4, u4} Œ≤ Œ≤))}, (Filter.HasBasis.{u3, u2} (Prod.{u3, u3} Œ± Œ±) Œπ (uniformity.{u3} Œ± _inst_1) p s) -> (Filter.HasBasis.{u4, u1} (Prod.{u4, u4} Œ≤ Œ≤) Œπ' (uniformity.{u4} Œ≤ _inst_2) p' s') -> (forall {f : Œ± -> Œ≤}, Iff (UniformEmbedding.{u3, u4} Œ± Œ≤ _inst_1 _inst_2 f) (And (Function.Injective.{succ u3, succ u4} Œ± Œ≤ f) (And (UniformContinuous.{u3, u4} Œ± Œ≤ _inst_1 _inst_2 f) (forall (j : Œπ), (p j) -> (Exists.{u1} Œπ' (fun (i : Œπ') => And (p' i) (forall (x : Œ±) (y : Œ±), (Membership.mem.{u4, u4} (Prod.{u4, u4} Œ≤ Œ≤) (Set.{u4} (Prod.{u4, u4} Œ≤ Œ≤)) (Set.instMembershipSet.{u4} (Prod.{u4, u4} Œ≤ Œ≤)) (Prod.mk.{u4, u4} Œ≤ Œ≤ (f x) (f y)) (s' i)) -> (Membership.mem.{u3, u3} (Prod.{u3, u3} Œ± Œ±) (Set.{u3} (Prod.{u3, u3} Œ± Œ±)) (Set.instMembershipSet.{u3} (Prod.{u3, u3} Œ± Œ±)) (Prod.mk.{u3, u3} Œ± Œ± x y) (s j)))))))))
Case conversion may be inaccurate. Consider using '#align filter.has_basis.uniform_embedding_iff Filter.HasBasis.uniformEmbedding_iff‚Çì'. -/
theorem Filter.HasBasis.uniformEmbedding_iff {Œπ Œπ'} {p : Œπ ‚Üí Prop} {p' : Œπ' ‚Üí Prop} {s s'}
    (h : (ùì§ Œ±).HasBasis p s) (h' : (ùì§ Œ≤).HasBasis p' s') {f : Œ± ‚Üí Œ≤} :
    UniformEmbedding f ‚Üî
      Injective f ‚àß
        UniformContinuous f ‚àß ‚àÄ j, p j ‚Üí ‚àÉ i, p' i ‚àß ‚àÄ x y, (f x, f y) ‚àà s' i ‚Üí (x, y) ‚àà s j :=
  by simp only [h.uniform_embedding_iff' h', h.uniform_continuous_iff h', exists_prop]
#align filter.has_basis.uniform_embedding_iff Filter.HasBasis.uniformEmbedding_iff

#print uniformEmbedding_subtype_val /-
theorem uniformEmbedding_subtype_val {p : Œ± ‚Üí Prop} :
    UniformEmbedding (Subtype.val : Subtype p ‚Üí Œ±) :=
  { comap_uniformity := rfl
    inj := Subtype.val_injective }
#align uniform_embedding_subtype_val uniformEmbedding_subtype_val
-/

/- warning: uniform_embedding_subtype_coe clashes with uniform_embedding_subtype_val -> uniformEmbedding_subtype_val
Case conversion may be inaccurate. Consider using '#align uniform_embedding_subtype_coe uniformEmbedding_subtype_val‚Çì'. -/
#print uniformEmbedding_subtype_val /-
theorem uniformEmbedding_subtype_val {p : Œ± ‚Üí Prop} : UniformEmbedding (coe : Subtype p ‚Üí Œ±) :=
  uniformEmbedding_subtype_val
#align uniform_embedding_subtype_coe uniformEmbedding_subtype_val
-/

#print uniformEmbedding_set_inclusion /-
theorem uniformEmbedding_set_inclusion {s t : Set Œ±} (hst : s ‚äÜ t) :
    UniformEmbedding (inclusion hst) :=
  { comap_uniformity :=
      by
      erw [uniformity_subtype, uniformity_subtype, comap_comap]
      congr
    inj := inclusion_injective hst }
#align uniform_embedding_set_inclusion uniformEmbedding_set_inclusion
-/

#print UniformEmbedding.comp /-
theorem UniformEmbedding.comp {g : Œ≤ ‚Üí Œ≥} (hg : UniformEmbedding g) {f : Œ± ‚Üí Œ≤}
    (hf : UniformEmbedding f) : UniformEmbedding (g ‚àò f) :=
  { hg.to_uniformInducing.comp hf.to_uniformInducing with inj := hg.inj.comp hf.inj }
#align uniform_embedding.comp UniformEmbedding.comp
-/

/- warning: equiv.uniform_embedding -> Equiv.uniformEmbedding is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_4 : UniformSpace.{u1} Œ±] [_inst_5 : UniformSpace.{u2} Œ≤] (f : Equiv.{succ u1, succ u2} Œ± Œ≤), (UniformContinuous.{u1, u2} Œ± Œ≤ _inst_4 _inst_5 (coeFn.{max 1 (max (succ u1) (succ u2)) (succ u2) (succ u1), max (succ u1) (succ u2)} (Equiv.{succ u1, succ u2} Œ± Œ≤) (fun (_x : Equiv.{succ u1, succ u2} Œ± Œ≤) => Œ± -> Œ≤) (Equiv.hasCoeToFun.{succ u1, succ u2} Œ± Œ≤) f)) -> (UniformContinuous.{u2, u1} Œ≤ Œ± _inst_5 _inst_4 (coeFn.{max 1 (max (succ u2) (succ u1)) (succ u1) (succ u2), max (succ u2) (succ u1)} (Equiv.{succ u2, succ u1} Œ≤ Œ±) (fun (_x : Equiv.{succ u2, succ u1} Œ≤ Œ±) => Œ≤ -> Œ±) (Equiv.hasCoeToFun.{succ u2, succ u1} Œ≤ Œ±) (Equiv.symm.{succ u1, succ u2} Œ± Œ≤ f))) -> (UniformEmbedding.{u1, u2} Œ± Œ≤ _inst_4 _inst_5 (coeFn.{max 1 (max (succ u1) (succ u2)) (succ u2) (succ u1), max (succ u1) (succ u2)} (Equiv.{succ u1, succ u2} Œ± Œ≤) (fun (_x : Equiv.{succ u1, succ u2} Œ± Œ≤) => Œ± -> Œ≤) (Equiv.hasCoeToFun.{succ u1, succ u2} Œ± Œ≤) f))
but is expected to have type
  forall {Œ± : Type.{u2}} {Œ≤ : Type.{u1}} [_inst_4 : UniformSpace.{u2} Œ±] [_inst_5 : UniformSpace.{u1} Œ≤] (f : Equiv.{succ u2, succ u1} Œ± Œ≤), (UniformContinuous.{u2, u1} Œ± Œ≤ _inst_4 _inst_5 (FunLike.coe.{max (succ u2) (succ u1), succ u2, succ u1} (Equiv.{succ u2, succ u1} Œ± Œ≤) Œ± (fun (_x : Œ±) => (fun (x._@.Mathlib.Logic.Equiv.Defs._hyg.808 : Œ±) => Œ≤) _x) (Equiv.instFunLikeEquiv.{succ u2, succ u1} Œ± Œ≤) f)) -> (UniformContinuous.{u1, u2} Œ≤ Œ± _inst_5 _inst_4 (FunLike.coe.{max (succ u2) (succ u1), succ u1, succ u2} (Equiv.{succ u1, succ u2} Œ≤ Œ±) Œ≤ (fun (_x : Œ≤) => (fun (x._@.Mathlib.Logic.Equiv.Defs._hyg.808 : Œ≤) => Œ±) _x) (Equiv.instFunLikeEquiv.{succ u1, succ u2} Œ≤ Œ±) (Equiv.symm.{succ u2, succ u1} Œ± Œ≤ f))) -> (UniformEmbedding.{u2, u1} Œ± Œ≤ _inst_4 _inst_5 (FunLike.coe.{max (succ u2) (succ u1), succ u2, succ u1} (Equiv.{succ u2, succ u1} Œ± Œ≤) Œ± (fun (_x : Œ±) => (fun (x._@.Mathlib.Logic.Equiv.Defs._hyg.808 : Œ±) => Œ≤) _x) (Equiv.instFunLikeEquiv.{succ u2, succ u1} Œ± Œ≤) f))
Case conversion may be inaccurate. Consider using '#align equiv.uniform_embedding Equiv.uniformEmbedding‚Çì'. -/
theorem Equiv.uniformEmbedding {Œ± Œ≤ : Type _} [UniformSpace Œ±] [UniformSpace Œ≤] (f : Œ± ‚âÉ Œ≤)
    (h‚ÇÅ : UniformContinuous f) (h‚ÇÇ : UniformContinuous f.symm) : UniformEmbedding f :=
  uniformEmbedding_iff'.2 ‚ü®f.Injective, h‚ÇÅ, by rwa [‚Üê Equiv.prodCongr_apply, ‚Üê map_equiv_symm]‚ü©
#align equiv.uniform_embedding Equiv.uniformEmbedding

#print uniformEmbedding_inl /-
theorem uniformEmbedding_inl : UniformEmbedding (Sum.inl : Œ± ‚Üí Sum Œ± Œ≤) :=
  by
  refine' ‚ü®‚ü®_‚ü©, Sum.inl_injective‚ü©
  rw [Sum.uniformity, comap_sup, comap_map, comap_eq_bot_iff_compl_range.2 _, sup_bot_eq]
  ¬∑ refine' mem_map.2 (univ_mem' _)
    simp
  ¬∑ exact sum.inl_injective.prod_map Sum.inl_injective
#align uniform_embedding_inl uniformEmbedding_inl
-/

#print uniformEmbedding_inr /-
theorem uniformEmbedding_inr : UniformEmbedding (Sum.inr : Œ≤ ‚Üí Sum Œ± Œ≤) :=
  by
  refine' ‚ü®‚ü®_‚ü©, Sum.inr_injective‚ü©
  rw [Sum.uniformity, comap_sup, comap_eq_bot_iff_compl_range.2 _, comap_map, bot_sup_eq]
  ¬∑ exact sum.inr_injective.prod_map Sum.inr_injective
  ¬∑ refine' mem_map.2 (univ_mem' _)
    simp
#align uniform_embedding_inr uniformEmbedding_inr
-/

#print UniformInducing.uniformEmbedding /-
/-- If the domain of a `uniform_inducing` map `f` is a `separated_space`, then `f` is injective,
hence it is a `uniform_embedding`. -/
protected theorem UniformInducing.uniformEmbedding [T0Space Œ±] {f : Œ± ‚Üí Œ≤}
    (hf : UniformInducing f) : UniformEmbedding f :=
  ‚ü®hf, hf.Injective‚ü©
#align uniform_inducing.uniform_embedding UniformInducing.uniformEmbedding
-/

#print uniformEmbedding_iff_uniformInducing /-
theorem uniformEmbedding_iff_uniformInducing [T0Space Œ±] {f : Œ± ‚Üí Œ≤} :
    UniformEmbedding f ‚Üî UniformInducing f :=
  ‚ü®UniformEmbedding.to_uniformInducing, UniformInducing.uniformEmbedding‚ü©
#align uniform_embedding_iff_uniform_inducing uniformEmbedding_iff_uniformInducing
-/

/- warning: comap_uniformity_of_spaced_out -> comap_uniformity_of_spaced_out is a dubious translation:
lean 3 declaration is
  forall {Œ≤ : Type.{u1}} [_inst_2 : UniformSpace.{u1} Œ≤] {Œ± : Type.{u2}} {f : Œ± -> Œ≤} {s : Set.{u1} (Prod.{u1, u1} Œ≤ Œ≤)}, (Membership.Mem.{u1, u1} (Set.{u1} (Prod.{u1, u1} Œ≤ Œ≤)) (Filter.{u1} (Prod.{u1, u1} Œ≤ Œ≤)) (Filter.hasMem.{u1} (Prod.{u1, u1} Œ≤ Œ≤)) s (uniformity.{u1} Œ≤ _inst_2)) -> (Pairwise.{u2} Œ± (fun (x : Œ±) (y : Œ±) => Not (Membership.Mem.{u1, u1} (Prod.{u1, u1} Œ≤ Œ≤) (Set.{u1} (Prod.{u1, u1} Œ≤ Œ≤)) (Set.hasMem.{u1} (Prod.{u1, u1} Œ≤ Œ≤)) (Prod.mk.{u1, u1} Œ≤ Œ≤ (f x) (f y)) s))) -> (Eq.{succ u2} (Filter.{u2} (Prod.{u2, u2} Œ± Œ±)) (Filter.comap.{u2, u1} (Prod.{u2, u2} Œ± Œ±) (Prod.{u1, u1} Œ≤ Œ≤) (Prod.map.{u2, u1, u2, u1} Œ± Œ≤ Œ± Œ≤ f f) (uniformity.{u1} Œ≤ _inst_2)) (Filter.principal.{u2} (Prod.{u2, u2} Œ± Œ±) (idRel.{u2} Œ±)))
but is expected to have type
  forall {Œ≤ : Type.{u2}} [_inst_2 : UniformSpace.{u2} Œ≤] {Œ± : Type.{u1}} {f : Œ± -> Œ≤} {s : Set.{u2} (Prod.{u2, u2} Œ≤ Œ≤)}, (Membership.mem.{u2, u2} (Set.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (Filter.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (instMembershipSetFilter.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) s (uniformity.{u2} Œ≤ _inst_2)) -> (Pairwise.{u1} Œ± (fun (x : Œ±) (y : Œ±) => Not (Membership.mem.{u2, u2} (Prod.{u2, u2} Œ≤ Œ≤) (Set.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (Set.instMembershipSet.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (Prod.mk.{u2, u2} Œ≤ Œ≤ (f x) (f y)) s))) -> (Eq.{succ u1} (Filter.{u1} (Prod.{u1, u1} Œ± Œ±)) (Filter.comap.{u1, u2} (Prod.{u1, u1} Œ± Œ±) (Prod.{u2, u2} Œ≤ Œ≤) (Prod.map.{u1, u2, u1, u2} Œ± Œ≤ Œ± Œ≤ f f) (uniformity.{u2} Œ≤ _inst_2)) (Filter.principal.{u1} (Prod.{u1, u1} Œ± Œ±) (idRel.{u1} Œ±)))
Case conversion may be inaccurate. Consider using '#align comap_uniformity_of_spaced_out comap_uniformity_of_spaced_out‚Çì'. -/
/-- If a map `f : Œ± ‚Üí Œ≤` sends any two distinct points to point that are **not** related by a fixed
`s ‚àà ùì§ Œ≤`, then `f` is uniform inducing with respect to the discrete uniformity on `Œ±`:
the preimage of `ùì§ Œ≤` under `prod.map f f` is the principal filter generated by the diagonal in
`Œ± √ó Œ±`. -/
theorem comap_uniformity_of_spaced_out {Œ±} {f : Œ± ‚Üí Œ≤} {s : Set (Œ≤ √ó Œ≤)} (hs : s ‚àà ùì§ Œ≤)
    (hf : Pairwise fun x y => (f x, f y) ‚àâ s) : comap (Prod.map f f) (ùì§ Œ≤) = ùìü idRel :=
  by
  refine' le_antisymm _ (@refl_le_uniformity Œ± (UniformSpace.comap f ‚Äπ_‚Ä∫))
  calc
    comap (Prod.map f f) (ùì§ Œ≤) ‚â§ comap (Prod.map f f) (ùìü s) := comap_mono (le_principal_iff.2 hs)
    _ = ùìü (Prod.map f f ‚Åª¬π' s) := comap_principal
    _ ‚â§ ùìü idRel := principal_mono.2 _
    
  rintro ‚ü®x, y‚ü©; simpa [not_imp_not] using @hf x y
#align comap_uniformity_of_spaced_out comap_uniformity_of_spaced_out

/- warning: uniform_embedding_of_spaced_out -> uniformEmbedding_of_spaced_out is a dubious translation:
lean 3 declaration is
  forall {Œ≤ : Type.{u1}} [_inst_2 : UniformSpace.{u1} Œ≤] {Œ± : Type.{u2}} {f : Œ± -> Œ≤} {s : Set.{u1} (Prod.{u1, u1} Œ≤ Œ≤)}, (Membership.Mem.{u1, u1} (Set.{u1} (Prod.{u1, u1} Œ≤ Œ≤)) (Filter.{u1} (Prod.{u1, u1} Œ≤ Œ≤)) (Filter.hasMem.{u1} (Prod.{u1, u1} Œ≤ Œ≤)) s (uniformity.{u1} Œ≤ _inst_2)) -> (Pairwise.{u2} Œ± (fun (x : Œ±) (y : Œ±) => Not (Membership.Mem.{u1, u1} (Prod.{u1, u1} Œ≤ Œ≤) (Set.{u1} (Prod.{u1, u1} Œ≤ Œ≤)) (Set.hasMem.{u1} (Prod.{u1, u1} Œ≤ Œ≤)) (Prod.mk.{u1, u1} Œ≤ Œ≤ (f x) (f y)) s))) -> (UniformEmbedding.{u2, u1} Œ± Œ≤ (Bot.bot.{u2} (UniformSpace.{u2} Œ±) (UniformSpace.hasBot.{u2} Œ±)) _inst_2 f)
but is expected to have type
  forall {Œ≤ : Type.{u2}} [_inst_2 : UniformSpace.{u2} Œ≤] {Œ± : Type.{u1}} {f : Œ± -> Œ≤} {s : Set.{u2} (Prod.{u2, u2} Œ≤ Œ≤)}, (Membership.mem.{u2, u2} (Set.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (Filter.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (instMembershipSetFilter.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) s (uniformity.{u2} Œ≤ _inst_2)) -> (Pairwise.{u1} Œ± (fun (x : Œ±) (y : Œ±) => Not (Membership.mem.{u2, u2} (Prod.{u2, u2} Œ≤ Œ≤) (Set.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (Set.instMembershipSet.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (Prod.mk.{u2, u2} Œ≤ Œ≤ (f x) (f y)) s))) -> (UniformEmbedding.{u1, u2} Œ± Œ≤ (Bot.bot.{u1} (UniformSpace.{u1} Œ±) (instBotUniformSpace.{u1} Œ±)) _inst_2 f)
Case conversion may be inaccurate. Consider using '#align uniform_embedding_of_spaced_out uniformEmbedding_of_spaced_out‚Çì'. -/
/-- If a map `f : Œ± ‚Üí Œ≤` sends any two distinct points to point that are **not** related by a fixed
`s ‚àà ùì§ Œ≤`, then `f` is a uniform embedding with respect to the discrete uniformity on `Œ±`. -/
theorem uniformEmbedding_of_spaced_out {Œ±} {f : Œ± ‚Üí Œ≤} {s : Set (Œ≤ √ó Œ≤)} (hs : s ‚àà ùì§ Œ≤)
    (hf : Pairwise fun x y => (f x, f y) ‚àâ s) : @UniformEmbedding Œ± Œ≤ ‚ä• ‚Äπ_‚Ä∫ f :=
  by
  letI : UniformSpace Œ± := ‚ä•; haveI := discreteTopology_bot Œ±
  haveI : SeparatedSpace Œ± := separated_iff_t2.2 inferInstance
  exact UniformInducing.uniformEmbedding ‚ü®comap_uniformity_of_spaced_out hs hf‚ü©
#align uniform_embedding_of_spaced_out uniformEmbedding_of_spaced_out

#print UniformEmbedding.embedding /-
protected theorem UniformEmbedding.embedding {f : Œ± ‚Üí Œ≤} (h : UniformEmbedding f) : Embedding f :=
  { induced := h.to_uniformInducing.Inducing.induced
    inj := h.inj }
#align uniform_embedding.embedding UniformEmbedding.embedding
-/

#print UniformEmbedding.denseEmbedding /-
theorem UniformEmbedding.denseEmbedding {f : Œ± ‚Üí Œ≤} (h : UniformEmbedding f) (hd : DenseRange f) :
    DenseEmbedding f :=
  { dense := hd
    inj := h.inj
    induced := h.Embedding.induced }
#align uniform_embedding.dense_embedding UniformEmbedding.denseEmbedding
-/

/- warning: closed_embedding_of_spaced_out -> closedEmbedding_of_spaced_out is a dubious translation:
lean 3 declaration is
  forall {Œ≤ : Type.{u1}} [_inst_2 : UniformSpace.{u1} Œ≤] {Œ± : Type.{u2}} [_inst_4 : TopologicalSpace.{u2} Œ±] [_inst_5 : DiscreteTopology.{u2} Œ± _inst_4] [_inst_6 : SeparatedSpace.{u1} Œ≤ _inst_2] {f : Œ± -> Œ≤} {s : Set.{u1} (Prod.{u1, u1} Œ≤ Œ≤)}, (Membership.Mem.{u1, u1} (Set.{u1} (Prod.{u1, u1} Œ≤ Œ≤)) (Filter.{u1} (Prod.{u1, u1} Œ≤ Œ≤)) (Filter.hasMem.{u1} (Prod.{u1, u1} Œ≤ Œ≤)) s (uniformity.{u1} Œ≤ _inst_2)) -> (Pairwise.{u2} Œ± (fun (x : Œ±) (y : Œ±) => Not (Membership.Mem.{u1, u1} (Prod.{u1, u1} Œ≤ Œ≤) (Set.{u1} (Prod.{u1, u1} Œ≤ Œ≤)) (Set.hasMem.{u1} (Prod.{u1, u1} Œ≤ Œ≤)) (Prod.mk.{u1, u1} Œ≤ Œ≤ (f x) (f y)) s))) -> (ClosedEmbedding.{u2, u1} Œ± Œ≤ _inst_4 (UniformSpace.toTopologicalSpace.{u1} Œ≤ _inst_2) f)
but is expected to have type
  forall {Œ≤ : Type.{u2}} [_inst_2 : UniformSpace.{u2} Œ≤] {Œ± : Type.{u1}} [_inst_4 : TopologicalSpace.{u1} Œ±] [_inst_5 : DiscreteTopology.{u1} Œ± _inst_4] [_inst_6 : SeparatedSpace.{u2} Œ≤ _inst_2] {f : Œ± -> Œ≤} {s : Set.{u2} (Prod.{u2, u2} Œ≤ Œ≤)}, (Membership.mem.{u2, u2} (Set.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (Filter.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (instMembershipSetFilter.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) s (uniformity.{u2} Œ≤ _inst_2)) -> (Pairwise.{u1} Œ± (fun (x : Œ±) (y : Œ±) => Not (Membership.mem.{u2, u2} (Prod.{u2, u2} Œ≤ Œ≤) (Set.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (Set.instMembershipSet.{u2} (Prod.{u2, u2} Œ≤ Œ≤)) (Prod.mk.{u2, u2} Œ≤ Œ≤ (f x) (f y)) s))) -> (ClosedEmbedding.{u1, u2} Œ± Œ≤ _inst_4 (UniformSpace.toTopologicalSpace.{u2} Œ≤ _inst_2) f)
Case conversion may be inaccurate. Consider using '#align closed_embedding_of_spaced_out closedEmbedding_of_spaced_out‚Çì'. -/
theorem closedEmbedding_of_spaced_out {Œ±} [TopologicalSpace Œ±] [DiscreteTopology Œ±]
    [SeparatedSpace Œ≤] {f : Œ± ‚Üí Œ≤} {s : Set (Œ≤ √ó Œ≤)} (hs : s ‚àà ùì§ Œ≤)
    (hf : Pairwise fun x y => (f x, f y) ‚àâ s) : ClosedEmbedding f :=
  by
  rcases DiscreteTopology.eq_bot Œ± with rfl; letI : UniformSpace Œ± := ‚ä•
  exact
    { (uniformEmbedding_of_spaced_out hs hf).Embedding with
      closed_range := isClosed_range_of_spaced_out hs hf }
#align closed_embedding_of_spaced_out closedEmbedding_of_spaced_out

#print closure_image_mem_nhds_of_uniformInducing /-
theorem closure_image_mem_nhds_of_uniformInducing {s : Set (Œ± √ó Œ±)} {e : Œ± ‚Üí Œ≤} (b : Œ≤)
    (he‚ÇÅ : UniformInducing e) (he‚ÇÇ : DenseInducing e) (hs : s ‚àà ùì§ Œ±) :
    ‚àÉ a, closure (e '' { a' | (a, a') ‚àà s }) ‚àà ùìù b :=
  have : s ‚àà comap (fun p : Œ± √ó Œ± => (e p.1, e p.2)) (ùì§ Œ≤) := he‚ÇÅ.comap_uniformity.symm ‚ñ∏ hs
  let ‚ü®t‚ÇÅ, ht‚ÇÅu, ht‚ÇÅ‚ü© := this
  have ht‚ÇÅ : ‚àÄ p : Œ± √ó Œ±, (e p.1, e p.2) ‚àà t‚ÇÅ ‚Üí p ‚àà s := ht‚ÇÅ
  let ‚ü®t‚ÇÇ, ht‚ÇÇu, ht‚ÇÇs, ht‚ÇÇc‚ü© := comp_symm_of_uniformity ht‚ÇÅu
  let ‚ü®t, htu, hts, htc‚ü© := comp_symm_of_uniformity ht‚ÇÇu
  have : preimage e { b' | (b, b') ‚àà t‚ÇÇ } ‚àà comap e (ùìù b) :=
    preimage_mem_comap <| mem_nhds_left b ht‚ÇÇu
  let ‚ü®a, (ha : (b, e a) ‚àà t‚ÇÇ)‚ü© := (he‚ÇÇ.comap_nhds_neBot _).nonempty_of_mem this
  have :
    ‚àÄ (b') (s' : Set (Œ≤ √ó Œ≤)),
      (b, b') ‚àà t ‚Üí
        s' ‚àà ùì§ Œ≤ ‚Üí ({ y : Œ≤ | (b', y) ‚àà s' } ‚à© e '' { a' : Œ± | (a, a') ‚àà s }).Nonempty :=
    fun b' s' hb' hs' =>
    have : preimage e { b'' | (b', b'') ‚àà s' ‚à© t } ‚àà comap e (ùìù b') :=
      preimage_mem_comap <| mem_nhds_left b' <| inter_mem hs' htu
    let ‚ü®a‚ÇÇ, ha‚ÇÇs', ha‚ÇÇt‚ü© := (he‚ÇÇ.comap_nhds_neBot _).nonempty_of_mem this
    have : (e a, e a‚ÇÇ) ‚àà t‚ÇÅ :=
      ht‚ÇÇc <| prod_mk_mem_compRel (ht‚ÇÇs ha) <| htc <| prod_mk_mem_compRel hb' ha‚ÇÇt
    have : e a‚ÇÇ ‚àà { b'' : Œ≤ | (b', b'') ‚àà s' } ‚à© e '' { a' | (a, a') ‚àà s } :=
      ‚ü®ha‚ÇÇs', mem_image_of_mem _ <| ht‚ÇÅ (a, a‚ÇÇ) this‚ü©
    ‚ü®_, this‚ü©
  have : ‚àÄ b', (b, b') ‚àà t ‚Üí NeBot (ùìù b' ‚äì ùìü (e '' { a' | (a, a') ‚àà s })) :=
    by
    intro b' hb'
    rw [nhds_eq_uniformity, lift'_inf_principal_eq, lift'_ne_bot_iff]
    exact fun s => this b' s hb'
    exact monotone_preimage.inter monotone_const
  have : ‚àÄ b', (b, b') ‚àà t ‚Üí b' ‚àà closure (e '' { a' | (a, a') ‚àà s }) := fun b' hb' => by
    rw [closure_eq_cluster_pts] <;> exact this b' hb'
  ‚ü®a, (ùìù b).sets_of_superset (mem_nhds_left b htu) this‚ü©
#align closure_image_mem_nhds_of_uniform_inducing closure_image_mem_nhds_of_uniformInducing
-/

#print uniformEmbedding_subtypeEmb /-
theorem uniformEmbedding_subtypeEmb (p : Œ± ‚Üí Prop) {e : Œ± ‚Üí Œ≤} (ue : UniformEmbedding e)
    (de : DenseEmbedding e) : UniformEmbedding (DenseEmbedding.subtypeEmb p e) :=
  { comap_uniformity := by
      simp [comap_comap, (¬∑ ‚àò ¬∑), DenseEmbedding.subtypeEmb, uniformity_subtype,
        ue.comap_uniformity.symm]
    inj := (de.Subtype p).inj }
#align uniform_embedding_subtype_emb uniformEmbedding_subtypeEmb
-/

/- warning: uniform_embedding.prod -> UniformEmbedding.prod is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : UniformSpace.{u1} Œ±] [_inst_2 : UniformSpace.{u2} Œ≤] {Œ±' : Type.{u3}} {Œ≤' : Type.{u4}} [_inst_4 : UniformSpace.{u3} Œ±'] [_inst_5 : UniformSpace.{u4} Œ≤'] {e‚ÇÅ : Œ± -> Œ±'} {e‚ÇÇ : Œ≤ -> Œ≤'}, (UniformEmbedding.{u1, u3} Œ± Œ±' _inst_1 _inst_4 e‚ÇÅ) -> (UniformEmbedding.{u2, u4} Œ≤ Œ≤' _inst_2 _inst_5 e‚ÇÇ) -> (UniformEmbedding.{max u1 u2, max u3 u4} (Prod.{u1, u2} Œ± Œ≤) (Prod.{u3, u4} Œ±' Œ≤') (Prod.uniformSpace.{u1, u2} Œ± Œ≤ _inst_1 _inst_2) (Prod.uniformSpace.{u3, u4} Œ±' Œ≤' _inst_4 _inst_5) (fun (p : Prod.{u1, u2} Œ± Œ≤) => Prod.mk.{u3, u4} Œ±' Œ≤' (e‚ÇÅ (Prod.fst.{u1, u2} Œ± Œ≤ p)) (e‚ÇÇ (Prod.snd.{u1, u2} Œ± Œ≤ p))))
but is expected to have type
  forall {Œ± : Type.{u3}} {Œ≤ : Type.{u4}} [_inst_1 : UniformSpace.{u3} Œ±] [_inst_2 : UniformSpace.{u4} Œ≤] {Œ±' : Type.{u2}} {Œ≤' : Type.{u1}} [_inst_4 : UniformSpace.{u2} Œ±'] [_inst_5 : UniformSpace.{u1} Œ≤'] {e‚ÇÅ : Œ± -> Œ±'} {e‚ÇÇ : Œ≤ -> Œ≤'}, (UniformEmbedding.{u3, u2} Œ± Œ±' _inst_1 _inst_4 e‚ÇÅ) -> (UniformEmbedding.{u4, u1} Œ≤ Œ≤' _inst_2 _inst_5 e‚ÇÇ) -> (UniformEmbedding.{max u3 u4, max u1 u2} (Prod.{u3, u4} Œ± Œ≤) (Prod.{u2, u1} Œ±' Œ≤') (instUniformSpaceProd.{u3, u4} Œ± Œ≤ _inst_1 _inst_2) (instUniformSpaceProd.{u2, u1} Œ±' Œ≤' _inst_4 _inst_5) (fun (p : Prod.{u3, u4} Œ± Œ≤) => Prod.mk.{u2, u1} Œ±' Œ≤' (e‚ÇÅ (Prod.fst.{u3, u4} Œ± Œ≤ p)) (e‚ÇÇ (Prod.snd.{u3, u4} Œ± Œ≤ p))))
Case conversion may be inaccurate. Consider using '#align uniform_embedding.prod UniformEmbedding.prod‚Çì'. -/
theorem UniformEmbedding.prod {Œ±' : Type _} {Œ≤' : Type _} [UniformSpace Œ±'] [UniformSpace Œ≤']
    {e‚ÇÅ : Œ± ‚Üí Œ±'} {e‚ÇÇ : Œ≤ ‚Üí Œ≤'} (h‚ÇÅ : UniformEmbedding e‚ÇÅ) (h‚ÇÇ : UniformEmbedding e‚ÇÇ) :
    UniformEmbedding fun p : Œ± √ó Œ≤ => (e‚ÇÅ p.1, e‚ÇÇ p.2) :=
  { h‚ÇÅ.to_uniformInducing.Prod h‚ÇÇ.to_uniformInducing with inj := h‚ÇÅ.inj.Prod_map h‚ÇÇ.inj }
#align uniform_embedding.prod UniformEmbedding.prod

#print isComplete_of_complete_image /-
theorem isComplete_of_complete_image {m : Œ± ‚Üí Œ≤} {s : Set Œ±} (hm : UniformInducing m)
    (hs : IsComplete (m '' s)) : IsComplete s :=
  by
  intro f hf hfs
  rw [le_principal_iff] at hfs
  obtain ‚ü®_, ‚ü®x, hx, rfl‚ü©, hyf‚ü© : ‚àÉ y ‚àà m '' s, map m f ‚â§ ùìù y
  exact hs (f.map m) (hf.map hm.uniform_continuous) (le_principal_iff.2 (image_mem_map hfs))
  rw [map_le_iff_le_comap, ‚Üê nhds_induced, ‚Üê hm.inducing.induced] at hyf
  exact ‚ü®x, hx, hyf‚ü©
#align is_complete_of_complete_image isComplete_of_complete_image
-/

#print IsComplete.completeSpace_coe /-
theorem IsComplete.completeSpace_coe {s : Set Œ±} (hs : IsComplete s) : CompleteSpace s :=
  completeSpace_iff_isComplete_univ.2 <|
    isComplete_of_complete_image uniformEmbedding_subtype_val.to_uniformInducing <| by simp [hs]
#align is_complete.complete_space_coe IsComplete.completeSpace_coe
-/

#print isComplete_image_iff /-
/-- A set is complete iff its image under a uniform inducing map is complete. -/
theorem isComplete_image_iff {m : Œ± ‚Üí Œ≤} {s : Set Œ±} (hm : UniformInducing m) :
    IsComplete (m '' s) ‚Üî IsComplete s :=
  by
  refine' ‚ü®isComplete_of_complete_image hm, fun c => _‚ü©
  haveI : CompleteSpace s := c.complete_space_coe
  set m' : s ‚Üí Œ≤ := m ‚àò coe
  suffices IsComplete (range m') by rwa [range_comp, Subtype.range_coe] at this
  have hm' : UniformInducing m' := hm.comp uniform_embedding_subtype_coe.to_uniform_inducing
  intro f hf hfm
  rw [Filter.le_principal_iff] at hfm
  have cf' : Cauchy (comap m' f) :=
    hf.comap' hm'.comap_uniformity.le (ne_bot.comap_of_range_mem hf.1 hfm)
  rcases CompleteSpace.complete cf' with ‚ü®x, hx‚ü©
  rw [hm'.inducing.nhds_eq_comap, comap_le_comap_iff hfm] at hx
  use m' x, mem_range_self _, hx
#align is_complete_image_iff isComplete_image_iff
-/

#print completeSpace_iff_isComplete_range /-
theorem completeSpace_iff_isComplete_range {f : Œ± ‚Üí Œ≤} (hf : UniformInducing f) :
    CompleteSpace Œ± ‚Üî IsComplete (range f) := by
  rw [completeSpace_iff_isComplete_univ, ‚Üê isComplete_image_iff hf, image_univ]
#align complete_space_iff_is_complete_range completeSpace_iff_isComplete_range
-/

#print UniformInducing.isComplete_range /-
theorem UniformInducing.isComplete_range [CompleteSpace Œ±] {f : Œ± ‚Üí Œ≤} (hf : UniformInducing f) :
    IsComplete (range f) :=
  (completeSpace_iff_isComplete_range hf).1 ‚Äπ_‚Ä∫
#align uniform_inducing.is_complete_range UniformInducing.isComplete_range
-/

#print completeSpace_congr /-
theorem completeSpace_congr {e : Œ± ‚âÉ Œ≤} (he : UniformEmbedding e) :
    CompleteSpace Œ± ‚Üî CompleteSpace Œ≤ := by
  rw [completeSpace_iff_isComplete_range he.to_uniform_inducing, e.range_eq_univ,
    completeSpace_iff_isComplete_univ]
#align complete_space_congr completeSpace_congr
-/

#print completeSpace_coe_iff_isComplete /-
theorem completeSpace_coe_iff_isComplete {s : Set Œ±} : CompleteSpace s ‚Üî IsComplete s :=
  (completeSpace_iff_isComplete_range uniformEmbedding_subtype_val.to_uniformInducing).trans <| by
    rw [Subtype.range_coe]
#align complete_space_coe_iff_is_complete completeSpace_coe_iff_isComplete
-/

#print IsClosed.completeSpace_coe /-
theorem IsClosed.completeSpace_coe [CompleteSpace Œ±] {s : Set Œ±} (hs : IsClosed s) :
    CompleteSpace s :=
  hs.IsComplete.completeSpace_coe
#align is_closed.complete_space_coe IsClosed.completeSpace_coe
-/

#print ULift.completeSpace /-
/-- The lift of a complete space to another universe is still complete. -/
instance ULift.completeSpace [h : CompleteSpace Œ±] : CompleteSpace (ULift Œ±) :=
  haveI : UniformEmbedding (@Equiv.ulift Œ±) := ‚ü®‚ü®rfl‚ü©, ULift.down_injective‚ü©
  (completeSpace_congr this).2 h
#align ulift.complete_space ULift.completeSpace
-/

/- warning: complete_space_extension -> completeSpace_extension is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : UniformSpace.{u1} Œ±] [_inst_2 : UniformSpace.{u2} Œ≤] {m : Œ≤ -> Œ±}, (UniformInducing.{u2, u1} Œ≤ Œ± _inst_2 _inst_1 m) -> (DenseRange.{u1, u2} Œ± (UniformSpace.toTopologicalSpace.{u1} Œ± _inst_1) Œ≤ m) -> (forall (f : Filter.{u2} Œ≤), (Cauchy.{u2} Œ≤ _inst_2 f) -> (Exists.{succ u1} Œ± (fun (x : Œ±) => LE.le.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±))) (Filter.map.{u2, u1} Œ≤ Œ± m f) (nhds.{u1} Œ± (UniformSpace.toTopologicalSpace.{u1} Œ± _inst_1) x)))) -> (CompleteSpace.{u1} Œ± _inst_1)
but is expected to have type
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : UniformSpace.{u1} Œ±] [_inst_2 : UniformSpace.{u2} Œ≤] {m : Œ≤ -> Œ±}, (UniformInducing.{u2, u1} Œ≤ Œ± _inst_2 _inst_1 m) -> (DenseRange.{u1, u2} Œ± (UniformSpace.toTopologicalSpace.{u1} Œ± _inst_1) Œ≤ m) -> (forall (f : Filter.{u2} Œ≤), (Cauchy.{u2} Œ≤ _inst_2 f) -> (Exists.{succ u1} Œ± (fun (x : Œ±) => LE.le.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±))) (Filter.map.{u2, u1} Œ≤ Œ± m f) (nhds.{u1} Œ± (UniformSpace.toTopologicalSpace.{u1} Œ± _inst_1) x)))) -> (CompleteSpace.{u1} Œ± _inst_1)
Case conversion may be inaccurate. Consider using '#align complete_space_extension completeSpace_extension‚Çì'. -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
theorem completeSpace_extension {m : Œ≤ ‚Üí Œ±} (hm : UniformInducing m) (dense : DenseRange m)
    (h : ‚àÄ f : Filter Œ≤, Cauchy f ‚Üí ‚àÉ x : Œ±, map m f ‚â§ ùìù x) : CompleteSpace Œ± :=
  ‚ü®fun f : Filter Œ± => fun hf : Cauchy f =>
    let p : Set (Œ± √ó Œ±) ‚Üí Set Œ± ‚Üí Set Œ± := fun s t => { y : Œ± | ‚àÉ x : Œ±, x ‚àà t ‚àß (x, y) ‚àà s }
    let g := (ùì§ Œ±).lift fun s => f.lift' (p s)
    have mp‚ÇÄ : Monotone p := fun a b h t s ‚ü®x, xs, xa‚ü© => ‚ü®x, xs, h xa‚ü©
    have mp‚ÇÅ : ‚àÄ {s}, Monotone (p s) := fun s a b h x ‚ü®y, ya, yxs‚ü© => ‚ü®y, h ya, yxs‚ü©
    have : f ‚â§ g :=
      le_inf·µ¢ fun s =>
        le_inf·µ¢ fun hs =>
          le_inf·µ¢ fun t =>
            le_inf·µ¢ fun ht =>
              le_principal_iff.mpr <| mem_of_superset ht fun x hx => ‚ü®x, hx, refl_mem_uniformity hs‚ü©
    have : NeBot g := hf.left.mono this
    have : NeBot (comap m g) :=
      comap_neBot fun t ht =>
        let ‚ü®t', ht', ht_mem‚ü© := (mem_lift_sets <| monotone_lift' monotone_const mp‚ÇÄ).mp ht
        let ‚ü®t'', ht'', ht'_sub‚ü© := (mem_lift'_sets mp‚ÇÅ).mp ht_mem
        let ‚ü®x, (hx : x ‚àà t'')‚ü© := hf.left.nonempty_of_mem ht''
        have h‚ÇÄ : NeBot (ùìù[range m] x) := Dense.nhdsWithin_neBot x
        have h‚ÇÅ : { y | (x, y) ‚àà t' } ‚àà ùìù[range m] x :=
          @mem_inf_of_left Œ± (ùìù x) (ùìü (range m)) _ <| mem_nhds_left x ht'
        have h‚ÇÇ : range m ‚àà ùìù[range m] x :=
          @mem_inf_of_right Œ± (ùìù x) (ùìü (range m)) _ <| Subset.refl _
        have : { y | (x, y) ‚àà t' } ‚à© range m ‚àà ùìù[range m] x := @inter_mem Œ± (ùìù[range m] x) _ _ h‚ÇÅ h‚ÇÇ
        let ‚ü®y, xyt', b, b_eq‚ü© := h‚ÇÄ.nonempty_of_mem this
        ‚ü®b, b_eq.symm ‚ñ∏ ht'_sub ‚ü®x, hx, xyt'‚ü©‚ü©
    have : Cauchy g :=
      ‚ü®‚ÄπNeBot g‚Ä∫, fun s hs =>
        let ‚ü®s‚ÇÅ, hs‚ÇÅ, (comp_s‚ÇÅ : compRel s‚ÇÅ s‚ÇÅ ‚äÜ s)‚ü© := comp_mem_uniformity_sets hs
        let ‚ü®s‚ÇÇ, hs‚ÇÇ, (comp_s‚ÇÇ : compRel s‚ÇÇ s‚ÇÇ ‚äÜ s‚ÇÅ)‚ü© := comp_mem_uniformity_sets hs‚ÇÅ
        let ‚ü®t, ht, (prod_t : t √óÀ¢ t ‚äÜ s‚ÇÇ)‚ü© := mem_prod_same_iff.mp (hf.right hs‚ÇÇ)
        have hg‚ÇÅ : p (preimage Prod.swap s‚ÇÅ) t ‚àà g :=
          mem_lift (symm_le_uniformity hs‚ÇÅ) <| @mem_lift' Œ± Œ± f _ t ht
        have hg‚ÇÇ : p s‚ÇÇ t ‚àà g := mem_lift hs‚ÇÇ <| @mem_lift' Œ± Œ± f _ t ht
        have hg : p (Prod.swap ‚Åª¬π' s‚ÇÅ) t √óÀ¢ p s‚ÇÇ t ‚àà g √ó·∂† g := @prod_mem_prod Œ± Œ± _ _ g g hg‚ÇÅ hg‚ÇÇ
        (g √ó·∂† g).sets_of_superset hg fun ‚ü®a, b‚ü© ‚ü®‚ü®c‚ÇÅ, c‚ÇÅt, hc‚ÇÅ‚ü©, ‚ü®c‚ÇÇ, c‚ÇÇt, hc‚ÇÇ‚ü©‚ü© =>
          have : (c‚ÇÅ, c‚ÇÇ) ‚àà t √óÀ¢ t := ‚ü®c‚ÇÅt, c‚ÇÇt‚ü©
          comp_s‚ÇÅ <| prod_mk_mem_compRel hc‚ÇÅ <| comp_s‚ÇÇ <| prod_mk_mem_compRel (prod_t this) hc‚ÇÇ‚ü©
    have : Cauchy (Filter.comap m g) := ‚ÄπCauchy g‚Ä∫.comap' (le_of_eq hm.comap_uniformity) ‚Äπ_‚Ä∫
    let ‚ü®x, (hx : map m (Filter.comap m g) ‚â§ ùìù x)‚ü© := h _ this
    have : ClusterPt x (map m (Filter.comap m g)) :=
      (le_nhds_iff_adhp_of_cauchy (this.map hm.UniformContinuous)).mp hx
    have : ClusterPt x g := this.mono map_comap_le
    ‚ü®x,
      calc
        f ‚â§ g := by assumption
        _ ‚â§ ùìù x := le_nhds_of_cauchy_adhp ‚ÄπCauchy g‚Ä∫ this
        ‚ü©‚ü©
#align complete_space_extension completeSpace_extension

#print totallyBounded_preimage /-
theorem totallyBounded_preimage {f : Œ± ‚Üí Œ≤} {s : Set Œ≤} (hf : UniformEmbedding f)
    (hs : TotallyBounded s) : TotallyBounded (f ‚Åª¬π' s) := fun t ht =>
  by
  rw [‚Üê hf.comap_uniformity] at ht
  rcases mem_comap.2 ht with ‚ü®t', ht', ts‚ü©
  rcases totallyBounded_iff_subset.1 (totallyBounded_subset (image_preimage_subset f s) hs) _
      ht' with
    ‚ü®c, cs, hfc, hct‚ü©
  refine' ‚ü®f ‚Åª¬π' c, hfc.preimage (hf.inj.inj_on _), fun x h => _‚ü©
  have := hct (mem_image_of_mem f h); simp at this‚ä¢
  rcases this with ‚ü®z, zc, zt‚ü©
  rcases cs zc with ‚ü®y, yc, rfl‚ü©
  exact ‚ü®y, zc, ts zt‚ü©
#align totally_bounded_preimage totallyBounded_preimage
-/

#print CompleteSpace.sum /-
instance CompleteSpace.sum [CompleteSpace Œ±] [CompleteSpace Œ≤] : CompleteSpace (Sum Œ± Œ≤) :=
  by
  rw [completeSpace_iff_isComplete_univ, ‚Üê range_inl_union_range_inr]
  exact
    uniform_embedding_inl.to_uniform_inducing.is_complete_range.union
      uniform_embedding_inr.to_uniform_inducing.is_complete_range
#align complete_space.sum CompleteSpace.sum
-/

end

/- warning: uniform_embedding_comap -> uniformEmbedding_comap is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} {f : Œ± -> Œ≤} [u : UniformSpace.{u2} Œ≤], (Function.Injective.{succ u1, succ u2} Œ± Œ≤ f) -> (UniformEmbedding.{u1, u2} Œ± Œ≤ (UniformSpace.comap.{u1, u2} Œ± Œ≤ f u) u f)
but is expected to have type
  forall {Œ± : Type.{u2}} {Œ≤ : Type.{u1}} {f : Œ± -> Œ≤} [u : UniformSpace.{u1} Œ≤], (Function.Injective.{succ u2, succ u1} Œ± Œ≤ f) -> (UniformEmbedding.{u2, u1} Œ± Œ≤ (UniformSpace.comap.{u2, u1} Œ± Œ≤ f u) u f)
Case conversion may be inaccurate. Consider using '#align uniform_embedding_comap uniformEmbedding_comap‚Çì'. -/
theorem uniformEmbedding_comap {Œ± : Type _} {Œ≤ : Type _} {f : Œ± ‚Üí Œ≤} [u : UniformSpace Œ≤]
    (hf : Function.Injective f) : @UniformEmbedding Œ± Œ≤ (UniformSpace.comap f u) u f :=
  @UniformEmbedding.mk _ _ (UniformSpace.comap f u) _ _
    (@UniformInducing.mk _ _ (UniformSpace.comap f u) _ _ rfl) hf
#align uniform_embedding_comap uniformEmbedding_comap

#print Embedding.comapUniformSpace /-
/-- Pull back a uniform space structure by an embedding, adjusting the new uniform structure to
make sure that its topology is defeq to the original one. -/
def Embedding.comapUniformSpace {Œ± Œ≤} [TopologicalSpace Œ±] [u : UniformSpace Œ≤] (f : Œ± ‚Üí Œ≤)
    (h : Embedding f) : UniformSpace Œ± :=
  (u.comap f).replaceTopology h.induced
#align embedding.comap_uniform_space Embedding.comapUniformSpace
-/

/- warning: embedding.to_uniform_embedding -> Embedding.to_uniformEmbedding is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} Œ±] [u : UniformSpace.{u2} Œ≤] (f : Œ± -> Œ≤) (h : Embedding.{u1, u2} Œ± Œ≤ _inst_1 (UniformSpace.toTopologicalSpace.{u2} Œ≤ u) f), UniformEmbedding.{u1, u2} Œ± Œ≤ (Embedding.comapUniformSpace.{u1, u2} Œ± Œ≤ _inst_1 u f h) u f
but is expected to have type
  forall {Œ± : Type.{u2}} {Œ≤ : Type.{u1}} [_inst_1 : TopologicalSpace.{u2} Œ±] [u : UniformSpace.{u1} Œ≤] (f : Œ± -> Œ≤) (h : Embedding.{u2, u1} Œ± Œ≤ _inst_1 (UniformSpace.toTopologicalSpace.{u1} Œ≤ u) f), UniformEmbedding.{u2, u1} Œ± Œ≤ (Embedding.comapUniformSpace.{u2, u1} Œ± Œ≤ _inst_1 u f h) u f
Case conversion may be inaccurate. Consider using '#align embedding.to_uniform_embedding Embedding.to_uniformEmbedding‚Çì'. -/
theorem Embedding.to_uniformEmbedding {Œ± Œ≤} [TopologicalSpace Œ±] [u : UniformSpace Œ≤] (f : Œ± ‚Üí Œ≤)
    (h : Embedding f) : @UniformEmbedding Œ± Œ≤ (h.comap_uniformSpace f) u f :=
  { comap_uniformity := rfl
    inj := h.inj }
#align embedding.to_uniform_embedding Embedding.to_uniformEmbedding

section UniformExtension

variable {Œ± : Type _} {Œ≤ : Type _} {Œ≥ : Type _} [UniformSpace Œ±] [UniformSpace Œ≤] [UniformSpace Œ≥]
  {e : Œ≤ ‚Üí Œ±} (h_e : UniformInducing e) (h_dense : DenseRange e) {f : Œ≤ ‚Üí Œ≥}
  (h_f : UniformContinuous f)

-- mathport name: exprœà
local notation "œà" => (h_e.DenseInducing h_dense).extend f

#print uniformly_extend_exists /-
theorem uniformly_extend_exists [CompleteSpace Œ≥] (a : Œ±) : ‚àÉ c, Tendsto f (comap e (ùìù a)) (ùìù c) :=
  let de := h_e.DenseInducing h_dense
  have : Cauchy (ùìù a) := cauchy_nhds
  have : Cauchy (comap e (ùìù a)) :=
    this.comap' (le_of_eq h_e.comap_uniformity) (de.comap_nhds_neBot _)
  have : Cauchy (map f (comap e (ùìù a))) := this.map h_f
  CompleteSpace.complete this
#align uniformly_extend_exists uniformly_extend_exists
-/

/- warning: uniform_extend_subtype -> uniform_extend_subtype is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} {Œ≥ : Type.{u3}} [_inst_1 : UniformSpace.{u1} Œ±] [_inst_2 : UniformSpace.{u2} Œ≤] [_inst_3 : UniformSpace.{u3} Œ≥] [_inst_4 : CompleteSpace.{u3} Œ≥ _inst_3] {p : Œ± -> Prop} {e : Œ± -> Œ≤} {f : Œ± -> Œ≥} {b : Œ≤} {s : Set.{u1} Œ±}, (UniformContinuous.{u1, u3} (Subtype.{succ u1} Œ± p) Œ≥ (Subtype.uniformSpace.{u1} Œ± p _inst_1) _inst_3 (fun (x : Subtype.{succ u1} Œ± p) => f (Subtype.val.{succ u1} Œ± p x))) -> (UniformEmbedding.{u1, u2} Œ± Œ≤ _inst_1 _inst_2 e) -> (forall (x : Œ≤), Membership.Mem.{u2, u2} Œ≤ (Set.{u2} Œ≤) (Set.hasMem.{u2} Œ≤) x (closure.{u2} Œ≤ (UniformSpace.toTopologicalSpace.{u2} Œ≤ _inst_2) (Set.range.{u2, succ u1} Œ≤ Œ± e))) -> (Membership.Mem.{u2, u2} (Set.{u2} Œ≤) (Filter.{u2} Œ≤) (Filter.hasMem.{u2} Œ≤) (closure.{u2} Œ≤ (UniformSpace.toTopologicalSpace.{u2} Œ≤ _inst_2) (Set.image.{u1, u2} Œ± Œ≤ e s)) (nhds.{u2} Œ≤ (UniformSpace.toTopologicalSpace.{u2} Œ≤ _inst_2) b)) -> (IsClosed.{u1} Œ± (UniformSpace.toTopologicalSpace.{u1} Œ± _inst_1) s) -> (forall (x : Œ±), (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x s) -> (p x)) -> (Exists.{succ u3} Œ≥ (fun (c : Œ≥) => Filter.Tendsto.{u1, u3} Œ± Œ≥ f (Filter.comap.{u1, u2} Œ± Œ≤ e (nhds.{u2} Œ≤ (UniformSpace.toTopologicalSpace.{u2} Œ≤ _inst_2) b)) (nhds.{u3} Œ≥ (UniformSpace.toTopologicalSpace.{u3} Œ≥ _inst_3) c)))
but is expected to have type
  forall {Œ± : Type.{u2}} {Œ≤ : Type.{u1}} {Œ≥ : Type.{u3}} [_inst_1 : UniformSpace.{u2} Œ±] [_inst_2 : UniformSpace.{u1} Œ≤] [_inst_3 : UniformSpace.{u3} Œ≥] [_inst_4 : CompleteSpace.{u3} Œ≥ _inst_3] {p : Œ± -> Prop} {e : Œ± -> Œ≤} {f : Œ± -> Œ≥} {b : Œ≤} {s : Set.{u2} Œ±}, (UniformContinuous.{u2, u3} (Subtype.{succ u2} Œ± p) Œ≥ (instUniformSpaceSubtype.{u2} Œ± p _inst_1) _inst_3 (fun (x : Subtype.{succ u2} Œ± p) => f (Subtype.val.{succ u2} Œ± p x))) -> (UniformEmbedding.{u2, u1} Œ± Œ≤ _inst_1 _inst_2 e) -> (forall (x : Œ≤), Membership.mem.{u1, u1} Œ≤ (Set.{u1} Œ≤) (Set.instMembershipSet.{u1} Œ≤) x (closure.{u1} Œ≤ (UniformSpace.toTopologicalSpace.{u1} Œ≤ _inst_2) (Set.range.{u1, succ u2} Œ≤ Œ± e))) -> (Membership.mem.{u1, u1} (Set.{u1} Œ≤) (Filter.{u1} Œ≤) (instMembershipSetFilter.{u1} Œ≤) (closure.{u1} Œ≤ (UniformSpace.toTopologicalSpace.{u1} Œ≤ _inst_2) (Set.image.{u2, u1} Œ± Œ≤ e s)) (nhds.{u1} Œ≤ (UniformSpace.toTopologicalSpace.{u1} Œ≤ _inst_2) b)) -> (IsClosed.{u2} Œ± (UniformSpace.toTopologicalSpace.{u2} Œ± _inst_1) s) -> (forall (x : Œ±), (Membership.mem.{u2, u2} Œ± (Set.{u2} Œ±) (Set.instMembershipSet.{u2} Œ±) x s) -> (p x)) -> (Exists.{succ u3} Œ≥ (fun (c : Œ≥) => Filter.Tendsto.{u2, u3} Œ± Œ≥ f (Filter.comap.{u2, u1} Œ± Œ≤ e (nhds.{u1} Œ≤ (UniformSpace.toTopologicalSpace.{u1} Œ≤ _inst_2) b)) (nhds.{u3} Œ≥ (UniformSpace.toTopologicalSpace.{u3} Œ≥ _inst_3) c)))
Case conversion may be inaccurate. Consider using '#align uniform_extend_subtype uniform_extend_subtype‚Çì'. -/
theorem uniform_extend_subtype [CompleteSpace Œ≥] {p : Œ± ‚Üí Prop} {e : Œ± ‚Üí Œ≤} {f : Œ± ‚Üí Œ≥} {b : Œ≤}
    {s : Set Œ±} (hf : UniformContinuous fun x : Subtype p => f x.val) (he : UniformEmbedding e)
    (hd : ‚àÄ x : Œ≤, x ‚àà closure (range e)) (hb : closure (e '' s) ‚àà ùìù b) (hs : IsClosed s)
    (hp : ‚àÄ x ‚àà s, p x) : ‚àÉ c, Tendsto f (comap e (ùìù b)) (ùìù c) :=
  by
  have de : DenseEmbedding e := he.DenseEmbedding hd
  have de' : DenseEmbedding (DenseEmbedding.subtypeEmb p e) := de.subtype p
  have ue' : UniformEmbedding (DenseEmbedding.subtypeEmb p e) := uniformEmbedding_subtypeEmb _ he de
  have : b ‚àà closure (e '' { x | p x }) :=
    (closure_mono <| monotone_image <| hp) (mem_of_mem_nhds hb)
  let
    ‚ü®c,
      (hc :
        tendsto (f ‚àò Subtype.val) (comap (DenseEmbedding.subtypeEmb p e) (ùìù ‚ü®b, this‚ü©)) (ùìù c))‚ü© :=
    uniformly_extend_exists ue'.to_uniformInducing de'.dense hf _
  rw [nhds_subtype_eq_comap] at hc
  simp [comap_comap] at hc
  change tendsto (f ‚àò @Subtype.val Œ± p) (comap (e ‚àò @Subtype.val Œ± p) (ùìù b)) (ùìù c) at hc
  rw [‚Üê comap_comap, tendsto_comap'_iff] at hc
  exact ‚ü®c, hc‚ü©
  exact
    ‚ü®_, hb, fun x => by
      change e x ‚àà closure (e '' s) ‚Üí x ‚àà range Subtype.val
      rw [‚Üê closure_induced, mem_closure_iff_clusterPt, ClusterPt, ne_bot_iff, nhds_induced, ‚Üê
        de.to_dense_inducing.nhds_eq_comap, ‚Üê mem_closure_iff_nhds_neBot, hs.closure_eq]
      exact fun hxs => ‚ü®‚ü®x, hp x hxs‚ü©, rfl‚ü©‚ü©
#align uniform_extend_subtype uniform_extend_subtype

include h_f

#print uniformly_extend_spec /-
theorem uniformly_extend_spec [CompleteSpace Œ≥] (a : Œ±) : Tendsto f (comap e (ùìù a)) (ùìù (œà a)) := by
  simpa only [DenseInducing.extend] using
    tendsto_nhds_limUnder (uniformly_extend_exists h_e ‚Äπ_‚Ä∫ h_f _)
#align uniformly_extend_spec uniformly_extend_spec
-/

/- warning: uniform_continuous_uniformly_extend -> uniformContinuous_uniformly_extend is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} {Œ≥ : Type.{u3}} [_inst_1 : UniformSpace.{u1} Œ±] [_inst_2 : UniformSpace.{u2} Œ≤] [_inst_3 : UniformSpace.{u3} Œ≥] {e : Œ≤ -> Œ±} (h_e : UniformInducing.{u2, u1} Œ≤ Œ± _inst_2 _inst_1 e) (h_dense : DenseRange.{u1, u2} Œ± (UniformSpace.toTopologicalSpace.{u1} Œ± _inst_1) Œ≤ e) {f : Œ≤ -> Œ≥}, (UniformContinuous.{u2, u3} Œ≤ Œ≥ _inst_2 _inst_3 f) -> (forall [cŒ≥ : CompleteSpace.{u3} Œ≥ _inst_3], UniformContinuous.{u1, u3} Œ± Œ≥ _inst_1 _inst_3 (DenseInducing.extend.{u2, u1, u3} Œ≤ Œ± Œ≥ (UniformSpace.toTopologicalSpace.{u2} Œ≤ _inst_2) (UniformSpace.toTopologicalSpace.{u1} Œ± _inst_1) e (UniformSpace.toTopologicalSpace.{u3} Œ≥ _inst_3) (UniformInducing.denseInducing.{u2, u1} Œ≤ Œ± _inst_2 _inst_1 e h_e h_dense) f))
but is expected to have type
  forall {Œ± : Type.{u2}} {Œ≤ : Type.{u1}} {Œ≥ : Type.{u3}} [_inst_1 : UniformSpace.{u2} Œ±] [_inst_2 : UniformSpace.{u1} Œ≤] [_inst_3 : UniformSpace.{u3} Œ≥] {e : Œ≤ -> Œ±} (h_e : UniformInducing.{u1, u2} Œ≤ Œ± _inst_2 _inst_1 e) (h_dense : DenseRange.{u2, u1} Œ± (UniformSpace.toTopologicalSpace.{u2} Œ± _inst_1) Œ≤ e) {f : Œ≤ -> Œ≥}, (UniformContinuous.{u1, u3} Œ≤ Œ≥ _inst_2 _inst_3 f) -> (forall [cŒ≥ : CompleteSpace.{u3} Œ≥ _inst_3], UniformContinuous.{u2, u3} Œ± Œ≥ _inst_1 _inst_3 (DenseInducing.extend.{u1, u2, u3} Œ≤ Œ± Œ≥ (UniformSpace.toTopologicalSpace.{u1} Œ≤ _inst_2) (UniformSpace.toTopologicalSpace.{u2} Œ± _inst_1) e (UniformSpace.toTopologicalSpace.{u3} Œ≥ _inst_3) (UniformInducing.denseInducing.{u1, u2} Œ≤ Œ± _inst_2 _inst_1 e h_e h_dense) f))
Case conversion may be inaccurate. Consider using '#align uniform_continuous_uniformly_extend uniformContinuous_uniformly_extend‚Çì'. -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
theorem uniformContinuous_uniformly_extend [cŒ≥ : CompleteSpace Œ≥] : UniformContinuous œà :=
  fun d hd =>
  let ‚ü®s, hs, hs_comp‚ü© :=
    (mem_lift'_sets <| monotone_id.compRel <| monotone_id.compRel monotone_id).mp
      (comp_le_uniformity3 hd)
  have h_pnt : ‚àÄ {a m}, m ‚àà ùìù a ‚Üí ‚àÉ c, c ‚àà f '' preimage e m ‚àß (c, œà a) ‚àà s ‚àß (œà a, c) ‚àà s :=
    fun a m hm =>
    have nb : NeBot (map f (comap e (ùìù a))) :=
      ((h_e.DenseInducing h_dense).comap_nhds_neBot _).map _
    have :
      f '' preimage e m ‚à© ({ c | (c, œà a) ‚àà s } ‚à© { c | (œà a, c) ‚àà s }) ‚àà map f (comap e (ùìù a)) :=
      inter_mem (image_mem_map <| preimage_mem_comap <| hm)
        (uniformly_extend_spec h_e h_dense h_f _
          (inter_mem (mem_nhds_right _ hs) (mem_nhds_left _ hs)))
    nb.nonempty_of_mem this
  have : preimage (fun p : Œ≤ √ó Œ≤ => (f p.1, f p.2)) s ‚àà ùì§ Œ≤ := h_f hs
  have :
    preimage (fun p : Œ≤ √ó Œ≤ => (f p.1, f p.2)) s ‚àà comap (fun x : Œ≤ √ó Œ≤ => (e x.1, e x.2)) (ùì§ Œ±) :=
    by rwa [h_e.comap_uniformity.symm] at this
  let ‚ü®t, ht, ts‚ü© := this
  show preimage (fun p : Œ± √ó Œ± => (œà p.1, œà p.2)) d ‚àà ùì§ Œ± from
    (ùì§ Œ±).sets_of_superset (interior_mem_uniformity ht) fun ‚ü®x‚ÇÅ, x‚ÇÇ‚ü© hx_t =>
      have : ùìù (x‚ÇÅ, x‚ÇÇ) ‚â§ ùìü (interior t) := isOpen_iff_nhds.mp isOpen_interior (x‚ÇÅ, x‚ÇÇ) hx_t
      have : interior t ‚àà ùìù x‚ÇÅ √ó·∂† ùìù x‚ÇÇ := by rwa [nhds_prod_eq, le_principal_iff] at this
      let ‚ü®m‚ÇÅ, hm‚ÇÅ, m‚ÇÇ, hm‚ÇÇ, (hm : m‚ÇÅ √óÀ¢ m‚ÇÇ ‚äÜ interior t)‚ü© := mem_prod_iff.mp this
      let ‚ü®a, ha‚ÇÅ, _, ha‚ÇÇ‚ü© := h_pnt hm‚ÇÅ
      let ‚ü®b, hb‚ÇÅ, hb‚ÇÇ, _‚ü© := h_pnt hm‚ÇÇ
      have : (e ‚Åª¬π' m‚ÇÅ) √óÀ¢ (e ‚Åª¬π' m‚ÇÇ) ‚äÜ (fun p : Œ≤ √ó Œ≤ => (f p.1, f p.2)) ‚Åª¬π' s :=
        calc
          _ ‚äÜ preimage (fun p : Œ≤ √ó Œ≤ => (e p.1, e p.2)) (interior t) := preimage_mono hm
          _ ‚äÜ preimage (fun p : Œ≤ √ó Œ≤ => (e p.1, e p.2)) t := (preimage_mono interior_subset)
          _ ‚äÜ preimage (fun p : Œ≤ √ó Œ≤ => (f p.1, f p.2)) s := ts
          
      have : (f '' (e ‚Åª¬π' m‚ÇÅ)) √óÀ¢ (f '' (e ‚Åª¬π' m‚ÇÇ)) ‚äÜ s :=
        calc
          (f '' (e ‚Åª¬π' m‚ÇÅ)) √óÀ¢ (f '' (e ‚Åª¬π' m‚ÇÇ)) =
              (fun p : Œ≤ √ó Œ≤ => (f p.1, f p.2)) '' (e ‚Åª¬π' m‚ÇÅ) √óÀ¢ (e ‚Åª¬π' m‚ÇÇ) :=
            prod_image_image_eq
          _ ‚äÜ (fun p : Œ≤ √ó Œ≤ => (f p.1, f p.2)) '' ((fun p : Œ≤ √ó Œ≤ => (f p.1, f p.2)) ‚Åª¬π' s) :=
            (monotone_image this)
          _ ‚äÜ s := image_preimage_subset _ _
          
      have : (a, b) ‚àà s := @this (a, b) ‚ü®ha‚ÇÅ, hb‚ÇÅ‚ü©
      hs_comp <| show (œà x‚ÇÅ, œà x‚ÇÇ) ‚àà compRel s (compRel s s) from ‚ü®a, ha‚ÇÇ, ‚ü®b, this, hb‚ÇÇ‚ü©‚ü©
#align uniform_continuous_uniformly_extend uniformContinuous_uniformly_extend

omit h_f

variable [SeparatedSpace Œ≥]

#print uniformly_extend_of_ind /-
theorem uniformly_extend_of_ind (b : Œ≤) : œà (e b) = f b :=
  DenseInducing.extend_eq_at _ h_f.Continuous.ContinuousAt
#align uniformly_extend_of_ind uniformly_extend_of_ind
-/

/- warning: uniformly_extend_unique -> uniformly_extend_unique is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} {Œ≥ : Type.{u3}} [_inst_1 : UniformSpace.{u1} Œ±] [_inst_2 : UniformSpace.{u2} Œ≤] [_inst_3 : UniformSpace.{u3} Œ≥] {e : Œ≤ -> Œ±} (h_e : UniformInducing.{u2, u1} Œ≤ Œ± _inst_2 _inst_1 e) (h_dense : DenseRange.{u1, u2} Œ± (UniformSpace.toTopologicalSpace.{u1} Œ± _inst_1) Œ≤ e) {f : Œ≤ -> Œ≥} [_inst_4 : SeparatedSpace.{u3} Œ≥ _inst_3] {g : Œ± -> Œ≥}, (forall (b : Œ≤), Eq.{succ u3} Œ≥ (g (e b)) (f b)) -> (Continuous.{u1, u3} Œ± Œ≥ (UniformSpace.toTopologicalSpace.{u1} Œ± _inst_1) (UniformSpace.toTopologicalSpace.{u3} Œ≥ _inst_3) g) -> (Eq.{max (succ u1) (succ u3)} (Œ± -> Œ≥) (DenseInducing.extend.{u2, u1, u3} Œ≤ Œ± Œ≥ (UniformSpace.toTopologicalSpace.{u2} Œ≤ _inst_2) (UniformSpace.toTopologicalSpace.{u1} Œ± _inst_1) e (UniformSpace.toTopologicalSpace.{u3} Œ≥ _inst_3) (UniformInducing.denseInducing.{u2, u1} Œ≤ Œ± _inst_2 _inst_1 e h_e h_dense) f) g)
but is expected to have type
  forall {Œ± : Type.{u2}} {Œ≤ : Type.{u1}} {Œ≥ : Type.{u3}} [_inst_1 : UniformSpace.{u2} Œ±] [_inst_2 : UniformSpace.{u1} Œ≤] [_inst_3 : UniformSpace.{u3} Œ≥] {e : Œ≤ -> Œ±} (h_e : UniformInducing.{u1, u2} Œ≤ Œ± _inst_2 _inst_1 e) (h_dense : DenseRange.{u2, u1} Œ± (UniformSpace.toTopologicalSpace.{u2} Œ± _inst_1) Œ≤ e) {f : Œ≤ -> Œ≥} [_inst_4 : SeparatedSpace.{u3} Œ≥ _inst_3] {g : Œ± -> Œ≥}, (forall (b : Œ≤), Eq.{succ u3} Œ≥ (g (e b)) (f b)) -> (Continuous.{u2, u3} Œ± Œ≥ (UniformSpace.toTopologicalSpace.{u2} Œ± _inst_1) (UniformSpace.toTopologicalSpace.{u3} Œ≥ _inst_3) g) -> (Eq.{max (succ u2) (succ u3)} (Œ± -> Œ≥) (DenseInducing.extend.{u1, u2, u3} Œ≤ Œ± Œ≥ (UniformSpace.toTopologicalSpace.{u1} Œ≤ _inst_2) (UniformSpace.toTopologicalSpace.{u2} Œ± _inst_1) e (UniformSpace.toTopologicalSpace.{u3} Œ≥ _inst_3) (UniformInducing.denseInducing.{u1, u2} Œ≤ Œ± _inst_2 _inst_1 e h_e h_dense) f) g)
Case conversion may be inaccurate. Consider using '#align uniformly_extend_unique uniformly_extend_unique‚Çì'. -/
theorem uniformly_extend_unique {g : Œ± ‚Üí Œ≥} (hg : ‚àÄ b, g (e b) = f b) (hc : Continuous g) : œà = g :=
  DenseInducing.extend_unique _ hg hc
#align uniformly_extend_unique uniformly_extend_unique

end UniformExtension

