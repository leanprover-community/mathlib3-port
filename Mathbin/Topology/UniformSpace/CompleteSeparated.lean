/-
Copyright (c) 2019 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel

! This file was ported from Lean 3 source module topology.uniform_space.complete_separated
! leanprover-community/mathlib commit d3e8e0a0237c10c2627bf52c246b15ff8e7df4c0
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Topology.UniformSpace.Cauchy
import Mathbin.Topology.UniformSpace.Separation
import Mathbin.Topology.DenseEmbedding

/-!
# Theory of complete separated uniform spaces.

This file is for elementary lemmas that depend on both Cauchy filters and separation.
-/


open Filter

open TopologicalSpace Filter

variable {Œ± : Type _}

--In a separated space, a complete set is closed
theorem IsComplete.is_closed [UniformSpace Œ±] [SeparatedSpace Œ±] {s : Set Œ±} (h : IsComplete s) :
    IsClosed s :=
  is_closed_iff_cluster_pt.2 fun a ha => by
    let f := ùìù[s] a
    have : Cauchy f := cauchy_nhds.mono' ha inf_le_left
    rcases h f this inf_le_right with ‚ü®y, ys, fy‚ü©
    rwa [(tendsto_nhds_unique' ha inf_le_left fy : a = y)]
#align is_complete.is_closed IsComplete.is_closed

namespace DenseInducing

open Filter

variable [TopologicalSpace Œ±] {Œ≤ : Type _} [TopologicalSpace Œ≤]

variable {Œ≥ : Type _} [UniformSpace Œ≥] [CompleteSpace Œ≥] [SeparatedSpace Œ≥]

theorem continuous_extend_of_cauchy {e : Œ± ‚Üí Œ≤} {f : Œ± ‚Üí Œ≥} (de : DenseInducing e)
    (h : ‚àÄ b : Œ≤, Cauchy (map f (comap e <| ùìù b))) : Continuous (de.extend f) :=
  de.continuous_extend fun b => CompleteSpace.complete (h b)
#align dense_inducing.continuous_extend_of_cauchy DenseInducing.continuous_extend_of_cauchy

end DenseInducing

