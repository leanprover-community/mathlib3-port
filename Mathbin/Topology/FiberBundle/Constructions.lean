/-
Copyright ¬© 2022 Nicol√≤ Cavalleri. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Nicol√≤ Cavalleri, S√©bastien Gou√´zel, Heather Macbeth, Floris van Doorn

! This file was ported from Lean 3 source module topology.fiber_bundle.constructions
! leanprover-community/mathlib commit dd71334db81d0bd444af1ee339a29298bef40734
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Topology.FiberBundle.Basic

/-!
# Standard constructions on fiber bundles

This file contains several standard constructions on fiber bundles:

* `bundle.trivial.fiber_bundle ùïú B F`: the trivial fiber bundle with model fibre `F` over the base
  `B`

* `fiber_bundle.prod`: for fiber bundles `E‚ÇÅ` and `E‚ÇÇ` over a common base, a fiber bundle structure
  on their fibrewise product `E‚ÇÅ √ó·µá E‚ÇÇ` (the notation stands for `Œª x, E‚ÇÅ x √ó E‚ÇÇ x`).

* `fiber_bundle.pullback`: for a fiber bundle `E` over `B`, a fiber bundle structure on its
  pullback `f *·µñ E` by a map `f : B' ‚Üí B` (the notation is a type synonym for `E ‚àò f`).

## Tags

fiber bundle, fibre bundle, fiberwise product, pullback

-/


open TopologicalSpace Filter Set Bundle

open TopologicalSpace Classical Bundle

/-! ### The trivial bundle -/


namespace Bundle

namespace trivial

variable (B : Type _) (F : Type _)

instance [I : TopologicalSpace F] : ‚àÄ x : B, TopologicalSpace (Trivial B F x) := fun x => I

instance [t‚ÇÅ : TopologicalSpace B] [t‚ÇÇ : TopologicalSpace F] :
    TopologicalSpace (TotalSpace (Trivial B F)) :=
  induced TotalSpace.proj t‚ÇÅ ‚äì induced (Trivial.projSnd B F) t‚ÇÇ

variable [TopologicalSpace B] [TopologicalSpace F]

/-- Local trivialization for trivial bundle. -/
def trivialization : Trivialization F (œÄ (Bundle.Trivial B F))
    where
  toFun x := (x.fst, x.snd)
  invFun y := ‚ü®y.fst, y.snd‚ü©
  source := univ
  target := univ
  map_source' x h := mem_univ (x.fst, x.snd)
  map_target' y h := mem_univ ‚ü®y.fst, y.snd‚ü©
  left_inv' x h := Sigma.eq rfl rfl
  right_inv' x h := Prod.ext rfl rfl
  open_source := is_open_univ
  open_target := is_open_univ
  continuous_to_fun :=
    by
    rw [‚Üê continuous_iff_continuous_on_univ, continuous_iff_le_induced]
    simp only [Prod.topologicalSpace, induced_inf, induced_compose]
    exact le_rfl
  continuous_inv_fun :=
    by
    rw [‚Üê continuous_iff_continuous_on_univ, continuous_iff_le_induced]
    simp only [bundle.total_space.topological_space, induced_inf, induced_compose]
    exact le_rfl
  baseSet := univ
  open_base_set := is_open_univ
  source_eq := rfl
  target_eq := by simp only [univ_prod_univ]
  proj_to_fun y hy := rfl
#align bundle.trivial.trivialization Bundle.Trivial.trivialization

@[simp]
theorem trivialization_source : (trivialization B F).source = univ :=
  rfl
#align bundle.trivial.trivialization_source Bundle.Trivial.trivialization_source

@[simp]
theorem trivialization_target : (trivialization B F).target = univ :=
  rfl
#align bundle.trivial.trivialization_target Bundle.Trivial.trivialization_target

/-- Fiber bundle instance on the trivial bundle. -/
instance fiberBundle : FiberBundle F (Bundle.Trivial B F)
    where
  trivializationAtlas := {Bundle.Trivial.trivialization B F}
  trivializationAt x := Bundle.Trivial.trivialization B F
  mem_base_set_trivialization_at := mem_univ
  trivialization_mem_atlas x := mem_singleton _
  total_space_mk_inducing b :=
    ‚ü®by
      have : (fun x : trivial B F b => x) = @id F :=
        by
        ext x
        rfl
      simp only [total_space.topological_space, induced_inf, induced_compose, Function.comp,
        total_space.proj, induced_const, top_inf_eq, trivial.proj_snd, id.def,
        trivial.topological_space, this, induced_id]‚ü©
#align bundle.trivial.fiber_bundle Bundle.Trivial.fiberBundle

theorem eq_trivialization (e : Trivialization F (œÄ (Bundle.Trivial B F)))
    [i : MemTrivializationAtlas e] : e = trivialization B F :=
  i.out
#align bundle.trivial.eq_trivialization Bundle.Trivial.eq_trivialization

end trivial

end Bundle

/-! ### Fibrewise product of two bundles -/


section Prod

variable {B : Type _}

section Defs

variable (E‚ÇÅ : B ‚Üí Type _) (E‚ÇÇ : B ‚Üí Type _)

variable [TopologicalSpace (TotalSpace E‚ÇÅ)] [TopologicalSpace (TotalSpace E‚ÇÇ)]

/-- Equip the total space of the fibrewise product of two fiber bundles `E‚ÇÅ`, `E‚ÇÇ` with
the induced topology from the diagonal embedding into `total_space E‚ÇÅ √ó total_space E‚ÇÇ`. -/
instance FiberBundle.Prod.topologicalSpace : TopologicalSpace (TotalSpace (E‚ÇÅ √ó·µá E‚ÇÇ)) :=
  TopologicalSpace.induced
    (fun p => ((‚ü®p.1, p.2.1‚ü© : TotalSpace E‚ÇÅ), (‚ü®p.1, p.2.2‚ü© : TotalSpace E‚ÇÇ)))
    (by infer_instance : TopologicalSpace (TotalSpace E‚ÇÅ √ó TotalSpace E‚ÇÇ))
#align fiber_bundle.prod.topological_space FiberBundle.Prod.topologicalSpace

/-- The diagonal map from the total space of the fibrewise product of two fiber bundles
`E‚ÇÅ`, `E‚ÇÇ` into `total_space E‚ÇÅ √ó total_space E‚ÇÇ` is `inducing`. -/
theorem FiberBundle.Prod.inducing_diag :
    Inducing
      (fun p => (‚ü®p.1, p.2.1‚ü©, ‚ü®p.1, p.2.2‚ü©) :
        TotalSpace (E‚ÇÅ √ó·µá E‚ÇÇ) ‚Üí TotalSpace E‚ÇÅ √ó TotalSpace E‚ÇÇ) :=
  ‚ü®rfl‚ü©
#align fiber_bundle.prod.inducing_diag FiberBundle.Prod.inducing_diag

end Defs

open FiberBundle

variable [TopologicalSpace B] (F‚ÇÅ : Type _) [TopologicalSpace F‚ÇÅ] (E‚ÇÅ : B ‚Üí Type _)
  [TopologicalSpace (TotalSpace E‚ÇÅ)] (F‚ÇÇ : Type _) [TopologicalSpace F‚ÇÇ] (E‚ÇÇ : B ‚Üí Type _)
  [TopologicalSpace (TotalSpace E‚ÇÇ)]

namespace Trivialization

variable {F‚ÇÅ E‚ÇÅ F‚ÇÇ E‚ÇÇ} (e‚ÇÅ : Trivialization F‚ÇÅ (œÄ E‚ÇÅ)) (e‚ÇÇ : Trivialization F‚ÇÇ (œÄ E‚ÇÇ))

/-- Given trivializations `e‚ÇÅ`, `e‚ÇÇ` for fiber bundles `E‚ÇÅ`, `E‚ÇÇ` over a base `B`, the forward
function for the construction `trivialization.prod`, the induced
trivialization for the fibrewise product of `E‚ÇÅ` and `E‚ÇÇ`. -/
def Prod.toFun' : TotalSpace (E‚ÇÅ √ó·µá E‚ÇÇ) ‚Üí B √ó F‚ÇÅ √ó F‚ÇÇ := fun p =>
  ‚ü®p.1, (e‚ÇÅ ‚ü®p.1, p.2.1‚ü©).2, (e‚ÇÇ ‚ü®p.1, p.2.2‚ü©).2‚ü©
#align trivialization.prod.to_fun' Trivialization.Prod.toFun'

variable {e‚ÇÅ e‚ÇÇ}

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
theorem Prod.continuous_to_fun :
    ContinuousOn (Prod.toFun' e‚ÇÅ e‚ÇÇ)
      (@TotalSpace.proj B (E‚ÇÅ √ó·µá E‚ÇÇ) ‚Åª¬π' (e‚ÇÅ.baseSet ‚à© e‚ÇÇ.baseSet)) :=
  by
  let f‚ÇÅ : total_space (E‚ÇÅ √ó·µá E‚ÇÇ) ‚Üí total_space E‚ÇÅ √ó total_space E‚ÇÇ := fun p =>
    ((‚ü®p.1, p.2.1‚ü© : total_space E‚ÇÅ), (‚ü®p.1, p.2.2‚ü© : total_space E‚ÇÇ))
  let f‚ÇÇ : total_space E‚ÇÅ √ó total_space E‚ÇÇ ‚Üí (B √ó F‚ÇÅ) √ó B √ó F‚ÇÇ := fun p => ‚ü®e‚ÇÅ p.1, e‚ÇÇ p.2‚ü©
  let f‚ÇÉ : (B √ó F‚ÇÅ) √ó B √ó F‚ÇÇ ‚Üí B √ó F‚ÇÅ √ó F‚ÇÇ := fun p => ‚ü®p.1.1, p.1.2, p.2.2‚ü©
  have hf‚ÇÅ : Continuous f‚ÇÅ := (prod.inducing_diag E‚ÇÅ E‚ÇÇ).Continuous
  have hf‚ÇÇ : ContinuousOn f‚ÇÇ (e‚ÇÅ.source √óÀ¢ e‚ÇÇ.source) :=
    e‚ÇÅ.to_local_homeomorph.continuous_on.prod_map e‚ÇÇ.to_local_homeomorph.continuous_on
  have hf‚ÇÉ : Continuous f‚ÇÉ :=
    (continuous_fst.comp continuous_fst).prod_mk (continuous_snd.prod_map continuous_snd)
  refine' ((hf‚ÇÉ.comp_continuous_on hf‚ÇÇ).comp hf‚ÇÅ.continuous_on _).congr _
  ¬∑ rw [e‚ÇÅ.source_eq, e‚ÇÇ.source_eq]
    exact maps_to_preimage _ _
  rintro ‚ü®b, v‚ÇÅ, v‚ÇÇ‚ü© ‚ü®hb‚ÇÅ, hb‚ÇÇ‚ü©
  simp only [prod.to_fun', Prod.mk.inj_iff, eq_self_iff_true, and_true_iff]
  rw [e‚ÇÅ.coe_fst]
  rw [e‚ÇÅ.source_eq, mem_preimage]
  exact hb‚ÇÅ
#align trivialization.prod.continuous_to_fun Trivialization.Prod.continuous_to_fun

variable (e‚ÇÅ e‚ÇÇ) [‚àÄ x, Zero (E‚ÇÅ x)] [‚àÄ x, Zero (E‚ÇÇ x)]

/-- Given trivializations `e‚ÇÅ`, `e‚ÇÇ` for fiber bundles `E‚ÇÅ`, `E‚ÇÇ` over a base `B`, the inverse
function for the construction `trivialization.prod`, the induced
trivialization for the fibrewise product of `E‚ÇÅ` and `E‚ÇÇ`. -/
noncomputable def Prod.invFun' (p : B √ó F‚ÇÅ √ó F‚ÇÇ) : TotalSpace (E‚ÇÅ √ó·µá E‚ÇÇ) :=
  ‚ü®p.1, e‚ÇÅ.symm p.1 p.2.1, e‚ÇÇ.symm p.1 p.2.2‚ü©
#align trivialization.prod.inv_fun' Trivialization.Prod.invFun'

variable {e‚ÇÅ e‚ÇÇ}

theorem Prod.left_inv {x : TotalSpace (E‚ÇÅ √ó·µá E‚ÇÇ)}
    (h : x ‚àà @TotalSpace.proj B (E‚ÇÅ √ó·µá E‚ÇÇ) ‚Åª¬π' (e‚ÇÅ.baseSet ‚à© e‚ÇÇ.baseSet)) :
    Prod.invFun' e‚ÇÅ e‚ÇÇ (Prod.toFun' e‚ÇÅ e‚ÇÇ x) = x :=
  by
  obtain ‚ü®x, v‚ÇÅ, v‚ÇÇ‚ü© := x
  obtain ‚ü®h‚ÇÅ : x ‚àà e‚ÇÅ.base_set, h‚ÇÇ : x ‚àà e‚ÇÇ.base_set‚ü© := h
  simp only [prod.to_fun', prod.inv_fun', symm_apply_apply_mk, h‚ÇÅ, h‚ÇÇ]
#align trivialization.prod.left_inv Trivialization.Prod.left_inv

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
theorem Prod.right_inv {x : B √ó F‚ÇÅ √ó F‚ÇÇ}
    (h : x ‚àà (e‚ÇÅ.baseSet ‚à© e‚ÇÇ.baseSet) √óÀ¢ (univ : Set (F‚ÇÅ √ó F‚ÇÇ))) :
    Prod.toFun' e‚ÇÅ e‚ÇÇ (Prod.invFun' e‚ÇÅ e‚ÇÇ x) = x :=
  by
  obtain ‚ü®x, w‚ÇÅ, w‚ÇÇ‚ü© := x
  obtain ‚ü®‚ü®h‚ÇÅ : x ‚àà e‚ÇÅ.base_set, h‚ÇÇ : x ‚àà e‚ÇÇ.base_set‚ü©, -‚ü© := h
  simp only [prod.to_fun', prod.inv_fun', apply_mk_symm, h‚ÇÅ, h‚ÇÇ]
#align trivialization.prod.right_inv Trivialization.Prod.right_inv

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
theorem Prod.continuous_inv_fun :
    ContinuousOn (Prod.invFun' e‚ÇÅ e‚ÇÇ) ((e‚ÇÅ.baseSet ‚à© e‚ÇÇ.baseSet) √óÀ¢ univ) :=
  by
  rw [(prod.inducing_diag E‚ÇÅ E‚ÇÇ).continuous_on_iff]
  have H‚ÇÅ : Continuous fun p : B √ó F‚ÇÅ √ó F‚ÇÇ => ((p.1, p.2.1), (p.1, p.2.2)) :=
    (continuous_id.prod_map continuous_fst).prod_mk (continuous_id.prod_map continuous_snd)
  refine' (e‚ÇÅ.continuous_on_symm.prod_map e‚ÇÇ.continuous_on_symm).comp H‚ÇÅ.continuous_on _
  exact fun x h => ‚ü®‚ü®h.1.1, mem_univ _‚ü©, ‚ü®h.1.2, mem_univ _‚ü©‚ü©
#align trivialization.prod.continuous_inv_fun Trivialization.Prod.continuous_inv_fun

variable (e‚ÇÅ e‚ÇÇ e‚ÇÅ e‚ÇÇ)

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/-- Given trivializations `e‚ÇÅ`, `e‚ÇÇ` for bundle types `E‚ÇÅ`, `E‚ÇÇ` over a base `B`, the induced
trivialization for the fibrewise product of `E‚ÇÅ` and `E‚ÇÇ`, whose base set is
`e‚ÇÅ.base_set ‚à© e‚ÇÇ.base_set`. -/
noncomputable def prod : Trivialization (F‚ÇÅ √ó F‚ÇÇ) (œÄ (E‚ÇÅ √ó·µá E‚ÇÇ))
    where
  toFun := Prod.toFun' e‚ÇÅ e‚ÇÇ
  invFun := Prod.invFun' e‚ÇÅ e‚ÇÇ
  source := @TotalSpace.proj B (E‚ÇÅ √ó·µá E‚ÇÇ) ‚Åª¬π' (e‚ÇÅ.baseSet ‚à© e‚ÇÇ.baseSet)
  target := (e‚ÇÅ.baseSet ‚à© e‚ÇÇ.baseSet) √óÀ¢ Set.univ
  map_source' x h := ‚ü®h, Set.mem_univ _‚ü©
  map_target' x h := h.1
  left_inv' x := Prod.left_inv
  right_inv' x := Prod.right_inv
  open_source :=
    by
    convert
      (e‚ÇÅ.open_source.prod e‚ÇÇ.open_source).Preimage
        (FiberBundle.Prod.inducing_diag E‚ÇÅ E‚ÇÇ).Continuous
    ext x
    simp only [Trivialization.source_eq, mfld_simps]
  open_target := (e‚ÇÅ.open_base_set.inter e‚ÇÇ.open_base_set).Prod is_open_univ
  continuous_to_fun := Prod.continuous_to_fun
  continuous_inv_fun := Prod.continuous_inv_fun
  baseSet := e‚ÇÅ.baseSet ‚à© e‚ÇÇ.baseSet
  open_base_set := e‚ÇÅ.open_base_set.inter e‚ÇÇ.open_base_set
  source_eq := rfl
  target_eq := rfl
  proj_to_fun x h := rfl
#align trivialization.prod Trivialization.prod

@[simp]
theorem base_set_prod : (prod e‚ÇÅ e‚ÇÇ).baseSet = e‚ÇÅ.baseSet ‚à© e‚ÇÇ.baseSet :=
  rfl
#align trivialization.base_set_prod Trivialization.base_set_prod

theorem prod_symm_apply (x : B) (w‚ÇÅ : F‚ÇÅ) (w‚ÇÇ : F‚ÇÇ) :
    (prod e‚ÇÅ e‚ÇÇ).toLocalEquiv.symm (x, w‚ÇÅ, w‚ÇÇ) = ‚ü®x, e‚ÇÅ.symm x w‚ÇÅ, e‚ÇÇ.symm x w‚ÇÇ‚ü© :=
  rfl
#align trivialization.prod_symm_apply Trivialization.prod_symm_apply

end Trivialization

open Trivialization

variable [‚àÄ x, Zero (E‚ÇÅ x)] [‚àÄ x, Zero (E‚ÇÇ x)] [‚àÄ x : B, TopologicalSpace (E‚ÇÅ x)]
  [‚àÄ x : B, TopologicalSpace (E‚ÇÇ x)] [FiberBundle F‚ÇÅ E‚ÇÅ] [FiberBundle F‚ÇÇ E‚ÇÇ]

/-- The product of two fiber bundles is a fiber bundle. -/
noncomputable instance FiberBundle.prod : FiberBundle (F‚ÇÅ √ó F‚ÇÇ) (E‚ÇÅ √ó·µá E‚ÇÇ)
    where
  total_space_mk_inducing b :=
    by
    rw [(prod.inducing_diag E‚ÇÅ E‚ÇÇ).inducing_iff]
    exact (total_space_mk_inducing F‚ÇÅ E‚ÇÅ b).prod_mk (total_space_mk_inducing F‚ÇÇ E‚ÇÇ b)
  trivializationAtlas :=
    { e |
      ‚àÉ (e‚ÇÅ : Trivialization F‚ÇÅ (œÄ E‚ÇÅ))(e‚ÇÇ : Trivialization F‚ÇÇ (œÄ E‚ÇÇ))(_ :
        MemTrivializationAtlas e‚ÇÅ)(_ : MemTrivializationAtlas e‚ÇÇ), e = Trivialization.prod e‚ÇÅ e‚ÇÇ }
  trivializationAt b := (trivializationAt F‚ÇÅ E‚ÇÅ b).Prod (trivializationAt F‚ÇÇ E‚ÇÇ b)
  mem_base_set_trivialization_at b :=
    ‚ü®mem_base_set_trivialization_at F‚ÇÅ E‚ÇÅ b, mem_base_set_trivialization_at F‚ÇÇ E‚ÇÇ b‚ü©
  trivialization_mem_atlas b :=
    ‚ü®trivializationAt F‚ÇÅ E‚ÇÅ b, trivializationAt F‚ÇÇ E‚ÇÇ b, by infer_instance, by infer_instance, rfl‚ü©
#align fiber_bundle.prod FiberBundle.prod

instance {e‚ÇÅ : Trivialization F‚ÇÅ (œÄ E‚ÇÅ)} {e‚ÇÇ : Trivialization F‚ÇÇ (œÄ E‚ÇÇ)} [MemTrivializationAtlas e‚ÇÅ]
    [MemTrivializationAtlas e‚ÇÇ] :
    MemTrivializationAtlas (e‚ÇÅ.Prod e‚ÇÇ : Trivialization (F‚ÇÅ √ó F‚ÇÇ) (œÄ (E‚ÇÅ √ó·µá E‚ÇÇ)))
    where out := ‚ü®e‚ÇÅ, e‚ÇÇ, by infer_instance, by infer_instance, rfl‚ü©

end Prod

/-! ### Pullbacks of fibre bundles -/


section

variable {B : Type _} (F : Type _) (E : B ‚Üí Type _) {B' : Type _} (f : B' ‚Üí B)

instance [‚àÄ x : B, TopologicalSpace (E x)] : ‚àÄ x : B', TopologicalSpace ((f *·µñ E) x) := by
  delta_instance bundle.pullback

variable [TopologicalSpace B'] [TopologicalSpace (TotalSpace E)]

/-- Definition of `pullback.total_space.topological_space`, which we make irreducible. -/
irreducible_def pullbackTopology : TopologicalSpace (TotalSpace (f *·µñ E)) :=
  induced TotalSpace.proj ‚ÄπTopologicalSpace B'‚Ä∫ ‚äì
    induced (Pullback.lift f) ‚ÄπTopologicalSpace (TotalSpace E)‚Ä∫
#align pullback_topology pullbackTopology

/-- The topology on the total space of a pullback bundle is the coarsest topology for which both
the projections to the base and the map to the original bundle are continuous. -/
instance Pullback.TotalSpace.topologicalSpace : TopologicalSpace (TotalSpace (f *·µñ E)) :=
  pullbackTopology E f
#align pullback.total_space.topological_space Pullback.TotalSpace.topologicalSpace

theorem Pullback.continuous_proj (f : B' ‚Üí B) : Continuous (@TotalSpace.proj _ (f *·µñ E)) :=
  by
  rw [continuous_iff_le_induced, Pullback.TotalSpace.topologicalSpace, pullbackTopology]
  exact inf_le_left
#align pullback.continuous_proj Pullback.continuous_proj

theorem Pullback.continuous_lift (f : B' ‚Üí B) : Continuous (@Pullback.lift B E B' f) :=
  by
  rw [continuous_iff_le_induced, Pullback.TotalSpace.topologicalSpace, pullbackTopology]
  exact inf_le_right
#align pullback.continuous_lift Pullback.continuous_lift

theorem inducing_pullback_total_space_embedding (f : B' ‚Üí B) :
    Inducing (@pullbackTotalSpaceEmbedding B E B' f) :=
  by
  constructor
  simp_rw [Prod.topologicalSpace, induced_inf, induced_compose,
    Pullback.TotalSpace.topologicalSpace, pullbackTopology]
  rfl
#align inducing_pullback_total_space_embedding inducing_pullback_total_space_embedding

section FiberBundle

variable (F) [TopologicalSpace F] [TopologicalSpace B]

theorem Pullback.continuous_total_space_mk [‚àÄ x, TopologicalSpace (E x)] [FiberBundle F E]
    {f : B' ‚Üí B} {x : B'} : Continuous (@totalSpaceMk _ (f *·µñ E) x) :=
  by
  simp only [continuous_iff_le_induced, Pullback.TotalSpace.topologicalSpace, induced_compose,
    induced_inf, Function.comp, total_space_mk, total_space.proj, induced_const, top_inf_eq,
    pullbackTopology]
  exact le_of_eq (FiberBundle.total_space_mk_inducing F E (f x)).induced
#align pullback.continuous_total_space_mk Pullback.continuous_total_space_mk

variable {E F} [‚àÄ b, Zero (E b)] {K : Type _} [ContinuousMapClass K B' B]

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/-- A fiber bundle trivialization can be pulled back to a trivialization on the pullback bundle. -/
noncomputable def Trivialization.pullback (e : Trivialization F (œÄ E)) (f : K) :
    Trivialization F (œÄ ((f : B' ‚Üí B) *·µñ E))
    where
  toFun z := (z.proj, (e (Pullback.lift f z)).2)
  invFun y := @totalSpaceMk _ (f *·µñ E) y.1 (e.symm (f y.1) y.2)
  source := Pullback.lift f ‚Åª¬π' e.source
  baseSet := f ‚Åª¬π' e.baseSet
  target := (f ‚Åª¬π' e.baseSet) √óÀ¢ univ
  map_source' x h :=
    by
    simp_rw [e.source_eq, mem_preimage, pullback.proj_lift] at h
    simp_rw [prod_mk_mem_set_prod_eq, mem_univ, and_true_iff, mem_preimage, h]
  map_target' y h := by
    rw [mem_prod, mem_preimage] at h
    simp_rw [e.source_eq, mem_preimage, pullback.proj_lift, h.1]
  left_inv' x h := by
    simp_rw [mem_preimage, e.mem_source, pullback.proj_lift] at h
    simp_rw [pullback.lift, e.symm_apply_apply_mk h, total_space.eta]
  right_inv' x h := by
    simp_rw [mem_prod, mem_preimage, mem_univ, and_true_iff] at h
    simp_rw [total_space.proj_mk, pullback.lift_mk, e.apply_mk_symm h, Prod.mk.eta]
  open_source := by
    simp_rw [e.source_eq, ‚Üê preimage_comp]
    exact
      ((map_continuous f).comp <| Pullback.continuous_proj E f).is_open_preimage _ e.open_base_set
  open_target := ((map_continuous f).is_open_preimage _ e.open_base_set).Prod is_open_univ
  open_base_set := (map_continuous f).is_open_preimage _ e.open_base_set
  continuous_to_fun :=
    (Pullback.continuous_proj E f).ContinuousOn.Prod
      (continuous_snd.comp_continuous_on <|
        e.ContinuousOn.comp (Pullback.continuous_lift E f).ContinuousOn Subset.rfl)
  continuous_inv_fun := by
    dsimp only
    simp_rw [(inducing_pullback_total_space_embedding E f).continuous_on_iff, Function.comp,
      pullback_total_space_embedding, total_space.proj_mk]
    dsimp only [total_space.proj_mk]
    refine'
      continuous_on_fst.prod
        (e.continuous_on_symm.comp ((map_continuous f).prod_map continuous_id).ContinuousOn
          subset.rfl)
  source_eq := by
    dsimp only
    rw [e.source_eq]
    rfl
  target_eq := rfl
  proj_to_fun y h := rfl
#align trivialization.pullback Trivialization.pullback

noncomputable instance FiberBundle.pullback [‚àÄ x, TopologicalSpace (E x)] [FiberBundle F E]
    (f : K) : FiberBundle F ((f : B' ‚Üí B) *·µñ E)
    where
  total_space_mk_inducing x :=
    inducing_of_inducing_compose (Pullback.continuous_total_space_mk F E)
      (Pullback.continuous_lift E f) (total_space_mk_inducing F E (f x))
  trivializationAtlas :=
    { ef | ‚àÉ (e : Trivialization F (œÄ E))(_ : MemTrivializationAtlas e), ef = e.Pullback f }
  trivializationAt x := (trivializationAt F E (f x)).Pullback f
  mem_base_set_trivialization_at x := mem_base_set_trivialization_at F E (f x)
  trivialization_mem_atlas x := ‚ü®trivializationAt F E (f x), by infer_instance, rfl‚ü©
#align fiber_bundle.pullback FiberBundle.pullback

end FiberBundle

end

