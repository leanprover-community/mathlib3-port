/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro

! This file was ported from Lean 3 source module topology.separation
! leanprover-community/mathlib commit 195fcd60ff2bfe392543bceb0ec2adcdb472db4c
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Topology.SubsetProperties
import Mathbin.Topology.Connected
import Mathbin.Topology.NhdsSet
import Mathbin.Topology.Inseparable

/-!
# Separation properties of topological spaces.

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

This file defines the predicate `separated_nhds`, and common separation axioms
(under the Kolmogorov classification).

## Main definitions

* `separated_nhds`: Two `set`s are separated by neighbourhoods if they are contained in disjoint
  open sets.
* `t0_space`: A T‚ÇÄ/Kolmogorov space is a space where, for every two points `x ‚â† y`,
  there is an open set that contains one, but not the other.
* `t1_space`: A T‚ÇÅ/Fr√©chet space is a space where every singleton set is closed.
  This is equivalent to, for every pair `x ‚â† y`, there existing an open set containing `x`
  but not `y` (`t1_space_iff_exists_open` shows that these conditions are equivalent.)
* `t2_space`: A T‚ÇÇ/Hausdorff space is a space where, for every two points `x ‚â† y`,
  there is two disjoint open sets, one containing `x`, and the other `y`.
* `t2_5_space`: A T‚ÇÇ.‚ÇÖ/Urysohn space is a space where, for every two points `x ‚â† y`,
  there is two open sets, one containing `x`, and the other `y`, whose closures are disjoint.
* `t3_space`: A T‚ÇÉ space, is one where given any closed `C` and `x ‚àâ C`,
  there is disjoint open sets containing `x` and `C` respectively. In `mathlib`, T‚ÇÉ implies T‚ÇÇ.‚ÇÖ.
* `normal_space`: A T‚ÇÑ space (sometimes referred to as normal, but authors vary on
  whether this includes T‚ÇÇ; `mathlib` does), is one where given two disjoint closed sets,
  we can find two open sets that separate them. In `mathlib`, T‚ÇÑ implies T‚ÇÉ.
* `t5_space`: A T‚ÇÖ space, also known as a *completely normal Hausdorff space*

## Main results

### T‚ÇÄ spaces

* `is_closed.exists_closed_singleton` Given a closed set `S` in a compact T‚ÇÄ space,
  there is some `x ‚àà S` such that `{x}` is closed.
* `exists_open_singleton_of_open_finset` Given an open `finset` `S` in a T‚ÇÄ space,
  there is some `x ‚àà S` such that `{x}` is open.

### T‚ÇÅ spaces

* `is_closed_map_const`: The constant map is a closed map.
* `discrete_of_t1_of_finite`: A finite T‚ÇÅ space must have the discrete topology.

### T‚ÇÇ spaces

* `t2_iff_nhds`: A space is T‚ÇÇ iff the neighbourhoods of distinct points generate the bottom filter.
* `t2_iff_is_closed_diagonal`: A space is T‚ÇÇ iff the `diagonal` of `Œ±` (that is, the set of all
  points of the form `(a, a) : Œ± √ó Œ±`) is closed under the product topology.
* `finset_disjoint_finset_opens_of_t2`: Any two disjoint finsets are `separated_nhds`.
* Most topological constructions preserve Hausdorffness;
  these results are part of the typeclass inference system (e.g. `embedding.t2_space`)
* `set.eq_on.closure`: If two functions are equal on some set `s`, they are equal on its closure.
* `is_compact.is_closed`: All compact sets are closed.
* `locally_compact_of_compact_nhds`: If every point has a compact neighbourhood,
  then the space is locally compact.
* `totally_separated_space_of_t1_of_basis_clopen`: If `Œ±` has a clopen basis, then
  it is a `totally_separated_space`.
* `loc_compact_t2_tot_disc_iff_tot_sep`: A locally compact T‚ÇÇ space is totally disconnected iff
  it is totally separated.

If the space is also compact:

* `normal_of_compact_t2`: A compact T‚ÇÇ space is a `normal_space`.
* `connected_components_eq_Inter_clopen`: The connected component of a point
  is the intersection of all its clopen neighbourhoods.
* `compact_t2_tot_disc_iff_tot_sep`: Being a `totally_disconnected_space`
  is equivalent to being a `totally_separated_space`.
* `connected_components.t2`: `connected_components Œ±` is T‚ÇÇ for `Œ±` T‚ÇÇ and compact.

### T‚ÇÉ spaces

* `disjoint_nested_nhds`: Given two points `x ‚â† y`, we can find neighbourhoods `x ‚àà V‚ÇÅ ‚äÜ U‚ÇÅ` and
  `y ‚àà V‚ÇÇ ‚äÜ U‚ÇÇ`, with the `V‚Çñ` closed and the `U‚Çñ` open, such that the `U‚Çñ` are disjoint.

## References

https://en.wikipedia.org/wiki/Separation_axiom
-/


open Function Set Filter TopologicalSpace

open Topology Filter Classical

universe u v

variable {Œ± : Type u} {Œ≤ : Type v} [TopologicalSpace Œ±]

section Separation

#print SeparatedNhds /-
/--
`separated_nhds` is a predicate on pairs of sub`set`s of a topological space.  It holds if the two
sub`set`s are contained in disjoint open sets.
-/
def SeparatedNhds : Set Œ± ‚Üí Set Œ± ‚Üí Prop := fun s t : Set Œ± =>
  ‚àÉ U V : Set Œ±, IsOpen U ‚àß IsOpen V ‚àß s ‚äÜ U ‚àß t ‚äÜ V ‚àß Disjoint U V
#align separated_nhds SeparatedNhds
-/

/- warning: separated_nhds_iff_disjoint -> separatedNhds_iff_disjoint is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] {s : Set.{u1} Œ±} {t : Set.{u1} Œ±}, Iff (SeparatedNhds.{u1} Œ± _inst_1 s t) (Disjoint.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.completeLattice.{u1} Œ±))) (nhdsSet.{u1} Œ± _inst_1 s) (nhdsSet.{u1} Œ± _inst_1 t))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] {s : Set.{u1} Œ±} {t : Set.{u1} Œ±}, Iff (SeparatedNhds.{u1} Œ± _inst_1 s t) (Disjoint.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.instCompleteLatticeFilter.{u1} Œ±))) (nhdsSet.{u1} Œ± _inst_1 s) (nhdsSet.{u1} Œ± _inst_1 t))
Case conversion may be inaccurate. Consider using '#align separated_nhds_iff_disjoint separatedNhds_iff_disjoint‚Çì'. -/
theorem separatedNhds_iff_disjoint {s t : Set Œ±} : SeparatedNhds s t ‚Üî Disjoint (ùìùÀ¢ s) (ùìùÀ¢ t) := by
  simp only [(hasBasis_nhdsSet s).disjoint_iff (hasBasis_nhdsSet t), SeparatedNhds, exists_prop, ‚Üê
    exists_and_left, and_assoc, and_comm, and_left_comm]
#align separated_nhds_iff_disjoint separatedNhds_iff_disjoint

namespace SeparatedNhds

variable {s s‚ÇÅ s‚ÇÇ t t‚ÇÅ t‚ÇÇ u : Set Œ±}

#print SeparatedNhds.symm /-
@[symm]
theorem symm : SeparatedNhds s t ‚Üí SeparatedNhds t s := fun ‚ü®U, V, oU, oV, aU, bV, UV‚ü© =>
  ‚ü®V, U, oV, oU, bV, aU, Disjoint.symm UV‚ü©
#align separated_nhds.symm SeparatedNhds.symm
-/

#print SeparatedNhds.comm /-
theorem comm (s t : Set Œ±) : SeparatedNhds s t ‚Üî SeparatedNhds t s :=
  ‚ü®symm, symm‚ü©
#align separated_nhds.comm SeparatedNhds.comm
-/

#print SeparatedNhds.preimage /-
theorem preimage [TopologicalSpace Œ≤] {f : Œ± ‚Üí Œ≤} {s t : Set Œ≤} (h : SeparatedNhds s t)
    (hf : Continuous f) : SeparatedNhds (f ‚Åª¬π' s) (f ‚Åª¬π' t) :=
  let ‚ü®U, V, oU, oV, sU, tV, UV‚ü© := h
  ‚ü®f ‚Åª¬π' U, f ‚Åª¬π' V, oU.Preimage hf, oV.Preimage hf, preimage_mono sU, preimage_mono tV,
    UV.Preimage f‚ü©
#align separated_nhds.preimage SeparatedNhds.preimage
-/

/- warning: separated_nhds.disjoint -> SeparatedNhds.disjoint is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] {s : Set.{u1} Œ±} {t : Set.{u1} Œ±}, (SeparatedNhds.{u1} Œ± _inst_1 s t) -> (Disjoint.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.completeBooleanAlgebra.{u1} Œ±)))))) (GeneralizedBooleanAlgebra.toOrderBot.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toGeneralizedBooleanAlgebra.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±))) s t)
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] {s : Set.{u1} Œ±} {t : Set.{u1} Œ±}, (SeparatedNhds.{u1} Œ± _inst_1 s t) -> (Disjoint.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))) (BoundedOrder.toOrderBot.{u1} (Set.{u1} Œ±) (Preorder.toLE.{u1} (Set.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))))) (CompleteLattice.toBoundedOrder.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))) s t)
Case conversion may be inaccurate. Consider using '#align separated_nhds.disjoint SeparatedNhds.disjoint‚Çì'. -/
protected theorem disjoint (h : SeparatedNhds s t) : Disjoint s t :=
  let ‚ü®U, V, hU, hV, hsU, htV, hd‚ü© := h
  hd.mono hsU htV
#align separated_nhds.disjoint SeparatedNhds.disjoint

/- warning: separated_nhds.disjoint_closure_left -> SeparatedNhds.disjoint_closure_left is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] {s : Set.{u1} Œ±} {t : Set.{u1} Œ±}, (SeparatedNhds.{u1} Œ± _inst_1 s t) -> (Disjoint.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.completeBooleanAlgebra.{u1} Œ±)))))) (GeneralizedBooleanAlgebra.toOrderBot.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toGeneralizedBooleanAlgebra.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±))) (closure.{u1} Œ± _inst_1 s) t)
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] {s : Set.{u1} Œ±} {t : Set.{u1} Œ±}, (SeparatedNhds.{u1} Œ± _inst_1 s t) -> (Disjoint.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))) (BoundedOrder.toOrderBot.{u1} (Set.{u1} Œ±) (Preorder.toLE.{u1} (Set.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))))) (CompleteLattice.toBoundedOrder.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))) (closure.{u1} Œ± _inst_1 s) t)
Case conversion may be inaccurate. Consider using '#align separated_nhds.disjoint_closure_left SeparatedNhds.disjoint_closure_left‚Çì'. -/
theorem disjoint_closure_left (h : SeparatedNhds s t) : Disjoint (closure s) t :=
  let ‚ü®U, V, hU, hV, hsU, htV, hd‚ü© := h
  (hd.closure_left hV).mono (closure_mono hsU) htV
#align separated_nhds.disjoint_closure_left SeparatedNhds.disjoint_closure_left

/- warning: separated_nhds.disjoint_closure_right -> SeparatedNhds.disjoint_closure_right is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] {s : Set.{u1} Œ±} {t : Set.{u1} Œ±}, (SeparatedNhds.{u1} Œ± _inst_1 s t) -> (Disjoint.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.completeBooleanAlgebra.{u1} Œ±)))))) (GeneralizedBooleanAlgebra.toOrderBot.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toGeneralizedBooleanAlgebra.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±))) s (closure.{u1} Œ± _inst_1 t))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] {s : Set.{u1} Œ±} {t : Set.{u1} Œ±}, (SeparatedNhds.{u1} Œ± _inst_1 s t) -> (Disjoint.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))) (BoundedOrder.toOrderBot.{u1} (Set.{u1} Œ±) (Preorder.toLE.{u1} (Set.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))))) (CompleteLattice.toBoundedOrder.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))) s (closure.{u1} Œ± _inst_1 t))
Case conversion may be inaccurate. Consider using '#align separated_nhds.disjoint_closure_right SeparatedNhds.disjoint_closure_right‚Çì'. -/
theorem disjoint_closure_right (h : SeparatedNhds s t) : Disjoint s (closure t) :=
  h.symm.disjoint_closure_left.symm
#align separated_nhds.disjoint_closure_right SeparatedNhds.disjoint_closure_right

#print SeparatedNhds.empty_right /-
theorem empty_right (s : Set Œ±) : SeparatedNhds s ‚àÖ :=
  ‚ü®_, _, isOpen_univ, isOpen_empty, fun a h => mem_univ a, fun a h => by cases h, disjoint_empty _‚ü©
#align separated_nhds.empty_right SeparatedNhds.empty_right
-/

#print SeparatedNhds.empty_left /-
theorem empty_left (s : Set Œ±) : SeparatedNhds ‚àÖ s :=
  (empty_right _).symm
#align separated_nhds.empty_left SeparatedNhds.empty_left
-/

#print SeparatedNhds.mono /-
theorem mono (h : SeparatedNhds s‚ÇÇ t‚ÇÇ) (hs : s‚ÇÅ ‚äÜ s‚ÇÇ) (ht : t‚ÇÅ ‚äÜ t‚ÇÇ) : SeparatedNhds s‚ÇÅ t‚ÇÅ :=
  let ‚ü®U, V, hU, hV, hsU, htV, hd‚ü© := h
  ‚ü®U, V, hU, hV, hs.trans hsU, ht.trans htV, hd‚ü©
#align separated_nhds.mono SeparatedNhds.mono
-/

/- warning: separated_nhds.union_left -> SeparatedNhds.union_left is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] {s : Set.{u1} Œ±} {t : Set.{u1} Œ±} {u : Set.{u1} Œ±}, (SeparatedNhds.{u1} Œ± _inst_1 s u) -> (SeparatedNhds.{u1} Œ± _inst_1 t u) -> (SeparatedNhds.{u1} Œ± _inst_1 (Union.union.{u1} (Set.{u1} Œ±) (Set.hasUnion.{u1} Œ±) s t) u)
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] {s : Set.{u1} Œ±} {t : Set.{u1} Œ±} {u : Set.{u1} Œ±}, (SeparatedNhds.{u1} Œ± _inst_1 s u) -> (SeparatedNhds.{u1} Œ± _inst_1 t u) -> (SeparatedNhds.{u1} Œ± _inst_1 (Union.union.{u1} (Set.{u1} Œ±) (Set.instUnionSet.{u1} Œ±) s t) u)
Case conversion may be inaccurate. Consider using '#align separated_nhds.union_left SeparatedNhds.union_left‚Çì'. -/
theorem union_left : SeparatedNhds s u ‚Üí SeparatedNhds t u ‚Üí SeparatedNhds (s ‚à™ t) u := by
  simpa only [separatedNhds_iff_disjoint, nhdsSet_union, disjoint_sup_left] using And.intro
#align separated_nhds.union_left SeparatedNhds.union_left

/- warning: separated_nhds.union_right -> SeparatedNhds.union_right is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] {s : Set.{u1} Œ±} {t : Set.{u1} Œ±} {u : Set.{u1} Œ±}, (SeparatedNhds.{u1} Œ± _inst_1 s t) -> (SeparatedNhds.{u1} Œ± _inst_1 s u) -> (SeparatedNhds.{u1} Œ± _inst_1 s (Union.union.{u1} (Set.{u1} Œ±) (Set.hasUnion.{u1} Œ±) t u))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] {s : Set.{u1} Œ±} {t : Set.{u1} Œ±} {u : Set.{u1} Œ±}, (SeparatedNhds.{u1} Œ± _inst_1 s t) -> (SeparatedNhds.{u1} Œ± _inst_1 s u) -> (SeparatedNhds.{u1} Œ± _inst_1 s (Union.union.{u1} (Set.{u1} Œ±) (Set.instUnionSet.{u1} Œ±) t u))
Case conversion may be inaccurate. Consider using '#align separated_nhds.union_right SeparatedNhds.union_right‚Çì'. -/
theorem union_right (ht : SeparatedNhds s t) (hu : SeparatedNhds s u) : SeparatedNhds s (t ‚à™ u) :=
  (ht.symm.union_left hu.symm).symm
#align separated_nhds.union_right SeparatedNhds.union_right

end SeparatedNhds

#print T0Space /-
/-- A T‚ÇÄ space, also known as a Kolmogorov space, is a topological space such that for every pair
`x ‚â† y`, there is an open set containing one but not the other. We formulate the definition in terms
of the `inseparable` relation.  -/
class T0Space (Œ± : Type u) [TopologicalSpace Œ±] : Prop where
  t0 : ‚àÄ ‚¶Éx y : Œ±‚¶Ñ, Inseparable x y ‚Üí x = y
#align t0_space T0Space
-/

#print t0Space_iff_inseparable /-
theorem t0Space_iff_inseparable (Œ± : Type u) [TopologicalSpace Œ±] :
    T0Space Œ± ‚Üî ‚àÄ x y : Œ±, Inseparable x y ‚Üí x = y :=
  ‚ü®fun ‚ü®h‚ü© => h, fun h => ‚ü®h‚ü©‚ü©
#align t0_space_iff_inseparable t0Space_iff_inseparable
-/

#print t0Space_iff_not_inseparable /-
theorem t0Space_iff_not_inseparable (Œ± : Type u) [TopologicalSpace Œ±] :
    T0Space Œ± ‚Üî ‚àÄ x y : Œ±, x ‚â† y ‚Üí ¬¨Inseparable x y := by
  simp only [t0Space_iff_inseparable, Ne.def, not_imp_not]
#align t0_space_iff_not_inseparable t0Space_iff_not_inseparable
-/

#print Inseparable.eq /-
theorem Inseparable.eq [T0Space Œ±] {x y : Œ±} (h : Inseparable x y) : x = y :=
  T0Space.t0 h
#align inseparable.eq Inseparable.eq
-/

#print Inducing.injective /-
protected theorem Inducing.injective [TopologicalSpace Œ≤] [T0Space Œ±] {f : Œ± ‚Üí Œ≤}
    (hf : Inducing f) : Injective f := fun x y h =>
  Inseparable.eq <| hf.inseparable_iff.1 <| h ‚ñ∏ Inseparable.refl _
#align inducing.injective Inducing.injective
-/

#print Inducing.embedding /-
protected theorem Inducing.embedding [TopologicalSpace Œ≤] [T0Space Œ±] {f : Œ± ‚Üí Œ≤}
    (hf : Inducing f) : Embedding f :=
  ‚ü®hf, hf.Injective‚ü©
#align inducing.embedding Inducing.embedding
-/

#print embedding_iff_inducing /-
theorem embedding_iff_inducing [TopologicalSpace Œ≤] [T0Space Œ±] {f : Œ± ‚Üí Œ≤} :
    Embedding f ‚Üî Inducing f :=
  ‚ü®Embedding.to_inducing, Inducing.embedding‚ü©
#align embedding_iff_inducing embedding_iff_inducing
-/

#print t0Space_iff_nhds_injective /-
theorem t0Space_iff_nhds_injective (Œ± : Type u) [TopologicalSpace Œ±] :
    T0Space Œ± ‚Üî Injective (ùìù : Œ± ‚Üí Filter Œ±) :=
  t0Space_iff_inseparable Œ±
#align t0_space_iff_nhds_injective t0Space_iff_nhds_injective
-/

#print nhds_injective /-
theorem nhds_injective [T0Space Œ±] : Injective (ùìù : Œ± ‚Üí Filter Œ±) :=
  (t0Space_iff_nhds_injective Œ±).1 ‚Äπ_‚Ä∫
#align nhds_injective nhds_injective
-/

#print inseparable_iff_eq /-
theorem inseparable_iff_eq [T0Space Œ±] {x y : Œ±} : Inseparable x y ‚Üî x = y :=
  nhds_injective.eq_iff
#align inseparable_iff_eq inseparable_iff_eq
-/

#print nhds_eq_nhds_iff /-
@[simp]
theorem nhds_eq_nhds_iff [T0Space Œ±] {a b : Œ±} : ùìù a = ùìù b ‚Üî a = b :=
  nhds_injective.eq_iff
#align nhds_eq_nhds_iff nhds_eq_nhds_iff
-/

#print inseparable_eq_eq /-
@[simp]
theorem inseparable_eq_eq [T0Space Œ±] : Inseparable = @Eq Œ± :=
  funext‚ÇÇ fun x y => propext inseparable_iff_eq
#align inseparable_eq_eq inseparable_eq_eq
-/

#print t0Space_iff_exists_isOpen_xor'_mem /-
theorem t0Space_iff_exists_isOpen_xor'_mem (Œ± : Type u) [TopologicalSpace Œ±] :
    T0Space Œ± ‚Üî ‚àÄ x y, x ‚â† y ‚Üí ‚àÉ U : Set Œ±, IsOpen U ‚àß Xor' (x ‚àà U) (y ‚àà U) := by
  simp only [t0Space_iff_not_inseparable, xor_iff_not_iff, not_forall, exists_prop,
    inseparable_iff_forall_open]
#align t0_space_iff_exists_is_open_xor_mem t0Space_iff_exists_isOpen_xor'_mem
-/

#print exists_isOpen_xor'_mem /-
theorem exists_isOpen_xor'_mem [T0Space Œ±] {x y : Œ±} (h : x ‚â† y) :
    ‚àÉ U : Set Œ±, IsOpen U ‚àß Xor' (x ‚àà U) (y ‚àà U) :=
  (t0Space_iff_exists_isOpen_xor'_mem Œ±).1 ‚Äπ_‚Ä∫ x y h
#align exists_is_open_xor_mem exists_isOpen_xor'_mem
-/

#print specializationOrder /-
/-- Specialization forms a partial order on a t0 topological space. -/
def specializationOrder (Œ± : Type _) [TopologicalSpace Œ±] [T0Space Œ±] : PartialOrder Œ± :=
  { specializationPreorder Œ±, PartialOrder.lift (OrderDual.toDual ‚àò ùìù) nhds_injective with }
#align specialization_order specializationOrder
-/

instance : T0Space (SeparationQuotient Œ±) :=
  ‚ü®fun x' y' =>
    Quotient.inductionOn‚ÇÇ' x' y' fun x y h =>
      SeparationQuotient.mk_eq_mk.2 <| SeparationQuotient.inducing_mk.inseparable_iff.1 h‚ü©

/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (t ¬´expr ‚äÜ ¬ª s) -/
#print minimal_nonempty_closed_subsingleton /-
theorem minimal_nonempty_closed_subsingleton [T0Space Œ±] {s : Set Œ±} (hs : IsClosed s)
    (hmin : ‚àÄ (t) (_ : t ‚äÜ s), t.Nonempty ‚Üí IsClosed t ‚Üí t = s) : s.Subsingleton :=
  by
  refine' fun x hx y hy => of_not_not fun hxy => _
  rcases exists_isOpen_xor'_mem hxy with ‚ü®U, hUo, hU‚ü©
  wlog h : x ‚àà U ‚àß y ‚àâ U
  ¬∑ exact this hmin y hy x hx (Ne.symm hxy) U hUo hU.symm (hU.resolve_left h)
  cases' h with hxU hyU
  have : s \ U = s := hmin (s \ U) (diff_subset _ _) ‚ü®y, hy, hyU‚ü© (hs.sdiff hUo)
  exact (this.symm.subset hx).2 hxU
#align minimal_nonempty_closed_subsingleton minimal_nonempty_closed_subsingleton
-/

/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (t ¬´expr ‚äÜ ¬ª s) -/
#print minimal_nonempty_closed_eq_singleton /-
theorem minimal_nonempty_closed_eq_singleton [T0Space Œ±] {s : Set Œ±} (hs : IsClosed s)
    (hne : s.Nonempty) (hmin : ‚àÄ (t) (_ : t ‚äÜ s), t.Nonempty ‚Üí IsClosed t ‚Üí t = s) : ‚àÉ x, s = {x} :=
  exists_eq_singleton_iff_nonempty_subsingleton.2
    ‚ü®hne, minimal_nonempty_closed_subsingleton hs hmin‚ü©
#align minimal_nonempty_closed_eq_singleton minimal_nonempty_closed_eq_singleton
-/

#print IsClosed.exists_closed_singleton /-
/-- Given a closed set `S` in a compact T‚ÇÄ space,
there is some `x ‚àà S` such that `{x}` is closed. -/
theorem IsClosed.exists_closed_singleton {Œ± : Type _} [TopologicalSpace Œ±] [T0Space Œ±]
    [CompactSpace Œ±] {S : Set Œ±} (hS : IsClosed S) (hne : S.Nonempty) :
    ‚àÉ x : Œ±, x ‚àà S ‚àß IsClosed ({x} : Set Œ±) :=
  by
  obtain ‚ü®V, Vsub, Vne, Vcls, hV‚ü© := hS.exists_minimal_nonempty_closed_subset hne
  rcases minimal_nonempty_closed_eq_singleton Vcls Vne hV with ‚ü®x, rfl‚ü©
  exact ‚ü®x, Vsub (mem_singleton x), Vcls‚ü©
#align is_closed.exists_closed_singleton IsClosed.exists_closed_singleton
-/

/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (t ¬´expr ‚äÜ ¬ª s) -/
#print minimal_nonempty_open_subsingleton /-
theorem minimal_nonempty_open_subsingleton [T0Space Œ±] {s : Set Œ±} (hs : IsOpen s)
    (hmin : ‚àÄ (t) (_ : t ‚äÜ s), t.Nonempty ‚Üí IsOpen t ‚Üí t = s) : s.Subsingleton :=
  by
  refine' fun x hx y hy => of_not_not fun hxy => _
  rcases exists_isOpen_xor'_mem hxy with ‚ü®U, hUo, hU‚ü©
  wlog h : x ‚àà U ‚àß y ‚àâ U
  ¬∑ exact this hs hmin y hy x hx (Ne.symm hxy) U hUo hU.symm (hU.resolve_left h)
  cases' h with hxU hyU
  have : s ‚à© U = s := hmin (s ‚à© U) (inter_subset_left _ _) ‚ü®x, hx, hxU‚ü© (hs.inter hUo)
  exact hyU (this.symm.subset hy).2
#align minimal_nonempty_open_subsingleton minimal_nonempty_open_subsingleton
-/

/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (t ¬´expr ‚äÜ ¬ª s) -/
#print minimal_nonempty_open_eq_singleton /-
theorem minimal_nonempty_open_eq_singleton [T0Space Œ±] {s : Set Œ±} (hs : IsOpen s)
    (hne : s.Nonempty) (hmin : ‚àÄ (t) (_ : t ‚äÜ s), t.Nonempty ‚Üí IsOpen t ‚Üí t = s) : ‚àÉ x, s = {x} :=
  exists_eq_singleton_iff_nonempty_subsingleton.2 ‚ü®hne, minimal_nonempty_open_subsingleton hs hmin‚ü©
#align minimal_nonempty_open_eq_singleton minimal_nonempty_open_eq_singleton
-/

/- warning: exists_open_singleton_of_open_finite -> exists_open_singleton_of_open_finite is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T0Space.{u1} Œ± _inst_1] {s : Set.{u1} Œ±}, (Set.Finite.{u1} Œ± s) -> (Set.Nonempty.{u1} Œ± s) -> (IsOpen.{u1} Œ± _inst_1 s) -> (Exists.{succ u1} Œ± (fun (x : Œ±) => Exists.{0} (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x s) (fun (H : Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x s) => IsOpen.{u1} Œ± _inst_1 (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasSingleton.{u1} Œ±) x))))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T0Space.{u1} Œ± _inst_1] {s : Set.{u1} Œ±}, (Set.Finite.{u1} Œ± s) -> (Set.Nonempty.{u1} Œ± s) -> (IsOpen.{u1} Œ± _inst_1 s) -> (Exists.{succ u1} Œ± (fun (x : Œ±) => And (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x s) (IsOpen.{u1} Œ± _inst_1 (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instSingletonSet.{u1} Œ±) x))))
Case conversion may be inaccurate. Consider using '#align exists_open_singleton_of_open_finite exists_open_singleton_of_open_finite‚Çì'. -/
/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (t ¬´expr ‚äÇ ¬ª s) -/
/-- Given an open finite set `S` in a T‚ÇÄ space, there is some `x ‚àà S` such that `{x}` is open. -/
theorem exists_open_singleton_of_open_finite [T0Space Œ±] {s : Set Œ±} (hfin : s.Finite)
    (hne : s.Nonempty) (ho : IsOpen s) : ‚àÉ x ‚àà s, IsOpen ({x} : Set Œ±) :=
  by
  lift s to Finset Œ± using hfin
  induction' s using Finset.strongInductionOn with s ihs
  rcases em (‚àÉ (t : _)(_ : t ‚äÇ s), t.Nonempty ‚àß IsOpen (t : Set Œ±)) with (‚ü®t, hts, htne, hto‚ü© | ht)
  ¬∑ rcases ihs t hts htne hto with ‚ü®x, hxt, hxo‚ü©
    exact ‚ü®x, hts.1 hxt, hxo‚ü©
  ¬∑ rcases minimal_nonempty_open_eq_singleton ho hne _ with ‚ü®x, hx‚ü©
    ¬∑ exact ‚ü®x, hx.symm ‚ñ∏ rfl, hx ‚ñ∏ ho‚ü©
    refine' fun t hts htne hto => of_not_not fun hts' => ht _
    lift t to Finset Œ± using s.finite_to_set.subset hts
    exact ‚ü®t, ssubset_iff_subset_ne.2 ‚ü®hts, mt Finset.coe_inj.2 hts'‚ü©, htne, hto‚ü©
#align exists_open_singleton_of_open_finite exists_open_singleton_of_open_finite

#print exists_open_singleton_of_finite /-
theorem exists_open_singleton_of_finite [T0Space Œ±] [Finite Œ±] [Nonempty Œ±] :
    ‚àÉ x : Œ±, IsOpen ({x} : Set Œ±) :=
  let ‚ü®x, _, h‚ü© := exists_open_singleton_of_open_finite (Set.toFinite _) univ_nonempty isOpen_univ
  ‚ü®x, h‚ü©
#align exists_open_singleton_of_fintype exists_open_singleton_of_finite
-/

#print t0Space_of_injective_of_continuous /-
theorem t0Space_of_injective_of_continuous [TopologicalSpace Œ≤] {f : Œ± ‚Üí Œ≤}
    (hf : Function.Injective f) (hf' : Continuous f) [T0Space Œ≤] : T0Space Œ± :=
  ‚ü®fun x y h => hf <| (h.map hf').Eq‚ü©
#align t0_space_of_injective_of_continuous t0Space_of_injective_of_continuous
-/

#print Embedding.t0Space /-
protected theorem Embedding.t0Space [TopologicalSpace Œ≤] [T0Space Œ≤] {f : Œ± ‚Üí Œ≤}
    (hf : Embedding f) : T0Space Œ± :=
  t0Space_of_injective_of_continuous hf.inj hf.Continuous
#align embedding.t0_space Embedding.t0Space
-/

#print Subtype.t0Space /-
instance Subtype.t0Space [T0Space Œ±] {p : Œ± ‚Üí Prop} : T0Space (Subtype p) :=
  embedding_subtype_val.T0Space
#align subtype.t0_space Subtype.t0Space
-/

#print t0Space_iff_or_not_mem_closure /-
theorem t0Space_iff_or_not_mem_closure (Œ± : Type u) [TopologicalSpace Œ±] :
    T0Space Œ± ‚Üî ‚àÄ a b : Œ±, a ‚â† b ‚Üí a ‚àâ closure ({b} : Set Œ±) ‚à® b ‚àâ closure ({a} : Set Œ±) := by
  simp only [t0Space_iff_not_inseparable, inseparable_iff_mem_closure, not_and_or]
#align t0_space_iff_or_not_mem_closure t0Space_iff_or_not_mem_closure
-/

instance [TopologicalSpace Œ≤] [T0Space Œ±] [T0Space Œ≤] : T0Space (Œ± √ó Œ≤) :=
  ‚ü®fun x y h => Prod.ext (h.map continuous_fst).Eq (h.map continuous_snd).Eq‚ü©

instance {Œπ : Type _} {œÄ : Œπ ‚Üí Type _} [‚àÄ i, TopologicalSpace (œÄ i)] [‚àÄ i, T0Space (œÄ i)] :
    T0Space (‚àÄ i, œÄ i) :=
  ‚ü®fun x y h => funext fun i => (h.map (continuous_apply i)).Eq‚ü©

#print T0Space.of_cover /-
theorem T0Space.of_cover (h : ‚àÄ x y, Inseparable x y ‚Üí ‚àÉ s : Set Œ±, x ‚àà s ‚àß y ‚àà s ‚àß T0Space s) :
    T0Space Œ± := by
  refine' ‚ü®fun x y hxy => _‚ü©
  rcases h x y hxy with ‚ü®s, hxs, hys, hs‚ü©; skip
  lift x to s using hxs; lift y to s using hys
  rw [‚Üê subtype_inseparable_iff] at hxy
  exact congr_arg coe hxy.eq
#align t0_space.of_cover T0Space.of_cover
-/

#print T0Space.of_open_cover /-
theorem T0Space.of_open_cover (h : ‚àÄ x, ‚àÉ s : Set Œ±, x ‚àà s ‚àß IsOpen s ‚àß T0Space s) : T0Space Œ± :=
  T0Space.of_cover fun x y hxy =>
    let ‚ü®s, hxs, hso, hs‚ü© := h x
    ‚ü®s, hxs, (hxy.mem_open_iff hso).1 hxs, hs‚ü©
#align t0_space.of_open_cover T0Space.of_open_cover
-/

#print T1Space /-
/-- A T‚ÇÅ space, also known as a Fr√©chet space, is a topological space
  where every singleton set is closed. Equivalently, for every pair
  `x ‚â† y`, there is an open set containing `x` and not `y`. -/
class T1Space (Œ± : Type u) [TopologicalSpace Œ±] : Prop where
  t1 : ‚àÄ x, IsClosed ({x} : Set Œ±)
#align t1_space T1Space
-/

#print isClosed_singleton /-
theorem isClosed_singleton [T1Space Œ±] {x : Œ±} : IsClosed ({x} : Set Œ±) :=
  T1Space.t1 x
#align is_closed_singleton isClosed_singleton
-/

/- warning: is_open_compl_singleton -> isOpen_compl_singleton is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {x : Œ±}, IsOpen.{u1} Œ± _inst_1 (HasCompl.compl.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±)) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasSingleton.{u1} Œ±) x))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {x : Œ±}, IsOpen.{u1} Œ± _inst_1 (HasCompl.compl.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} Œ±) (Set.instBooleanAlgebraSet.{u1} Œ±)) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instSingletonSet.{u1} Œ±) x))
Case conversion may be inaccurate. Consider using '#align is_open_compl_singleton isOpen_compl_singleton‚Çì'. -/
theorem isOpen_compl_singleton [T1Space Œ±] {x : Œ±} : IsOpen ({x}·∂ú : Set Œ±) :=
  isClosed_singleton.isOpen_compl
#align is_open_compl_singleton isOpen_compl_singleton

#print isOpen_ne /-
theorem isOpen_ne [T1Space Œ±] {x : Œ±} : IsOpen { y | y ‚â† x } :=
  isOpen_compl_singleton
#align is_open_ne isOpen_ne
-/

#print Continuous.isOpen_mulSupport /-
@[to_additive]
theorem Continuous.isOpen_mulSupport [T1Space Œ±] [One Œ±] [TopologicalSpace Œ≤] {f : Œ≤ ‚Üí Œ±}
    (hf : Continuous f) : IsOpen (mulSupport f) :=
  isOpen_ne.Preimage hf
#align continuous.is_open_mul_support Continuous.isOpen_mulSupport
#align continuous.is_open_support Continuous.isOpen_support
-/

/- warning: ne.nhds_within_compl_singleton -> Ne.nhdsWithin_compl_singleton is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, (Ne.{succ u1} Œ± x y) -> (Eq.{succ u1} (Filter.{u1} Œ±) (nhdsWithin.{u1} Œ± _inst_1 x (HasCompl.compl.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±)) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasSingleton.{u1} Œ±) y))) (nhds.{u1} Œ± _inst_1 x))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, (Ne.{succ u1} Œ± x y) -> (Eq.{succ u1} (Filter.{u1} Œ±) (nhdsWithin.{u1} Œ± _inst_1 x (HasCompl.compl.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} Œ±) (Set.instBooleanAlgebraSet.{u1} Œ±)) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instSingletonSet.{u1} Œ±) y))) (nhds.{u1} Œ± _inst_1 x))
Case conversion may be inaccurate. Consider using '#align ne.nhds_within_compl_singleton Ne.nhdsWithin_compl_singleton‚Çì'. -/
theorem Ne.nhdsWithin_compl_singleton [T1Space Œ±] {x y : Œ±} (h : x ‚â† y) : ùìù[{y}·∂ú] x = ùìù x :=
  isOpen_ne.nhdsWithin_eq h
#align ne.nhds_within_compl_singleton Ne.nhdsWithin_compl_singleton

/- warning: ne.nhds_within_diff_singleton -> Ne.nhdsWithin_diff_singleton is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, (Ne.{succ u1} Œ± x y) -> (forall (s : Set.{u1} Œ±), Eq.{succ u1} (Filter.{u1} Œ±) (nhdsWithin.{u1} Œ± _inst_1 x (SDiff.sdiff.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasSdiff.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±)) s (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasSingleton.{u1} Œ±) y))) (nhdsWithin.{u1} Œ± _inst_1 x s))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, (Ne.{succ u1} Œ± x y) -> (forall (s : Set.{u1} Œ±), Eq.{succ u1} (Filter.{u1} Œ±) (nhdsWithin.{u1} Œ± _inst_1 x (SDiff.sdiff.{u1} (Set.{u1} Œ±) (Set.instSDiffSet.{u1} Œ±) s (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instSingletonSet.{u1} Œ±) y))) (nhdsWithin.{u1} Œ± _inst_1 x s))
Case conversion may be inaccurate. Consider using '#align ne.nhds_within_diff_singleton Ne.nhdsWithin_diff_singleton‚Çì'. -/
theorem Ne.nhdsWithin_diff_singleton [T1Space Œ±] {x y : Œ±} (h : x ‚â† y) (s : Set Œ±) :
    ùìù[s \ {y}] x = ùìù[s] x :=
  by
  rw [diff_eq, inter_comm, nhdsWithin_inter_of_mem]
  exact mem_nhdsWithin_of_mem_nhds (is_open_ne.mem_nhds h)
#align ne.nhds_within_diff_singleton Ne.nhdsWithin_diff_singleton

/- warning: is_open_set_of_eventually_nhds_within -> isOpen_setOf_eventually_nhdsWithin is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {p : Œ± -> Prop}, IsOpen.{u1} Œ± _inst_1 (setOf.{u1} Œ± (fun (x : Œ±) => Filter.Eventually.{u1} Œ± (fun (y : Œ±) => p y) (nhdsWithin.{u1} Œ± _inst_1 x (HasCompl.compl.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±)) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasSingleton.{u1} Œ±) x)))))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {p : Œ± -> Prop}, IsOpen.{u1} Œ± _inst_1 (setOf.{u1} Œ± (fun (x : Œ±) => Filter.Eventually.{u1} Œ± (fun (y : Œ±) => p y) (nhdsWithin.{u1} Œ± _inst_1 x (HasCompl.compl.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} Œ±) (Set.instBooleanAlgebraSet.{u1} Œ±)) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instSingletonSet.{u1} Œ±) x)))))
Case conversion may be inaccurate. Consider using '#align is_open_set_of_eventually_nhds_within isOpen_setOf_eventually_nhdsWithin‚Çì'. -/
theorem isOpen_setOf_eventually_nhdsWithin [T1Space Œ±] {p : Œ± ‚Üí Prop} :
    IsOpen { x | ‚àÄ·∂† y in ùìù[‚â†] x, p y } :=
  by
  refine' is_open_iff_mem_nhds.mpr fun a ha => _
  filter_upwards [eventually_nhds_nhds_within.mpr ha]with b hb
  by_cases a = b
  ¬∑ subst h
    exact hb
  ¬∑ rw [(Ne.symm h).nhdsWithin_compl_singleton] at hb
    exact hb.filter_mono nhdsWithin_le_nhds
#align is_open_set_of_eventually_nhds_within isOpen_setOf_eventually_nhdsWithin

#print Set.Finite.isClosed /-
protected theorem Set.Finite.isClosed [T1Space Œ±] {s : Set Œ±} (hs : Set.Finite s) : IsClosed s :=
  by
  rw [‚Üê bUnion_of_singleton s]
  exact isClosed_bunion·µ¢ hs fun i hi => isClosed_singleton
#align set.finite.is_closed Set.Finite.isClosed
-/

/- warning: topological_space.is_topological_basis.exists_mem_of_ne -> TopologicalSpace.IsTopologicalBasis.exists_mem_of_ne is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {b : Set.{u1} (Set.{u1} Œ±)}, (TopologicalSpace.IsTopologicalBasis.{u1} Œ± _inst_1 b) -> (forall {x : Œ±} {y : Œ±}, (Ne.{succ u1} Œ± x y) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (a : Set.{u1} Œ±) => Exists.{0} (Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Set.{u1} (Set.{u1} Œ±)) (Set.hasMem.{u1} (Set.{u1} Œ±)) a b) (fun (H : Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Set.{u1} (Set.{u1} Œ±)) (Set.hasMem.{u1} (Set.{u1} Œ±)) a b) => And (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x a) (Not (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) y a))))))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {b : Set.{u1} (Set.{u1} Œ±)}, (TopologicalSpace.IsTopologicalBasis.{u1} Œ± _inst_1 b) -> (forall {x : Œ±} {y : Œ±}, (Ne.{succ u1} Œ± x y) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (a : Set.{u1} Œ±) => And (Membership.mem.{u1, u1} (Set.{u1} Œ±) (Set.{u1} (Set.{u1} Œ±)) (Set.instMembershipSet.{u1} (Set.{u1} Œ±)) a b) (And (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x a) (Not (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) y a))))))
Case conversion may be inaccurate. Consider using '#align topological_space.is_topological_basis.exists_mem_of_ne TopologicalSpace.IsTopologicalBasis.exists_mem_of_ne‚Çì'. -/
theorem TopologicalSpace.IsTopologicalBasis.exists_mem_of_ne [T1Space Œ±] {b : Set (Set Œ±)}
    (hb : IsTopologicalBasis b) {x y : Œ±} (h : x ‚â† y) : ‚àÉ a ‚àà b, x ‚àà a ‚àß y ‚àâ a :=
  by
  rcases hb.is_open_iff.1 isOpen_ne x h with ‚ü®a, ab, xa, ha‚ü©
  exact ‚ü®a, ab, xa, fun h => ha h rfl‚ü©
#align topological_space.is_topological_basis.exists_mem_of_ne TopologicalSpace.IsTopologicalBasis.exists_mem_of_ne

/- warning: filter.coclosed_compact_le_cofinite -> Filter.coclosedCompact_le_cofinite is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1], LE.le.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±))) (Filter.coclosedCompact.{u1} Œ± _inst_1) (Filter.cofinite.{u1} Œ±)
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1], LE.le.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±))) (Filter.coclosedCompact.{u1} Œ± _inst_1) (Filter.cofinite.{u1} Œ±)
Case conversion may be inaccurate. Consider using '#align filter.coclosed_compact_le_cofinite Filter.coclosedCompact_le_cofinite‚Çì'. -/
theorem Filter.coclosedCompact_le_cofinite [T1Space Œ±] :
    Filter.coclosedCompact Œ± ‚â§ Filter.cofinite := fun s hs =>
  compl_compl s ‚ñ∏ hs.IsCompact.compl_mem_coclosedCompact_of_isClosed hs.IsClosed
#align filter.coclosed_compact_le_cofinite Filter.coclosedCompact_le_cofinite

variable (Œ±)

#print Bornology.relativelyCompact /-
/-- In a `t1_space`, relatively compact sets form a bornology. Its cobounded filter is
`filter.coclosed_compact`. See also `bornology.in_compact` the bornology of sets contained
in a compact set. -/
def Bornology.relativelyCompact [T1Space Œ±] : Bornology Œ±
    where
  cobounded := Filter.coclosedCompact Œ±
  le_cofinite := Filter.coclosedCompact_le_cofinite
#align bornology.relatively_compact Bornology.relativelyCompact
-/

variable {Œ±}

#print Bornology.relativelyCompact.isBounded_iff /-
theorem Bornology.relativelyCompact.isBounded_iff [T1Space Œ±] {s : Set Œ±} :
    @Bornology.IsBounded _ (Bornology.relativelyCompact Œ±) s ‚Üî IsCompact (closure s) :=
  by
  change s·∂ú ‚àà Filter.coclosedCompact Œ± ‚Üî _
  rw [Filter.mem_coclosedCompact]
  constructor
  ¬∑ rintro ‚ü®t, ht‚ÇÅ, ht‚ÇÇ, hst‚ü©
    rw [compl_subset_compl] at hst
    exact isCompact_of_isClosed_subset ht‚ÇÇ isClosed_closure (closure_minimal hst ht‚ÇÅ)
  ¬∑ intro h
    exact ‚ü®closure s, isClosed_closure, h, compl_subset_compl.mpr subset_closure‚ü©
#align bornology.relatively_compact.is_bounded_iff Bornology.relativelyCompact.isBounded_iff
-/

#print Finset.isClosed /-
protected theorem Finset.isClosed [T1Space Œ±] (s : Finset Œ±) : IsClosed (s : Set Œ±) :=
  s.finite_toSet.IsClosed
#align finset.is_closed Finset.isClosed
-/

/- warning: t1_space_tfae -> t1Space_TFAE is a dubious translation:
lean 3 declaration is
  forall (Œ± : Type.{u1}) [_inst_2 : TopologicalSpace.{u1} Œ±], List.TFAE (List.cons.{0} Prop (T1Space.{u1} Œ± _inst_2) (List.cons.{0} Prop (forall (x : Œ±), IsClosed.{u1} Œ± _inst_2 (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasSingleton.{u1} Œ±) x)) (List.cons.{0} Prop (forall (x : Œ±), IsOpen.{u1} Œ± _inst_2 (HasCompl.compl.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±)) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasSingleton.{u1} Œ±) x))) (List.cons.{0} Prop (Continuous.{u1, u1} Œ± (CofiniteTopology.{u1} Œ±) _inst_2 (CofiniteTopology.topologicalSpace.{u1} Œ±) (coeFn.{succ u1, succ u1} (Equiv.{succ u1, succ u1} Œ± (CofiniteTopology.{u1} Œ±)) (fun (_x : Equiv.{succ u1, succ u1} Œ± (CofiniteTopology.{u1} Œ±)) => Œ± -> (CofiniteTopology.{u1} Œ±)) (Equiv.hasCoeToFun.{succ u1, succ u1} Œ± (CofiniteTopology.{u1} Œ±)) (CofiniteTopology.of.{u1} Œ±))) (List.cons.{0} Prop (forall {{x : Œ±}} {{y : Œ±}}, (Ne.{succ u1} Œ± x y) -> (Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) (HasCompl.compl.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±)) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasSingleton.{u1} Œ±) y)) (nhds.{u1} Œ± _inst_2 x))) (List.cons.{0} Prop (forall {{x : Œ±}} {{y : Œ±}}, (Ne.{succ u1} Œ± x y) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (s : Set.{u1} Œ±) => Exists.{0} (Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) s (nhds.{u1} Œ± _inst_2 x)) (fun (H : Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) s (nhds.{u1} Œ± _inst_2 x)) => Not (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) y s))))) (List.cons.{0} Prop (forall {{x : Œ±}} {{y : Œ±}}, (Ne.{succ u1} Œ± x y) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (U : Set.{u1} Œ±) => Exists.{0} (IsOpen.{u1} Œ± _inst_2 U) (fun (hU : IsOpen.{u1} Œ± _inst_2 U) => And (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x U) (Not (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) y U)))))) (List.cons.{0} Prop (forall {{x : Œ±}} {{y : Œ±}}, (Ne.{succ u1} Œ± x y) -> (Disjoint.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.completeLattice.{u1} Œ±))) (nhds.{u1} Œ± _inst_2 x) (Pure.pure.{u1, u1} Filter.{u1} Filter.hasPure.{u1} Œ± y))) (List.cons.{0} Prop (forall {{x : Œ±}} {{y : Œ±}}, (Ne.{succ u1} Œ± x y) -> (Disjoint.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.completeLattice.{u1} Œ±))) (Pure.pure.{u1, u1} Filter.{u1} Filter.hasPure.{u1} Œ± x) (nhds.{u1} Œ± _inst_2 y))) (List.cons.{0} Prop (forall {{x : Œ±}} {{y : Œ±}}, (Specializes.{u1} Œ± _inst_2 x y) -> (Eq.{succ u1} Œ± x y)) (List.nil.{0} Prop)))))))))))
but is expected to have type
  forall (Œ± : Type.{u1}) [_inst_2 : TopologicalSpace.{u1} Œ±], List.TFAE (List.cons.{0} Prop (T1Space.{u1} Œ± _inst_2) (List.cons.{0} Prop (forall (x : Œ±), IsClosed.{u1} Œ± _inst_2 (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instSingletonSet.{u1} Œ±) x)) (List.cons.{0} Prop (forall (x : Œ±), IsOpen.{u1} Œ± _inst_2 (HasCompl.compl.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} Œ±) (Set.instBooleanAlgebraSet.{u1} Œ±)) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instSingletonSet.{u1} Œ±) x))) (List.cons.{0} Prop (Continuous.{u1, u1} Œ± (CofiniteTopology.{u1} Œ±) _inst_2 (CofiniteTopology.instTopologicalSpaceCofiniteTopology.{u1} Œ±) (FunLike.coe.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} Œ± (CofiniteTopology.{u1} Œ±)) Œ± (fun (_x : Œ±) => (fun (x._@.Mathlib.Logic.Equiv.Defs._hyg.808 : Œ±) => CofiniteTopology.{u1} Œ±) _x) (Equiv.instFunLikeEquiv.{succ u1, succ u1} Œ± (CofiniteTopology.{u1} Œ±)) (CofiniteTopology.of.{u1} Œ±))) (List.cons.{0} Prop (forall {{x : Œ±}} {{y : Œ±}}, (Ne.{succ u1} Œ± x y) -> (Membership.mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (instMembershipSetFilter.{u1} Œ±) (HasCompl.compl.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} Œ±) (Set.instBooleanAlgebraSet.{u1} Œ±)) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instSingletonSet.{u1} Œ±) y)) (nhds.{u1} Œ± _inst_2 x))) (List.cons.{0} Prop (forall {{x : Œ±}} {{y : Œ±}}, (Ne.{succ u1} Œ± x y) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (s : Set.{u1} Œ±) => And (Membership.mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (instMembershipSetFilter.{u1} Œ±) s (nhds.{u1} Œ± _inst_2 x)) (Not (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) y s))))) (List.cons.{0} Prop (forall {{x : Œ±}} {{y : Œ±}}, (Ne.{succ u1} Œ± x y) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (U : Set.{u1} Œ±) => And (IsOpen.{u1} Œ± _inst_2 U) (And (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x U) (Not (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) y U)))))) (List.cons.{0} Prop (forall {{x : Œ±}} {{y : Œ±}}, (Ne.{succ u1} Œ± x y) -> (Disjoint.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.instCompleteLatticeFilter.{u1} Œ±))) (nhds.{u1} Œ± _inst_2 x) (Pure.pure.{u1, u1} Filter.{u1} Filter.instPureFilter.{u1} Œ± y))) (List.cons.{0} Prop (forall {{x : Œ±}} {{y : Œ±}}, (Ne.{succ u1} Œ± x y) -> (Disjoint.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.instCompleteLatticeFilter.{u1} Œ±))) (Pure.pure.{u1, u1} Filter.{u1} Filter.instPureFilter.{u1} Œ± x) (nhds.{u1} Œ± _inst_2 y))) (List.cons.{0} Prop (forall {{x : Œ±}} {{y : Œ±}}, (Specializes.{u1} Œ± _inst_2 x y) -> (Eq.{succ u1} Œ± x y)) (List.nil.{0} Prop)))))))))))
Case conversion may be inaccurate. Consider using '#align t1_space_tfae t1Space_TFAE‚Çì'. -/
theorem t1Space_TFAE (Œ± : Type u) [TopologicalSpace Œ±] :
    TFAE
      [T1Space Œ±, ‚àÄ x, IsClosed ({x} : Set Œ±), ‚àÄ x, IsOpen ({x}·∂ú : Set Œ±),
        Continuous (@CofiniteTopology.of Œ±), ‚àÄ ‚¶Éx y : Œ±‚¶Ñ, x ‚â† y ‚Üí {y}·∂ú ‚àà ùìù x,
        ‚àÄ ‚¶Éx y : Œ±‚¶Ñ, x ‚â† y ‚Üí ‚àÉ s ‚àà ùìù x, y ‚àâ s,
        ‚àÄ ‚¶Éx y : Œ±‚¶Ñ, x ‚â† y ‚Üí ‚àÉ (U : Set Œ±)(hU : IsOpen U), x ‚àà U ‚àß y ‚àâ U,
        ‚àÄ ‚¶Éx y : Œ±‚¶Ñ, x ‚â† y ‚Üí Disjoint (ùìù x) (pure y), ‚àÄ ‚¶Éx y : Œ±‚¶Ñ, x ‚â† y ‚Üí Disjoint (pure x) (ùìù y),
        ‚àÄ ‚¶Éx y : Œ±‚¶Ñ, x ‚§≥ y ‚Üí x = y] :=
  by
  tfae_have 1 ‚Üî 2; exact ‚ü®fun h => h.1, fun h => ‚ü®h‚ü©‚ü©
  tfae_have 2 ‚Üî 3; ¬∑ simp only [isOpen_compl_iff]
  tfae_have 5 ‚Üî 3
  ¬∑ refine' forall_swap.trans _
    simp only [isOpen_iff_mem_nhds, mem_compl_iff, mem_singleton_iff]
  tfae_have 5 ‚Üî 6
  ¬∑ simp only [‚Üê subset_compl_singleton_iff, exists_mem_subset_iff]
  tfae_have 5 ‚Üî 7
  ¬∑
    simp only [(nhds_basis_opens _).mem_iff, subset_compl_singleton_iff, exists_prop, and_assoc,
      and_left_comm]
  tfae_have 5 ‚Üî 8
  ¬∑ simp only [‚Üê principal_singleton, disjoint_principal_right]
  tfae_have 8 ‚Üî 9; exact forall_swap.trans (by simp only [disjoint_comm, ne_comm])
  tfae_have 1 ‚Üí 4
  ¬∑ simp only [continuous_def, CofiniteTopology.isOpen_iff']
    rintro H s (rfl | hs)
    exacts[isOpen_empty, compl_compl s ‚ñ∏ (@Set.Finite.isClosed _ _ H _ hs).isOpen_compl]
  tfae_have 4 ‚Üí 2
  exact fun h x => (CofiniteTopology.isClosed_iff.2 <| Or.inr (finite_singleton _)).Preimage h
  tfae_have 2 ‚Üî 10
  ¬∑
    simp only [‚Üê closure_subset_iff_isClosed, specializes_iff_mem_closure, subset_def,
      mem_singleton_iff, eq_comm]
  tfae_finish
#align t1_space_tfae t1Space_TFAE

/- warning: t1_space_iff_continuous_cofinite_of -> t1Space_iff_continuous_cofinite_of is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_2 : TopologicalSpace.{u1} Œ±], Iff (T1Space.{u1} Œ± _inst_2) (Continuous.{u1, u1} Œ± (CofiniteTopology.{u1} Œ±) _inst_2 (CofiniteTopology.topologicalSpace.{u1} Œ±) (coeFn.{succ u1, succ u1} (Equiv.{succ u1, succ u1} Œ± (CofiniteTopology.{u1} Œ±)) (fun (_x : Equiv.{succ u1, succ u1} Œ± (CofiniteTopology.{u1} Œ±)) => Œ± -> (CofiniteTopology.{u1} Œ±)) (Equiv.hasCoeToFun.{succ u1, succ u1} Œ± (CofiniteTopology.{u1} Œ±)) (CofiniteTopology.of.{u1} Œ±)))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_2 : TopologicalSpace.{u1} Œ±], Iff (T1Space.{u1} Œ± _inst_2) (Continuous.{u1, u1} Œ± (CofiniteTopology.{u1} Œ±) _inst_2 (CofiniteTopology.instTopologicalSpaceCofiniteTopology.{u1} Œ±) (FunLike.coe.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} Œ± (CofiniteTopology.{u1} Œ±)) Œ± (fun (_x : Œ±) => (fun (x._@.Mathlib.Logic.Equiv.Defs._hyg.808 : Œ±) => CofiniteTopology.{u1} Œ±) _x) (Equiv.instFunLikeEquiv.{succ u1, succ u1} Œ± (CofiniteTopology.{u1} Œ±)) (CofiniteTopology.of.{u1} Œ±)))
Case conversion may be inaccurate. Consider using '#align t1_space_iff_continuous_cofinite_of t1Space_iff_continuous_cofinite_of‚Çì'. -/
theorem t1Space_iff_continuous_cofinite_of {Œ± : Type _} [TopologicalSpace Œ±] :
    T1Space Œ± ‚Üî Continuous (@CofiniteTopology.of Œ±) :=
  (t1Space_TFAE Œ±).out 0 3
#align t1_space_iff_continuous_cofinite_of t1Space_iff_continuous_cofinite_of

/- warning: cofinite_topology.continuous_of -> CofiniteTopology.continuous_of is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1], Continuous.{u1, u1} Œ± (CofiniteTopology.{u1} Œ±) _inst_1 (CofiniteTopology.topologicalSpace.{u1} Œ±) (coeFn.{succ u1, succ u1} (Equiv.{succ u1, succ u1} Œ± (CofiniteTopology.{u1} Œ±)) (fun (_x : Equiv.{succ u1, succ u1} Œ± (CofiniteTopology.{u1} Œ±)) => Œ± -> (CofiniteTopology.{u1} Œ±)) (Equiv.hasCoeToFun.{succ u1, succ u1} Œ± (CofiniteTopology.{u1} Œ±)) (CofiniteTopology.of.{u1} Œ±))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1], Continuous.{u1, u1} Œ± (CofiniteTopology.{u1} Œ±) _inst_1 (CofiniteTopology.instTopologicalSpaceCofiniteTopology.{u1} Œ±) (FunLike.coe.{succ u1, succ u1, succ u1} (Equiv.{succ u1, succ u1} Œ± (CofiniteTopology.{u1} Œ±)) Œ± (fun (_x : Œ±) => (fun (x._@.Mathlib.Logic.Equiv.Defs._hyg.808 : Œ±) => CofiniteTopology.{u1} Œ±) _x) (Equiv.instFunLikeEquiv.{succ u1, succ u1} Œ± (CofiniteTopology.{u1} Œ±)) (CofiniteTopology.of.{u1} Œ±))
Case conversion may be inaccurate. Consider using '#align cofinite_topology.continuous_of CofiniteTopology.continuous_of‚Çì'. -/
theorem CofiniteTopology.continuous_of [T1Space Œ±] : Continuous (@CofiniteTopology.of Œ±) :=
  t1Space_iff_continuous_cofinite_of.mp ‚Äπ_‚Ä∫
#align cofinite_topology.continuous_of CofiniteTopology.continuous_of

/- warning: t1_space_iff_exists_open -> t1Space_iff_exists_open is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±], Iff (T1Space.{u1} Œ± _inst_1) (forall (x : Œ±) (y : Œ±), (Ne.{succ u1} Œ± x y) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (U : Set.{u1} Œ±) => Exists.{0} (IsOpen.{u1} Œ± _inst_1 U) (fun (hU : IsOpen.{u1} Œ± _inst_1 U) => And (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x U) (Not (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) y U))))))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±], Iff (T1Space.{u1} Œ± _inst_1) (forall (x : Œ±) (y : Œ±), (Ne.{succ u1} Œ± x y) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (U : Set.{u1} Œ±) => And (IsOpen.{u1} Œ± _inst_1 U) (And (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x U) (Not (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) y U))))))
Case conversion may be inaccurate. Consider using '#align t1_space_iff_exists_open t1Space_iff_exists_open‚Çì'. -/
theorem t1Space_iff_exists_open :
    T1Space Œ± ‚Üî ‚àÄ x y, x ‚â† y ‚Üí ‚àÉ (U : Set Œ±)(hU : IsOpen U), x ‚àà U ‚àß y ‚àâ U :=
  (t1Space_TFAE Œ±).out 0 6
#align t1_space_iff_exists_open t1Space_iff_exists_open

/- warning: t1_space_iff_disjoint_pure_nhds -> t1Space_iff_disjoint_pure_nhds is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±], Iff (T1Space.{u1} Œ± _inst_1) (forall {{x : Œ±}} {{y : Œ±}}, (Ne.{succ u1} Œ± x y) -> (Disjoint.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.completeLattice.{u1} Œ±))) (Pure.pure.{u1, u1} Filter.{u1} Filter.hasPure.{u1} Œ± x) (nhds.{u1} Œ± _inst_1 y)))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±], Iff (T1Space.{u1} Œ± _inst_1) (forall {{x : Œ±}} {{y : Œ±}}, (Ne.{succ u1} Œ± x y) -> (Disjoint.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.instCompleteLatticeFilter.{u1} Œ±))) (Pure.pure.{u1, u1} Filter.{u1} Filter.instPureFilter.{u1} Œ± x) (nhds.{u1} Œ± _inst_1 y)))
Case conversion may be inaccurate. Consider using '#align t1_space_iff_disjoint_pure_nhds t1Space_iff_disjoint_pure_nhds‚Çì'. -/
theorem t1Space_iff_disjoint_pure_nhds : T1Space Œ± ‚Üî ‚àÄ ‚¶Éx y : Œ±‚¶Ñ, x ‚â† y ‚Üí Disjoint (pure x) (ùìù y) :=
  (t1Space_TFAE Œ±).out 0 8
#align t1_space_iff_disjoint_pure_nhds t1Space_iff_disjoint_pure_nhds

/- warning: t1_space_iff_disjoint_nhds_pure -> t1Space_iff_disjoint_nhds_pure is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±], Iff (T1Space.{u1} Œ± _inst_1) (forall {{x : Œ±}} {{y : Œ±}}, (Ne.{succ u1} Œ± x y) -> (Disjoint.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.completeLattice.{u1} Œ±))) (nhds.{u1} Œ± _inst_1 x) (Pure.pure.{u1, u1} Filter.{u1} Filter.hasPure.{u1} Œ± y)))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±], Iff (T1Space.{u1} Œ± _inst_1) (forall {{x : Œ±}} {{y : Œ±}}, (Ne.{succ u1} Œ± x y) -> (Disjoint.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.instCompleteLatticeFilter.{u1} Œ±))) (nhds.{u1} Œ± _inst_1 x) (Pure.pure.{u1, u1} Filter.{u1} Filter.instPureFilter.{u1} Œ± y)))
Case conversion may be inaccurate. Consider using '#align t1_space_iff_disjoint_nhds_pure t1Space_iff_disjoint_nhds_pure‚Çì'. -/
theorem t1Space_iff_disjoint_nhds_pure : T1Space Œ± ‚Üî ‚àÄ ‚¶Éx y : Œ±‚¶Ñ, x ‚â† y ‚Üí Disjoint (ùìù x) (pure y) :=
  (t1Space_TFAE Œ±).out 0 7
#align t1_space_iff_disjoint_nhds_pure t1Space_iff_disjoint_nhds_pure

#print t1Space_iff_specializes_imp_eq /-
theorem t1Space_iff_specializes_imp_eq : T1Space Œ± ‚Üî ‚àÄ ‚¶Éx y : Œ±‚¶Ñ, x ‚§≥ y ‚Üí x = y :=
  (t1Space_TFAE Œ±).out 0 9
#align t1_space_iff_specializes_imp_eq t1Space_iff_specializes_imp_eq
-/

/- warning: disjoint_pure_nhds -> disjoint_pure_nhds is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, (Ne.{succ u1} Œ± x y) -> (Disjoint.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.completeLattice.{u1} Œ±))) (Pure.pure.{u1, u1} Filter.{u1} Filter.hasPure.{u1} Œ± x) (nhds.{u1} Œ± _inst_1 y))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, (Ne.{succ u1} Œ± x y) -> (Disjoint.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.instCompleteLatticeFilter.{u1} Œ±))) (Pure.pure.{u1, u1} Filter.{u1} Filter.instPureFilter.{u1} Œ± x) (nhds.{u1} Œ± _inst_1 y))
Case conversion may be inaccurate. Consider using '#align disjoint_pure_nhds disjoint_pure_nhds‚Çì'. -/
theorem disjoint_pure_nhds [T1Space Œ±] {x y : Œ±} (h : x ‚â† y) : Disjoint (pure x) (ùìù y) :=
  t1Space_iff_disjoint_pure_nhds.mp ‚Äπ_‚Ä∫ h
#align disjoint_pure_nhds disjoint_pure_nhds

/- warning: disjoint_nhds_pure -> disjoint_nhds_pure is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, (Ne.{succ u1} Œ± x y) -> (Disjoint.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.completeLattice.{u1} Œ±))) (nhds.{u1} Œ± _inst_1 x) (Pure.pure.{u1, u1} Filter.{u1} Filter.hasPure.{u1} Œ± y))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, (Ne.{succ u1} Œ± x y) -> (Disjoint.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.instCompleteLatticeFilter.{u1} Œ±))) (nhds.{u1} Œ± _inst_1 x) (Pure.pure.{u1, u1} Filter.{u1} Filter.instPureFilter.{u1} Œ± y))
Case conversion may be inaccurate. Consider using '#align disjoint_nhds_pure disjoint_nhds_pure‚Çì'. -/
theorem disjoint_nhds_pure [T1Space Œ±] {x y : Œ±} (h : x ‚â† y) : Disjoint (ùìù x) (pure y) :=
  t1Space_iff_disjoint_nhds_pure.mp ‚Äπ_‚Ä∫ h
#align disjoint_nhds_pure disjoint_nhds_pure

#print Specializes.eq /-
theorem Specializes.eq [T1Space Œ±] {x y : Œ±} (h : x ‚§≥ y) : x = y :=
  t1Space_iff_specializes_imp_eq.1 ‚Äπ_‚Ä∫ h
#align specializes.eq Specializes.eq
-/

#print specializes_iff_eq /-
theorem specializes_iff_eq [T1Space Œ±] {x y : Œ±} : x ‚§≥ y ‚Üî x = y :=
  ‚ü®Specializes.eq, fun h => h ‚ñ∏ specializes_rfl‚ü©
#align specializes_iff_eq specializes_iff_eq
-/

#print specializes_eq_eq /-
@[simp]
theorem specializes_eq_eq [T1Space Œ±] : (¬∑ ‚§≥ ¬∑) = @Eq Œ± :=
  funext‚ÇÇ fun x y => propext specializes_iff_eq
#align specializes_eq_eq specializes_eq_eq
-/

/- warning: pure_le_nhds_iff -> pure_le_nhds_iff is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {a : Œ±} {b : Œ±}, Iff (LE.le.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±))) (Pure.pure.{u1, u1} Filter.{u1} Filter.hasPure.{u1} Œ± a) (nhds.{u1} Œ± _inst_1 b)) (Eq.{succ u1} Œ± a b)
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {a : Œ±} {b : Œ±}, Iff (LE.le.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±))) (Pure.pure.{u1, u1} Filter.{u1} Filter.instPureFilter.{u1} Œ± a) (nhds.{u1} Œ± _inst_1 b)) (Eq.{succ u1} Œ± a b)
Case conversion may be inaccurate. Consider using '#align pure_le_nhds_iff pure_le_nhds_iff‚Çì'. -/
@[simp]
theorem pure_le_nhds_iff [T1Space Œ±] {a b : Œ±} : pure a ‚â§ ùìù b ‚Üî a = b :=
  specializes_iff_pure.symm.trans specializes_iff_eq
#align pure_le_nhds_iff pure_le_nhds_iff

/- warning: nhds_le_nhds_iff -> nhds_le_nhds_iff is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {a : Œ±} {b : Œ±}, Iff (LE.le.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±))) (nhds.{u1} Œ± _inst_1 a) (nhds.{u1} Œ± _inst_1 b)) (Eq.{succ u1} Œ± a b)
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {a : Œ±} {b : Œ±}, Iff (LE.le.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±))) (nhds.{u1} Œ± _inst_1 a) (nhds.{u1} Œ± _inst_1 b)) (Eq.{succ u1} Œ± a b)
Case conversion may be inaccurate. Consider using '#align nhds_le_nhds_iff nhds_le_nhds_iff‚Çì'. -/
@[simp]
theorem nhds_le_nhds_iff [T1Space Œ±] {a b : Œ±} : ùìù a ‚â§ ùìù b ‚Üî a = b :=
  specializes_iff_eq
#align nhds_le_nhds_iff nhds_le_nhds_iff

instance {Œ± : Type _} : T1Space (CofiniteTopology Œ±) :=
  t1Space_iff_continuous_cofinite_of.mpr continuous_id

/- warning: t1_space_antitone -> t1Space_antitone is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}}, Antitone.{u1, 0} (TopologicalSpace.{u1} Œ±) Prop (PartialOrder.toPreorder.{u1} (TopologicalSpace.{u1} Œ±) (TopologicalSpace.partialOrder.{u1} Œ±)) (PartialOrder.toPreorder.{0} Prop Prop.partialOrder) (T1Space.{u1} Œ±)
but is expected to have type
  forall {Œ± : Type.{u1}}, Antitone.{u1, 0} (TopologicalSpace.{u1} Œ±) Prop (PartialOrder.toPreorder.{u1} (TopologicalSpace.{u1} Œ±) (TopologicalSpace.instPartialOrderTopologicalSpace.{u1} Œ±)) (PartialOrder.toPreorder.{0} Prop Prop.partialOrder) (T1Space.{u1} Œ±)
Case conversion may be inaccurate. Consider using '#align t1_space_antitone t1Space_antitone‚Çì'. -/
theorem t1Space_antitone {Œ± : Type _} : Antitone (@T1Space Œ±) :=
  by
  simp only [Antitone, t1Space_iff_continuous_cofinite_of, continuous_iff_le_induced]
  exact fun t‚ÇÅ t‚ÇÇ h => h.trans
#align t1_space_antitone t1Space_antitone

#print continuousWithinAt_update_of_ne /-
theorem continuousWithinAt_update_of_ne [T1Space Œ±] [DecidableEq Œ±] [TopologicalSpace Œ≤] {f : Œ± ‚Üí Œ≤}
    {s : Set Œ±} {x y : Œ±} {z : Œ≤} (hne : y ‚â† x) :
    ContinuousWithinAt (Function.update f x z) s y ‚Üî ContinuousWithinAt f s y :=
  EventuallyEq.congr_continuousWithinAt
    (mem_nhdsWithin_of_mem_nhds <|
      mem_of_superset (isOpen_ne.mem_nhds hne) fun y' hy' => Function.update_noteq hy' _ _)
    (Function.update_noteq hne _ _)
#align continuous_within_at_update_of_ne continuousWithinAt_update_of_ne
-/

#print continuousAt_update_of_ne /-
theorem continuousAt_update_of_ne [T1Space Œ±] [DecidableEq Œ±] [TopologicalSpace Œ≤] {f : Œ± ‚Üí Œ≤}
    {x y : Œ±} {z : Œ≤} (hne : y ‚â† x) : ContinuousAt (Function.update f x z) y ‚Üî ContinuousAt f y :=
  by simp only [‚Üê continuousWithinAt_univ, continuousWithinAt_update_of_ne hne]
#align continuous_at_update_of_ne continuousAt_update_of_ne
-/

/- warning: continuous_on_update_iff -> continuousOn_update_iff is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] [_inst_3 : DecidableEq.{succ u1} Œ±] [_inst_4 : TopologicalSpace.{u2} Œ≤] {f : Œ± -> Œ≤} {s : Set.{u1} Œ±} {x : Œ±} {y : Œ≤}, Iff (ContinuousOn.{u1, u2} Œ± Œ≤ _inst_1 _inst_4 (Function.update.{succ u1, succ u2} Œ± (fun (·æ∞ : Œ±) => Œ≤) (fun (a : Œ±) (b : Œ±) => _inst_3 a b) f x y) s) (And (ContinuousOn.{u1, u2} Œ± Œ≤ _inst_1 _inst_4 f (SDiff.sdiff.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasSdiff.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±)) s (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasSingleton.{u1} Œ±) x))) ((Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x s) -> (Filter.Tendsto.{u1, u2} Œ± Œ≤ f (nhdsWithin.{u1} Œ± _inst_1 x (SDiff.sdiff.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasSdiff.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±)) s (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasSingleton.{u1} Œ±) x))) (nhds.{u2} Œ≤ _inst_4 y))))
but is expected to have type
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] [_inst_3 : DecidableEq.{succ u1} Œ±] [_inst_4 : TopologicalSpace.{u2} Œ≤] {f : Œ± -> Œ≤} {s : Set.{u1} Œ±} {x : Œ±} {y : Œ≤}, Iff (ContinuousOn.{u1, u2} Œ± Œ≤ _inst_1 _inst_4 (Function.update.{succ u1, succ u2} Œ± (fun (·æ∞ : Œ±) => Œ≤) (fun (a : Œ±) (b : Œ±) => _inst_3 a b) f x y) s) (And (ContinuousOn.{u1, u2} Œ± Œ≤ _inst_1 _inst_4 f (SDiff.sdiff.{u1} (Set.{u1} Œ±) (Set.instSDiffSet.{u1} Œ±) s (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instSingletonSet.{u1} Œ±) x))) ((Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x s) -> (Filter.Tendsto.{u1, u2} Œ± Œ≤ f (nhdsWithin.{u1} Œ± _inst_1 x (SDiff.sdiff.{u1} (Set.{u1} Œ±) (Set.instSDiffSet.{u1} Œ±) s (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instSingletonSet.{u1} Œ±) x))) (nhds.{u2} Œ≤ _inst_4 y))))
Case conversion may be inaccurate. Consider using '#align continuous_on_update_iff continuousOn_update_iff‚Çì'. -/
theorem continuousOn_update_iff [T1Space Œ±] [DecidableEq Œ±] [TopologicalSpace Œ≤] {f : Œ± ‚Üí Œ≤}
    {s : Set Œ±} {x : Œ±} {y : Œ≤} :
    ContinuousOn (Function.update f x y) s ‚Üî
      ContinuousOn f (s \ {x}) ‚àß (x ‚àà s ‚Üí Tendsto f (ùìù[s \ {x}] x) (ùìù y)) :=
  by
  rw [ContinuousOn, ‚Üê and_forall_ne x, and_comm']
  refine' and_congr ‚ü®fun H z hz => _, fun H z hzx hzs => _‚ü© (forall_congr' fun hxs => _)
  ¬∑ specialize H z hz.2 hz.1
    rw [continuousWithinAt_update_of_ne hz.2] at H
    exact H.mono (diff_subset _ _)
  ¬∑ rw [continuousWithinAt_update_of_ne hzx]
    refine' (H z ‚ü®hzs, hzx‚ü©).mono_of_mem (inter_mem_nhdsWithin _ _)
    exact is_open_ne.mem_nhds hzx
  ¬∑ exact continuousWithinAt_update_same
#align continuous_on_update_iff continuousOn_update_iff

#print t1Space_of_injective_of_continuous /-
theorem t1Space_of_injective_of_continuous [TopologicalSpace Œ≤] {f : Œ± ‚Üí Œ≤}
    (hf : Function.Injective f) (hf' : Continuous f) [T1Space Œ≤] : T1Space Œ± :=
  t1Space_iff_specializes_imp_eq.2 fun x y h => hf (h.map hf').Eq
#align t1_space_of_injective_of_continuous t1Space_of_injective_of_continuous
-/

#print Embedding.t1Space /-
protected theorem Embedding.t1Space [TopologicalSpace Œ≤] [T1Space Œ≤] {f : Œ± ‚Üí Œ≤}
    (hf : Embedding f) : T1Space Œ± :=
  t1Space_of_injective_of_continuous hf.inj hf.Continuous
#align embedding.t1_space Embedding.t1Space
-/

#print Subtype.t1Space /-
instance Subtype.t1Space {Œ± : Type u} [TopologicalSpace Œ±] [T1Space Œ±] {p : Œ± ‚Üí Prop} :
    T1Space (Subtype p) :=
  embedding_subtype_val.T1Space
#align subtype.t1_space Subtype.t1Space
-/

instance [TopologicalSpace Œ≤] [T1Space Œ±] [T1Space Œ≤] : T1Space (Œ± √ó Œ≤) :=
  ‚ü®fun ‚ü®a, b‚ü© => @singleton_prod_singleton _ _ a b ‚ñ∏ isClosed_singleton.Prod isClosed_singleton‚ü©

instance {Œπ : Type _} {œÄ : Œπ ‚Üí Type _} [‚àÄ i, TopologicalSpace (œÄ i)] [‚àÄ i, T1Space (œÄ i)] :
    T1Space (‚àÄ i, œÄ i) :=
  ‚ü®fun f => univ_pi_singleton f ‚ñ∏ isClosed_set_pi fun i hi => isClosed_singleton‚ü©

#print T1Space.t0Space /-
-- see Note [lower instance priority]
instance (priority := 100) T1Space.t0Space [T1Space Œ±] : T0Space Œ± :=
  ‚ü®fun x y h => h.Specializes.Eq‚ü©
#align t1_space.t0_space T1Space.t0Space
-/

/- warning: compl_singleton_mem_nhds_iff -> compl_singleton_mem_nhds_iff is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, Iff (Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) (HasCompl.compl.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±)) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasSingleton.{u1} Œ±) x)) (nhds.{u1} Œ± _inst_1 y)) (Ne.{succ u1} Œ± y x)
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, Iff (Membership.mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (instMembershipSetFilter.{u1} Œ±) (HasCompl.compl.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} Œ±) (Set.instBooleanAlgebraSet.{u1} Œ±)) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instSingletonSet.{u1} Œ±) x)) (nhds.{u1} Œ± _inst_1 y)) (Ne.{succ u1} Œ± y x)
Case conversion may be inaccurate. Consider using '#align compl_singleton_mem_nhds_iff compl_singleton_mem_nhds_iff‚Çì'. -/
@[simp]
theorem compl_singleton_mem_nhds_iff [T1Space Œ±] {x y : Œ±} : {x}·∂ú ‚àà ùìù y ‚Üî y ‚â† x :=
  isOpen_compl_singleton.mem_nhds_iff‚Çì
#align compl_singleton_mem_nhds_iff compl_singleton_mem_nhds_iff

/- warning: compl_singleton_mem_nhds -> compl_singleton_mem_nhds is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, (Ne.{succ u1} Œ± y x) -> (Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) (HasCompl.compl.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±)) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasSingleton.{u1} Œ±) x)) (nhds.{u1} Œ± _inst_1 y))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, (Ne.{succ u1} Œ± y x) -> (Membership.mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (instMembershipSetFilter.{u1} Œ±) (HasCompl.compl.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} Œ±) (Set.instBooleanAlgebraSet.{u1} Œ±)) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instSingletonSet.{u1} Œ±) x)) (nhds.{u1} Œ± _inst_1 y))
Case conversion may be inaccurate. Consider using '#align compl_singleton_mem_nhds compl_singleton_mem_nhds‚Çì'. -/
theorem compl_singleton_mem_nhds [T1Space Œ±] {x y : Œ±} (h : y ‚â† x) : {x}·∂ú ‚àà ùìù y :=
  compl_singleton_mem_nhds_iff.mpr h
#align compl_singleton_mem_nhds compl_singleton_mem_nhds

#print closure_singleton /-
@[simp]
theorem closure_singleton [T1Space Œ±] {a : Œ±} : closure ({a} : Set Œ±) = {a} :=
  isClosed_singleton.closure_eq
#align closure_singleton closure_singleton
-/

#print Set.Subsingleton.closure /-
theorem Set.Subsingleton.closure [T1Space Œ±] {s : Set Œ±} (hs : s.Subsingleton) :
    (closure s).Subsingleton :=
  hs.inductionOn (by simp) fun x => by simp
#align set.subsingleton.closure Set.Subsingleton.closure
-/

#print subsingleton_closure /-
@[simp]
theorem subsingleton_closure [T1Space Œ±] {s : Set Œ±} : (closure s).Subsingleton ‚Üî s.Subsingleton :=
  ‚ü®fun h => h.anti subset_closure, fun h => h.closure‚ü©
#align subsingleton_closure subsingleton_closure
-/

/- warning: is_closed_map_const -> isClosedMap_const is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_2 : TopologicalSpace.{u1} Œ±] [_inst_3 : TopologicalSpace.{u2} Œ≤] [_inst_4 : T1Space.{u2} Œ≤ _inst_3] {y : Œ≤}, IsClosedMap.{u1, u2} Œ± Œ≤ _inst_2 _inst_3 (Function.const.{succ u2, succ u1} Œ≤ Œ± y)
but is expected to have type
  forall {Œ± : Type.{u2}} {Œ≤ : Type.{u1}} [_inst_2 : TopologicalSpace.{u2} Œ±] [_inst_3 : TopologicalSpace.{u1} Œ≤] [_inst_4 : T1Space.{u1} Œ≤ _inst_3] {y : Œ≤}, IsClosedMap.{u2, u1} Œ± Œ≤ _inst_2 _inst_3 (Function.const.{succ u1, succ u2} Œ≤ Œ± y)
Case conversion may be inaccurate. Consider using '#align is_closed_map_const isClosedMap_const‚Çì'. -/
theorem isClosedMap_const {Œ± Œ≤} [TopologicalSpace Œ±] [TopologicalSpace Œ≤] [T1Space Œ≤] {y : Œ≤} :
    IsClosedMap (Function.const Œ± y) :=
  IsClosedMap.of_nonempty fun s hs h2s => by simp_rw [h2s.image_const, isClosed_singleton]
#align is_closed_map_const isClosedMap_const

#print nhdsWithin_insert_of_ne /-
theorem nhdsWithin_insert_of_ne [T1Space Œ±] {x y : Œ±} {s : Set Œ±} (hxy : x ‚â† y) :
    ùìù[insert y s] x = ùìù[s] x :=
  by
  refine' le_antisymm (fun t ht => _) (nhdsWithin_mono x <| subset_insert y s)
  obtain ‚ü®o, ho, hxo, host‚ü© := mem_nhds_within.mp ht
  refine' mem_nhds_within.mpr ‚ü®o \ {y}, ho.sdiff isClosed_singleton, ‚ü®hxo, hxy‚ü©, _‚ü©
  rw [inter_insert_of_not_mem <| not_mem_diff_of_mem (mem_singleton y)]
  exact (inter_subset_inter (diff_subset _ _) subset.rfl).trans host
#align nhds_within_insert_of_ne nhdsWithin_insert_of_ne
-/

#print insert_mem_nhdsWithin_of_subset_insert /-
/-- If `t` is a subset of `s`, except for one point,
then `insert x s` is a neighborhood of `x` within `t`. -/
theorem insert_mem_nhdsWithin_of_subset_insert [T1Space Œ±] {x y : Œ±} {s t : Set Œ±}
    (hu : t ‚äÜ insert y s) : insert x s ‚àà ùìù[t] x :=
  by
  rcases eq_or_ne x y with (rfl | h)
  ¬∑ exact mem_of_superset self_mem_nhdsWithin hu
  refine' nhdsWithin_mono x hu _
  rw [nhdsWithin_insert_of_ne h]
  exact mem_of_superset self_mem_nhdsWithin (subset_insert x s)
#align insert_mem_nhds_within_of_subset_insert insert_mem_nhdsWithin_of_subset_insert
-/

/- warning: bInter_basis_nhds -> binter·µ¢_basis_nhds is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {Œπ : Sort.{u2}} {p : Œπ -> Prop} {s : Œπ -> (Set.{u1} Œ±)} {x : Œ±}, (Filter.HasBasis.{u1, u2} Œ± Œπ (nhds.{u1} Œ± _inst_1 x) p s) -> (Eq.{succ u1} (Set.{u1} Œ±) (Set.inter·µ¢.{u1, u2} Œ± Œπ (fun (i : Œπ) => Set.inter·µ¢.{u1, 0} Œ± (p i) (fun (h : p i) => s i))) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasSingleton.{u1} Œ±) x))
but is expected to have type
  forall {Œ± : Type.{u2}} [_inst_1 : TopologicalSpace.{u2} Œ±] [_inst_2 : T1Space.{u2} Œ± _inst_1] {Œπ : Sort.{u1}} {p : Œπ -> Prop} {s : Œπ -> (Set.{u2} Œ±)} {x : Œ±}, (Filter.HasBasis.{u2, u1} Œ± Œπ (nhds.{u2} Œ± _inst_1 x) p s) -> (Eq.{succ u2} (Set.{u2} Œ±) (Set.inter·µ¢.{u2, u1} Œ± Œπ (fun (i : Œπ) => Set.inter·µ¢.{u2, 0} Œ± (p i) (fun (h : p i) => s i))) (Singleton.singleton.{u2, u2} Œ± (Set.{u2} Œ±) (Set.instSingletonSet.{u2} Œ±) x))
Case conversion may be inaccurate. Consider using '#align bInter_basis_nhds binter·µ¢_basis_nhds‚Çì'. -/
theorem binter·µ¢_basis_nhds [T1Space Œ±] {Œπ : Sort _} {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí Set Œ±} {x : Œ±}
    (h : (ùìù x).HasBasis p s) : (‚ãÇ (i) (h : p i), s i) = {x} :=
  by
  simp only [eq_singleton_iff_unique_mem, mem_Inter]
  refine' ‚ü®fun i hi => mem_of_mem_nhds <| h.mem_of_mem hi, fun y hy => _‚ü©
  contrapose! hy
  rcases h.mem_iff.1 (compl_singleton_mem_nhds hy.symm) with ‚ü®i, hi, hsub‚ü©
  exact ‚ü®i, hi, fun h => hsub h rfl‚ü©
#align bInter_basis_nhds binter·µ¢_basis_nhds

/- warning: compl_singleton_mem_nhds_set_iff -> compl_singleton_mem_nhdsSet_iff is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {x : Œ±} {s : Set.{u1} Œ±}, Iff (Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) (HasCompl.compl.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±)) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasSingleton.{u1} Œ±) x)) (nhdsSet.{u1} Œ± _inst_1 s)) (Not (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x s))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {x : Œ±} {s : Set.{u1} Œ±}, Iff (Membership.mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (instMembershipSetFilter.{u1} Œ±) (HasCompl.compl.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} Œ±) (Set.instBooleanAlgebraSet.{u1} Œ±)) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instSingletonSet.{u1} Œ±) x)) (nhdsSet.{u1} Œ± _inst_1 s)) (Not (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x s))
Case conversion may be inaccurate. Consider using '#align compl_singleton_mem_nhds_set_iff compl_singleton_mem_nhdsSet_iff‚Çì'. -/
@[simp]
theorem compl_singleton_mem_nhdsSet_iff [T1Space Œ±] {x : Œ±} {s : Set Œ±} : {x}·∂ú ‚àà ùìùÀ¢ s ‚Üî x ‚àâ s := by
  rwa [is_open_compl_singleton.mem_nhds_set, subset_compl_singleton_iff]
#align compl_singleton_mem_nhds_set_iff compl_singleton_mem_nhdsSet_iff

/- warning: nhds_set_le_iff -> nhdsSet_le_iff is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {s : Set.{u1} Œ±} {t : Set.{u1} Œ±}, Iff (LE.le.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±))) (nhdsSet.{u1} Œ± _inst_1 s) (nhdsSet.{u1} Œ± _inst_1 t)) (HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.hasSubset.{u1} Œ±) s t)
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {s : Set.{u1} Œ±} {t : Set.{u1} Œ±}, Iff (LE.le.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±))) (nhdsSet.{u1} Œ± _inst_1 s) (nhdsSet.{u1} Œ± _inst_1 t)) (HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.instHasSubsetSet.{u1} Œ±) s t)
Case conversion may be inaccurate. Consider using '#align nhds_set_le_iff nhdsSet_le_iff‚Çì'. -/
@[simp]
theorem nhdsSet_le_iff [T1Space Œ±] {s t : Set Œ±} : ùìùÀ¢ s ‚â§ ùìùÀ¢ t ‚Üî s ‚äÜ t :=
  by
  refine' ‚ü®_, fun h => monotone_nhdsSet h‚ü©
  simp_rw [Filter.le_def]; intro h x hx
  specialize h ({x}·∂ú)
  simp_rw [compl_singleton_mem_nhdsSet_iff] at h
  by_contra hxt
  exact h hxt hx
#align nhds_set_le_iff nhdsSet_le_iff

#print nhdsSet_inj_iff /-
@[simp]
theorem nhdsSet_inj_iff [T1Space Œ±] {s t : Set Œ±} : ùìùÀ¢ s = ùìùÀ¢ t ‚Üî s = t :=
  by
  simp_rw [le_antisymm_iff]
  exact and_congr nhdsSet_le_iff nhdsSet_le_iff
#align nhds_set_inj_iff nhdsSet_inj_iff
-/

#print injective_nhdsSet /-
theorem injective_nhdsSet [T1Space Œ±] : Function.Injective (ùìùÀ¢ : Set Œ± ‚Üí Filter Œ±) := fun s t hst =>
  nhdsSet_inj_iff.mp hst
#align injective_nhds_set injective_nhdsSet
-/

/- warning: strict_mono_nhds_set -> strictMono_nhdsSet is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1], StrictMono.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.completeBooleanAlgebra.{u1} Œ±))))))) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±)) (nhdsSet.{u1} Œ± _inst_1)
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1], StrictMono.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±))))))) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±)) (nhdsSet.{u1} Œ± _inst_1)
Case conversion may be inaccurate. Consider using '#align strict_mono_nhds_set strictMono_nhdsSet‚Çì'. -/
theorem strictMono_nhdsSet [T1Space Œ±] : StrictMono (ùìùÀ¢ : Set Œ± ‚Üí Filter Œ±) :=
  monotone_nhdsSet.strictMono_of_injective injective_nhdsSet
#align strict_mono_nhds_set strictMono_nhdsSet

/- warning: nhds_le_nhds_set_iff -> nhds_le_nhdsSet_iff is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {s : Set.{u1} Œ±} {x : Œ±}, Iff (LE.le.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±))) (nhds.{u1} Œ± _inst_1 x) (nhdsSet.{u1} Œ± _inst_1 s)) (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x s)
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {s : Set.{u1} Œ±} {x : Œ±}, Iff (LE.le.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±))) (nhds.{u1} Œ± _inst_1 x) (nhdsSet.{u1} Œ± _inst_1 s)) (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x s)
Case conversion may be inaccurate. Consider using '#align nhds_le_nhds_set_iff nhds_le_nhdsSet_iff‚Çì'. -/
@[simp]
theorem nhds_le_nhdsSet_iff [T1Space Œ±] {s : Set Œ±} {x : Œ±} : ùìù x ‚â§ ùìùÀ¢ s ‚Üî x ‚àà s := by
  rw [‚Üê nhdsSet_singleton, nhdsSet_le_iff, singleton_subset_iff]
#align nhds_le_nhds_set_iff nhds_le_nhdsSet_iff

/- warning: dense.diff_singleton -> Dense.diff_singleton is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {s : Set.{u1} Œ±}, (Dense.{u1} Œ± _inst_1 s) -> (forall (x : Œ±) [_inst_3 : Filter.NeBot.{u1} Œ± (nhdsWithin.{u1} Œ± _inst_1 x (HasCompl.compl.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±)) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasSingleton.{u1} Œ±) x)))], Dense.{u1} Œ± _inst_1 (SDiff.sdiff.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasSdiff.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±)) s (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasSingleton.{u1} Œ±) x)))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] {s : Set.{u1} Œ±}, (Dense.{u1} Œ± _inst_1 s) -> (forall (x : Œ±) [_inst_3 : Filter.NeBot.{u1} Œ± (nhdsWithin.{u1} Œ± _inst_1 x (HasCompl.compl.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} Œ±) (Set.instBooleanAlgebraSet.{u1} Œ±)) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instSingletonSet.{u1} Œ±) x)))], Dense.{u1} Œ± _inst_1 (SDiff.sdiff.{u1} (Set.{u1} Œ±) (Set.instSDiffSet.{u1} Œ±) s (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instSingletonSet.{u1} Œ±) x)))
Case conversion may be inaccurate. Consider using '#align dense.diff_singleton Dense.diff_singleton‚Çì'. -/
/-- Removing a non-isolated point from a dense set, one still obtains a dense set. -/
theorem Dense.diff_singleton [T1Space Œ±] {s : Set Œ±} (hs : Dense s) (x : Œ±) [NeBot (ùìù[‚â†] x)] :
    Dense (s \ {x}) :=
  hs.inter_of_open_right (dense_compl_singleton x) isOpen_compl_singleton
#align dense.diff_singleton Dense.diff_singleton

/- warning: dense.diff_finset -> Dense.diff_finset is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] [_inst_3 : forall (x : Œ±), Filter.NeBot.{u1} Œ± (nhdsWithin.{u1} Œ± _inst_1 x (HasCompl.compl.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±)) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasSingleton.{u1} Œ±) x)))] {s : Set.{u1} Œ±}, (Dense.{u1} Œ± _inst_1 s) -> (forall (t : Finset.{u1} Œ±), Dense.{u1} Œ± _inst_1 (SDiff.sdiff.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasSdiff.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±)) s ((fun (a : Type.{u1}) (b : Type.{u1}) [self : HasLiftT.{succ u1, succ u1} a b] => self.0) (Finset.{u1} Œ±) (Set.{u1} Œ±) (HasLiftT.mk.{succ u1, succ u1} (Finset.{u1} Œ±) (Set.{u1} Œ±) (CoeTC‚Çì.coe.{succ u1, succ u1} (Finset.{u1} Œ±) (Set.{u1} Œ±) (Finset.Set.hasCoeT.{u1} Œ±))) t)))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] [_inst_3 : forall (x : Œ±), Filter.NeBot.{u1} Œ± (nhdsWithin.{u1} Œ± _inst_1 x (HasCompl.compl.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} Œ±) (Set.instBooleanAlgebraSet.{u1} Œ±)) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instSingletonSet.{u1} Œ±) x)))] {s : Set.{u1} Œ±}, (Dense.{u1} Œ± _inst_1 s) -> (forall (t : Finset.{u1} Œ±), Dense.{u1} Œ± _inst_1 (SDiff.sdiff.{u1} (Set.{u1} Œ±) (Set.instSDiffSet.{u1} Œ±) s (Finset.toSet.{u1} Œ± t)))
Case conversion may be inaccurate. Consider using '#align dense.diff_finset Dense.diff_finset‚Çì'. -/
/-- Removing a finset from a dense set in a space without isolated points, one still
obtains a dense set. -/
theorem Dense.diff_finset [T1Space Œ±] [‚àÄ x : Œ±, NeBot (ùìù[‚â†] x)] {s : Set Œ±} (hs : Dense s)
    (t : Finset Œ±) : Dense (s \ t) :=
  by
  induction' t using Finset.induction_on with x s hxs ih hd
  ¬∑ simpa using hs
  ¬∑ rw [Finset.coe_insert, ‚Üê union_singleton, ‚Üê diff_diff]
    exact ih.diff_singleton _
#align dense.diff_finset Dense.diff_finset

/- warning: dense.diff_finite -> Dense.diff_finite is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] [_inst_3 : forall (x : Œ±), Filter.NeBot.{u1} Œ± (nhdsWithin.{u1} Œ± _inst_1 x (HasCompl.compl.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±)) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasSingleton.{u1} Œ±) x)))] {s : Set.{u1} Œ±}, (Dense.{u1} Œ± _inst_1 s) -> (forall {t : Set.{u1} Œ±}, (Set.Finite.{u1} Œ± t) -> (Dense.{u1} Œ± _inst_1 (SDiff.sdiff.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasSdiff.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±)) s t)))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T1Space.{u1} Œ± _inst_1] [_inst_3 : forall (x : Œ±), Filter.NeBot.{u1} Œ± (nhdsWithin.{u1} Œ± _inst_1 x (HasCompl.compl.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} Œ±) (Set.instBooleanAlgebraSet.{u1} Œ±)) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instSingletonSet.{u1} Œ±) x)))] {s : Set.{u1} Œ±}, (Dense.{u1} Œ± _inst_1 s) -> (forall {t : Set.{u1} Œ±}, (Set.Finite.{u1} Œ± t) -> (Dense.{u1} Œ± _inst_1 (SDiff.sdiff.{u1} (Set.{u1} Œ±) (Set.instSDiffSet.{u1} Œ±) s t)))
Case conversion may be inaccurate. Consider using '#align dense.diff_finite Dense.diff_finite‚Çì'. -/
/-- Removing a finite set from a dense set in a space without isolated points, one still
obtains a dense set. -/
theorem Dense.diff_finite [T1Space Œ±] [‚àÄ x : Œ±, NeBot (ùìù[‚â†] x)] {s : Set Œ±} (hs : Dense s)
    {t : Set Œ±} (ht : t.Finite) : Dense (s \ t) :=
  by
  convert hs.diff_finset ht.to_finset
  exact (finite.coe_to_finset _).symm
#align dense.diff_finite Dense.diff_finite

#print eq_of_tendsto_nhds /-
/-- If a function to a `t1_space` tends to some limit `b` at some point `a`, then necessarily
`b = f a`. -/
theorem eq_of_tendsto_nhds [TopologicalSpace Œ≤] [T1Space Œ≤] {f : Œ± ‚Üí Œ≤} {a : Œ±} {b : Œ≤}
    (h : Tendsto f (ùìù a) (ùìù b)) : f a = b :=
  by_contra fun hfa : f a ‚â† b =>
    have fact‚ÇÅ : {f a}·∂ú ‚àà ùìù b := compl_singleton_mem_nhds hfa.symm
    have fact‚ÇÇ : Tendsto f (pure a) (ùìù b) := h.comp (tendsto_id'.2 <| pure_le_nhds a)
    fact‚ÇÇ fact‚ÇÅ (Eq.refl <| f a)
#align eq_of_tendsto_nhds eq_of_tendsto_nhds
-/

/- warning: filter.tendsto.eventually_ne -> Filter.Tendsto.eventually_ne is a dubious translation:
lean 3 declaration is
  forall {Œ≤ : Type.{u1}} [_inst_2 : TopologicalSpace.{u1} Œ≤] [_inst_3 : T1Space.{u1} Œ≤ _inst_2] {Œ± : Type.{u2}} {g : Œ± -> Œ≤} {l : Filter.{u2} Œ±} {b‚ÇÅ : Œ≤} {b‚ÇÇ : Œ≤}, (Filter.Tendsto.{u2, u1} Œ± Œ≤ g l (nhds.{u1} Œ≤ _inst_2 b‚ÇÅ)) -> (Ne.{succ u1} Œ≤ b‚ÇÅ b‚ÇÇ) -> (Filter.Eventually.{u2} Œ± (fun (z : Œ±) => Ne.{succ u1} Œ≤ (g z) b‚ÇÇ) l)
but is expected to have type
  forall {Œ≤ : Type.{u2}} [_inst_2 : TopologicalSpace.{u2} Œ≤] [_inst_3 : T1Space.{u2} Œ≤ _inst_2] {Œ± : Type.{u1}} {g : Œ± -> Œ≤} {l : Filter.{u1} Œ±} {b‚ÇÅ : Œ≤} {b‚ÇÇ : Œ≤}, (Filter.Tendsto.{u1, u2} Œ± Œ≤ g l (nhds.{u2} Œ≤ _inst_2 b‚ÇÅ)) -> (Ne.{succ u2} Œ≤ b‚ÇÅ b‚ÇÇ) -> (Filter.Eventually.{u1} Œ± (fun (z : Œ±) => Ne.{succ u2} Œ≤ (g z) b‚ÇÇ) l)
Case conversion may be inaccurate. Consider using '#align filter.tendsto.eventually_ne Filter.Tendsto.eventually_ne‚Çì'. -/
theorem Filter.Tendsto.eventually_ne [TopologicalSpace Œ≤] [T1Space Œ≤] {Œ± : Type _} {g : Œ± ‚Üí Œ≤}
    {l : Filter Œ±} {b‚ÇÅ b‚ÇÇ : Œ≤} (hg : Tendsto g l (ùìù b‚ÇÅ)) (hb : b‚ÇÅ ‚â† b‚ÇÇ) : ‚àÄ·∂† z in l, g z ‚â† b‚ÇÇ :=
  hg.Eventually (isOpen_compl_singleton.eventually_mem hb)
#align filter.tendsto.eventually_ne Filter.Tendsto.eventually_ne

#print ContinuousAt.eventually_ne /-
theorem ContinuousAt.eventually_ne [TopologicalSpace Œ≤] [T1Space Œ≤] {g : Œ± ‚Üí Œ≤} {a : Œ±} {b : Œ≤}
    (hg1 : ContinuousAt g a) (hg2 : g a ‚â† b) : ‚àÄ·∂† z in ùìù a, g z ‚â† b :=
  hg1.Tendsto.eventually_ne hg2
#align continuous_at.eventually_ne ContinuousAt.eventually_ne
-/

#print continuousAt_of_tendsto_nhds /-
/-- To prove a function to a `t1_space` is continuous at some point `a`, it suffices to prove that
`f` admits *some* limit at `a`. -/
theorem continuousAt_of_tendsto_nhds [TopologicalSpace Œ≤] [T1Space Œ≤] {f : Œ± ‚Üí Œ≤} {a : Œ±} {b : Œ≤}
    (h : Tendsto f (ùìù a) (ùìù b)) : ContinuousAt f a :=
  show Tendsto f (ùìù a) (ùìù <| f a) by rwa [eq_of_tendsto_nhds h]
#align continuous_at_of_tendsto_nhds continuousAt_of_tendsto_nhds
-/

#print tendsto_const_nhds_iff /-
@[simp]
theorem tendsto_const_nhds_iff [T1Space Œ±] {l : Filter Œ≤} [NeBot l] {c d : Œ±} :
    Tendsto (fun x => c) l (ùìù d) ‚Üî c = d := by simp_rw [tendsto, Filter.map_const, pure_le_nhds_iff]
#align tendsto_const_nhds_iff tendsto_const_nhds_iff
-/

#print isOpen_singleton_of_finite_mem_nhds /-
/-- A point with a finite neighborhood has to be isolated. -/
theorem isOpen_singleton_of_finite_mem_nhds {Œ± : Type _} [TopologicalSpace Œ±] [T1Space Œ±] (x : Œ±)
    {s : Set Œ±} (hs : s ‚àà ùìù x) (hsf : s.Finite) : IsOpen ({x} : Set Œ±) :=
  by
  have A : {x} ‚äÜ s := by simp only [singleton_subset_iff, mem_of_mem_nhds hs]
  have B : IsClosed (s \ {x}) := (hsf.subset (diff_subset _ _)).IsClosed
  have C : (s \ {x})·∂ú ‚àà ùìù x := B.is_open_compl.mem_nhds fun h => h.2 rfl
  have D : {x} ‚àà ùìù x := by simpa only [‚Üê diff_eq, diff_diff_cancel_left A] using inter_mem hs C
  rwa [‚Üê mem_interior_iff_mem_nhds, ‚Üê singleton_subset_iff, subset_interior_iff_isOpen] at D
#align is_open_singleton_of_finite_mem_nhds isOpen_singleton_of_finite_mem_nhds
-/

/- warning: infinite_of_mem_nhds -> infinite_of_mem_nhds is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_2 : TopologicalSpace.{u1} Œ±] [_inst_3 : T1Space.{u1} Œ± _inst_2] (x : Œ±) [hx : Filter.NeBot.{u1} Œ± (nhdsWithin.{u1} Œ± _inst_2 x (HasCompl.compl.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±)) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasSingleton.{u1} Œ±) x)))] {s : Set.{u1} Œ±}, (Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) s (nhds.{u1} Œ± _inst_2 x)) -> (Set.Infinite.{u1} Œ± s)
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_2 : TopologicalSpace.{u1} Œ±] [_inst_3 : T1Space.{u1} Œ± _inst_2] (x : Œ±) [hx : Filter.NeBot.{u1} Œ± (nhdsWithin.{u1} Œ± _inst_2 x (HasCompl.compl.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} Œ±) (Set.instBooleanAlgebraSet.{u1} Œ±)) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instSingletonSet.{u1} Œ±) x)))] {s : Set.{u1} Œ±}, (Membership.mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (instMembershipSetFilter.{u1} Œ±) s (nhds.{u1} Œ± _inst_2 x)) -> (Set.Infinite.{u1} Œ± s)
Case conversion may be inaccurate. Consider using '#align infinite_of_mem_nhds infinite_of_mem_nhds‚Çì'. -/
/-- If the punctured neighborhoods of a point form a nontrivial filter, then any neighborhood is
infinite. -/
theorem infinite_of_mem_nhds {Œ±} [TopologicalSpace Œ±] [T1Space Œ±] (x : Œ±) [hx : NeBot (ùìù[‚â†] x)]
    {s : Set Œ±} (hs : s ‚àà ùìù x) : Set.Infinite s :=
  by
  refine' fun hsf => hx.1 _
  rw [‚Üê isOpen_singleton_iff_punctured_nhds]
  exact isOpen_singleton_of_finite_mem_nhds x hs hsf
#align infinite_of_mem_nhds infinite_of_mem_nhds

#print discrete_of_t1_of_finite /-
theorem discrete_of_t1_of_finite {X : Type _} [TopologicalSpace X] [T1Space X] [Finite X] :
    DiscreteTopology X := by
  apply singletons_open_iff_discrete.mp
  intro x
  rw [‚Üê isClosed_compl_iff]
  exact (Set.toFinite _).IsClosed
#align discrete_of_t1_of_finite discrete_of_t1_of_finite
-/

#print PreconnectedSpace.trivial_of_discrete /-
theorem PreconnectedSpace.trivial_of_discrete [PreconnectedSpace Œ±] [DiscreteTopology Œ±] :
    Subsingleton Œ± := by
  rw [‚Üê not_nontrivial_iff_subsingleton]
  rintro ‚ü®x, y, hxy‚ü©
  rw [Ne.def, ‚Üê mem_singleton_iff, (isClopen_discrete _).eq_univ <| singleton_nonempty y] at hxy
  exact hxy (mem_univ x)
#align preconnected_space.trivial_of_discrete PreconnectedSpace.trivial_of_discrete
-/

#print IsPreconnected.infinite_of_nontrivial /-
theorem IsPreconnected.infinite_of_nontrivial [T1Space Œ±] {s : Set Œ±} (h : IsPreconnected s)
    (hs : s.Nontrivial) : s.Infinite :=
  by
  refine' mt (fun hf => (subsingleton_coe s).mp _) (not_subsingleton_iff.mpr hs)
  haveI := @discrete_of_t1_of_finite s _ _ hf.to_subtype
  exact @PreconnectedSpace.trivial_of_discrete _ _ (Subtype.preconnectedSpace h) _
#align is_preconnected.infinite_of_nontrivial IsPreconnected.infinite_of_nontrivial
-/

#print ConnectedSpace.infinite /-
theorem ConnectedSpace.infinite [ConnectedSpace Œ±] [Nontrivial Œ±] [T1Space Œ±] : Infinite Œ± :=
  infinite_univ_iff.mp <| isPreconnected_univ.infinite_of_nontrivial nontrivial_univ
#align connected_space.infinite ConnectedSpace.infinite
-/

#print singleton_mem_nhdsWithin_of_mem_discrete /-
theorem singleton_mem_nhdsWithin_of_mem_discrete {s : Set Œ±} [DiscreteTopology s] {x : Œ±}
    (hx : x ‚àà s) : {x} ‚àà ùìù[s] x :=
  by
  have : ({‚ü®x, hx‚ü©} : Set s) ‚àà ùìù (‚ü®x, hx‚ü© : s) := by simp [nhds_discrete]
  simpa only [nhdsWithin_eq_map_subtype_coe hx, image_singleton] using
    @image_mem_map _ _ _ (coe : s ‚Üí Œ±) _ this
#align singleton_mem_nhds_within_of_mem_discrete singleton_mem_nhdsWithin_of_mem_discrete
-/

#print nhdsWithin_of_mem_discrete /-
/-- The neighbourhoods filter of `x` within `s`, under the discrete topology, is equal to
the pure `x` filter (which is the principal filter at the singleton `{x}`.) -/
theorem nhdsWithin_of_mem_discrete {s : Set Œ±} [DiscreteTopology s] {x : Œ±} (hx : x ‚àà s) :
    ùìù[s] x = pure x :=
  le_antisymm (le_pure_iff.2 <| singleton_mem_nhdsWithin_of_mem_discrete hx) (pure_le_nhdsWithin hx)
#align nhds_within_of_mem_discrete nhdsWithin_of_mem_discrete
-/

/- warning: filter.has_basis.exists_inter_eq_singleton_of_mem_discrete -> Filter.HasBasis.exists_inter_eq_singleton_of_mem_discrete is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] {Œπ : Type.{u2}} {p : Œπ -> Prop} {t : Œπ -> (Set.{u1} Œ±)} {s : Set.{u1} Œ±} [_inst_2 : DiscreteTopology.{u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) s) (Subtype.topologicalSpace.{u1} Œ± (fun (x : Œ±) => Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x s) _inst_1)] {x : Œ±}, (Filter.HasBasis.{u1, succ u2} Œ± Œπ (nhds.{u1} Œ± _inst_1 x) p t) -> (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x s) -> (Exists.{succ u2} Œπ (fun (i : Œπ) => Exists.{0} (p i) (fun (hi : p i) => Eq.{succ u1} (Set.{u1} Œ±) (Inter.inter.{u1} (Set.{u1} Œ±) (Set.hasInter.{u1} Œ±) (t i) s) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasSingleton.{u1} Œ±) x))))
but is expected to have type
  forall {Œ± : Type.{u2}} [_inst_1 : TopologicalSpace.{u2} Œ±] {Œπ : Type.{u1}} {p : Œπ -> Prop} {t : Œπ -> (Set.{u2} Œ±)} {s : Set.{u2} Œ±} [_inst_2 : DiscreteTopology.{u2} (Set.Elem.{u2} Œ± s) (instTopologicalSpaceSubtype.{u2} Œ± (fun (x : Œ±) => Membership.mem.{u2, u2} Œ± (Set.{u2} Œ±) (Set.instMembershipSet.{u2} Œ±) x s) _inst_1)] {x : Œ±}, (Filter.HasBasis.{u2, succ u1} Œ± Œπ (nhds.{u2} Œ± _inst_1 x) p t) -> (Membership.mem.{u2, u2} Œ± (Set.{u2} Œ±) (Set.instMembershipSet.{u2} Œ±) x s) -> (Exists.{succ u1} Œπ (fun (i : Œπ) => And (p i) (Eq.{succ u2} (Set.{u2} Œ±) (Inter.inter.{u2} (Set.{u2} Œ±) (Set.instInterSet.{u2} Œ±) (t i) s) (Singleton.singleton.{u2, u2} Œ± (Set.{u2} Œ±) (Set.instSingletonSet.{u2} Œ±) x))))
Case conversion may be inaccurate. Consider using '#align filter.has_basis.exists_inter_eq_singleton_of_mem_discrete Filter.HasBasis.exists_inter_eq_singleton_of_mem_discrete‚Çì'. -/
theorem Filter.HasBasis.exists_inter_eq_singleton_of_mem_discrete {Œπ : Type _} {p : Œπ ‚Üí Prop}
    {t : Œπ ‚Üí Set Œ±} {s : Set Œ±} [DiscreteTopology s] {x : Œ±} (hb : (ùìù x).HasBasis p t)
    (hx : x ‚àà s) : ‚àÉ (i : _)(hi : p i), t i ‚à© s = {x} :=
  by
  rcases(nhdsWithin_hasBasis hb s).mem_iff.1 (singleton_mem_nhdsWithin_of_mem_discrete hx) with
    ‚ü®i, hi, hix‚ü©
  exact
    ‚ü®i, hi, subset.antisymm hix <| singleton_subset_iff.2 ‚ü®mem_of_mem_nhds <| hb.mem_of_mem hi, hx‚ü©‚ü©
#align filter.has_basis.exists_inter_eq_singleton_of_mem_discrete Filter.HasBasis.exists_inter_eq_singleton_of_mem_discrete

/- warning: nhds_inter_eq_singleton_of_mem_discrete -> nhds_inter_eq_singleton_of_mem_discrete is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] {s : Set.{u1} Œ±} [_inst_2 : DiscreteTopology.{u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) s) (Subtype.topologicalSpace.{u1} Œ± (fun (x : Œ±) => Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x s) _inst_1)] {x : Œ±}, (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x s) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (U : Set.{u1} Œ±) => Exists.{0} (Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) U (nhds.{u1} Œ± _inst_1 x)) (fun (H : Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) U (nhds.{u1} Œ± _inst_1 x)) => Eq.{succ u1} (Set.{u1} Œ±) (Inter.inter.{u1} (Set.{u1} Œ±) (Set.hasInter.{u1} Œ±) U s) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasSingleton.{u1} Œ±) x))))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] {s : Set.{u1} Œ±} [_inst_2 : DiscreteTopology.{u1} (Set.Elem.{u1} Œ± s) (instTopologicalSpaceSubtype.{u1} Œ± (fun (x : Œ±) => Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x s) _inst_1)] {x : Œ±}, (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x s) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (U : Set.{u1} Œ±) => And (Membership.mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (instMembershipSetFilter.{u1} Œ±) U (nhds.{u1} Œ± _inst_1 x)) (Eq.{succ u1} (Set.{u1} Œ±) (Inter.inter.{u1} (Set.{u1} Œ±) (Set.instInterSet.{u1} Œ±) U s) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instSingletonSet.{u1} Œ±) x))))
Case conversion may be inaccurate. Consider using '#align nhds_inter_eq_singleton_of_mem_discrete nhds_inter_eq_singleton_of_mem_discrete‚Çì'. -/
/-- A point `x` in a discrete subset `s` of a topological space admits a neighbourhood
that only meets `s` at `x`.  -/
theorem nhds_inter_eq_singleton_of_mem_discrete {s : Set Œ±} [DiscreteTopology s] {x : Œ±}
    (hx : x ‚àà s) : ‚àÉ U ‚àà ùìù x, U ‚à© s = {x} := by
  simpa using (ùìù x).basis_sets.exists_inter_eq_singleton_of_mem_discrete hx
#align nhds_inter_eq_singleton_of_mem_discrete nhds_inter_eq_singleton_of_mem_discrete

/- warning: disjoint_nhds_within_of_mem_discrete -> disjoint_nhdsWithin_of_mem_discrete is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] {s : Set.{u1} Œ±} [_inst_2 : DiscreteTopology.{u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) s) (Subtype.topologicalSpace.{u1} Œ± (fun (x : Œ±) => Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x s) _inst_1)] {x : Œ±}, (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x s) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (U : Set.{u1} Œ±) => Exists.{0} (Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) U (nhdsWithin.{u1} Œ± _inst_1 x (HasCompl.compl.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±)) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasSingleton.{u1} Œ±) x)))) (fun (H : Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) U (nhdsWithin.{u1} Œ± _inst_1 x (HasCompl.compl.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±)) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasSingleton.{u1} Œ±) x)))) => Disjoint.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.completeBooleanAlgebra.{u1} Œ±)))))) (GeneralizedBooleanAlgebra.toOrderBot.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toGeneralizedBooleanAlgebra.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±))) U s)))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] {s : Set.{u1} Œ±} [_inst_2 : DiscreteTopology.{u1} (Set.Elem.{u1} Œ± s) (instTopologicalSpaceSubtype.{u1} Œ± (fun (x : Œ±) => Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x s) _inst_1)] {x : Œ±}, (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x s) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (U : Set.{u1} Œ±) => And (Membership.mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (instMembershipSetFilter.{u1} Œ±) U (nhdsWithin.{u1} Œ± _inst_1 x (HasCompl.compl.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} Œ±) (Set.instBooleanAlgebraSet.{u1} Œ±)) (Singleton.singleton.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instSingletonSet.{u1} Œ±) x)))) (Disjoint.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))) (BoundedOrder.toOrderBot.{u1} (Set.{u1} Œ±) (Preorder.toLE.{u1} (Set.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))))) (CompleteLattice.toBoundedOrder.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))) U s)))
Case conversion may be inaccurate. Consider using '#align disjoint_nhds_within_of_mem_discrete disjoint_nhdsWithin_of_mem_discrete‚Çì'. -/
/-- For point `x` in a discrete subset `s` of a topological space, there is a set `U`
such that
1. `U` is a punctured neighborhood of `x` (ie. `U ‚à™ {x}` is a neighbourhood of `x`),
2. `U` is disjoint from `s`.
-/
theorem disjoint_nhdsWithin_of_mem_discrete {s : Set Œ±} [DiscreteTopology s] {x : Œ±} (hx : x ‚àà s) :
    ‚àÉ U ‚àà ùìù[‚â†] x, Disjoint U s :=
  let ‚ü®V, h, h'‚ü© := nhds_inter_eq_singleton_of_mem_discrete hx
  ‚ü®{x}·∂ú ‚à© V, inter_mem_nhdsWithin _ h,
    disjoint_iff_inter_eq_empty.mpr (by rw [inter_assoc, h', compl_inter_self])‚ü©
#align disjoint_nhds_within_of_mem_discrete disjoint_nhdsWithin_of_mem_discrete

#print TopologicalSpace.subset_trans /-
/-- Let `X` be a topological space and let `s, t ‚äÜ X` be two subsets.  If there is an inclusion
`t ‚äÜ s`, then the topological space structure on `t` induced by `X` is the same as the one
obtained by the induced topological space structure on `s`. -/
theorem TopologicalSpace.subset_trans {X : Type _} [tX : TopologicalSpace X] {s t : Set X}
    (ts : t ‚äÜ s) :
    (Subtype.topologicalSpace : TopologicalSpace t) =
      (Subtype.topologicalSpace : TopologicalSpace s).induced (Set.inclusion ts) :=
  by
  change
    tX.induced ((coe : s ‚Üí X) ‚àò Set.inclusion ts) =
      TopologicalSpace.induced (Set.inclusion ts) (tX.induced _)
  rw [‚Üê induced_compose]
#align topological_space.subset_trans TopologicalSpace.subset_trans
-/

#print T2Space /-
/-- A T‚ÇÇ space, also known as a Hausdorff space, is one in which for every
  `x ‚â† y` there exists disjoint open sets around `x` and `y`. This is
  the most widely used of the separation axioms. -/
@[mk_iff]
class T2Space (Œ± : Type u) [TopologicalSpace Œ±] : Prop where
  t2 : ‚àÄ x y, x ‚â† y ‚Üí ‚àÉ u v : Set Œ±, IsOpen u ‚àß IsOpen v ‚àß x ‚àà u ‚àß y ‚àà v ‚àß Disjoint u v
#align t2_space T2Space
-/

/- warning: t2_separation -> t2_separation is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T2Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, (Ne.{succ u1} Œ± x y) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (u : Set.{u1} Œ±) => Exists.{succ u1} (Set.{u1} Œ±) (fun (v : Set.{u1} Œ±) => And (IsOpen.{u1} Œ± _inst_1 u) (And (IsOpen.{u1} Œ± _inst_1 v) (And (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x u) (And (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) y v) (Disjoint.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.completeBooleanAlgebra.{u1} Œ±)))))) (GeneralizedBooleanAlgebra.toOrderBot.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toGeneralizedBooleanAlgebra.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±))) u v)))))))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T2Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, (Ne.{succ u1} Œ± x y) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (u : Set.{u1} Œ±) => Exists.{succ u1} (Set.{u1} Œ±) (fun (v : Set.{u1} Œ±) => And (IsOpen.{u1} Œ± _inst_1 u) (And (IsOpen.{u1} Œ± _inst_1 v) (And (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x u) (And (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) y v) (Disjoint.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))) (BoundedOrder.toOrderBot.{u1} (Set.{u1} Œ±) (Preorder.toLE.{u1} (Set.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))))) (CompleteLattice.toBoundedOrder.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))) u v)))))))
Case conversion may be inaccurate. Consider using '#align t2_separation t2_separation‚Çì'. -/
/-- Two different points can be separated by open sets. -/
theorem t2_separation [T2Space Œ±] {x y : Œ±} (h : x ‚â† y) :
    ‚àÉ u v : Set Œ±, IsOpen u ‚àß IsOpen v ‚àß x ‚àà u ‚àß y ‚àà v ‚àß Disjoint u v :=
  T2Space.t2 x y h
#align t2_separation t2_separation

/- warning: t2_space_iff_disjoint_nhds -> t2Space_iff_disjoint_nhds is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±], Iff (T2Space.{u1} Œ± _inst_1) (forall (x : Œ±) (y : Œ±), (Ne.{succ u1} Œ± x y) -> (Disjoint.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.completeLattice.{u1} Œ±))) (nhds.{u1} Œ± _inst_1 x) (nhds.{u1} Œ± _inst_1 y)))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±], Iff (T2Space.{u1} Œ± _inst_1) (forall (x : Œ±) (y : Œ±), (Ne.{succ u1} Œ± x y) -> (Disjoint.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.instCompleteLatticeFilter.{u1} Œ±))) (nhds.{u1} Œ± _inst_1 x) (nhds.{u1} Œ± _inst_1 y)))
Case conversion may be inaccurate. Consider using '#align t2_space_iff_disjoint_nhds t2Space_iff_disjoint_nhds‚Çì'. -/
theorem t2Space_iff_disjoint_nhds : T2Space Œ± ‚Üî ‚àÄ x y : Œ±, x ‚â† y ‚Üí Disjoint (ùìù x) (ùìù y) :=
  by
  refine' (t2Space_iff Œ±).trans (forall‚ÇÉ_congr fun x y hne => _)
  simp only [(nhds_basis_opens x).disjoint_iff (nhds_basis_opens y), exists_prop, ‚Üê exists_and_left,
    and_assoc, and_comm', and_left_comm]
#align t2_space_iff_disjoint_nhds t2Space_iff_disjoint_nhds

/- warning: disjoint_nhds_nhds -> disjoint_nhds_nhds is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T2Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, Iff (Disjoint.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.completeLattice.{u1} Œ±))) (nhds.{u1} Œ± _inst_1 x) (nhds.{u1} Œ± _inst_1 y)) (Ne.{succ u1} Œ± x y)
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T2Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, Iff (Disjoint.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.instCompleteLatticeFilter.{u1} Œ±))) (nhds.{u1} Œ± _inst_1 x) (nhds.{u1} Œ± _inst_1 y)) (Ne.{succ u1} Œ± x y)
Case conversion may be inaccurate. Consider using '#align disjoint_nhds_nhds disjoint_nhds_nhds‚Çì'. -/
@[simp]
theorem disjoint_nhds_nhds [T2Space Œ±] {x y : Œ±} : Disjoint (ùìù x) (ùìù y) ‚Üî x ‚â† y :=
  ‚ü®fun hd he => by simpa [he, nhds_ne_bot.ne] using hd, t2Space_iff_disjoint_nhds.mp ‚Äπ_‚Ä∫ x y‚ü©
#align disjoint_nhds_nhds disjoint_nhds_nhds

/- warning: pairwise_disjoint_nhds -> pairwise_disjoint_nhds is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T2Space.{u1} Œ± _inst_1], Pairwise.{u1} Œ± (Function.onFun.{succ u1, succ u1, 1} Œ± (Filter.{u1} Œ±) Prop (Disjoint.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.completeLattice.{u1} Œ±)))) (nhds.{u1} Œ± _inst_1))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T2Space.{u1} Œ± _inst_1], Pairwise.{u1} Œ± (Function.onFun.{succ u1, succ u1, 1} Œ± (Filter.{u1} Œ±) Prop (Disjoint.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.instCompleteLatticeFilter.{u1} Œ±)))) (nhds.{u1} Œ± _inst_1))
Case conversion may be inaccurate. Consider using '#align pairwise_disjoint_nhds pairwise_disjoint_nhds‚Çì'. -/
theorem pairwise_disjoint_nhds [T2Space Œ±] : Pairwise (Disjoint on (ùìù : Œ± ‚Üí Filter Œ±)) := fun x y =>
  disjoint_nhds_nhds.2
#align pairwise_disjoint_nhds pairwise_disjoint_nhds

/- warning: set.pairwise_disjoint_nhds -> Set.pairwiseDisjoint_nhds is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T2Space.{u1} Œ± _inst_1] (s : Set.{u1} Œ±), Set.PairwiseDisjoint.{u1, u1} (Filter.{u1} Œ±) Œ± (Filter.partialOrder.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.completeLattice.{u1} Œ±))) s (nhds.{u1} Œ± _inst_1)
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T2Space.{u1} Œ± _inst_1] (s : Set.{u1} Œ±), Set.PairwiseDisjoint.{u1, u1} (Filter.{u1} Œ±) Œ± (Filter.instPartialOrderFilter.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.instCompleteLatticeFilter.{u1} Œ±))) s (nhds.{u1} Œ± _inst_1)
Case conversion may be inaccurate. Consider using '#align set.pairwise_disjoint_nhds Set.pairwiseDisjoint_nhds‚Çì'. -/
protected theorem Set.pairwiseDisjoint_nhds [T2Space Œ±] (s : Set Œ±) : s.PairwiseDisjoint ùìù :=
  pairwise_disjoint_nhds.set_pairwise s
#align set.pairwise_disjoint_nhds Set.pairwiseDisjoint_nhds

/- warning: set.finite.t2_separation -> Set.Finite.t2_separation is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T2Space.{u1} Œ± _inst_1] {s : Set.{u1} Œ±}, (Set.Finite.{u1} Œ± s) -> (Exists.{succ u1} (Œ± -> (Set.{u1} Œ±)) (fun (U : Œ± -> (Set.{u1} Œ±)) => And (forall (x : Œ±), And (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x (U x)) (IsOpen.{u1} Œ± _inst_1 (U x))) (Set.PairwiseDisjoint.{u1, u1} (Set.{u1} Œ±) Œ± (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.completeBooleanAlgebra.{u1} Œ±)))))) (GeneralizedBooleanAlgebra.toOrderBot.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toGeneralizedBooleanAlgebra.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±))) s U)))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T2Space.{u1} Œ± _inst_1] {s : Set.{u1} Œ±}, (Set.Finite.{u1} Œ± s) -> (Exists.{succ u1} (Œ± -> (Set.{u1} Œ±)) (fun (U : Œ± -> (Set.{u1} Œ±)) => And (forall (x : Œ±), And (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x (U x)) (IsOpen.{u1} Œ± _inst_1 (U x))) (Set.PairwiseDisjoint.{u1, u1} (Set.{u1} Œ±) Œ± (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))) (BoundedOrder.toOrderBot.{u1} (Set.{u1} Œ±) (Preorder.toLE.{u1} (Set.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))))) (CompleteLattice.toBoundedOrder.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))) s U)))
Case conversion may be inaccurate. Consider using '#align set.finite.t2_separation Set.Finite.t2_separation‚Çì'. -/
/-- Points of a finite set can be separated by open sets from each other. -/
theorem Set.Finite.t2_separation [T2Space Œ±] {s : Set Œ±} (hs : s.Finite) :
    ‚àÉ U : Œ± ‚Üí Set Œ±, (‚àÄ x, x ‚àà U x ‚àß IsOpen (U x)) ‚àß s.PairwiseDisjoint U :=
  s.pairwise_disjoint_nhds.exists_mem_filter_basis‚Çì hs nhds_basis_opens
#align set.finite.t2_separation Set.Finite.t2_separation

/- warning: is_open_set_of_disjoint_nhds_nhds -> isOpen_setOf_disjoint_nhds_nhds is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±], IsOpen.{u1} (Prod.{u1, u1} Œ± Œ±) (Prod.topologicalSpace.{u1, u1} Œ± Œ± _inst_1 _inst_1) (setOf.{u1} (Prod.{u1, u1} Œ± Œ±) (fun (p : Prod.{u1, u1} Œ± Œ±) => Disjoint.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.completeLattice.{u1} Œ±))) (nhds.{u1} Œ± _inst_1 (Prod.fst.{u1, u1} Œ± Œ± p)) (nhds.{u1} Œ± _inst_1 (Prod.snd.{u1, u1} Œ± Œ± p))))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±], IsOpen.{u1} (Prod.{u1, u1} Œ± Œ±) (instTopologicalSpaceProd.{u1, u1} Œ± Œ± _inst_1 _inst_1) (setOf.{u1} (Prod.{u1, u1} Œ± Œ±) (fun (p : Prod.{u1, u1} Œ± Œ±) => Disjoint.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.instCompleteLatticeFilter.{u1} Œ±))) (nhds.{u1} Œ± _inst_1 (Prod.fst.{u1, u1} Œ± Œ± p)) (nhds.{u1} Œ± _inst_1 (Prod.snd.{u1, u1} Œ± Œ± p))))
Case conversion may be inaccurate. Consider using '#align is_open_set_of_disjoint_nhds_nhds isOpen_setOf_disjoint_nhds_nhds‚Çì'. -/
theorem isOpen_setOf_disjoint_nhds_nhds : IsOpen { p : Œ± √ó Œ± | Disjoint (ùìù p.1) (ùìù p.2) } :=
  by
  simp only [isOpen_iff_mem_nhds, Prod.forall, mem_set_of_eq]
  intro x y h
  obtain ‚ü®U, hU, V, hV, hd‚ü© := ((nhds_basis_opens x).disjoint_iff (nhds_basis_opens y)).mp h
  exact
    mem_nhds_prod_iff.mpr
      ‚ü®U, hU.2.mem_nhds hU.1, V, hV.2.mem_nhds hV.1, fun ‚ü®x', y'‚ü© ‚ü®hx', hy'‚ü© =>
        disjoint_of_disjoint_of_mem hd (hU.2.mem_nhds hx') (hV.2.mem_nhds hy')‚ü©
#align is_open_set_of_disjoint_nhds_nhds isOpen_setOf_disjoint_nhds_nhds

#print T2Space.t1Space /-
-- see Note [lower instance priority]
instance (priority := 100) T2Space.t1Space [T2Space Œ±] : T1Space Œ± :=
  t1Space_iff_disjoint_pure_nhds.mpr fun x y hne =>
    (disjoint_nhds_nhds.2 hne).mono_left <| pure_le_nhds _
#align t2_space.t1_space T2Space.t1Space
-/

/- warning: t2_iff_nhds -> t2_iff_nhds is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±], Iff (T2Space.{u1} Œ± _inst_1) (forall {x : Œ±} {y : Œ±}, (Filter.NeBot.{u1} Œ± (Inf.inf.{u1} (Filter.{u1} Œ±) (Filter.hasInf.{u1} Œ±) (nhds.{u1} Œ± _inst_1 x) (nhds.{u1} Œ± _inst_1 y))) -> (Eq.{succ u1} Œ± x y))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±], Iff (T2Space.{u1} Œ± _inst_1) (forall {x : Œ±} {y : Œ±}, (Filter.NeBot.{u1} Œ± (Inf.inf.{u1} (Filter.{u1} Œ±) (Filter.instInfFilter.{u1} Œ±) (nhds.{u1} Œ± _inst_1 x) (nhds.{u1} Œ± _inst_1 y))) -> (Eq.{succ u1} Œ± x y))
Case conversion may be inaccurate. Consider using '#align t2_iff_nhds t2_iff_nhds‚Çì'. -/
/-- A space is T‚ÇÇ iff the neighbourhoods of distinct points generate the bottom filter. -/
theorem t2_iff_nhds : T2Space Œ± ‚Üî ‚àÄ {x y : Œ±}, NeBot (ùìù x ‚äì ùìù y) ‚Üí x = y := by
  simp only [t2Space_iff_disjoint_nhds, disjoint_iff, ne_bot_iff, Ne.def, not_imp_comm]
#align t2_iff_nhds t2_iff_nhds

/- warning: eq_of_nhds_ne_bot -> eq_of_nhds_neBot is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T2Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, (Filter.NeBot.{u1} Œ± (Inf.inf.{u1} (Filter.{u1} Œ±) (Filter.hasInf.{u1} Œ±) (nhds.{u1} Œ± _inst_1 x) (nhds.{u1} Œ± _inst_1 y))) -> (Eq.{succ u1} Œ± x y)
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T2Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, (Filter.NeBot.{u1} Œ± (Inf.inf.{u1} (Filter.{u1} Œ±) (Filter.instInfFilter.{u1} Œ±) (nhds.{u1} Œ± _inst_1 x) (nhds.{u1} Œ± _inst_1 y))) -> (Eq.{succ u1} Œ± x y)
Case conversion may be inaccurate. Consider using '#align eq_of_nhds_ne_bot eq_of_nhds_neBot‚Çì'. -/
theorem eq_of_nhds_neBot [T2Space Œ±] {x y : Œ±} (h : NeBot (ùìù x ‚äì ùìù y)) : x = y :=
  t2_iff_nhds.mp ‚Äπ_‚Ä∫ h
#align eq_of_nhds_ne_bot eq_of_nhds_neBot

/- warning: t2_space_iff_nhds -> t2Space_iff_nhds is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±], Iff (T2Space.{u1} Œ± _inst_1) (forall {x : Œ±} {y : Œ±}, (Ne.{succ u1} Œ± x y) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (U : Set.{u1} Œ±) => Exists.{0} (Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) U (nhds.{u1} Œ± _inst_1 x)) (fun (H : Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) U (nhds.{u1} Œ± _inst_1 x)) => Exists.{succ u1} (Set.{u1} Œ±) (fun (V : Set.{u1} Œ±) => Exists.{0} (Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) V (nhds.{u1} Œ± _inst_1 y)) (fun (H : Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) V (nhds.{u1} Œ± _inst_1 y)) => Disjoint.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.completeBooleanAlgebra.{u1} Œ±)))))) (GeneralizedBooleanAlgebra.toOrderBot.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toGeneralizedBooleanAlgebra.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±))) U V))))))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±], Iff (T2Space.{u1} Œ± _inst_1) (forall {x : Œ±} {y : Œ±}, (Ne.{succ u1} Œ± x y) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (U : Set.{u1} Œ±) => And (Membership.mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (instMembershipSetFilter.{u1} Œ±) U (nhds.{u1} Œ± _inst_1 x)) (Exists.{succ u1} (Set.{u1} Œ±) (fun (V : Set.{u1} Œ±) => And (Membership.mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (instMembershipSetFilter.{u1} Œ±) V (nhds.{u1} Œ± _inst_1 y)) (Disjoint.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))) (BoundedOrder.toOrderBot.{u1} (Set.{u1} Œ±) (Preorder.toLE.{u1} (Set.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))))) (CompleteLattice.toBoundedOrder.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))) U V))))))
Case conversion may be inaccurate. Consider using '#align t2_space_iff_nhds t2Space_iff_nhds‚Çì'. -/
theorem t2Space_iff_nhds : T2Space Œ± ‚Üî ‚àÄ {x y : Œ±}, x ‚â† y ‚Üí ‚àÉ U ‚àà ùìù x, ‚àÉ V ‚àà ùìù y, Disjoint U V := by
  simp only [t2Space_iff_disjoint_nhds, Filter.disjoint_iff]
#align t2_space_iff_nhds t2Space_iff_nhds

/- warning: t2_separation_nhds -> t2_separation_nhds is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T2Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, (Ne.{succ u1} Œ± x y) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (u : Set.{u1} Œ±) => Exists.{succ u1} (Set.{u1} Œ±) (fun (v : Set.{u1} Œ±) => And (Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) u (nhds.{u1} Œ± _inst_1 x)) (And (Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) v (nhds.{u1} Œ± _inst_1 y)) (Disjoint.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.completeBooleanAlgebra.{u1} Œ±)))))) (GeneralizedBooleanAlgebra.toOrderBot.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toGeneralizedBooleanAlgebra.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±))) u v)))))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T2Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, (Ne.{succ u1} Œ± x y) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (u : Set.{u1} Œ±) => Exists.{succ u1} (Set.{u1} Œ±) (fun (v : Set.{u1} Œ±) => And (Membership.mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (instMembershipSetFilter.{u1} Œ±) u (nhds.{u1} Œ± _inst_1 x)) (And (Membership.mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (instMembershipSetFilter.{u1} Œ±) v (nhds.{u1} Œ± _inst_1 y)) (Disjoint.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))) (BoundedOrder.toOrderBot.{u1} (Set.{u1} Œ±) (Preorder.toLE.{u1} (Set.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))))) (CompleteLattice.toBoundedOrder.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))) u v)))))
Case conversion may be inaccurate. Consider using '#align t2_separation_nhds t2_separation_nhds‚Çì'. -/
theorem t2_separation_nhds [T2Space Œ±] {x y : Œ±} (h : x ‚â† y) :
    ‚àÉ u v, u ‚àà ùìù x ‚àß v ‚àà ùìù y ‚àß Disjoint u v :=
  let ‚ü®u, v, open_u, open_v, x_in, y_in, huv‚ü© := t2_separation h
  ‚ü®u, v, open_u.mem_nhds x_in, open_v.mem_nhds y_in, huv‚ü©
#align t2_separation_nhds t2_separation_nhds

/- warning: t2_separation_compact_nhds -> t2_separation_compact_nhds is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : LocallyCompactSpace.{u1} Œ± _inst_1] [_inst_3 : T2Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, (Ne.{succ u1} Œ± x y) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (u : Set.{u1} Œ±) => Exists.{succ u1} (Set.{u1} Œ±) (fun (v : Set.{u1} Œ±) => And (Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) u (nhds.{u1} Œ± _inst_1 x)) (And (Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) v (nhds.{u1} Œ± _inst_1 y)) (And (IsCompact.{u1} Œ± _inst_1 u) (And (IsCompact.{u1} Œ± _inst_1 v) (Disjoint.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.completeBooleanAlgebra.{u1} Œ±)))))) (GeneralizedBooleanAlgebra.toOrderBot.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toGeneralizedBooleanAlgebra.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±))) u v)))))))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : LocallyCompactSpace.{u1} Œ± _inst_1] [_inst_3 : T2Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, (Ne.{succ u1} Œ± x y) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (u : Set.{u1} Œ±) => Exists.{succ u1} (Set.{u1} Œ±) (fun (v : Set.{u1} Œ±) => And (Membership.mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (instMembershipSetFilter.{u1} Œ±) u (nhds.{u1} Œ± _inst_1 x)) (And (Membership.mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (instMembershipSetFilter.{u1} Œ±) v (nhds.{u1} Œ± _inst_1 y)) (And (IsCompact.{u1} Œ± _inst_1 u) (And (IsCompact.{u1} Œ± _inst_1 v) (Disjoint.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))) (BoundedOrder.toOrderBot.{u1} (Set.{u1} Œ±) (Preorder.toLE.{u1} (Set.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))))) (CompleteLattice.toBoundedOrder.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))) u v)))))))
Case conversion may be inaccurate. Consider using '#align t2_separation_compact_nhds t2_separation_compact_nhds‚Çì'. -/
theorem t2_separation_compact_nhds [LocallyCompactSpace Œ±] [T2Space Œ±] {x y : Œ±} (h : x ‚â† y) :
    ‚àÉ u v, u ‚àà ùìù x ‚àß v ‚àà ùìù y ‚àß IsCompact u ‚àß IsCompact v ‚àß Disjoint u v := by
  simpa only [exists_prop, ‚Üê exists_and_left, and_comm', and_assoc, and_left_comm] using
    ((compact_basis_nhds x).disjoint_iff (compact_basis_nhds y)).1 (disjoint_nhds_nhds.2 h)
#align t2_separation_compact_nhds t2_separation_compact_nhds

/- warning: t2_iff_ultrafilter -> t2_iff_ultrafilter is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±], Iff (T2Space.{u1} Œ± _inst_1) (forall {x : Œ±} {y : Œ±} (f : Ultrafilter.{u1} Œ±), (LE.le.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±))) ((fun (a : Type.{u1}) (b : Type.{u1}) [self : HasLiftT.{succ u1, succ u1} a b] => self.0) (Ultrafilter.{u1} Œ±) (Filter.{u1} Œ±) (HasLiftT.mk.{succ u1, succ u1} (Ultrafilter.{u1} Œ±) (Filter.{u1} Œ±) (CoeTC‚Çì.coe.{succ u1, succ u1} (Ultrafilter.{u1} Œ±) (Filter.{u1} Œ±) (Ultrafilter.Filter.hasCoeT.{u1} Œ±))) f) (nhds.{u1} Œ± _inst_1 x)) -> (LE.le.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±))) ((fun (a : Type.{u1}) (b : Type.{u1}) [self : HasLiftT.{succ u1, succ u1} a b] => self.0) (Ultrafilter.{u1} Œ±) (Filter.{u1} Œ±) (HasLiftT.mk.{succ u1, succ u1} (Ultrafilter.{u1} Œ±) (Filter.{u1} Œ±) (CoeTC‚Çì.coe.{succ u1, succ u1} (Ultrafilter.{u1} Œ±) (Filter.{u1} Œ±) (Ultrafilter.Filter.hasCoeT.{u1} Œ±))) f) (nhds.{u1} Œ± _inst_1 y)) -> (Eq.{succ u1} Œ± x y))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±], Iff (T2Space.{u1} Œ± _inst_1) (forall {x : Œ±} {y : Œ±} (f : Ultrafilter.{u1} Œ±), (LE.le.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±))) (Ultrafilter.toFilter.{u1} Œ± f) (nhds.{u1} Œ± _inst_1 x)) -> (LE.le.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±))) (Ultrafilter.toFilter.{u1} Œ± f) (nhds.{u1} Œ± _inst_1 y)) -> (Eq.{succ u1} Œ± x y))
Case conversion may be inaccurate. Consider using '#align t2_iff_ultrafilter t2_iff_ultrafilter‚Çì'. -/
theorem t2_iff_ultrafilter :
    T2Space Œ± ‚Üî ‚àÄ {x y : Œ±} (f : Ultrafilter Œ±), ‚Üëf ‚â§ ùìù x ‚Üí ‚Üëf ‚â§ ùìù y ‚Üí x = y :=
  t2_iff_nhds.trans <| by simp only [‚Üê exists_ultrafilter_iff, and_imp, le_inf_iff, exists_imp]
#align t2_iff_ultrafilter t2_iff_ultrafilter

/- warning: t2_iff_is_closed_diagonal -> t2_iff_isClosed_diagonal is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±], Iff (T2Space.{u1} Œ± _inst_1) (IsClosed.{u1} (Prod.{u1, u1} Œ± Œ±) (Prod.topologicalSpace.{u1, u1} Œ± Œ± _inst_1 _inst_1) (Set.diagonal.{u1} Œ±))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±], Iff (T2Space.{u1} Œ± _inst_1) (IsClosed.{u1} (Prod.{u1, u1} Œ± Œ±) (instTopologicalSpaceProd.{u1, u1} Œ± Œ± _inst_1 _inst_1) (Set.diagonal.{u1} Œ±))
Case conversion may be inaccurate. Consider using '#align t2_iff_is_closed_diagonal t2_iff_isClosed_diagonal‚Çì'. -/
theorem t2_iff_isClosed_diagonal : T2Space Œ± ‚Üî IsClosed (diagonal Œ±) := by
  simp only [t2Space_iff_disjoint_nhds, ‚Üê isOpen_compl_iff, isOpen_iff_mem_nhds, Prod.forall,
    nhds_prod_eq, compl_diagonal_mem_prod, mem_compl_iff, mem_diagonal_iff]
#align t2_iff_is_closed_diagonal t2_iff_isClosed_diagonal

/- warning: is_closed_diagonal -> isClosed_diagonal is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T2Space.{u1} Œ± _inst_1], IsClosed.{u1} (Prod.{u1, u1} Œ± Œ±) (Prod.topologicalSpace.{u1, u1} Œ± Œ± _inst_1 _inst_1) (Set.diagonal.{u1} Œ±)
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T2Space.{u1} Œ± _inst_1], IsClosed.{u1} (Prod.{u1, u1} Œ± Œ±) (instTopologicalSpaceProd.{u1, u1} Œ± Œ± _inst_1 _inst_1) (Set.diagonal.{u1} Œ±)
Case conversion may be inaccurate. Consider using '#align is_closed_diagonal isClosed_diagonal‚Çì'. -/
theorem isClosed_diagonal [T2Space Œ±] : IsClosed (diagonal Œ±) :=
  t2_iff_isClosed_diagonal.mp ‚Äπ_‚Ä∫
#align is_closed_diagonal isClosed_diagonal

section Separated

open SeparatedNhds Finset

/- warning: finset_disjoint_finset_opens_of_t2 -> finset_disjoint_finset_opens_of_t2 is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T2Space.{u1} Œ± _inst_1] (s : Finset.{u1} Œ±) (t : Finset.{u1} Œ±), (Disjoint.{u1} (Finset.{u1} Œ±) (Finset.partialOrder.{u1} Œ±) (Finset.orderBot.{u1} Œ±) s t) -> (SeparatedNhds.{u1} Œ± _inst_1 ((fun (a : Type.{u1}) (b : Type.{u1}) [self : HasLiftT.{succ u1, succ u1} a b] => self.0) (Finset.{u1} Œ±) (Set.{u1} Œ±) (HasLiftT.mk.{succ u1, succ u1} (Finset.{u1} Œ±) (Set.{u1} Œ±) (CoeTC‚Çì.coe.{succ u1, succ u1} (Finset.{u1} Œ±) (Set.{u1} Œ±) (Finset.Set.hasCoeT.{u1} Œ±))) s) ((fun (a : Type.{u1}) (b : Type.{u1}) [self : HasLiftT.{succ u1, succ u1} a b] => self.0) (Finset.{u1} Œ±) (Set.{u1} Œ±) (HasLiftT.mk.{succ u1, succ u1} (Finset.{u1} Œ±) (Set.{u1} Œ±) (CoeTC‚Çì.coe.{succ u1, succ u1} (Finset.{u1} Œ±) (Set.{u1} Œ±) (Finset.Set.hasCoeT.{u1} Œ±))) t))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T2Space.{u1} Œ± _inst_1] (s : Finset.{u1} Œ±) (t : Finset.{u1} Œ±), (Disjoint.{u1} (Finset.{u1} Œ±) (Finset.partialOrder.{u1} Œ±) (Finset.instOrderBotFinsetToLEToPreorderPartialOrder.{u1} Œ±) s t) -> (SeparatedNhds.{u1} Œ± _inst_1 (Finset.toSet.{u1} Œ± s) (Finset.toSet.{u1} Œ± t))
Case conversion may be inaccurate. Consider using '#align finset_disjoint_finset_opens_of_t2 finset_disjoint_finset_opens_of_t2‚Çì'. -/
theorem finset_disjoint_finset_opens_of_t2 [T2Space Œ±] :
    ‚àÄ s t : Finset Œ±, Disjoint s t ‚Üí SeparatedNhds (s : Set Œ±) t :=
  by
  refine'
    induction_on_union _ (fun a b hi d => (hi d.symm).symm) (fun a d => empty_right a)
      (fun a b ab => _) _
  ¬∑ obtain ‚ü®U, V, oU, oV, aU, bV, UV‚ü© := t2_separation (Finset.disjoint_singleton.1 ab)
    refine' ‚ü®U, V, oU, oV, _, _, UV‚ü© <;> exact singleton_subset_set_iff.mpr ‚Äπ_‚Ä∫
  ¬∑ intro a b c ac bc d
    apply_mod_cast union_left (ac (disjoint_of_subset_left (a.subset_union_left b) d)) (bc _)
    exact disjoint_of_subset_left (a.subset_union_right b) d
#align finset_disjoint_finset_opens_of_t2 finset_disjoint_finset_opens_of_t2

#print point_disjoint_finset_opens_of_t2 /-
theorem point_disjoint_finset_opens_of_t2 [T2Space Œ±] {x : Œ±} {s : Finset Œ±} (h : x ‚àâ s) :
    SeparatedNhds ({x} : Set Œ±) s := by
  exact_mod_cast finset_disjoint_finset_opens_of_t2 {x} s (finset.disjoint_singleton_left.mpr h)
#align point_disjoint_finset_opens_of_t2 point_disjoint_finset_opens_of_t2
-/

end Separated

#print tendsto_nhds_unique /-
theorem tendsto_nhds_unique [T2Space Œ±] {f : Œ≤ ‚Üí Œ±} {l : Filter Œ≤} {a b : Œ±} [NeBot l]
    (ha : Tendsto f l (ùìù a)) (hb : Tendsto f l (ùìù b)) : a = b :=
  eq_of_nhds_neBot <| neBot_of_le <| le_inf ha hb
#align tendsto_nhds_unique tendsto_nhds_unique
-/

#print tendsto_nhds_unique' /-
theorem tendsto_nhds_unique' [T2Space Œ±] {f : Œ≤ ‚Üí Œ±} {l : Filter Œ≤} {a b : Œ±} (hl : NeBot l)
    (ha : Tendsto f l (ùìù a)) (hb : Tendsto f l (ùìù b)) : a = b :=
  eq_of_nhds_neBot <| neBot_of_le <| le_inf ha hb
#align tendsto_nhds_unique' tendsto_nhds_unique'
-/

#print tendsto_nhds_unique_of_eventuallyEq /-
theorem tendsto_nhds_unique_of_eventuallyEq [T2Space Œ±] {f g : Œ≤ ‚Üí Œ±} {l : Filter Œ≤} {a b : Œ±}
    [NeBot l] (ha : Tendsto f l (ùìù a)) (hb : Tendsto g l (ùìù b)) (hfg : f =·∂†[l] g) : a = b :=
  tendsto_nhds_unique (ha.congr' hfg) hb
#align tendsto_nhds_unique_of_eventually_eq tendsto_nhds_unique_of_eventuallyEq
-/

#print tendsto_nhds_unique_of_frequently_eq /-
theorem tendsto_nhds_unique_of_frequently_eq [T2Space Œ±] {f g : Œ≤ ‚Üí Œ±} {l : Filter Œ≤} {a b : Œ±}
    (ha : Tendsto f l (ùìù a)) (hb : Tendsto g l (ùìù b)) (hfg : ‚àÉ·∂† x in l, f x = g x) : a = b :=
  have : ‚àÉ·∂† z : Œ± √ó Œ± in ùìù (a, b), z.1 = z.2 := (ha.prod_mk_nhds hb).Frequently hfg
  Classical.not_not.1 fun hne => this (isClosed_diagonal.isOpen_compl.mem_nhds hne)
#align tendsto_nhds_unique_of_frequently_eq tendsto_nhds_unique_of_frequently_eq
-/

#print T25Space /-
/-- A T‚ÇÇ.‚ÇÖ space, also known as a Urysohn space, is a topological space
  where for every pair `x ‚â† y`, there are two open sets, with the intersection of closures
  empty, one containing `x` and the other `y` . -/
class T25Space (Œ± : Type u) [TopologicalSpace Œ±] : Prop where
  t2_5 : ‚àÄ ‚¶Éx y : Œ±‚¶Ñ (h : x ‚â† y), Disjoint ((ùìù x).lift' closure) ((ùìù y).lift' closure)
#align t2_5_space T25Space
-/

/- warning: disjoint_lift'_closure_nhds -> disjoint_lift'_closure_nhds is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T25Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, Iff (Disjoint.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.completeLattice.{u1} Œ±))) (Filter.lift'.{u1, u1} Œ± Œ± (nhds.{u1} Œ± _inst_1 x) (closure.{u1} Œ± _inst_1)) (Filter.lift'.{u1, u1} Œ± Œ± (nhds.{u1} Œ± _inst_1 y) (closure.{u1} Œ± _inst_1))) (Ne.{succ u1} Œ± x y)
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T25Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, Iff (Disjoint.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.instCompleteLatticeFilter.{u1} Œ±))) (Filter.lift'.{u1, u1} Œ± Œ± (nhds.{u1} Œ± _inst_1 x) (closure.{u1} Œ± _inst_1)) (Filter.lift'.{u1, u1} Œ± Œ± (nhds.{u1} Œ± _inst_1 y) (closure.{u1} Œ± _inst_1))) (Ne.{succ u1} Œ± x y)
Case conversion may be inaccurate. Consider using '#align disjoint_lift'_closure_nhds disjoint_lift'_closure_nhds‚Çì'. -/
@[simp]
theorem disjoint_lift'_closure_nhds [T25Space Œ±] {x y : Œ±} :
    Disjoint ((ùìù x).lift' closure) ((ùìù y).lift' closure) ‚Üî x ‚â† y :=
  ‚ü®fun h hxy => by simpa [hxy, nhds_ne_bot.ne] using h, fun h => T25Space.t2_5 h‚ü©
#align disjoint_lift'_closure_nhds disjoint_lift'_closure_nhds

#print T25Space.t2Space /-
-- see Note [lower instance priority]
instance (priority := 100) T25Space.t2Space [T25Space Œ±] : T2Space Œ± :=
  t2Space_iff_disjoint_nhds.2 fun x y hne =>
    (disjoint_lift'_closure_nhds.2 hne).mono (le_lift'_closure _) (le_lift'_closure _)
#align t2_5_space.t2_space T25Space.t2Space
-/

/- warning: exists_nhds_disjoint_closure -> exists_nhds_disjoint_closure is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T25Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, (Ne.{succ u1} Œ± x y) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (s : Set.{u1} Œ±) => Exists.{0} (Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) s (nhds.{u1} Œ± _inst_1 x)) (fun (H : Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) s (nhds.{u1} Œ± _inst_1 x)) => Exists.{succ u1} (Set.{u1} Œ±) (fun (t : Set.{u1} Œ±) => Exists.{0} (Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) t (nhds.{u1} Œ± _inst_1 y)) (fun (H : Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) t (nhds.{u1} Œ± _inst_1 y)) => Disjoint.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.completeBooleanAlgebra.{u1} Œ±)))))) (GeneralizedBooleanAlgebra.toOrderBot.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toGeneralizedBooleanAlgebra.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±))) (closure.{u1} Œ± _inst_1 s) (closure.{u1} Œ± _inst_1 t))))))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T25Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, (Ne.{succ u1} Œ± x y) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (s : Set.{u1} Œ±) => And (Membership.mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (instMembershipSetFilter.{u1} Œ±) s (nhds.{u1} Œ± _inst_1 x)) (Exists.{succ u1} (Set.{u1} Œ±) (fun (t : Set.{u1} Œ±) => And (Membership.mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (instMembershipSetFilter.{u1} Œ±) t (nhds.{u1} Œ± _inst_1 y)) (Disjoint.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))) (BoundedOrder.toOrderBot.{u1} (Set.{u1} Œ±) (Preorder.toLE.{u1} (Set.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))))) (CompleteLattice.toBoundedOrder.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))) (closure.{u1} Œ± _inst_1 s) (closure.{u1} Œ± _inst_1 t))))))
Case conversion may be inaccurate. Consider using '#align exists_nhds_disjoint_closure exists_nhds_disjoint_closure‚Çì'. -/
theorem exists_nhds_disjoint_closure [T25Space Œ±] {x y : Œ±} (h : x ‚â† y) :
    ‚àÉ s ‚àà ùìù x, ‚àÉ t ‚àà ùìù y, Disjoint (closure s) (closure t) :=
  ((ùìù x).basis_sets.lift'_closure.disjoint_iff (ùìù y).basis_sets.lift'_closure).1 <|
    disjoint_lift'_closure_nhds.2 h
#align exists_nhds_disjoint_closure exists_nhds_disjoint_closure

/- warning: exists_open_nhds_disjoint_closure -> exists_open_nhds_disjoint_closure is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T25Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, (Ne.{succ u1} Œ± x y) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (u : Set.{u1} Œ±) => And (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x u) (And (IsOpen.{u1} Œ± _inst_1 u) (Exists.{succ u1} (Set.{u1} Œ±) (fun (v : Set.{u1} Œ±) => And (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) y v) (And (IsOpen.{u1} Œ± _inst_1 v) (Disjoint.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.completeBooleanAlgebra.{u1} Œ±)))))) (GeneralizedBooleanAlgebra.toOrderBot.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toGeneralizedBooleanAlgebra.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±))) (closure.{u1} Œ± _inst_1 u) (closure.{u1} Œ± _inst_1 v))))))))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T25Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, (Ne.{succ u1} Œ± x y) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (u : Set.{u1} Œ±) => And (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x u) (And (IsOpen.{u1} Œ± _inst_1 u) (Exists.{succ u1} (Set.{u1} Œ±) (fun (v : Set.{u1} Œ±) => And (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) y v) (And (IsOpen.{u1} Œ± _inst_1 v) (Disjoint.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))) (BoundedOrder.toOrderBot.{u1} (Set.{u1} Œ±) (Preorder.toLE.{u1} (Set.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))))) (CompleteLattice.toBoundedOrder.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))) (closure.{u1} Œ± _inst_1 u) (closure.{u1} Œ± _inst_1 v))))))))
Case conversion may be inaccurate. Consider using '#align exists_open_nhds_disjoint_closure exists_open_nhds_disjoint_closure‚Çì'. -/
theorem exists_open_nhds_disjoint_closure [T25Space Œ±] {x y : Œ±} (h : x ‚â† y) :
    ‚àÉ u : Set Œ±,
      x ‚àà u ‚àß IsOpen u ‚àß ‚àÉ v : Set Œ±, y ‚àà v ‚àß IsOpen v ‚àß Disjoint (closure u) (closure v) :=
  by
  simpa only [exists_prop, and_assoc] using
    ((nhds_basis_opens x).lift'_closure.disjoint_iff (nhds_basis_opens y).lift'_closure).1
      (disjoint_lift'_closure_nhds.2 h)
#align exists_open_nhds_disjoint_closure exists_open_nhds_disjoint_closure

section limUnder

variable [T2Space Œ±] {f : Filter Œ±}

/-!
### Properties of `Lim` and `lim`

In this section we use explicit `nonempty Œ±` instances for `Lim` and `lim`. This way the lemmas
are useful without a `nonempty Œ±` instance.
-/


/- warning: Lim_eq -> lim_eq is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T2Space.{u1} Œ± _inst_1] {f : Filter.{u1} Œ±} {a : Œ±} [_inst_3 : Filter.NeBot.{u1} Œ± f], (LE.le.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±))) f (nhds.{u1} Œ± _inst_1 a)) -> (Eq.{succ u1} Œ± (lim.{u1} Œ± _inst_1 (Nonempty.intro.{succ u1} Œ± a) f) a)
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T2Space.{u1} Œ± _inst_1] {f : Filter.{u1} Œ±} {a : Œ±} [_inst_3 : Filter.NeBot.{u1} Œ± f], (LE.le.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±))) f (nhds.{u1} Œ± _inst_1 a)) -> (Eq.{succ u1} Œ± (lim.{u1} Œ± _inst_1 (Nonempty.intro.{succ u1} Œ± a) f) a)
Case conversion may be inaccurate. Consider using '#align Lim_eq lim_eq‚Çì'. -/
theorem lim_eq {a : Œ±} [NeBot f] (h : f ‚â§ ùìù a) : @lim _ _ ‚ü®a‚ü© f = a :=
  tendsto_nhds_unique (le_nhds_lim ‚ü®a, h‚ü©) h
#align Lim_eq lim_eq

/- warning: Lim_eq_iff -> lim_eq_iff is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T2Space.{u1} Œ± _inst_1] {f : Filter.{u1} Œ±} [_inst_3 : Filter.NeBot.{u1} Œ± f], (Exists.{succ u1} Œ± (fun (a : Œ±) => LE.le.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±))) f (nhds.{u1} Œ± _inst_1 a))) -> (forall {a : Œ±}, Iff (Eq.{succ u1} Œ± (lim.{u1} Œ± _inst_1 (Nonempty.intro.{succ u1} Œ± a) f) a) (LE.le.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±))) f (nhds.{u1} Œ± _inst_1 a)))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T2Space.{u1} Œ± _inst_1] {f : Filter.{u1} Œ±} [_inst_3 : Filter.NeBot.{u1} Œ± f], (Exists.{succ u1} Œ± (fun (a : Œ±) => LE.le.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±))) f (nhds.{u1} Œ± _inst_1 a))) -> (forall {a : Œ±}, Iff (Eq.{succ u1} Œ± (lim.{u1} Œ± _inst_1 (Nonempty.intro.{succ u1} Œ± a) f) a) (LE.le.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±))) f (nhds.{u1} Œ± _inst_1 a)))
Case conversion may be inaccurate. Consider using '#align Lim_eq_iff lim_eq_iff‚Çì'. -/
theorem lim_eq_iff [NeBot f] (h : ‚àÉ a : Œ±, f ‚â§ nhds a) {a} : @lim _ _ ‚ü®a‚ü© f = a ‚Üî f ‚â§ ùìù a :=
  ‚ü®fun c => c ‚ñ∏ le_nhds_lim h, lim_eq‚ü©
#align Lim_eq_iff lim_eq_iff

/- warning: ultrafilter.Lim_eq_iff_le_nhds -> Ultrafilter.lim_eq_iff_le_nhds is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T2Space.{u1} Œ± _inst_1] [_inst_3 : CompactSpace.{u1} Œ± _inst_1] {x : Œ±} {F : Ultrafilter.{u1} Œ±}, Iff (Eq.{succ u1} Œ± (Ultrafilter.lim.{u1} Œ± _inst_1 F) x) (LE.le.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±))) ((fun (a : Type.{u1}) (b : Type.{u1}) [self : HasLiftT.{succ u1, succ u1} a b] => self.0) (Ultrafilter.{u1} Œ±) (Filter.{u1} Œ±) (HasLiftT.mk.{succ u1, succ u1} (Ultrafilter.{u1} Œ±) (Filter.{u1} Œ±) (CoeTC‚Çì.coe.{succ u1, succ u1} (Ultrafilter.{u1} Œ±) (Filter.{u1} Œ±) (Ultrafilter.Filter.hasCoeT.{u1} Œ±))) F) (nhds.{u1} Œ± _inst_1 x))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T2Space.{u1} Œ± _inst_1] [_inst_3 : CompactSpace.{u1} Œ± _inst_1] {x : Œ±} {F : Ultrafilter.{u1} Œ±}, Iff (Eq.{succ u1} Œ± (Ultrafilter.lim.{u1} Œ± _inst_1 F) x) (LE.le.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±))) (Ultrafilter.toFilter.{u1} Œ± F) (nhds.{u1} Œ± _inst_1 x))
Case conversion may be inaccurate. Consider using '#align ultrafilter.Lim_eq_iff_le_nhds Ultrafilter.lim_eq_iff_le_nhds‚Çì'. -/
theorem Ultrafilter.lim_eq_iff_le_nhds [CompactSpace Œ±] {x : Œ±} {F : Ultrafilter Œ±} :
    F.lim = x ‚Üî ‚ÜëF ‚â§ ùìù x :=
  ‚ü®fun h => h ‚ñ∏ F.le_nhds_lim, lim_eq‚ü©
#align ultrafilter.Lim_eq_iff_le_nhds Ultrafilter.lim_eq_iff_le_nhds

#print isOpen_iff_ultrafilter' /-
theorem isOpen_iff_ultrafilter' [CompactSpace Œ±] (U : Set Œ±) :
    IsOpen U ‚Üî ‚àÄ F : Ultrafilter Œ±, F.lim ‚àà U ‚Üí U ‚àà F.1 :=
  by
  rw [isOpen_iff_ultrafilter]
  refine' ‚ü®fun h F hF => h F.lim hF F F.le_nhds_lim, _‚ü©
  intro cond x hx f h
  rw [‚Üê Ultrafilter.lim_eq_iff_le_nhds.2 h] at hx
  exact cond _ hx
#align is_open_iff_ultrafilter' isOpen_iff_ultrafilter'
-/

#print Filter.Tendsto.limUnder_eq /-
theorem Filter.Tendsto.limUnder_eq {a : Œ±} {f : Filter Œ≤} [NeBot f] {g : Œ≤ ‚Üí Œ±}
    (h : Tendsto g f (ùìù a)) : @limUnder _ _ _ ‚ü®a‚ü© f g = a :=
  lim_eq h
#align filter.tendsto.lim_eq Filter.Tendsto.limUnder_eq
-/

#print Filter.limUnder_eq_iff /-
theorem Filter.limUnder_eq_iff {f : Filter Œ≤} [NeBot f] {g : Œ≤ ‚Üí Œ±} (h : ‚àÉ a, Tendsto g f (ùìù a))
    {a} : @limUnder _ _ _ ‚ü®a‚ü© f g = a ‚Üî Tendsto g f (ùìù a) :=
  ‚ü®fun c => c ‚ñ∏ tendsto_nhds_limUnder h, Filter.Tendsto.limUnder_eq‚ü©
#align filter.lim_eq_iff Filter.limUnder_eq_iff
-/

#print Continuous.limUnder_eq /-
theorem Continuous.limUnder_eq [TopologicalSpace Œ≤] {f : Œ≤ ‚Üí Œ±} (h : Continuous f) (a : Œ≤) :
    @limUnder _ _ _ ‚ü®f a‚ü© (ùìù a) f = f a :=
  (h.Tendsto a).limUnder_eq
#align continuous.lim_eq Continuous.limUnder_eq
-/

#print lim_nhds /-
@[simp]
theorem lim_nhds (a : Œ±) : @lim _ _ ‚ü®a‚ü© (ùìù a) = a :=
  lim_eq le_rfl
#align Lim_nhds lim_nhds
-/

#print limUnder_nhds_id /-
@[simp]
theorem limUnder_nhds_id (a : Œ±) : @limUnder _ _ _ ‚ü®a‚ü© (ùìù a) id = a :=
  lim_nhds a
#align lim_nhds_id limUnder_nhds_id
-/

#print lim_nhdsWithin /-
@[simp]
theorem lim_nhdsWithin {a : Œ±} {s : Set Œ±} (h : a ‚àà closure s) : @lim _ _ ‚ü®a‚ü© (ùìù[s] a) = a :=
  haveI : ne_bot (ùìù[s] a) := mem_closure_iff_clusterPt.1 h
  lim_eq inf_le_left
#align Lim_nhds_within lim_nhdsWithin
-/

#print limUnder_nhdsWithin_id /-
@[simp]
theorem limUnder_nhdsWithin_id {a : Œ±} {s : Set Œ±} (h : a ‚àà closure s) :
    @limUnder _ _ _ ‚ü®a‚ü© (ùìù[s] a) id = a :=
  lim_nhdsWithin h
#align lim_nhds_within_id limUnder_nhdsWithin_id
-/

end limUnder

/-!
### `t2_space` constructions

We use two lemmas to prove that various standard constructions generate Hausdorff spaces from
Hausdorff spaces:

* `separated_by_continuous` says that two points `x y : Œ±` can be separated by open neighborhoods
  provided that there exists a continuous map `f : Œ± ‚Üí Œ≤` with a Hausdorff codomain such that
  `f x ‚â† f y`. We use this lemma to prove that topological spaces defined using `induced` are
  Hausdorff spaces.

* `separated_by_open_embedding` says that for an open embedding `f : Œ± ‚Üí Œ≤` of a Hausdorff space
  `Œ±`, the images of two distinct points `x y : Œ±`, `x ‚â† y` can be separated by open neighborhoods.
  We use this lemma to prove that topological spaces defined using `coinduced` are Hausdorff spaces.
-/


#print DiscreteTopology.toT2Space /-
-- see Note [lower instance priority]
instance (priority := 100) DiscreteTopology.toT2Space {Œ± : Type _} [TopologicalSpace Œ±]
    [DiscreteTopology Œ±] : T2Space Œ± :=
  ‚ü®fun x y h => ‚ü®{x}, {y}, isOpen_discrete _, isOpen_discrete _, rfl, rfl, disjoint_singleton.2 h‚ü©‚ü©
#align discrete_topology.to_t2_space DiscreteTopology.toT2Space
-/

/- warning: separated_by_continuous -> separated_by_continuous is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_2 : TopologicalSpace.{u1} Œ±] [_inst_3 : TopologicalSpace.{u2} Œ≤] [_inst_4 : T2Space.{u2} Œ≤ _inst_3] {f : Œ± -> Œ≤}, (Continuous.{u1, u2} Œ± Œ≤ _inst_2 _inst_3 f) -> (forall {x : Œ±} {y : Œ±}, (Ne.{succ u2} Œ≤ (f x) (f y)) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (u : Set.{u1} Œ±) => Exists.{succ u1} (Set.{u1} Œ±) (fun (v : Set.{u1} Œ±) => And (IsOpen.{u1} Œ± _inst_2 u) (And (IsOpen.{u1} Œ± _inst_2 v) (And (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x u) (And (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) y v) (Disjoint.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.completeBooleanAlgebra.{u1} Œ±)))))) (GeneralizedBooleanAlgebra.toOrderBot.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toGeneralizedBooleanAlgebra.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±))) u v))))))))
but is expected to have type
  forall {Œ± : Type.{u2}} {Œ≤ : Type.{u1}} [_inst_2 : TopologicalSpace.{u2} Œ±] [_inst_3 : TopologicalSpace.{u1} Œ≤] [_inst_4 : T2Space.{u1} Œ≤ _inst_3] {f : Œ± -> Œ≤}, (Continuous.{u2, u1} Œ± Œ≤ _inst_2 _inst_3 f) -> (forall {x : Œ±} {y : Œ±}, (Ne.{succ u1} Œ≤ (f x) (f y)) -> (Exists.{succ u2} (Set.{u2} Œ±) (fun (u : Set.{u2} Œ±) => Exists.{succ u2} (Set.{u2} Œ±) (fun (v : Set.{u2} Œ±) => And (IsOpen.{u2} Œ± _inst_2 u) (And (IsOpen.{u2} Œ± _inst_2 v) (And (Membership.mem.{u2, u2} Œ± (Set.{u2} Œ±) (Set.instMembershipSet.{u2} Œ±) x u) (And (Membership.mem.{u2, u2} Œ± (Set.{u2} Œ±) (Set.instMembershipSet.{u2} Œ±) y v) (Disjoint.{u2} (Set.{u2} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u2} (Set.{u2} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Set.{u2} Œ±) (Order.Coframe.toCompleteLattice.{u2} (Set.{u2} Œ±) (CompleteDistribLattice.toCoframe.{u2} (Set.{u2} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u2} (Set.{u2} Œ±) (Set.instCompleteBooleanAlgebraSet.{u2} Œ±)))))) (BoundedOrder.toOrderBot.{u2} (Set.{u2} Œ±) (Preorder.toLE.{u2} (Set.{u2} Œ±) (PartialOrder.toPreorder.{u2} (Set.{u2} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u2} (Set.{u2} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Set.{u2} Œ±) (Order.Coframe.toCompleteLattice.{u2} (Set.{u2} Œ±) (CompleteDistribLattice.toCoframe.{u2} (Set.{u2} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u2} (Set.{u2} Œ±) (Set.instCompleteBooleanAlgebraSet.{u2} Œ±)))))))) (CompleteLattice.toBoundedOrder.{u2} (Set.{u2} Œ±) (Order.Coframe.toCompleteLattice.{u2} (Set.{u2} Œ±) (CompleteDistribLattice.toCoframe.{u2} (Set.{u2} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u2} (Set.{u2} Œ±) (Set.instCompleteBooleanAlgebraSet.{u2} Œ±)))))) u v))))))))
Case conversion may be inaccurate. Consider using '#align separated_by_continuous separated_by_continuous‚Çì'. -/
theorem separated_by_continuous {Œ± : Type _} {Œ≤ : Type _} [TopologicalSpace Œ±] [TopologicalSpace Œ≤]
    [T2Space Œ≤] {f : Œ± ‚Üí Œ≤} (hf : Continuous f) {x y : Œ±} (h : f x ‚â† f y) :
    ‚àÉ u v : Set Œ±, IsOpen u ‚àß IsOpen v ‚àß x ‚àà u ‚àß y ‚àà v ‚àß Disjoint u v :=
  let ‚ü®u, v, uo, vo, xu, yv, uv‚ü© := t2_separation h
  ‚ü®f ‚Åª¬π' u, f ‚Åª¬π' v, uo.Preimage hf, vo.Preimage hf, xu, yv, uv.Preimage _‚ü©
#align separated_by_continuous separated_by_continuous

/- warning: separated_by_open_embedding -> separated_by_openEmbedding is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_2 : TopologicalSpace.{u1} Œ±] [_inst_3 : TopologicalSpace.{u2} Œ≤] [_inst_4 : T2Space.{u1} Œ± _inst_2] {f : Œ± -> Œ≤}, (OpenEmbedding.{u1, u2} Œ± Œ≤ _inst_2 _inst_3 f) -> (forall {x : Œ±} {y : Œ±}, (Ne.{succ u1} Œ± x y) -> (Exists.{succ u2} (Set.{u2} Œ≤) (fun (u : Set.{u2} Œ≤) => Exists.{succ u2} (Set.{u2} Œ≤) (fun (v : Set.{u2} Œ≤) => And (IsOpen.{u2} Œ≤ _inst_3 u) (And (IsOpen.{u2} Œ≤ _inst_3 v) (And (Membership.Mem.{u2, u2} Œ≤ (Set.{u2} Œ≤) (Set.hasMem.{u2} Œ≤) (f x) u) (And (Membership.Mem.{u2, u2} Œ≤ (Set.{u2} Œ≤) (Set.hasMem.{u2} Œ≤) (f y) v) (Disjoint.{u2} (Set.{u2} Œ≤) (CompleteSemilatticeInf.toPartialOrder.{u2} (Set.{u2} Œ≤) (CompleteLattice.toCompleteSemilatticeInf.{u2} (Set.{u2} Œ≤) (Order.Coframe.toCompleteLattice.{u2} (Set.{u2} Œ≤) (CompleteDistribLattice.toCoframe.{u2} (Set.{u2} Œ≤) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u2} (Set.{u2} Œ≤) (Set.completeBooleanAlgebra.{u2} Œ≤)))))) (GeneralizedBooleanAlgebra.toOrderBot.{u2} (Set.{u2} Œ≤) (BooleanAlgebra.toGeneralizedBooleanAlgebra.{u2} (Set.{u2} Œ≤) (Set.booleanAlgebra.{u2} Œ≤))) u v))))))))
but is expected to have type
  forall {Œ± : Type.{u2}} {Œ≤ : Type.{u1}} [_inst_2 : TopologicalSpace.{u2} Œ±] [_inst_3 : TopologicalSpace.{u1} Œ≤] [_inst_4 : T2Space.{u2} Œ± _inst_2] {f : Œ± -> Œ≤}, (OpenEmbedding.{u2, u1} Œ± Œ≤ _inst_2 _inst_3 f) -> (forall {x : Œ±} {y : Œ±}, (Ne.{succ u2} Œ± x y) -> (Exists.{succ u1} (Set.{u1} Œ≤) (fun (u : Set.{u1} Œ≤) => Exists.{succ u1} (Set.{u1} Œ≤) (fun (v : Set.{u1} Œ≤) => And (IsOpen.{u1} Œ≤ _inst_3 u) (And (IsOpen.{u1} Œ≤ _inst_3 v) (And (Membership.mem.{u1, u1} Œ≤ (Set.{u1} Œ≤) (Set.instMembershipSet.{u1} Œ≤) (f x) u) (And (Membership.mem.{u1, u1} Œ≤ (Set.{u1} Œ≤) (Set.instMembershipSet.{u1} Œ≤) (f y) v) (Disjoint.{u1} (Set.{u1} Œ≤) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ≤) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ≤) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ≤) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ≤) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ≤) (Set.instCompleteBooleanAlgebraSet.{u1} Œ≤)))))) (BoundedOrder.toOrderBot.{u1} (Set.{u1} Œ≤) (Preorder.toLE.{u1} (Set.{u1} Œ≤) (PartialOrder.toPreorder.{u1} (Set.{u1} Œ≤) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ≤) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ≤) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ≤) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ≤) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ≤) (Set.instCompleteBooleanAlgebraSet.{u1} Œ≤)))))))) (CompleteLattice.toBoundedOrder.{u1} (Set.{u1} Œ≤) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ≤) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ≤) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ≤) (Set.instCompleteBooleanAlgebraSet.{u1} Œ≤)))))) u v))))))))
Case conversion may be inaccurate. Consider using '#align separated_by_open_embedding separated_by_openEmbedding‚Çì'. -/
theorem separated_by_openEmbedding {Œ± Œ≤ : Type _} [TopologicalSpace Œ±] [TopologicalSpace Œ≤]
    [T2Space Œ±] {f : Œ± ‚Üí Œ≤} (hf : OpenEmbedding f) {x y : Œ±} (h : x ‚â† y) :
    ‚àÉ u v : Set Œ≤, IsOpen u ‚àß IsOpen v ‚àß f x ‚àà u ‚àß f y ‚àà v ‚àß Disjoint u v :=
  let ‚ü®u, v, uo, vo, xu, yv, uv‚ü© := t2_separation h
  ‚ü®f '' u, f '' v, hf.IsOpenMap _ uo, hf.IsOpenMap _ vo, mem_image_of_mem _ xu,
    mem_image_of_mem _ yv, disjoint_image_of_injective hf.inj uv‚ü©
#align separated_by_open_embedding separated_by_openEmbedding

instance {Œ± : Type _} {p : Œ± ‚Üí Prop} [t : TopologicalSpace Œ±] [T2Space Œ±] : T2Space (Subtype p) :=
  ‚ü®fun x y h => separated_by_continuous continuous_subtype_val (mt Subtype.eq h)‚ü©

instance {Œ± : Type _} {Œ≤ : Type _} [t‚ÇÅ : TopologicalSpace Œ±] [T2Space Œ±] [t‚ÇÇ : TopologicalSpace Œ≤]
    [T2Space Œ≤] : T2Space (Œ± √ó Œ≤) :=
  ‚ü®fun ‚ü®x‚ÇÅ, x‚ÇÇ‚ü© ‚ü®y‚ÇÅ, y‚ÇÇ‚ü© h =>
    Or.elim (not_and_or.mp (mt Prod.ext_iff.mpr h))
      (fun h‚ÇÅ => separated_by_continuous continuous_fst h‚ÇÅ) fun h‚ÇÇ =>
      separated_by_continuous continuous_snd h‚ÇÇ‚ü©

#print Embedding.t2Space /-
theorem Embedding.t2Space [TopologicalSpace Œ≤] [T2Space Œ≤] {f : Œ± ‚Üí Œ≤} (hf : Embedding f) :
    T2Space Œ± :=
  ‚ü®fun x y h => separated_by_continuous hf.Continuous (hf.inj.Ne h)‚ü©
#align embedding.t2_space Embedding.t2Space
-/

instance {Œ± : Type _} {Œ≤ : Type _} [t‚ÇÅ : TopologicalSpace Œ±] [T2Space Œ±] [t‚ÇÇ : TopologicalSpace Œ≤]
    [T2Space Œ≤] : T2Space (Sum Œ± Œ≤) := by
  constructor
  rintro (x | x) (y | y) h
  ¬∑ replace h : x ‚â† y := fun c => (c.subst h) rfl
    exact separated_by_openEmbedding openEmbedding_inl h
  ¬∑
    exact
      ‚ü®_, _, isOpen_range_inl, isOpen_range_inr, ‚ü®x, rfl‚ü©, ‚ü®y, rfl‚ü©,
        is_compl_range_inl_range_inr.disjoint‚ü©
  ¬∑
    exact
      ‚ü®_, _, isOpen_range_inr, isOpen_range_inl, ‚ü®x, rfl‚ü©, ‚ü®y, rfl‚ü©,
        is_compl_range_inl_range_inr.disjoint.symm‚ü©
  ¬∑ replace h : x ‚â† y := fun c => (c.subst h) rfl
    exact separated_by_openEmbedding openEmbedding_inr h

#print Pi.t2Space /-
instance Pi.t2Space {Œ± : Type _} {Œ≤ : Œ± ‚Üí Type v} [t‚ÇÇ : ‚àÄ a, TopologicalSpace (Œ≤ a)]
    [‚àÄ a, T2Space (Œ≤ a)] : T2Space (‚àÄ a, Œ≤ a) :=
  ‚ü®fun x y h =>
    let ‚ü®i, hi‚ü© := not_forall.mp (mt funext h)
    separated_by_continuous (continuous_apply i) hi‚ü©
#align Pi.t2_space Pi.t2Space
-/

/- warning: sigma.t2_space -> Sigma.t2Space is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {Œ± : Œπ -> Type.{u2}} [_inst_2 : forall (i : Œπ), TopologicalSpace.{u2} (Œ± i)] [_inst_3 : forall (a : Œπ), T2Space.{u2} (Œ± a) (_inst_2 a)], T2Space.{max u1 u2} (Sigma.{u1, u2} Œπ (fun (i : Œπ) => Œ± i)) (Sigma.topologicalSpace.{u1, u2} Œπ (fun (i : Œπ) => Œ± i) (fun (a : Œπ) => _inst_2 a))
but is expected to have type
  forall {Œπ : Type.{u1}} {Œ± : Œπ -> Type.{u2}} [_inst_2 : forall (i : Œπ), TopologicalSpace.{u2} (Œ± i)] [_inst_3 : forall (a : Œπ), T2Space.{u2} (Œ± a) (_inst_2 a)], T2Space.{max u2 u1} (Sigma.{u1, u2} Œπ (fun (i : Œπ) => Œ± i)) (instTopologicalSpaceSigma.{u1, u2} Œπ (fun (i : Œπ) => Œ± i) (fun (a : Œπ) => _inst_2 a))
Case conversion may be inaccurate. Consider using '#align sigma.t2_space Sigma.t2Space‚Çì'. -/
instance Sigma.t2Space {Œπ : Type _} {Œ± : Œπ ‚Üí Type _} [‚àÄ i, TopologicalSpace (Œ± i)]
    [‚àÄ a, T2Space (Œ± a)] : T2Space (Œ£i, Œ± i) :=
  by
  constructor
  rintro ‚ü®i, x‚ü© ‚ü®j, y‚ü© neq
  rcases em (i = j) with (rfl | h)
  ¬∑ replace neq : x ‚â† y := fun c => (c.subst neq) rfl
    exact separated_by_openEmbedding openEmbedding_sigmaMk neq
  ¬∑
    exact
      ‚ü®_, _, isOpen_range_sigmaMk, isOpen_range_sigmaMk, ‚ü®x, rfl‚ü©, ‚ü®y, rfl‚ü©,
        set.disjoint_left.mpr <| by tidy‚ü©
#align sigma.t2_space Sigma.t2Space

variable {Œ≥ : Type _} [TopologicalSpace Œ≤] [TopologicalSpace Œ≥]

#print isClosed_eq /-
theorem isClosed_eq [T2Space Œ±] {f g : Œ≤ ‚Üí Œ±} (hf : Continuous f) (hg : Continuous g) :
    IsClosed { x : Œ≤ | f x = g x } :=
  continuous_iff_isClosed.mp (hf.prod_mk hg) _ isClosed_diagonal
#align is_closed_eq isClosed_eq
-/

#print isOpen_ne_fun /-
theorem isOpen_ne_fun [T2Space Œ±] {f g : Œ≤ ‚Üí Œ±} (hf : Continuous f) (hg : Continuous g) :
    IsOpen { x : Œ≤ | f x ‚â† g x } :=
  isOpen_compl_iff.mpr <| isClosed_eq hf hg
#align is_open_ne_fun isOpen_ne_fun
-/

#print Set.EqOn.closure /-
/-- If two continuous maps are equal on `s`, then they are equal on the closure of `s`. See also
`set.eq_on.of_subset_closure` for a more general version. -/
theorem Set.EqOn.closure [T2Space Œ±] {s : Set Œ≤} {f g : Œ≤ ‚Üí Œ±} (h : EqOn f g s) (hf : Continuous f)
    (hg : Continuous g) : EqOn f g (closure s) :=
  closure_minimal h (isClosed_eq hf hg)
#align set.eq_on.closure Set.EqOn.closure
-/

#print Continuous.ext_on /-
/-- If two continuous functions are equal on a dense set, then they are equal. -/
theorem Continuous.ext_on [T2Space Œ±] {s : Set Œ≤} (hs : Dense s) {f g : Œ≤ ‚Üí Œ±} (hf : Continuous f)
    (hg : Continuous g) (h : EqOn f g s) : f = g :=
  funext fun x => h.closure hf hg (hs x)
#align continuous.ext_on Continuous.ext_on
-/

/- warning: eq_on_closure‚ÇÇ' -> eqOn_closure‚ÇÇ' is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} Œ±] {Œ≥ : Type.{u3}} [_inst_2 : TopologicalSpace.{u2} Œ≤] [_inst_3 : TopologicalSpace.{u3} Œ≥] [_inst_4 : T2Space.{u1} Œ± _inst_1] {s : Set.{u2} Œ≤} {t : Set.{u3} Œ≥} {f : Œ≤ -> Œ≥ -> Œ±} {g : Œ≤ -> Œ≥ -> Œ±}, (forall (x : Œ≤), (Membership.Mem.{u2, u2} Œ≤ (Set.{u2} Œ≤) (Set.hasMem.{u2} Œ≤) x s) -> (forall (y : Œ≥), (Membership.Mem.{u3, u3} Œ≥ (Set.{u3} Œ≥) (Set.hasMem.{u3} Œ≥) y t) -> (Eq.{succ u1} Œ± (f x y) (g x y)))) -> (forall (x : Œ≤), Continuous.{u3, u1} Œ≥ Œ± _inst_3 _inst_1 (f x)) -> (forall (y : Œ≥), Continuous.{u2, u1} Œ≤ Œ± _inst_2 _inst_1 (fun (x : Œ≤) => f x y)) -> (forall (x : Œ≤), Continuous.{u3, u1} Œ≥ Œ± _inst_3 _inst_1 (g x)) -> (forall (y : Œ≥), Continuous.{u2, u1} Œ≤ Œ± _inst_2 _inst_1 (fun (x : Œ≤) => g x y)) -> (forall (x : Œ≤), (Membership.Mem.{u2, u2} Œ≤ (Set.{u2} Œ≤) (Set.hasMem.{u2} Œ≤) x (closure.{u2} Œ≤ _inst_2 s)) -> (forall (y : Œ≥), (Membership.Mem.{u3, u3} Œ≥ (Set.{u3} Œ≥) (Set.hasMem.{u3} Œ≥) y (closure.{u3} Œ≥ _inst_3 t)) -> (Eq.{succ u1} Œ± (f x y) (g x y))))
but is expected to have type
  forall {Œ± : Type.{u2}} {Œ≤ : Type.{u3}} [_inst_1 : TopologicalSpace.{u2} Œ±] {Œ≥ : Type.{u1}} [_inst_2 : TopologicalSpace.{u3} Œ≤] [_inst_3 : TopologicalSpace.{u1} Œ≥] [_inst_4 : T2Space.{u2} Œ± _inst_1] {s : Set.{u3} Œ≤} {t : Set.{u1} Œ≥} {f : Œ≤ -> Œ≥ -> Œ±} {g : Œ≤ -> Œ≥ -> Œ±}, (forall (x : Œ≤), (Membership.mem.{u3, u3} Œ≤ (Set.{u3} Œ≤) (Set.instMembershipSet.{u3} Œ≤) x s) -> (forall (y : Œ≥), (Membership.mem.{u1, u1} Œ≥ (Set.{u1} Œ≥) (Set.instMembershipSet.{u1} Œ≥) y t) -> (Eq.{succ u2} Œ± (f x y) (g x y)))) -> (forall (x : Œ≤), Continuous.{u1, u2} Œ≥ Œ± _inst_3 _inst_1 (f x)) -> (forall (y : Œ≥), Continuous.{u3, u2} Œ≤ Œ± _inst_2 _inst_1 (fun (x : Œ≤) => f x y)) -> (forall (x : Œ≤), Continuous.{u1, u2} Œ≥ Œ± _inst_3 _inst_1 (g x)) -> (forall (y : Œ≥), Continuous.{u3, u2} Œ≤ Œ± _inst_2 _inst_1 (fun (x : Œ≤) => g x y)) -> (forall (x : Œ≤), (Membership.mem.{u3, u3} Œ≤ (Set.{u3} Œ≤) (Set.instMembershipSet.{u3} Œ≤) x (closure.{u3} Œ≤ _inst_2 s)) -> (forall (y : Œ≥), (Membership.mem.{u1, u1} Œ≥ (Set.{u1} Œ≥) (Set.instMembershipSet.{u1} Œ≥) y (closure.{u1} Œ≥ _inst_3 t)) -> (Eq.{succ u2} Œ± (f x y) (g x y))))
Case conversion may be inaccurate. Consider using '#align eq_on_closure‚ÇÇ' eqOn_closure‚ÇÇ'‚Çì'. -/
theorem eqOn_closure‚ÇÇ' [T2Space Œ±] {s : Set Œ≤} {t : Set Œ≥} {f g : Œ≤ ‚Üí Œ≥ ‚Üí Œ±}
    (h : ‚àÄ x ‚àà s, ‚àÄ y ‚àà t, f x y = g x y) (hf‚ÇÅ : ‚àÄ x, Continuous (f x))
    (hf‚ÇÇ : ‚àÄ y, Continuous fun x => f x y) (hg‚ÇÅ : ‚àÄ x, Continuous (g x))
    (hg‚ÇÇ : ‚àÄ y, Continuous fun x => g x y) : ‚àÄ x ‚àà closure s, ‚àÄ y ‚àà closure t, f x y = g x y :=
  suffices closure s ‚äÜ ‚ãÇ y ‚àà closure t, { x | f x y = g x y } by simpa only [subset_def, mem_Inter]
  (closure_minimal fun x hx => mem_inter·µ¢‚ÇÇ.2 <| Set.EqOn.closure (h x hx) (hf‚ÇÅ _) (hg‚ÇÅ _)) <|
    isClosed_binter·µ¢ fun y hy => isClosed_eq (hf‚ÇÇ _) (hg‚ÇÇ _)
#align eq_on_closure‚ÇÇ' eqOn_closure‚ÇÇ'

/- warning: eq_on_closure‚ÇÇ -> eqOn_closure‚ÇÇ is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} Œ±] {Œ≥ : Type.{u3}} [_inst_2 : TopologicalSpace.{u2} Œ≤] [_inst_3 : TopologicalSpace.{u3} Œ≥] [_inst_4 : T2Space.{u1} Œ± _inst_1] {s : Set.{u2} Œ≤} {t : Set.{u3} Œ≥} {f : Œ≤ -> Œ≥ -> Œ±} {g : Œ≤ -> Œ≥ -> Œ±}, (forall (x : Œ≤), (Membership.Mem.{u2, u2} Œ≤ (Set.{u2} Œ≤) (Set.hasMem.{u2} Œ≤) x s) -> (forall (y : Œ≥), (Membership.Mem.{u3, u3} Œ≥ (Set.{u3} Œ≥) (Set.hasMem.{u3} Œ≥) y t) -> (Eq.{succ u1} Œ± (f x y) (g x y)))) -> (Continuous.{max u2 u3, u1} (Prod.{u2, u3} Œ≤ Œ≥) Œ± (Prod.topologicalSpace.{u2, u3} Œ≤ Œ≥ _inst_2 _inst_3) _inst_1 (Function.uncurry.{u2, u3, u1} Œ≤ Œ≥ Œ± f)) -> (Continuous.{max u2 u3, u1} (Prod.{u2, u3} Œ≤ Œ≥) Œ± (Prod.topologicalSpace.{u2, u3} Œ≤ Œ≥ _inst_2 _inst_3) _inst_1 (Function.uncurry.{u2, u3, u1} Œ≤ Œ≥ Œ± g)) -> (forall (x : Œ≤), (Membership.Mem.{u2, u2} Œ≤ (Set.{u2} Œ≤) (Set.hasMem.{u2} Œ≤) x (closure.{u2} Œ≤ _inst_2 s)) -> (forall (y : Œ≥), (Membership.Mem.{u3, u3} Œ≥ (Set.{u3} Œ≥) (Set.hasMem.{u3} Œ≥) y (closure.{u3} Œ≥ _inst_3 t)) -> (Eq.{succ u1} Œ± (f x y) (g x y))))
but is expected to have type
  forall {Œ± : Type.{u2}} {Œ≤ : Type.{u3}} [_inst_1 : TopologicalSpace.{u2} Œ±] {Œ≥ : Type.{u1}} [_inst_2 : TopologicalSpace.{u3} Œ≤] [_inst_3 : TopologicalSpace.{u1} Œ≥] [_inst_4 : T2Space.{u2} Œ± _inst_1] {s : Set.{u3} Œ≤} {t : Set.{u1} Œ≥} {f : Œ≤ -> Œ≥ -> Œ±} {g : Œ≤ -> Œ≥ -> Œ±}, (forall (x : Œ≤), (Membership.mem.{u3, u3} Œ≤ (Set.{u3} Œ≤) (Set.instMembershipSet.{u3} Œ≤) x s) -> (forall (y : Œ≥), (Membership.mem.{u1, u1} Œ≥ (Set.{u1} Œ≥) (Set.instMembershipSet.{u1} Œ≥) y t) -> (Eq.{succ u2} Œ± (f x y) (g x y)))) -> (Continuous.{max u1 u3, u2} (Prod.{u3, u1} Œ≤ Œ≥) Œ± (instTopologicalSpaceProd.{u3, u1} Œ≤ Œ≥ _inst_2 _inst_3) _inst_1 (Function.uncurry.{u3, u1, u2} Œ≤ Œ≥ Œ± f)) -> (Continuous.{max u1 u3, u2} (Prod.{u3, u1} Œ≤ Œ≥) Œ± (instTopologicalSpaceProd.{u3, u1} Œ≤ Œ≥ _inst_2 _inst_3) _inst_1 (Function.uncurry.{u3, u1, u2} Œ≤ Œ≥ Œ± g)) -> (forall (x : Œ≤), (Membership.mem.{u3, u3} Œ≤ (Set.{u3} Œ≤) (Set.instMembershipSet.{u3} Œ≤) x (closure.{u3} Œ≤ _inst_2 s)) -> (forall (y : Œ≥), (Membership.mem.{u1, u1} Œ≥ (Set.{u1} Œ≥) (Set.instMembershipSet.{u1} Œ≥) y (closure.{u1} Œ≥ _inst_3 t)) -> (Eq.{succ u2} Œ± (f x y) (g x y))))
Case conversion may be inaccurate. Consider using '#align eq_on_closure‚ÇÇ eqOn_closure‚ÇÇ‚Çì'. -/
theorem eqOn_closure‚ÇÇ [T2Space Œ±] {s : Set Œ≤} {t : Set Œ≥} {f g : Œ≤ ‚Üí Œ≥ ‚Üí Œ±}
    (h : ‚àÄ x ‚àà s, ‚àÄ y ‚àà t, f x y = g x y) (hf : Continuous (uncurry f))
    (hg : Continuous (uncurry g)) : ‚àÄ x ‚àà closure s, ‚àÄ y ‚àà closure t, f x y = g x y :=
  eqOn_closure‚ÇÇ' h (fun x => continuous_uncurry_left x hf) (fun x => continuous_uncurry_right x hf)
    (fun y => continuous_uncurry_left y hg) fun y => continuous_uncurry_right y hg
#align eq_on_closure‚ÇÇ eqOn_closure‚ÇÇ

#print Set.EqOn.of_subset_closure /-
/-- If `f x = g x` for all `x ‚àà s` and `f`, `g` are continuous on `t`, `s ‚äÜ t ‚äÜ closure s`, then
`f x = g x` for all `x ‚àà t`. See also `set.eq_on.closure`. -/
theorem Set.EqOn.of_subset_closure [T2Space Œ±] {s t : Set Œ≤} {f g : Œ≤ ‚Üí Œ±} (h : EqOn f g s)
    (hf : ContinuousOn f t) (hg : ContinuousOn g t) (hst : s ‚äÜ t) (hts : t ‚äÜ closure s) :
    EqOn f g t := by
  intro x hx
  have : (ùìù[s] x).ne_bot := mem_closure_iff_cluster_pt.mp (hts hx)
  exact
    tendsto_nhds_unique_of_eventuallyEq ((hf x hx).mono_left <| nhdsWithin_mono _ hst)
      ((hg x hx).mono_left <| nhdsWithin_mono _ hst) (h.eventually_eq_of_mem self_mem_nhdsWithin)
#align set.eq_on.of_subset_closure Set.EqOn.of_subset_closure
-/

#print Function.LeftInverse.closed_range /-
theorem Function.LeftInverse.closed_range [T2Space Œ±] {f : Œ± ‚Üí Œ≤} {g : Œ≤ ‚Üí Œ±}
    (h : Function.LeftInverse f g) (hf : Continuous f) (hg : Continuous g) : IsClosed (range g) :=
  have : EqOn (g ‚àò f) id (closure <| range g) :=
    h.rightInvOn_range.EqOn.closure (hg.comp hf) continuous_id
  isClosed_of_closure_subset fun x hx =>
    calc
      x = g (f x) := (this hx).symm
      _ ‚àà _ := mem_range_self _
      
#align function.left_inverse.closed_range Function.LeftInverse.closed_range
-/

#print Function.LeftInverse.closedEmbedding /-
theorem Function.LeftInverse.closedEmbedding [T2Space Œ±] {f : Œ± ‚Üí Œ≤} {g : Œ≤ ‚Üí Œ±}
    (h : Function.LeftInverse f g) (hf : Continuous f) (hg : Continuous g) : ClosedEmbedding g :=
  ‚ü®h.Embedding hf hg, h.closed_range hf hg‚ü©
#align function.left_inverse.closed_embedding Function.LeftInverse.closedEmbedding
-/

/- warning: is_compact_is_compact_separated -> isCompact_isCompact_separated is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_4 : T2Space.{u1} Œ± _inst_1] {s : Set.{u1} Œ±} {t : Set.{u1} Œ±}, (IsCompact.{u1} Œ± _inst_1 s) -> (IsCompact.{u1} Œ± _inst_1 t) -> (Disjoint.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.completeBooleanAlgebra.{u1} Œ±)))))) (GeneralizedBooleanAlgebra.toOrderBot.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toGeneralizedBooleanAlgebra.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±))) s t) -> (SeparatedNhds.{u1} Œ± _inst_1 s t)
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_4 : T2Space.{u1} Œ± _inst_1] {s : Set.{u1} Œ±} {t : Set.{u1} Œ±}, (IsCompact.{u1} Œ± _inst_1 s) -> (IsCompact.{u1} Œ± _inst_1 t) -> (Disjoint.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))) (BoundedOrder.toOrderBot.{u1} (Set.{u1} Œ±) (Preorder.toLE.{u1} (Set.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))))) (CompleteLattice.toBoundedOrder.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))) s t) -> (SeparatedNhds.{u1} Œ± _inst_1 s t)
Case conversion may be inaccurate. Consider using '#align is_compact_is_compact_separated isCompact_isCompact_separated‚Çì'. -/
theorem isCompact_isCompact_separated [T2Space Œ±] {s t : Set Œ±} (hs : IsCompact s)
    (ht : IsCompact t) (hst : Disjoint s t) : SeparatedNhds s t := by
  simp only [SeparatedNhds, prod_subset_compl_diagonal_iff_disjoint.symm] at hst‚ä¢ <;>
    exact generalized_tube_lemma hs ht is_closed_diagonal.is_open_compl hst
#align is_compact_is_compact_separated isCompact_isCompact_separated

#print IsCompact.isClosed /-
/-- In a `t2_space`, every compact set is closed. -/
theorem IsCompact.isClosed [T2Space Œ±] {s : Set Œ±} (hs : IsCompact s) : IsClosed s :=
  isOpen_compl_iff.1 <|
    isOpen_iff_forall_mem_open.mpr fun x hx =>
      let ‚ü®u, v, uo, vo, su, xv, uv‚ü© :=
        isCompact_isCompact_separated hs isCompact_singleton (disjoint_singleton_right.2 hx)
      ‚ü®v, (uv.mono_left <| show s ‚â§ u from su).subset_compl_left, vo, by simpa using xv‚ü©
#align is_compact.is_closed IsCompact.isClosed
-/

#print Filter.coclosedCompact_eq_cocompact /-
@[simp]
theorem Filter.coclosedCompact_eq_cocompact [T2Space Œ±] : coclosedCompact Œ± = cocompact Œ± := by
  simp [coclosed_compact, cocompact, inf·µ¢_and', and_iff_right_of_imp IsCompact.isClosed]
#align filter.coclosed_compact_eq_cocompact Filter.coclosedCompact_eq_cocompact
-/

#print Bornology.relativelyCompact_eq_inCompact /-
@[simp]
theorem Bornology.relativelyCompact_eq_inCompact [T2Space Œ±] :
    Bornology.relativelyCompact Œ± = Bornology.inCompact Œ± := by
  rw [Bornology.ext_iff] <;> exact Filter.coclosedCompact_eq_cocompact
#align bornology.relatively_compact_eq_in_compact Bornology.relativelyCompact_eq_inCompact
-/

/- warning: exists_subset_nhds_of_is_compact -> exists_subset_nhds_of_isCompact is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_4 : T2Space.{u1} Œ± _inst_1] {Œπ : Type.{u2}} [_inst_5 : Nonempty.{succ u2} Œπ] {V : Œπ -> (Set.{u1} Œ±)}, (Directed.{u1, succ u2} (Set.{u1} Œ±) Œπ (Superset.{u1} (Set.{u1} Œ±) (Set.hasSubset.{u1} Œ±)) V) -> (forall (i : Œπ), IsCompact.{u1} Œ± _inst_1 (V i)) -> (forall {U : Set.{u1} Œ±}, (forall (x : Œ±), (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x (Set.inter·µ¢.{u1, succ u2} Œ± Œπ (fun (i : Œπ) => V i))) -> (Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) U (nhds.{u1} Œ± _inst_1 x))) -> (Exists.{succ u2} Œπ (fun (i : Œπ) => HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.hasSubset.{u1} Œ±) (V i) U)))
but is expected to have type
  forall {Œ± : Type.{u2}} [_inst_1 : TopologicalSpace.{u2} Œ±] [_inst_4 : T2Space.{u2} Œ± _inst_1] {Œπ : Type.{u1}} [_inst_5 : Nonempty.{succ u1} Œπ] {V : Œπ -> (Set.{u2} Œ±)}, (Directed.{u2, succ u1} (Set.{u2} Œ±) Œπ (fun (x._@.Mathlib.Topology.Separation._hyg.13050 : Set.{u2} Œ±) (x._@.Mathlib.Topology.Separation._hyg.13052 : Set.{u2} Œ±) => Superset.{u2} (Set.{u2} Œ±) (Set.instHasSubsetSet.{u2} Œ±) x._@.Mathlib.Topology.Separation._hyg.13050 x._@.Mathlib.Topology.Separation._hyg.13052) V) -> (forall (i : Œπ), IsCompact.{u2} Œ± _inst_1 (V i)) -> (forall {U : Set.{u2} Œ±}, (forall (x : Œ±), (Membership.mem.{u2, u2} Œ± (Set.{u2} Œ±) (Set.instMembershipSet.{u2} Œ±) x (Set.inter·µ¢.{u2, succ u1} Œ± Œπ (fun (i : Œπ) => V i))) -> (Membership.mem.{u2, u2} (Set.{u2} Œ±) (Filter.{u2} Œ±) (instMembershipSetFilter.{u2} Œ±) U (nhds.{u2} Œ± _inst_1 x))) -> (Exists.{succ u1} Œπ (fun (i : Œπ) => HasSubset.Subset.{u2} (Set.{u2} Œ±) (Set.instHasSubsetSet.{u2} Œ±) (V i) U)))
Case conversion may be inaccurate. Consider using '#align exists_subset_nhds_of_is_compact exists_subset_nhds_of_isCompact‚Çì'. -/
/-- If `V : Œπ ‚Üí set Œ±` is a decreasing family of compact sets then any neighborhood of
`‚ãÇ i, V i` contains some `V i`. This is a version of `exists_subset_nhd_of_compact'` where we
don't need to assume each `V i` closed because it follows from compactness since `Œ±` is
assumed to be Hausdorff. -/
theorem exists_subset_nhds_of_isCompact [T2Space Œ±] {Œπ : Type _} [Nonempty Œπ] {V : Œπ ‚Üí Set Œ±}
    (hV : Directed (¬∑ ‚äá ¬∑) V) (hV_cpct : ‚àÄ i, IsCompact (V i)) {U : Set Œ±}
    (hU : ‚àÄ x ‚àà ‚ãÇ i, V i, U ‚àà ùìù x) : ‚àÉ i, V i ‚äÜ U :=
  exists_subset_nhds_of_isCompact' hV hV_cpct (fun i => (hV_cpct i).IsClosed) hU
#align exists_subset_nhds_of_is_compact exists_subset_nhds_of_isCompact

#print CompactExhaustion.isClosed /-
theorem CompactExhaustion.isClosed [T2Space Œ±] (K : CompactExhaustion Œ±) (n : ‚Ñï) : IsClosed (K n) :=
  (K.IsCompact n).IsClosed
#align compact_exhaustion.is_closed CompactExhaustion.isClosed
-/

/- warning: is_compact.inter -> IsCompact.inter is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_4 : T2Space.{u1} Œ± _inst_1] {s : Set.{u1} Œ±} {t : Set.{u1} Œ±}, (IsCompact.{u1} Œ± _inst_1 s) -> (IsCompact.{u1} Œ± _inst_1 t) -> (IsCompact.{u1} Œ± _inst_1 (Inter.inter.{u1} (Set.{u1} Œ±) (Set.hasInter.{u1} Œ±) s t))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_4 : T2Space.{u1} Œ± _inst_1] {s : Set.{u1} Œ±} {t : Set.{u1} Œ±}, (IsCompact.{u1} Œ± _inst_1 s) -> (IsCompact.{u1} Œ± _inst_1 t) -> (IsCompact.{u1} Œ± _inst_1 (Inter.inter.{u1} (Set.{u1} Œ±) (Set.instInterSet.{u1} Œ±) s t))
Case conversion may be inaccurate. Consider using '#align is_compact.inter IsCompact.inter‚Çì'. -/
theorem IsCompact.inter [T2Space Œ±] {s t : Set Œ±} (hs : IsCompact s) (ht : IsCompact t) :
    IsCompact (s ‚à© t) :=
  hs.inter_right <| ht.IsClosed
#align is_compact.inter IsCompact.inter

#print isCompact_closure_of_subset_compact /-
theorem isCompact_closure_of_subset_compact [T2Space Œ±] {s t : Set Œ±} (ht : IsCompact t)
    (h : s ‚äÜ t) : IsCompact (closure s) :=
  isCompact_of_isClosed_subset ht isClosed_closure (closure_minimal h ht.IsClosed)
#align is_compact_closure_of_subset_compact isCompact_closure_of_subset_compact
-/

#print exists_compact_superset_iff /-
@[simp]
theorem exists_compact_superset_iff [T2Space Œ±] {s : Set Œ±} :
    (‚àÉ K, IsCompact K ‚àß s ‚äÜ K) ‚Üî IsCompact (closure s) :=
  ‚ü®fun ‚ü®K, hK, hsK‚ü© => isCompact_closure_of_subset_compact hK hsK, fun h =>
    ‚ü®closure s, h, subset_closure‚ü©‚ü©
#align exists_compact_superset_iff exists_compact_superset_iff
-/

#print image_closure_of_isCompact /-
theorem image_closure_of_isCompact [T2Space Œ≤] {s : Set Œ±} (hs : IsCompact (closure s)) {f : Œ± ‚Üí Œ≤}
    (hf : ContinuousOn f (closure s)) : f '' closure s = closure (f '' s) :=
  Subset.antisymm hf.image_closure <|
    closure_minimal (image_subset f subset_closure) (hs.image_of_continuousOn hf).IsClosed
#align image_closure_of_is_compact image_closure_of_isCompact
-/

/- warning: is_compact.binary_compact_cover -> IsCompact.binary_compact_cover is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_4 : T2Space.{u1} Œ± _inst_1] {K : Set.{u1} Œ±} {U : Set.{u1} Œ±} {V : Set.{u1} Œ±}, (IsCompact.{u1} Œ± _inst_1 K) -> (IsOpen.{u1} Œ± _inst_1 U) -> (IsOpen.{u1} Œ± _inst_1 V) -> (HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.hasSubset.{u1} Œ±) K (Union.union.{u1} (Set.{u1} Œ±) (Set.hasUnion.{u1} Œ±) U V)) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (K‚ÇÅ : Set.{u1} Œ±) => Exists.{succ u1} (Set.{u1} Œ±) (fun (K‚ÇÇ : Set.{u1} Œ±) => And (IsCompact.{u1} Œ± _inst_1 K‚ÇÅ) (And (IsCompact.{u1} Œ± _inst_1 K‚ÇÇ) (And (HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.hasSubset.{u1} Œ±) K‚ÇÅ U) (And (HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.hasSubset.{u1} Œ±) K‚ÇÇ V) (Eq.{succ u1} (Set.{u1} Œ±) K (Union.union.{u1} (Set.{u1} Œ±) (Set.hasUnion.{u1} Œ±) K‚ÇÅ K‚ÇÇ))))))))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_4 : T2Space.{u1} Œ± _inst_1] {K : Set.{u1} Œ±} {U : Set.{u1} Œ±} {V : Set.{u1} Œ±}, (IsCompact.{u1} Œ± _inst_1 K) -> (IsOpen.{u1} Œ± _inst_1 U) -> (IsOpen.{u1} Œ± _inst_1 V) -> (HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.instHasSubsetSet.{u1} Œ±) K (Union.union.{u1} (Set.{u1} Œ±) (Set.instUnionSet.{u1} Œ±) U V)) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (K‚ÇÅ : Set.{u1} Œ±) => Exists.{succ u1} (Set.{u1} Œ±) (fun (K‚ÇÇ : Set.{u1} Œ±) => And (IsCompact.{u1} Œ± _inst_1 K‚ÇÅ) (And (IsCompact.{u1} Œ± _inst_1 K‚ÇÇ) (And (HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.instHasSubsetSet.{u1} Œ±) K‚ÇÅ U) (And (HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.instHasSubsetSet.{u1} Œ±) K‚ÇÇ V) (Eq.{succ u1} (Set.{u1} Œ±) K (Union.union.{u1} (Set.{u1} Œ±) (Set.instUnionSet.{u1} Œ±) K‚ÇÅ K‚ÇÇ))))))))
Case conversion may be inaccurate. Consider using '#align is_compact.binary_compact_cover IsCompact.binary_compact_cover‚Çì'. -/
/-- If a compact set is covered by two open sets, then we can cover it by two compact subsets. -/
theorem IsCompact.binary_compact_cover [T2Space Œ±] {K U V : Set Œ±} (hK : IsCompact K)
    (hU : IsOpen U) (hV : IsOpen V) (h2K : K ‚äÜ U ‚à™ V) :
    ‚àÉ K‚ÇÅ K‚ÇÇ : Set Œ±, IsCompact K‚ÇÅ ‚àß IsCompact K‚ÇÇ ‚àß K‚ÇÅ ‚äÜ U ‚àß K‚ÇÇ ‚äÜ V ‚àß K = K‚ÇÅ ‚à™ K‚ÇÇ :=
  by
  obtain ‚ü®O‚ÇÅ, O‚ÇÇ, h1O‚ÇÅ, h1O‚ÇÇ, h2O‚ÇÅ, h2O‚ÇÇ, hO‚ü© :=
    isCompact_isCompact_separated (hK.diff hU) (hK.diff hV)
      (by rwa [disjoint_iff_inter_eq_empty, diff_inter_diff, diff_eq_empty])
  exact
    ‚ü®_, _, hK.diff h1O‚ÇÅ, hK.diff h1O‚ÇÇ, by rwa [diff_subset_comm], by rwa [diff_subset_comm], by
      rw [‚Üê diff_inter, hO.inter_eq, diff_empty]‚ü©
#align is_compact.binary_compact_cover IsCompact.binary_compact_cover

#print Continuous.isClosedMap /-
theorem Continuous.isClosedMap [CompactSpace Œ±] [T2Space Œ≤] {f : Œ± ‚Üí Œ≤} (h : Continuous f) :
    IsClosedMap f := fun s hs => (hs.IsCompact.image h).IsClosed
#align continuous.is_closed_map Continuous.isClosedMap
-/

#print Continuous.closedEmbedding /-
theorem Continuous.closedEmbedding [CompactSpace Œ±] [T2Space Œ≤] {f : Œ± ‚Üí Œ≤} (h : Continuous f)
    (hf : Function.Injective f) : ClosedEmbedding f :=
  closedEmbedding_of_continuous_injective_closed h hf h.IsClosedMap
#align continuous.closed_embedding Continuous.closedEmbedding
-/

section

open Finset Function

/- warning: is_compact.finite_compact_cover -> IsCompact.finite_compact_cover is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_4 : T2Space.{u1} Œ± _inst_1] {s : Set.{u1} Œ±}, (IsCompact.{u1} Œ± _inst_1 s) -> (forall {Œπ : Type.{u2}} (t : Finset.{u2} Œπ) (U : Œπ -> (Set.{u1} Œ±)), (forall (i : Œπ), (Membership.Mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.hasMem.{u2} Œπ) i t) -> (IsOpen.{u1} Œ± _inst_1 (U i))) -> (HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.hasSubset.{u1} Œ±) s (Set.union·µ¢.{u1, succ u2} Œ± Œπ (fun (i : Œπ) => Set.union·µ¢.{u1, 0} Œ± (Membership.Mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.hasMem.{u2} Œπ) i t) (fun (H : Membership.Mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.hasMem.{u2} Œπ) i t) => U i)))) -> (Exists.{max (succ u2) (succ u1)} (Œπ -> (Set.{u1} Œ±)) (fun (K : Œπ -> (Set.{u1} Œ±)) => And (forall (i : Œπ), IsCompact.{u1} Œ± _inst_1 (K i)) (And (forall (i : Œπ), HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.hasSubset.{u1} Œ±) (K i) (U i)) (Eq.{succ u1} (Set.{u1} Œ±) s (Set.union·µ¢.{u1, succ u2} Œ± Œπ (fun (i : Œπ) => Set.union·µ¢.{u1, 0} Œ± (Membership.Mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.hasMem.{u2} Œπ) i t) (fun (H : Membership.Mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.hasMem.{u2} Œπ) i t) => K i))))))))
but is expected to have type
  forall {Œ± : Type.{u2}} [_inst_1 : TopologicalSpace.{u2} Œ±] [_inst_4 : T2Space.{u2} Œ± _inst_1] {s : Set.{u2} Œ±}, (IsCompact.{u2} Œ± _inst_1 s) -> (forall {Œπ : Type.{u1}} (t : Finset.{u1} Œπ) (U : Œπ -> (Set.{u2} Œ±)), (forall (i : Œπ), (Membership.mem.{u1, u1} Œπ (Finset.{u1} Œπ) (Finset.instMembershipFinset.{u1} Œπ) i t) -> (IsOpen.{u2} Œ± _inst_1 (U i))) -> (HasSubset.Subset.{u2} (Set.{u2} Œ±) (Set.instHasSubsetSet.{u2} Œ±) s (Set.union·µ¢.{u2, succ u1} Œ± Œπ (fun (i : Œπ) => Set.union·µ¢.{u2, 0} Œ± (Membership.mem.{u1, u1} Œπ (Finset.{u1} Œπ) (Finset.instMembershipFinset.{u1} Œπ) i t) (fun (H : Membership.mem.{u1, u1} Œπ (Finset.{u1} Œπ) (Finset.instMembershipFinset.{u1} Œπ) i t) => U i)))) -> (Exists.{max (succ u2) (succ u1)} (Œπ -> (Set.{u2} Œ±)) (fun (K : Œπ -> (Set.{u2} Œ±)) => And (forall (i : Œπ), IsCompact.{u2} Œ± _inst_1 (K i)) (And (forall (i : Œπ), HasSubset.Subset.{u2} (Set.{u2} Œ±) (Set.instHasSubsetSet.{u2} Œ±) (K i) (U i)) (Eq.{succ u2} (Set.{u2} Œ±) s (Set.union·µ¢.{u2, succ u1} Œ± Œπ (fun (i : Œπ) => Set.union·µ¢.{u2, 0} Œ± (Membership.mem.{u1, u1} Œπ (Finset.{u1} Œπ) (Finset.instMembershipFinset.{u1} Œπ) i t) (fun (H : Membership.mem.{u1, u1} Œπ (Finset.{u1} Œπ) (Finset.instMembershipFinset.{u1} Œπ) i t) => K i))))))))
Case conversion may be inaccurate. Consider using '#align is_compact.finite_compact_cover IsCompact.finite_compact_cover‚Çì'. -/
/-- For every finite open cover `U·µ¢` of a compact set, there exists a compact cover `K·µ¢ ‚äÜ U·µ¢`. -/
theorem IsCompact.finite_compact_cover [T2Space Œ±] {s : Set Œ±} (hs : IsCompact s) {Œπ} (t : Finset Œπ)
    (U : Œπ ‚Üí Set Œ±) (hU : ‚àÄ i ‚àà t, IsOpen (U i)) (hsC : s ‚äÜ ‚ãÉ i ‚àà t, U i) :
    ‚àÉ K : Œπ ‚Üí Set Œ±, (‚àÄ i, IsCompact (K i)) ‚àß (‚àÄ i, K i ‚äÜ U i) ‚àß s = ‚ãÉ i ‚àà t, K i := by
  classical
    induction' t using Finset.induction with x t hx ih generalizing U hU s hs hsC
    ¬∑ refine' ‚ü®fun _ => ‚àÖ, fun i => isCompact_empty, fun i => empty_subset _, _‚ü©
      simpa only [subset_empty_iff, Union_false, Union_empty] using hsC
    simp only [Finset.set_bunion·µ¢_insert] at hsC
    simp only [Finset.mem_insert] at hU
    have hU' : ‚àÄ i ‚àà t, IsOpen (U i) := fun i hi => hU i (Or.inr hi)
    rcases hs.binary_compact_cover (hU x (Or.inl rfl)) (isOpen_bunion·µ¢ hU') hsC with
      ‚ü®K‚ÇÅ, K‚ÇÇ, h1K‚ÇÅ, h1K‚ÇÇ, h2K‚ÇÅ, h2K‚ÇÇ, hK‚ü©
    rcases ih U hU' h1K‚ÇÇ h2K‚ÇÇ with ‚ü®K, h1K, h2K, h3K‚ü©
    refine' ‚ü®update K x K‚ÇÅ, _, _, _‚ü©
    ¬∑ intro i
      by_cases hi : i = x
      ¬∑ simp only [update_same, hi, h1K‚ÇÅ]
      ¬∑ rw [‚Üê Ne.def] at hi
        simp only [update_noteq hi, h1K]
    ¬∑ intro i
      by_cases hi : i = x
      ¬∑ simp only [update_same, hi, h2K‚ÇÅ]
      ¬∑ rw [‚Üê Ne.def] at hi
        simp only [update_noteq hi, h2K]
    ¬∑ simp only [set_bUnion_insert_update _ hx, hK, h3K]
#align is_compact.finite_compact_cover IsCompact.finite_compact_cover

end

#print locally_compact_of_compact_nhds /-
theorem locally_compact_of_compact_nhds [T2Space Œ±] (h : ‚àÄ x : Œ±, ‚àÉ s, s ‚àà ùìù x ‚àß IsCompact s) :
    LocallyCompactSpace Œ± :=
  ‚ü®fun x n hn =>
    let ‚ü®u, un, uo, xu‚ü© := mem_nhds_iff.mp hn
    let ‚ü®k, kx, kc‚ü© := h x
    -- K is compact but not necessarily contained in N.
    -- K \ U is again compact and doesn't contain x, so
    -- we may find open sets V, W separating x from K \ U.
    -- Then K \ W is a compact neighborhood of x contained in U.
    let ‚ü®v, w, vo, wo, xv, kuw, vw‚ü© :=
      isCompact_isCompact_separated isCompact_singleton (kc.diff‚Çì uo)
        (disjoint_singleton_left.2 fun h => h.2 xu)
    have wn : w·∂ú ‚àà ùìù x :=
      mem_nhds_iff.mpr ‚ü®v, vw.subset_compl_right, vo, singleton_subset_iff.mp xv‚ü©
    ‚ü®k \ w, Filter.inter_mem kx wn, Subset.trans (diff_subset_comm.mp kuw) un, kc.diff‚Çì wo‚ü©‚ü©
#align locally_compact_of_compact_nhds locally_compact_of_compact_nhds
-/

#print locally_compact_of_compact /-
-- see Note [lower instance priority]
instance (priority := 100) locally_compact_of_compact [T2Space Œ±] [CompactSpace Œ±] :
    LocallyCompactSpace Œ± :=
  locally_compact_of_compact_nhds fun x => ‚ü®univ, isOpen_univ.mem_nhds trivial, isCompact_univ‚ü©
#align locally_compact_of_compact locally_compact_of_compact
-/

#print exists_open_with_compact_closure /-
/-- In a locally compact T‚ÇÇ space, every point has an open neighborhood with compact closure -/
theorem exists_open_with_compact_closure [LocallyCompactSpace Œ±] [T2Space Œ±] (x : Œ±) :
    ‚àÉ U : Set Œ±, IsOpen U ‚àß x ‚àà U ‚àß IsCompact (closure U) :=
  by
  rcases exists_compact_mem_nhds x with ‚ü®K, hKc, hxK‚ü©
  rcases mem_nhds_iff.1 hxK with ‚ü®t, h1t, h2t, h3t‚ü©
  exact ‚ü®t, h2t, h3t, isCompact_closure_of_subset_compact hKc h1t‚ü©
#align exists_open_with_compact_closure exists_open_with_compact_closure
-/

#print exists_open_superset_and_isCompact_closure /-
/-- In a locally compact T‚ÇÇ space, every compact set has an open neighborhood with compact closure.
-/
theorem exists_open_superset_and_isCompact_closure [LocallyCompactSpace Œ±] [T2Space Œ±] {K : Set Œ±}
    (hK : IsCompact K) : ‚àÉ V, IsOpen V ‚àß K ‚äÜ V ‚àß IsCompact (closure V) :=
  by
  rcases exists_compact_superset hK with ‚ü®K', hK', hKK'‚ü©
  refine'
    ‚ü®interior K', isOpen_interior, hKK', isCompact_closure_of_subset_compact hK' interior_subset‚ü©
#align exists_open_superset_and_is_compact_closure exists_open_superset_and_isCompact_closure
-/

#print exists_open_between_and_isCompact_closure /-
/-- In a locally compact T‚ÇÇ space, given a compact set `K` inside an open set `U`, we can find a
open set `V` between these sets with compact closure: `K ‚äÜ V` and the closure of `V` is inside `U`.
-/
theorem exists_open_between_and_isCompact_closure [LocallyCompactSpace Œ±] [T2Space Œ±] {K U : Set Œ±}
    (hK : IsCompact K) (hU : IsOpen U) (hKU : K ‚äÜ U) :
    ‚àÉ V, IsOpen V ‚àß K ‚äÜ V ‚àß closure V ‚äÜ U ‚àß IsCompact (closure V) :=
  by
  rcases exists_compact_between hK hU hKU with ‚ü®V, hV, hKV, hVU‚ü©
  exact
    ‚ü®interior V, isOpen_interior, hKV, (closure_minimal interior_subset hV.is_closed).trans hVU,
      isCompact_closure_of_subset_compact hV interior_subset‚ü©
#align exists_open_between_and_is_compact_closure exists_open_between_and_isCompact_closure
-/

#print isPreirreducible_iff_subsingleton /-
theorem isPreirreducible_iff_subsingleton [T2Space Œ±] {S : Set Œ±} :
    IsPreirreducible S ‚Üî S.Subsingleton :=
  by
  refine' ‚ü®fun h x hx y hy => _, Set.Subsingleton.isPreirreducible‚ü©
  by_contra e
  obtain ‚ü®U, V, hU, hV, hxU, hyV, h'‚ü© := t2_separation e
  exact ((h U V hU hV ‚ü®x, hx, hxU‚ü© ‚ü®y, hy, hyV‚ü©).mono <| inter_subset_right _ _).not_disjoint h'
#align is_preirreducible_iff_subsingleton isPreirreducible_iff_subsingleton
-/

alias isPreirreducible_iff_subsingleton ‚Üî IsPreirreducible.subsingleton _
#align is_preirreducible.subsingleton IsPreirreducible.subsingleton

attribute [protected] IsPreirreducible.subsingleton

#print isIrreducible_iff_singleton /-
theorem isIrreducible_iff_singleton [T2Space Œ±] {S : Set Œ±} : IsIrreducible S ‚Üî ‚àÉ x, S = {x} := by
  rw [IsIrreducible, isPreirreducible_iff_subsingleton,
    exists_eq_singleton_iff_nonempty_subsingleton]
#align is_irreducible_iff_singleton isIrreducible_iff_singleton
-/

#print not_preirreducible_nontrivial_t2 /-
/-- There does not exist a nontrivial preirreducible T‚ÇÇ space. -/
theorem not_preirreducible_nontrivial_t2 (Œ±) [TopologicalSpace Œ±] [PreirreducibleSpace Œ±]
    [Nontrivial Œ±] [T2Space Œ±] : False :=
  (PreirreducibleSpace.isPreirreducible_univ Œ±).Subsingleton.not_nontrivial nontrivial_univ
#align not_preirreducible_nontrivial_t2 not_preirreducible_nontrivial_t2
-/

end Separation

section RegularSpace

#print RegularSpace /-
/-- A topological space is called a *regular space* if for any closed set `s` and `a ‚àâ s`, there
exist disjoint open sets `U ‚äá s` and `V ‚àã a`. We formulate this condition in terms of `disjoint`ness
of filters `ùìùÀ¢ s` and `ùìù a`. -/
@[mk_iff]
class RegularSpace (X : Type u) [TopologicalSpace X] : Prop where
  regular : ‚àÄ {s : Set X} {a}, IsClosed s ‚Üí a ‚àâ s ‚Üí Disjoint (ùìùÀ¢ s) (ùìù a)
#align regular_space RegularSpace
-/

/- warning: regular_space_tfae -> regularSpace_TFAE is a dubious translation:
lean 3 declaration is
  forall (X : Type.{u1}) [_inst_2 : TopologicalSpace.{u1} X], List.TFAE (List.cons.{0} Prop (RegularSpace.{u1} X _inst_2) (List.cons.{0} Prop (forall (s : Set.{u1} X) (a : X), (Not (Membership.Mem.{u1, u1} X (Set.{u1} X) (Set.hasMem.{u1} X) a (closure.{u1} X _inst_2 s))) -> (Disjoint.{u1} (Filter.{u1} X) (Filter.partialOrder.{u1} X) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} X) (Preorder.toLE.{u1} (Filter.{u1} X) (PartialOrder.toPreorder.{u1} (Filter.{u1} X) (Filter.partialOrder.{u1} X))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} X) (Filter.completeLattice.{u1} X))) (nhdsSet.{u1} X _inst_2 s) (nhds.{u1} X _inst_2 a))) (List.cons.{0} Prop (forall (a : X) (s : Set.{u1} X), Iff (Disjoint.{u1} (Filter.{u1} X) (Filter.partialOrder.{u1} X) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} X) (Preorder.toLE.{u1} (Filter.{u1} X) (PartialOrder.toPreorder.{u1} (Filter.{u1} X) (Filter.partialOrder.{u1} X))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} X) (Filter.completeLattice.{u1} X))) (nhdsSet.{u1} X _inst_2 s) (nhds.{u1} X _inst_2 a)) (Not (Membership.Mem.{u1, u1} X (Set.{u1} X) (Set.hasMem.{u1} X) a (closure.{u1} X _inst_2 s)))) (List.cons.{0} Prop (forall (a : X) (s : Set.{u1} X), (Membership.Mem.{u1, u1} (Set.{u1} X) (Filter.{u1} X) (Filter.hasMem.{u1} X) s (nhds.{u1} X _inst_2 a)) -> (Exists.{succ u1} (Set.{u1} X) (fun (t : Set.{u1} X) => Exists.{0} (Membership.Mem.{u1, u1} (Set.{u1} X) (Filter.{u1} X) (Filter.hasMem.{u1} X) t (nhds.{u1} X _inst_2 a)) (fun (H : Membership.Mem.{u1, u1} (Set.{u1} X) (Filter.{u1} X) (Filter.hasMem.{u1} X) t (nhds.{u1} X _inst_2 a)) => And (IsClosed.{u1} X _inst_2 t) (HasSubset.Subset.{u1} (Set.{u1} X) (Set.hasSubset.{u1} X) t s))))) (List.cons.{0} Prop (forall (a : X), LE.le.{u1} (Filter.{u1} X) (Preorder.toLE.{u1} (Filter.{u1} X) (PartialOrder.toPreorder.{u1} (Filter.{u1} X) (Filter.partialOrder.{u1} X))) (Filter.lift'.{u1, u1} X X (nhds.{u1} X _inst_2 a) (closure.{u1} X _inst_2)) (nhds.{u1} X _inst_2 a)) (List.cons.{0} Prop (forall (a : X), Eq.{succ u1} (Filter.{u1} X) (Filter.lift'.{u1, u1} X X (nhds.{u1} X _inst_2 a) (closure.{u1} X _inst_2)) (nhds.{u1} X _inst_2 a)) (List.nil.{0} Prop)))))))
but is expected to have type
  forall (X : Type.{u1}) [_inst_2 : TopologicalSpace.{u1} X], List.TFAE (List.cons.{0} Prop (RegularSpace.{u1} X _inst_2) (List.cons.{0} Prop (forall (s : Set.{u1} X) (a : X), (Not (Membership.mem.{u1, u1} X (Set.{u1} X) (Set.instMembershipSet.{u1} X) a (closure.{u1} X _inst_2 s))) -> (Disjoint.{u1} (Filter.{u1} X) (Filter.instPartialOrderFilter.{u1} X) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} X) (Preorder.toLE.{u1} (Filter.{u1} X) (PartialOrder.toPreorder.{u1} (Filter.{u1} X) (Filter.instPartialOrderFilter.{u1} X))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} X) (Filter.instCompleteLatticeFilter.{u1} X))) (nhdsSet.{u1} X _inst_2 s) (nhds.{u1} X _inst_2 a))) (List.cons.{0} Prop (forall (a : X) (s : Set.{u1} X), Iff (Disjoint.{u1} (Filter.{u1} X) (Filter.instPartialOrderFilter.{u1} X) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} X) (Preorder.toLE.{u1} (Filter.{u1} X) (PartialOrder.toPreorder.{u1} (Filter.{u1} X) (Filter.instPartialOrderFilter.{u1} X))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} X) (Filter.instCompleteLatticeFilter.{u1} X))) (nhdsSet.{u1} X _inst_2 s) (nhds.{u1} X _inst_2 a)) (Not (Membership.mem.{u1, u1} X (Set.{u1} X) (Set.instMembershipSet.{u1} X) a (closure.{u1} X _inst_2 s)))) (List.cons.{0} Prop (forall (a : X) (s : Set.{u1} X), (Membership.mem.{u1, u1} (Set.{u1} X) (Filter.{u1} X) (instMembershipSetFilter.{u1} X) s (nhds.{u1} X _inst_2 a)) -> (Exists.{succ u1} (Set.{u1} X) (fun (t : Set.{u1} X) => And (Membership.mem.{u1, u1} (Set.{u1} X) (Filter.{u1} X) (instMembershipSetFilter.{u1} X) t (nhds.{u1} X _inst_2 a)) (And (IsClosed.{u1} X _inst_2 t) (HasSubset.Subset.{u1} (Set.{u1} X) (Set.instHasSubsetSet.{u1} X) t s))))) (List.cons.{0} Prop (forall (a : X), LE.le.{u1} (Filter.{u1} X) (Preorder.toLE.{u1} (Filter.{u1} X) (PartialOrder.toPreorder.{u1} (Filter.{u1} X) (Filter.instPartialOrderFilter.{u1} X))) (Filter.lift'.{u1, u1} X X (nhds.{u1} X _inst_2 a) (closure.{u1} X _inst_2)) (nhds.{u1} X _inst_2 a)) (List.cons.{0} Prop (forall (a : X), Eq.{succ u1} (Filter.{u1} X) (Filter.lift'.{u1, u1} X X (nhds.{u1} X _inst_2 a) (closure.{u1} X _inst_2)) (nhds.{u1} X _inst_2 a)) (List.nil.{0} Prop)))))))
Case conversion may be inaccurate. Consider using '#align regular_space_tfae regularSpace_TFAE‚Çì'. -/
/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (a ¬´expr ‚àâ ¬ª closure[closure] s) -/
theorem regularSpace_TFAE (X : Type u) [TopologicalSpace X] :
    TFAE
      [RegularSpace X, ‚àÄ (s : Set X) (a) (_ : a ‚àâ closure s), Disjoint (ùìùÀ¢ s) (ùìù a),
        ‚àÄ (a : X) (s : Set X), Disjoint (ùìùÀ¢ s) (ùìù a) ‚Üî a ‚àâ closure s,
        ‚àÄ (a : X), ‚àÄ s ‚àà ùìù a, ‚àÉ t ‚àà ùìù a, IsClosed t ‚àß t ‚äÜ s, ‚àÄ a : X, (ùìù a).lift' closure ‚â§ ùìù a,
        ‚àÄ a : X, (ùìù a).lift' closure = ùìù a] :=
  by
  tfae_have 1 ‚Üî 5
  ¬∑ rw [regularSpace_iff, (@compl_surjective (Set X) _).forall, forall_swap]
    simp only [isClosed_compl_iff, mem_compl_iff, Classical.not_not, @and_comm' (_ ‚àà _),
      (nhds_basis_opens _).lift'_closure.le_basis_iff‚Çì (nhds_basis_opens _), and_imp,
      (nhds_basis_opens _).disjoint_iff_right‚Çì, exists_prop, ‚Üê subset_interior_iff_mem_nhdsSet,
      interior_compl, compl_subset_compl]
  tfae_have 5 ‚Üí 6; exact fun h a => (h a).antisymm (ùìù _).le_lift'_closure
  tfae_have 6 ‚Üí 4
  ¬∑ intro H a s hs
    rw [‚Üê H] at hs
    rcases(ùìù a).basis_sets.lift'_closure.mem_iff.mp hs with ‚ü®U, hU, hUs‚ü©
    exact ‚ü®closure U, mem_of_superset hU subset_closure, isClosed_closure, hUs‚ü©
  tfae_have 4 ‚Üí 2
  ¬∑ intro H s a ha
    have ha' : s·∂ú ‚àà ùìù a := by rwa [‚Üê mem_interior_iff_mem_nhds, interior_compl]
    rcases H _ _ ha' with ‚ü®U, hU, hUc, hUs‚ü©
    refine' disjoint_of_disjoint_of_mem disjoint_compl_left _ hU
    rwa [‚Üê subset_interior_iff_mem_nhdsSet, hUc.is_open_compl.interior_eq, subset_compl_comm]
  tfae_have 2 ‚Üí 3
  ¬∑ refine' fun H a s => ‚ü®fun hd has => mem_closure_iff_nhds_ne_bot.mp has _, H s a‚ü©
    exact (hd.symm.mono_right <| @principal_le_nhdsSet _ _ s).eq_bot
  tfae_have 3 ‚Üí 1; exact fun H => ‚ü®fun s a hs ha => (H _ _).mpr <| hs.closure_eq.symm ‚ñ∏ ha‚ü©
  tfae_finish
#align regular_space_tfae regularSpace_TFAE

#print RegularSpace.ofLift'_closure /-
theorem RegularSpace.ofLift'_closure (h : ‚àÄ a : Œ±, (ùìù a).lift' closure = ùìù a) : RegularSpace Œ± :=
  Iff.mpr ((regularSpace_TFAE Œ±).out 0 5) h
#align regular_space.of_lift'_closure RegularSpace.ofLift'_closure
-/

/- warning: regular_space.of_basis -> RegularSpace.ofBasis is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] {Œπ : Œ± -> Sort.{u2}} {p : forall (a : Œ±), (Œπ a) -> Prop} {s : forall (a : Œ±), (Œπ a) -> (Set.{u1} Œ±)}, (forall (a : Œ±), Filter.HasBasis.{u1, u2} Œ± (Œπ a) (nhds.{u1} Œ± _inst_1 a) (p a) (s a)) -> (forall (a : Œ±) (i : Œπ a), (p a i) -> (IsClosed.{u1} Œ± _inst_1 (s a i))) -> (RegularSpace.{u1} Œ± _inst_1)
but is expected to have type
  forall {Œ± : Type.{u2}} [_inst_1 : TopologicalSpace.{u2} Œ±] {Œπ : Œ± -> Sort.{u1}} {p : forall (a : Œ±), (Œπ a) -> Prop} {s : forall (a : Œ±), (Œπ a) -> (Set.{u2} Œ±)}, (forall (a : Œ±), Filter.HasBasis.{u2, u1} Œ± (Œπ a) (nhds.{u2} Œ± _inst_1 a) (p a) (s a)) -> (forall (a : Œ±) (i : Œπ a), (p a i) -> (IsClosed.{u2} Œ± _inst_1 (s a i))) -> (RegularSpace.{u2} Œ± _inst_1)
Case conversion may be inaccurate. Consider using '#align regular_space.of_basis RegularSpace.ofBasis‚Çì'. -/
theorem RegularSpace.ofBasis {Œπ : Œ± ‚Üí Sort _} {p : ‚àÄ a, Œπ a ‚Üí Prop} {s : ‚àÄ a, Œπ a ‚Üí Set Œ±}
    (h‚ÇÅ : ‚àÄ a, (ùìù a).HasBasis (p a) (s a)) (h‚ÇÇ : ‚àÄ a i, p a i ‚Üí IsClosed (s a i)) :
    RegularSpace Œ± :=
  RegularSpace.ofLift'_closure fun a => (h‚ÇÅ a).lift'_closure_eq_self (h‚ÇÇ a)
#align regular_space.of_basis RegularSpace.ofBasis

/- warning: regular_space.of_exists_mem_nhds_is_closed_subset -> RegularSpace.ofExistsMemNhdsIsClosedSubset is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±], (forall (a : Œ±) (s : Set.{u1} Œ±), (Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) s (nhds.{u1} Œ± _inst_1 a)) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (t : Set.{u1} Œ±) => Exists.{0} (Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) t (nhds.{u1} Œ± _inst_1 a)) (fun (H : Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) t (nhds.{u1} Œ± _inst_1 a)) => And (IsClosed.{u1} Œ± _inst_1 t) (HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.hasSubset.{u1} Œ±) t s))))) -> (RegularSpace.{u1} Œ± _inst_1)
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±], (forall (a : Œ±) (s : Set.{u1} Œ±), (Membership.mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (instMembershipSetFilter.{u1} Œ±) s (nhds.{u1} Œ± _inst_1 a)) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (t : Set.{u1} Œ±) => And (Membership.mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (instMembershipSetFilter.{u1} Œ±) t (nhds.{u1} Œ± _inst_1 a)) (And (IsClosed.{u1} Œ± _inst_1 t) (HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.instHasSubsetSet.{u1} Œ±) t s))))) -> (RegularSpace.{u1} Œ± _inst_1)
Case conversion may be inaccurate. Consider using '#align regular_space.of_exists_mem_nhds_is_closed_subset RegularSpace.ofExistsMemNhdsIsClosedSubset‚Çì'. -/
theorem RegularSpace.ofExistsMemNhdsIsClosedSubset
    (h : ‚àÄ (a : Œ±), ‚àÄ s ‚àà ùìù a, ‚àÉ t ‚àà ùìù a, IsClosed t ‚àß t ‚äÜ s) : RegularSpace Œ± :=
  Iff.mpr ((regularSpace_TFAE Œ±).out 0 3) h
#align regular_space.of_exists_mem_nhds_is_closed_subset RegularSpace.ofExistsMemNhdsIsClosedSubset

variable [RegularSpace Œ±] {a : Œ±} {s : Set Œ±}

/- warning: disjoint_nhds_set_nhds -> disjoint_nhdsSet_nhds is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : RegularSpace.{u1} Œ± _inst_1] {a : Œ±} {s : Set.{u1} Œ±}, Iff (Disjoint.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.completeLattice.{u1} Œ±))) (nhdsSet.{u1} Œ± _inst_1 s) (nhds.{u1} Œ± _inst_1 a)) (Not (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) a (closure.{u1} Œ± _inst_1 s)))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : RegularSpace.{u1} Œ± _inst_1] {a : Œ±} {s : Set.{u1} Œ±}, Iff (Disjoint.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.instCompleteLatticeFilter.{u1} Œ±))) (nhdsSet.{u1} Œ± _inst_1 s) (nhds.{u1} Œ± _inst_1 a)) (Not (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) a (closure.{u1} Œ± _inst_1 s)))
Case conversion may be inaccurate. Consider using '#align disjoint_nhds_set_nhds disjoint_nhdsSet_nhds‚Çì'. -/
theorem disjoint_nhdsSet_nhds : Disjoint (ùìùÀ¢ s) (ùìù a) ‚Üî a ‚àâ closure s :=
  Iff.mp ((regularSpace_TFAE Œ±).out 0 2) ‚Äπ_‚Ä∫ _ _
#align disjoint_nhds_set_nhds disjoint_nhdsSet_nhds

/- warning: disjoint_nhds_nhds_set -> disjoint_nhds_nhdsSet is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : RegularSpace.{u1} Œ± _inst_1] {a : Œ±} {s : Set.{u1} Œ±}, Iff (Disjoint.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.completeLattice.{u1} Œ±))) (nhds.{u1} Œ± _inst_1 a) (nhdsSet.{u1} Œ± _inst_1 s)) (Not (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) a (closure.{u1} Œ± _inst_1 s)))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : RegularSpace.{u1} Œ± _inst_1] {a : Œ±} {s : Set.{u1} Œ±}, Iff (Disjoint.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.instCompleteLatticeFilter.{u1} Œ±))) (nhds.{u1} Œ± _inst_1 a) (nhdsSet.{u1} Œ± _inst_1 s)) (Not (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) a (closure.{u1} Œ± _inst_1 s)))
Case conversion may be inaccurate. Consider using '#align disjoint_nhds_nhds_set disjoint_nhds_nhdsSet‚Çì'. -/
theorem disjoint_nhds_nhdsSet : Disjoint (ùìù a) (ùìùÀ¢ s) ‚Üî a ‚àâ closure s :=
  disjoint_comm.trans disjoint_nhdsSet_nhds
#align disjoint_nhds_nhds_set disjoint_nhds_nhdsSet

/- warning: exists_mem_nhds_is_closed_subset -> exists_mem_nhds_isClosed_subset is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : RegularSpace.{u1} Œ± _inst_1] {a : Œ±} {s : Set.{u1} Œ±}, (Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) s (nhds.{u1} Œ± _inst_1 a)) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (t : Set.{u1} Œ±) => Exists.{0} (Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) t (nhds.{u1} Œ± _inst_1 a)) (fun (H : Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) t (nhds.{u1} Œ± _inst_1 a)) => And (IsClosed.{u1} Œ± _inst_1 t) (HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.hasSubset.{u1} Œ±) t s))))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : RegularSpace.{u1} Œ± _inst_1] {a : Œ±} {s : Set.{u1} Œ±}, (Membership.mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (instMembershipSetFilter.{u1} Œ±) s (nhds.{u1} Œ± _inst_1 a)) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (t : Set.{u1} Œ±) => And (Membership.mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (instMembershipSetFilter.{u1} Œ±) t (nhds.{u1} Œ± _inst_1 a)) (And (IsClosed.{u1} Œ± _inst_1 t) (HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.instHasSubsetSet.{u1} Œ±) t s))))
Case conversion may be inaccurate. Consider using '#align exists_mem_nhds_is_closed_subset exists_mem_nhds_isClosed_subset‚Çì'. -/
theorem exists_mem_nhds_isClosed_subset {a : Œ±} {s : Set Œ±} (h : s ‚àà ùìù a) :
    ‚àÉ t ‚àà ùìù a, IsClosed t ‚àß t ‚äÜ s :=
  Iff.mp ((regularSpace_TFAE Œ±).out 0 3) ‚Äπ_‚Ä∫ _ _ h
#align exists_mem_nhds_is_closed_subset exists_mem_nhds_isClosed_subset

#print closed_nhds_basis /-
theorem closed_nhds_basis (a : Œ±) : (ùìù a).HasBasis (fun s : Set Œ± => s ‚àà ùìù a ‚àß IsClosed s) id :=
  hasBasis_self.2 fun _ => exists_mem_nhds_isClosed_subset
#align closed_nhds_basis closed_nhds_basis
-/

#print lift'_nhds_closure /-
theorem lift'_nhds_closure (a : Œ±) : (ùìù a).lift' closure = ùìù a :=
  (closed_nhds_basis a).lift'_closure_eq_self fun s hs => hs.2
#align lift'_nhds_closure lift'_nhds_closure
-/

/- warning: filter.has_basis.nhds_closure -> Filter.HasBasis.nhds_closure is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : RegularSpace.{u1} Œ± _inst_1] {Œπ : Sort.{u2}} {a : Œ±} {p : Œπ -> Prop} {s : Œπ -> (Set.{u1} Œ±)}, (Filter.HasBasis.{u1, u2} Œ± Œπ (nhds.{u1} Œ± _inst_1 a) p s) -> (Filter.HasBasis.{u1, u2} Œ± Œπ (nhds.{u1} Œ± _inst_1 a) p (fun (i : Œπ) => closure.{u1} Œ± _inst_1 (s i)))
but is expected to have type
  forall {Œ± : Type.{u2}} [_inst_1 : TopologicalSpace.{u2} Œ±] [_inst_2 : RegularSpace.{u2} Œ± _inst_1] {Œπ : Sort.{u1}} {a : Œ±} {p : Œπ -> Prop} {s : Œπ -> (Set.{u2} Œ±)}, (Filter.HasBasis.{u2, u1} Œ± Œπ (nhds.{u2} Œ± _inst_1 a) p s) -> (Filter.HasBasis.{u2, u1} Œ± Œπ (nhds.{u2} Œ± _inst_1 a) p (fun (i : Œπ) => closure.{u2} Œ± _inst_1 (s i)))
Case conversion may be inaccurate. Consider using '#align filter.has_basis.nhds_closure Filter.HasBasis.nhds_closure‚Çì'. -/
theorem Filter.HasBasis.nhds_closure {Œπ : Sort _} {a : Œ±} {p : Œπ ‚Üí Prop} {s : Œπ ‚Üí Set Œ±}
    (h : (ùìù a).HasBasis p s) : (ùìù a).HasBasis p fun i => closure (s i) :=
  lift'_nhds_closure a ‚ñ∏ h.lift'_closure
#align filter.has_basis.nhds_closure Filter.HasBasis.nhds_closure

#print hasBasis_nhds_closure /-
theorem hasBasis_nhds_closure (a : Œ±) : (ùìù a).HasBasis (fun s => s ‚àà ùìù a) closure :=
  (ùìù a).basis_sets.nhds_closure
#align has_basis_nhds_closure hasBasis_nhds_closure
-/

#print hasBasis_opens_closure /-
theorem hasBasis_opens_closure (a : Œ±) : (ùìù a).HasBasis (fun s => a ‚àà s ‚àß IsOpen s) closure :=
  (nhds_basis_opens a).nhds_closure
#align has_basis_opens_closure hasBasis_opens_closure
-/

#print TopologicalSpace.IsTopologicalBasis.nhds_basis_closure /-
theorem TopologicalSpace.IsTopologicalBasis.nhds_basis_closure {B : Set (Set Œ±)}
    (hB : TopologicalSpace.IsTopologicalBasis B) (a : Œ±) :
    (ùìù a).HasBasis (fun s : Set Œ± => a ‚àà s ‚àß s ‚àà B) closure := by
  simpa only [and_comm'] using hB.nhds_has_basis.nhds_closure
#align topological_space.is_topological_basis.nhds_basis_closure TopologicalSpace.IsTopologicalBasis.nhds_basis_closure
-/

/- warning: topological_space.is_topological_basis.exists_closure_subset -> TopologicalSpace.IsTopologicalBasis.exists_closure_subset is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : RegularSpace.{u1} Œ± _inst_1] {B : Set.{u1} (Set.{u1} Œ±)}, (TopologicalSpace.IsTopologicalBasis.{u1} Œ± _inst_1 B) -> (forall {a : Œ±} {s : Set.{u1} Œ±}, (Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) s (nhds.{u1} Œ± _inst_1 a)) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (t : Set.{u1} Œ±) => Exists.{0} (Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Set.{u1} (Set.{u1} Œ±)) (Set.hasMem.{u1} (Set.{u1} Œ±)) t B) (fun (H : Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Set.{u1} (Set.{u1} Œ±)) (Set.hasMem.{u1} (Set.{u1} Œ±)) t B) => And (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) a t) (HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.hasSubset.{u1} Œ±) (closure.{u1} Œ± _inst_1 t) s)))))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : RegularSpace.{u1} Œ± _inst_1] {B : Set.{u1} (Set.{u1} Œ±)}, (TopologicalSpace.IsTopologicalBasis.{u1} Œ± _inst_1 B) -> (forall {a : Œ±} {s : Set.{u1} Œ±}, (Membership.mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (instMembershipSetFilter.{u1} Œ±) s (nhds.{u1} Œ± _inst_1 a)) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (t : Set.{u1} Œ±) => And (Membership.mem.{u1, u1} (Set.{u1} Œ±) (Set.{u1} (Set.{u1} Œ±)) (Set.instMembershipSet.{u1} (Set.{u1} Œ±)) t B) (And (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) a t) (HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.instHasSubsetSet.{u1} Œ±) (closure.{u1} Œ± _inst_1 t) s)))))
Case conversion may be inaccurate. Consider using '#align topological_space.is_topological_basis.exists_closure_subset TopologicalSpace.IsTopologicalBasis.exists_closure_subset‚Çì'. -/
theorem TopologicalSpace.IsTopologicalBasis.exists_closure_subset {B : Set (Set Œ±)}
    (hB : TopologicalSpace.IsTopologicalBasis B) {a : Œ±} {s : Set Œ±} (h : s ‚àà ùìù a) :
    ‚àÉ t ‚àà B, a ‚àà t ‚àß closure t ‚äÜ s := by
  simpa only [exists_prop, and_assoc] using hB.nhds_has_basis.nhds_closure.mem_iff.mp h
#align topological_space.is_topological_basis.exists_closure_subset TopologicalSpace.IsTopologicalBasis.exists_closure_subset

/- warning: disjoint_nhds_nhds_iff_not_specializes -> disjoint_nhds_nhds_iff_not_specializes is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : RegularSpace.{u1} Œ± _inst_1] {a : Œ±} {b : Œ±}, Iff (Disjoint.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.partialOrder.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.completeLattice.{u1} Œ±))) (nhds.{u1} Œ± _inst_1 a) (nhds.{u1} Œ± _inst_1 b)) (Not (Specializes.{u1} Œ± _inst_1 a b))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : RegularSpace.{u1} Œ± _inst_1] {a : Œ±} {b : Œ±}, Iff (Disjoint.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±) (BoundedOrder.toOrderBot.{u1} (Filter.{u1} Œ±) (Preorder.toLE.{u1} (Filter.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Filter.{u1} Œ±) (Filter.instPartialOrderFilter.{u1} Œ±))) (CompleteLattice.toBoundedOrder.{u1} (Filter.{u1} Œ±) (Filter.instCompleteLatticeFilter.{u1} Œ±))) (nhds.{u1} Œ± _inst_1 a) (nhds.{u1} Œ± _inst_1 b)) (Not (Specializes.{u1} Œ± _inst_1 a b))
Case conversion may be inaccurate. Consider using '#align disjoint_nhds_nhds_iff_not_specializes disjoint_nhds_nhds_iff_not_specializes‚Çì'. -/
theorem disjoint_nhds_nhds_iff_not_specializes {a b : Œ±} : Disjoint (ùìù a) (ùìù b) ‚Üî ¬¨a ‚§≥ b := by
  rw [‚Üê nhdsSet_singleton, disjoint_nhdsSet_nhds, specializes_iff_mem_closure]
#align disjoint_nhds_nhds_iff_not_specializes disjoint_nhds_nhds_iff_not_specializes

#print specializes_comm /-
theorem specializes_comm {a b : Œ±} : a ‚§≥ b ‚Üî b ‚§≥ a := by
  simp only [‚Üê disjoint_nhds_nhds_iff_not_specializes.not_left, disjoint_comm]
#align specializes_comm specializes_comm
-/

alias specializes_comm ‚Üî Specializes.symm _
#align specializes.symm Specializes.symm

#print specializes_iff_inseparable /-
theorem specializes_iff_inseparable {a b : Œ±} : a ‚§≥ b ‚Üî Inseparable a b :=
  ‚ü®fun h => h.antisymm h.symm, le_of_eq‚ü©
#align specializes_iff_inseparable specializes_iff_inseparable
-/

/- warning: is_closed_set_of_specializes -> isClosed_setOf_specializes is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : RegularSpace.{u1} Œ± _inst_1], IsClosed.{u1} (Prod.{u1, u1} Œ± Œ±) (Prod.topologicalSpace.{u1, u1} Œ± Œ± _inst_1 _inst_1) (setOf.{u1} (Prod.{u1, u1} Œ± Œ±) (fun (p : Prod.{u1, u1} Œ± Œ±) => Specializes.{u1} Œ± _inst_1 (Prod.fst.{u1, u1} Œ± Œ± p) (Prod.snd.{u1, u1} Œ± Œ± p)))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : RegularSpace.{u1} Œ± _inst_1], IsClosed.{u1} (Prod.{u1, u1} Œ± Œ±) (instTopologicalSpaceProd.{u1, u1} Œ± Œ± _inst_1 _inst_1) (setOf.{u1} (Prod.{u1, u1} Œ± Œ±) (fun (p : Prod.{u1, u1} Œ± Œ±) => Specializes.{u1} Œ± _inst_1 (Prod.fst.{u1, u1} Œ± Œ± p) (Prod.snd.{u1, u1} Œ± Œ± p)))
Case conversion may be inaccurate. Consider using '#align is_closed_set_of_specializes isClosed_setOf_specializes‚Çì'. -/
theorem isClosed_setOf_specializes : IsClosed { p : Œ± √ó Œ± | p.1 ‚§≥ p.2 } := by
  simp only [‚Üê isOpen_compl_iff, compl_set_of, ‚Üê disjoint_nhds_nhds_iff_not_specializes,
    isOpen_setOf_disjoint_nhds_nhds]
#align is_closed_set_of_specializes isClosed_setOf_specializes

/- warning: is_closed_set_of_inseparable -> isClosed_setOf_inseparable is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : RegularSpace.{u1} Œ± _inst_1], IsClosed.{u1} (Prod.{u1, u1} Œ± Œ±) (Prod.topologicalSpace.{u1, u1} Œ± Œ± _inst_1 _inst_1) (setOf.{u1} (Prod.{u1, u1} Œ± Œ±) (fun (p : Prod.{u1, u1} Œ± Œ±) => Inseparable.{u1} Œ± _inst_1 (Prod.fst.{u1, u1} Œ± Œ± p) (Prod.snd.{u1, u1} Œ± Œ± p)))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : RegularSpace.{u1} Œ± _inst_1], IsClosed.{u1} (Prod.{u1, u1} Œ± Œ±) (instTopologicalSpaceProd.{u1, u1} Œ± Œ± _inst_1 _inst_1) (setOf.{u1} (Prod.{u1, u1} Œ± Œ±) (fun (p : Prod.{u1, u1} Œ± Œ±) => Inseparable.{u1} Œ± _inst_1 (Prod.fst.{u1, u1} Œ± Œ± p) (Prod.snd.{u1, u1} Œ± Œ± p)))
Case conversion may be inaccurate. Consider using '#align is_closed_set_of_inseparable isClosed_setOf_inseparable‚Çì'. -/
theorem isClosed_setOf_inseparable : IsClosed { p : Œ± √ó Œ± | Inseparable p.1 p.2 } := by
  simp only [‚Üê specializes_iff_inseparable, isClosed_setOf_specializes]
#align is_closed_set_of_inseparable isClosed_setOf_inseparable

#print Inducing.regularSpace /-
protected theorem Inducing.regularSpace [TopologicalSpace Œ≤] {f : Œ≤ ‚Üí Œ±} (hf : Inducing f) :
    RegularSpace Œ≤ :=
  RegularSpace.ofBasis
    (fun b => by
      rw [hf.nhds_eq_comap b]
      exact (closed_nhds_basis _).comap _)
    fun b s hs => hs.2.Preimage hf.Continuous
#align inducing.regular_space Inducing.regularSpace
-/

#print regularSpace_induced /-
theorem regularSpace_induced (f : Œ≤ ‚Üí Œ±) : @RegularSpace Œ≤ (induced f ‚Äπ_‚Ä∫) :=
  letI := induced f ‚Äπ_‚Ä∫
  Inducing.regularSpace ‚ü®rfl‚ü©
#align regular_space_induced regularSpace_induced
-/

/- warning: regular_space_Inf -> regularSpace_inf‚Çõ is a dubious translation:
lean 3 declaration is
  forall {X : Type.{u1}} {T : Set.{u1} (TopologicalSpace.{u1} X)}, (forall (t : TopologicalSpace.{u1} X), (Membership.Mem.{u1, u1} (TopologicalSpace.{u1} X) (Set.{u1} (TopologicalSpace.{u1} X)) (Set.hasMem.{u1} (TopologicalSpace.{u1} X)) t T) -> (RegularSpace.{u1} X t)) -> (RegularSpace.{u1} X (InfSet.inf‚Çõ.{u1} (TopologicalSpace.{u1} X) (ConditionallyCompleteLattice.toHasInf.{u1} (TopologicalSpace.{u1} X) (CompleteLattice.toConditionallyCompleteLattice.{u1} (TopologicalSpace.{u1} X) (TopologicalSpace.completeLattice.{u1} X))) T))
but is expected to have type
  forall {X : Type.{u1}} {T : Set.{u1} (TopologicalSpace.{u1} X)}, (forall (t : TopologicalSpace.{u1} X), (Membership.mem.{u1, u1} (TopologicalSpace.{u1} X) (Set.{u1} (TopologicalSpace.{u1} X)) (Set.instMembershipSet.{u1} (TopologicalSpace.{u1} X)) t T) -> (RegularSpace.{u1} X t)) -> (RegularSpace.{u1} X (InfSet.inf‚Çõ.{u1} (TopologicalSpace.{u1} X) (ConditionallyCompleteLattice.toInfSet.{u1} (TopologicalSpace.{u1} X) (CompleteLattice.toConditionallyCompleteLattice.{u1} (TopologicalSpace.{u1} X) (TopologicalSpace.instCompleteLatticeTopologicalSpace.{u1} X))) T))
Case conversion may be inaccurate. Consider using '#align regular_space_Inf regularSpace_inf‚Çõ‚Çì'. -/
theorem regularSpace_inf‚Çõ {X} {T : Set (TopologicalSpace X)} (h : ‚àÄ t ‚àà T, @RegularSpace X t) :
    @RegularSpace X (inf‚Çõ T) := by
  letI := Inf T
  have :
    ‚àÄ a,
      (ùìù a).HasBasis
        (fun If : Œ£I : Set T, I ‚Üí Set X =>
          If.1.Finite ‚àß ‚àÄ i : If.1, If.2 i ‚àà @nhds X i a ‚àß is_closed[‚Üëi] (If.2 i))
        fun If => ‚ãÇ i : If.1, If.snd i :=
    by
    intro a
    rw [nhds_inf‚Çõ, ‚Üê inf·µ¢_subtype'']
    exact has_basis_infi fun t : T => @closed_nhds_basis X t (h t t.2) a
  refine' RegularSpace.ofBasis this fun a If hIf => isClosed_inter·µ¢ fun i => _
  exact (hIf.2 i).2.mono (inf‚Çõ_le (i : T).2)
#align regular_space_Inf regularSpace_inf‚Çõ

/- warning: regular_space_infi -> regularSpace_inf·µ¢ is a dubious translation:
lean 3 declaration is
  forall {Œπ : Sort.{u1}} {X : Type.{u2}} {t : Œπ -> (TopologicalSpace.{u2} X)}, (forall (i : Œπ), RegularSpace.{u2} X (t i)) -> (RegularSpace.{u2} X (inf·µ¢.{u2, u1} (TopologicalSpace.{u2} X) (ConditionallyCompleteLattice.toHasInf.{u2} (TopologicalSpace.{u2} X) (CompleteLattice.toConditionallyCompleteLattice.{u2} (TopologicalSpace.{u2} X) (TopologicalSpace.completeLattice.{u2} X))) Œπ t))
but is expected to have type
  forall {Œπ : Sort.{u2}} {X : Type.{u1}} {t : Œπ -> (TopologicalSpace.{u1} X)}, (forall (i : Œπ), RegularSpace.{u1} X (t i)) -> (RegularSpace.{u1} X (inf·µ¢.{u1, u2} (TopologicalSpace.{u1} X) (ConditionallyCompleteLattice.toInfSet.{u1} (TopologicalSpace.{u1} X) (CompleteLattice.toConditionallyCompleteLattice.{u1} (TopologicalSpace.{u1} X) (TopologicalSpace.instCompleteLatticeTopologicalSpace.{u1} X))) Œπ t))
Case conversion may be inaccurate. Consider using '#align regular_space_infi regularSpace_inf·µ¢‚Çì'. -/
theorem regularSpace_inf·µ¢ {Œπ X} {t : Œπ ‚Üí TopologicalSpace X} (h : ‚àÄ i, @RegularSpace X (t i)) :
    @RegularSpace X (inf·µ¢ t) :=
  regularSpace_inf‚Çõ <| forall_range_iff.mpr h
#align regular_space_infi regularSpace_inf·µ¢

/- warning: regular_space.inf -> RegularSpace.inf is a dubious translation:
lean 3 declaration is
  forall {X : Type.{u1}} {t‚ÇÅ : TopologicalSpace.{u1} X} {t‚ÇÇ : TopologicalSpace.{u1} X}, (RegularSpace.{u1} X t‚ÇÅ) -> (RegularSpace.{u1} X t‚ÇÇ) -> (RegularSpace.{u1} X (Inf.inf.{u1} (TopologicalSpace.{u1} X) (SemilatticeInf.toHasInf.{u1} (TopologicalSpace.{u1} X) (Lattice.toSemilatticeInf.{u1} (TopologicalSpace.{u1} X) (ConditionallyCompleteLattice.toLattice.{u1} (TopologicalSpace.{u1} X) (CompleteLattice.toConditionallyCompleteLattice.{u1} (TopologicalSpace.{u1} X) (TopologicalSpace.completeLattice.{u1} X))))) t‚ÇÅ t‚ÇÇ))
but is expected to have type
  forall {X : Type.{u1}} {t‚ÇÅ : TopologicalSpace.{u1} X} {t‚ÇÇ : TopologicalSpace.{u1} X}, (RegularSpace.{u1} X t‚ÇÅ) -> (RegularSpace.{u1} X t‚ÇÇ) -> (RegularSpace.{u1} X (Inf.inf.{u1} (TopologicalSpace.{u1} X) (Lattice.toInf.{u1} (TopologicalSpace.{u1} X) (ConditionallyCompleteLattice.toLattice.{u1} (TopologicalSpace.{u1} X) (CompleteLattice.toConditionallyCompleteLattice.{u1} (TopologicalSpace.{u1} X) (TopologicalSpace.instCompleteLatticeTopologicalSpace.{u1} X)))) t‚ÇÅ t‚ÇÇ))
Case conversion may be inaccurate. Consider using '#align regular_space.inf RegularSpace.inf‚Çì'. -/
theorem RegularSpace.inf {X} {t‚ÇÅ t‚ÇÇ : TopologicalSpace X} (h‚ÇÅ : @RegularSpace X t‚ÇÅ)
    (h‚ÇÇ : @RegularSpace X t‚ÇÇ) : @RegularSpace X (t‚ÇÅ ‚äì t‚ÇÇ) :=
  by
  rw [inf_eq_inf·µ¢]
  exact regularSpace_inf·µ¢ (Bool.forall_bool.2 ‚ü®h‚ÇÇ, h‚ÇÅ‚ü©)
#align regular_space.inf RegularSpace.inf

instance {p : Œ± ‚Üí Prop} : RegularSpace (Subtype p) :=
  embedding_subtype_val.to_inducing.RegularSpace

instance [TopologicalSpace Œ≤] [RegularSpace Œ≤] : RegularSpace (Œ± √ó Œ≤) :=
  (regularSpace_induced Prod.fst).inf (regularSpace_induced Prod.snd)

instance {Œπ : Type _} {œÄ : Œπ ‚Üí Type _} [‚àÄ i, TopologicalSpace (œÄ i)] [‚àÄ i, RegularSpace (œÄ i)] :
    RegularSpace (‚àÄ i, œÄ i) :=
  regularSpace_inf·µ¢ fun i => regularSpace_induced _

end RegularSpace

section T3

#print T3Space /-
/-- A T‚ÇÉ space is a T‚ÇÄ space which is a regular space. Any T‚ÇÉ space is a T‚ÇÅ space, a T‚ÇÇ space, and
a T‚ÇÇ.‚ÇÖ space.  -/
class T3Space (Œ± : Type u) [TopologicalSpace Œ±] extends T0Space Œ±, RegularSpace Œ± : Prop
#align t3_space T3Space
-/

#print T3Space.t25Space /-
-- see Note [lower instance priority]
instance (priority := 100) T3Space.t25Space [T3Space Œ±] : T25Space Œ± :=
  by
  refine' ‚ü®fun x y hne => _‚ü©
  rw [lift'_nhds_closure, lift'_nhds_closure]
  have aux : x ‚àâ closure {y} ‚à® y ‚àâ closure {x} :=
    (t0Space_iff_or_not_mem_closure Œ±).mp inferInstance x y hne
  wlog H : x ‚àâ closure ({y} : Set Œ±)
  ¬∑ refine' (this y x hne.symm aux.symm (aux.resolve_left H)).symm
  ¬∑ rwa [‚Üê disjoint_nhds_nhdsSet, nhdsSet_singleton] at H
#align t3_space.t2_5_space T3Space.t25Space
-/

#print Embedding.t3Space /-
protected theorem Embedding.t3Space [TopologicalSpace Œ≤] [T3Space Œ≤] {f : Œ± ‚Üí Œ≤}
    (hf : Embedding f) : T3Space Œ± :=
  { to_t0Space := hf.T0Space
    to_regularSpace := hf.to_inducing.RegularSpace }
#align embedding.t3_space Embedding.t3Space
-/

#print Subtype.t3Space /-
instance Subtype.t3Space [T3Space Œ±] {p : Œ± ‚Üí Prop} : T3Space (Subtype p) :=
  embedding_subtype_val.T3Space
#align subtype.t3_space Subtype.t3Space
-/

instance [TopologicalSpace Œ≤] [T3Space Œ±] [T3Space Œ≤] : T3Space (Œ± √ó Œ≤) :=
  ‚ü®‚ü©

instance {Œπ : Type _} {œÄ : Œπ ‚Üí Type _} [‚àÄ i, TopologicalSpace (œÄ i)] [‚àÄ i, T3Space (œÄ i)] :
    T3Space (‚àÄ i, œÄ i) :=
  ‚ü®‚ü©

/- warning: disjoint_nested_nhds -> disjoint_nested_nhds is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T3Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, (Ne.{succ u1} Œ± x y) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (U‚ÇÅ : Set.{u1} Œ±) => Exists.{0} (Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) U‚ÇÅ (nhds.{u1} Œ± _inst_1 x)) (fun (H : Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) U‚ÇÅ (nhds.{u1} Œ± _inst_1 x)) => Exists.{succ u1} (Set.{u1} Œ±) (fun (V‚ÇÅ : Set.{u1} Œ±) => Exists.{0} (Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) V‚ÇÅ (nhds.{u1} Œ± _inst_1 x)) (fun (H : Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) V‚ÇÅ (nhds.{u1} Œ± _inst_1 x)) => Exists.{succ u1} (Set.{u1} Œ±) (fun (U‚ÇÇ : Set.{u1} Œ±) => Exists.{0} (Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) U‚ÇÇ (nhds.{u1} Œ± _inst_1 y)) (fun (H : Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) U‚ÇÇ (nhds.{u1} Œ± _inst_1 y)) => Exists.{succ u1} (Set.{u1} Œ±) (fun (V‚ÇÇ : Set.{u1} Œ±) => Exists.{0} (Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) V‚ÇÇ (nhds.{u1} Œ± _inst_1 y)) (fun (H : Membership.Mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (Filter.hasMem.{u1} Œ±) V‚ÇÇ (nhds.{u1} Œ± _inst_1 y)) => And (IsClosed.{u1} Œ± _inst_1 V‚ÇÅ) (And (IsClosed.{u1} Œ± _inst_1 V‚ÇÇ) (And (IsOpen.{u1} Œ± _inst_1 U‚ÇÅ) (And (IsOpen.{u1} Œ± _inst_1 U‚ÇÇ) (And (HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.hasSubset.{u1} Œ±) V‚ÇÅ U‚ÇÅ) (And (HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.hasSubset.{u1} Œ±) V‚ÇÇ U‚ÇÇ) (Disjoint.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.completeBooleanAlgebra.{u1} Œ±)))))) (GeneralizedBooleanAlgebra.toOrderBot.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toGeneralizedBooleanAlgebra.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±))) U‚ÇÅ U‚ÇÇ)))))))))))))))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T3Space.{u1} Œ± _inst_1] {x : Œ±} {y : Œ±}, (Ne.{succ u1} Œ± x y) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (U‚ÇÅ : Set.{u1} Œ±) => And (Membership.mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (instMembershipSetFilter.{u1} Œ±) U‚ÇÅ (nhds.{u1} Œ± _inst_1 x)) (Exists.{succ u1} (Set.{u1} Œ±) (fun (V‚ÇÅ : Set.{u1} Œ±) => And (Membership.mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (instMembershipSetFilter.{u1} Œ±) V‚ÇÅ (nhds.{u1} Œ± _inst_1 x)) (Exists.{succ u1} (Set.{u1} Œ±) (fun (U‚ÇÇ : Set.{u1} Œ±) => And (Membership.mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (instMembershipSetFilter.{u1} Œ±) U‚ÇÇ (nhds.{u1} Œ± _inst_1 y)) (Exists.{succ u1} (Set.{u1} Œ±) (fun (V‚ÇÇ : Set.{u1} Œ±) => And (Membership.mem.{u1, u1} (Set.{u1} Œ±) (Filter.{u1} Œ±) (instMembershipSetFilter.{u1} Œ±) V‚ÇÇ (nhds.{u1} Œ± _inst_1 y)) (And (IsClosed.{u1} Œ± _inst_1 V‚ÇÅ) (And (IsClosed.{u1} Œ± _inst_1 V‚ÇÇ) (And (IsOpen.{u1} Œ± _inst_1 U‚ÇÅ) (And (IsOpen.{u1} Œ± _inst_1 U‚ÇÇ) (And (HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.instHasSubsetSet.{u1} Œ±) V‚ÇÅ U‚ÇÅ) (And (HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.instHasSubsetSet.{u1} Œ±) V‚ÇÇ U‚ÇÇ) (Disjoint.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))) (BoundedOrder.toOrderBot.{u1} (Set.{u1} Œ±) (Preorder.toLE.{u1} (Set.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))))) (CompleteLattice.toBoundedOrder.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))) U‚ÇÅ U‚ÇÇ)))))))))))))))
Case conversion may be inaccurate. Consider using '#align disjoint_nested_nhds disjoint_nested_nhds‚Çì'. -/
/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (U‚ÇÅ V‚ÇÅ ¬´expr ‚àà ¬ª nhds() x) -/
/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (U‚ÇÇ V‚ÇÇ ¬´expr ‚àà ¬ª nhds() y) -/
/-- Given two points `x ‚â† y`, we can find neighbourhoods `x ‚àà V‚ÇÅ ‚äÜ U‚ÇÅ` and `y ‚àà V‚ÇÇ ‚äÜ U‚ÇÇ`,
with the `V‚Çñ` closed and the `U‚Çñ` open, such that the `U‚Çñ` are disjoint. -/
theorem disjoint_nested_nhds [T3Space Œ±] {x y : Œ±} (h : x ‚â† y) :
    ‚àÉ (U‚ÇÅ : _)(_ : U‚ÇÅ ‚àà ùìù x)(V‚ÇÅ : _)(_ : V‚ÇÅ ‚àà ùìù x)(U‚ÇÇ : _)(_ : U‚ÇÇ ‚àà ùìù y)(V‚ÇÇ : _)(_ : V‚ÇÇ ‚àà ùìù y),
      IsClosed V‚ÇÅ ‚àß IsClosed V‚ÇÇ ‚àß IsOpen U‚ÇÅ ‚àß IsOpen U‚ÇÇ ‚àß V‚ÇÅ ‚äÜ U‚ÇÅ ‚àß V‚ÇÇ ‚äÜ U‚ÇÇ ‚àß Disjoint U‚ÇÅ U‚ÇÇ :=
  by
  rcases t2_separation h with ‚ü®U‚ÇÅ, U‚ÇÇ, U‚ÇÅ_op, U‚ÇÇ_op, x_in, y_in, H‚ü©
  rcases exists_mem_nhds_isClosed_subset (U‚ÇÅ_op.mem_nhds x_in) with ‚ü®V‚ÇÅ, V‚ÇÅ_in, V‚ÇÅ_closed, h‚ÇÅ‚ü©
  rcases exists_mem_nhds_isClosed_subset (U‚ÇÇ_op.mem_nhds y_in) with ‚ü®V‚ÇÇ, V‚ÇÇ_in, V‚ÇÇ_closed, h‚ÇÇ‚ü©
  exact
    ‚ü®U‚ÇÅ, mem_of_superset V‚ÇÅ_in h‚ÇÅ, V‚ÇÅ, V‚ÇÅ_in, U‚ÇÇ, mem_of_superset V‚ÇÇ_in h‚ÇÇ, V‚ÇÇ, V‚ÇÇ_in, V‚ÇÅ_closed,
      V‚ÇÇ_closed, U‚ÇÅ_op, U‚ÇÇ_op, h‚ÇÅ, h‚ÇÇ, H‚ü©
#align disjoint_nested_nhds disjoint_nested_nhds

open SeparationQuotient

/-- The `separation_quotient` of a regular space is a T‚ÇÉ space. -/
instance [RegularSpace Œ±] : T3Space (SeparationQuotient Œ±)
    where regular s :=
    surjective_mk.forall.2 fun a hs ha =>
      by
      rw [‚Üê disjoint_comap_iff surjective_mk, comap_mk_nhds_mk, comap_mk_nhds_set]
      exact RegularSpace.regular (hs.preimage continuous_mk) ha

end T3

section Normality

#print NormalSpace /-
/-- A T‚ÇÑ space, also known as a normal space (although this condition sometimes
  omits T‚ÇÇ), is one in which for every pair of disjoint closed sets `C` and `D`,
  there exist disjoint open sets containing `C` and `D` respectively. -/
class NormalSpace (Œ± : Type u) [TopologicalSpace Œ±] extends T1Space Œ± : Prop where
  normal : ‚àÄ s t : Set Œ±, IsClosed s ‚Üí IsClosed t ‚Üí Disjoint s t ‚Üí SeparatedNhds s t
#align normal_space NormalSpace
-/

/- warning: normal_separation -> normal_separation is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : NormalSpace.{u1} Œ± _inst_1] {s : Set.{u1} Œ±} {t : Set.{u1} Œ±}, (IsClosed.{u1} Œ± _inst_1 s) -> (IsClosed.{u1} Œ± _inst_1 t) -> (Disjoint.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.completeBooleanAlgebra.{u1} Œ±)))))) (GeneralizedBooleanAlgebra.toOrderBot.{u1} (Set.{u1} Œ±) (BooleanAlgebra.toGeneralizedBooleanAlgebra.{u1} (Set.{u1} Œ±) (Set.booleanAlgebra.{u1} Œ±))) s t) -> (SeparatedNhds.{u1} Œ± _inst_1 s t)
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : NormalSpace.{u1} Œ± _inst_1] {s : Set.{u1} Œ±} {t : Set.{u1} Œ±}, (IsClosed.{u1} Œ± _inst_1 s) -> (IsClosed.{u1} Œ± _inst_1 t) -> (Disjoint.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))) (BoundedOrder.toOrderBot.{u1} (Set.{u1} Œ±) (Preorder.toLE.{u1} (Set.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Set.{u1} Œ±) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} Œ±) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))))) (CompleteLattice.toBoundedOrder.{u1} (Set.{u1} Œ±) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} Œ±) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} Œ±) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} Œ±) (Set.instCompleteBooleanAlgebraSet.{u1} Œ±)))))) s t) -> (SeparatedNhds.{u1} Œ± _inst_1 s t)
Case conversion may be inaccurate. Consider using '#align normal_separation normal_separation‚Çì'. -/
theorem normal_separation [NormalSpace Œ±] {s t : Set Œ±} (H1 : IsClosed s) (H2 : IsClosed t)
    (H3 : Disjoint s t) : SeparatedNhds s t :=
  NormalSpace.normal s t H1 H2 H3
#align normal_separation normal_separation

#print normal_exists_closure_subset /-
theorem normal_exists_closure_subset [NormalSpace Œ±] {s t : Set Œ±} (hs : IsClosed s) (ht : IsOpen t)
    (hst : s ‚äÜ t) : ‚àÉ u, IsOpen u ‚àß s ‚äÜ u ‚àß closure u ‚äÜ t :=
  by
  have : Disjoint s (t·∂ú) := set.disjoint_left.mpr fun x hxs hxt => hxt (hst hxs)
  rcases normal_separation hs (isClosed_compl_iff.2 ht) this with
    ‚ü®s', t', hs', ht', hss', htt', hs't'‚ü©
  refine'
    ‚ü®s', hs', hss',
      subset.trans (closure_minimal _ (isClosed_compl_iff.2 ht')) (compl_subset_comm.1 htt')‚ü©
  exact fun x hxs hxt => hs't'.le_bot ‚ü®hxs, hxt‚ü©
#align normal_exists_closure_subset normal_exists_closure_subset
-/

#print NormalSpace.t3Space /-
-- see Note [lower instance priority]
instance (priority := 100) NormalSpace.t3Space [NormalSpace Œ±] : T3Space Œ±
    where regular s x hs hxs :=
    let ‚ü®u, v, hu, hv, hsu, hxv, huv‚ü© :=
      normal_separation hs isClosed_singleton (disjoint_singleton_right.mpr hxs)
    disjoint_of_disjoint_of_mem huv (hu.mem_nhdsSet.2 hsu) (hv.mem_nhds <| hxv rfl)
#align normal_space.t3_space NormalSpace.t3Space
-/

#print normalOfCompactT2 /-
-- We can't make this an instance because it could cause an instance loop.
theorem normalOfCompactT2 [CompactSpace Œ±] [T2Space Œ±] : NormalSpace Œ± :=
  ‚ü®fun s t hs ht => isCompact_isCompact_separated hs.IsCompact ht.IsCompact‚ü©
#align normal_of_compact_t2 normalOfCompactT2
-/

#print ClosedEmbedding.normalSpace /-
protected theorem ClosedEmbedding.normalSpace [TopologicalSpace Œ≤] [NormalSpace Œ≤] {f : Œ± ‚Üí Œ≤}
    (hf : ClosedEmbedding f) : NormalSpace Œ± :=
  { to_t1Space := hf.toEmbedding.T1Space
    normal := by
      intro s t hs ht hst
      have H : SeparatedNhds (f '' s) (f '' t) :=
        NormalSpace.normal (f '' s) (f '' t) (hf.is_closed_map s hs) (hf.is_closed_map t ht)
          (disjoint_image_of_injective hf.inj hst)
      exact
        (H.preimage hf.continuous).mono (subset_preimage_image _ _) (subset_preimage_image _ _) }
#align closed_embedding.normal_space ClosedEmbedding.normalSpace
-/

namespace SeparationQuotient

/-- The `separation_quotient` of a normal space is a T‚ÇÑ space. We don't have separate typeclasses
for normal spaces (without T‚ÇÅ assumption) and T‚ÇÑ spaces, so we use the same class for assumption
and for conclusion.

One can prove this using a homeomorphism between `Œ±` and `separation_quotient Œ±`. We give an
alternative proof that works without assuming that `Œ±` is a T‚ÇÅ space. -/
instance [NormalSpace Œ±] : NormalSpace (SeparationQuotient Œ±)
    where normal s t hs ht hd :=
    separatedNhds_iff_disjoint.2 <|
      by
      rw [‚Üê disjoint_comap_iff surjective_mk, comap_mk_nhds_set, comap_mk_nhds_set]
      exact
        separatedNhds_iff_disjoint.1
          (normal_separation (hs.preimage continuous_mk) (ht.preimage continuous_mk)
            (hd.preimage mk))

end SeparationQuotient

variable (Œ±)

#print normalSpaceOfT3SecondCountable /-
/-- A T‚ÇÉ topological space with second countable topology is a normal space.
This lemma is not an instance to avoid a loop. -/
theorem normalSpaceOfT3SecondCountable [SecondCountableTopology Œ±] [T3Space Œ±] : NormalSpace Œ± :=
  by
  have key :
    ‚àÄ {s t : Set Œ±},
      IsClosed t ‚Üí
        Disjoint s t ‚Üí
          ‚àÉ U : Set (countable_basis Œ±),
            (s ‚äÜ ‚ãÉ u ‚àà U, ‚Üëu) ‚àß
              (‚àÄ u ‚àà U, Disjoint (closure ‚Üëu) t) ‚àß
                ‚àÄ n : ‚Ñï, IsClosed (‚ãÉ (u ‚àà U) (h : Encodable.encode u ‚â§ n), closure (u : Set Œ±)) :=
    by
    intro s t hc hd
    rw [disjoint_left] at hd
    have : ‚àÄ x ‚àà s, ‚àÉ U ‚àà countable_basis Œ±, x ‚àà U ‚àß Disjoint (closure U) t :=
      by
      intro x hx
      rcases(is_basis_countable_basis Œ±).exists_closure_subset
          (hc.is_open_compl.mem_nhds (hd hx)) with
        ‚ü®u, hu, hxu, hut‚ü©
      exact ‚ü®u, hu, hxu, disjoint_left.2 hut‚ü©
    choose! U hu hxu hd
    set V : s ‚Üí countable_basis Œ± := maps_to.restrict _ _ _ hu
    refine' ‚ü®range V, _, forall_range_iff.2 <| Subtype.forall.2 hd, fun n => _‚ü©
    ¬∑ rw [bUnion_range]
      exact fun x hx => mem_Union.2 ‚ü®‚ü®x, hx‚ü©, hxu x hx‚ü©
    ¬∑ simp only [‚Üê supr_eq_Union, sup·µ¢_and']
      exact
        isClosed_bunion·µ¢
          (((finite_le_nat n).preimage_embedding (Encodable.encode' _)).Subset <|
            inter_subset_right _ _)
          fun u hu => isClosed_closure
  refine' ‚ü®fun s t hs ht hd => _‚ü©
  rcases key ht hd with ‚ü®U, hsU, hUd, hUc‚ü©
  rcases key hs hd.symm with ‚ü®V, htV, hVd, hVc‚ü©
  refine'
    ‚ü®‚ãÉ u ‚àà U, ‚Üëu \ ‚ãÉ (v ‚àà V) (hv : Encodable.encode v ‚â§ Encodable.encode u), closure ‚Üëv,
      ‚ãÉ v ‚àà V, ‚Üëv \ ‚ãÉ (u ‚àà U) (hu : Encodable.encode u ‚â§ Encodable.encode v), closure ‚Üëu,
      isOpen_bunion·µ¢ fun u hu => (is_open_of_mem_countable_basis u.2).sdiff (hVc _),
      isOpen_bunion·µ¢ fun v hv => (is_open_of_mem_countable_basis v.2).sdiff (hUc _), fun x hx => _,
      fun x hx => _, _‚ü©
  ¬∑ rcases mem_Union‚ÇÇ.1 (hsU hx) with ‚ü®u, huU, hxu‚ü©
    refine' mem_bUnion huU ‚ü®hxu, _‚ü©
    simp only [mem_Union]
    rintro ‚ü®v, hvV, -, hxv‚ü©
    exact (hVd v hvV).le_bot ‚ü®hxv, hx‚ü©
  ¬∑ rcases mem_Union‚ÇÇ.1 (htV hx) with ‚ü®v, hvV, hxv‚ü©
    refine' mem_bUnion hvV ‚ü®hxv, _‚ü©
    simp only [mem_Union]
    rintro ‚ü®u, huU, -, hxu‚ü©
    exact (hUd u huU).le_bot ‚ü®hxu, hx‚ü©
  ¬∑ simp only [disjoint_left, mem_Union, mem_diff, not_exists, not_and, not_forall,
      Classical.not_not]
    rintro a ‚ü®u, huU, hau, haV‚ü© v hvV hav
    cases' le_total (Encodable.encode u) (Encodable.encode v) with hle hle
    exacts[‚ü®u, huU, hle, subset_closure hau‚ü©, (haV _ hvV hle <| subset_closure hav).elim]
#align normal_space_of_t3_second_countable normalSpaceOfT3SecondCountable
-/

end Normality

section CompletelyNormal

#print T5Space /-
/-- A topological space `Œ±` is a *completely normal Hausdorff space* if each subspace `s : set Œ±` is
a normal Hausdorff space. Equivalently, `Œ±` is a `T‚ÇÅ` space and for any two sets `s`, `t` such that
`closure s` is disjoint with `t` and `s` is disjoint with `closure t`, there exist disjoint
neighbourhoods of `s` and `t`. -/
class T5Space (Œ± : Type u) [TopologicalSpace Œ±] extends T1Space Œ± : Prop where
  completely_normal :
    ‚àÄ ‚¶És t : Set Œ±‚¶Ñ, Disjoint (closure s) t ‚Üí Disjoint s (closure t) ‚Üí Disjoint (ùìùÀ¢ s) (ùìùÀ¢ t)
#align t5_space T5Space
-/

export T5Space (completely_normal)

#print Embedding.t5Space /-
theorem Embedding.t5Space [TopologicalSpace Œ≤] [T5Space Œ≤] {e : Œ± ‚Üí Œ≤} (he : Embedding e) :
    T5Space Œ± := by
  haveI := he.t1_space
  refine' ‚ü®fun s t hd‚ÇÅ hd‚ÇÇ => _‚ü©
  simp only [he.to_inducing.nhds_set_eq_comap]
  refine' disjoint_comap (completely_normal _ _)
  ¬∑
    rwa [‚Üê subset_compl_iff_disjoint_left, image_subset_iff, preimage_compl, ‚Üê
      he.closure_eq_preimage_closure_image, subset_compl_iff_disjoint_left]
  ¬∑
    rwa [‚Üê subset_compl_iff_disjoint_right, image_subset_iff, preimage_compl, ‚Üê
      he.closure_eq_preimage_closure_image, subset_compl_iff_disjoint_right]
#align embedding.t5_space Embedding.t5Space
-/

/-- A subspace of a `T‚ÇÖ` space is a `T‚ÇÖ` space. -/
instance [T5Space Œ±] {p : Œ± ‚Üí Prop} : T5Space { x // p x } :=
  embedding_subtype_val.T5Space

#print T5Space.toNormalSpace /-
-- see Note [lower instance priority]
/-- A `T‚ÇÖ` space is a `T‚ÇÑ` space. -/
instance (priority := 100) T5Space.toNormalSpace [T5Space Œ±] : NormalSpace Œ± :=
  ‚ü®fun s t hs ht hd =>
    separatedNhds_iff_disjoint.2 <|
      completely_normal (by rwa [hs.closure_eq]) (by rwa [ht.closure_eq])‚ü©
#align t5_space.to_normal_space T5Space.toNormalSpace
-/

open SeparationQuotient

/-- The `separation_quotient` of a completely normal space is a T‚ÇÖ space. We don't have separate
typeclasses for completely normal spaces (without T‚ÇÅ assumption) and T‚ÇÖ spaces, so we use the same
class for assumption and for conclusion.

One can prove this using a homeomorphism between `Œ±` and `separation_quotient Œ±`. We give an
alternative proof that works without assuming that `Œ±` is a T‚ÇÅ space. -/
instance [T5Space Œ±] : T5Space (SeparationQuotient Œ±)
    where completely_normal s t hd‚ÇÅ hd‚ÇÇ :=
    by
    rw [‚Üê disjoint_comap_iff surjective_mk, comap_mk_nhds_set, comap_mk_nhds_set]
    apply T5Space.completely_normal <;> rw [‚Üê preimage_mk_closure]
    exacts[hd‚ÇÅ.preimage mk, hd‚ÇÇ.preimage mk]

end CompletelyNormal

#print connectedComponent_eq_inter·µ¢_clopen /-
/-- In a compact t2 space, the connected component of a point equals the intersection of all
its clopen neighbourhoods. -/
theorem connectedComponent_eq_inter·µ¢_clopen [T2Space Œ±] [CompactSpace Œ±] (x : Œ±) :
    connectedComponent x = ‚ãÇ Z : { Z : Set Œ± // IsClopen Z ‚àß x ‚àà Z }, Z :=
  by
  apply eq_of_subset_of_subset connectedComponent_subset_inter·µ¢_clopen
  -- Reduce to showing that the clopen intersection is connected.
  refine' IsPreconnected.subset_connectedComponent _ (mem_Inter.2 fun Z => Z.2.2)
  -- We do this by showing that any disjoint cover by two closed sets implies
  -- that one of these closed sets must contain our whole thing.
  -- To reduce to the case where the cover is disjoint on all of `Œ±` we need that `s` is closed
  have hs : IsClosed (‚ãÇ Z : { Z : Set Œ± // IsClopen Z ‚àß x ‚àà Z }, Z : Set Œ±) :=
    isClosed_inter·µ¢ fun Z => Z.2.1.2
  rw [isPreconnected_iff_subset_of_fully_disjoint_closed hs]
  intro a b ha hb hab ab_disj
  haveI := @normalOfCompactT2 Œ± _ _ _
  -- Since our space is normal, we get two larger disjoint open sets containing the disjoint
  -- closed sets. If we can show that our intersection is a subset of any of these we can then
  -- "descend" this to show that it is a subset of either a or b.
  rcases normal_separation ha hb ab_disj with ‚ü®u, v, hu, hv, hau, hbv, huv‚ü©
  -- If we can find a clopen set around x, contained in u ‚à™ v, we get a disjoint decomposition
  -- Z = Z ‚à© u ‚à™ Z ‚à© v of clopen sets. The intersection of all clopen neighbourhoods will then lie
  -- in whichever of u or v x lies in and hence will be a subset of either a or b.
  rsuffices ‚ü®Z, H‚ü© : ‚àÉ Z : Set Œ±, IsClopen Z ‚àß x ‚àà Z ‚àß Z ‚äÜ u ‚à™ v
  ¬∑ have H1 := isClopen_inter_of_disjoint_cover_clopen H.1 H.2.2 hu hv huv
    rw [union_comm] at H
    have H2 := isClopen_inter_of_disjoint_cover_clopen H.1 H.2.2 hv hu huv.symm
    by_cases x ‚àà u
    -- The x ‚àà u case.
    ¬∑ left
      suffices (‚ãÇ Z : { Z : Set Œ± // IsClopen Z ‚àß x ‚àà Z }, ‚ÜëZ) ‚äÜ u
        by
        replace hab : (‚ãÇ Z : { Z // IsClopen Z ‚àß x ‚àà Z }, ‚ÜëZ) ‚â§ a ‚à™ b := hab
        replace this : (‚ãÇ Z : { Z // IsClopen Z ‚àß x ‚àà Z }, ‚ÜëZ) ‚â§ u := this
        exact Disjoint.left_le_of_le_sup_right hab (huv.mono this hbv)
      ¬∑ apply subset.trans _ (inter_subset_right Z u)
        apply
          Inter_subset (fun Z : { Z : Set Œ± // IsClopen Z ‚àß x ‚àà Z } => ‚ÜëZ)
            ‚ü®Z ‚à© u, H1, mem_inter H.2.1 h‚ü©
    -- If x ‚àâ u, we get x ‚àà v since x ‚àà u ‚à™ v. The rest is then like the x ‚àà u case.
    have h1 : x ‚àà v :=
      by
      cases'
        (mem_union x u v).1
          (mem_of_subset_of_mem (subset.trans hab (union_subset_union hau hbv))
            (mem_Inter.2 fun i => i.2.2)) with
        h1 h1
      ¬∑ exfalso
        exact h h1
      ¬∑ exact h1
    right
    suffices (‚ãÇ Z : { Z : Set Œ± // IsClopen Z ‚àß x ‚àà Z }, ‚ÜëZ) ‚äÜ v
      by
      replace this : (‚ãÇ Z : { Z // IsClopen Z ‚àß x ‚àà Z }, ‚ÜëZ) ‚â§ v := this
      exact (huv.symm.mono this hau).left_le_of_le_sup_left hab
    ¬∑ apply subset.trans _ (inter_subset_right Z v)
      apply
        Inter_subset (fun Z : { Z : Set Œ± // IsClopen Z ‚àß x ‚àà Z } => ‚ÜëZ)
          ‚ü®Z ‚à© v, H2, mem_inter H.2.1 h1‚ü©
  -- Now we find the required Z. We utilize the fact that X \ u ‚à™ v will be compact,
  -- so there must be some finite intersection of clopen neighbourhoods of X disjoint to it,
  -- but a finite intersection of clopen sets is clopen so we let this be our Z.
  have H1 :=
    (hu.union hv).isClosed_compl.IsCompact.inter_inter·µ¢_nonempty
      (fun Z : { Z : Set Œ± // IsClopen Z ‚àß x ‚àà Z } => Z) fun Z => Z.2.1.2
  rw [‚Üê not_disjoint_iff_nonempty_inter, imp_not_comm, not_forall] at H1
  cases' H1 (disjoint_compl_left_iff_subset.2 <| hab.trans <| union_subset_union hau hbv) with Zi H2
  refine' ‚ü®‚ãÇ U ‚àà Zi, Subtype.val U, _, _, _‚ü©
  ¬∑ exact isClopen_binter·µ¢_finset fun Z hZ => Z.2.1
  ¬∑ exact mem_Inter‚ÇÇ.2 fun Z hZ => Z.2.2
  ¬∑ rwa [‚Üê disjoint_compl_left_iff_subset, disjoint_iff_inter_eq_empty, ‚Üê not_nonempty_iff_eq_empty]
#align connected_component_eq_Inter_clopen connectedComponent_eq_inter·µ¢_clopen
-/

section Profinite

#print totallySeparatedSpace_of_t1_of_basis_clopen /-
/-- A T1 space with a clopen basis is totally separated. -/
theorem totallySeparatedSpace_of_t1_of_basis_clopen [T1Space Œ±]
    (h : IsTopologicalBasis { s : Set Œ± | IsClopen s }) : TotallySeparatedSpace Œ± :=
  by
  constructor
  rintro x - y - hxy
  rcases h.mem_nhds_iff.mp (is_open_ne.mem_nhds hxy) with ‚ü®U, hU, hxU, hyU‚ü©
  exact
    ‚ü®U, U·∂ú, hU.is_open, hU.compl.is_open, hxU, fun h => hyU h rfl, (union_compl_self U).Superset,
      disjoint_compl_right‚ü©
#align totally_separated_space_of_t1_of_basis_clopen totallySeparatedSpace_of_t1_of_basis_clopen
-/

variable [T2Space Œ±] [CompactSpace Œ±]

#print compact_t2_tot_disc_iff_tot_sep /-
/-- A compact Hausdorff space is totally disconnected if and only if it is totally separated, this
  is also true for locally compact spaces. -/
theorem compact_t2_tot_disc_iff_tot_sep : TotallyDisconnectedSpace Œ± ‚Üî TotallySeparatedSpace Œ± :=
  by
  constructor
  ¬∑ intro h
    constructor
    rintro x - y -
    contrapose!
    intro hyp
    suffices x ‚àà connectedComponent y by
      simpa [totallyDisconnectedSpace_iff_connectedComponent_singleton.1 h y, mem_singleton_iff]
    rw [connectedComponent_eq_inter·µ¢_clopen, mem_Inter]
    rintro ‚ü®w : Set Œ±, hw : IsClopen w, hy : y ‚àà w‚ü©
    by_contra hx
    exact
      hyp (w·∂ú) w hw.2.isOpen_compl hw.1 hx hy (@isCompl_compl _ w _).symm.Codisjoint.top_le
        disjoint_compl_left
  apply TotallySeparatedSpace.totallyDisconnectedSpace
#align compact_t2_tot_disc_iff_tot_sep compact_t2_tot_disc_iff_tot_sep
-/

variable [TotallyDisconnectedSpace Œ±]

#print nhds_basis_clopen /-
theorem nhds_basis_clopen (x : Œ±) : (ùìù x).HasBasis (fun s : Set Œ± => x ‚àà s ‚àß IsClopen s) id :=
  ‚ü®fun U => by
    constructor
    ¬∑ have : connectedComponent x = {x} :=
        totally_disconnected_space_iff_connected_component_singleton.mp ‚Äπ_‚Ä∫ x
      rw [connectedComponent_eq_inter·µ¢_clopen] at this
      intro hU
      let N := { Z // IsClopen Z ‚àß x ‚àà Z }
      rsuffices ‚ü®‚ü®s, hs, hs'‚ü©, hs''‚ü© : ‚àÉ Z : N, Z.val ‚äÜ U
      ¬∑ exact ‚ü®s, ‚ü®hs', hs‚ü©, hs''‚ü©
      haveI : Nonempty N := ‚ü®‚ü®univ, isClopen_univ, mem_univ x‚ü©‚ü©
      have hNcl : ‚àÄ Z : N, IsClosed Z.val := fun Z => Z.property.1.2
      have hdir : Directed Superset fun Z : N => Z.val :=
        by
        rintro ‚ü®s, hs, hxs‚ü© ‚ü®t, ht, hxt‚ü©
        exact ‚ü®‚ü®s ‚à© t, hs.inter ht, ‚ü®hxs, hxt‚ü©‚ü©, inter_subset_left s t, inter_subset_right s t‚ü©
      have h_nhd : ‚àÄ y ‚àà ‚ãÇ Z : N, Z.val, U ‚àà ùìù y :=
        by
        intro y y_in
        erw [this, mem_singleton_iff] at y_in
        rwa [y_in]
      exact exists_subset_nhds_of_compactSpace hdir hNcl h_nhd
    ¬∑ rintro ‚ü®V, ‚ü®hxV, V_op, -‚ü©, hUV : V ‚äÜ U‚ü©
      rw [mem_nhds_iff]
      exact ‚ü®V, hUV, V_op, hxV‚ü©‚ü©
#align nhds_basis_clopen nhds_basis_clopen
-/

#print isTopologicalBasis_clopen /-
theorem isTopologicalBasis_clopen : IsTopologicalBasis { s : Set Œ± | IsClopen s } :=
  by
  apply is_topological_basis_of_open_of_nhds fun U (hU : IsClopen U) => hU.1
  intro x U hxU U_op
  have : U ‚àà ùìù x := IsOpen.mem_nhds U_op hxU
  rcases(nhds_basis_clopen x).mem_iff.mp this with ‚ü®V, ‚ü®hxV, hV‚ü©, hVU : V ‚äÜ U‚ü©
  use V
  tauto
#align is_topological_basis_clopen isTopologicalBasis_clopen
-/

/- warning: compact_exists_clopen_in_open -> compact_exists_clopen_in_open is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T2Space.{u1} Œ± _inst_1] [_inst_3 : CompactSpace.{u1} Œ± _inst_1] [_inst_4 : TotallyDisconnectedSpace.{u1} Œ± _inst_1] {x : Œ±} {U : Set.{u1} Œ±}, (IsOpen.{u1} Œ± _inst_1 U) -> (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x U) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (V : Set.{u1} Œ±) => Exists.{0} (IsClopen.{u1} Œ± _inst_1 V) (fun (hV : IsClopen.{u1} Œ± _inst_1 V) => And (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x V) (HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.hasSubset.{u1} Œ±) V U))))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] [_inst_2 : T2Space.{u1} Œ± _inst_1] [_inst_3 : CompactSpace.{u1} Œ± _inst_1] [_inst_4 : TotallyDisconnectedSpace.{u1} Œ± _inst_1] {x : Œ±} {U : Set.{u1} Œ±}, (IsOpen.{u1} Œ± _inst_1 U) -> (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x U) -> (Exists.{succ u1} (Set.{u1} Œ±) (fun (V : Set.{u1} Œ±) => And (IsClopen.{u1} Œ± _inst_1 V) (And (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x V) (HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.instHasSubsetSet.{u1} Œ±) V U))))
Case conversion may be inaccurate. Consider using '#align compact_exists_clopen_in_open compact_exists_clopen_in_open‚Çì'. -/
/-- Every member of an open set in a compact Hausdorff totally disconnected space
  is contained in a clopen set contained in the open set.  -/
theorem compact_exists_clopen_in_open {x : Œ±} {U : Set Œ±} (is_open : IsOpen U) (memU : x ‚àà U) :
    ‚àÉ (V : Set Œ±)(hV : IsClopen V), x ‚àà V ‚àß V ‚äÜ U :=
  (IsTopologicalBasis.mem_nhds_iff isTopologicalBasis_clopen).1 (IsOpen.mem_nhds memU)
#align compact_exists_clopen_in_open compact_exists_clopen_in_open

end Profinite

section LocallyCompact

variable {H : Type _} [TopologicalSpace H] [LocallyCompactSpace H] [T2Space H]

#print loc_compact_Haus_tot_disc_of_zero_dim /-
/-- A locally compact Hausdorff totally disconnected space has a basis with clopen elements. -/
theorem loc_compact_Haus_tot_disc_of_zero_dim [TotallyDisconnectedSpace H] :
    IsTopologicalBasis { s : Set H | IsClopen s } :=
  by
  refine' is_topological_basis_of_open_of_nhds (fun u hu => hu.1) _
  rintro x U memU hU
  obtain ‚ü®s, comp, xs, sU‚ü© := exists_compact_subset hU memU
  obtain ‚ü®t, h, ht, xt‚ü© := mem_interior.1 xs
  let u : Set s := (coe : s ‚Üí H) ‚Åª¬π' interior s
  have u_open_in_s : IsOpen u := is_open_interior.preimage continuous_subtype_val
  let X : s := ‚ü®x, h xt‚ü©
  have Xu : X ‚àà u := xs
  haveI : CompactSpace s := isCompact_iff_compactSpace.1 comp
  obtain ‚ü®V : Set s, clopen_in_s, Vx, V_sub‚ü© := compact_exists_clopen_in_open u_open_in_s Xu
  have V_clopen : IsClopen ((coe : s ‚Üí H) '' V) :=
    by
    refine' ‚ü®_, comp.is_closed.closed_embedding_subtype_coe.closed_iff_image_closed.1 clopen_in_s.2‚ü©
    let v : Set u := (coe : u ‚Üí s) ‚Åª¬π' V
    have : (coe : u ‚Üí H) = (coe : s ‚Üí H) ‚àò (coe : u ‚Üí s) := rfl
    have f0 : Embedding (coe : u ‚Üí H) := embedding_subtype_coe.comp embedding_subtype_val
    have f1 : OpenEmbedding (coe : u ‚Üí H) :=
      by
      refine' ‚ü®f0, _‚ü©
      ¬∑ have : Set.range (coe : u ‚Üí H) = interior s :=
          by
          rw [this, Set.range_comp, Subtype.range_coe, Subtype.image_preimage_coe]
          apply Set.inter_eq_self_of_subset_left interior_subset
        rw [this]
        apply isOpen_interior
    have f2 : IsOpen v := clopen_in_s.1.Preimage continuous_subtype_val
    have f3 : (coe : s ‚Üí H) '' V = (coe : u ‚Üí H) '' v := by
      rw [this, image_comp coe coe, Subtype.image_preimage_coe, inter_eq_self_of_subset_left V_sub]
    rw [f3]
    apply f1.is_open_map v f2
  refine' ‚ü®coe '' V, V_clopen, by simp [Vx, h xt], _‚ü©
  trans s
  ¬∑ simp
  assumption
#align loc_compact_Haus_tot_disc_of_zero_dim loc_compact_Haus_tot_disc_of_zero_dim
-/

#print loc_compact_t2_tot_disc_iff_tot_sep /-
/-- A locally compact Hausdorff space is totally disconnected
  if and only if it is totally separated. -/
theorem loc_compact_t2_tot_disc_iff_tot_sep :
    TotallyDisconnectedSpace H ‚Üî TotallySeparatedSpace H :=
  by
  constructor
  ¬∑ intro h
    exact totallySeparatedSpace_of_t1_of_basis_clopen loc_compact_Haus_tot_disc_of_zero_dim
  apply TotallySeparatedSpace.totallyDisconnectedSpace
#align loc_compact_t2_tot_disc_iff_tot_sep loc_compact_t2_tot_disc_iff_tot_sep
-/

end LocallyCompact

#print ConnectedComponents.t2 /-
/-- `connected_components Œ±` is Hausdorff when `Œ±` is Hausdorff and compact -/
instance ConnectedComponents.t2 [T2Space Œ±] [CompactSpace Œ±] : T2Space (ConnectedComponents Œ±) :=
  by
  -- Proof follows that of: https://stacks.math.columbia.edu/tag/0900
  -- Fix 2 distinct connected components, with points a and b
  refine' ‚ü®connected_components.surjective_coe.forall‚ÇÇ.2 fun a b ne => _‚ü©
  rw [ConnectedComponents.coe_ne_coe] at ne
  have h := connectedComponent_disjoint Ne
  -- write ‚Üëb as the intersection of all clopen subsets containing it
  rw [connectedComponent_eq_inter·µ¢_clopen b, disjoint_iff_inter_eq_empty] at h
  -- Now we show that this can be reduced to some clopen containing `‚Üëb` being disjoint to `‚Üëa`
  obtain ‚ü®U, V, hU, ha, hb, rfl‚ü© :
    ‚àÉ (U : Set Œ±)(V : Set (ConnectedComponents Œ±)),
      IsClopen U ‚àß connectedComponent a ‚à© U = ‚àÖ ‚àß connectedComponent b ‚äÜ U ‚àß coe ‚Åª¬π' V = U :=
    by
    cases' is_closed_connected_component.is_compact.elim_finite_subfamily_closed _ _ h with fin_a ha
    swap
    ¬∑ exact fun Z => Z.2.1.2
    -- This clopen and its complement will separate the connected components of `a` and `b`
    set U : Set Œ± := ‚ãÇ (i : { Z // IsClopen Z ‚àß b ‚àà Z }) (H : i ‚àà fin_a), i
    have hU : IsClopen U := isClopen_binter·µ¢_finset fun i j => i.2.1
    exact
      ‚ü®U, coe '' U, hU, ha, subset_Inter‚ÇÇ fun Z _ => Z.2.1.connectedComponent_subset Z.2.2,
        (connectedComponents_preimage_image U).symm ‚ñ∏ hU.bUnion_connected_component_eq‚ü©
  rw [connected_components.quotient_map_coe.is_clopen_preimage] at hU
  refine' ‚ü®V·∂ú, V, hU.compl.is_open, hU.is_open, _, hb mem_connectedComponent, disjoint_compl_left‚ü©
  exact fun h => flip Set.Nonempty.ne_empty ha ‚ü®a, mem_connectedComponent, h‚ü©
#align connected_components.t2 ConnectedComponents.t2
-/

