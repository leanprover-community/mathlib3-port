/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro, Yury Kudryashov

! This file was ported from Lean 3 source module topology.order.basic
! leanprover-community/mathlib commit d012cd09a9b256d870751284dd6a29882b0be105
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Data.Set.Intervals.Pi
import Mathbin.Data.Set.Pointwise.Interval
import Mathbin.Order.Filter.Interval
import Mathbin.Topology.Algebra.Group.Basic
import Mathbin.Topology.Algebra.Order.LeftRight

/-!
# Theory of topology on ordered spaces

## Main definitions

The order topology on an ordered space is the topology generated by all open intervals (or
equivalently by those of the form `(-‚àû, a)` and `(b, +‚àû)`). We define it as `preorder.topology Œ±`.
However, we do *not* register it as an instance (as many existing ordered types already have
topologies, which would be equal but not definitionally equal to `preorder.topology Œ±`). Instead,
we introduce a class `order_topology Œ±` (which is a `Prop`, also known as a mixin) saying that on
the type `Œ±` having already a topological space structure and a preorder structure, the topological
structure is equal to the order topology.

We also introduce another (mixin) class `order_closed_topology Œ±` saying that the set of points
`(x, y)` with `x ‚â§ y` is closed in the product space. This is automatically satisfied on a linear
order with the order topology.

We prove many basic properties of such topologies.

## Main statements

This file contains the proofs of the following facts. For exact requirements
(`order_closed_topology` vs `order_topology`, `preorder` vs `partial_order` vs `linear_order` etc)
see their statements.

### Open / closed sets

* `is_open_lt` : if `f` and `g` are continuous functions, then `{x | f x < g x}` is open;
* `is_open_Iio`, `is_open_Ioi`, `is_open_Ioo` : open intervals are open;
* `is_closed_le` : if `f` and `g` are continuous functions, then `{x | f x ‚â§ g x}` is closed;
* `is_closed_Iic`, `is_closed_Ici`, `is_closed_Icc` : closed intervals are closed;
* `frontier_le_subset_eq`, `frontier_lt_subset_eq` : frontiers of both `{x | f x ‚â§ g x}`
  and `{x | f x < g x}` are included by `{x | f x = g x}`;
* `exists_Ioc_subset_of_mem_nhds`, `exists_Ico_subset_of_mem_nhds` : if `x < y`, then any
  neighborhood of `x` includes an interval `[x, z)` for some `z ‚àà (x, y]`, and any neighborhood
  of `y` includes an interval `(z, y]` for some `z ‚àà [x, y)`.

### Convergence and inequalities

* `le_of_tendsto_of_tendsto` : if `f` converges to `a`, `g` converges to `b`, and eventually
  `f x ‚â§ g x`, then `a ‚â§ b`
* `le_of_tendsto`, `ge_of_tendsto` : if `f` converges to `a` and eventually `f x ‚â§ b`
  (resp., `b ‚â§ f x`), then `a ‚â§ b` (resp., `b ‚â§ a); we also provide primed versions
  that assume the inequalities to hold for all `x`.

### Min, max, `Sup` and `Inf`

* `continuous.min`, `continuous.max`: pointwise `min`/`max` of two continuous functions is
  continuous.
* `tendsto.min`, `tendsto.max` : if `f` tends to `a` and `g` tends to `b`, then their pointwise
  `min`/`max` tend to `min a b` and `max a b`, respectively.
* `tendsto_of_tendsto_of_tendsto_of_le_of_le` : theorem known as squeeze theorem,
  sandwich theorem, theorem of Carabinieri, and two policemen (and a drunk) theorem; if `g` and `h`
  both converge to `a`, and eventually `g x ‚â§ f x ‚â§ h x`, then `f` converges to `a`.

## Implementation notes

We do _not_ register the order topology as an instance on a preorder (or even on a linear order).
Indeed, on many such spaces, a topology has already been constructed in a different way (think
of the discrete spaces `‚Ñï` or `‚Ñ§`, or `‚Ñù` that could inherit a topology as the completion of `‚Ñö`),
and is in general not defeq to the one generated by the intervals. We make it available as a
definition `preorder.topology Œ±` though, that can be registered as an instance when necessary, or
for specific types.
-/


open Set Filter TopologicalSpace

open Function

open OrderDual (toDual ofDual)

open TopologicalSpace Classical Filter

universe u v w

variable {Œ± : Type u} {Œ≤ : Type v} {Œ≥ : Type w}

/-- A topology on a set which is both a topological space and a preorder is _order-closed_ if the
set of points `(x, y)` with `x ‚â§ y` is closed in the product space. We introduce this as a mixin.
This property is satisfied for the order topology on a linear order, but it can be satisfied more
generally, and suffices to derive many interesting properties relating order and topology. -/
class OrderClosedTopology (Œ± : Type _) [TopologicalSpace Œ±] [Preorder Œ±] : Prop where
  is_closed_le' : IsClosed { p : Œ± √ó Œ± | p.1 ‚â§ p.2 }
#align order_closed_topology OrderClosedTopology

instance [TopologicalSpace Œ±] [h : FirstCountableTopology Œ±] : FirstCountableTopology Œ±·µí·µà :=
  h

instance [TopologicalSpace Œ±] [h : SecondCountableTopology Œ±] : SecondCountableTopology Œ±·µí·µà :=
  h

@[to_additive]
instance [TopologicalSpace Œ±] [Mul Œ±] [h : HasContinuousMul Œ±] : HasContinuousMul Œ±·µí·µà :=
  h

theorem Dense.order_dual [TopologicalSpace Œ±] {s : Set Œ±} (hs : Dense s) :
    Dense (OrderDual.ofDual ‚Åª¬π' s) :=
  hs
#align dense.order_dual Dense.order_dual

section OrderClosedTopology

section Preorder

variable [TopologicalSpace Œ±] [Preorder Œ±] [t : OrderClosedTopology Œ±]

include t

namespace Subtype

instance {p : Œ± ‚Üí Prop} : OrderClosedTopology (Subtype p) :=
  have this : Continuous fun p : Subtype p √ó Subtype p => ((p.fst : Œ±), (p.snd : Œ±)) :=
    (continuous_subtype_coe.comp continuous_fst).prod_mk
      (continuous_subtype_coe.comp continuous_snd)
  OrderClosedTopology.mk (t.is_closed_le'.Preimage this)

end Subtype

theorem is_closed_le_prod : IsClosed { p : Œ± √ó Œ± | p.1 ‚â§ p.2 } :=
  t.is_closed_le'
#align is_closed_le_prod is_closed_le_prod

theorem is_closed_le [TopologicalSpace Œ≤] {f g : Œ≤ ‚Üí Œ±} (hf : Continuous f) (hg : Continuous g) :
    IsClosed { b | f b ‚â§ g b } :=
  continuous_iff_is_closed.mp (hf.prod_mk hg) _ is_closed_le_prod
#align is_closed_le is_closed_le

theorem is_closed_le' (a : Œ±) : IsClosed { b | b ‚â§ a } :=
  is_closed_le continuous_id continuous_const
#align is_closed_le' is_closed_le'

theorem is_closed_Iic {a : Œ±} : IsClosed (iic a) :=
  is_closed_le' a
#align is_closed_Iic is_closed_Iic

theorem is_closed_ge' (a : Œ±) : IsClosed { b | a ‚â§ b } :=
  is_closed_le continuous_const continuous_id
#align is_closed_ge' is_closed_ge'

theorem is_closed_Ici {a : Œ±} : IsClosed (ici a) :=
  is_closed_ge' a
#align is_closed_Ici is_closed_Ici

instance : OrderClosedTopology Œ±·µí·µà :=
  ‚ü®(@OrderClosedTopology.is_closed_le' Œ± _ _ _).Preimage continuous_swap‚ü©

theorem is_closed_Icc {a b : Œ±} : IsClosed (icc a b) :=
  IsClosed.inter is_closed_Ici is_closed_Iic
#align is_closed_Icc is_closed_Icc

@[simp]
theorem closure_Icc (a b : Œ±) : closure (icc a b) = icc a b :=
  is_closed_Icc.closure_eq
#align closure_Icc closure_Icc

@[simp]
theorem closure_Iic (a : Œ±) : closure (iic a) = iic a :=
  is_closed_Iic.closure_eq
#align closure_Iic closure_Iic

@[simp]
theorem closure_Ici (a : Œ±) : closure (ici a) = ici a :=
  is_closed_Ici.closure_eq
#align closure_Ici closure_Ici

theorem le_of_tendsto_of_tendsto {f g : Œ≤ ‚Üí Œ±} {b : Filter Œ≤} {a‚ÇÅ a‚ÇÇ : Œ±} [NeBot b]
    (hf : Tendsto f b (ùìù a‚ÇÅ)) (hg : Tendsto g b (ùìù a‚ÇÇ)) (h : f ‚â§·∂†[b] g) : a‚ÇÅ ‚â§ a‚ÇÇ :=
  have : Tendsto (fun b => (f b, g b)) b (ùìù (a‚ÇÅ, a‚ÇÇ)) := by
    rw [nhds_prod_eq] <;> exact hf.prod_mk hg
  show (a‚ÇÅ, a‚ÇÇ) ‚àà { p : Œ± √ó Œ± | p.1 ‚â§ p.2 } from t.is_closed_le'.mem_of_tendsto this h
#align le_of_tendsto_of_tendsto le_of_tendsto_of_tendsto

alias le_of_tendsto_of_tendsto ‚Üê tendsto_le_of_eventually_le

theorem le_of_tendsto_of_tendsto' {f g : Œ≤ ‚Üí Œ±} {b : Filter Œ≤} {a‚ÇÅ a‚ÇÇ : Œ±} [NeBot b]
    (hf : Tendsto f b (ùìù a‚ÇÅ)) (hg : Tendsto g b (ùìù a‚ÇÇ)) (h : ‚àÄ x, f x ‚â§ g x) : a‚ÇÅ ‚â§ a‚ÇÇ :=
  le_of_tendsto_of_tendsto hf hg (eventually_of_forall h)
#align le_of_tendsto_of_tendsto' le_of_tendsto_of_tendsto'

theorem le_of_tendsto {f : Œ≤ ‚Üí Œ±} {a b : Œ±} {x : Filter Œ≤} [NeBot x] (lim : Tendsto f x (ùìù a))
    (h : ‚àÄ·∂† c in x, f c ‚â§ b) : a ‚â§ b :=
  le_of_tendsto_of_tendsto lim tendsto_const_nhds h
#align le_of_tendsto le_of_tendsto

theorem le_of_tendsto' {f : Œ≤ ‚Üí Œ±} {a b : Œ±} {x : Filter Œ≤} [NeBot x] (lim : Tendsto f x (ùìù a))
    (h : ‚àÄ c, f c ‚â§ b) : a ‚â§ b :=
  le_of_tendsto lim (eventually_of_forall h)
#align le_of_tendsto' le_of_tendsto'

theorem ge_of_tendsto {f : Œ≤ ‚Üí Œ±} {a b : Œ±} {x : Filter Œ≤} [NeBot x] (lim : Tendsto f x (ùìù a))
    (h : ‚àÄ·∂† c in x, b ‚â§ f c) : b ‚â§ a :=
  le_of_tendsto_of_tendsto tendsto_const_nhds lim h
#align ge_of_tendsto ge_of_tendsto

theorem ge_of_tendsto' {f : Œ≤ ‚Üí Œ±} {a b : Œ±} {x : Filter Œ≤} [NeBot x] (lim : Tendsto f x (ùìù a))
    (h : ‚àÄ c, b ‚â§ f c) : b ‚â§ a :=
  ge_of_tendsto lim (eventually_of_forall h)
#align ge_of_tendsto' ge_of_tendsto'

@[simp]
theorem closure_le_eq [TopologicalSpace Œ≤] {f g : Œ≤ ‚Üí Œ±} (hf : Continuous f) (hg : Continuous g) :
    closure { b | f b ‚â§ g b } = { b | f b ‚â§ g b } :=
  (is_closed_le hf hg).closure_eq
#align closure_le_eq closure_le_eq

theorem closure_lt_subset_le [TopologicalSpace Œ≤] {f g : Œ≤ ‚Üí Œ±} (hf : Continuous f)
    (hg : Continuous g) : closure { b | f b < g b } ‚äÜ { b | f b ‚â§ g b } :=
  (closure_minimal fun x => le_of_lt) <| is_closed_le hf hg
#align closure_lt_subset_le closure_lt_subset_le

theorem ContinuousWithinAt.closure_le [TopologicalSpace Œ≤] {f g : Œ≤ ‚Üí Œ±} {s : Set Œ≤} {x : Œ≤}
    (hx : x ‚àà closure s) (hf : ContinuousWithinAt f s x) (hg : ContinuousWithinAt g s x)
    (h : ‚àÄ y ‚àà s, f y ‚â§ g y) : f x ‚â§ g x :=
  show (f x, g x) ‚àà { p : Œ± √ó Œ± | p.1 ‚â§ p.2 } from
    OrderClosedTopology.is_closed_le'.closure_subset ((hf.Prod hg).mem_closure hx h)
#align continuous_within_at.closure_le ContinuousWithinAt.closure_le

/-- If `s` is a closed set and two functions `f` and `g` are continuous on `s`,
then the set `{x ‚àà s | f x ‚â§ g x}` is a closed set. -/
theorem IsClosed.is_closed_le [TopologicalSpace Œ≤] {f g : Œ≤ ‚Üí Œ±} {s : Set Œ≤} (hs : IsClosed s)
    (hf : ContinuousOn f s) (hg : ContinuousOn g s) : IsClosed ({ x ‚àà s | f x ‚â§ g x }) :=
  (hf.Prod hg).preimage_closed_of_closed hs OrderClosedTopology.is_closed_le'
#align is_closed.is_closed_le IsClosed.is_closed_le

theorem le_on_closure [TopologicalSpace Œ≤] {f g : Œ≤ ‚Üí Œ±} {s : Set Œ≤} (h : ‚àÄ x ‚àà s, f x ‚â§ g x)
    (hf : ContinuousOn f (closure s)) (hg : ContinuousOn g (closure s)) ‚¶Éx‚¶Ñ (hx : x ‚àà closure s) :
    f x ‚â§ g x :=
  have : s ‚äÜ { y ‚àà closure s | f y ‚â§ g y } := fun y hy => ‚ü®subset_closure hy, h y hy‚ü©
  (closure_minimal this (is_closed_closure.is_closed_le hf hg) hx).2
#align le_on_closure le_on_closure

theorem IsClosed.epigraph [TopologicalSpace Œ≤] {f : Œ≤ ‚Üí Œ±} {s : Set Œ≤} (hs : IsClosed s)
    (hf : ContinuousOn f s) : IsClosed { p : Œ≤ √ó Œ± | p.1 ‚àà s ‚àß f p.1 ‚â§ p.2 } :=
  (hs.Preimage continuous_fst).is_closed_le (hf.comp continuous_on_fst Subset.rfl) continuous_on_snd
#align is_closed.epigraph IsClosed.epigraph

theorem IsClosed.hypograph [TopologicalSpace Œ≤] {f : Œ≤ ‚Üí Œ±} {s : Set Œ≤} (hs : IsClosed s)
    (hf : ContinuousOn f s) : IsClosed { p : Œ≤ √ó Œ± | p.1 ‚àà s ‚àß p.2 ‚â§ f p.1 } :=
  (hs.Preimage continuous_fst).is_closed_le continuous_on_snd (hf.comp continuous_on_fst Subset.rfl)
#align is_closed.hypograph IsClosed.hypograph

omit t

theorem nhdsWithinIciNeBot {a b : Œ±} (H‚ÇÇ : a ‚â§ b) : NeBot (ùìù[ici a] b) :=
  nhdsWithinNeBotOfMem H‚ÇÇ
#align nhds_within_Ici_ne_bot nhdsWithinIciNeBot

@[instance]
theorem nhdsWithinIciSelfNeBot (a : Œ±) : NeBot (ùìù[‚â•] a) :=
  nhdsWithinIciNeBot (le_refl a)
#align nhds_within_Ici_self_ne_bot nhdsWithinIciSelfNeBot

theorem nhdsWithinIicNeBot {a b : Œ±} (H : a ‚â§ b) : NeBot (ùìù[iic b] a) :=
  nhdsWithinNeBotOfMem H
#align nhds_within_Iic_ne_bot nhdsWithinIicNeBot

@[instance]
theorem nhdsWithinIicSelfNeBot (a : Œ±) : NeBot (ùìù[‚â§] a) :=
  nhdsWithinIicNeBot (le_refl a)
#align nhds_within_Iic_self_ne_bot nhdsWithinIicSelfNeBot

end Preorder

section PartialOrder

variable [TopologicalSpace Œ±] [PartialOrder Œ±] [t : OrderClosedTopology Œ±]

include t

-- see Note [lower instance priority]
instance (priority := 90) OrderClosedTopology.toT2Space : T2Space Œ± :=
  t2_iff_is_closed_diagonal.2 <| by
    simpa only [diagonal, le_antisymm_iff] using
      t.is_closed_le'.inter (is_closed_le continuous_snd continuous_fst)
#align order_closed_topology.to_t2_space OrderClosedTopology.toT2Space

end PartialOrder

section LinearOrder

variable [TopologicalSpace Œ±] [LinearOrder Œ±] [OrderClosedTopology Œ±]

theorem is_open_lt_prod : IsOpen { p : Œ± √ó Œ± | p.1 < p.2 } := by
  simp_rw [‚Üê is_closed_compl_iff, compl_set_of, not_lt]
  exact is_closed_le continuous_snd continuous_fst
#align is_open_lt_prod is_open_lt_prod

theorem is_open_lt [TopologicalSpace Œ≤] {f g : Œ≤ ‚Üí Œ±} (hf : Continuous f) (hg : Continuous g) :
    IsOpen { b | f b < g b } := by
  simp [lt_iff_not_ge, -not_le] <;> exact (is_closed_le hg hf).is_open_compl
#align is_open_lt is_open_lt

variable {a b : Œ±}

theorem is_open_Iio : IsOpen (iio a) :=
  is_open_lt continuous_id continuous_const
#align is_open_Iio is_open_Iio

theorem is_open_Ioi : IsOpen (ioi a) :=
  is_open_lt continuous_const continuous_id
#align is_open_Ioi is_open_Ioi

theorem is_open_Ioo : IsOpen (ioo a b) :=
  IsOpen.inter is_open_Ioi is_open_Iio
#align is_open_Ioo is_open_Ioo

@[simp]
theorem interior_Ioi : interior (ioi a) = ioi a :=
  is_open_Ioi.interior_eq
#align interior_Ioi interior_Ioi

@[simp]
theorem interior_Iio : interior (iio a) = iio a :=
  is_open_Iio.interior_eq
#align interior_Iio interior_Iio

@[simp]
theorem interior_Ioo : interior (ioo a b) = ioo a b :=
  is_open_Ioo.interior_eq
#align interior_Ioo interior_Ioo

theorem Ioo_subset_closure_interior : ioo a b ‚äÜ closure (interior (ioo a b)) := by
  simp only [interior_Ioo, subset_closure]
#align Ioo_subset_closure_interior Ioo_subset_closure_interior

theorem Iio_mem_nhds {a b : Œ±} (h : a < b) : iio b ‚àà ùìù a :=
  IsOpen.mem_nhds is_open_Iio h
#align Iio_mem_nhds Iio_mem_nhds

theorem Ioi_mem_nhds {a b : Œ±} (h : a < b) : ioi a ‚àà ùìù b :=
  IsOpen.mem_nhds is_open_Ioi h
#align Ioi_mem_nhds Ioi_mem_nhds

theorem Iic_mem_nhds {a b : Œ±} (h : a < b) : iic b ‚àà ùìù a :=
  mem_of_superset (Iio_mem_nhds h) Iio_subset_Iic_self
#align Iic_mem_nhds Iic_mem_nhds

theorem Ici_mem_nhds {a b : Œ±} (h : a < b) : ici a ‚àà ùìù b :=
  mem_of_superset (Ioi_mem_nhds h) Ioi_subset_Ici_self
#align Ici_mem_nhds Ici_mem_nhds

theorem Ioo_mem_nhds {a b x : Œ±} (ha : a < x) (hb : x < b) : ioo a b ‚àà ùìù x :=
  IsOpen.mem_nhds is_open_Ioo ‚ü®ha, hb‚ü©
#align Ioo_mem_nhds Ioo_mem_nhds

theorem Ioc_mem_nhds {a b x : Œ±} (ha : a < x) (hb : x < b) : ioc a b ‚àà ùìù x :=
  mem_of_superset (Ioo_mem_nhds ha hb) Ioo_subset_Ioc_self
#align Ioc_mem_nhds Ioc_mem_nhds

theorem Ico_mem_nhds {a b x : Œ±} (ha : a < x) (hb : x < b) : ico a b ‚àà ùìù x :=
  mem_of_superset (Ioo_mem_nhds ha hb) Ioo_subset_Ico_self
#align Ico_mem_nhds Ico_mem_nhds

theorem Icc_mem_nhds {a b x : Œ±} (ha : a < x) (hb : x < b) : icc a b ‚àà ùìù x :=
  mem_of_superset (Ioo_mem_nhds ha hb) Ioo_subset_Icc_self
#align Icc_mem_nhds Icc_mem_nhds

theorem eventually_lt_of_tendsto_lt {l : Filter Œ≥} {f : Œ≥ ‚Üí Œ±} {u v : Œ±} (hv : v < u)
    (h : Filter.Tendsto f l (ùìù v)) : ‚àÄ·∂† a in l, f a < u :=
  tendsto_nhds.1 h (¬∑ < u) is_open_Iio hv
#align eventually_lt_of_tendsto_lt eventually_lt_of_tendsto_lt

theorem eventually_gt_of_tendsto_gt {l : Filter Œ≥} {f : Œ≥ ‚Üí Œ±} {u v : Œ±} (hv : u < v)
    (h : Filter.Tendsto f l (ùìù v)) : ‚àÄ·∂† a in l, u < f a :=
  tendsto_nhds.1 h (¬∑ > u) is_open_Ioi hv
#align eventually_gt_of_tendsto_gt eventually_gt_of_tendsto_gt

theorem eventually_le_of_tendsto_lt {l : Filter Œ≥} {f : Œ≥ ‚Üí Œ±} {u v : Œ±} (hv : v < u)
    (h : Tendsto f l (ùìù v)) : ‚àÄ·∂† a in l, f a ‚â§ u :=
  (eventually_lt_of_tendsto_lt hv h).mono fun v => le_of_lt
#align eventually_le_of_tendsto_lt eventually_le_of_tendsto_lt

theorem eventually_ge_of_tendsto_gt {l : Filter Œ≥} {f : Œ≥ ‚Üí Œ±} {u v : Œ±} (hv : u < v)
    (h : Tendsto f l (ùìù v)) : ‚àÄ·∂† a in l, u ‚â§ f a :=
  (eventually_gt_of_tendsto_gt hv h).mono fun v => le_of_lt
#align eventually_ge_of_tendsto_gt eventually_ge_of_tendsto_gt

variable [TopologicalSpace Œ≥]

/-!
### Neighborhoods to the left and to the right on an `order_closed_topology`

Limits to the left and to the right of real functions are defined in terms of neighborhoods to
the left and to the right, either open or closed, i.e., members of `ùìù[>] a` and
`ùìù[‚â•] a` on the right, and similarly on the left. Here we simply prove that all
right-neighborhoods of a point are equal, and we'll prove later other useful characterizations which
require the stronger hypothesis `order_topology Œ±` -/


/-!
#### Right neighborhoods, point excluded
-/


theorem Ioo_mem_nhds_within_Ioi {a b c : Œ±} (H : b ‚àà ico a c) : ioo a c ‚àà ùìù[>] b :=
  mem_nhds_within.2
    ‚ü®iio c, is_open_Iio, H.2, by rw [inter_comm, Ioi_inter_Iio] <;> exact Ioo_subset_Ioo_left H.1‚ü©
#align Ioo_mem_nhds_within_Ioi Ioo_mem_nhds_within_Ioi

theorem Ioc_mem_nhds_within_Ioi {a b c : Œ±} (H : b ‚àà ico a c) : ioc a c ‚àà ùìù[>] b :=
  mem_of_superset (Ioo_mem_nhds_within_Ioi H) Ioo_subset_Ioc_self
#align Ioc_mem_nhds_within_Ioi Ioc_mem_nhds_within_Ioi

theorem Ico_mem_nhds_within_Ioi {a b c : Œ±} (H : b ‚àà ico a c) : ico a c ‚àà ùìù[>] b :=
  mem_of_superset (Ioo_mem_nhds_within_Ioi H) Ioo_subset_Ico_self
#align Ico_mem_nhds_within_Ioi Ico_mem_nhds_within_Ioi

theorem Icc_mem_nhds_within_Ioi {a b c : Œ±} (H : b ‚àà ico a c) : icc a c ‚àà ùìù[>] b :=
  mem_of_superset (Ioo_mem_nhds_within_Ioi H) Ioo_subset_Icc_self
#align Icc_mem_nhds_within_Ioi Icc_mem_nhds_within_Ioi

@[simp]
theorem nhds_within_Ioc_eq_nhds_within_Ioi {a b : Œ±} (h : a < b) : ùìù[ioc a b] a = ùìù[>] a :=
  le_antisymm (nhds_within_mono _ Ioc_subset_Ioi_self) <|
    nhds_within_le_of_mem <| Ioc_mem_nhds_within_Ioi <| left_mem_Ico.2 h
#align nhds_within_Ioc_eq_nhds_within_Ioi nhds_within_Ioc_eq_nhds_within_Ioi

@[simp]
theorem nhds_within_Ioo_eq_nhds_within_Ioi {a b : Œ±} (h : a < b) : ùìù[ioo a b] a = ùìù[>] a :=
  le_antisymm (nhds_within_mono _ Ioo_subset_Ioi_self) <|
    nhds_within_le_of_mem <| Ioo_mem_nhds_within_Ioi <| left_mem_Ico.2 h
#align nhds_within_Ioo_eq_nhds_within_Ioi nhds_within_Ioo_eq_nhds_within_Ioi

@[simp]
theorem continuous_within_at_Ioc_iff_Ioi [TopologicalSpace Œ≤] {a b : Œ±} {f : Œ± ‚Üí Œ≤} (h : a < b) :
    ContinuousWithinAt f (ioc a b) a ‚Üî ContinuousWithinAt f (ioi a) a := by
  simp only [ContinuousWithinAt, nhds_within_Ioc_eq_nhds_within_Ioi h]
#align continuous_within_at_Ioc_iff_Ioi continuous_within_at_Ioc_iff_Ioi

@[simp]
theorem continuous_within_at_Ioo_iff_Ioi [TopologicalSpace Œ≤] {a b : Œ±} {f : Œ± ‚Üí Œ≤} (h : a < b) :
    ContinuousWithinAt f (ioo a b) a ‚Üî ContinuousWithinAt f (ioi a) a := by
  simp only [ContinuousWithinAt, nhds_within_Ioo_eq_nhds_within_Ioi h]
#align continuous_within_at_Ioo_iff_Ioi continuous_within_at_Ioo_iff_Ioi

/-!
#### Left neighborhoods, point excluded
-/


theorem Ioo_mem_nhds_within_Iio {a b c : Œ±} (H : b ‚àà ioc a c) : ioo a c ‚àà ùìù[<] b := by
  simpa only [dual_Ioo] using
    Ioo_mem_nhds_within_Ioi (show to_dual b ‚àà Ico (to_dual c) (to_dual a) from H.symm)
#align Ioo_mem_nhds_within_Iio Ioo_mem_nhds_within_Iio

theorem Ico_mem_nhds_within_Iio {a b c : Œ±} (H : b ‚àà ioc a c) : ico a c ‚àà ùìù[<] b :=
  mem_of_superset (Ioo_mem_nhds_within_Iio H) Ioo_subset_Ico_self
#align Ico_mem_nhds_within_Iio Ico_mem_nhds_within_Iio

theorem Ioc_mem_nhds_within_Iio {a b c : Œ±} (H : b ‚àà ioc a c) : ioc a c ‚àà ùìù[<] b :=
  mem_of_superset (Ioo_mem_nhds_within_Iio H) Ioo_subset_Ioc_self
#align Ioc_mem_nhds_within_Iio Ioc_mem_nhds_within_Iio

theorem Icc_mem_nhds_within_Iio {a b c : Œ±} (H : b ‚àà ioc a c) : icc a c ‚àà ùìù[<] b :=
  mem_of_superset (Ioo_mem_nhds_within_Iio H) Ioo_subset_Icc_self
#align Icc_mem_nhds_within_Iio Icc_mem_nhds_within_Iio

@[simp]
theorem nhds_within_Ico_eq_nhds_within_Iio {a b : Œ±} (h : a < b) : ùìù[ico a b] b = ùìù[<] b := by
  simpa only [dual_Ioc] using nhds_within_Ioc_eq_nhds_within_Ioi h.dual
#align nhds_within_Ico_eq_nhds_within_Iio nhds_within_Ico_eq_nhds_within_Iio

@[simp]
theorem nhds_within_Ioo_eq_nhds_within_Iio {a b : Œ±} (h : a < b) : ùìù[ioo a b] b = ùìù[<] b := by
  simpa only [dual_Ioo] using nhds_within_Ioo_eq_nhds_within_Ioi h.dual
#align nhds_within_Ioo_eq_nhds_within_Iio nhds_within_Ioo_eq_nhds_within_Iio

@[simp]
theorem continuous_within_at_Ico_iff_Iio {a b : Œ±} {f : Œ± ‚Üí Œ≥} (h : a < b) :
    ContinuousWithinAt f (ico a b) b ‚Üî ContinuousWithinAt f (iio b) b := by
  simp only [ContinuousWithinAt, nhds_within_Ico_eq_nhds_within_Iio h]
#align continuous_within_at_Ico_iff_Iio continuous_within_at_Ico_iff_Iio

@[simp]
theorem continuous_within_at_Ioo_iff_Iio {a b : Œ±} {f : Œ± ‚Üí Œ≥} (h : a < b) :
    ContinuousWithinAt f (ioo a b) b ‚Üî ContinuousWithinAt f (iio b) b := by
  simp only [ContinuousWithinAt, nhds_within_Ioo_eq_nhds_within_Iio h]
#align continuous_within_at_Ioo_iff_Iio continuous_within_at_Ioo_iff_Iio

/-!
#### Right neighborhoods, point included
-/


theorem Ioo_mem_nhds_within_Ici {a b c : Œ±} (H : b ‚àà ioo a c) : ioo a c ‚àà ùìù[‚â•] b :=
  mem_nhds_within_of_mem_nhds <| IsOpen.mem_nhds is_open_Ioo H
#align Ioo_mem_nhds_within_Ici Ioo_mem_nhds_within_Ici

theorem Ioc_mem_nhds_within_Ici {a b c : Œ±} (H : b ‚àà ioo a c) : ioc a c ‚àà ùìù[‚â•] b :=
  mem_of_superset (Ioo_mem_nhds_within_Ici H) Ioo_subset_Ioc_self
#align Ioc_mem_nhds_within_Ici Ioc_mem_nhds_within_Ici

theorem Ico_mem_nhds_within_Ici {a b c : Œ±} (H : b ‚àà ico a c) : ico a c ‚àà ùìù[‚â•] b :=
  mem_nhds_within.2
    ‚ü®iio c, is_open_Iio, H.2, by simp only [inter_comm, Ici_inter_Iio, Ico_subset_Ico_left H.1]‚ü©
#align Ico_mem_nhds_within_Ici Ico_mem_nhds_within_Ici

theorem Icc_mem_nhds_within_Ici {a b c : Œ±} (H : b ‚àà ico a c) : icc a c ‚àà ùìù[‚â•] b :=
  mem_of_superset (Ico_mem_nhds_within_Ici H) Ico_subset_Icc_self
#align Icc_mem_nhds_within_Ici Icc_mem_nhds_within_Ici

@[simp]
theorem nhds_within_Icc_eq_nhds_within_Ici {a b : Œ±} (h : a < b) : ùìù[icc a b] a = ùìù[‚â•] a :=
  le_antisymm (nhds_within_mono _ Icc_subset_Ici_self) <|
    nhds_within_le_of_mem <| Icc_mem_nhds_within_Ici <| left_mem_Ico.2 h
#align nhds_within_Icc_eq_nhds_within_Ici nhds_within_Icc_eq_nhds_within_Ici

@[simp]
theorem nhds_within_Ico_eq_nhds_within_Ici {a b : Œ±} (h : a < b) : ùìù[ico a b] a = ùìù[‚â•] a :=
  le_antisymm (nhds_within_mono _ fun x => And.left) <|
    nhds_within_le_of_mem <| Ico_mem_nhds_within_Ici <| left_mem_Ico.2 h
#align nhds_within_Ico_eq_nhds_within_Ici nhds_within_Ico_eq_nhds_within_Ici

@[simp]
theorem continuous_within_at_Icc_iff_Ici [TopologicalSpace Œ≤] {a b : Œ±} {f : Œ± ‚Üí Œ≤} (h : a < b) :
    ContinuousWithinAt f (icc a b) a ‚Üî ContinuousWithinAt f (ici a) a := by
  simp only [ContinuousWithinAt, nhds_within_Icc_eq_nhds_within_Ici h]
#align continuous_within_at_Icc_iff_Ici continuous_within_at_Icc_iff_Ici

@[simp]
theorem continuous_within_at_Ico_iff_Ici [TopologicalSpace Œ≤] {a b : Œ±} {f : Œ± ‚Üí Œ≤} (h : a < b) :
    ContinuousWithinAt f (ico a b) a ‚Üî ContinuousWithinAt f (ici a) a := by
  simp only [ContinuousWithinAt, nhds_within_Ico_eq_nhds_within_Ici h]
#align continuous_within_at_Ico_iff_Ici continuous_within_at_Ico_iff_Ici

/-!
#### Left neighborhoods, point included
-/


theorem Ioo_mem_nhds_within_Iic {a b c : Œ±} (H : b ‚àà ioo a c) : ioo a c ‚àà ùìù[‚â§] b :=
  mem_nhds_within_of_mem_nhds <| IsOpen.mem_nhds is_open_Ioo H
#align Ioo_mem_nhds_within_Iic Ioo_mem_nhds_within_Iic

theorem Ico_mem_nhds_within_Iic {a b c : Œ±} (H : b ‚àà ioo a c) : ico a c ‚àà ùìù[‚â§] b :=
  mem_of_superset (Ioo_mem_nhds_within_Iic H) Ioo_subset_Ico_self
#align Ico_mem_nhds_within_Iic Ico_mem_nhds_within_Iic

theorem Ioc_mem_nhds_within_Iic {a b c : Œ±} (H : b ‚àà ioc a c) : ioc a c ‚àà ùìù[‚â§] b := by
  simpa only [dual_Ico] using
    Ico_mem_nhds_within_Ici (show to_dual b ‚àà Ico (to_dual c) (to_dual a) from H.symm)
#align Ioc_mem_nhds_within_Iic Ioc_mem_nhds_within_Iic

theorem Icc_mem_nhds_within_Iic {a b c : Œ±} (H : b ‚àà ioc a c) : icc a c ‚àà ùìù[‚â§] b :=
  mem_of_superset (Ioc_mem_nhds_within_Iic H) Ioc_subset_Icc_self
#align Icc_mem_nhds_within_Iic Icc_mem_nhds_within_Iic

@[simp]
theorem nhds_within_Icc_eq_nhds_within_Iic {a b : Œ±} (h : a < b) : ùìù[icc a b] b = ùìù[‚â§] b := by
  simpa only [dual_Icc] using nhds_within_Icc_eq_nhds_within_Ici h.dual
#align nhds_within_Icc_eq_nhds_within_Iic nhds_within_Icc_eq_nhds_within_Iic

@[simp]
theorem nhds_within_Ioc_eq_nhds_within_Iic {a b : Œ±} (h : a < b) : ùìù[ioc a b] b = ùìù[‚â§] b := by
  simpa only [dual_Ico] using nhds_within_Ico_eq_nhds_within_Ici h.dual
#align nhds_within_Ioc_eq_nhds_within_Iic nhds_within_Ioc_eq_nhds_within_Iic

@[simp]
theorem continuous_within_at_Icc_iff_Iic [TopologicalSpace Œ≤] {a b : Œ±} {f : Œ± ‚Üí Œ≤} (h : a < b) :
    ContinuousWithinAt f (icc a b) b ‚Üî ContinuousWithinAt f (iic b) b := by
  simp only [ContinuousWithinAt, nhds_within_Icc_eq_nhds_within_Iic h]
#align continuous_within_at_Icc_iff_Iic continuous_within_at_Icc_iff_Iic

@[simp]
theorem continuous_within_at_Ioc_iff_Iic [TopologicalSpace Œ≤] {a b : Œ±} {f : Œ± ‚Üí Œ≤} (h : a < b) :
    ContinuousWithinAt f (ioc a b) b ‚Üî ContinuousWithinAt f (iic b) b := by
  simp only [ContinuousWithinAt, nhds_within_Ioc_eq_nhds_within_Iic h]
#align continuous_within_at_Ioc_iff_Iic continuous_within_at_Ioc_iff_Iic

end LinearOrder

section LinearOrder

variable [TopologicalSpace Œ±] [LinearOrder Œ±] [OrderClosedTopology Œ±] {f g : Œ≤ ‚Üí Œ±}

section

variable [TopologicalSpace Œ≤]

theorem lt_subset_interior_le (hf : Continuous f) (hg : Continuous g) :
    { b | f b < g b } ‚äÜ interior { b | f b ‚â§ g b } :=
  (interior_maximal fun p => le_of_lt) <| is_open_lt hf hg
#align lt_subset_interior_le lt_subset_interior_le

theorem frontier_le_subset_eq (hf : Continuous f) (hg : Continuous g) :
    frontier { b | f b ‚â§ g b } ‚äÜ { b | f b = g b } := by
  rw [frontier_eq_closure_inter_closure, closure_le_eq hf hg]
  rintro b ‚ü®hb‚ÇÅ, hb‚ÇÇ‚ü©
  refine' le_antisymm hb‚ÇÅ (closure_lt_subset_le hg hf _)
  convert hb‚ÇÇ using 2; simp only [not_le.symm]; rfl
#align frontier_le_subset_eq frontier_le_subset_eq

theorem frontier_Iic_subset (a : Œ±) : frontier (iic a) ‚äÜ {a} :=
  frontier_le_subset_eq (@continuous_id Œ± _) continuous_const
#align frontier_Iic_subset frontier_Iic_subset

theorem frontier_Ici_subset (a : Œ±) : frontier (ici a) ‚äÜ {a} :=
  @frontier_Iic_subset Œ±·µí·µà _ _ _ _
#align frontier_Ici_subset frontier_Ici_subset

theorem frontier_lt_subset_eq (hf : Continuous f) (hg : Continuous g) :
    frontier { b | f b < g b } ‚äÜ { b | f b = g b } := by
  rw [‚Üê frontier_compl] <;> convert frontier_le_subset_eq hg hf <;> simp [ext_iff, eq_comm]
#align frontier_lt_subset_eq frontier_lt_subset_eq

theorem continuous_if_le [TopologicalSpace Œ≥] [‚àÄ x, Decidable (f x ‚â§ g x)] {f' g' : Œ≤ ‚Üí Œ≥}
    (hf : Continuous f) (hg : Continuous g) (hf' : ContinuousOn f' { x | f x ‚â§ g x })
    (hg' : ContinuousOn g' { x | g x ‚â§ f x }) (hfg : ‚àÄ x, f x = g x ‚Üí f' x = g' x) :
    Continuous fun x => if f x ‚â§ g x then f' x else g' x := by
  refine' continuous_if (fun a ha => hfg _ (frontier_le_subset_eq hf hg ha)) _ (hg'.mono _)
  ¬∑ rwa [(is_closed_le hf hg).closure_eq]
  ¬∑ simp only [not_le]
    exact closure_lt_subset_le hg hf
#align continuous_if_le continuous_if_le

theorem Continuous.if_le [TopologicalSpace Œ≥] [‚àÄ x, Decidable (f x ‚â§ g x)] {f' g' : Œ≤ ‚Üí Œ≥}
    (hf' : Continuous f') (hg' : Continuous g') (hf : Continuous f) (hg : Continuous g)
    (hfg : ‚àÄ x, f x = g x ‚Üí f' x = g' x) : Continuous fun x => if f x ‚â§ g x then f' x else g' x :=
  continuous_if_le hf hg hf'.ContinuousOn hg'.ContinuousOn hfg
#align continuous.if_le Continuous.if_le

theorem Tendsto.eventually_lt {l : Filter Œ≥} {f g : Œ≥ ‚Üí Œ±} {y z : Œ±} (hf : Tendsto f l (ùìù y))
    (hg : Tendsto g l (ùìù z)) (hyz : y < z) : ‚àÄ·∂† x in l, f x < g x := by
  by_cases h : y ‚ãñ z
  ¬∑ filter_upwards [hf (Iio_mem_nhds hyz), hg (Ioi_mem_nhds hyz)]
    rw [h.Iio_eq]
    exact fun x hfx hgx => lt_of_le_of_lt hfx hgx
  ¬∑ obtain ‚ü®w, hyw, hwz‚ü© := (not_covby_iff hyz).mp h
    filter_upwards [hf (Iio_mem_nhds hyw), hg (Ioi_mem_nhds hwz)]
    exact fun x => lt_trans
#align tendsto.eventually_lt Tendsto.eventually_lt

theorem ContinuousAt.eventually_lt {x‚ÇÄ : Œ≤} (hf : ContinuousAt f x‚ÇÄ) (hg : ContinuousAt g x‚ÇÄ)
    (hfg : f x‚ÇÄ < g x‚ÇÄ) : ‚àÄ·∂† x in ùìù x‚ÇÄ, f x < g x :=
  Tendsto.eventually_lt hf hg hfg
#align continuous_at.eventually_lt ContinuousAt.eventually_lt

@[continuity]
theorem Continuous.min (hf : Continuous f) (hg : Continuous g) :
    Continuous fun b => min (f b) (g b) := by
  simp only [min_def]
  exact hf.if_le hg hf hg fun x => id
#align continuous.min Continuous.min

@[continuity]
theorem Continuous.max (hf : Continuous f) (hg : Continuous g) :
    Continuous fun b => max (f b) (g b) :=
  @Continuous.min Œ±·µí·µà _ _ _ _ _ _ _ hf hg
#align continuous.max Continuous.max

end

theorem continuous_min : Continuous fun p : Œ± √ó Œ± => min p.1 p.2 :=
  continuous_fst.min continuous_snd
#align continuous_min continuous_min

theorem continuous_max : Continuous fun p : Œ± √ó Œ± => max p.1 p.2 :=
  continuous_fst.max continuous_snd
#align continuous_max continuous_max

theorem Filter.Tendsto.max {b : Filter Œ≤} {a‚ÇÅ a‚ÇÇ : Œ±} (hf : Tendsto f b (ùìù a‚ÇÅ))
    (hg : Tendsto g b (ùìù a‚ÇÇ)) : Tendsto (fun b => max (f b) (g b)) b (ùìù (max a‚ÇÅ a‚ÇÇ)) :=
  (continuous_max.Tendsto (a‚ÇÅ, a‚ÇÇ)).comp (hf.prod_mk_nhds hg)
#align filter.tendsto.max Filter.Tendsto.max

theorem Filter.Tendsto.min {b : Filter Œ≤} {a‚ÇÅ a‚ÇÇ : Œ±} (hf : Tendsto f b (ùìù a‚ÇÅ))
    (hg : Tendsto g b (ùìù a‚ÇÇ)) : Tendsto (fun b => min (f b) (g b)) b (ùìù (min a‚ÇÅ a‚ÇÇ)) :=
  (continuous_min.Tendsto (a‚ÇÅ, a‚ÇÇ)).comp (hf.prod_mk_nhds hg)
#align filter.tendsto.min Filter.Tendsto.min

theorem Filter.Tendsto.max_right {l : Filter Œ≤} {a : Œ±} (h : Tendsto f l (ùìù a)) :
    Tendsto (fun i => max a (f i)) l (ùìù a) := by
  convert ((continuous_max.comp (@Continuous.Prod.mk Œ± Œ± _ _ a)).Tendsto a).comp h
  simp
#align filter.tendsto.max_right Filter.Tendsto.max_right

theorem Filter.Tendsto.max_left {l : Filter Œ≤} {a : Œ±} (h : Tendsto f l (ùìù a)) :
    Tendsto (fun i => max (f i) a) l (ùìù a) := by
  simp_rw [max_comm _ a]
  exact h.max_right
#align filter.tendsto.max_left Filter.Tendsto.max_left

theorem Filter.tendsto_nhds_max_right {l : Filter Œ≤} {a : Œ±} (h : Tendsto f l (ùìù[>] a)) :
    Tendsto (fun i => max a (f i)) l (ùìù[>] a) := by
  obtain ‚ü®h‚ÇÅ : tendsto f l (ùìù a), h‚ÇÇ : ‚àÄ·∂† i in l, f i ‚àà Ioi a‚ü© := tendsto_nhds_within_iff.mp h
  exact tendsto_nhds_within_iff.mpr ‚ü®h‚ÇÅ.max_right, h‚ÇÇ.mono fun i hi => lt_max_of_lt_right hi‚ü©
#align filter.tendsto_nhds_max_right Filter.tendsto_nhds_max_right

theorem Filter.tendsto_nhds_max_left {l : Filter Œ≤} {a : Œ±} (h : Tendsto f l (ùìù[>] a)) :
    Tendsto (fun i => max (f i) a) l (ùìù[>] a) := by
  simp_rw [max_comm _ a]
  exact Filter.tendsto_nhds_max_right h
#align filter.tendsto_nhds_max_left Filter.tendsto_nhds_max_left

theorem Filter.Tendsto.min_right {l : Filter Œ≤} {a : Œ±} (h : Tendsto f l (ùìù a)) :
    Tendsto (fun i => min a (f i)) l (ùìù a) :=
  @Filter.Tendsto.max_right Œ±·µí·µà Œ≤ _ _ _ f l a h
#align filter.tendsto.min_right Filter.Tendsto.min_right

theorem Filter.Tendsto.min_left {l : Filter Œ≤} {a : Œ±} (h : Tendsto f l (ùìù a)) :
    Tendsto (fun i => min (f i) a) l (ùìù a) :=
  @Filter.Tendsto.max_left Œ±·µí·µà Œ≤ _ _ _ f l a h
#align filter.tendsto.min_left Filter.Tendsto.min_left

theorem Filter.tendsto_nhds_min_right {l : Filter Œ≤} {a : Œ±} (h : Tendsto f l (ùìù[<] a)) :
    Tendsto (fun i => min a (f i)) l (ùìù[<] a) :=
  @Filter.tendsto_nhds_max_right Œ±·µí·µà Œ≤ _ _ _ f l a h
#align filter.tendsto_nhds_min_right Filter.tendsto_nhds_min_right

theorem Filter.tendsto_nhds_min_left {l : Filter Œ≤} {a : Œ±} (h : Tendsto f l (ùìù[<] a)) :
    Tendsto (fun i => min (f i) a) l (ùìù[<] a) :=
  @Filter.tendsto_nhds_max_left Œ±·µí·µà Œ≤ _ _ _ f l a h
#align filter.tendsto_nhds_min_left Filter.tendsto_nhds_min_left

theorem Dense.exists_lt [NoMinOrder Œ±] {s : Set Œ±} (hs : Dense s) (x : Œ±) : ‚àÉ y ‚àà s, y < x :=
  hs.exists_mem_open is_open_Iio (exists_lt x)
#align dense.exists_lt Dense.exists_lt

theorem Dense.exists_gt [NoMaxOrder Œ±] {s : Set Œ±} (hs : Dense s) (x : Œ±) : ‚àÉ y ‚àà s, x < y :=
  hs.OrderDual.exists_lt x
#align dense.exists_gt Dense.exists_gt

theorem Dense.exists_le [NoMinOrder Œ±] {s : Set Œ±} (hs : Dense s) (x : Œ±) : ‚àÉ y ‚àà s, y ‚â§ x :=
  (hs.exists_lt x).imp fun y hy => ‚ü®hy.fst, hy.snd.le‚ü©
#align dense.exists_le Dense.exists_le

theorem Dense.exists_ge [NoMaxOrder Œ±] {s : Set Œ±} (hs : Dense s) (x : Œ±) : ‚àÉ y ‚àà s, x ‚â§ y :=
  hs.OrderDual.exists_le x
#align dense.exists_ge Dense.exists_ge

theorem Dense.exists_le' {s : Set Œ±} (hs : Dense s) (hbot : ‚àÄ x, IsBot x ‚Üí x ‚àà s) (x : Œ±) :
    ‚àÉ y ‚àà s, y ‚â§ x := by 
  by_cases hx : IsBot x
  ¬∑ exact ‚ü®x, hbot x hx, le_rfl‚ü©
  ¬∑ simp only [IsBot, not_forall, not_le] at hx
    rcases hs.exists_mem_open is_open_Iio hx with ‚ü®y, hys, hy : y < x‚ü©
    exact ‚ü®y, hys, hy.le‚ü©
#align dense.exists_le' Dense.exists_le'

theorem Dense.exists_ge' {s : Set Œ±} (hs : Dense s) (htop : ‚àÄ x, IsTop x ‚Üí x ‚àà s) (x : Œ±) :
    ‚àÉ y ‚àà s, x ‚â§ y :=
  hs.OrderDual.exists_le' htop x
#align dense.exists_ge' Dense.exists_ge'

theorem Dense.exists_between [DenselyOrdered Œ±] {s : Set Œ±} (hs : Dense s) {x y : Œ±} (h : x < y) :
    ‚àÉ z ‚àà s, z ‚àà ioo x y :=
  hs.exists_mem_open is_open_Ioo (nonempty_Ioo.2 h)
#align dense.exists_between Dense.exists_between

variable [Nonempty Œ±] [TopologicalSpace Œ≤]

/-- A compact set is bounded below -/
theorem IsCompact.bdd_below {s : Set Œ±} (hs : IsCompact s) : BddBelow s := by
  by_contra H
  rcases hs.elim_finite_subcover_image (fun x (_ : x ‚àà s) => @is_open_Ioi _ _ _ _ x) _ with
    ‚ü®t, st, ft, ht‚ü©
  ¬∑ refine' H (ft.bdd_below.imp fun C hC y hy => _)
    rcases mem_Union‚ÇÇ.1 (ht hy) with ‚ü®x, hx, xy‚ü©
    exact le_trans (hC hx) (le_of_lt xy)
  ¬∑ refine' fun x hx => mem_Union‚ÇÇ.2 (not_imp_comm.1 _ H)
    exact fun h => ‚ü®x, fun y hy => le_of_not_lt (h.imp fun ys => ‚ü®_, hy, ys‚ü©)‚ü©
#align is_compact.bdd_below IsCompact.bdd_below

/-- A compact set is bounded above -/
theorem IsCompact.bdd_above {s : Set Œ±} (hs : IsCompact s) : BddAbove s :=
  @IsCompact.bdd_below Œ±·µí·µà _ _ _ _ _ hs
#align is_compact.bdd_above IsCompact.bdd_above

/-- A continuous function is bounded below on a compact set. -/
theorem IsCompact.bdd_below_image {f : Œ≤ ‚Üí Œ±} {K : Set Œ≤} (hK : IsCompact K)
    (hf : ContinuousOn f K) : BddBelow (f '' K) :=
  (hK.image_of_continuous_on hf).BddBelow
#align is_compact.bdd_below_image IsCompact.bdd_below_image

/-- A continuous function is bounded above on a compact set. -/
theorem IsCompact.bdd_above_image {f : Œ≤ ‚Üí Œ±} {K : Set Œ≤} (hK : IsCompact K)
    (hf : ContinuousOn f K) : BddAbove (f '' K) :=
  @IsCompact.bdd_below_image Œ±·µí·µà _ _ _ _ _ _ _ _ hK hf
#align is_compact.bdd_above_image IsCompact.bdd_above_image

/-- A continuous function with compact support is bounded below. -/
@[to_additive " A continuous function with compact support is bounded below. "]
theorem Continuous.bdd_below_range_of_has_compact_mul_support [One Œ±] {f : Œ≤ ‚Üí Œ±}
    (hf : Continuous f) (h : HasCompactMulSupport f) : BddBelow (range f) :=
  (h.is_compact_range hf).BddBelow
#align
  continuous.bdd_below_range_of_has_compact_mul_support Continuous.bdd_below_range_of_has_compact_mul_support

/-- A continuous function with compact support is bounded above. -/
@[to_additive " A continuous function with compact support is bounded above. "]
theorem Continuous.bdd_above_range_of_has_compact_mul_support [One Œ±] {f : Œ≤ ‚Üí Œ±}
    (hf : Continuous f) (h : HasCompactMulSupport f) : BddAbove (range f) :=
  @Continuous.bdd_below_range_of_has_compact_mul_support Œ±·µí·µà _ _ _ _ _ _ _ _ hf h
#align
  continuous.bdd_above_range_of_has_compact_mul_support Continuous.bdd_above_range_of_has_compact_mul_support

end LinearOrder

end OrderClosedTopology

instance [Preorder Œ±] [TopologicalSpace Œ±] [OrderClosedTopology Œ±] [Preorder Œ≤] [TopologicalSpace Œ≤]
    [OrderClosedTopology Œ≤] : OrderClosedTopology (Œ± √ó Œ≤) :=
  ‚ü®(is_closed_le (continuous_fst.comp continuous_fst) (continuous_fst.comp continuous_snd)).inter
      (is_closed_le (continuous_snd.comp continuous_fst) (continuous_snd.comp continuous_snd))‚ü©

instance {Œπ : Type _} {Œ± : Œπ ‚Üí Type _} [‚àÄ i, Preorder (Œ± i)] [‚àÄ i, TopologicalSpace (Œ± i)]
    [‚àÄ i, OrderClosedTopology (Œ± i)] : OrderClosedTopology (‚àÄ i, Œ± i) := by
  constructor
  simp only [Pi.le_def, set_of_forall]
  exact
    is_closed_Inter fun i =>
      is_closed_le ((continuous_apply i).comp continuous_fst)
        ((continuous_apply i).comp continuous_snd)

instance Pi.order_closed_topology' [Preorder Œ≤] [TopologicalSpace Œ≤] [OrderClosedTopology Œ≤] :
    OrderClosedTopology (Œ± ‚Üí Œ≤) :=
  Pi.order_closed_topology
#align pi.order_closed_topology' Pi.order_closed_topology'

/-- The order topology on an ordered type is the topology generated by open intervals. We register
it on a preorder, but it is mostly interesting in linear orders, where it is also order-closed.
We define it as a mixin. If you want to introduce the order topology on a preorder, use
`preorder.topology`. -/
class OrderTopology (Œ± : Type _) [t : TopologicalSpace Œ±] [Preorder Œ±] : Prop where
  topology_eq_generate_intervals : t = generateFrom { s | ‚àÉ a, s = ioi a ‚à® s = iio a }
#align order_topology OrderTopology

/-- (Order) topology on a partial order `Œ±` generated by the subbase of open intervals
`(a, ‚àû) = { x ‚à£ a < x }, (-‚àû , b) = {x ‚à£ x < b}` for all `a, b` in `Œ±`. We do not register it as an
instance as many ordered sets are already endowed with the same topology, most often in a non-defeq
way though. Register as a local instance when necessary. -/
def Preorder.topology (Œ± : Type _) [Preorder Œ±] : TopologicalSpace Œ± :=
  generateFrom { s : Set Œ± | ‚àÉ a : Œ±, s = { b : Œ± | a < b } ‚à® s = { b : Œ± | b < a } }
#align preorder.topology Preorder.topology

section OrderTopology

instance {Œ± : Type _} [TopologicalSpace Œ±] [PartialOrder Œ±] [OrderTopology Œ±] : OrderTopology Œ±·µí·µà :=
  ‚ü®by
    convert @OrderTopology.topology_eq_generate_intervals Œ± _ _ _ <;>
        conv in _ ‚à® _ => rw [or_comm] <;>
      rfl‚ü©

section PartialOrder

variable [TopologicalSpace Œ±] [PartialOrder Œ±] [t : OrderTopology Œ±]

include t

theorem is_open_iff_generate_intervals {s : Set Œ±} :
    IsOpen s ‚Üî GenerateOpen { s | ‚àÉ a, s = ioi a ‚à® s = iio a } s := by
  rw [t.topology_eq_generate_intervals] <;> rfl
#align is_open_iff_generate_intervals is_open_iff_generate_intervals

theorem is_open_lt' (a : Œ±) : IsOpen { b : Œ± | a < b } := by
  rw [@is_open_iff_generate_intervals Œ± _ _ t] <;> exact generate_open.basic _ ‚ü®a, Or.inl rfl‚ü©
#align is_open_lt' is_open_lt'

theorem is_open_gt' (a : Œ±) : IsOpen { b : Œ± | b < a } := by
  rw [@is_open_iff_generate_intervals Œ± _ _ t] <;> exact generate_open.basic _ ‚ü®a, Or.inr rfl‚ü©
#align is_open_gt' is_open_gt'

theorem lt_mem_nhds {a b : Œ±} (h : a < b) : ‚àÄ·∂† x in ùìù b, a < x :=
  IsOpen.mem_nhds (is_open_lt' _) h
#align lt_mem_nhds lt_mem_nhds

theorem le_mem_nhds {a b : Œ±} (h : a < b) : ‚àÄ·∂† x in ùìù b, a ‚â§ x :=
  ((ùìù b).sets_of_superset (lt_mem_nhds h)) fun b hb => le_of_lt hb
#align le_mem_nhds le_mem_nhds

theorem gt_mem_nhds {a b : Œ±} (h : a < b) : ‚àÄ·∂† x in ùìù a, x < b :=
  IsOpen.mem_nhds (is_open_gt' _) h
#align gt_mem_nhds gt_mem_nhds

theorem ge_mem_nhds {a b : Œ±} (h : a < b) : ‚àÄ·∂† x in ùìù a, x ‚â§ b :=
  ((ùìù a).sets_of_superset (gt_mem_nhds h)) fun b hb => le_of_lt hb
#align ge_mem_nhds ge_mem_nhds

theorem nhds_eq_order (a : Œ±) : ùìù a = (‚®Ö b ‚àà iio a, ùìü (ioi b)) ‚äì ‚®Ö b ‚àà ioi a, ùìü (iio b) := by
  rw [t.topology_eq_generate_intervals, nhds_generate_from] <;>
    exact
      le_antisymm
        (le_inf
          (le_infi‚ÇÇ fun b hb => infi_le_of_le { c : Œ± | b < c } <| infi_le _ ‚ü®hb, b, Or.inl rfl‚ü©)
          (le_infi‚ÇÇ fun b hb => infi_le_of_le { c : Œ± | c < b } <| infi_le _ ‚ü®hb, b, Or.inr rfl‚ü©))
        (le_infi fun s =>
          le_infi fun ‚ü®ha, b, hs‚ü© =>
            match s, ha, hs with
            | _, h, Or.inl rfl => inf_le_of_left_le <| infi_le_of_le b <| infi_le _ h
            | _, h, Or.inr rfl => inf_le_of_right_le <| infi_le_of_le b <| infi_le _ h)
#align nhds_eq_order nhds_eq_order

theorem tendsto_order {f : Œ≤ ‚Üí Œ±} {a : Œ±} {x : Filter Œ≤} :
    Tendsto f x (ùìù a) ‚Üî (‚àÄ a' < a, ‚àÄ·∂† b in x, a' < f b) ‚àß ‚àÄ a' > a, ‚àÄ·∂† b in x, f b < a' := by
  simp [nhds_eq_order a, tendsto_inf, tendsto_infi, tendsto_principal]
#align tendsto_order tendsto_order

instance tendsto_Icc_class_nhds (a : Œ±) : TendstoIxxClass icc (ùìù a) (ùìù a) := by
  simp only [nhds_eq_order, infi_subtype']
  refine'
    ((has_basis_infi_principal_finite _).inf (has_basis_infi_principal_finite _)).TendstoIxxClass
      fun s hs => _
  refine' ((ord_connected_bInter _).inter (ord_connected_bInter _)).out <;> intro _ _
  exacts[ord_connected_Ioi, ord_connected_Iio]
#align tendsto_Icc_class_nhds tendsto_Icc_class_nhds

instance tendsto_Ico_class_nhds (a : Œ±) : TendstoIxxClass ico (ùìù a) (ùìù a) :=
  tendsto_Ixx_class_of_subset fun _ _ => Ico_subset_Icc_self
#align tendsto_Ico_class_nhds tendsto_Ico_class_nhds

instance tendsto_Ioc_class_nhds (a : Œ±) : TendstoIxxClass ioc (ùìù a) (ùìù a) :=
  tendsto_Ixx_class_of_subset fun _ _ => Ioc_subset_Icc_self
#align tendsto_Ioc_class_nhds tendsto_Ioc_class_nhds

instance tendsto_Ioo_class_nhds (a : Œ±) : TendstoIxxClass ioo (ùìù a) (ùìù a) :=
  tendsto_Ixx_class_of_subset fun _ _ => Ioo_subset_Icc_self
#align tendsto_Ioo_class_nhds tendsto_Ioo_class_nhds

/-- **Squeeze theorem** (also known as **sandwich theorem**). This version assumes that inequalities
hold eventually for the filter. -/
theorem tendsto_of_tendsto_of_tendsto_of_le_of_le' {f g h : Œ≤ ‚Üí Œ±} {b : Filter Œ≤} {a : Œ±}
    (hg : Tendsto g b (ùìù a)) (hh : Tendsto h b (ùìù a)) (hgf : ‚àÄ·∂† b in b, g b ‚â§ f b)
    (hfh : ‚àÄ·∂† b in b, f b ‚â§ h b) : Tendsto f b (ùìù a) :=
  (hg.icc hh).of_small_sets <| hgf.And hfh
#align tendsto_of_tendsto_of_tendsto_of_le_of_le' tendsto_of_tendsto_of_tendsto_of_le_of_le'

/-- **Squeeze theorem** (also known as **sandwich theorem**). This version assumes that inequalities
hold everywhere. -/
theorem tendsto_of_tendsto_of_tendsto_of_le_of_le {f g h : Œ≤ ‚Üí Œ±} {b : Filter Œ≤} {a : Œ±}
    (hg : Tendsto g b (ùìù a)) (hh : Tendsto h b (ùìù a)) (hgf : g ‚â§ f) (hfh : f ‚â§ h) :
    Tendsto f b (ùìù a) :=
  tendsto_of_tendsto_of_tendsto_of_le_of_le' hg hh (eventually_of_forall hgf)
    (eventually_of_forall hfh)
#align tendsto_of_tendsto_of_tendsto_of_le_of_le tendsto_of_tendsto_of_tendsto_of_le_of_le

theorem nhds_order_unbounded {a : Œ±} (hu : ‚àÉ u, a < u) (hl : ‚àÉ l, l < a) :
    ùìù a = ‚®Ö (l) (h‚ÇÇ : l < a) (u) (h‚ÇÇ : a < u), ùìü (ioo l u) := by
  have : ‚àÉ u, u ‚àà ioi a := hu
  have : ‚àÉ l, l ‚àà iio a := hl
  simp only [nhds_eq_order, inf_binfi, binfi_inf, *, inf_principal, Ioi_inter_Iio]
  rfl
#align nhds_order_unbounded nhds_order_unbounded

theorem tendsto_order_unbounded {f : Œ≤ ‚Üí Œ±} {a : Œ±} {x : Filter Œ≤} (hu : ‚àÉ u, a < u)
    (hl : ‚àÉ l, l < a) (h : ‚àÄ l u, l < a ‚Üí a < u ‚Üí ‚àÄ·∂† b in x, l < f b ‚àß f b < u) :
    Tendsto f x (ùìù a) := by
  rw [nhds_order_unbounded hu hl] <;>
    exact
      tendsto_infi.2 fun l =>
        tendsto_infi.2 fun hl =>
          tendsto_infi.2 fun u => tendsto_infi.2 fun hu => tendsto_principal.2 <| h l u hl hu
#align tendsto_order_unbounded tendsto_order_unbounded

end PartialOrder

instance tendsto_Ixx_nhds_within {Œ± : Type _} [Preorder Œ±] [TopologicalSpace Œ±] (a : Œ±)
    {s t : Set Œ±} {Ixx} [TendstoIxxClass Ixx (ùìù a) (ùìù a)] [TendstoIxxClass Ixx (ùìü s) (ùìü t)] :
    TendstoIxxClass Ixx (ùìù[s] a) (ùìù[t] a) :=
  Filter.tendsto_Ixx_class_inf
#align tendsto_Ixx_nhds_within tendsto_Ixx_nhds_within

instance tendsto_Icc_class_nhds_pi {Œπ : Type _} {Œ± : Œπ ‚Üí Type _} [‚àÄ i, PartialOrder (Œ± i)]
    [‚àÄ i, TopologicalSpace (Œ± i)] [‚àÄ i, OrderTopology (Œ± i)] (f : ‚àÄ i, Œ± i) :
    TendstoIxxClass icc (ùìù f) (ùìù f) := by 
  constructor
  conv in (ùìù f).smallSets => rw [nhds_pi, Filter.pi]
  simp only [small_sets_infi, small_sets_comap, tendsto_infi, tendsto_lift', (¬∑ ‚àò ¬∑),
    mem_powerset_iff]
  intro i s hs
  have : tendsto (fun g : ‚àÄ i, Œ± i => g i) (ùìù f) (ùìù (f i)) := (continuous_apply i).Tendsto f
  refine' (tendsto_lift'.1 ((this.comp tendsto_fst).icc (this.comp tendsto_snd)) s hs).mono _
  exact fun p hp g hg => hp ‚ü®hg.1 _, hg.2 _‚ü©
#align tendsto_Icc_class_nhds_pi tendsto_Icc_class_nhds_pi

theorem induced_order_topology' {Œ± : Type u} {Œ≤ : Type v} [PartialOrder Œ±] [ta : TopologicalSpace Œ≤]
    [PartialOrder Œ≤] [OrderTopology Œ≤] (f : Œ± ‚Üí Œ≤) (hf : ‚àÄ {x y}, f x < f y ‚Üî x < y)
    (H‚ÇÅ : ‚àÄ {a x}, x < f a ‚Üí ‚àÉ b < a, x ‚â§ f b) (H‚ÇÇ : ‚àÄ {a x}, f a < x ‚Üí ‚àÉ b > a, f b ‚â§ x) :
    @OrderTopology _ (induced f ta) _ := by
  letI := induced f ta
  refine' ‚ü®eq_of_nhds_eq_nhds fun a => _‚ü©
  rw [nhds_induced, nhds_generate_from, nhds_eq_order (f a)]
  apply le_antisymm
  ¬∑ refine' le_infi fun s => le_infi fun hs => le_principal_iff.2 _
    rcases hs with ‚ü®ab, b, rfl | rfl‚ü©
    ¬∑
      exact
        mem_comap.2
          ‚ü®{ x | f b < x },
            mem_inf_of_left <|
              mem_infi_of_mem _ <| mem_infi_of_mem (hf.2 ab) <| mem_principal_self _,
            fun x => hf.1‚ü©
    ¬∑
      exact
        mem_comap.2
          ‚ü®{ x | x < f b },
            mem_inf_of_right <|
              mem_infi_of_mem _ <| mem_infi_of_mem (hf.2 ab) <| mem_principal_self _,
            fun x => hf.1‚ü©
  ¬∑ rw [‚Üê map_le_iff_le_comap]
    refine' le_inf _ _ <;> refine' le_infi fun x => le_infi fun h => le_principal_iff.2 _ <;> simp
    ¬∑ rcases H‚ÇÅ h with ‚ü®b, ab, xb‚ü©
      refine' mem_infi_of_mem _ (mem_infi_of_mem ‚ü®ab, b, Or.inl rfl‚ü© (mem_principal.2 _))
      exact fun c hc => lt_of_le_of_lt xb (hf.2 hc)
    ¬∑ rcases H‚ÇÇ h with ‚ü®b, ab, xb‚ü©
      refine' mem_infi_of_mem _ (mem_infi_of_mem ‚ü®ab, b, Or.inr rfl‚ü© (mem_principal.2 _))
      exact fun c hc => lt_of_lt_of_le (hf.2 hc) xb
#align induced_order_topology' induced_order_topology'

theorem induced_order_topology {Œ± : Type u} {Œ≤ : Type v} [PartialOrder Œ±] [ta : TopologicalSpace Œ≤]
    [PartialOrder Œ≤] [OrderTopology Œ≤] (f : Œ± ‚Üí Œ≤) (hf : ‚àÄ {x y}, f x < f y ‚Üî x < y)
    (H : ‚àÄ {x y}, x < y ‚Üí ‚àÉ a, x < f a ‚àß f a < y) : @OrderTopology _ (induced f ta) _ :=
  induced_order_topology' f (@hf)
    (fun a x xa =>
      let ‚ü®b, xb, ba‚ü© := H xa
      ‚ü®b, hf.1 ba, le_of_lt xb‚ü©)
    fun a x ax =>
    let ‚ü®b, ab, bx‚ü© := H ax
    ‚ü®b, hf.1 ab, le_of_lt bx‚ü©
#align induced_order_topology induced_order_topology

/-- On an `ord_connected` subset of a linear order, the order topology for the restriction of the
order is the same as the restriction to the subset of the order topology. -/
instance order_topology_of_ord_connected {Œ± : Type u} [ta : TopologicalSpace Œ±] [LinearOrder Œ±]
    [OrderTopology Œ±] {t : Set Œ±} [ht : OrdConnected t] : OrderTopology t := by
  letI := induced (coe : t ‚Üí Œ±) ta
  refine' ‚ü®eq_of_nhds_eq_nhds fun a => _‚ü©
  rw [nhds_induced, nhds_generate_from, nhds_eq_order (a : Œ±)]
  apply le_antisymm
  ¬∑ refine' le_infi fun s => le_infi fun hs => le_principal_iff.2 _
    rcases hs with ‚ü®ab, b, rfl | rfl‚ü©
    ¬∑ refine' ‚ü®Ioi b, _, fun _ => id‚ü©
      refine' mem_inf_of_left (mem_infi_of_mem b _)
      exact mem_infi_of_mem ab (mem_principal_self (Ioi ‚Üëb))
    ¬∑ refine' ‚ü®Iio b, _, fun _ => id‚ü©
      refine' mem_inf_of_right (mem_infi_of_mem b _)
      exact mem_infi_of_mem ab (mem_principal_self (Iio b))
  ¬∑ rw [‚Üê map_le_iff_le_comap]
    refine' le_inf _ _
    ¬∑ refine' le_infi fun x => le_infi fun h => le_principal_iff.2 _
      by_cases hx : x ‚àà t
      ¬∑ refine' mem_infi_of_mem (Ioi ‚ü®x, hx‚ü©) (mem_infi_of_mem ‚ü®h, ‚ü®‚ü®x, hx‚ü©, Or.inl rfl‚ü©‚ü© _)
        exact fun _ => id
      simp only [SetCoe.exists, mem_set_of_eq, mem_map']
      convert univ_sets _
      suffices hx' : ‚àÄ y : t, ‚Üëy ‚àà Ioi x
      ¬∑ simp [hx']
      intro y
      revert hx
      contrapose!
      -- here we use the `ord_connected` hypothesis
      exact fun hx => ht.out y.2 a.2 ‚ü®le_of_not_gt hx, le_of_lt h‚ü©
    ¬∑ refine' le_infi fun x => le_infi fun h => le_principal_iff.2 _
      by_cases hx : x ‚àà t
      ¬∑ refine' mem_infi_of_mem (Iio ‚ü®x, hx‚ü©) (mem_infi_of_mem ‚ü®h, ‚ü®‚ü®x, hx‚ü©, Or.inr rfl‚ü©‚ü© _)
        exact fun _ => id
      simp only [SetCoe.exists, mem_set_of_eq, mem_map']
      convert univ_sets _
      suffices hx' : ‚àÄ y : t, ‚Üëy ‚àà Iio x
      ¬∑ simp [hx']
      intro y
      revert hx
      contrapose!
      -- here we use the `ord_connected` hypothesis
      exact fun hx => ht.out a.2 y.2 ‚ü®le_of_lt h, le_of_not_gt hx‚ü©
#align order_topology_of_ord_connected order_topology_of_ord_connected

theorem nhds_within_Ici_eq'' [TopologicalSpace Œ±] [PartialOrder Œ±] [OrderTopology Œ±] (a : Œ±) :
    ùìù[‚â•] a = (‚®Ö (u) (hu : a < u), ùìü (iio u)) ‚äì ùìü (ici a) := by
  rw [nhdsWithin, nhds_eq_order]
  refine' le_antisymm (inf_le_inf_right _ inf_le_right) (le_inf (le_inf _ inf_le_left) inf_le_right)
  exact inf_le_right.trans (le_infi‚ÇÇ fun l hl => principal_mono.2 <| Ici_subset_Ioi.2 hl)
#align nhds_within_Ici_eq'' nhds_within_Ici_eq''

theorem nhds_within_Iic_eq'' [TopologicalSpace Œ±] [PartialOrder Œ±] [OrderTopology Œ±] (a : Œ±) :
    ùìù[‚â§] a = (‚®Ö l < a, ùìü (ioi l)) ‚äì ùìü (iic a) :=
  nhds_within_Ici_eq'' (toDual a)
#align nhds_within_Iic_eq'' nhds_within_Iic_eq''

theorem nhds_within_Ici_eq' [TopologicalSpace Œ±] [PartialOrder Œ±] [OrderTopology Œ±] {a : Œ±}
    (ha : ‚àÉ u, a < u) : ùìù[‚â•] a = ‚®Ö (u) (hu : a < u), ùìü (ico a u) := by
  simp only [nhds_within_Ici_eq'', binfi_inf ha, inf_principal, Iio_inter_Ici]
#align nhds_within_Ici_eq' nhds_within_Ici_eq'

theorem nhds_within_Iic_eq' [TopologicalSpace Œ±] [PartialOrder Œ±] [OrderTopology Œ±] {a : Œ±}
    (ha : ‚àÉ l, l < a) : ùìù[‚â§] a = ‚®Ö l < a, ùìü (ioc l a) := by
  simp only [nhds_within_Iic_eq'', binfi_inf ha, inf_principal, Ioi_inter_Iic]
#align nhds_within_Iic_eq' nhds_within_Iic_eq'

theorem nhds_within_Ici_basis' [TopologicalSpace Œ±] [LinearOrder Œ±] [OrderTopology Œ±] {a : Œ±}
    (ha : ‚àÉ u, a < u) : (ùìù[‚â•] a).HasBasis (fun u => a < u) fun u => ico a u :=
  (nhds_within_Ici_eq' ha).symm ‚ñ∏
    has_basis_binfi_principal
      (fun b hb c hc =>
        ‚ü®min b c, lt_min hb hc, Ico_subset_Ico_right (min_le_left _ _),
          Ico_subset_Ico_right (min_le_right _ _)‚ü©)
      ha
#align nhds_within_Ici_basis' nhds_within_Ici_basis'

theorem nhds_within_Iic_basis' [TopologicalSpace Œ±] [LinearOrder Œ±] [OrderTopology Œ±] {a : Œ±}
    (ha : ‚àÉ l, l < a) : (ùìù[‚â§] a).HasBasis (fun l => l < a) fun l => ioc l a := by
  convert @nhds_within_Ici_basis' Œ±·µí·µà _ _ _ (to_dual a) ha
  exact funext fun x => (@dual_Ico _ _ _ _).symm
#align nhds_within_Iic_basis' nhds_within_Iic_basis'

theorem nhds_within_Ici_basis [TopologicalSpace Œ±] [LinearOrder Œ±] [OrderTopology Œ±] [NoMaxOrder Œ±]
    (a : Œ±) : (ùìù[‚â•] a).HasBasis (fun u => a < u) fun u => ico a u :=
  nhds_within_Ici_basis' (exists_gt a)
#align nhds_within_Ici_basis nhds_within_Ici_basis

theorem nhds_within_Iic_basis [TopologicalSpace Œ±] [LinearOrder Œ±] [OrderTopology Œ±] [NoMinOrder Œ±]
    (a : Œ±) : (ùìù[‚â§] a).HasBasis (fun l => l < a) fun l => ioc l a :=
  nhds_within_Iic_basis' (exists_lt a)
#align nhds_within_Iic_basis nhds_within_Iic_basis

theorem nhds_top_order [TopologicalSpace Œ±] [PartialOrder Œ±] [OrderTop Œ±] [OrderTopology Œ±] :
    ùìù (‚ä§ : Œ±) = ‚®Ö (l) (h‚ÇÇ : l < ‚ä§), ùìü (ioi l) := by simp [nhds_eq_order (‚ä§ : Œ±)]
#align nhds_top_order nhds_top_order

theorem nhds_bot_order [TopologicalSpace Œ±] [PartialOrder Œ±] [OrderBot Œ±] [OrderTopology Œ±] :
    ùìù (‚ä• : Œ±) = ‚®Ö (l) (h‚ÇÇ : ‚ä• < l), ùìü (iio l) := by simp [nhds_eq_order (‚ä• : Œ±)]
#align nhds_bot_order nhds_bot_order

theorem nhds_top_basis [TopologicalSpace Œ±] [LinearOrder Œ±] [OrderTop Œ±] [OrderTopology Œ±]
    [Nontrivial Œ±] : (ùìù ‚ä§).HasBasis (fun a : Œ± => a < ‚ä§) fun a : Œ± => ioi a := by
  have : ‚àÉ x : Œ±, x < ‚ä§ := (exists_ne ‚ä§).imp fun x hx => hx.lt_top
  simpa only [Iic_top, nhds_within_univ, Ioc_top] using nhds_within_Iic_basis' this
#align nhds_top_basis nhds_top_basis

theorem nhds_bot_basis [TopologicalSpace Œ±] [LinearOrder Œ±] [OrderBot Œ±] [OrderTopology Œ±]
    [Nontrivial Œ±] : (ùìù ‚ä•).HasBasis (fun a : Œ± => ‚ä• < a) fun a : Œ± => iio a :=
  @nhds_top_basis Œ±·µí·µà _ _ _ _ _
#align nhds_bot_basis nhds_bot_basis

theorem nhds_top_basis_Ici [TopologicalSpace Œ±] [LinearOrder Œ±] [OrderTop Œ±] [OrderTopology Œ±]
    [Nontrivial Œ±] [DenselyOrdered Œ±] : (ùìù ‚ä§).HasBasis (fun a : Œ± => a < ‚ä§) ici :=
  nhds_top_basis.to_has_basis
    (fun a ha =>
      let ‚ü®b, hab, hb‚ü© := exists_between ha
      ‚ü®b, hb, Ici_subset_Ioi.mpr hab‚ü©)
    fun a ha => ‚ü®a, ha, Ioi_subset_Ici_self‚ü©
#align nhds_top_basis_Ici nhds_top_basis_Ici

theorem nhds_bot_basis_Iic [TopologicalSpace Œ±] [LinearOrder Œ±] [OrderBot Œ±] [OrderTopology Œ±]
    [Nontrivial Œ±] [DenselyOrdered Œ±] : (ùìù ‚ä•).HasBasis (fun a : Œ± => ‚ä• < a) iic :=
  @nhds_top_basis_Ici Œ±·µí·µà _ _ _ _ _ _
#align nhds_bot_basis_Iic nhds_bot_basis_Iic

theorem tendsto_nhds_top_mono [TopologicalSpace Œ≤] [PartialOrder Œ≤] [OrderTop Œ≤] [OrderTopology Œ≤]
    {l : Filter Œ±} {f g : Œ± ‚Üí Œ≤} (hf : Tendsto f l (ùìù ‚ä§)) (hg : f ‚â§·∂†[l] g) : Tendsto g l (ùìù ‚ä§) := by
  simp only [nhds_top_order, tendsto_infi, tendsto_principal] at hf‚ä¢
  intro x hx
  filter_upwards [hf x hx, hg] with _ using lt_of_lt_of_le
#align tendsto_nhds_top_mono tendsto_nhds_top_mono

theorem tendsto_nhds_bot_mono [TopologicalSpace Œ≤] [PartialOrder Œ≤] [OrderBot Œ≤] [OrderTopology Œ≤]
    {l : Filter Œ±} {f g : Œ± ‚Üí Œ≤} (hf : Tendsto f l (ùìù ‚ä•)) (hg : g ‚â§·∂†[l] f) : Tendsto g l (ùìù ‚ä•) :=
  @tendsto_nhds_top_mono Œ± Œ≤·µí·µà _ _ _ _ _ _ _ hf hg
#align tendsto_nhds_bot_mono tendsto_nhds_bot_mono

theorem tendsto_nhds_top_mono' [TopologicalSpace Œ≤] [PartialOrder Œ≤] [OrderTop Œ≤] [OrderTopology Œ≤]
    {l : Filter Œ±} {f g : Œ± ‚Üí Œ≤} (hf : Tendsto f l (ùìù ‚ä§)) (hg : f ‚â§ g) : Tendsto g l (ùìù ‚ä§) :=
  tendsto_nhds_top_mono hf (eventually_of_forall hg)
#align tendsto_nhds_top_mono' tendsto_nhds_top_mono'

theorem tendsto_nhds_bot_mono' [TopologicalSpace Œ≤] [PartialOrder Œ≤] [OrderBot Œ≤] [OrderTopology Œ≤]
    {l : Filter Œ±} {f g : Œ± ‚Üí Œ≤} (hf : Tendsto f l (ùìù ‚ä•)) (hg : g ‚â§ f) : Tendsto g l (ùìù ‚ä•) :=
  tendsto_nhds_bot_mono hf (eventually_of_forall hg)
#align tendsto_nhds_bot_mono' tendsto_nhds_bot_mono'

section LinearOrder

variable [TopologicalSpace Œ±] [LinearOrder Œ±]

section OrderClosedTopology

variable [OrderClosedTopology Œ±] {a b : Œ±}

theorem eventually_le_nhds (hab : a < b) : ‚àÄ·∂† x in ùìù a, x ‚â§ b :=
  eventually_iff.mpr (mem_nhds_iff.mpr ‚ü®iio b, Iio_subset_Iic_self, is_open_Iio, hab‚ü©)
#align eventually_le_nhds eventually_le_nhds

theorem eventually_lt_nhds (hab : a < b) : ‚àÄ·∂† x in ùìù a, x < b :=
  eventually_iff.mpr (mem_nhds_iff.mpr ‚ü®iio b, rfl.Subset, is_open_Iio, hab‚ü©)
#align eventually_lt_nhds eventually_lt_nhds

theorem eventually_ge_nhds (hab : b < a) : ‚àÄ·∂† x in ùìù a, b ‚â§ x :=
  eventually_iff.mpr (mem_nhds_iff.mpr ‚ü®ioi b, Ioi_subset_Ici_self, is_open_Ioi, hab‚ü©)
#align eventually_ge_nhds eventually_ge_nhds

theorem eventually_gt_nhds (hab : b < a) : ‚àÄ·∂† x in ùìù a, b < x :=
  eventually_iff.mpr (mem_nhds_iff.mpr ‚ü®ioi b, rfl.Subset, is_open_Ioi, hab‚ü©)
#align eventually_gt_nhds eventually_gt_nhds

end OrderClosedTopology

section OrderTopology

variable [OrderTopology Œ±]

theorem order_separated {a‚ÇÅ a‚ÇÇ : Œ±} (h : a‚ÇÅ < a‚ÇÇ) :
    ‚àÉ u v : Set Œ±, IsOpen u ‚àß IsOpen v ‚àß a‚ÇÅ ‚àà u ‚àß a‚ÇÇ ‚àà v ‚àß ‚àÄ b‚ÇÅ ‚àà u, ‚àÄ b‚ÇÇ ‚àà v, b‚ÇÅ < b‚ÇÇ :=
  match dense_or_discrete a‚ÇÅ a‚ÇÇ with
  | Or.inl ‚ü®a, ha‚ÇÅ, ha‚ÇÇ‚ü© =>
    ‚ü®{ a' | a' < a }, { a' | a < a' }, is_open_gt' a, is_open_lt' a, ha‚ÇÅ, ha‚ÇÇ, fun b‚ÇÅ h‚ÇÅ b‚ÇÇ h‚ÇÇ =>
      lt_trans h‚ÇÅ h‚ÇÇ‚ü©
  | Or.inr ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© =>
    ‚ü®{ a | a < a‚ÇÇ }, { a | a‚ÇÅ < a }, is_open_gt' a‚ÇÇ, is_open_lt' a‚ÇÅ, h, h, fun b‚ÇÅ hb‚ÇÅ b‚ÇÇ hb‚ÇÇ =>
      calc
        b‚ÇÅ ‚â§ a‚ÇÅ := h‚ÇÇ _ hb‚ÇÅ
        _ < a‚ÇÇ := h
        _ ‚â§ b‚ÇÇ := h‚ÇÅ _ hb‚ÇÇ
        ‚ü©
#align order_separated order_separated

-- see Note [lower instance priority]
instance (priority := 100) OrderTopology.to_order_closed_topology :
    OrderClosedTopology
      Œ± where is_closed_le' :=
    is_open_compl_iff.1 <|
      is_open_prod_iff.mpr fun a‚ÇÅ a‚ÇÇ (h : ¬¨a‚ÇÅ ‚â§ a‚ÇÇ) =>
        have h : a‚ÇÇ < a‚ÇÅ := lt_of_not_ge h
        let ‚ü®u, v, hu, hv, ha‚ÇÅ, ha‚ÇÇ, h‚ü© := order_separated h
        ‚ü®v, u, hv, hu, ha‚ÇÇ, ha‚ÇÅ, fun ‚ü®b‚ÇÅ, b‚ÇÇ‚ü© ‚ü®h‚ÇÅ, h‚ÇÇ‚ü© => not_le_of_gt <| h b‚ÇÇ h‚ÇÇ b‚ÇÅ h‚ÇÅ‚ü©
#align order_topology.to_order_closed_topology OrderTopology.to_order_closed_topology

theorem exists_Ioc_subset_of_mem_nhds {a : Œ±} {s : Set Œ±} (hs : s ‚àà ùìù a) (h : ‚àÉ l, l < a) :
    ‚àÉ l < a, ioc l a ‚äÜ s :=
  (nhds_within_Iic_basis' h).mem_iff.mp (nhds_within_le_nhds hs)
#align exists_Ioc_subset_of_mem_nhds exists_Ioc_subset_of_mem_nhds

theorem exists_Ioc_subset_of_mem_nhds' {a : Œ±} {s : Set Œ±} (hs : s ‚àà ùìù a) {l : Œ±} (hl : l < a) :
    ‚àÉ l' ‚àà ico l a, ioc l' a ‚äÜ s :=
  let ‚ü®l', hl'a, hl's‚ü© := exists_Ioc_subset_of_mem_nhds hs ‚ü®l, hl‚ü©
  ‚ü®max l l', ‚ü®le_max_left _ _, max_lt hl hl'a‚ü©,
    (Ioc_subset_Ioc_left <| le_max_right _ _).trans hl's‚ü©
#align exists_Ioc_subset_of_mem_nhds' exists_Ioc_subset_of_mem_nhds'

theorem exists_Ico_subset_of_mem_nhds' {a : Œ±} {s : Set Œ±} (hs : s ‚àà ùìù a) {u : Œ±} (hu : a < u) :
    ‚àÉ u' ‚àà ioc a u, ico a u' ‚äÜ s := by
  simpa only [OrderDual.exists, exists_prop, dual_Ico, dual_Ioc] using
    exists_Ioc_subset_of_mem_nhds' (show of_dual ‚Åª¬π' s ‚àà ùìù (to_dual a) from hs) hu.dual
#align exists_Ico_subset_of_mem_nhds' exists_Ico_subset_of_mem_nhds'

theorem exists_Ico_subset_of_mem_nhds {a : Œ±} {s : Set Œ±} (hs : s ‚àà ùìù a) (h : ‚àÉ u, a < u) :
    ‚àÉ (u : _)(_ : a < u), ico a u ‚äÜ s :=
  let ‚ü®l', hl'‚ü© := h
  let ‚ü®l, hl‚ü© := exists_Ico_subset_of_mem_nhds' hs hl'
  ‚ü®l, hl.fst.1, hl.snd‚ü©
#align exists_Ico_subset_of_mem_nhds exists_Ico_subset_of_mem_nhds

theorem exists_Icc_mem_subset_of_mem_nhds_within_Ici {a : Œ±} {s : Set Œ±} (hs : s ‚àà ùìù[‚â•] a) :
    ‚àÉ (b : _)(_ : a ‚â§ b), icc a b ‚àà ùìù[‚â•] a ‚àß icc a b ‚äÜ s := by
  rcases(em (IsMax a)).imp_right not_is_max_iff.mp with (ha | ha)
  ¬∑ use a
    simpa [ha.Ici_eq] using hs
  ¬∑ rcases(nhds_within_Ici_basis' ha).mem_iff.mp hs with ‚ü®b, hab, hbs‚ü©
    rcases eq_empty_or_nonempty (Ioo a b) with (H | ‚ü®c, hac, hcb‚ü©)
    ¬∑ have : Ico a b = Icc a a := by rw [‚Üê Icc_union_Ioo_eq_Ico le_rfl hab, H, union_empty]
      exact ‚ü®a, le_rfl, this ‚ñ∏ ‚ü®Ico_mem_nhds_within_Ici <| left_mem_Ico.2 hab, hbs‚ü©‚ü©
    ¬∑ refine' ‚ü®c, hac.le, Icc_mem_nhds_within_Ici <| left_mem_Ico.mpr hac, _‚ü©
      exact (Icc_subset_Ico_right hcb).trans hbs
#align exists_Icc_mem_subset_of_mem_nhds_within_Ici exists_Icc_mem_subset_of_mem_nhds_within_Ici

theorem exists_Icc_mem_subset_of_mem_nhds_within_Iic {a : Œ±} {s : Set Œ±} (hs : s ‚àà ùìù[‚â§] a) :
    ‚àÉ b ‚â§ a, icc b a ‚àà ùìù[‚â§] a ‚àß icc b a ‚äÜ s := by
  simpa only [dual_Icc, to_dual.surjective.exists] using
    @exists_Icc_mem_subset_of_mem_nhds_within_Ici Œ±·µí·µà _ _ _ (to_dual a) _ hs
#align exists_Icc_mem_subset_of_mem_nhds_within_Iic exists_Icc_mem_subset_of_mem_nhds_within_Iic

theorem exists_Icc_mem_subset_of_mem_nhds {a : Œ±} {s : Set Œ±} (hs : s ‚àà ùìù a) :
    ‚àÉ b c, a ‚àà icc b c ‚àß icc b c ‚àà ùìù a ‚àß icc b c ‚äÜ s := by
  rcases exists_Icc_mem_subset_of_mem_nhds_within_Iic (nhds_within_le_nhds hs) with
    ‚ü®b, hba, hb_nhds, hbs‚ü©
  rcases exists_Icc_mem_subset_of_mem_nhds_within_Ici (nhds_within_le_nhds hs) with
    ‚ü®c, hac, hc_nhds, hcs‚ü©
  refine' ‚ü®b, c, ‚ü®hba, hac‚ü©, _‚ü©
  rw [‚Üê Icc_union_Icc_eq_Icc hba hac, ‚Üê nhds_left_sup_nhds_right]
  exact ‚ü®union_mem_sup hb_nhds hc_nhds, union_subset hbs hcs‚ü©
#align exists_Icc_mem_subset_of_mem_nhds exists_Icc_mem_subset_of_mem_nhds

theorem IsOpen.exists_Ioo_subset [Nontrivial Œ±] {s : Set Œ±} (hs : IsOpen s) (h : s.Nonempty) :
    ‚àÉ a b, a < b ‚àß ioo a b ‚äÜ s := by
  obtain ‚ü®x, hx‚ü© : ‚àÉ x, x ‚àà s := h
  obtain ‚ü®y, hy‚ü© : ‚àÉ y, y ‚â† x := exists_ne x
  rcases lt_trichotomy x y with (H | rfl | H)
  ¬∑ obtain ‚ü®u, xu, hu‚ü© : ‚àÉ (u : Œ±)(hu : x < u), Ico x u ‚äÜ s :=
      exists_Ico_subset_of_mem_nhds (hs.mem_nhds hx) ‚ü®y, H‚ü©
    exact ‚ü®x, u, xu, Ioo_subset_Ico_self.trans hu‚ü©
  ¬∑ exact (hy rfl).elim
  ¬∑ obtain ‚ü®l, lx, hl‚ü© : ‚àÉ (l : Œ±)(hl : l < x), Ioc l x ‚äÜ s :=
      exists_Ioc_subset_of_mem_nhds (hs.mem_nhds hx) ‚ü®y, H‚ü©
    exact ‚ü®l, x, lx, Ioo_subset_Ioc_self.trans hl‚ü©
#align is_open.exists_Ioo_subset IsOpen.exists_Ioo_subset

theorem dense_of_exists_between [Nontrivial Œ±] {s : Set Œ±}
    (h : ‚àÄ ‚¶Éa b‚¶Ñ, a < b ‚Üí ‚àÉ c ‚àà s, a < c ‚àß c < b) : Dense s := by
  apply dense_iff_inter_open.2 fun U U_open U_nonempty => _
  obtain ‚ü®a, b, hab, H‚ü© : ‚àÉ a b : Œ±, a < b ‚àß Ioo a b ‚äÜ U := U_open.exists_Ioo_subset U_nonempty
  obtain ‚ü®x, xs, hx‚ü© : ‚àÉ (x : Œ±)(H : x ‚àà s), a < x ‚àß x < b := h hab
  exact ‚ü®x, ‚ü®H hx, xs‚ü©‚ü©
#align dense_of_exists_between dense_of_exists_between

/-- A set in a nontrivial densely linear ordered type is dense in the sense of topology if and only
if for any `a < b` there exists `c ‚àà s`, `a < c < b`. Each implication requires less typeclass
assumptions. -/
theorem dense_iff_exists_between [DenselyOrdered Œ±] [Nontrivial Œ±] {s : Set Œ±} :
    Dense s ‚Üî ‚àÄ a b, a < b ‚Üí ‚àÉ c ‚àà s, a < c ‚àß c < b :=
  ‚ü®fun h a b hab => h.exists_between hab, dense_of_exists_between‚ü©
#align dense_iff_exists_between dense_iff_exists_between

/-- A set is a neighborhood of `a` if and only if it contains an interval `(l, u)` containing `a`,
provided `a` is neither a bottom element nor a top element. -/
theorem mem_nhds_iff_exists_Ioo_subset' {a : Œ±} {s : Set Œ±} (hl : ‚àÉ l, l < a) (hu : ‚àÉ u, a < u) :
    s ‚àà ùìù a ‚Üî ‚àÉ l u, a ‚àà ioo l u ‚àß ioo l u ‚äÜ s := by
  constructor
  ¬∑ intro h
    rcases exists_Ico_subset_of_mem_nhds h hu with ‚ü®u, au, hu‚ü©
    rcases exists_Ioc_subset_of_mem_nhds h hl with ‚ü®l, la, hl‚ü©
    exact ‚ü®l, u, ‚ü®la, au‚ü©, Ioc_union_Ico_eq_Ioo la au ‚ñ∏ union_subset hl hu‚ü©
  ¬∑ rintro ‚ü®l, u, ha, h‚ü©
    apply mem_of_superset (Ioo_mem_nhds ha.1 ha.2) h
#align mem_nhds_iff_exists_Ioo_subset' mem_nhds_iff_exists_Ioo_subset'

/-- A set is a neighborhood of `a` if and only if it contains an interval `(l, u)` containing `a`.
-/
theorem mem_nhds_iff_exists_Ioo_subset [NoMaxOrder Œ±] [NoMinOrder Œ±] {a : Œ±} {s : Set Œ±} :
    s ‚àà ùìù a ‚Üî ‚àÉ l u, a ‚àà ioo l u ‚àß ioo l u ‚äÜ s :=
  mem_nhds_iff_exists_Ioo_subset' (exists_lt a) (exists_gt a)
#align mem_nhds_iff_exists_Ioo_subset mem_nhds_iff_exists_Ioo_subset

theorem nhds_basis_Ioo' {a : Œ±} (hl : ‚àÉ l, l < a) (hu : ‚àÉ u, a < u) :
    (ùìù a).HasBasis (fun b : Œ± √ó Œ± => b.1 < a ‚àß a < b.2) fun b => ioo b.1 b.2 :=
  ‚ü®fun s => (mem_nhds_iff_exists_Ioo_subset' hl hu).trans <| by simp‚ü©
#align nhds_basis_Ioo' nhds_basis_Ioo'

theorem nhds_basis_Ioo [NoMaxOrder Œ±] [NoMinOrder Œ±] (a : Œ±) :
    (ùìù a).HasBasis (fun b : Œ± √ó Œ± => b.1 < a ‚àß a < b.2) fun b => ioo b.1 b.2 :=
  nhds_basis_Ioo' (exists_lt a) (exists_gt a)
#align nhds_basis_Ioo nhds_basis_Ioo

theorem Filter.Eventually.exists_Ioo_subset [NoMaxOrder Œ±] [NoMinOrder Œ±] {a : Œ±} {p : Œ± ‚Üí Prop}
    (hp : ‚àÄ·∂† x in ùìù a, p x) : ‚àÉ l u, a ‚àà ioo l u ‚àß ioo l u ‚äÜ { x | p x } :=
  mem_nhds_iff_exists_Ioo_subset.1 hp
#align filter.eventually.exists_Ioo_subset Filter.Eventually.exists_Ioo_subset

/-- The set of points which are isolated on the right is countable when the space is
second-countable. -/
theorem countable_of_isolated_right [SecondCountableTopology Œ±] :
    Set.Countable { x : Œ± | ‚àÉ y, x < y ‚àß ioo x y = ‚àÖ } := by
  nontriviality Œ±
  let s := { x : Œ± | ‚àÉ y, x < y ‚àß Ioo x y = ‚àÖ }
  have : ‚àÄ x ‚àà s, ‚àÉ y, x < y ‚àß Ioo x y = ‚àÖ := fun x => id
  choose! y hy h'y using this
  have Hy : ‚àÄ x z, x ‚àà s ‚Üí z < y x ‚Üí z ‚â§ x := by
    intro x z xs hz
    have A : Ioo x (y x) = ‚àÖ := h'y _ xs
    contrapose! A
    exact nonempty.ne_empty ‚ü®z, A, hz‚ü©
  suffices H : ‚àÄ a : Set Œ±, IsOpen a ‚Üí Set.Countable { x | x ‚àà s ‚àß x ‚àà a ‚àß y x ‚àâ a }
  ¬∑ have : s ‚äÜ ‚ãÉ a ‚àà countable_basis Œ±, { x | x ‚àà s ‚àß x ‚àà a ‚àß y x ‚àâ a } := by
      intro x hx
      rcases(is_basis_countable_basis Œ±).exists_mem_of_ne (hy x hx).Ne with ‚ü®a, ab, xa, ya‚ü©
      simp only [mem_set_of_eq, mem_Union]
      exact ‚ü®a, ab, hx, xa, ya‚ü©
    apply countable.mono this
    refine' countable.bUnion (countable_countable_basis Œ±) fun a ha => H _ _
    exact is_open_of_mem_countable_basis ha
  intro a ha
  suffices H : Set.Countable { x | x ‚àà s ‚àß x ‚àà a ‚àß y x ‚àâ a ‚àß ¬¨IsBot x }
  ¬∑ have :
      { x | x ‚àà s ‚àß x ‚àà a ‚àß y x ‚àâ a } ‚äÜ
        { x | x ‚àà s ‚àß x ‚àà a ‚àß y x ‚àâ a ‚àß ¬¨IsBot x } ‚à™ { x | IsBot x } :=
      by 
      intro x hx
      by_cases h'x : IsBot x
      ¬∑ simp only [h'x, mem_set_of_eq, mem_union, not_true, and_false_iff, false_or_iff]
      ¬∑
        simpa only [h'x, hx.2.1, hx.2.2, mem_set_of_eq, mem_union, not_false_iff, and_true_iff,
          or_false_iff] using hx.left
    exact countable.mono this (H.union (subsingleton_is_bot Œ±).Countable)
  let t := { x | x ‚àà s ‚àß x ‚àà a ‚àß y x ‚àâ a ‚àß ¬¨IsBot x }
  have : ‚àÄ x ‚àà t, ‚àÉ z < x, Ioc z x ‚äÜ a := by 
    intro x hx
    apply exists_Ioc_subset_of_mem_nhds (ha.mem_nhds hx.2.1)
    simpa only [IsBot, not_forall, not_le] using hx.right.right.right
  choose! z hz h'z using this
  have : pairwise_disjoint t fun x => Ioc (z x) x := by
    intro x xt x' x't hxx'
    rcases lt_or_gt_of_ne hxx' with (h' | h')
    ¬∑ refine' disjoint_left.2 fun u ux ux' => xt.2.2.1 _
      refine' h'z x' x't ‚ü®ux'.1.trans_le (ux.2.trans (hy x xt.1).le), _‚ü©
      by_contra' H
      exact False.elim (lt_irrefl _ ((Hy _ _ xt.1 H).trans_lt h'))
    ¬∑ refine' disjoint_left.2 fun u ux ux' => x't.2.2.1 _
      refine' h'z x xt ‚ü®ux.1.trans_le (ux'.2.trans (hy x' x't.1).le), _‚ü©
      by_contra' H
      exact False.elim (lt_irrefl _ ((Hy _ _ x't.1 H).trans_lt h'))
  refine' this.countable_of_is_open (fun x hx => _) fun x hx => ‚ü®x, hz x hx, le_rfl‚ü©
  suffices H : Ioc (z x) x = Ioo (z x) (y x)
  ¬∑ rw [H]
    exact is_open_Ioo
  exact subset.antisymm (Ioc_subset_Ioo_right (hy x hx.1)) fun u hu => ‚ü®hu.1, Hy _ _ hx.1 hu.2‚ü©
#align countable_of_isolated_right countable_of_isolated_right

/-- The set of points which are isolated on the left is countable when the space is
second-countable. -/
theorem countable_of_isolated_left [SecondCountableTopology Œ±] :
    Set.Countable { x : Œ± | ‚àÉ y, y < x ‚àß ioo y x = ‚àÖ } := by
  convert @countable_of_isolated_right Œ±·µí·µà _ _ _ _
  have : ‚àÄ x y : Œ±, Ioo x y = { z | z < y ‚àß x < z } := by
    simp_rw [and_comm', Ioo]
    simp only [eq_self_iff_true, forall‚ÇÇ_true_iff]
  simp_rw [this]
  rfl
#align countable_of_isolated_left countable_of_isolated_left

/-- Consider a disjoint family of intervals `(x, y)` with `x < y` in a second-countable space.
Then the family is countable.
This is not a straightforward consequence of second-countability as some of these intervals might be
empty (but in fact this can happen only for countably many of them). -/
theorem Set.PairwiseDisjoint.countable_of_Ioo [SecondCountableTopology Œ±] {y : Œ± ‚Üí Œ±} {s : Set Œ±}
    (h : PairwiseDisjoint s fun x => ioo x (y x)) (h' : ‚àÄ x ‚àà s, x < y x) : s.Countable := by
  let t := { x | x ‚àà s ‚àß (Ioo x (y x)).Nonempty }
  have t_count : t.countable :=
    haveI : t ‚äÜ s := fun x hx => hx.1
    (h.subset this).countable_of_is_open (fun x hx => is_open_Ioo) fun x hx => hx.2
  have : s ‚äÜ t ‚à™ { x : Œ± | ‚àÉ x', x < x' ‚àß Ioo x x' = ‚àÖ } := by
    intro x hx
    by_cases h'x : (Ioo x (y x)).Nonempty
    ¬∑ exact Or.inl ‚ü®hx, h'x‚ü©
    ¬∑ exact Or.inr ‚ü®y x, h' x hx, not_nonempty_iff_eq_empty.1 h'x‚ü©
  exact countable.mono this (t_count.union countable_of_isolated_right)
#align set.pairwise_disjoint.countable_of_Ioo Set.PairwiseDisjoint.countable_of_Ioo

section Pi

/-!
### Intervals in `Œ† i, œÄ i` belong to `ùìù x`

For each lemma `pi_Ixx_mem_nhds` we add a non-dependent version `pi_Ixx_mem_nhds'` because
sometimes Lean fails to unify different instances while trying to apply the dependent version to,
e.g., `Œπ ‚Üí ‚Ñù`.
-/


variable {Œπ : Type _} {œÄ : Œπ ‚Üí Type _} [Finite Œπ] [‚àÄ i, LinearOrder (œÄ i)]
  [‚àÄ i, TopologicalSpace (œÄ i)] [‚àÄ i, OrderTopology (œÄ i)] {a b x : ‚àÄ i, œÄ i} {a' b' x' : Œπ ‚Üí Œ±}

theorem pi_Iic_mem_nhds (ha : ‚àÄ i, x i < a i) : iic a ‚àà ùìù x :=
  pi_univ_Iic a ‚ñ∏ set_pi_mem_nhds (Set.to_finite _) fun i _ => Iic_mem_nhds (ha _)
#align pi_Iic_mem_nhds pi_Iic_mem_nhds

theorem pi_Iic_mem_nhds' (ha : ‚àÄ i, x' i < a' i) : iic a' ‚àà ùìù x' :=
  pi_Iic_mem_nhds ha
#align pi_Iic_mem_nhds' pi_Iic_mem_nhds'

theorem pi_Ici_mem_nhds (ha : ‚àÄ i, a i < x i) : ici a ‚àà ùìù x :=
  pi_univ_Ici a ‚ñ∏ set_pi_mem_nhds (Set.to_finite _) fun i _ => Ici_mem_nhds (ha _)
#align pi_Ici_mem_nhds pi_Ici_mem_nhds

theorem pi_Ici_mem_nhds' (ha : ‚àÄ i, a' i < x' i) : ici a' ‚àà ùìù x' :=
  pi_Ici_mem_nhds ha
#align pi_Ici_mem_nhds' pi_Ici_mem_nhds'

theorem pi_Icc_mem_nhds (ha : ‚àÄ i, a i < x i) (hb : ‚àÄ i, x i < b i) : icc a b ‚àà ùìù x :=
  pi_univ_Icc a b ‚ñ∏ set_pi_mem_nhds finite_univ fun i _ => Icc_mem_nhds (ha _) (hb _)
#align pi_Icc_mem_nhds pi_Icc_mem_nhds

theorem pi_Icc_mem_nhds' (ha : ‚àÄ i, a' i < x' i) (hb : ‚àÄ i, x' i < b' i) : icc a' b' ‚àà ùìù x' :=
  pi_Icc_mem_nhds ha hb
#align pi_Icc_mem_nhds' pi_Icc_mem_nhds'

variable [Nonempty Œπ]

theorem pi_Iio_mem_nhds (ha : ‚àÄ i, x i < a i) : iio a ‚àà ùìù x := by
  refine' mem_of_superset (set_pi_mem_nhds (Set.to_finite _) fun i _ => _) (pi_univ_Iio_subset a)
  exact Iio_mem_nhds (ha i)
#align pi_Iio_mem_nhds pi_Iio_mem_nhds

theorem pi_Iio_mem_nhds' (ha : ‚àÄ i, x' i < a' i) : iio a' ‚àà ùìù x' :=
  pi_Iio_mem_nhds ha
#align pi_Iio_mem_nhds' pi_Iio_mem_nhds'

theorem pi_Ioi_mem_nhds (ha : ‚àÄ i, a i < x i) : ioi a ‚àà ùìù x :=
  @pi_Iio_mem_nhds Œπ (fun i => (œÄ i)·µí·µà) _ _ _ _ _ _ _ ha
#align pi_Ioi_mem_nhds pi_Ioi_mem_nhds

theorem pi_Ioi_mem_nhds' (ha : ‚àÄ i, a' i < x' i) : ioi a' ‚àà ùìù x' :=
  pi_Ioi_mem_nhds ha
#align pi_Ioi_mem_nhds' pi_Ioi_mem_nhds'

theorem pi_Ioc_mem_nhds (ha : ‚àÄ i, a i < x i) (hb : ‚àÄ i, x i < b i) : ioc a b ‚àà ùìù x := by
  refine' mem_of_superset (set_pi_mem_nhds (Set.to_finite _) fun i _ => _) (pi_univ_Ioc_subset a b)
  exact Ioc_mem_nhds (ha i) (hb i)
#align pi_Ioc_mem_nhds pi_Ioc_mem_nhds

theorem pi_Ioc_mem_nhds' (ha : ‚àÄ i, a' i < x' i) (hb : ‚àÄ i, x' i < b' i) : ioc a' b' ‚àà ùìù x' :=
  pi_Ioc_mem_nhds ha hb
#align pi_Ioc_mem_nhds' pi_Ioc_mem_nhds'

theorem pi_Ico_mem_nhds (ha : ‚àÄ i, a i < x i) (hb : ‚àÄ i, x i < b i) : ico a b ‚àà ùìù x := by
  refine' mem_of_superset (set_pi_mem_nhds (Set.to_finite _) fun i _ => _) (pi_univ_Ico_subset a b)
  exact Ico_mem_nhds (ha i) (hb i)
#align pi_Ico_mem_nhds pi_Ico_mem_nhds

theorem pi_Ico_mem_nhds' (ha : ‚àÄ i, a' i < x' i) (hb : ‚àÄ i, x' i < b' i) : ico a' b' ‚àà ùìù x' :=
  pi_Ico_mem_nhds ha hb
#align pi_Ico_mem_nhds' pi_Ico_mem_nhds'

theorem pi_Ioo_mem_nhds (ha : ‚àÄ i, a i < x i) (hb : ‚àÄ i, x i < b i) : ioo a b ‚àà ùìù x := by
  refine' mem_of_superset (set_pi_mem_nhds (Set.to_finite _) fun i _ => _) (pi_univ_Ioo_subset a b)
  exact Ioo_mem_nhds (ha i) (hb i)
#align pi_Ioo_mem_nhds pi_Ioo_mem_nhds

theorem pi_Ioo_mem_nhds' (ha : ‚àÄ i, a' i < x' i) (hb : ‚àÄ i, x' i < b' i) : ioo a' b' ‚àà ùìù x' :=
  pi_Ioo_mem_nhds ha hb
#align pi_Ioo_mem_nhds' pi_Ioo_mem_nhds'

end Pi

theorem disjoint_nhds_at_top [NoMaxOrder Œ±] (x : Œ±) : Disjoint (ùìù x) atTop := by
  rcases exists_gt x with ‚ü®y, hy : x < y‚ü©
  refine' disjoint_of_disjoint_of_mem _ (Iio_mem_nhds hy) (mem_at_top y)
  exact disjoint_left.mpr fun z => not_le.2
#align disjoint_nhds_at_top disjoint_nhds_at_top

@[simp]
theorem inf_nhds_at_top [NoMaxOrder Œ±] (x : Œ±) : ùìù x ‚äì at_top = ‚ä• :=
  disjoint_iff.1 (disjoint_nhds_at_top x)
#align inf_nhds_at_top inf_nhds_at_top

theorem disjoint_nhds_at_bot [NoMinOrder Œ±] (x : Œ±) : Disjoint (ùìù x) atBot :=
  @disjoint_nhds_at_top Œ±·µí·µà _ _ _ _ x
#align disjoint_nhds_at_bot disjoint_nhds_at_bot

@[simp]
theorem inf_nhds_at_bot [NoMinOrder Œ±] (x : Œ±) : ùìù x ‚äì at_bot = ‚ä• :=
  @inf_nhds_at_top Œ±·µí·µà _ _ _ _ x
#align inf_nhds_at_bot inf_nhds_at_bot

theorem not_tendsto_nhds_of_tendsto_at_top [NoMaxOrder Œ±] {F : Filter Œ≤} [NeBot F] {f : Œ≤ ‚Üí Œ±}
    (hf : Tendsto f F atTop) (x : Œ±) : ¬¨Tendsto f F (ùìù x) :=
  hf.not_tendsto (disjoint_nhds_at_top x).symm
#align not_tendsto_nhds_of_tendsto_at_top not_tendsto_nhds_of_tendsto_at_top

theorem not_tendsto_at_top_of_tendsto_nhds [NoMaxOrder Œ±] {F : Filter Œ≤} [NeBot F] {f : Œ≤ ‚Üí Œ±}
    {x : Œ±} (hf : Tendsto f F (ùìù x)) : ¬¨Tendsto f F atTop :=
  hf.not_tendsto (disjoint_nhds_at_top x)
#align not_tendsto_at_top_of_tendsto_nhds not_tendsto_at_top_of_tendsto_nhds

theorem not_tendsto_nhds_of_tendsto_at_bot [NoMinOrder Œ±] {F : Filter Œ≤} [NeBot F] {f : Œ≤ ‚Üí Œ±}
    (hf : Tendsto f F atBot) (x : Œ±) : ¬¨Tendsto f F (ùìù x) :=
  hf.not_tendsto (disjoint_nhds_at_bot x).symm
#align not_tendsto_nhds_of_tendsto_at_bot not_tendsto_nhds_of_tendsto_at_bot

theorem not_tendsto_at_bot_of_tendsto_nhds [NoMinOrder Œ±] {F : Filter Œ≤} [NeBot F] {f : Œ≤ ‚Üí Œ±}
    {x : Œ±} (hf : Tendsto f F (ùìù x)) : ¬¨Tendsto f F atBot :=
  hf.not_tendsto (disjoint_nhds_at_bot x)
#align not_tendsto_at_bot_of_tendsto_nhds not_tendsto_at_bot_of_tendsto_nhds

/-!
### Neighborhoods to the left and to the right on an `order_topology`

We've seen some properties of left and right neighborhood of a point in an `order_closed_topology`.
In an `order_topology`, such neighborhoods can be characterized as the sets containing suitable
intervals to the right or to the left of `a`. We give now these characterizations. -/


/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "The following statements are equivalent:\n\n0. `s` is a neighborhood of `a` within `(a, +‚àû)`\n1. `s` is a neighborhood of `a` within `(a, b]`\n2. `s` is a neighborhood of `a` within `(a, b)`\n3. `s` includes `(a, u)` for some `u ‚àà (a, b]`\n4. `s` includes `(a, u)` for some `u > a` -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `tfae_mem_nhds_within_Ioi [])
      (Command.declSig
       [(Term.implicitBinder "{" [`a `b] [":" `Œ±] "}")
        (Term.explicitBinder "(" [`hab] [":" (¬´term_<_¬ª `a "<" `b)] [] ")")
        (Term.explicitBinder "(" [`s] [":" (Term.app `Set [`Œ±])] [] ")")]
       (Term.typeSpec
        ":"
        (Term.app
         `Tfae
         [(¬´term[_]¬ª
           "["
           [(¬´term_‚àà_¬ª `s "‚àà" (TopologicalSpace.Topology.Basic.nhds_within.gt "ùìù[>] " `a))
            ","
            (¬´term_‚àà_¬ª
             `s
             "‚àà"
             (TopologicalSpace.Topology.Basic.nhds_within "ùìù[" (Term.app `ioc [`a `b]) "] " `a))
            ","
            (¬´term_‚àà_¬ª
             `s
             "‚àà"
             (TopologicalSpace.Topology.Basic.nhds_within "ùìù[" (Term.app `ioo [`a `b]) "] " `a))
            ","
            (Std.ExtendedBinder.¬´term‚àÉ__,_¬ª
             "‚àÉ"
             (Lean.binderIdent `u)
             (¬´binderTerm‚àà_¬ª "‚àà" (Term.app `ioc [`a `b]))
             ","
             (¬´term_‚äÜ_¬ª (Term.app `ioo [`a `u]) "‚äÜ" `s))
            ","
            (Std.ExtendedBinder.¬´term‚àÉ__,_¬ª
             "‚àÉ"
             (Lean.binderIdent `u)
             (¬´binderTerm‚àà_¬ª "‚àà" (Term.app `ioi [`a]))
             ","
             (¬´term_‚äÜ_¬ª (Term.app `ioo [`a `u]) "‚äÜ" `s))]
           "]")])))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.tfaeHave "tfae_have" [] (num "1") "‚Üî" (num "2"))
           ";"
           (tactic___
            (cdotTk (patternIgnore (token.¬´¬∑¬ª "¬∑")))
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] (Term.app `nhds_within_Ioc_eq_nhds_within_Ioi [`hab]))]
               "]")
              [])])
           []
           (Tactic.tfaeHave "tfae_have" [] (num "1") "‚Üî" (num "3"))
           ";"
           (tactic___
            (cdotTk (patternIgnore (token.¬´¬∑¬ª "¬∑")))
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] (Term.app `nhds_within_Ioo_eq_nhds_within_Ioi [`hab]))]
               "]")
              [])])
           []
           (Tactic.tfaeHave "tfae_have" [] (num "4") "‚Üí" (num "5"))
           ";"
           (Tactic.exact
            "exact"
            (Term.fun
             "fun"
             (Term.basicFun
              [(Term.anonymousCtor "‚ü®" [`u "," `umem "," `hu] "‚ü©")]
              []
              "=>"
              (Term.anonymousCtor "‚ü®" [`u "," (Term.proj `umem "." (fieldIdx "1")) "," `hu] "‚ü©"))))
           []
           (Tactic.tfaeHave "tfae_have" [] (num "5") "‚Üí" (num "1"))
           []
           (tactic___
            (cdotTk (patternIgnore (token.¬´¬∑¬ª "¬∑")))
            [(Std.Tactic.rintro
              "rintro"
              [(Std.Tactic.RCases.rintroPat.one
                (Std.Tactic.RCases.rcasesPat.tuple
                 "‚ü®"
                 [(Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `u)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hau)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hu)])
                   [])]
                 "‚ü©"))]
              [])
             []
             (Tactic.exact
              "exact"
              (Term.app
               `mem_of_superset
               [(Term.app
                 `Ioo_mem_nhds_within_Ioi
                 [(Term.anonymousCtor "‚ü®" [(Term.app `le_refl [`a]) "," `hau] "‚ü©")])
                `hu]))])
           []
           (Tactic.tfaeHave "tfae_have" [] (num "1") "‚Üí" (num "4"))
           []
           (tactic___
            (cdotTk (patternIgnore (token.¬´¬∑¬ª "¬∑")))
            [(Tactic.intro "intro" [`h])
             []
             (Std.Tactic.rcases
              "rcases"
              [(Tactic.casesTarget
                []
                (Term.app
                 (Term.proj `mem_nhds_within_iff_exists_mem_nhds_inter "." (fieldIdx "1"))
                 [`h]))]
              ["with"
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed
                 [(Std.Tactic.RCases.rcasesPat.tuple
                   "‚ü®"
                   [(Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `v)])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `va)])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hv)])
                     [])]
                   "‚ü©")])
                [])])
             []
             (Std.Tactic.rcases
              "rcases"
              [(Tactic.casesTarget [] (Term.app `exists_Ico_subset_of_mem_nhds' [`va `hab]))]
              ["with"
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed
                 [(Std.Tactic.RCases.rcasesPat.tuple
                   "‚ü®"
                   [(Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `u)])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `au)])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hu)])
                     [])]
                   "‚ü©")])
                [])])
             []
             (Tactic.refine'
              "refine'"
              (Term.anonymousCtor
               "‚ü®"
               [`u "," `au "," (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))]
               "‚ü©"))
             []
             (Tactic.refine'
              "refine'"
              (Term.app
               `hv
               [(Term.anonymousCtor
                 "‚ü®"
                 [(Term.app
                   `hu
                   [(Term.anonymousCtor
                     "‚ü®"
                     [(Term.app `le_of_lt [(Term.proj `hx "." (fieldIdx "1"))])
                      ","
                      (Term.proj `hx "." (fieldIdx "2"))]
                     "‚ü©")])
                  ","
                  (Term.hole "_")]
                 "‚ü©")]))
             []
             (Tactic.exact "exact" (Term.proj `hx "." (fieldIdx "1")))])
           []
           (Tactic.tfaeFinish "tfae_finish")])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.tfaeHave "tfae_have" [] (num "1") "‚Üî" (num "2"))
          ";"
          (tactic___
           (cdotTk (patternIgnore (token.¬´¬∑¬ª "¬∑")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] (Term.app `nhds_within_Ioc_eq_nhds_within_Ioi [`hab]))]
              "]")
             [])])
          []
          (Tactic.tfaeHave "tfae_have" [] (num "1") "‚Üî" (num "3"))
          ";"
          (tactic___
           (cdotTk (patternIgnore (token.¬´¬∑¬ª "¬∑")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] (Term.app `nhds_within_Ioo_eq_nhds_within_Ioi [`hab]))]
              "]")
             [])])
          []
          (Tactic.tfaeHave "tfae_have" [] (num "4") "‚Üí" (num "5"))
          ";"
          (Tactic.exact
           "exact"
           (Term.fun
            "fun"
            (Term.basicFun
             [(Term.anonymousCtor "‚ü®" [`u "," `umem "," `hu] "‚ü©")]
             []
             "=>"
             (Term.anonymousCtor "‚ü®" [`u "," (Term.proj `umem "." (fieldIdx "1")) "," `hu] "‚ü©"))))
          []
          (Tactic.tfaeHave "tfae_have" [] (num "5") "‚Üí" (num "1"))
          []
          (tactic___
           (cdotTk (patternIgnore (token.¬´¬∑¬ª "¬∑")))
           [(Std.Tactic.rintro
             "rintro"
             [(Std.Tactic.RCases.rintroPat.one
               (Std.Tactic.RCases.rcasesPat.tuple
                "‚ü®"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `u)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hau)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hu)])
                  [])]
                "‚ü©"))]
             [])
            []
            (Tactic.exact
             "exact"
             (Term.app
              `mem_of_superset
              [(Term.app
                `Ioo_mem_nhds_within_Ioi
                [(Term.anonymousCtor "‚ü®" [(Term.app `le_refl [`a]) "," `hau] "‚ü©")])
               `hu]))])
          []
          (Tactic.tfaeHave "tfae_have" [] (num "1") "‚Üí" (num "4"))
          []
          (tactic___
           (cdotTk (patternIgnore (token.¬´¬∑¬ª "¬∑")))
           [(Tactic.intro "intro" [`h])
            []
            (Std.Tactic.rcases
             "rcases"
             [(Tactic.casesTarget
               []
               (Term.app
                (Term.proj `mem_nhds_within_iff_exists_mem_nhds_inter "." (fieldIdx "1"))
                [`h]))]
             ["with"
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed
                [(Std.Tactic.RCases.rcasesPat.tuple
                  "‚ü®"
                  [(Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `v)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `va)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hv)])
                    [])]
                  "‚ü©")])
               [])])
            []
            (Std.Tactic.rcases
             "rcases"
             [(Tactic.casesTarget [] (Term.app `exists_Ico_subset_of_mem_nhds' [`va `hab]))]
             ["with"
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed
                [(Std.Tactic.RCases.rcasesPat.tuple
                  "‚ü®"
                  [(Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `u)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `au)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hu)])
                    [])]
                  "‚ü©")])
               [])])
            []
            (Tactic.refine'
             "refine'"
             (Term.anonymousCtor
              "‚ü®"
              [`u "," `au "," (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))]
              "‚ü©"))
            []
            (Tactic.refine'
             "refine'"
             (Term.app
              `hv
              [(Term.anonymousCtor
                "‚ü®"
                [(Term.app
                  `hu
                  [(Term.anonymousCtor
                    "‚ü®"
                    [(Term.app `le_of_lt [(Term.proj `hx "." (fieldIdx "1"))])
                     ","
                     (Term.proj `hx "." (fieldIdx "2"))]
                    "‚ü©")])
                 ","
                 (Term.hole "_")]
                "‚ü©")]))
            []
            (Tactic.exact "exact" (Term.proj `hx "." (fieldIdx "1")))])
          []
          (Tactic.tfaeFinish "tfae_finish")])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tfaeFinish "tfae_finish")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic___
       (cdotTk (patternIgnore (token.¬´¬∑¬ª "¬∑")))
       [(Tactic.intro "intro" [`h])
        []
        (Std.Tactic.rcases
         "rcases"
         [(Tactic.casesTarget
           []
           (Term.app
            (Term.proj `mem_nhds_within_iff_exists_mem_nhds_inter "." (fieldIdx "1"))
            [`h]))]
         ["with"
          (Std.Tactic.RCases.rcasesPatLo
           (Std.Tactic.RCases.rcasesPatMed
            [(Std.Tactic.RCases.rcasesPat.tuple
              "‚ü®"
              [(Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `v)])
                [])
               ","
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `va)])
                [])
               ","
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hv)])
                [])]
              "‚ü©")])
           [])])
        []
        (Std.Tactic.rcases
         "rcases"
         [(Tactic.casesTarget [] (Term.app `exists_Ico_subset_of_mem_nhds' [`va `hab]))]
         ["with"
          (Std.Tactic.RCases.rcasesPatLo
           (Std.Tactic.RCases.rcasesPatMed
            [(Std.Tactic.RCases.rcasesPat.tuple
              "‚ü®"
              [(Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `u)])
                [])
               ","
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `au)])
                [])
               ","
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hu)])
                [])]
              "‚ü©")])
           [])])
        []
        (Tactic.refine'
         "refine'"
         (Term.anonymousCtor
          "‚ü®"
          [`u "," `au "," (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))]
          "‚ü©"))
        []
        (Tactic.refine'
         "refine'"
         (Term.app
          `hv
          [(Term.anonymousCtor
            "‚ü®"
            [(Term.app
              `hu
              [(Term.anonymousCtor
                "‚ü®"
                [(Term.app `le_of_lt [(Term.proj `hx "." (fieldIdx "1"))])
                 ","
                 (Term.proj `hx "." (fieldIdx "2"))]
                "‚ü©")])
             ","
             (Term.hole "_")]
            "‚ü©")]))
        []
        (Tactic.exact "exact" (Term.proj `hx "." (fieldIdx "1")))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.proj `hx "." (fieldIdx "1")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `hx "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `hv
        [(Term.anonymousCtor
          "‚ü®"
          [(Term.app
            `hu
            [(Term.anonymousCtor
              "‚ü®"
              [(Term.app `le_of_lt [(Term.proj `hx "." (fieldIdx "1"))])
               ","
               (Term.proj `hx "." (fieldIdx "2"))]
              "‚ü©")])
           ","
           (Term.hole "_")]
          "‚ü©")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `hv
       [(Term.anonymousCtor
         "‚ü®"
         [(Term.app
           `hu
           [(Term.anonymousCtor
             "‚ü®"
             [(Term.app `le_of_lt [(Term.proj `hx "." (fieldIdx "1"))])
              ","
              (Term.proj `hx "." (fieldIdx "2"))]
             "‚ü©")])
          ","
          (Term.hole "_")]
         "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "‚ü®"
       [(Term.app
         `hu
         [(Term.anonymousCtor
           "‚ü®"
           [(Term.app `le_of_lt [(Term.proj `hx "." (fieldIdx "1"))])
            ","
            (Term.proj `hx "." (fieldIdx "2"))]
           "‚ü©")])
        ","
        (Term.hole "_")]
       "‚ü©")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `hu
       [(Term.anonymousCtor
         "‚ü®"
         [(Term.app `le_of_lt [(Term.proj `hx "." (fieldIdx "1"))])
          ","
          (Term.proj `hx "." (fieldIdx "2"))]
         "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "‚ü®"
       [(Term.app `le_of_lt [(Term.proj `hx "." (fieldIdx "1"))])
        ","
        (Term.proj `hx "." (fieldIdx "2"))]
       "‚ü©")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `hx "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_of_lt [(Term.proj `hx "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `hx "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_of_lt
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hu
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hv
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.anonymousCtor
        "‚ü®"
        [`u "," `au "," (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))]
        "‚ü©"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "‚ü®"
       [`u "," `au "," (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))]
       "‚ü©")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `au
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `u
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rcases
       "rcases"
       [(Tactic.casesTarget [] (Term.app `exists_Ico_subset_of_mem_nhds' [`va `hab]))]
       ["with"
        (Std.Tactic.RCases.rcasesPatLo
         (Std.Tactic.RCases.rcasesPatMed
          [(Std.Tactic.RCases.rcasesPat.tuple
            "‚ü®"
            [(Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `u)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `au)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hu)])
              [])]
            "‚ü©")])
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `exists_Ico_subset_of_mem_nhds' [`va `hab])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hab
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `va
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `exists_Ico_subset_of_mem_nhds'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rcases
       "rcases"
       [(Tactic.casesTarget
         []
         (Term.app (Term.proj `mem_nhds_within_iff_exists_mem_nhds_inter "." (fieldIdx "1")) [`h]))]
       ["with"
        (Std.Tactic.RCases.rcasesPatLo
         (Std.Tactic.RCases.rcasesPatMed
          [(Std.Tactic.RCases.rcasesPat.tuple
            "‚ü®"
            [(Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `v)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `va)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hv)])
              [])]
            "‚ü©")])
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `mem_nhds_within_iff_exists_mem_nhds_inter "." (fieldIdx "1")) [`h])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `mem_nhds_within_iff_exists_mem_nhds_inter "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `mem_nhds_within_iff_exists_mem_nhds_inter
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`h])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tfaeHave "tfae_have" [] (num "1") "‚Üí" (num "4"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´‚Üí¬ª', expected 'token.¬´ ‚Üí ¬ª'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´‚Üí¬ª', expected 'token.¬´ ‚Üî ¬ª'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´‚Üí¬ª', expected 'token.¬´ ‚Üê ¬ª'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    The following statements are equivalent:
    
    0. `s` is a neighborhood of `a` within `(a, +‚àû)`
    1. `s` is a neighborhood of `a` within `(a, b]`
    2. `s` is a neighborhood of `a` within `(a, b)`
    3. `s` includes `(a, u)` for some `u ‚àà (a, b]`
    4. `s` includes `(a, u)` for some `u > a` -/
  theorem
    tfae_mem_nhds_within_Ioi
    { a b : Œ± } ( hab : a < b ) ( s : Set Œ± )
      :
        Tfae
          [
            s ‚àà ùìù[>] a
              ,
              s ‚àà ùìù[ ioc a b ] a
              ,
              s ‚àà ùìù[ ioo a b ] a
              ,
              ‚àÉ u ‚àà ioc a b , ioo a u ‚äÜ s
              ,
              ‚àÉ u ‚àà ioi a , ioo a u ‚äÜ s
            ]
    :=
      by
        tfae_have 1 ‚Üî 2
          ;
          ¬∑ rw [ nhds_within_Ioc_eq_nhds_within_Ioi hab ]
          tfae_have 1 ‚Üî 3
          ;
          ¬∑ rw [ nhds_within_Ioo_eq_nhds_within_Ioi hab ]
          tfae_have 4 ‚Üí 5
          ;
          exact fun ‚ü® u , umem , hu ‚ü© => ‚ü® u , umem . 1 , hu ‚ü©
          tfae_have 5 ‚Üí 1
          ¬∑
            rintro ‚ü® u , hau , hu ‚ü©
              exact mem_of_superset Ioo_mem_nhds_within_Ioi ‚ü® le_refl a , hau ‚ü© hu
          tfae_have 1 ‚Üí 4
          ¬∑
            intro h
              rcases mem_nhds_within_iff_exists_mem_nhds_inter . 1 h with ‚ü® v , va , hv ‚ü©
              rcases exists_Ico_subset_of_mem_nhds' va hab with ‚ü® u , au , hu ‚ü©
              refine' ‚ü® u , au , fun x hx => _ ‚ü©
              refine' hv ‚ü® hu ‚ü® le_of_lt hx . 1 , hx . 2 ‚ü© , _ ‚ü©
              exact hx . 1
          tfae_finish
#align tfae_mem_nhds_within_Ioi tfae_mem_nhds_within_Ioi

theorem mem_nhds_within_Ioi_iff_exists_mem_Ioc_Ioo_subset {a u' : Œ±} {s : Set Œ±} (hu' : a < u') :
    s ‚àà ùìù[>] a ‚Üî ‚àÉ u ‚àà ioc a u', ioo a u ‚äÜ s :=
  (tfae_mem_nhds_within_Ioi hu' s).out 0 3
#align
  mem_nhds_within_Ioi_iff_exists_mem_Ioc_Ioo_subset mem_nhds_within_Ioi_iff_exists_mem_Ioc_Ioo_subset

/-- A set is a neighborhood of `a` within `(a, +‚àû)` if and only if it contains an interval `(a, u)`
with `a < u < u'`, provided `a` is not a top element. -/
theorem mem_nhds_within_Ioi_iff_exists_Ioo_subset' {a u' : Œ±} {s : Set Œ±} (hu' : a < u') :
    s ‚àà ùìù[>] a ‚Üî ‚àÉ u ‚àà ioi a, ioo a u ‚äÜ s :=
  (tfae_mem_nhds_within_Ioi hu' s).out 0 4
#align mem_nhds_within_Ioi_iff_exists_Ioo_subset' mem_nhds_within_Ioi_iff_exists_Ioo_subset'

/-- A set is a neighborhood of `a` within `(a, +‚àû)` if and only if it contains an interval `(a, u)`
with `a < u`. -/
theorem mem_nhds_within_Ioi_iff_exists_Ioo_subset [NoMaxOrder Œ±] {a : Œ±} {s : Set Œ±} :
    s ‚àà ùìù[>] a ‚Üî ‚àÉ u ‚àà ioi a, ioo a u ‚äÜ s :=
  let ‚ü®u', hu'‚ü© := exists_gt a
  mem_nhds_within_Ioi_iff_exists_Ioo_subset' hu'
#align mem_nhds_within_Ioi_iff_exists_Ioo_subset mem_nhds_within_Ioi_iff_exists_Ioo_subset

/-- A set is a neighborhood of `a` within `(a, +‚àû)` if and only if it contains an interval `(a, u]`
with `a < u`. -/
theorem mem_nhds_within_Ioi_iff_exists_Ioc_subset [NoMaxOrder Œ±] [DenselyOrdered Œ±] {a : Œ±}
    {s : Set Œ±} : s ‚àà ùìù[>] a ‚Üî ‚àÉ u ‚àà ioi a, ioc a u ‚äÜ s := by
  rw [mem_nhds_within_Ioi_iff_exists_Ioo_subset]
  constructor
  ¬∑ rintro ‚ü®u, au, as‚ü©
    rcases exists_between au with ‚ü®v, hv‚ü©
    exact ‚ü®v, hv.1, fun x hx => as ‚ü®hx.1, lt_of_le_of_lt hx.2 hv.2‚ü©‚ü©
  ¬∑ rintro ‚ü®u, au, as‚ü©
    exact ‚ü®u, au, subset.trans Ioo_subset_Ioc_self as‚ü©
#align mem_nhds_within_Ioi_iff_exists_Ioc_subset mem_nhds_within_Ioi_iff_exists_Ioc_subset

/-- The following statements are equivalent:

0. `s` is a neighborhood of `b` within `(-‚àû, b)`
1. `s` is a neighborhood of `b` within `[a, b)`
2. `s` is a neighborhood of `b` within `(a, b)`
3. `s` includes `(l, b)` for some `l ‚àà [a, b)`
4. `s` includes `(l, b)` for some `l < b` -/
theorem tfae_mem_nhds_within_Iio {a b : Œ±} (h : a < b) (s : Set Œ±) :
    Tfae
      [s ‚àà ùìù[<] b,-- 0 : `s` is a neighborhood of `b` within `(-‚àû, b)`
          s ‚àà
          ùìù[ico a b] b,-- 1 : `s` is a neighborhood of `b` within `[a, b)`
          s ‚àà
          ùìù[ioo a b] b,-- 2 : `s` is a neighborhood of `b` within `(a, b)`
        ‚àÉ l ‚àà ico a b, ioo l b ‚äÜ s,-- 3 : `s` includes `(l, b)` for some `l ‚àà [a, b)`
        ‚àÉ l ‚àà iio b, ioo l b ‚äÜ s] :=
  by-- 4 : `s` includes `(l, b)` for some `l < b`
  simpa only [exists_prop, OrderDual.exists, dual_Ioi, dual_Ioc, dual_Ioo] using
    tfae_mem_nhds_within_Ioi h.dual (of_dual ‚Åª¬π' s)
#align tfae_mem_nhds_within_Iio tfae_mem_nhds_within_Iio

theorem mem_nhds_within_Iio_iff_exists_mem_Ico_Ioo_subset {a l' : Œ±} {s : Set Œ±} (hl' : l' < a) :
    s ‚àà ùìù[<] a ‚Üî ‚àÉ l ‚àà ico l' a, ioo l a ‚äÜ s :=
  (tfae_mem_nhds_within_Iio hl' s).out 0 3
#align
  mem_nhds_within_Iio_iff_exists_mem_Ico_Ioo_subset mem_nhds_within_Iio_iff_exists_mem_Ico_Ioo_subset

/-- A set is a neighborhood of `a` within `(-‚àû, a)` if and only if it contains an interval `(l, a)`
with `l < a`, provided `a` is not a bottom element. -/
theorem mem_nhds_within_Iio_iff_exists_Ioo_subset' {a l' : Œ±} {s : Set Œ±} (hl' : l' < a) :
    s ‚àà ùìù[<] a ‚Üî ‚àÉ l ‚àà iio a, ioo l a ‚äÜ s :=
  (tfae_mem_nhds_within_Iio hl' s).out 0 4
#align mem_nhds_within_Iio_iff_exists_Ioo_subset' mem_nhds_within_Iio_iff_exists_Ioo_subset'

/-- A set is a neighborhood of `a` within `(-‚àû, a)` if and only if it contains an interval `(l, a)`
with `l < a`. -/
theorem mem_nhds_within_Iio_iff_exists_Ioo_subset [NoMinOrder Œ±] {a : Œ±} {s : Set Œ±} :
    s ‚àà ùìù[<] a ‚Üî ‚àÉ l ‚àà iio a, ioo l a ‚äÜ s :=
  let ‚ü®l', hl'‚ü© := exists_lt a
  mem_nhds_within_Iio_iff_exists_Ioo_subset' hl'
#align mem_nhds_within_Iio_iff_exists_Ioo_subset mem_nhds_within_Iio_iff_exists_Ioo_subset

/-- A set is a neighborhood of `a` within `(-‚àû, a)` if and only if it contains an interval `[l, a)`
with `l < a`. -/
theorem mem_nhds_within_Iio_iff_exists_Ico_subset [NoMinOrder Œ±] [DenselyOrdered Œ±] {a : Œ±}
    {s : Set Œ±} : s ‚àà ùìù[<] a ‚Üî ‚àÉ l ‚àà iio a, ico l a ‚äÜ s := by
  have : of_dual ‚Åª¬π' s ‚àà ùìù[>] to_dual a ‚Üî _ := mem_nhds_within_Ioi_iff_exists_Ioc_subset
  simpa only [OrderDual.exists, exists_prop, dual_Ioc] using this
#align mem_nhds_within_Iio_iff_exists_Ico_subset mem_nhds_within_Iio_iff_exists_Ico_subset

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "The following statements are equivalent:\n\n0. `s` is a neighborhood of `a` within `[a, +‚àû)`\n1. `s` is a neighborhood of `a` within `[a, b]`\n2. `s` is a neighborhood of `a` within `[a, b)`\n3. `s` includes `[a, u)` for some `u ‚àà (a, b]`\n4. `s` includes `[a, u)` for some `u > a` -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `tfae_mem_nhds_within_Ici [])
      (Command.declSig
       [(Term.implicitBinder "{" [`a `b] [":" `Œ±] "}")
        (Term.explicitBinder "(" [`hab] [":" (¬´term_<_¬ª `a "<" `b)] [] ")")
        (Term.explicitBinder "(" [`s] [":" (Term.app `Set [`Œ±])] [] ")")]
       (Term.typeSpec
        ":"
        (Term.app
         `Tfae
         [(¬´term[_]¬ª
           "["
           [(¬´term_‚àà_¬ª `s "‚àà" (TopologicalSpace.Topology.Basic.nhds_within.ge "ùìù[‚â•] " `a))
            ","
            (¬´term_‚àà_¬ª
             `s
             "‚àà"
             (TopologicalSpace.Topology.Basic.nhds_within "ùìù[" (Term.app `icc [`a `b]) "] " `a))
            ","
            (¬´term_‚àà_¬ª
             `s
             "‚àà"
             (TopologicalSpace.Topology.Basic.nhds_within "ùìù[" (Term.app `ico [`a `b]) "] " `a))
            ","
            (Std.ExtendedBinder.¬´term‚àÉ__,_¬ª
             "‚àÉ"
             (Lean.binderIdent `u)
             (¬´binderTerm‚àà_¬ª "‚àà" (Term.app `ioc [`a `b]))
             ","
             (¬´term_‚äÜ_¬ª (Term.app `ico [`a `u]) "‚äÜ" `s))
            ","
            (Std.ExtendedBinder.¬´term‚àÉ__,_¬ª
             "‚àÉ"
             (Lean.binderIdent `u)
             (¬´binderTerm‚àà_¬ª "‚àà" (Term.app `ioi [`a]))
             ","
             (¬´term_‚äÜ_¬ª (Term.app `ico [`a `u]) "‚äÜ" `s))]
           "]")])))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.tfaeHave "tfae_have" [] (num "1") "‚Üî" (num "2"))
           ";"
           (tactic___
            (cdotTk (patternIgnore (token.¬´¬∑¬ª "¬∑")))
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] (Term.app `nhds_within_Icc_eq_nhds_within_Ici [`hab]))]
               "]")
              [])])
           []
           (Tactic.tfaeHave "tfae_have" [] (num "1") "‚Üî" (num "3"))
           ";"
           (tactic___
            (cdotTk (patternIgnore (token.¬´¬∑¬ª "¬∑")))
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] (Term.app `nhds_within_Ico_eq_nhds_within_Ici [`hab]))]
               "]")
              [])])
           []
           (Tactic.tfaeHave "tfae_have" [] (num "1") "‚Üî" (num "5"))
           ";"
           (Tactic.exact
            "exact"
            (Term.proj
             (Term.app `nhds_within_Ici_basis' [(Term.anonymousCtor "‚ü®" [`b "," `hab] "‚ü©")])
             "."
             `mem_iff))
           []
           (Tactic.tfaeHave "tfae_have" [] (num "4") "‚Üí" (num "5"))
           ";"
           (Tactic.exact
            "exact"
            (Term.fun
             "fun"
             (Term.basicFun
              [(Term.anonymousCtor "‚ü®" [`u "," `umem "," `hu] "‚ü©")]
              []
              "=>"
              (Term.anonymousCtor "‚ü®" [`u "," (Term.proj `umem "." (fieldIdx "1")) "," `hu] "‚ü©"))))
           []
           (Tactic.tfaeHave "tfae_have" [] (num "5") "‚Üí" (num "4"))
           []
           (tactic___
            (cdotTk (patternIgnore (token.¬´¬∑¬ª "¬∑")))
            [(Std.Tactic.rintro
              "rintro"
              [(Std.Tactic.RCases.rintroPat.one
                (Std.Tactic.RCases.rcasesPat.tuple
                 "‚ü®"
                 [(Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `u)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hua)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hus)])
                   [])]
                 "‚ü©"))]
              [])
             []
             (Tactic.exact
              "exact"
              (Term.anonymousCtor
               "‚ü®"
               [(Term.app `min [`u `b])
                ","
                (Term.anonymousCtor
                 "‚ü®"
                 [(Term.app `lt_min [`hua `hab])
                  ","
                  (Term.app `min_le_right [(Term.hole "_") (Term.hole "_")])]
                 "‚ü©")
                ","
                (Term.app
                 (Term.proj
                  (¬´term_<|_¬ª
                   `Ico_subset_Ico_right
                   "<|"
                   (Term.app `min_le_left [(Term.hole "_") (Term.hole "_")]))
                  "."
                  `trans)
                 [`hus])]
               "‚ü©"))])
           []
           (Tactic.tfaeFinish "tfae_finish")])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.tfaeHave "tfae_have" [] (num "1") "‚Üî" (num "2"))
          ";"
          (tactic___
           (cdotTk (patternIgnore (token.¬´¬∑¬ª "¬∑")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] (Term.app `nhds_within_Icc_eq_nhds_within_Ici [`hab]))]
              "]")
             [])])
          []
          (Tactic.tfaeHave "tfae_have" [] (num "1") "‚Üî" (num "3"))
          ";"
          (tactic___
           (cdotTk (patternIgnore (token.¬´¬∑¬ª "¬∑")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] (Term.app `nhds_within_Ico_eq_nhds_within_Ici [`hab]))]
              "]")
             [])])
          []
          (Tactic.tfaeHave "tfae_have" [] (num "1") "‚Üî" (num "5"))
          ";"
          (Tactic.exact
           "exact"
           (Term.proj
            (Term.app `nhds_within_Ici_basis' [(Term.anonymousCtor "‚ü®" [`b "," `hab] "‚ü©")])
            "."
            `mem_iff))
          []
          (Tactic.tfaeHave "tfae_have" [] (num "4") "‚Üí" (num "5"))
          ";"
          (Tactic.exact
           "exact"
           (Term.fun
            "fun"
            (Term.basicFun
             [(Term.anonymousCtor "‚ü®" [`u "," `umem "," `hu] "‚ü©")]
             []
             "=>"
             (Term.anonymousCtor "‚ü®" [`u "," (Term.proj `umem "." (fieldIdx "1")) "," `hu] "‚ü©"))))
          []
          (Tactic.tfaeHave "tfae_have" [] (num "5") "‚Üí" (num "4"))
          []
          (tactic___
           (cdotTk (patternIgnore (token.¬´¬∑¬ª "¬∑")))
           [(Std.Tactic.rintro
             "rintro"
             [(Std.Tactic.RCases.rintroPat.one
               (Std.Tactic.RCases.rcasesPat.tuple
                "‚ü®"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `u)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hua)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hus)])
                  [])]
                "‚ü©"))]
             [])
            []
            (Tactic.exact
             "exact"
             (Term.anonymousCtor
              "‚ü®"
              [(Term.app `min [`u `b])
               ","
               (Term.anonymousCtor
                "‚ü®"
                [(Term.app `lt_min [`hua `hab])
                 ","
                 (Term.app `min_le_right [(Term.hole "_") (Term.hole "_")])]
                "‚ü©")
               ","
               (Term.app
                (Term.proj
                 (¬´term_<|_¬ª
                  `Ico_subset_Ico_right
                  "<|"
                  (Term.app `min_le_left [(Term.hole "_") (Term.hole "_")]))
                 "."
                 `trans)
                [`hus])]
              "‚ü©"))])
          []
          (Tactic.tfaeFinish "tfae_finish")])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tfaeFinish "tfae_finish")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic___
       (cdotTk (patternIgnore (token.¬´¬∑¬ª "¬∑")))
       [(Std.Tactic.rintro
         "rintro"
         [(Std.Tactic.RCases.rintroPat.one
           (Std.Tactic.RCases.rcasesPat.tuple
            "‚ü®"
            [(Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `u)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hua)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hus)])
              [])]
            "‚ü©"))]
         [])
        []
        (Tactic.exact
         "exact"
         (Term.anonymousCtor
          "‚ü®"
          [(Term.app `min [`u `b])
           ","
           (Term.anonymousCtor
            "‚ü®"
            [(Term.app `lt_min [`hua `hab])
             ","
             (Term.app `min_le_right [(Term.hole "_") (Term.hole "_")])]
            "‚ü©")
           ","
           (Term.app
            (Term.proj
             (¬´term_<|_¬ª
              `Ico_subset_Ico_right
              "<|"
              (Term.app `min_le_left [(Term.hole "_") (Term.hole "_")]))
             "."
             `trans)
            [`hus])]
          "‚ü©"))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.anonymousCtor
        "‚ü®"
        [(Term.app `min [`u `b])
         ","
         (Term.anonymousCtor
          "‚ü®"
          [(Term.app `lt_min [`hua `hab])
           ","
           (Term.app `min_le_right [(Term.hole "_") (Term.hole "_")])]
          "‚ü©")
         ","
         (Term.app
          (Term.proj
           (¬´term_<|_¬ª
            `Ico_subset_Ico_right
            "<|"
            (Term.app `min_le_left [(Term.hole "_") (Term.hole "_")]))
           "."
           `trans)
          [`hus])]
        "‚ü©"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "‚ü®"
       [(Term.app `min [`u `b])
        ","
        (Term.anonymousCtor
         "‚ü®"
         [(Term.app `lt_min [`hua `hab])
          ","
          (Term.app `min_le_right [(Term.hole "_") (Term.hole "_")])]
         "‚ü©")
        ","
        (Term.app
         (Term.proj
          (¬´term_<|_¬ª
           `Ico_subset_Ico_right
           "<|"
           (Term.app `min_le_left [(Term.hole "_") (Term.hole "_")]))
          "."
          `trans)
         [`hus])]
       "‚ü©")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj
        (¬´term_<|_¬ª
         `Ico_subset_Ico_right
         "<|"
         (Term.app `min_le_left [(Term.hole "_") (Term.hole "_")]))
        "."
        `trans)
       [`hus])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hus
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       (¬´term_<|_¬ª
        `Ico_subset_Ico_right
        "<|"
        (Term.app `min_le_left [(Term.hole "_") (Term.hole "_")]))
       "."
       `trans)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (¬´term_<|_¬ª
       `Ico_subset_Ico_right
       "<|"
       (Term.app `min_le_left [(Term.hole "_") (Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `min_le_left [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `min_le_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      `Ico_subset_Ico_right
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (¬´term_<|_¬ª
      `Ico_subset_Ico_right
      "<|"
      (Term.app `min_le_left [(Term.hole "_") (Term.hole "_")]))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "‚ü®"
       [(Term.app `lt_min [`hua `hab])
        ","
        (Term.app `min_le_right [(Term.hole "_") (Term.hole "_")])]
       "‚ü©")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `min_le_right [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `min_le_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `lt_min [`hua `hab])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hab
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hua
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `lt_min
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `min [`u `b])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `min
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rintro
       "rintro"
       [(Std.Tactic.RCases.rintroPat.one
         (Std.Tactic.RCases.rcasesPat.tuple
          "‚ü®"
          [(Std.Tactic.RCases.rcasesPatLo
            (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `u)])
            [])
           ","
           (Std.Tactic.RCases.rcasesPatLo
            (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hua)])
            [])
           ","
           (Std.Tactic.RCases.rcasesPatLo
            (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hus)])
            [])]
          "‚ü©"))]
       [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tfaeHave "tfae_have" [] (num "5") "‚Üí" (num "4"))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´‚Üí¬ª', expected 'token.¬´ ‚Üí ¬ª'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´‚Üí¬ª', expected 'token.¬´ ‚Üî ¬ª'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´‚Üí¬ª', expected 'token.¬´ ‚Üê ¬ª'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    The following statements are equivalent:
    
    0. `s` is a neighborhood of `a` within `[a, +‚àû)`
    1. `s` is a neighborhood of `a` within `[a, b]`
    2. `s` is a neighborhood of `a` within `[a, b)`
    3. `s` includes `[a, u)` for some `u ‚àà (a, b]`
    4. `s` includes `[a, u)` for some `u > a` -/
  theorem
    tfae_mem_nhds_within_Ici
    { a b : Œ± } ( hab : a < b ) ( s : Set Œ± )
      :
        Tfae
          [
            s ‚àà ùìù[‚â•] a
              ,
              s ‚àà ùìù[ icc a b ] a
              ,
              s ‚àà ùìù[ ico a b ] a
              ,
              ‚àÉ u ‚àà ioc a b , ico a u ‚äÜ s
              ,
              ‚àÉ u ‚àà ioi a , ico a u ‚äÜ s
            ]
    :=
      by
        tfae_have 1 ‚Üî 2
          ;
          ¬∑ rw [ nhds_within_Icc_eq_nhds_within_Ici hab ]
          tfae_have 1 ‚Üî 3
          ;
          ¬∑ rw [ nhds_within_Ico_eq_nhds_within_Ici hab ]
          tfae_have 1 ‚Üî 5
          ;
          exact nhds_within_Ici_basis' ‚ü® b , hab ‚ü© . mem_iff
          tfae_have 4 ‚Üí 5
          ;
          exact fun ‚ü® u , umem , hu ‚ü© => ‚ü® u , umem . 1 , hu ‚ü©
          tfae_have 5 ‚Üí 4
          ¬∑
            rintro ‚ü® u , hua , hus ‚ü©
              exact
                ‚ü®
                  min u b
                    ,
                    ‚ü® lt_min hua hab , min_le_right _ _ ‚ü©
                    ,
                    Ico_subset_Ico_right <| min_le_left _ _ . trans hus
                  ‚ü©
          tfae_finish
#align tfae_mem_nhds_within_Ici tfae_mem_nhds_within_Ici

theorem mem_nhds_within_Ici_iff_exists_mem_Ioc_Ico_subset {a u' : Œ±} {s : Set Œ±} (hu' : a < u') :
    s ‚àà ùìù[‚â•] a ‚Üî ‚àÉ u ‚àà ioc a u', ico a u ‚äÜ s :=
  (tfae_mem_nhds_within_Ici hu' s).out 0 3 (by norm_num) (by norm_num)
#align
  mem_nhds_within_Ici_iff_exists_mem_Ioc_Ico_subset mem_nhds_within_Ici_iff_exists_mem_Ioc_Ico_subset

/-- A set is a neighborhood of `a` within `[a, +‚àû)` if and only if it contains an interval `[a, u)`
with `a < u < u'`, provided `a` is not a top element. -/
theorem mem_nhds_within_Ici_iff_exists_Ico_subset' {a u' : Œ±} {s : Set Œ±} (hu' : a < u') :
    s ‚àà ùìù[‚â•] a ‚Üî ‚àÉ u ‚àà ioi a, ico a u ‚äÜ s :=
  (tfae_mem_nhds_within_Ici hu' s).out 0 4 (by norm_num) (by norm_num)
#align mem_nhds_within_Ici_iff_exists_Ico_subset' mem_nhds_within_Ici_iff_exists_Ico_subset'

/-- A set is a neighborhood of `a` within `[a, +‚àû)` if and only if it contains an interval `[a, u)`
with `a < u`. -/
theorem mem_nhds_within_Ici_iff_exists_Ico_subset [NoMaxOrder Œ±] {a : Œ±} {s : Set Œ±} :
    s ‚àà ùìù[‚â•] a ‚Üî ‚àÉ u ‚àà ioi a, ico a u ‚äÜ s :=
  let ‚ü®u', hu'‚ü© := exists_gt a
  mem_nhds_within_Ici_iff_exists_Ico_subset' hu'
#align mem_nhds_within_Ici_iff_exists_Ico_subset mem_nhds_within_Ici_iff_exists_Ico_subset

theorem nhds_within_Ici_basis_Ico [NoMaxOrder Œ±] (a : Œ±) :
    (ùìù[‚â•] a).HasBasis (fun u => a < u) (ico a) :=
  ‚ü®fun s => mem_nhds_within_Ici_iff_exists_Ico_subset‚ü©
#align nhds_within_Ici_basis_Ico nhds_within_Ici_basis_Ico

/-- A set is a neighborhood of `a` within `[a, +‚àû)` if and only if it contains an interval `[a, u]`
with `a < u`. -/
theorem mem_nhds_within_Ici_iff_exists_Icc_subset [NoMaxOrder Œ±] [DenselyOrdered Œ±] {a : Œ±}
    {s : Set Œ±} : s ‚àà ùìù[‚â•] a ‚Üî ‚àÉ u, a < u ‚àß icc a u ‚äÜ s := by
  rw [mem_nhds_within_Ici_iff_exists_Ico_subset]
  constructor
  ¬∑ rintro ‚ü®u, au, as‚ü©
    rcases exists_between au with ‚ü®v, hv‚ü©
    exact ‚ü®v, hv.1, fun x hx => as ‚ü®hx.1, lt_of_le_of_lt hx.2 hv.2‚ü©‚ü©
  ¬∑ rintro ‚ü®u, au, as‚ü©
    exact ‚ü®u, au, subset.trans Ico_subset_Icc_self as‚ü©
#align mem_nhds_within_Ici_iff_exists_Icc_subset mem_nhds_within_Ici_iff_exists_Icc_subset

/-- The following statements are equivalent:

0. `s` is a neighborhood of `b` within `(-‚àû, b]`
1. `s` is a neighborhood of `b` within `[a, b]`
2. `s` is a neighborhood of `b` within `(a, b]`
3. `s` includes `(l, b]` for some `l ‚àà [a, b)`
4. `s` includes `(l, b]` for some `l < b` -/
theorem tfae_mem_nhds_within_Iic {a b : Œ±} (h : a < b) (s : Set Œ±) :
    Tfae
      [s ‚àà ùìù[‚â§] b,-- 0 : `s` is a neighborhood of `b` within `(-‚àû, b]`
          s ‚àà
          ùìù[icc a b] b,-- 1 : `s` is a neighborhood of `b` within `[a, b]`
          s ‚àà
          ùìù[ioc a b] b,-- 2 : `s` is a neighborhood of `b` within `(a, b]`
        ‚àÉ l ‚àà ico a b, ioc l b ‚äÜ s,-- 3 : `s` includes `(l, b]` for some `l ‚àà [a, b)`
        ‚àÉ l ‚àà iio b, ioc l b ‚äÜ s] :=
  by-- 4 : `s` includes `(l, b]` for some `l < b`
  simpa only [exists_prop, OrderDual.exists, dual_Ici, dual_Ioc, dual_Icc, dual_Ico] using
    tfae_mem_nhds_within_Ici h.dual (of_dual ‚Åª¬π' s)
#align tfae_mem_nhds_within_Iic tfae_mem_nhds_within_Iic

theorem mem_nhds_within_Iic_iff_exists_mem_Ico_Ioc_subset {a l' : Œ±} {s : Set Œ±} (hl' : l' < a) :
    s ‚àà ùìù[‚â§] a ‚Üî ‚àÉ l ‚àà ico l' a, ioc l a ‚äÜ s :=
  (tfae_mem_nhds_within_Iic hl' s).out 0 3 (by norm_num) (by norm_num)
#align
  mem_nhds_within_Iic_iff_exists_mem_Ico_Ioc_subset mem_nhds_within_Iic_iff_exists_mem_Ico_Ioc_subset

/-- A set is a neighborhood of `a` within `(-‚àû, a]` if and only if it contains an interval `(l, a]`
with `l < a`, provided `a` is not a bottom element. -/
theorem mem_nhds_within_Iic_iff_exists_Ioc_subset' {a l' : Œ±} {s : Set Œ±} (hl' : l' < a) :
    s ‚àà ùìù[‚â§] a ‚Üî ‚àÉ l ‚àà iio a, ioc l a ‚äÜ s :=
  (tfae_mem_nhds_within_Iic hl' s).out 0 4 (by norm_num) (by norm_num)
#align mem_nhds_within_Iic_iff_exists_Ioc_subset' mem_nhds_within_Iic_iff_exists_Ioc_subset'

/-- A set is a neighborhood of `a` within `(-‚àû, a]` if and only if it contains an interval `(l, a]`
with `l < a`. -/
theorem mem_nhds_within_Iic_iff_exists_Ioc_subset [NoMinOrder Œ±] {a : Œ±} {s : Set Œ±} :
    s ‚àà ùìù[‚â§] a ‚Üî ‚àÉ l ‚àà iio a, ioc l a ‚äÜ s :=
  let ‚ü®l', hl'‚ü© := exists_lt a
  mem_nhds_within_Iic_iff_exists_Ioc_subset' hl'
#align mem_nhds_within_Iic_iff_exists_Ioc_subset mem_nhds_within_Iic_iff_exists_Ioc_subset

/-- A set is a neighborhood of `a` within `(-‚àû, a]` if and only if it contains an interval `[l, a]`
with `l < a`. -/
theorem mem_nhds_within_Iic_iff_exists_Icc_subset [NoMinOrder Œ±] [DenselyOrdered Œ±] {a : Œ±}
    {s : Set Œ±} : s ‚àà ùìù[‚â§] a ‚Üî ‚àÉ l, l < a ‚àß icc l a ‚äÜ s := by
  convert @mem_nhds_within_Ici_iff_exists_Icc_subset Œ±·µí·µà _ _ _ _ _ _ _
  simp_rw [show ‚àÄ u : Œ±·µí·µà, @Icc Œ±·µí·µà _ a u = @Icc Œ± _ u a from fun u => dual_Icc]
  rfl
#align mem_nhds_within_Iic_iff_exists_Icc_subset mem_nhds_within_Iic_iff_exists_Icc_subset

end OrderTopology

end LinearOrder

section LinearOrderedAddCommGroup

variable [TopologicalSpace Œ±] [LinearOrderedAddCommGroup Œ±] [OrderTopology Œ±]

variable {l : Filter Œ≤} {f g : Œ≤ ‚Üí Œ±}

theorem nhds_eq_infi_abs_sub (a : Œ±) : ùìù a = ‚®Ö r > 0, ùìü { b | |a - b| < r } := by
  simp only [le_antisymm_iff, nhds_eq_order, le_inf_iff, le_infi_iff, le_principal_iff, mem_Ioi,
    mem_Iio, abs_sub_lt_iff, @sub_lt_iff_lt_add _ _ _ _ _ _ a, @sub_lt_comm _ _ _ _ a, set_of_and]
  refine' ‚ü®_, _, _‚ü©
  ¬∑ intro Œµ Œµ0
    exact
      inter_mem_inf
        (mem_infi_of_mem (a - Œµ) <| mem_infi_of_mem (sub_lt_self a Œµ0) (mem_principal_self _))
        (mem_infi_of_mem (Œµ + a) <| mem_infi_of_mem (by simpa) (mem_principal_self _))
  ¬∑ intro b hb
    exact mem_infi_of_mem (a - b) (mem_infi_of_mem (sub_pos.2 hb) (by simp [Ioi]))
  ¬∑ intro b hb
    exact mem_infi_of_mem (b - a) (mem_infi_of_mem (sub_pos.2 hb) (by simp [Iio]))
#align nhds_eq_infi_abs_sub nhds_eq_infi_abs_sub

theorem order_topology_of_nhds_abs {Œ± : Type _} [TopologicalSpace Œ±] [LinearOrderedAddCommGroup Œ±]
    (h_nhds : ‚àÄ a : Œ±, ùìù a = ‚®Ö r > 0, ùìü { b | |a - b| < r }) : OrderTopology Œ± := by
  refine' ‚ü®eq_of_nhds_eq_nhds fun a => _‚ü©
  rw [h_nhds]
  letI := Preorder.topology Œ±; letI : OrderTopology Œ± := ‚ü®rfl‚ü©
  exact (nhds_eq_infi_abs_sub a).symm
#align order_topology_of_nhds_abs order_topology_of_nhds_abs

theorem LinearOrderedAddCommGroup.tendsto_nhds {x : Filter Œ≤} {a : Œ±} :
    Tendsto f x (ùìù a) ‚Üî ‚àÄ Œµ > (0 : Œ±), ‚àÄ·∂† b in x, |f b - a| < Œµ := by
  simp [nhds_eq_infi_abs_sub, abs_sub_comm a]
#align linear_ordered_add_comm_group.tendsto_nhds LinearOrderedAddCommGroup.tendsto_nhds

theorem eventually_abs_sub_lt (a : Œ±) {Œµ : Œ±} (hŒµ : 0 < Œµ) : ‚àÄ·∂† x in ùìù a, |x - a| < Œµ :=
  (nhds_eq_infi_abs_sub a).symm ‚ñ∏
    mem_infi_of_mem Œµ (mem_infi_of_mem hŒµ <| by simp only [abs_sub_comm, mem_principal_self])
#align eventually_abs_sub_lt eventually_abs_sub_lt

-- see Note [lower instance priority]
instance (priority := 100) LinearOrderedAddCommGroup.topological_add_group :
    TopologicalAddGroup
      Œ± where 
  continuous_add := by 
    refine' continuous_iff_continuous_at.2 _
    rintro ‚ü®a, b‚ü©
    refine' LinearOrderedAddCommGroup.tendsto_nhds.2 fun Œµ Œµ0 => _
    rcases dense_or_discrete 0 Œµ with (‚ü®Œ¥, Œ¥0, Œ¥Œµ‚ü© | ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©)
    ¬∑ -- If there exists `Œ¥ ‚àà (0, Œµ)`, then we choose `Œ¥`-nhd of `a` and `(Œµ-Œ¥)`-nhd of `b`
      filter_upwards [(eventually_abs_sub_lt a Œ¥0).prod_nhds
          (eventually_abs_sub_lt b (sub_pos.2 Œ¥Œµ))]
      rintro ‚ü®x, y‚ü© ‚ü®hx : |x - a| < Œ¥, hy : |y - b| < Œµ - Œ¥‚ü©
      rw [add_sub_add_comm]
      calc
        |x - a + (y - b)| ‚â§ |x - a| + |y - b| := abs_add _ _
        _ < Œ¥ + (Œµ - Œ¥) := add_lt_add hx hy
        _ = Œµ := add_sub_cancel'_right _ _
        
    ¬∑ -- Otherwise `Œµ`-nhd of each point `a` is `{a}`
      have hŒµ : ‚àÄ {x y}, |x - y| < Œµ ‚Üí x = y := by
        intro x y h
        simpa [sub_eq_zero] using h‚ÇÇ _ h
      filter_upwards [(eventually_abs_sub_lt a Œµ0).prod_nhds (eventually_abs_sub_lt b Œµ0)]
      rintro ‚ü®x, y‚ü© ‚ü®hx : |x - a| < Œµ, hy : |y - b| < Œµ‚ü©
      simpa [hŒµ hx, hŒµ hy]
  continuous_neg :=
    continuous_iff_continuous_at.2 fun a =>
      LinearOrderedAddCommGroup.tendsto_nhds.2 fun Œµ Œµ0 =>
        (eventually_abs_sub_lt a Œµ0).mono fun x hx => by rwa [neg_sub_neg, abs_sub_comm]
#align
  linear_ordered_add_comm_group.topological_add_group LinearOrderedAddCommGroup.topological_add_group

@[continuity]
theorem continuous_abs : Continuous (abs : Œ± ‚Üí Œ±) :=
  continuous_id.max continuous_neg
#align continuous_abs continuous_abs

theorem Filter.Tendsto.abs {f : Œ≤ ‚Üí Œ±} {a : Œ±} {l : Filter Œ≤} (h : Tendsto f l (ùìù a)) :
    Tendsto (fun x => |f x|) l (ùìù (|a|)) :=
  (continuous_abs.Tendsto _).comp h
#align filter.tendsto.abs Filter.Tendsto.abs

theorem tendsto_zero_iff_abs_tendsto_zero (f : Œ≤ ‚Üí Œ±) {l : Filter Œ≤} :
    Tendsto f l (ùìù 0) ‚Üî Tendsto (abs ‚àò f) l (ùìù 0) := by
  refine' ‚ü®fun h => (abs_zero : |(0 : Œ±)| = 0) ‚ñ∏ h.abs, fun h => _‚ü©
  have : tendsto (fun a => -|f a|) l (ùìù 0) := (neg_zero : -(0 : Œ±) = 0) ‚ñ∏ h.neg
  exact
    tendsto_of_tendsto_of_tendsto_of_le_of_le this h (fun x => neg_abs_le_self <| f x) fun x =>
      le_abs_self <| f x
#align tendsto_zero_iff_abs_tendsto_zero tendsto_zero_iff_abs_tendsto_zero

theorem nhds_basis_Ioo_pos [NoMinOrder Œ±] [NoMaxOrder Œ±] (a : Œ±) :
    (ùìù a).HasBasis (fun Œµ : Œ± => (0 : Œ±) < Œµ) fun Œµ => ioo (a - Œµ) (a + Œµ) :=
  ‚ü®by 
    refine' fun t => (nhds_basis_Ioo a).mem_iff.trans ‚ü®_, _‚ü©
    ¬∑ rintro ‚ü®‚ü®l, u‚ü©, ‚ü®hl : l < a, hu : a < u‚ü©, h' : Ioo l u ‚äÜ t‚ü©
      refine' ‚ü®min (a - l) (u - a), by apply lt_min <;> rwa [sub_pos], _‚ü©
      rintro x ‚ü®hx, hx'‚ü©
      apply h'
      rw [sub_lt_comm, lt_min_iff, sub_lt_sub_iff_left] at hx
      rw [‚Üê sub_lt_iff_lt_add', lt_min_iff, sub_lt_sub_iff_right] at hx'
      exact ‚ü®hx.1, hx'.2‚ü©
    ¬∑ rintro ‚ü®Œµ, Œµ_pos, h‚ü©
      exact ‚ü®(a - Œµ, a + Œµ), by simp [Œµ_pos], h‚ü©‚ü©
#align nhds_basis_Ioo_pos nhds_basis_Ioo_pos

theorem nhds_basis_abs_sub_lt [NoMinOrder Œ±] [NoMaxOrder Œ±] (a : Œ±) :
    (ùìù a).HasBasis (fun Œµ : Œ± => (0 : Œ±) < Œµ) fun Œµ => { b | |b - a| < Œµ } := by
  convert nhds_basis_Ioo_pos a
  ¬∑ ext Œµ
    change |x - a| < Œµ ‚Üî a - Œµ < x ‚àß x < a + Œµ
    simp [abs_lt, sub_lt_iff_lt_add, add_comm Œµ a, add_comm x Œµ]
#align nhds_basis_abs_sub_lt nhds_basis_abs_sub_lt

variable (Œ±)

theorem nhds_basis_zero_abs_sub_lt [NoMinOrder Œ±] [NoMaxOrder Œ±] :
    (ùìù (0 : Œ±)).HasBasis (fun Œµ : Œ± => (0 : Œ±) < Œµ) fun Œµ => { b | |b| < Œµ } := by
  simpa using nhds_basis_abs_sub_lt (0 : Œ±)
#align nhds_basis_zero_abs_sub_lt nhds_basis_zero_abs_sub_lt

variable {Œ±}

/-- If `a` is positive we can form a basis from only nonnegative `Ioo` intervals -/
theorem nhds_basis_Ioo_pos_of_pos [NoMinOrder Œ±] [NoMaxOrder Œ±] {a : Œ±} (ha : 0 < a) :
    (ùìù a).HasBasis (fun Œµ : Œ± => (0 : Œ±) < Œµ ‚àß Œµ ‚â§ a) fun Œµ => ioo (a - Œµ) (a + Œµ) :=
  ‚ü®fun t =>
    (nhds_basis_Ioo_pos a).mem_iff.trans
      ‚ü®fun h =>
        let ‚ü®i, hi, hit‚ü© := h
        ‚ü®min i a, ‚ü®lt_min hi ha, min_le_right i a‚ü©,
          trans
            (Ioo_subset_Ioo (sub_le_sub_left (min_le_left i a) a)
              (add_le_add_left (min_le_left i a) a))
            hit‚ü©,
        fun h =>
        let ‚ü®i, hi, hit‚ü© := h
        ‚ü®i, hi.1, hit‚ü©‚ü©‚ü©
#align nhds_basis_Ioo_pos_of_pos nhds_basis_Ioo_pos_of_pos

section

variable [TopologicalSpace Œ≤] {b : Œ≤} {a : Œ±} {s : Set Œ≤}

theorem Continuous.abs (h : Continuous f) : Continuous fun x => |f x| :=
  continuous_abs.comp h
#align continuous.abs Continuous.abs

theorem ContinuousAt.abs (h : ContinuousAt f b) : ContinuousAt (fun x => |f x|) b :=
  h.abs
#align continuous_at.abs ContinuousAt.abs

theorem ContinuousWithinAt.abs (h : ContinuousWithinAt f s b) :
    ContinuousWithinAt (fun x => |f x|) s b :=
  h.abs
#align continuous_within_at.abs ContinuousWithinAt.abs

theorem ContinuousOn.abs (h : ContinuousOn f s) : ContinuousOn (fun x => |f x|) s := fun x hx =>
  (h x hx).abs
#align continuous_on.abs ContinuousOn.abs

theorem tendsto_abs_nhds_within_zero : Tendsto (abs : Œ± ‚Üí Œ±) (ùìù[‚â†] 0) (ùìù[>] 0) :=
  (continuous_abs.tendsto' (0 : Œ±) 0 abs_zero).inf <|
    tendsto_principal_principal.2 fun x => abs_pos.2
#align tendsto_abs_nhds_within_zero tendsto_abs_nhds_within_zero

end

/-- In a linearly ordered additive commutative group with the order topology, if `f` tends to `C`
and `g` tends to `at_top` then `f + g` tends to `at_top`. -/
theorem Filter.Tendsto.add_at_top {C : Œ±} (hf : Tendsto f l (ùìù C)) (hg : Tendsto g l atTop) :
    Tendsto (fun x => f x + g x) l atTop := by
  nontriviality Œ±
  obtain ‚ü®C', hC'‚ü© : ‚àÉ C', C' < C := exists_lt C
  refine' tendsto_at_top_add_left_of_le' _ C' _ hg
  exact (hf.eventually (lt_mem_nhds hC')).mono fun x => le_of_lt
#align filter.tendsto.add_at_top Filter.Tendsto.add_at_top

/-- In a linearly ordered additive commutative group with the order topology, if `f` tends to `C`
and `g` tends to `at_bot` then `f + g` tends to `at_bot`. -/
theorem Filter.Tendsto.add_at_bot {C : Œ±} (hf : Tendsto f l (ùìù C)) (hg : Tendsto g l atBot) :
    Tendsto (fun x => f x + g x) l atBot :=
  @Filter.Tendsto.add_at_top Œ±·µí·µà _ _ _ _ _ _ _ _ hf hg
#align filter.tendsto.add_at_bot Filter.Tendsto.add_at_bot

/-- In a linearly ordered additive commutative group with the order topology, if `f` tends to
`at_top` and `g` tends to `C` then `f + g` tends to `at_top`. -/
theorem Filter.Tendsto.at_top_add {C : Œ±} (hf : Tendsto f l atTop) (hg : Tendsto g l (ùìù C)) :
    Tendsto (fun x => f x + g x) l atTop := by
  conv in _ + _ => rw [add_comm]
  exact hg.add_at_top hf
#align filter.tendsto.at_top_add Filter.Tendsto.at_top_add

/-- In a linearly ordered additive commutative group with the order topology, if `f` tends to
`at_bot` and `g` tends to `C` then `f + g` tends to `at_bot`. -/
theorem Filter.Tendsto.at_bot_add {C : Œ±} (hf : Tendsto f l atBot) (hg : Tendsto g l (ùìù C)) :
    Tendsto (fun x => f x + g x) l atBot := by
  conv in _ + _ => rw [add_comm]
  exact hg.add_at_bot hf
#align filter.tendsto.at_bot_add Filter.Tendsto.at_bot_add

end LinearOrderedAddCommGroup

theorem preimage_neg [AddGroup Œ±] : preimage (Neg.neg : Œ± ‚Üí Œ±) = image (Neg.neg : Œ± ‚Üí Œ±) :=
  (image_eq_preimage_of_inverse neg_neg neg_neg).symm
#align preimage_neg preimage_neg

theorem Filter.map_neg_eq_comap_neg [AddGroup Œ±] :
    map (Neg.neg : Œ± ‚Üí Œ±) = comap (Neg.neg : Œ± ‚Üí Œ±) :=
  funext fun f => map_eq_comap_of_inverse (funext neg_neg) (funext neg_neg)
#align filter.map_neg_eq_comap_neg Filter.map_neg_eq_comap_neg

section OrderTopology

variable [TopologicalSpace Œ±] [TopologicalSpace Œ≤] [LinearOrder Œ±] [LinearOrder Œ≤] [OrderTopology Œ±]
  [OrderTopology Œ≤]

theorem IsLub.frequently_mem {a : Œ±} {s : Set Œ±} (ha : IsLub s a) (hs : s.Nonempty) :
    ‚àÉ·∂† x in ùìù[‚â§] a, x ‚àà s := by 
  rcases hs with ‚ü®a', ha'‚ü©
  intro h
  rcases(ha.1 ha').eq_or_lt with (rfl | ha'a)
  ¬∑ exact h.self_of_nhds_within le_rfl ha'
  ¬∑ rcases(mem_nhds_within_Iic_iff_exists_Ioc_subset' ha'a).1 h with ‚ü®b, hba, hb‚ü©
    rcases ha.exists_between hba with ‚ü®b', hb's, hb'‚ü©
    exact hb hb' hb's
#align is_lub.frequently_mem IsLub.frequently_mem

theorem IsLub.frequently_nhds_mem {a : Œ±} {s : Set Œ±} (ha : IsLub s a) (hs : s.Nonempty) :
    ‚àÉ·∂† x in ùìù a, x ‚àà s :=
  (ha.frequently_mem hs).filter_mono inf_le_left
#align is_lub.frequently_nhds_mem IsLub.frequently_nhds_mem

theorem IsGlb.frequently_mem {a : Œ±} {s : Set Œ±} (ha : IsGlb s a) (hs : s.Nonempty) :
    ‚àÉ·∂† x in ùìù[‚â•] a, x ‚àà s :=
  @IsLub.frequently_mem Œ±·µí·µà _ _ _ _ _ ha hs
#align is_glb.frequently_mem IsGlb.frequently_mem

theorem IsGlb.frequently_nhds_mem {a : Œ±} {s : Set Œ±} (ha : IsGlb s a) (hs : s.Nonempty) :
    ‚àÉ·∂† x in ùìù a, x ‚àà s :=
  (ha.frequently_mem hs).filter_mono inf_le_left
#align is_glb.frequently_nhds_mem IsGlb.frequently_nhds_mem

theorem IsLub.mem_closure {a : Œ±} {s : Set Œ±} (ha : IsLub s a) (hs : s.Nonempty) : a ‚àà closure s :=
  (ha.frequently_nhds_mem hs).mem_closure
#align is_lub.mem_closure IsLub.mem_closure

theorem IsGlb.mem_closure {a : Œ±} {s : Set Œ±} (ha : IsGlb s a) (hs : s.Nonempty) : a ‚àà closure s :=
  (ha.frequently_nhds_mem hs).mem_closure
#align is_glb.mem_closure IsGlb.mem_closure

theorem IsLub.nhdsWithinNeBot {a : Œ±} {s : Set Œ±} (ha : IsLub s a) (hs : s.Nonempty) :
    NeBot (ùìù[s] a) :=
  mem_closure_iff_nhds_within_ne_bot.1 (ha.mem_closure hs)
#align is_lub.nhds_within_ne_bot IsLub.nhdsWithinNeBot

theorem IsGlb.nhdsWithinNeBot : ‚àÄ {a : Œ±} {s : Set Œ±}, IsGlb s a ‚Üí s.Nonempty ‚Üí NeBot (ùìù[s] a) :=
  @IsLub.nhdsWithinNeBot Œ±·µí·µà _ _ _
#align is_glb.nhds_within_ne_bot IsGlb.nhdsWithinNeBot

theorem is_lub_of_mem_nhds {s : Set Œ±} {a : Œ±} {f : Filter Œ±} (hsa : a ‚àà upperBounds s)
    (hsf : s ‚àà f) [NeBot (f ‚äì ùìù a)] : IsLub s a :=
  ‚ü®hsa, fun b hb =>
    not_lt.1 fun hba =>
      have : s ‚à© { a | b < a } ‚àà f ‚äì ùìù a := inter_mem_inf hsf (IsOpen.mem_nhds (is_open_lt' _) hba)
      let ‚ü®x, ‚ü®hxs, hxb‚ü©‚ü© := Filter.nonempty_of_mem this
      have : b < b := lt_of_lt_of_le hxb <| hb hxs
      lt_irrefl b this‚ü©
#align is_lub_of_mem_nhds is_lub_of_mem_nhds

theorem is_lub_of_mem_closure {s : Set Œ±} {a : Œ±} (hsa : a ‚àà upperBounds s) (hsf : a ‚àà closure s) :
    IsLub s a := by 
  rw [mem_closure_iff_cluster_pt, ClusterPt, inf_comm] at hsf
  haveI : (ùìü s ‚äì ùìù a).ne_bot := hsf
  exact is_lub_of_mem_nhds hsa (mem_principal_self s)
#align is_lub_of_mem_closure is_lub_of_mem_closure

theorem is_glb_of_mem_nhds :
    ‚àÄ {s : Set Œ±} {a : Œ±} {f : Filter Œ±}, a ‚àà lowerBounds s ‚Üí s ‚àà f ‚Üí NeBot (f ‚äì ùìù a) ‚Üí IsGlb s a :=
  @is_lub_of_mem_nhds Œ±·µí·µà _ _ _
#align is_glb_of_mem_nhds is_glb_of_mem_nhds

theorem is_glb_of_mem_closure {s : Set Œ±} {a : Œ±} (hsa : a ‚àà lowerBounds s) (hsf : a ‚àà closure s) :
    IsGlb s a :=
  @is_lub_of_mem_closure Œ±·µí·µà _ _ _ s a hsa hsf
#align is_glb_of_mem_closure is_glb_of_mem_closure

theorem IsLub.mem_upper_bounds_of_tendsto [Preorder Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥]
    {f : Œ± ‚Üí Œ≥} {s : Set Œ±} {a : Œ±} {b : Œ≥} (hf : MonotoneOn f s) (ha : IsLub s a)
    (hb : Tendsto f (ùìù[s] a) (ùìù b)) : b ‚àà upperBounds (f '' s) := by
  rintro _ ‚ü®x, hx, rfl‚ü©
  replace ha := ha.inter_Ici_of_mem hx
  haveI := ha.nhds_within_ne_bot ‚ü®x, hx, le_rfl‚ü©
  refine' ge_of_tendsto (hb.mono_left (nhds_within_mono _ (inter_subset_left s (Ici x)))) _
  exact mem_of_superset self_mem_nhds_within fun y hy => hf hx hy.1 hy.2
#align is_lub.mem_upper_bounds_of_tendsto IsLub.mem_upper_bounds_of_tendsto

-- For a version of this theorem in which the convergence considered on the domain `Œ±` is as `x : Œ±`
-- tends to infinity, rather than tending to a point `x` in `Œ±`, see `is_lub_of_tendsto_at_top`
theorem IsLub.is_lub_of_tendsto [Preorder Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥]
    {f : Œ± ‚Üí Œ≥} {s : Set Œ±} {a : Œ±} {b : Œ≥} (hf : MonotoneOn f s) (ha : IsLub s a) (hs : s.Nonempty)
    (hb : Tendsto f (ùìù[s] a) (ùìù b)) : IsLub (f '' s) b :=
  haveI := ha.nhds_within_ne_bot hs
  ‚ü®ha.mem_upper_bounds_of_tendsto hf hb, fun b' hb' =>
    le_of_tendsto hb
      ((mem_of_superset self_mem_nhds_within) fun x hx => hb' <| mem_image_of_mem _ hx)‚ü©
#align is_lub.is_lub_of_tendsto IsLub.is_lub_of_tendsto

theorem IsGlb.mem_lower_bounds_of_tendsto [Preorder Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥]
    {f : Œ± ‚Üí Œ≥} {s : Set Œ±} {a : Œ±} {b : Œ≥} (hf : MonotoneOn f s) (ha : IsGlb s a)
    (hb : Tendsto f (ùìù[s] a) (ùìù b)) : b ‚àà lowerBounds (f '' s) :=
  @IsLub.mem_upper_bounds_of_tendsto Œ±·µí·µà Œ≥·µí·µà _ _ _ _ _ _ _ _ _ _ hf.dual ha hb
#align is_glb.mem_lower_bounds_of_tendsto IsGlb.mem_lower_bounds_of_tendsto

-- For a version of this theorem in which the convergence considered on the domain `Œ±` is as
-- `x : Œ±` tends to negative infinity, rather than tending to a point `x` in `Œ±`, see
-- `is_glb_of_tendsto_at_bot`
theorem IsGlb.is_glb_of_tendsto [Preorder Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥]
    {f : Œ± ‚Üí Œ≥} {s : Set Œ±} {a : Œ±} {b : Œ≥} (hf : MonotoneOn f s) :
    IsGlb s a ‚Üí s.Nonempty ‚Üí Tendsto f (ùìù[s] a) (ùìù b) ‚Üí IsGlb (f '' s) b :=
  @IsLub.is_lub_of_tendsto Œ±·µí·µà Œ≥·µí·µà _ _ _ _ _ _ f s a b hf.dual
#align is_glb.is_glb_of_tendsto IsGlb.is_glb_of_tendsto

theorem IsLub.mem_lower_bounds_of_tendsto [Preorder Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥]
    {f : Œ± ‚Üí Œ≥} {s : Set Œ±} {a : Œ±} {b : Œ≥} (hf : AntitoneOn f s) (ha : IsLub s a)
    (hb : Tendsto f (ùìù[s] a) (ùìù b)) : b ‚àà lowerBounds (f '' s) :=
  @IsLub.mem_upper_bounds_of_tendsto Œ± Œ≥·µí·µà _ _ _ _ _ _ _ _ _ _ hf ha hb
#align is_lub.mem_lower_bounds_of_tendsto IsLub.mem_lower_bounds_of_tendsto

theorem IsLub.is_glb_of_tendsto [Preorder Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥] :
    ‚àÄ {f : Œ± ‚Üí Œ≥} {s : Set Œ±} {a : Œ±} {b : Œ≥},
      AntitoneOn f s ‚Üí IsLub s a ‚Üí s.Nonempty ‚Üí Tendsto f (ùìù[s] a) (ùìù b) ‚Üí IsGlb (f '' s) b :=
  @IsLub.is_lub_of_tendsto Œ± Œ≥·µí·µà _ _ _ _ _ _
#align is_lub.is_glb_of_tendsto IsLub.is_glb_of_tendsto

theorem IsGlb.mem_upper_bounds_of_tendsto [Preorder Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥]
    {f : Œ± ‚Üí Œ≥} {s : Set Œ±} {a : Œ±} {b : Œ≥} (hf : AntitoneOn f s) (ha : IsGlb s a)
    (hb : Tendsto f (ùìù[s] a) (ùìù b)) : b ‚àà upperBounds (f '' s) :=
  @IsGlb.mem_lower_bounds_of_tendsto Œ± Œ≥·µí·µà _ _ _ _ _ _ _ _ _ _ hf ha hb
#align is_glb.mem_upper_bounds_of_tendsto IsGlb.mem_upper_bounds_of_tendsto

theorem IsGlb.is_lub_of_tendsto [Preorder Œ≥] [TopologicalSpace Œ≥] [OrderClosedTopology Œ≥] :
    ‚àÄ {f : Œ± ‚Üí Œ≥} {s : Set Œ±} {a : Œ±} {b : Œ≥},
      AntitoneOn f s ‚Üí IsGlb s a ‚Üí s.Nonempty ‚Üí Tendsto f (ùìù[s] a) (ùìù b) ‚Üí IsLub (f '' s) b :=
  @IsGlb.is_glb_of_tendsto Œ± Œ≥·µí·µà _ _ _ _ _ _
#align is_glb.is_lub_of_tendsto IsGlb.is_lub_of_tendsto

theorem IsLub.mem_of_is_closed {a : Œ±} {s : Set Œ±} (ha : IsLub s a) (hs : s.Nonempty)
    (sc : IsClosed s) : a ‚àà s :=
  sc.closure_subset <| ha.mem_closure hs
#align is_lub.mem_of_is_closed IsLub.mem_of_is_closed

alias IsLub.mem_of_is_closed ‚Üê IsClosed.is_lub_mem

theorem IsGlb.mem_of_is_closed {a : Œ±} {s : Set Œ±} (ha : IsGlb s a) (hs : s.Nonempty)
    (sc : IsClosed s) : a ‚àà s :=
  sc.closure_subset <| ha.mem_closure hs
#align is_glb.mem_of_is_closed IsGlb.mem_of_is_closed

alias IsGlb.mem_of_is_closed ‚Üê IsClosed.is_glb_mem

/-!
### Existence of sequences tending to Inf or Sup of a given set
-/


theorem IsLub.exists_seq_strict_mono_tendsto_of_not_mem {t : Set Œ±} {x : Œ±}
    [IsCountablyGenerated (ùìù x)] (htx : IsLub t x) (not_mem : x ‚àâ t) (ht : t.Nonempty) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictMono u ‚àß (‚àÄ n, u n < x) ‚àß Tendsto u atTop (ùìù x) ‚àß ‚àÄ n, u n ‚àà t := by
  rcases ht with ‚ü®l, hl‚ü©
  have hl : l < x := (htx.1 hl).eq_or_lt.resolve_left fun h => (not_mem <| h ‚ñ∏ hl).elim
  obtain ‚ü®s, hs‚ü© : ‚àÉ s : ‚Ñï ‚Üí Set Œ±, (ùìù x).HasBasis (fun _x : ‚Ñï => True) s :=
    let ‚ü®s, hs‚ü© := (ùìù x).exists_antitone_basis
    ‚ü®s, hs.to_has_basis‚ü©
  have : ‚àÄ n k, k < x ‚Üí ‚àÉ y, Icc y x ‚äÜ s n ‚àß k < y ‚àß y < x ‚àß y ‚àà t := by
    intro n k hk
    obtain ‚ü®L, hL, h‚ü© : ‚àÉ (L : Œ±)(hL : L ‚àà Ico k x), Ioc L x ‚äÜ s n :=
      exists_Ioc_subset_of_mem_nhds' (hs.mem_of_mem trivial) hk
    obtain ‚ü®y, hy‚ü© : ‚àÉ y : Œ±, L < y ‚àß y < x ‚àß y ‚àà t := by
      rcases htx.exists_between' not_mem hL.2 with ‚ü®y, yt, hy‚ü©
      refine' ‚ü®y, hy.1, hy.2, yt‚ü©
    exact ‚ü®y, fun z hz => h ‚ü®hy.1.trans_le hz.1, hz.2‚ü©, hL.1.trans_lt hy.1, hy.2‚ü©
  choose! f hf using this
  let u : ‚Ñï ‚Üí Œ± := fun n => Nat.recOn n (f 0 l) fun n h => f n.succ h
  have I : ‚àÄ n, u n < x := by 
    intro n
    induction' n with n IH
    ¬∑ exact (hf 0 l hl).2.2.1
    ¬∑ exact (hf n.succ _ IH).2.2.1
  have S : StrictMono u := strictMono_nat_of_lt_succ fun n => (hf n.succ _ (I n)).2.1
  refine' ‚ü®u, S, I, hs.tendsto_right_iff.2 fun n _ => _, fun n => _‚ü©
  ¬∑ simp only [ge_iff_le, eventually_at_top]
    refine' ‚ü®n, fun p hp => _‚ü©
    have up : u p ‚àà Icc (u n) x := ‚ü®S.monotone hp, (I p).le‚ü©
    have : Icc (u n) x ‚äÜ s n := by 
      cases n
      ¬∑ exact (hf 0 l hl).1
      ¬∑ exact (hf n.succ (u n) (I n)).1
    exact this up
  ¬∑ cases n
    ¬∑ exact (hf 0 l hl).2.2.2
    ¬∑ exact (hf n.succ _ (I n)).2.2.2
#align
  is_lub.exists_seq_strict_mono_tendsto_of_not_mem IsLub.exists_seq_strict_mono_tendsto_of_not_mem

theorem IsLub.exists_seq_monotone_tendsto {t : Set Œ±} {x : Œ±} [IsCountablyGenerated (ùìù x)]
    (htx : IsLub t x) (ht : t.Nonempty) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, Monotone u ‚àß (‚àÄ n, u n ‚â§ x) ‚àß Tendsto u atTop (ùìù x) ‚àß ‚àÄ n, u n ‚àà t := by
  by_cases h : x ‚àà t
  ¬∑ exact ‚ü®fun n => x, monotone_const, fun n => le_rfl, tendsto_const_nhds, fun n => h‚ü©
  ¬∑ rcases htx.exists_seq_strict_mono_tendsto_of_not_mem h ht with ‚ü®u, hu‚ü©
    exact ‚ü®u, hu.1.Monotone, fun n => (hu.2.1 n).le, hu.2.2‚ü©
#align is_lub.exists_seq_monotone_tendsto IsLub.exists_seq_monotone_tendsto

theorem exists_seq_strict_mono_tendsto' {Œ± : Type _} [LinearOrder Œ±] [TopologicalSpace Œ±]
    [DenselyOrdered Œ±] [OrderTopology Œ±] [FirstCountableTopology Œ±] {x y : Œ±} (hy : y < x) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictMono u ‚àß (‚àÄ n, u n ‚àà ioo y x) ‚àß Tendsto u atTop (ùìù x) := by
  have hx : x ‚àâ Ioo y x := fun h => (lt_irrefl x h.2).elim
  have ht : Set.Nonempty (Ioo y x) := nonempty_Ioo.2 hy
  rcases(is_lub_Ioo hy).exists_seq_strict_mono_tendsto_of_not_mem hx ht with ‚ü®u, hu‚ü©
  exact ‚ü®u, hu.1, hu.2.2.symm‚ü©
#align exists_seq_strict_mono_tendsto' exists_seq_strict_mono_tendsto'

theorem exists_seq_strict_mono_tendsto [DenselyOrdered Œ±] [NoMinOrder Œ±] [FirstCountableTopology Œ±]
    (x : Œ±) : ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictMono u ‚àß (‚àÄ n, u n < x) ‚àß Tendsto u atTop (ùìù x) := by
  obtain ‚ü®y, hy‚ü© : ‚àÉ y, y < x := exists_lt x
  rcases exists_seq_strict_mono_tendsto' hy with ‚ü®u, hu_mono, hu_mem, hux‚ü©
  exact ‚ü®u, hu_mono, fun n => (hu_mem n).2, hux‚ü©
#align exists_seq_strict_mono_tendsto exists_seq_strict_mono_tendsto

theorem exists_seq_strict_mono_tendsto_nhds_within [DenselyOrdered Œ±] [NoMinOrder Œ±]
    [FirstCountableTopology Œ±] (x : Œ±) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictMono u ‚àß (‚àÄ n, u n < x) ‚àß Tendsto u atTop (ùìù[<] x) :=
  let ‚ü®u, hu, hx, h‚ü© := exists_seq_strict_mono_tendsto x
  ‚ü®u, hu, hx,
    tendsto_nhds_within_mono_right (range_subset_iff.2 hx) <| tendsto_nhds_within_range.2 h‚ü©
#align exists_seq_strict_mono_tendsto_nhds_within exists_seq_strict_mono_tendsto_nhds_within

theorem exists_seq_tendsto_Sup {Œ± : Type _} [ConditionallyCompleteLinearOrder Œ±]
    [TopologicalSpace Œ±] [OrderTopology Œ±] [FirstCountableTopology Œ±] {S : Set Œ±} (hS : S.Nonempty)
    (hS' : BddAbove S) : ‚àÉ u : ‚Ñï ‚Üí Œ±, Monotone u ‚àß Tendsto u atTop (ùìù (sup S)) ‚àß ‚àÄ n, u n ‚àà S := by
  rcases(is_lub_cSup hS hS').exists_seq_monotone_tendsto hS with ‚ü®u, hu‚ü©
  exact ‚ü®u, hu.1, hu.2.2‚ü©
#align exists_seq_tendsto_Sup exists_seq_tendsto_Sup

theorem IsGlb.exists_seq_strict_anti_tendsto_of_not_mem {t : Set Œ±} {x : Œ±}
    [IsCountablyGenerated (ùìù x)] (htx : IsGlb t x) (not_mem : x ‚àâ t) (ht : t.Nonempty) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictAnti u ‚àß (‚àÄ n, x < u n) ‚àß Tendsto u atTop (ùìù x) ‚àß ‚àÄ n, u n ‚àà t :=
  @IsLub.exists_seq_strict_mono_tendsto_of_not_mem Œ±·µí·µà _ _ _ t x _ htx not_mem ht
#align
  is_glb.exists_seq_strict_anti_tendsto_of_not_mem IsGlb.exists_seq_strict_anti_tendsto_of_not_mem

theorem IsGlb.exists_seq_antitone_tendsto {t : Set Œ±} {x : Œ±} [IsCountablyGenerated (ùìù x)]
    (htx : IsGlb t x) (ht : t.Nonempty) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, Antitone u ‚àß (‚àÄ n, x ‚â§ u n) ‚àß Tendsto u atTop (ùìù x) ‚àß ‚àÄ n, u n ‚àà t :=
  @IsLub.exists_seq_monotone_tendsto Œ±·µí·µà _ _ _ t x _ htx ht
#align is_glb.exists_seq_antitone_tendsto IsGlb.exists_seq_antitone_tendsto

theorem exists_seq_strict_anti_tendsto' [DenselyOrdered Œ±] [FirstCountableTopology Œ±] {x y : Œ±}
    (hy : x < y) : ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictAnti u ‚àß (‚àÄ n, u n ‚àà ioo x y) ‚àß Tendsto u atTop (ùìù x) := by
  simpa only [dual_Ioo] using exists_seq_strict_mono_tendsto' (OrderDual.toDual_lt_toDual.2 hy)
#align exists_seq_strict_anti_tendsto' exists_seq_strict_anti_tendsto'

theorem exists_seq_strict_anti_tendsto [DenselyOrdered Œ±] [NoMaxOrder Œ±] [FirstCountableTopology Œ±]
    (x : Œ±) : ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictAnti u ‚àß (‚àÄ n, x < u n) ‚àß Tendsto u atTop (ùìù x) :=
  @exists_seq_strict_mono_tendsto Œ±·µí·µà _ _ _ _ _ _ x
#align exists_seq_strict_anti_tendsto exists_seq_strict_anti_tendsto

theorem exists_seq_strict_anti_tendsto_nhds_within [DenselyOrdered Œ±] [NoMaxOrder Œ±]
    [FirstCountableTopology Œ±] (x : Œ±) :
    ‚àÉ u : ‚Ñï ‚Üí Œ±, StrictAnti u ‚àß (‚àÄ n, x < u n) ‚àß Tendsto u atTop (ùìù[>] x) :=
  @exists_seq_strict_mono_tendsto_nhds_within Œ±·µí·µà _ _ _ _ _ _ _
#align exists_seq_strict_anti_tendsto_nhds_within exists_seq_strict_anti_tendsto_nhds_within

theorem exists_seq_strict_anti_strict_mono_tendsto [DenselyOrdered Œ±] [FirstCountableTopology Œ±]
    {x y : Œ±} (h : x < y) :
    ‚àÉ u v : ‚Ñï ‚Üí Œ±,
      StrictAnti u ‚àß
        StrictMono v ‚àß
          (‚àÄ k, u k ‚àà ioo x y) ‚àß
            (‚àÄ l, v l ‚àà ioo x y) ‚àß
              (‚àÄ k l, u k < v l) ‚àß Tendsto u atTop (ùìù x) ‚àß Tendsto v atTop (ùìù y) :=
  by 
  rcases exists_seq_strict_anti_tendsto' h with ‚ü®u, hu_anti, hu_mem, hux‚ü©
  rcases exists_seq_strict_mono_tendsto' (hu_mem 0).2 with ‚ü®v, hv_mono, hv_mem, hvy‚ü©
  exact
    ‚ü®u, v, hu_anti, hv_mono, hu_mem, fun l => ‚ü®(hu_mem 0).1.trans (hv_mem l).1, (hv_mem l).2‚ü©,
      fun k l => (hu_anti.antitone (zero_le k)).trans_lt (hv_mem l).1, hux, hvy‚ü©
#align exists_seq_strict_anti_strict_mono_tendsto exists_seq_strict_anti_strict_mono_tendsto

theorem exists_seq_tendsto_Inf {Œ± : Type _} [ConditionallyCompleteLinearOrder Œ±]
    [TopologicalSpace Œ±] [OrderTopology Œ±] [FirstCountableTopology Œ±] {S : Set Œ±} (hS : S.Nonempty)
    (hS' : BddBelow S) : ‚àÉ u : ‚Ñï ‚Üí Œ±, Antitone u ‚àß Tendsto u atTop (ùìù (inf S)) ‚àß ‚àÄ n, u n ‚àà S :=
  @exists_seq_tendsto_Sup Œ±·µí·µà _ _ _ _ S hS hS'
#align exists_seq_tendsto_Inf exists_seq_tendsto_Inf

end OrderTopology

section DenselyOrdered

variable [TopologicalSpace Œ±] [LinearOrder Œ±] [OrderTopology Œ±] [DenselyOrdered Œ±] {a b : Œ±}
  {s : Set Œ±}

/-- The closure of the interval `(a, +‚àû)` is the closed interval `[a, +‚àû)`, unless `a` is a top
element. -/
theorem closure_Ioi' {a : Œ±} (h : (ioi a).Nonempty) : closure (ioi a) = ici a := by
  apply subset.antisymm
  ¬∑ exact closure_minimal Ioi_subset_Ici_self is_closed_Ici
  ¬∑ rw [‚Üê diff_subset_closure_iff, Ici_diff_Ioi_same, singleton_subset_iff]
    exact is_glb_Ioi.mem_closure h
#align closure_Ioi' closure_Ioi'

/-- The closure of the interval `(a, +‚àû)` is the closed interval `[a, +‚àû)`. -/
@[simp]
theorem closure_Ioi (a : Œ±) [NoMaxOrder Œ±] : closure (ioi a) = ici a :=
  closure_Ioi' nonempty_Ioi
#align closure_Ioi closure_Ioi

/-- The closure of the interval `(-‚àû, a)` is the closed interval `(-‚àû, a]`, unless `a` is a bottom
element. -/
theorem closure_Iio' (h : (iio a).Nonempty) : closure (iio a) = iic a :=
  @closure_Ioi' Œ±·µí·µà _ _ _ _ _ h
#align closure_Iio' closure_Iio'

/-- The closure of the interval `(-‚àû, a)` is the interval `(-‚àû, a]`. -/
@[simp]
theorem closure_Iio (a : Œ±) [NoMinOrder Œ±] : closure (iio a) = iic a :=
  closure_Iio' nonempty_Iio
#align closure_Iio closure_Iio

/-- The closure of the open interval `(a, b)` is the closed interval `[a, b]`. -/
@[simp]
theorem closure_Ioo {a b : Œ±} (hab : a ‚â† b) : closure (ioo a b) = icc a b := by
  apply subset.antisymm
  ¬∑ exact closure_minimal Ioo_subset_Icc_self is_closed_Icc
  ¬∑ cases' hab.lt_or_lt with hab hab
    ¬∑ rw [‚Üê diff_subset_closure_iff, Icc_diff_Ioo_same hab.le]
      have hab' : (Ioo a b).Nonempty := nonempty_Ioo.2 hab
      simp only [insert_subset, singleton_subset_iff]
      exact ‚ü®(is_glb_Ioo hab).mem_closure hab', (is_lub_Ioo hab).mem_closure hab'‚ü©
    ¬∑ rw [Icc_eq_empty_of_lt hab]
      exact empty_subset _
#align closure_Ioo closure_Ioo

/-- The closure of the interval `(a, b]` is the closed interval `[a, b]`. -/
@[simp]
theorem closure_Ioc {a b : Œ±} (hab : a ‚â† b) : closure (ioc a b) = icc a b := by
  apply subset.antisymm
  ¬∑ exact closure_minimal Ioc_subset_Icc_self is_closed_Icc
  ¬∑ apply subset.trans _ (closure_mono Ioo_subset_Ioc_self)
    rw [closure_Ioo hab]
#align closure_Ioc closure_Ioc

/-- The closure of the interval `[a, b)` is the closed interval `[a, b]`. -/
@[simp]
theorem closure_Ico {a b : Œ±} (hab : a ‚â† b) : closure (ico a b) = icc a b := by
  apply subset.antisymm
  ¬∑ exact closure_minimal Ico_subset_Icc_self is_closed_Icc
  ¬∑ apply subset.trans _ (closure_mono Ioo_subset_Ico_self)
    rw [closure_Ioo hab]
#align closure_Ico closure_Ico

@[simp]
theorem interior_Ici' {a : Œ±} (ha : (iio a).Nonempty) : interior (ici a) = ioi a := by
  rw [‚Üê compl_Iio, interior_compl, closure_Iio' ha, compl_Iic]
#align interior_Ici' interior_Ici'

theorem interior_Ici [NoMinOrder Œ±] {a : Œ±} : interior (ici a) = ioi a :=
  interior_Ici' nonempty_Iio
#align interior_Ici interior_Ici

@[simp]
theorem interior_Iic' {a : Œ±} (ha : (ioi a).Nonempty) : interior (iic a) = iio a :=
  @interior_Ici' Œ±·µí·µà _ _ _ _ _ ha
#align interior_Iic' interior_Iic'

theorem interior_Iic [NoMaxOrder Œ±] {a : Œ±} : interior (iic a) = iio a :=
  interior_Iic' nonempty_Ioi
#align interior_Iic interior_Iic

@[simp]
theorem interior_Icc [NoMinOrder Œ±] [NoMaxOrder Œ±] {a b : Œ±} : interior (icc a b) = ioo a b := by
  rw [‚Üê Ici_inter_Iic, interior_inter, interior_Ici, interior_Iic, Ioi_inter_Iio]
#align interior_Icc interior_Icc

@[simp]
theorem interior_Ico [NoMinOrder Œ±] {a b : Œ±} : interior (ico a b) = ioo a b := by
  rw [‚Üê Ici_inter_Iio, interior_inter, interior_Ici, interior_Iio, Ioi_inter_Iio]
#align interior_Ico interior_Ico

@[simp]
theorem interior_Ioc [NoMaxOrder Œ±] {a b : Œ±} : interior (ioc a b) = ioo a b := by
  rw [‚Üê Ioi_inter_Iic, interior_inter, interior_Ioi, interior_Iic, Ioi_inter_Iio]
#align interior_Ioc interior_Ioc

theorem closure_interior_Icc {a b : Œ±} (h : a ‚â† b) : closure (interior (icc a b)) = icc a b :=
  (closure_minimal interior_subset is_closed_Icc).antisymm <|
    calc
      icc a b = closure (ioo a b) := (closure_Ioo h).symm
      _ ‚äÜ closure (interior (icc a b)) :=
        closure_mono (interior_maximal Ioo_subset_Icc_self is_open_Ioo)
      
#align closure_interior_Icc closure_interior_Icc

theorem Ioc_subset_closure_interior (a b : Œ±) : ioc a b ‚äÜ closure (interior (ioc a b)) := by
  rcases eq_or_ne a b with (rfl | h)
  ¬∑ simp
  ¬∑
    calc
      Ioc a b ‚äÜ Icc a b := Ioc_subset_Icc_self
      _ = closure (Ioo a b) := (closure_Ioo h).symm
      _ ‚äÜ closure (interior (Ioc a b)) :=
        closure_mono (interior_maximal Ioo_subset_Ioc_self is_open_Ioo)
      
#align Ioc_subset_closure_interior Ioc_subset_closure_interior

theorem Ico_subset_closure_interior (a b : Œ±) : ico a b ‚äÜ closure (interior (ico a b)) := by
  simpa only [dual_Ioc] using Ioc_subset_closure_interior (OrderDual.toDual b) (OrderDual.toDual a)
#align Ico_subset_closure_interior Ico_subset_closure_interior

@[simp]
theorem frontier_Ici' {a : Œ±} (ha : (iio a).Nonempty) : frontier (ici a) = {a} := by
  simp [frontier, ha]
#align frontier_Ici' frontier_Ici'

theorem frontier_Ici [NoMinOrder Œ±] {a : Œ±} : frontier (ici a) = {a} :=
  frontier_Ici' nonempty_Iio
#align frontier_Ici frontier_Ici

@[simp]
theorem frontier_Iic' {a : Œ±} (ha : (ioi a).Nonempty) : frontier (iic a) = {a} := by
  simp [frontier, ha]
#align frontier_Iic' frontier_Iic'

theorem frontier_Iic [NoMaxOrder Œ±] {a : Œ±} : frontier (iic a) = {a} :=
  frontier_Iic' nonempty_Ioi
#align frontier_Iic frontier_Iic

@[simp]
theorem frontier_Ioi' {a : Œ±} (ha : (ioi a).Nonempty) : frontier (ioi a) = {a} := by
  simp [frontier, closure_Ioi' ha, Iic_diff_Iio, Icc_self]
#align frontier_Ioi' frontier_Ioi'

theorem frontier_Ioi [NoMaxOrder Œ±] {a : Œ±} : frontier (ioi a) = {a} :=
  frontier_Ioi' nonempty_Ioi
#align frontier_Ioi frontier_Ioi

@[simp]
theorem frontier_Iio' {a : Œ±} (ha : (iio a).Nonempty) : frontier (iio a) = {a} := by
  simp [frontier, closure_Iio' ha, Iic_diff_Iio, Icc_self]
#align frontier_Iio' frontier_Iio'

theorem frontier_Iio [NoMinOrder Œ±] {a : Œ±} : frontier (iio a) = {a} :=
  frontier_Iio' nonempty_Iio
#align frontier_Iio frontier_Iio

@[simp]
theorem frontier_Icc [NoMinOrder Œ±] [NoMaxOrder Œ±] {a b : Œ±} (h : a < b) :
    frontier (icc a b) = {a, b} := by simp [frontier, le_of_lt h, Icc_diff_Ioo_same]
#align frontier_Icc frontier_Icc

@[simp]
theorem frontier_Ioo {a b : Œ±} (h : a < b) : frontier (ioo a b) = {a, b} := by
  rw [frontier, closure_Ioo h.ne, interior_Ioo, Icc_diff_Ioo_same h.le]
#align frontier_Ioo frontier_Ioo

@[simp]
theorem frontier_Ico [NoMinOrder Œ±] {a b : Œ±} (h : a < b) : frontier (ico a b) = {a, b} := by
  rw [frontier, closure_Ico h.ne, interior_Ico, Icc_diff_Ioo_same h.le]
#align frontier_Ico frontier_Ico

@[simp]
theorem frontier_Ioc [NoMaxOrder Œ±] {a b : Œ±} (h : a < b) : frontier (ioc a b) = {a, b} := by
  rw [frontier, closure_Ioc h.ne, interior_Ioc, Icc_diff_Ioo_same h.le]
#align frontier_Ioc frontier_Ioc

theorem nhdsWithinIoiNeBot' {a b : Œ±} (H‚ÇÅ : (ioi a).Nonempty) (H‚ÇÇ : a ‚â§ b) : NeBot (ùìù[ioi a] b) :=
  mem_closure_iff_nhds_within_ne_bot.1 <| by rwa [closure_Ioi' H‚ÇÅ]
#align nhds_within_Ioi_ne_bot' nhdsWithinIoiNeBot'

theorem nhdsWithinIoiNeBot [NoMaxOrder Œ±] {a b : Œ±} (H : a ‚â§ b) : NeBot (ùìù[ioi a] b) :=
  nhdsWithinIoiNeBot' nonempty_Ioi H
#align nhds_within_Ioi_ne_bot nhdsWithinIoiNeBot

theorem nhdsWithinIoiSelfNeBot' {a : Œ±} (H : (ioi a).Nonempty) : NeBot (ùìù[>] a) :=
  nhdsWithinIoiNeBot' H (le_refl a)
#align nhds_within_Ioi_self_ne_bot' nhdsWithinIoiSelfNeBot'

@[instance]
theorem nhdsWithinIoiSelfNeBot [NoMaxOrder Œ±] (a : Œ±) : NeBot (ùìù[>] a) :=
  nhdsWithinIoiNeBot (le_refl a)
#align nhds_within_Ioi_self_ne_bot nhdsWithinIoiSelfNeBot

theorem Filter.Eventually.exists_gt [NoMaxOrder Œ±] {a : Œ±} {p : Œ± ‚Üí Prop} (h : ‚àÄ·∂† x in ùìù a, p x) :
    ‚àÉ b > a, p b := by
  simpa only [exists_prop, gt_iff_lt, and_comm'] using
    ((h.filter_mono (@nhds_within_le_nhds _ _ a (Ioi a))).And self_mem_nhds_within).exists
#align filter.eventually.exists_gt Filter.Eventually.exists_gt

theorem nhdsWithinIioNeBot' {b c : Œ±} (H‚ÇÅ : (iio c).Nonempty) (H‚ÇÇ : b ‚â§ c) : NeBot (ùìù[iio c] b) :=
  mem_closure_iff_nhds_within_ne_bot.1 <| by rwa [closure_Iio' H‚ÇÅ]
#align nhds_within_Iio_ne_bot' nhdsWithinIioNeBot'

theorem nhdsWithinIioNeBot [NoMinOrder Œ±] {a b : Œ±} (H : a ‚â§ b) : NeBot (ùìù[iio b] a) :=
  nhdsWithinIioNeBot' nonempty_Iio H
#align nhds_within_Iio_ne_bot nhdsWithinIioNeBot

theorem nhdsWithinIioSelfNeBot' {b : Œ±} (H : (iio b).Nonempty) : NeBot (ùìù[<] b) :=
  nhdsWithinIioNeBot' H (le_refl b)
#align nhds_within_Iio_self_ne_bot' nhdsWithinIioSelfNeBot'

@[instance]
theorem nhdsWithinIioSelfNeBot [NoMinOrder Œ±] (a : Œ±) : NeBot (ùìù[<] a) :=
  nhdsWithinIioNeBot (le_refl a)
#align nhds_within_Iio_self_ne_bot nhdsWithinIioSelfNeBot

theorem Filter.Eventually.exists_lt [NoMinOrder Œ±] {a : Œ±} {p : Œ± ‚Üí Prop} (h : ‚àÄ·∂† x in ùìù a, p x) :
    ‚àÉ b < a, p b :=
  @Filter.Eventually.exists_gt Œ±·µí·µà _ _ _ _ _ _ _ h
#align filter.eventually.exists_lt Filter.Eventually.exists_lt

theorem rightNhdsWithinIcoNeBot {a b : Œ±} (H : a < b) : NeBot (ùìù[ico a b] b) :=
  (is_lub_Ico H).nhdsWithinNeBot (nonempty_Ico.2 H)
#align right_nhds_within_Ico_ne_bot rightNhdsWithinIcoNeBot

theorem leftNhdsWithinIocNeBot {a b : Œ±} (H : a < b) : NeBot (ùìù[ioc a b] a) :=
  (is_glb_Ioc H).nhdsWithinNeBot (nonempty_Ioc.2 H)
#align left_nhds_within_Ioc_ne_bot leftNhdsWithinIocNeBot

theorem leftNhdsWithinIooNeBot {a b : Œ±} (H : a < b) : NeBot (ùìù[ioo a b] a) :=
  (is_glb_Ioo H).nhdsWithinNeBot (nonempty_Ioo.2 H)
#align left_nhds_within_Ioo_ne_bot leftNhdsWithinIooNeBot

theorem rightNhdsWithinIooNeBot {a b : Œ±} (H : a < b) : NeBot (ùìù[ioo a b] b) :=
  (is_lub_Ioo H).nhdsWithinNeBot (nonempty_Ioo.2 H)
#align right_nhds_within_Ioo_ne_bot rightNhdsWithinIooNeBot

theorem comap_coe_nhds_within_Iio_of_Ioo_subset (hb : s ‚äÜ iio b)
    (hs : s.Nonempty ‚Üí ‚àÉ a < b, ioo a b ‚äÜ s) : comap (coe : s ‚Üí Œ±) (ùìù[<] b) = at_top := by
  nontriviality
  haveI : Nonempty s := nontrivial_iff_nonempty.1 ‚Äπ_‚Ä∫
  rcases hs (nonempty_subtype.1 ‚Äπ_‚Ä∫) with ‚ü®a, h, hs‚ü©
  ext u; constructor
  ¬∑ rintro ‚ü®t, ht, hts‚ü©
    obtain ‚ü®x, ‚ü®hxa : a ‚â§ x, hxb : x < b‚ü©, hxt : Ioo x b ‚äÜ t‚ü© :=
      (mem_nhds_within_Iio_iff_exists_mem_Ico_Ioo_subset h).mp ht
    obtain ‚ü®y, hxy, hyb‚ü© := exists_between hxb
    refine' mem_of_superset (mem_at_top ‚ü®y, hs ‚ü®hxa.trans_lt hxy, hyb‚ü©‚ü©) _
    rintro ‚ü®z, hzs‚ü© (hyz : y ‚â§ z)
    refine' hts (hxt ‚ü®hxy.trans_le _, hb _‚ü©) <;> assumption
  ¬∑ intro hu
    obtain ‚ü®x : s, hx : ‚àÄ z, x ‚â§ z ‚Üí z ‚àà u‚ü© := mem_at_top_sets.1 hu
    exact ‚ü®Ioo x b, Ioo_mem_nhds_within_Iio (right_mem_Ioc.2 <| hb x.2), fun z hz => hx _ hz.1.le‚ü©
#align comap_coe_nhds_within_Iio_of_Ioo_subset comap_coe_nhds_within_Iio_of_Ioo_subset

theorem comap_coe_nhds_within_Ioi_of_Ioo_subset (ha : s ‚äÜ ioi a)
    (hs : s.Nonempty ‚Üí ‚àÉ b > a, ioo a b ‚äÜ s) : comap (coe : s ‚Üí Œ±) (ùìù[>] a) = at_bot :=
  comap_coe_nhds_within_Iio_of_Ioo_subset (show of_dual ‚Åª¬π' s ‚äÜ iio (toDual a) from ha) fun h => by
    simpa only [OrderDual.exists, dual_Ioo] using hs h
#align comap_coe_nhds_within_Ioi_of_Ioo_subset comap_coe_nhds_within_Ioi_of_Ioo_subset

theorem map_coe_at_top_of_Ioo_subset (hb : s ‚äÜ iio b) (hs : ‚àÄ a' < b, ‚àÉ a < b, ioo a b ‚äÜ s) :
    map (coe : s ‚Üí Œ±) atTop = ùìù[<] b := by
  rcases eq_empty_or_nonempty (Iio b) with (hb' | ‚ü®a, ha‚ü©)
  ¬∑ rw [filter_eq_bot_of_is_empty at_top, Filter.map_bot, hb', nhds_within_empty]
    exact ‚ü®fun x => hb'.subset (hb x.2)‚ü©
  ¬∑ rw [‚Üê comap_coe_nhds_within_Iio_of_Ioo_subset hb fun _ => hs a ha, map_comap_of_mem]
    rw [Subtype.range_coe]
    exact (mem_nhds_within_Iio_iff_exists_Ioo_subset' ha).2 (hs a ha)
#align map_coe_at_top_of_Ioo_subset map_coe_at_top_of_Ioo_subset

theorem map_coe_at_bot_of_Ioo_subset (ha : s ‚äÜ ioi a) (hs : ‚àÄ b' > a, ‚àÉ b > a, ioo a b ‚äÜ s) :
    map (coe : s ‚Üí Œ±) atBot = ùìù[>] a :=
  by
  -- the elaborator gets stuck without `(... : _)`
  refine'
    (map_coe_at_top_of_Ioo_subset (show of_dual ‚Åª¬π' s ‚äÜ Iio (to_dual a) from ha) fun b' hb' => _ :
      _)
  simpa only [OrderDual.exists, dual_Ioo] using hs b' hb'
#align map_coe_at_bot_of_Ioo_subset map_coe_at_bot_of_Ioo_subset

/-- The `at_top` filter for an open interval `Ioo a b` comes from the left-neighbourhoods filter at
the right endpoint in the ambient order. -/
theorem comap_coe_Ioo_nhds_within_Iio (a b : Œ±) : comap (coe : ioo a b ‚Üí Œ±) (ùìù[<] b) = at_top :=
  (comap_coe_nhds_within_Iio_of_Ioo_subset Ioo_subset_Iio_self) fun h =>
    ‚ü®a, nonempty_Ioo.1 h, Subset.refl _‚ü©
#align comap_coe_Ioo_nhds_within_Iio comap_coe_Ioo_nhds_within_Iio

/-- The `at_bot` filter for an open interval `Ioo a b` comes from the right-neighbourhoods filter at
the left endpoint in the ambient order. -/
theorem comap_coe_Ioo_nhds_within_Ioi (a b : Œ±) : comap (coe : ioo a b ‚Üí Œ±) (ùìù[>] a) = at_bot :=
  (comap_coe_nhds_within_Ioi_of_Ioo_subset Ioo_subset_Ioi_self) fun h =>
    ‚ü®b, nonempty_Ioo.1 h, Subset.refl _‚ü©
#align comap_coe_Ioo_nhds_within_Ioi comap_coe_Ioo_nhds_within_Ioi

theorem comap_coe_Ioi_nhds_within_Ioi (a : Œ±) : comap (coe : ioi a ‚Üí Œ±) (ùìù[>] a) = at_bot :=
  (comap_coe_nhds_within_Ioi_of_Ioo_subset (Subset.refl _)) fun ‚ü®x, hx‚ü© =>
    ‚ü®x, hx, Ioo_subset_Ioi_self‚ü©
#align comap_coe_Ioi_nhds_within_Ioi comap_coe_Ioi_nhds_within_Ioi

theorem comap_coe_Iio_nhds_within_Iio (a : Œ±) : comap (coe : iio a ‚Üí Œ±) (ùìù[<] a) = at_top :=
  @comap_coe_Ioi_nhds_within_Ioi Œ±·µí·µà _ _ _ _ a
#align comap_coe_Iio_nhds_within_Iio comap_coe_Iio_nhds_within_Iio

@[simp]
theorem map_coe_Ioo_at_top {a b : Œ±} (h : a < b) : map (coe : ioo a b ‚Üí Œ±) atTop = ùìù[<] b :=
  (map_coe_at_top_of_Ioo_subset Ioo_subset_Iio_self) fun _ _ => ‚ü®_, h, Subset.refl _‚ü©
#align map_coe_Ioo_at_top map_coe_Ioo_at_top

@[simp]
theorem map_coe_Ioo_at_bot {a b : Œ±} (h : a < b) : map (coe : ioo a b ‚Üí Œ±) atBot = ùìù[>] a :=
  (map_coe_at_bot_of_Ioo_subset Ioo_subset_Ioi_self) fun _ _ => ‚ü®_, h, Subset.refl _‚ü©
#align map_coe_Ioo_at_bot map_coe_Ioo_at_bot

@[simp]
theorem map_coe_Ioi_at_bot (a : Œ±) : map (coe : ioi a ‚Üí Œ±) atBot = ùìù[>] a :=
  (map_coe_at_bot_of_Ioo_subset (Subset.refl _)) fun b hb => ‚ü®b, hb, Ioo_subset_Ioi_self‚ü©
#align map_coe_Ioi_at_bot map_coe_Ioi_at_bot

@[simp]
theorem map_coe_Iio_at_top (a : Œ±) : map (coe : iio a ‚Üí Œ±) atTop = ùìù[<] a :=
  @map_coe_Ioi_at_bot Œ±·µí·µà _ _ _ _ _
#align map_coe_Iio_at_top map_coe_Iio_at_top

variable {l : Filter Œ≤} {f : Œ± ‚Üí Œ≤}

@[simp]
theorem tendsto_comp_coe_Ioo_at_top (h : a < b) :
    Tendsto (fun x : ioo a b => f x) atTop l ‚Üî Tendsto f (ùìù[<] b) l := by
  rw [‚Üê map_coe_Ioo_at_top h, tendsto_map'_iff]
#align tendsto_comp_coe_Ioo_at_top tendsto_comp_coe_Ioo_at_top

@[simp]
theorem tendsto_comp_coe_Ioo_at_bot (h : a < b) :
    Tendsto (fun x : ioo a b => f x) atBot l ‚Üî Tendsto f (ùìù[>] a) l := by
  rw [‚Üê map_coe_Ioo_at_bot h, tendsto_map'_iff]
#align tendsto_comp_coe_Ioo_at_bot tendsto_comp_coe_Ioo_at_bot

@[simp]
theorem tendsto_comp_coe_Ioi_at_bot :
    Tendsto (fun x : ioi a => f x) atBot l ‚Üî Tendsto f (ùìù[>] a) l := by
  rw [‚Üê map_coe_Ioi_at_bot, tendsto_map'_iff]
#align tendsto_comp_coe_Ioi_at_bot tendsto_comp_coe_Ioi_at_bot

@[simp]
theorem tendsto_comp_coe_Iio_at_top :
    Tendsto (fun x : iio a => f x) atTop l ‚Üî Tendsto f (ùìù[<] a) l := by
  rw [‚Üê map_coe_Iio_at_top, tendsto_map'_iff]
#align tendsto_comp_coe_Iio_at_top tendsto_comp_coe_Iio_at_top

@[simp]
theorem tendsto_Ioo_at_top {f : Œ≤ ‚Üí ioo a b} :
    Tendsto f l atTop ‚Üî Tendsto (fun x => (f x : Œ±)) l (ùìù[<] b) := by
  rw [‚Üê comap_coe_Ioo_nhds_within_Iio, tendsto_comap_iff]
#align tendsto_Ioo_at_top tendsto_Ioo_at_top

@[simp]
theorem tendsto_Ioo_at_bot {f : Œ≤ ‚Üí ioo a b} :
    Tendsto f l atBot ‚Üî Tendsto (fun x => (f x : Œ±)) l (ùìù[>] a) := by
  rw [‚Üê comap_coe_Ioo_nhds_within_Ioi, tendsto_comap_iff]
#align tendsto_Ioo_at_bot tendsto_Ioo_at_bot

@[simp]
theorem tendsto_Ioi_at_bot {f : Œ≤ ‚Üí ioi a} :
    Tendsto f l atBot ‚Üî Tendsto (fun x => (f x : Œ±)) l (ùìù[>] a) := by
  rw [‚Üê comap_coe_Ioi_nhds_within_Ioi, tendsto_comap_iff]
#align tendsto_Ioi_at_bot tendsto_Ioi_at_bot

@[simp]
theorem tendsto_Iio_at_top {f : Œ≤ ‚Üí iio a} :
    Tendsto f l atTop ‚Üî Tendsto (fun x => (f x : Œ±)) l (ùìù[<] a) := by
  rw [‚Üê comap_coe_Iio_nhds_within_Iio, tendsto_comap_iff]
#align tendsto_Iio_at_top tendsto_Iio_at_top

instance (x : Œ±) [Nontrivial Œ±] : NeBot (ùìù[‚â†] x) := by
  apply forall_mem_nonempty_iff_ne_bot.1 fun s hs => _
  obtain ‚ü®u, u_open, xu, us‚ü© : ‚àÉ u : Set Œ±, IsOpen u ‚àß x ‚àà u ‚àß u ‚à© {x}·∂ú ‚äÜ s := mem_nhds_within.1 hs
  obtain ‚ü®a, b, a_lt_b, hab‚ü© : ‚àÉ a b : Œ±, a < b ‚àß Ioo a b ‚äÜ u := u_open.exists_Ioo_subset ‚ü®x, xu‚ü©
  obtain ‚ü®y, hy‚ü© : ‚àÉ y, a < y ‚àß y < b := exists_between a_lt_b
  rcases ne_or_eq x y with (xy | rfl)
  ¬∑ exact ‚ü®y, us ‚ü®hab hy, xy.symm‚ü©‚ü©
  obtain ‚ü®z, hz‚ü© : ‚àÉ z, a < z ‚àß z < x := exists_between hy.1
  exact ‚ü®z, us ‚ü®hab ‚ü®hz.1, hz.2.trans hy.2‚ü©, hz.2.Ne‚ü©‚ü©

/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (t ¬´expr ‚äÜ ¬ª s) -/
/-- Let `s` be a dense set in a nontrivial dense linear order `Œ±`. If `s` is a
separable space (e.g., if `Œ±` has a second countable topology), then there exists a countable
dense subset `t ‚äÜ s` such that `t` does not contain bottom/top elements of `Œ±`. -/
theorem Dense.exists_countable_dense_subset_no_bot_top [Nontrivial Œ±] {s : Set Œ±} [SeparableSpace s]
    (hs : Dense s) :
    ‚àÉ (t : _)(_ : t ‚äÜ s), t.Countable ‚àß Dense t ‚àß (‚àÄ x, IsBot x ‚Üí x ‚àâ t) ‚àß ‚àÄ x, IsTop x ‚Üí x ‚àâ t :=
  by 
  rcases hs.exists_countable_dense_subset with ‚ü®t, hts, htc, htd‚ü©
  refine' ‚ü®t \ ({ x | IsBot x } ‚à™ { x | IsTop x }), _, _, _, _, _‚ü©
  ¬∑ exact (diff_subset _ _).trans hts
  ¬∑ exact htc.mono (diff_subset _ _)
  ¬∑ exact htd.diff_finite ((subsingleton_is_bot Œ±).Finite.union (subsingleton_is_top Œ±).Finite)
  ¬∑ intro x hx
    simp [hx]
  ¬∑ intro x hx
    simp [hx]
#align dense.exists_countable_dense_subset_no_bot_top Dense.exists_countable_dense_subset_no_bot_top

variable (Œ±)

/-- If `Œ±` is a nontrivial separable dense linear order, then there exists a
countable dense set `s : set Œ±` that contains neither top nor bottom elements of `Œ±`.
For a dense set containing both bot and top elements, see
`exists_countable_dense_bot_top`. -/
theorem exists_countable_dense_no_bot_top [SeparableSpace Œ±] [Nontrivial Œ±] :
    ‚àÉ s : Set Œ±, s.Countable ‚àß Dense s ‚àß (‚àÄ x, IsBot x ‚Üí x ‚àâ s) ‚àß ‚àÄ x, IsTop x ‚Üí x ‚àâ s := by
  simpa using dense_univ.exists_countable_dense_subset_no_bot_top
#align exists_countable_dense_no_bot_top exists_countable_dense_no_bot_top

end DenselyOrdered

section CompleteLinearOrder

variable [CompleteLinearOrder Œ±] [TopologicalSpace Œ±] [OrderTopology Œ±] [CompleteLinearOrder Œ≤]
  [TopologicalSpace Œ≤] [OrderClosedTopology Œ≤] [Nonempty Œ≥]

theorem Sup_mem_closure {Œ± : Type u} [TopologicalSpace Œ±] [CompleteLinearOrder Œ±] [OrderTopology Œ±]
    {s : Set Œ±} (hs : s.Nonempty) : sup s ‚àà closure s :=
  (is_lub_Sup s).mem_closure hs
#align Sup_mem_closure Sup_mem_closure

theorem Inf_mem_closure {Œ± : Type u} [TopologicalSpace Œ±] [CompleteLinearOrder Œ±] [OrderTopology Œ±]
    {s : Set Œ±} (hs : s.Nonempty) : inf s ‚àà closure s :=
  (is_glb_Inf s).mem_closure hs
#align Inf_mem_closure Inf_mem_closure

theorem IsClosed.Sup_mem {Œ± : Type u} [TopologicalSpace Œ±] [CompleteLinearOrder Œ±] [OrderTopology Œ±]
    {s : Set Œ±} (hs : s.Nonempty) (hc : IsClosed s) : sup s ‚àà s :=
  (is_lub_Sup s).mem_of_is_closed hs hc
#align is_closed.Sup_mem IsClosed.Sup_mem

theorem IsClosed.Inf_mem {Œ± : Type u} [TopologicalSpace Œ±] [CompleteLinearOrder Œ±] [OrderTopology Œ±]
    {s : Set Œ±} (hs : s.Nonempty) (hc : IsClosed s) : inf s ‚àà s :=
  (is_glb_Inf s).mem_of_is_closed hs hc
#align is_closed.Inf_mem IsClosed.Inf_mem

/-- A monotone function continuous at the supremum of a nonempty set sends this supremum to
the supremum of the image of this set. -/
theorem Monotone.map_Sup_of_continuous_at' {f : Œ± ‚Üí Œ≤} {s : Set Œ±} (Cf : ContinuousAt f (sup s))
    (Mf : Monotone f) (hs : s.Nonempty) : f (sup s) = sup (f '' s) :=
  ((--This is a particular case of the more general is_lub.is_lub_of_tendsto
              is_lub_Sup
              _).is_lub_of_tendsto
          (fun x hx y hy xy => Mf xy) hs <|
        Cf.mono_left inf_le_left).Sup_eq.symm
#align monotone.map_Sup_of_continuous_at' Monotone.map_Sup_of_continuous_at'

/-- A monotone function `f` sending `bot` to `bot` and continuous at the supremum of a set sends
this supremum to the supremum of the image of this set. -/
theorem Monotone.map_Sup_of_continuous_at {f : Œ± ‚Üí Œ≤} {s : Set Œ±} (Cf : ContinuousAt f (sup s))
    (Mf : Monotone f) (fbot : f ‚ä• = ‚ä•) : f (sup s) = sup (f '' s) := by
  cases' s.eq_empty_or_nonempty with h h
  ¬∑ simp [h, fbot]
  ¬∑ exact Mf.map_Sup_of_continuous_at' Cf h
#align monotone.map_Sup_of_continuous_at Monotone.map_Sup_of_continuous_at

/-- A monotone function continuous at the indexed supremum over a nonempty `Sort` sends this indexed
supremum to the indexed supremum of the composition. -/
theorem Monotone.map_supr_of_continuous_at' {Œπ : Sort _} [Nonempty Œπ] {f : Œ± ‚Üí Œ≤} {g : Œπ ‚Üí Œ±}
    (Cf : ContinuousAt f (supr g)) (Mf : Monotone f) : f (‚®Ü i, g i) = ‚®Ü i, f (g i) := by
  rw [supr, Mf.map_Sup_of_continuous_at' Cf (range_nonempty g), ‚Üê range_comp, supr]
#align monotone.map_supr_of_continuous_at' Monotone.map_supr_of_continuous_at'

/-- If a monotone function sending `bot` to `bot` is continuous at the indexed supremum over
a `Sort`, then it sends this indexed supremum to the indexed supremum of the composition. -/
theorem Monotone.map_supr_of_continuous_at {Œπ : Sort _} {f : Œ± ‚Üí Œ≤} {g : Œπ ‚Üí Œ±}
    (Cf : ContinuousAt f (supr g)) (Mf : Monotone f) (fbot : f ‚ä• = ‚ä•) :
    f (‚®Ü i, g i) = ‚®Ü i, f (g i) := by
  rw [supr, Mf.map_Sup_of_continuous_at Cf fbot, ‚Üê range_comp, supr]
#align monotone.map_supr_of_continuous_at Monotone.map_supr_of_continuous_at

/-- A monotone function continuous at the infimum of a nonempty set sends this infimum to
the infimum of the image of this set. -/
theorem Monotone.map_Inf_of_continuous_at' {f : Œ± ‚Üí Œ≤} {s : Set Œ±} (Cf : ContinuousAt f (inf s))
    (Mf : Monotone f) (hs : s.Nonempty) : f (inf s) = inf (f '' s) :=
  @Monotone.map_Sup_of_continuous_at' Œ±·µí·µà Œ≤·µí·µà _ _ _ _ _ _ f s Cf Mf.dual hs
#align monotone.map_Inf_of_continuous_at' Monotone.map_Inf_of_continuous_at'

/-- A monotone function `f` sending `top` to `top` and continuous at the infimum of a set sends
this infimum to the infimum of the image of this set. -/
theorem Monotone.map_Inf_of_continuous_at {f : Œ± ‚Üí Œ≤} {s : Set Œ±} (Cf : ContinuousAt f (inf s))
    (Mf : Monotone f) (ftop : f ‚ä§ = ‚ä§) : f (inf s) = inf (f '' s) :=
  @Monotone.map_Sup_of_continuous_at Œ±·µí·µà Œ≤·µí·µà _ _ _ _ _ _ f s Cf Mf.dual ftop
#align monotone.map_Inf_of_continuous_at Monotone.map_Inf_of_continuous_at

/-- A monotone function continuous at the indexed infimum over a nonempty `Sort` sends this indexed
infimum to the indexed infimum of the composition. -/
theorem Monotone.map_infi_of_continuous_at' {Œπ : Sort _} [Nonempty Œπ] {f : Œ± ‚Üí Œ≤} {g : Œπ ‚Üí Œ±}
    (Cf : ContinuousAt f (infi g)) (Mf : Monotone f) : f (‚®Ö i, g i) = ‚®Ö i, f (g i) :=
  @Monotone.map_supr_of_continuous_at' Œ±·µí·µà Œ≤·µí·µà _ _ _ _ _ _ Œπ _ f g Cf Mf.dual
#align monotone.map_infi_of_continuous_at' Monotone.map_infi_of_continuous_at'

/-- If a monotone function sending `top` to `top` is continuous at the indexed infimum over
a `Sort`, then it sends this indexed infimum to the indexed infimum of the composition. -/
theorem Monotone.map_infi_of_continuous_at {Œπ : Sort _} {f : Œ± ‚Üí Œ≤} {g : Œπ ‚Üí Œ±}
    (Cf : ContinuousAt f (infi g)) (Mf : Monotone f) (ftop : f ‚ä§ = ‚ä§) : f (infi g) = infi (f ‚àò g) :=
  @Monotone.map_supr_of_continuous_at Œ±·µí·µà Œ≤·µí·µà _ _ _ _ _ _ Œπ f g Cf Mf.dual ftop
#align monotone.map_infi_of_continuous_at Monotone.map_infi_of_continuous_at

/-- An antitone function continuous at the supremum of a nonempty set sends this supremum to
the infimum of the image of this set. -/
theorem Antitone.map_Sup_of_continuous_at' {f : Œ± ‚Üí Œ≤} {s : Set Œ±} (Cf : ContinuousAt f (sup s))
    (Af : Antitone f) (hs : s.Nonempty) : f (sup s) = inf (f '' s) :=
  Monotone.map_Sup_of_continuous_at' (show ContinuousAt (OrderDual.toDual ‚àò f) (sup s) from Cf) Af
    hs
#align antitone.map_Sup_of_continuous_at' Antitone.map_Sup_of_continuous_at'

/-- An antitone function `f` sending `bot` to `top` and continuous at the supremum of a set sends
this supremum to the infimum of the image of this set. -/
theorem Antitone.map_Sup_of_continuous_at {f : Œ± ‚Üí Œ≤} {s : Set Œ±} (Cf : ContinuousAt f (sup s))
    (Af : Antitone f) (fbot : f ‚ä• = ‚ä§) : f (sup s) = inf (f '' s) :=
  Monotone.map_Sup_of_continuous_at (show ContinuousAt (OrderDual.toDual ‚àò f) (sup s) from Cf) Af
    fbot
#align antitone.map_Sup_of_continuous_at Antitone.map_Sup_of_continuous_at

/-- An antitone function continuous at the indexed supremum over a nonempty `Sort` sends this
indexed supremum to the indexed infimum of the composition. -/
theorem Antitone.map_supr_of_continuous_at' {Œπ : Sort _} [Nonempty Œπ] {f : Œ± ‚Üí Œ≤} {g : Œπ ‚Üí Œ±}
    (Cf : ContinuousAt f (supr g)) (Af : Antitone f) : f (‚®Ü i, g i) = ‚®Ö i, f (g i) :=
  Monotone.map_supr_of_continuous_at' (show ContinuousAt (OrderDual.toDual ‚àò f) (supr g) from Cf) Af
#align antitone.map_supr_of_continuous_at' Antitone.map_supr_of_continuous_at'

/-- An antitone function sending `bot` to `top` is continuous at the indexed supremum over
a `Sort`, then it sends this indexed supremum to the indexed supremum of the composition. -/
theorem Antitone.map_supr_of_continuous_at {Œπ : Sort _} {f : Œ± ‚Üí Œ≤} {g : Œπ ‚Üí Œ±}
    (Cf : ContinuousAt f (supr g)) (Af : Antitone f) (fbot : f ‚ä• = ‚ä§) :
    f (‚®Ü i, g i) = ‚®Ö i, f (g i) :=
  Monotone.map_supr_of_continuous_at (show ContinuousAt (OrderDual.toDual ‚àò f) (supr g) from Cf) Af
    fbot
#align antitone.map_supr_of_continuous_at Antitone.map_supr_of_continuous_at

/-- An antitone function continuous at the infimum of a nonempty set sends this infimum to
the supremum of the image of this set. -/
theorem Antitone.map_Inf_of_continuous_at' {f : Œ± ‚Üí Œ≤} {s : Set Œ±} (Cf : ContinuousAt f (inf s))
    (Af : Antitone f) (hs : s.Nonempty) : f (inf s) = sup (f '' s) :=
  Monotone.map_Inf_of_continuous_at' (show ContinuousAt (OrderDual.toDual ‚àò f) (inf s) from Cf) Af
    hs
#align antitone.map_Inf_of_continuous_at' Antitone.map_Inf_of_continuous_at'

/-- An antitone function `f` sending `top` to `bot` and continuous at the infimum of a set sends
this infimum to the supremum of the image of this set. -/
theorem Antitone.map_Inf_of_continuous_at {f : Œ± ‚Üí Œ≤} {s : Set Œ±} (Cf : ContinuousAt f (inf s))
    (Af : Antitone f) (ftop : f ‚ä§ = ‚ä•) : f (inf s) = sup (f '' s) :=
  Monotone.map_Inf_of_continuous_at (show ContinuousAt (OrderDual.toDual ‚àò f) (inf s) from Cf) Af
    ftop
#align antitone.map_Inf_of_continuous_at Antitone.map_Inf_of_continuous_at

/-- An antitone function continuous at the indexed infimum over a nonempty `Sort` sends this indexed
infimum to the indexed supremum of the composition. -/
theorem Antitone.map_infi_of_continuous_at' {Œπ : Sort _} [Nonempty Œπ] {f : Œ± ‚Üí Œ≤} {g : Œπ ‚Üí Œ±}
    (Cf : ContinuousAt f (infi g)) (Af : Antitone f) : f (‚®Ö i, g i) = ‚®Ü i, f (g i) :=
  Monotone.map_infi_of_continuous_at' (show ContinuousAt (OrderDual.toDual ‚àò f) (infi g) from Cf) Af
#align antitone.map_infi_of_continuous_at' Antitone.map_infi_of_continuous_at'

/-- If an antitone function sending `top` to `bot` is continuous at the indexed infimum over
a `Sort`, then it sends this indexed infimum to the indexed supremum of the composition. -/
theorem Antitone.map_infi_of_continuous_at {Œπ : Sort _} {f : Œ± ‚Üí Œ≤} {g : Œπ ‚Üí Œ±}
    (Cf : ContinuousAt f (infi g)) (Af : Antitone f) (ftop : f ‚ä§ = ‚ä•) : f (infi g) = supr (f ‚àò g) :=
  Monotone.map_infi_of_continuous_at (show ContinuousAt (OrderDual.toDual ‚àò f) (infi g) from Cf) Af
    ftop
#align antitone.map_infi_of_continuous_at Antitone.map_infi_of_continuous_at

end CompleteLinearOrder

section ConditionallyCompleteLinearOrder

variable [ConditionallyCompleteLinearOrder Œ±] [TopologicalSpace Œ±] [OrderTopology Œ±]
  [ConditionallyCompleteLinearOrder Œ≤] [TopologicalSpace Œ≤] [OrderClosedTopology Œ≤] [Nonempty Œ≥]

theorem cSup_mem_closure {s : Set Œ±} (hs : s.Nonempty) (B : BddAbove s) : sup s ‚àà closure s :=
  (is_lub_cSup hs B).mem_closure hs
#align cSup_mem_closure cSup_mem_closure

theorem cInf_mem_closure {s : Set Œ±} (hs : s.Nonempty) (B : BddBelow s) : inf s ‚àà closure s :=
  (is_glb_cInf hs B).mem_closure hs
#align cInf_mem_closure cInf_mem_closure

theorem IsClosed.cSup_mem {s : Set Œ±} (hc : IsClosed s) (hs : s.Nonempty) (B : BddAbove s) :
    sup s ‚àà s :=
  (is_lub_cSup hs B).mem_of_is_closed hs hc
#align is_closed.cSup_mem IsClosed.cSup_mem

theorem IsClosed.cInf_mem {s : Set Œ±} (hc : IsClosed s) (hs : s.Nonempty) (B : BddBelow s) :
    inf s ‚àà s :=
  (is_glb_cInf hs B).mem_of_is_closed hs hc
#align is_closed.cInf_mem IsClosed.cInf_mem

/-- If a monotone function is continuous at the supremum of a nonempty bounded above set `s`,
then it sends this supremum to the supremum of the image of `s`. -/
theorem Monotone.map_cSup_of_continuous_at {f : Œ± ‚Üí Œ≤} {s : Set Œ±} (Cf : ContinuousAt f (sup s))
    (Mf : Monotone f) (ne : s.Nonempty) (H : BddAbove s) : f (sup s) = sup (f '' s) := by
  refine' ((is_lub_cSup (ne.image f) (Mf.map_bdd_above H)).unique _).symm
  refine' (is_lub_cSup Ne H).is_lub_of_tendsto (fun x hx y hy xy => Mf xy) Ne _
  exact Cf.mono_left inf_le_left
#align monotone.map_cSup_of_continuous_at Monotone.map_cSup_of_continuous_at

/-- If a monotone function is continuous at the indexed supremum of a bounded function on
a nonempty `Sort`, then it sends this supremum to the supremum of the composition. -/
theorem Monotone.map_csupr_of_continuous_at {f : Œ± ‚Üí Œ≤} {g : Œ≥ ‚Üí Œ±} (Cf : ContinuousAt f (‚®Ü i, g i))
    (Mf : Monotone f) (H : BddAbove (range g)) : f (‚®Ü i, g i) = ‚®Ü i, f (g i) := by
  rw [supr, Mf.map_cSup_of_continuous_at Cf (range_nonempty _) H, ‚Üê range_comp, supr]
#align monotone.map_csupr_of_continuous_at Monotone.map_csupr_of_continuous_at

/-- If a monotone function is continuous at the infimum of a nonempty bounded below set `s`,
then it sends this infimum to the infimum of the image of `s`. -/
theorem Monotone.map_cInf_of_continuous_at {f : Œ± ‚Üí Œ≤} {s : Set Œ±} (Cf : ContinuousAt f (inf s))
    (Mf : Monotone f) (ne : s.Nonempty) (H : BddBelow s) : f (inf s) = inf (f '' s) :=
  @Monotone.map_cSup_of_continuous_at Œ±·µí·µà Œ≤·µí·µà _ _ _ _ _ _ f s Cf Mf.dual Ne H
#align monotone.map_cInf_of_continuous_at Monotone.map_cInf_of_continuous_at

/-- A continuous monotone function sends indexed infimum to indexed infimum in conditionally
complete linear order, under a boundedness assumption. -/
theorem Monotone.map_cinfi_of_continuous_at {f : Œ± ‚Üí Œ≤} {g : Œ≥ ‚Üí Œ±} (Cf : ContinuousAt f (‚®Ö i, g i))
    (Mf : Monotone f) (H : BddBelow (range g)) : f (‚®Ö i, g i) = ‚®Ö i, f (g i) :=
  @Monotone.map_csupr_of_continuous_at Œ±·µí·µà Œ≤·µí·µà _ _ _ _ _ _ _ _ _ _ Cf Mf.dual H
#align monotone.map_cinfi_of_continuous_at Monotone.map_cinfi_of_continuous_at

/-- If an antitone function is continuous at the supremum of a nonempty bounded above set `s`,
then it sends this supremum to the infimum of the image of `s`. -/
theorem Antitone.map_cSup_of_continuous_at {f : Œ± ‚Üí Œ≤} {s : Set Œ±} (Cf : ContinuousAt f (sup s))
    (Af : Antitone f) (ne : s.Nonempty) (H : BddAbove s) : f (sup s) = inf (f '' s) :=
  Monotone.map_cSup_of_continuous_at (show ContinuousAt (OrderDual.toDual ‚àò f) (sup s) from Cf) Af
    Ne H
#align antitone.map_cSup_of_continuous_at Antitone.map_cSup_of_continuous_at

/-- If an antitone function is continuous at the indexed supremum of a bounded function on
a nonempty `Sort`, then it sends this supremum to the infimum of the composition. -/
theorem Antitone.map_csupr_of_continuous_at {f : Œ± ‚Üí Œ≤} {g : Œ≥ ‚Üí Œ±} (Cf : ContinuousAt f (‚®Ü i, g i))
    (Af : Antitone f) (H : BddAbove (range g)) : f (‚®Ü i, g i) = ‚®Ö i, f (g i) :=
  Monotone.map_csupr_of_continuous_at (show ContinuousAt (OrderDual.toDual ‚àò f) (‚®Ü i, g i) from Cf)
    Af H
#align antitone.map_csupr_of_continuous_at Antitone.map_csupr_of_continuous_at

/-- If an antitone function is continuous at the infimum of a nonempty bounded below set `s`,
then it sends this infimum to the supremum of the image of `s`. -/
theorem Antitone.map_cInf_of_continuous_at {f : Œ± ‚Üí Œ≤} {s : Set Œ±} (Cf : ContinuousAt f (inf s))
    (Af : Antitone f) (ne : s.Nonempty) (H : BddBelow s) : f (inf s) = sup (f '' s) :=
  Monotone.map_cInf_of_continuous_at (show ContinuousAt (OrderDual.toDual ‚àò f) (inf s) from Cf) Af
    Ne H
#align antitone.map_cInf_of_continuous_at Antitone.map_cInf_of_continuous_at

/-- A continuous antitone function sends indexed infimum to indexed supremum in conditionally
complete linear order, under a boundedness assumption. -/
theorem Antitone.map_cinfi_of_continuous_at {f : Œ± ‚Üí Œ≤} {g : Œ≥ ‚Üí Œ±} (Cf : ContinuousAt f (‚®Ö i, g i))
    (Af : Antitone f) (H : BddBelow (range g)) : f (‚®Ö i, g i) = ‚®Ü i, f (g i) :=
  Monotone.map_cinfi_of_continuous_at (show ContinuousAt (OrderDual.toDual ‚àò f) (‚®Ö i, g i) from Cf)
    Af H
#align antitone.map_cinfi_of_continuous_at Antitone.map_cinfi_of_continuous_at

/-- A monotone map has a limit to the left of any point `x`, equal to `Sup (f '' (Iio x))`. -/
theorem Monotone.tendsto_nhds_within_Iio {Œ± Œ≤ : Type _} [LinearOrder Œ±] [TopologicalSpace Œ±]
    [OrderTopology Œ±] [ConditionallyCompleteLinearOrder Œ≤] [TopologicalSpace Œ≤] [OrderTopology Œ≤]
    {f : Œ± ‚Üí Œ≤} (Mf : Monotone f) (x : Œ±) : Tendsto f (ùìù[<] x) (ùìù (sup (f '' iio x))) := by
  rcases eq_empty_or_nonempty (Iio x) with (h | h); ¬∑ simp [h]
  refine' tendsto_order.2 ‚ü®fun l hl => _, fun m hm => _‚ü©
  ¬∑ obtain ‚ü®z, zx, lz‚ü© : ‚àÉ a : Œ±, a < x ‚àß l < f a := by
      simpa only [mem_image, exists_prop, exists_exists_and_eq_and] using
        exists_lt_of_lt_cSup (nonempty_image_iff.2 h) hl
    exact
      (mem_nhds_within_Iio_iff_exists_Ioo_subset' zx).2
        ‚ü®z, zx, fun y hy => lz.trans_le (Mf hy.1.le)‚ü©
  ¬∑ filter_upwards [self_mem_nhds_within] with _ hy
    apply lt_of_le_of_lt _ hm
    exact le_cSup (Mf.map_bdd_above bdd_above_Iio) (mem_image_of_mem _ hy)
#align monotone.tendsto_nhds_within_Iio Monotone.tendsto_nhds_within_Iio

/-- A monotone map has a limit to the right of any point `x`, equal to `Inf (f '' (Ioi x))`. -/
theorem Monotone.tendsto_nhds_within_Ioi {Œ± Œ≤ : Type _} [LinearOrder Œ±] [TopologicalSpace Œ±]
    [OrderTopology Œ±] [ConditionallyCompleteLinearOrder Œ≤] [TopologicalSpace Œ≤] [OrderTopology Œ≤]
    {f : Œ± ‚Üí Œ≤} (Mf : Monotone f) (x : Œ±) : Tendsto f (ùìù[>] x) (ùìù (inf (f '' ioi x))) :=
  @Monotone.tendsto_nhds_within_Iio Œ±·µí·µà Œ≤·µí·µà _ _ _ _ _ _ f Mf.dual x
#align monotone.tendsto_nhds_within_Ioi Monotone.tendsto_nhds_within_Ioi

end ConditionallyCompleteLinearOrder

section NhdsWithPos

section LinearOrderedAddCommGroup

variable [LinearOrderedAddCommGroup Œ±] [TopologicalSpace Œ±] [OrderTopology Œ±]

theorem eventually_nhds_within_pos_mem_Ioo {Œµ : Œ±} (h : 0 < Œµ) : ‚àÄ·∂† x in ùìù[>] 0, x ‚àà ioo 0 Œµ := by
  rw [eventually_iff, mem_nhds_within]
  exact ‚ü®Ioo (-Œµ) Œµ, is_open_Ioo, by simp [h], fun x hx => ‚ü®hx.2, hx.1.2‚ü©‚ü©
#align eventually_nhds_within_pos_mem_Ioo eventually_nhds_within_pos_mem_Ioo

theorem eventually_nhds_within_pos_mem_Ioc {Œµ : Œ±} (h : 0 < Œµ) : ‚àÄ·∂† x in ùìù[>] 0, x ‚àà ioc 0 Œµ :=
  (eventually_nhds_within_pos_mem_Ioo h).mono Ioo_subset_Ioc_self
#align eventually_nhds_within_pos_mem_Ioc eventually_nhds_within_pos_mem_Ioc

end LinearOrderedAddCommGroup

end NhdsWithPos

end OrderTopology

