import Mathbin.MeasureTheory.Measure.Hausdorff

/-!
# Hausdorff dimension

The Hausdorff dimension of a set `X` in an (extended) metric space is the unique number
`dimH s : ‚Ñù‚â•0‚àû` such that for any `d : ‚Ñù‚â•0` we have

- `ŒºH[d] s = 0` if `dimH s < d`, and
- `ŒºH[d] s = ‚àû` if `d < dimH s`.

In this file we define `dimH s` to be the Hausdorff dimension of `s`, then prove some basic
properties of Hausdorff dimension.

## Main definitions

* `measure_theory.dimH`: the Hausdorff dimension of a set. For the Hausdorff dimension of the whole
  space we use `measure_theory.dimH (set.univ : set X)`.

## Main results

### Basic properties of Hausdorff dimension

* `hausdorff_measure_of_lt_dimH`, `dimH_le_of_hausdorff_measure_ne_top`,
  `le_dimH_of_hausdorff_measure_eq_top`, `hausdorff_measure_of_dimH_lt`, `measure_zero_of_dimH_lt`,
  `le_dimH_of_hausdorff_measure_ne_zero`, `dimH_of_hausdorff_measure_ne_zero_ne_top`: various forms
  of the characteristic property of the Hausdorff dimension;
* `dimH_union`: the Hausdorff dimension of the union of two sets is the maximum of their Hausdorff
  dimensions.
* `dimH_Union`, `dimH_bUnion`, `dimH_sUnion`: the Hausdorff dimension of a countable union of sets
  is the supremum of their Hausdorff dimensions;
* `dimH_empty`, `dimH_singleton`, `set.subsingleton.dimH_zero`, `set.countable.dimH_zero` : `dimH s
  = 0` whenever `s` is countable;

### (Pre)images under (anti)lipschitz and H√∂lder continuous maps

* `holder_with.dimH_image_le` etc: if `f : X ‚Üí Y` is H√∂lder continuous with exponent `r > 0`, then
  for any `s`, `dimH (f '' s) ‚â§ dimH s / r`. We prove versions of this statement for `holder_with`,
  `holder_on_with`, and locally H√∂lder maps, as well as for `set.image` and `set.range`.
* `lipschitz_with.dimH_image_le` etc: Lipschitz continuous maps do not increase the Hausdorff
  dimension of sets.
* for a map that is known to be both Lipschitz and antilipschitz (e.g., for an `isometry` or
  a `continuous_linear_equiv`) we also prove `dimH (f '' s) = dimH s`.

### Hausdorff measure in `‚Ñù‚Åø`

* `real.dimH_of_nonempty_interior`: if `s` is a set in a finite dimensional real vector space `E`
  with nonempty interior, then the Hausdorff dimension of `s` is equal to the dimension of `E`.
* `dense_compl_of_dimH_lt_finrank`: if `s` is a set in a finite dimensional real vector space `E`
  with Hausdorff dimension strictly less than the dimension of `E`, the `s` has a dense complement.
* `times_cont_diff.dense_compl_range_of_finrank_lt_finrank`: the complement to the range of a `C¬π`
  smooth map is dense provided that the dimension of the domain is strictly less than the dimension
  of the codomain.

## Notations

We use the following notation localized in `measure_theory`. It is defined in
`measure_theory.measure.hausdorff`.

- `ŒºH[d]` : `measure_theory.measure.hausdorff_measure d`

## Implementation notes

* The definition of `dimH` explicitly uses `borel X` as a measurable space structure. This way we
  can formulate lemmas about Hausdorff dimension without assuming that the environment has a
  `[measurable_space X]` instance that is equal but possibly not defeq to `borel X`.

  Lemma `dimH_def` unfolds this definition using whatever `[measurable_space X]` instance we have in
  the environment (as long as it is equal to `borel X`).

* The definition `dimH` is irreducible; use API lemmas or `dimH_def` instead.

## Tags

Hausdorff measure, Hausdorff dimension, dimension
-/


open_locale MeasureTheory Ennreal Nnreal TopologicalSpace

open MeasureTheory MeasureTheory.Measure Set TopologicalSpace FiniteDimensional Filter

variable{Œπ X Y : Type _}[EmetricSpace X][EmetricSpace Y]

-- error in Topology.MetricSpace.HausdorffDimension: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
/-- Hausdorff dimension of a set in an (e)metric space. -/
@[irreducible]
noncomputable
def dimH (s : set X) : ¬´expr‚Ñù‚â•0‚àû¬ª() :=
by letI [] [] [":=", expr borel X]; exact [expr ¬´expr‚®Ü , ¬ª((d : ¬´expr‚Ñù‚â•0¬ª())
  (hd : ¬´expr = ¬ª(@hausdorff_measure X _ _ ‚ü®rfl‚ü© d s, ¬´expr‚àû¬ª())), d)]

/-!
### Basic properties
-/


section Measurable

variable[MeasurableSpace X][BorelSpace X]

/-- Unfold the definition of `dimH` using `[measurable_space X] [borel_space X]` from the
environment. -/
theorem dimH_def (s : Set X) : dimH s = ‚®Ü(d :  ‚Ñù‚â•0 )(hd : ŒºH[d] s = ‚àû), d :=
  by 
    (
      obtain rfl : ‚ÄπMeasurableSpace X‚Ä∫ = borel X := BorelSpace.measurable_eq)
    rw [dimH]

theorem hausdorff_measure_of_lt_dimH {s : Set X} {d :  ‚Ñù‚â•0 } (h : ¬´expr‚Üë ¬ª d < dimH s) : ŒºH[d] s = ‚àû :=
  by 
    simp only [dimH_def, lt_supr_iff] at h 
    rcases h with ‚ü®d', hsd', hdd'‚ü©
    rw [Ennreal.coe_lt_coe, ‚ÜêNnreal.coe_lt_coe] at hdd' 
    exact top_unique (hsd' ‚ñ∏ hausdorff_measure_mono hdd'.le _)

theorem dimH_le {s : Set X} {d : ‚Ñù‚â•0‚àû} (H : ‚àÄ (d' :  ‚Ñù‚â•0 ), ŒºH[d'] s = ‚àû ‚Üí ¬´expr‚Üë ¬ª d' ‚â§ d) : dimH s ‚â§ d :=
  (dimH_def s).trans_le$ bsupr_le H

theorem dimH_le_of_hausdorff_measure_ne_top {s : Set X} {d :  ‚Ñù‚â•0 } (h : ŒºH[d] s ‚â† ‚àû) : dimH s ‚â§ d :=
  le_of_not_lt‚Çì$ mt hausdorff_measure_of_lt_dimH h

theorem le_dimH_of_hausdorff_measure_eq_top {s : Set X} {d :  ‚Ñù‚â•0 } (h : ŒºH[d] s = ‚àû) : ¬´expr‚Üë ¬ª d ‚â§ dimH s :=
  by 
    rw [dimH_def]
    exact le_bsupr d h

theorem hausdorff_measure_of_dimH_lt {s : Set X} {d :  ‚Ñù‚â•0 } (h : dimH s < d) : ŒºH[d] s = 0 :=
  by 
    rw [dimH_def] at h 
    rcases Ennreal.lt_iff_exists_nnreal_btwn.1 h with ‚ü®d', hsd', hd'd‚ü©
    rw [Ennreal.coe_lt_coe, ‚ÜêNnreal.coe_lt_coe] at hd'd 
    exact (hausdorff_measure_zero_or_top hd'd s).resolve_right fun h => hsd'.not_le (le_bsupr d' h)

theorem measure_zero_of_dimH_lt {Œº : Measure‚Çì X} {d :  ‚Ñù‚â•0 } (h : Œº ‚â™ ŒºH[d]) {s : Set X} (hd : dimH s < d) : Œº s = 0 :=
  h$ hausdorff_measure_of_dimH_lt hd

theorem le_dimH_of_hausdorff_measure_ne_zero {s : Set X} {d :  ‚Ñù‚â•0 } (h : ŒºH[d] s ‚â† 0) : ¬´expr‚Üë ¬ª d ‚â§ dimH s :=
  le_of_not_lt‚Çì$ mt hausdorff_measure_of_dimH_lt h

theorem dimH_of_hausdorff_measure_ne_zero_ne_top {d :  ‚Ñù‚â•0 } {s : Set X} (h : ŒºH[d] s ‚â† 0) (h' : ŒºH[d] s ‚â† ‚àû) :
  dimH s = d :=
  le_antisymm‚Çì (dimH_le_of_hausdorff_measure_ne_top h') (le_dimH_of_hausdorff_measure_ne_zero h)

end Measurable

-- error in Topology.MetricSpace.HausdorffDimension: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
@[mono #[]] theorem dimH_mono {s t : set X} (h : ¬´expr ‚äÜ ¬ª(s, t)) : ¬´expr ‚â§ ¬ª(dimH s, dimH t) :=
begin
  letI [] [] [":=", expr borel X],
  haveI [] [":", expr borel_space X] [":=", expr ‚ü®rfl‚ü©],
  exact [expr dimH_le (Œª
    d hd, ¬´expr $ ¬ª(le_dimH_of_hausdorff_measure_eq_top, ¬´expr $ ¬ª(top_unique, ¬´expr ‚ñ∏ ¬ª(hd, measure_mono h))))]
end

theorem dimH_subsingleton {s : Set X} (h : s.subsingleton) : dimH s = 0 :=
  by 
    simp [dimH, h.measure_zero]

alias dimH_subsingleton ‚Üê Set.Subsingleton.dimH_zero

@[simp]
theorem dimH_empty : dimH (‚àÖ : Set X) = 0 :=
  subsingleton_empty.dimH_zero

@[simp]
theorem dimH_singleton (x : X) : dimH ({x} : Set X) = 0 :=
  subsingleton_singleton.dimH_zero

-- error in Topology.MetricSpace.HausdorffDimension: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
@[simp]
theorem dimH_Union [encodable Œπ] (s : Œπ ‚Üí set X) : ¬´expr = ¬ª(dimH ¬´expr‚ãÉ , ¬ª((i), s i), ¬´expr‚®Ü , ¬ª((i), dimH (s i))) :=
begin
  letI [] [] [":=", expr borel X],
  haveI [] [":", expr borel_space X] [":=", expr ‚ü®rfl‚ü©],
  refine [expr le_antisymm ¬´expr $ ¬ª(dimH_le, Œª
    d hd, _) ¬´expr $ ¬ª(supr_le, Œª i, ¬´expr $ ¬ª(dimH_mono, subset_Union _ _))],
  contrapose ["!"] [ident hd],
  have [] [":", expr ‚àÄ i, ¬´expr = ¬ª(¬´exprŒºH[ ]¬ª(d) (s i), 0)] [],
  from [expr Œª i, hausdorff_measure_of_dimH_lt ((le_supr (Œª i, dimH (s i)) i).trans_lt hd)],
  rw [expr measure_Union_null this] [],
  exact [expr ennreal.zero_ne_top]
end

-- error in Topology.MetricSpace.HausdorffDimension: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
@[simp]
theorem dimH_bUnion
{s : set Œπ}
(hs : countable s)
(t : Œπ ‚Üí set X) : ¬´expr = ¬ª(dimH ¬´expr‚ãÉ , ¬ª((i ¬´expr ‚àà ¬ª s), t i), ¬´expr‚®Ü , ¬ª((i ¬´expr ‚àà ¬ª s), dimH (t i))) :=
begin
  haveI [] [] [":=", expr hs.to_encodable],
  rw ["[", expr bUnion_eq_Union, ",", expr dimH_Union, ",", "<-", expr supr_subtype'', "]"] []
end

@[simp]
theorem dimH_sUnion {S : Set (Set X)} (hS : countable S) : dimH (‚ãÉ‚ÇÄS) = ‚®Ü(s : _)(_ : s ‚àà S), dimH s :=
  by 
    rw [sUnion_eq_bUnion, dimH_bUnion hS]

@[simp]
theorem dimH_union (s t : Set X) : dimH (s ‚à™ t) = max (dimH s) (dimH t) :=
  by 
    rw [union_eq_Union, dimH_Union, supr_bool_eq, cond, cond, Ennreal.sup_eq_max]

theorem dimH_countable {s : Set X} (hs : countable s) : dimH s = 0 :=
  bUnion_of_singleton s ‚ñ∏
    by 
      simp only [dimH_bUnion hs, dimH_singleton, Ennreal.supr_zero_eq_zero]

alias dimH_countable ‚Üê Set.Countable.dimH_zero

theorem dimH_finite {s : Set X} (hs : finite s) : dimH s = 0 :=
  hs.countable.dimH_zero

alias dimH_finite ‚Üê Set.Finite.dimH_zero

@[simp]
theorem dimH_coe_finset (s : Finset X) : dimH (s : Set X) = 0 :=
  s.finite_to_set.dimH_zero

alias dimH_coe_finset ‚Üê Finset.dimH_zero

/-!
### Hausdorff dimension as the supremum of local Hausdorff dimensions
-/


section 

variable[second_countable_topology X]

/-- If `r` is less than the Hausdorff dimension of a set `s` in an (extended) metric space with
second countable topology, then there exists a point `x ‚àà s` such that every neighborhood
`t` of `x` within `s` has Hausdorff dimension greater than `r`. -/
theorem exists_mem_nhds_within_lt_dimH_of_lt_dimH {s : Set X} {r : ‚Ñù‚â•0‚àû} (h : r < dimH s) :
  ‚àÉ (x : _)(_ : x ‚àà s), ‚àÄ t (_ : t ‚àà ùìù[s] x), r < dimH t :=
  by 
    contrapose! h 
    choose! t htx htr using h 
    rcases countable_cover_nhds_within htx with ‚ü®S, hSs, hSc, hSU‚ü©
    calc dimH s ‚â§ dimH (‚ãÉ(x : _)(_ : x ‚àà S), t x) := dimH_mono hSU _ = ‚®Ü(x : _)(_ : x ‚àà S), dimH (t x) :=
      dimH_bUnion hSc _ _ ‚â§ r := bsupr_le fun x hx => htr x (hSs hx)

/-- In an (extended) metric space with second countable topology, the Hausdorff dimension
of a set `s` is the supremum over `x ‚àà s` of the limit superiors of `dimH t` along
`(ùìù[s] x).lift' powerset`. -/
theorem bsupr_limsup_dimH (s : Set X) : (‚®Ü(x : _)(_ : x ‚àà s), limsup ((ùìù[s] x).lift' powerset) dimH) = dimH s :=
  by 
    refine' le_antisymm‚Çì (bsupr_le$ fun x hx => _) _
    ¬∑
      refine'
        Limsup_le_of_le
          (by 
            inferAutoParam)
          (eventually_map.2 _)
      exact eventually_lift'_powerset.2 ‚ü®s, self_mem_nhds_within, fun t => dimH_mono‚ü©
    ¬∑
      refine' le_of_forall_ge_of_dense fun r hr => _ 
      rcases exists_mem_nhds_within_lt_dimH_of_lt_dimH hr with ‚ü®x, hxs, hxr‚ü©
      refine' le_bsupr_of_le x hxs _ 
      rw [limsup_eq]
      refine' le_Inf fun b hb => _ 
      rcases eventually_lift'_powerset.1 hb with ‚ü®t, htx, ht‚ü©
      exact (hxr t htx).le.trans (ht t subset.rfl)

/-- In an (extended) metric space with second countable topology, the Hausdorff dimension
of a set `s` is the supremum over all `x` of the limit superiors of `dimH t` along
`(ùìù[s] x).lift' powerset`. -/
theorem supr_limsup_dimH (s : Set X) : (‚®Üx, limsup ((ùìù[s] x).lift' powerset) dimH) = dimH s :=
  by 
    refine' le_antisymm‚Çì (supr_le$ fun x => _) _
    ¬∑
      refine'
        Limsup_le_of_le
          (by 
            inferAutoParam)
          (eventually_map.2 _)
      exact eventually_lift'_powerset.2 ‚ü®s, self_mem_nhds_within, fun t => dimH_mono‚ü©
    ¬∑
      rw [‚Üêbsupr_limsup_dimH]
      exact bsupr_le_supr _ _

end 

/-!
### Hausdorff dimension and H√∂lder continuity
-/


variable{C K r :  ‚Ñù‚â•0 }{f : X ‚Üí Y}{s t : Set X}

-- error in Topology.MetricSpace.HausdorffDimension: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
/-- If `f` is a H√∂lder continuous map with exponent `r > 0`, then `dimH (f '' s) ‚â§ dimH s / r`. -/
theorem holder_on_with.dimH_image_le
(h : holder_on_with C r f s)
(hr : ¬´expr < ¬ª(0, r)) : ¬´expr ‚â§ ¬ª(dimH ¬´expr '' ¬ª(f, s), ¬´expr / ¬ª(dimH s, r)) :=
begin
  letI [] [] [":=", expr borel X],
  haveI [] [":", expr borel_space X] [":=", expr ‚ü®rfl‚ü©],
  letI [] [] [":=", expr borel Y],
  haveI [] [":", expr borel_space Y] [":=", expr ‚ü®rfl‚ü©],
  refine [expr dimH_le (Œª d hd, _)],
  have [] [] [":=", expr h.hausdorff_measure_image_le hr d.coe_nonneg],
  rw ["[", expr hd, ",", expr ennreal.coe_rpow_of_nonneg _ d.coe_nonneg, ",", expr top_le_iff, "]"] ["at", ident this],
  have [ident Hrd] [":", expr ¬´expr = ¬ª(¬´exprŒºH[ ]¬ª((¬´expr * ¬ª(r, d) : ¬´expr‚Ñù‚â•0¬ª())) s, ¬´expr‚ä§¬ª())] [],
  { contrapose [] [ident this],
    exact [expr ennreal.mul_ne_top ennreal.coe_ne_top this] },
  rw ["[", expr ennreal.le_div_iff_mul_le, ",", expr mul_comm, ",", "<-", expr ennreal.coe_mul, "]"] [],
  exacts ["[", expr le_dimH_of_hausdorff_measure_eq_top Hrd, ",", expr or.inl (mt ennreal.coe_eq_zero.1 hr.ne'), ",", expr or.inl ennreal.coe_ne_top, "]"]
end

namespace HolderWith

/-- If `f : X ‚Üí Y` is H√∂lder continuous with a positive exponent `r`, then the Hausdorff dimension
of the image of a set `s` is at most `dimH s / r`. -/
theorem dimH_image_le (h : HolderWith C r f) (hr : 0 < r) (s : Set X) : dimH (f '' s) ‚â§ dimH s / r :=
  (h.holder_on_with s).dimH_image_le hr

/-- If `f` is a H√∂lder continuous map with exponent `r > 0`, then the Hausdorff dimension of its
range is at most the Hausdorff dimension of its domain divided by `r`. -/
theorem dimH_range_le (h : HolderWith C r f) (hr : 0 < r) : dimH (range f) ‚â§ dimH (univ : Set X) / r :=
  @image_univ _ _ f ‚ñ∏ h.dimH_image_le hr univ

end HolderWith

/-- If `s` is a set in a space `X` with second countable topology and `f : X ‚Üí Y` is H√∂lder
continuous in a neighborhood within `s` of every point `x ‚àà s` with the same positive exponent `r`
but possibly different coefficients, then the Hausdorff dimension of the image `f '' s` is at most
the Hausdorff dimension of `s` divided by `r`. -/
theorem dimH_image_le_of_locally_holder_on [second_countable_topology X] {r :  ‚Ñù‚â•0 } {f : X ‚Üí Y} (hr : 0 < r)
  {s : Set X} (hf : ‚àÄ x (_ : x ‚àà s), ‚àÉ (C :  ‚Ñù‚â•0 )(t : _)(_ : t ‚àà ùìù[s] x), HolderOnWith C r f t) :
  dimH (f '' s) ‚â§ dimH s / r :=
  by 
    choose! C t htn hC using hf 
    rcases countable_cover_nhds_within htn with ‚ü®u, hus, huc, huU‚ü©
    replace huU := inter_eq_self_of_subset_left huU 
    rw [inter_bUnion] at huU 
    rw [‚ÜêhuU, image_bUnion, dimH_bUnion huc, dimH_bUnion huc]
    simp only [Ennreal.supr_div]
    exact bsupr_le_bsupr fun x hx => ((hC x (hus hx)).mono (inter_subset_right _ _)).dimH_image_le hr

/-- If `f : X ‚Üí Y` is H√∂lder continuous in a neighborhood of every point `x : X` with the same
positive exponent `r` but possibly different coefficients, then the Hausdorff dimension of the range
of `f` is at most the Hausdorff dimension of `X` divided by `r`. -/
theorem dimH_range_le_of_locally_holder_on [second_countable_topology X] {r :  ‚Ñù‚â•0 } {f : X ‚Üí Y} (hr : 0 < r)
  (hf : ‚àÄ (x : X), ‚àÉ (C :  ‚Ñù‚â•0 )(s : _)(_ : s ‚àà ùìù x), HolderOnWith C r f s) :
  dimH (range f) ‚â§ dimH (univ : Set X) / r :=
  by 
    rw [‚Üêimage_univ]
    refine' dimH_image_le_of_locally_holder_on hr fun x _ => _ 
    simpa only [exists_prop, nhds_within_univ] using hf x

/-!
### Hausdorff dimension and Lipschitz continuity
-/


/-- If `f : X ‚Üí Y` is Lipschitz continuous on `s`, then `dimH (f '' s) ‚â§ dimH s`. -/
theorem LipschitzOnWith.dimH_image_le (h : LipschitzOnWith K f s) : dimH (f '' s) ‚â§ dimH s :=
  by 
    simpa using h.holder_on_with.dimH_image_le zero_lt_one

namespace LipschitzWith

/-- If `f` is a Lipschitz continuous map, then `dimH (f '' s) ‚â§ dimH s`. -/
theorem dimH_image_le (h : LipschitzWith K f) (s : Set X) : dimH (f '' s) ‚â§ dimH s :=
  (h.lipschitz_on_with s).dimH_image_le

/-- If `f` is a Lipschitz continuous map, then the Hausdorff dimension of its range is at most the
Hausdorff dimension of its domain. -/
theorem dimH_range_le (h : LipschitzWith K f) : dimH (range f) ‚â§ dimH (univ : Set X) :=
  @image_univ _ _ f ‚ñ∏ h.dimH_image_le univ

end LipschitzWith

-- error in Topology.MetricSpace.HausdorffDimension: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
/-- If `s` is a set in an extended metric space `X` with second countable topology and `f : X ‚Üí Y`
is Lipschitz in a neighborhood within `s` of every point `x ‚àà s`, then the Hausdorff dimension of
the image `f '' s` is at most the Hausdorff dimension of `s`. -/
theorem dimH_image_le_of_locally_lipschitz_on
[second_countable_topology X]
{f : X ‚Üí Y}
{s : set X}
(hf : ‚àÄ
 x ¬´expr ‚àà ¬ª s, ¬´expr‚àÉ , ¬ª((C : ¬´expr‚Ñù‚â•0¬ª())
  (t ¬´expr ‚àà ¬ª ¬´exprùìù[ ] ¬ª(s, x)), lipschitz_on_with C f t)) : ¬´expr ‚â§ ¬ª(dimH ¬´expr '' ¬ª(f, s), dimH s) :=
begin
  have [] [":", expr ‚àÄ
   x ¬´expr ‚àà ¬ª s, ¬´expr‚àÉ , ¬ª((C : ¬´expr‚Ñù‚â•0¬ª()) (t ¬´expr ‚àà ¬ª ¬´exprùìù[ ] ¬ª(s, x)), holder_on_with C 1 f t)] [],
  by simpa [] [] ["only"] ["[", expr holder_on_with_one, "]"] [] ["using", expr hf],
  simpa [] [] ["only"] ["[", expr ennreal.coe_one, ",", expr ennreal.div_one, "]"] [] ["using", expr dimH_image_le_of_locally_holder_on zero_lt_one this]
end

/-- If `f : X ‚Üí Y` is Lipschitz in a neighborhood of each point `x : X`, then the Hausdorff
dimension of `range f` is at most the Hausdorff dimension of `X`. -/
theorem dimH_range_le_of_locally_lipschitz_on [second_countable_topology X] {f : X ‚Üí Y}
  (hf : ‚àÄ (x : X), ‚àÉ (C :  ‚Ñù‚â•0 )(s : _)(_ : s ‚àà ùìù x), LipschitzOnWith C f s) : dimH (range f) ‚â§ dimH (univ : Set X) :=
  by 
    rw [‚Üêimage_univ]
    refine' dimH_image_le_of_locally_lipschitz_on fun x _ => _ 
    simpa only [exists_prop, nhds_within_univ] using hf x

namespace AntilipschitzWith

-- error in Topology.MetricSpace.HausdorffDimension: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
theorem dimH_preimage_le (hf : antilipschitz_with K f) (s : set Y) : ¬´expr ‚â§ ¬ª(dimH ¬´expr ‚Åª¬π' ¬ª(f, s), dimH s) :=
begin
  letI [] [] [":=", expr borel X],
  haveI [] [":", expr borel_space X] [":=", expr ‚ü®rfl‚ü©],
  letI [] [] [":=", expr borel Y],
  haveI [] [":", expr borel_space Y] [":=", expr ‚ü®rfl‚ü©],
  refine [expr dimH_le (Œª d hd, le_dimH_of_hausdorff_measure_eq_top _)],
  have [] [] [":=", expr hf.hausdorff_measure_preimage_le d.coe_nonneg s],
  rw ["[", expr hd, ",", expr top_le_iff, "]"] ["at", ident this],
  contrapose ["!"] [ident this],
  exact [expr ennreal.mul_ne_top (by simp [] [] [] [] [] []) this]
end

theorem le_dimH_image (hf : AntilipschitzWith K f) (s : Set X) : dimH s ‚â§ dimH (f '' s) :=
  calc dimH s ‚â§ dimH (f ‚Åª¬π' (f '' s)) := dimH_mono (subset_preimage_image _ _)
    _ ‚â§ dimH (f '' s) := hf.dimH_preimage_le _
    

end AntilipschitzWith

/-!
### Isometries preserve Hausdorff dimension
-/


theorem Isometry.dimH_image (hf : Isometry f) (s : Set X) : dimH (f '' s) = dimH s :=
  le_antisymm‚Çì (hf.lipschitz.dimH_image_le _) (hf.antilipschitz.le_dimH_image _)

namespace Isometric

@[simp]
theorem dimH_image (e : X ‚âÉ·µ¢ Y) (s : Set X) : dimH (e '' s) = dimH s :=
  e.isometry.dimH_image s

@[simp]
theorem dimH_preimage (e : X ‚âÉ·µ¢ Y) (s : Set Y) : dimH (e ‚Åª¬π' s) = dimH s :=
  by 
    rw [‚Üêe.image_symm, e.symm.dimH_image]

theorem dimH_univ (e : X ‚âÉ·µ¢ Y) : dimH (univ : Set X) = dimH (univ : Set Y) :=
  by 
    rw [‚Üêe.dimH_preimage univ, preimage_univ]

end Isometric

namespace ContinuousLinearEquiv

variable{ùïú E F : Type _}[NondiscreteNormedField ùïú][NormedGroup E][NormedSpace ùïú E][NormedGroup F][NormedSpace ùïú F]

@[simp]
theorem dimH_image (e : E ‚âÉL[ùïú] F) (s : Set E) : dimH (e '' s) = dimH s :=
  le_antisymm‚Çì (e.lipschitz.dimH_image_le s)$
    by 
      simpa only [e.symm_image_image] using e.symm.lipschitz.dimH_image_le (e '' s)

@[simp]
theorem dimH_preimage (e : E ‚âÉL[ùïú] F) (s : Set F) : dimH (e ‚Åª¬π' s) = dimH s :=
  by 
    rw [‚Üêe.image_symm_eq_preimage, e.symm.dimH_image]

theorem dimH_univ (e : E ‚âÉL[ùïú] F) : dimH (univ : Set E) = dimH (univ : Set F) :=
  by 
    rw [‚Üêe.dimH_preimage, preimage_univ]

end ContinuousLinearEquiv

/-!
### Hausdorff dimension in a real vector space
-/


namespace Real

variable{E : Type _}[Fintype Œπ][NormedGroup E][NormedSpace ‚Ñù E][FiniteDimensional ‚Ñù E]

-- error in Topology.MetricSpace.HausdorffDimension: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
theorem dimH_ball_pi
(x : Œπ ‚Üí expr‚Ñù())
{r : expr‚Ñù()}
(hr : ¬´expr < ¬ª(0, r)) : ¬´expr = ¬ª(dimH (metric.ball x r), fintype.card Œπ) :=
begin
  casesI [expr is_empty_or_nonempty Œπ] [],
  { rwa ["[", expr dimH_subsingleton, ",", expr eq_comm, ",", expr nat.cast_eq_zero, ",", expr fintype.card_eq_zero_iff, "]"] [],
    exact [expr Œª x _ y _, subsingleton.elim x y] },
  { rw ["<-", expr ennreal.coe_nat] [],
    have [] [":", expr ¬´expr = ¬ª(¬´exprŒºH[ ]¬ª(fintype.card Œπ) (metric.ball x r), ennreal.of_real ¬´expr ^ ¬ª(¬´expr * ¬ª(2, r), fintype.card Œπ))] [],
    by rw ["[", expr hausdorff_measure_pi_real, ",", expr real.volume_pi_ball _ hr, "]"] [],
    refine [expr dimH_of_hausdorff_measure_ne_zero_ne_top _ _]; rw ["[", expr nnreal.coe_nat_cast, ",", expr this, "]"] [],
    { simp [] [] [] ["[", expr pow_pos (mul_pos zero_lt_two hr), "]"] [] [] },
    { exact [expr ennreal.of_real_ne_top] } }
end

theorem dimH_ball_pi_fin {n : ‚Ñï} (x : Fin‚Çì n ‚Üí ‚Ñù) {r : ‚Ñù} (hr : 0 < r) : dimH (Metric.Ball x r) = n :=
  by 
    rw [dimH_ball_pi x hr, Fintype.card_fin]

theorem dimH_univ_pi (Œπ : Type _) [Fintype Œπ] : dimH (univ : Set (Œπ ‚Üí ‚Ñù)) = Fintype.card Œπ :=
  by 
    simp only [‚ÜêMetric.Union_ball_nat_succ (0 : Œπ ‚Üí ‚Ñù), dimH_Union, dimH_ball_pi _ (Nat.cast_add_one_pos _), supr_const]

theorem dimH_univ_pi_fin (n : ‚Ñï) : dimH (univ : Set (Fin‚Çì n ‚Üí ‚Ñù)) = n :=
  by 
    rw [dimH_univ_pi, Fintype.card_fin]

-- error in Topology.MetricSpace.HausdorffDimension: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
theorem dimH_of_mem_nhds {x : E} {s : set E} (h : ¬´expr ‚àà ¬ª(s, exprùìù() x)) : ¬´expr = ¬ª(dimH s, finrank expr‚Ñù() E) :=
begin
  have [ident e] [":", expr ¬´expr ‚âÉL[ ] ¬ª(E, expr‚Ñù(), fin (finrank expr‚Ñù() E) ‚Üí expr‚Ñù())] [],
  from [expr continuous_linear_equiv.of_finrank_eq (finite_dimensional.finrank_fin_fun expr‚Ñù()).symm],
  rw ["<-", expr e.dimH_image] [],
  refine [expr le_antisymm _ _],
  { exact [expr (dimH_mono (subset_univ _)).trans_eq (dimH_univ_pi_fin _)] },
  { have [] [":", expr ¬´expr ‚àà ¬ª(¬´expr '' ¬ª(e, s), exprùìù() (e x))] [],
    by { rw ["<-", expr e.map_nhds_eq] [],
      exact [expr image_mem_map h] },
    rcases [expr metric.nhds_basis_ball.mem_iff.1 this, "with", "‚ü®", ident r, ",", ident hr0, ",", ident hr, "‚ü©"],
    simpa [] [] ["only"] ["[", expr dimH_ball_pi_fin (e x) hr0, "]"] [] ["using", expr dimH_mono hr] }
end

theorem dimH_of_nonempty_interior {s : Set E} (h : (Interior s).Nonempty) : dimH s = finrank ‚Ñù E :=
  let ‚ü®x, hx‚ü© := h 
  dimH_of_mem_nhds (mem_interior_iff_mem_nhds.1 hx)

variable(E)

theorem dimH_univ_eq_finrank : dimH (univ : Set E) = finrank ‚Ñù E :=
  dimH_of_mem_nhds (@univ_mem _ (ùìù 0))

theorem dimH_univ : dimH (univ : Set ‚Ñù) = 1 :=
  by 
    rw [dimH_univ_eq_finrank ‚Ñù, FiniteDimensional.finrank_self, Nat.cast_one]

end Real

variable{E F : Type _}[NormedGroup E][NormedSpace ‚Ñù E][FiniteDimensional ‚Ñù E][NormedGroup F][NormedSpace ‚Ñù F]

theorem dense_compl_of_dimH_lt_finrank {s : Set E} (hs : dimH s < finrank ‚Ñù E) : Dense (¬´expr ·∂ú¬ª s) :=
  by 
    refine' fun x => mem_closure_iff_nhds.2 fun t ht => ne_empty_iff_nonempty.1$ fun he => hs.not_le _ 
    rw [‚Üêdiff_eq, diff_eq_empty] at he 
    rw [‚ÜêReal.dimH_of_mem_nhds ht]
    exact dimH_mono he

/-!
### Hausdorff dimension and `C¬π`-smooth maps

`C¬π`-smooth maps are locally Lipschitz continuous, hence they do not increase the Hausdorff
dimension of sets.
-/


/-- Let `f` be a function defined on a finite dimensional real normed space. If `f` is `C¬π`-smooth
on a convex set `s`, then the Hausdorff dimension of `f '' s` is less than or equal to the Hausdorff
dimension of `s`.

TODO: do we actually need `convex ‚Ñù s`? -/
theorem TimesContDiffOn.dimH_image_le {f : E ‚Üí F} {s t : Set E} (hf : TimesContDiffOn ‚Ñù 1 f s) (hc : Convex ‚Ñù s)
  (ht : t ‚äÜ s) : dimH (f '' t) ‚â§ dimH t :=
  dimH_image_le_of_locally_lipschitz_on$
    fun x hx =>
      let ‚ü®C, u, hu, hf‚ü© := (hf x (ht hx)).exists_lipschitz_on_with hc
      ‚ü®C, u, nhds_within_mono _ ht hu, hf‚ü©

/-- The Hausdorff dimension of the range of a `C¬π`-smooth function defined on a finite dimensional
real normed space is at most the dimension of its domain as a vector space over `‚Ñù`. -/
theorem TimesContDiff.dimH_range_le {f : E ‚Üí F} (h : TimesContDiff ‚Ñù 1 f) : dimH (range f) ‚â§ finrank ‚Ñù E :=
  calc dimH (range f) = dimH (f '' univ) :=
    by 
      rw [image_univ]
    _ ‚â§ dimH (univ : Set E) := h.times_cont_diff_on.dimH_image_le convex_univ subset.rfl 
    _ = finrank ‚Ñù E := Real.dimH_univ_eq_finrank E
    

/-- A particular case of Sard's Theorem. Let `f : E ‚Üí F` be a map between finite dimensional real
vector spaces. Suppose that `f` is `C¬π` smooth on a convex set `s` of Hausdorff dimension strictly
less than the dimension of `F`. Then the complement of the image `f '' s` is dense in `F`. -/
theorem TimesContDiffOn.dense_compl_image_of_dimH_lt_finrank [FiniteDimensional ‚Ñù F] {f : E ‚Üí F} {s t : Set E}
  (h : TimesContDiffOn ‚Ñù 1 f s) (hc : Convex ‚Ñù s) (ht : t ‚äÜ s) (htF : dimH t < finrank ‚Ñù F) :
  Dense (¬´expr ·∂ú¬ª (f '' t)) :=
  dense_compl_of_dimH_lt_finrank$ (h.dimH_image_le hc ht).trans_lt htF

/-- A particular case of Sard's Theorem. If `f` is a `C¬π` smooth map from a real vector space to a
real vector space `F` of strictly larger dimension, then the complement of the range of `f` is dense
in `F`. -/
theorem TimesContDiff.dense_compl_range_of_finrank_lt_finrank [FiniteDimensional ‚Ñù F] {f : E ‚Üí F}
  (h : TimesContDiff ‚Ñù 1 f) (hEF : finrank ‚Ñù E < finrank ‚Ñù F) : Dense (¬´expr ·∂ú¬ª (range f)) :=
  dense_compl_of_dimH_lt_finrank$ h.dimH_range_le.trans_lt$ Ennreal.coe_nat_lt_coe_nat.2 hEF

