/-
Copyright (c) 2020 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov
-/
import Topology.MetricSpace.Lipschitz
import Topology.UniformSpace.CompleteSeparated

#align_import topology.metric_space.antilipschitz from "leanprover-community/mathlib"@"c8f305514e0d47dfaa710f5a52f0d21b588e6328"

/-!
# Antilipschitz functions

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

We say that a map `f : Œ± ‚Üí Œ≤` between two (extended) metric spaces is
`antilipschitz_with K`, `K ‚â• 0`, if for all `x, y` we have `edist x y ‚â§ K * edist (f x) (f y)`.
For a metric space, the latter inequality is equivalent to `dist x y ‚â§ K * dist (f x) (f y)`.

## Implementation notes

The parameter `K` has type `‚Ñù‚â•0`. This way we avoid conjuction in the definition and have
coercions both to `‚Ñù` and `‚Ñù‚â•0‚àû`. We do not require `0 < K` in the definition, mostly because
we do not have a `posreal` type.
-/


variable {Œ± : Type _} {Œ≤ : Type _} {Œ≥ : Type _}

open scoped NNReal ENNReal uniformity

open Set Filter Bornology

#print AntilipschitzWith /-
/-- We say that `f : Œ± ‚Üí Œ≤` is `antilipschitz_with K` if for any two points `x`, `y` we have
`edist x y ‚â§ K * edist (f x) (f y)`. -/
def AntilipschitzWith [PseudoEMetricSpace Œ±] [PseudoEMetricSpace Œ≤] (K : ‚Ñù‚â•0) (f : Œ± ‚Üí Œ≤) :=
  ‚àÄ x y, edist x y ‚â§ K * edist (f x) (f y)
#align antilipschitz_with AntilipschitzWith
-/

#print AntilipschitzWith.edist_lt_top /-
theorem AntilipschitzWith.edist_lt_top [PseudoEMetricSpace Œ±] [PseudoMetricSpace Œ≤] {K : ‚Ñù‚â•0}
    {f : Œ± ‚Üí Œ≤} (h : AntilipschitzWith K f) (x y : Œ±) : edist x y < ‚ä§ :=
  (h x y).trans_lt <| ENNReal.mul_lt_top ENNReal.coe_ne_top (edist_ne_top _ _)
#align antilipschitz_with.edist_lt_top AntilipschitzWith.edist_lt_top
-/

#print AntilipschitzWith.edist_ne_top /-
theorem AntilipschitzWith.edist_ne_top [PseudoEMetricSpace Œ±] [PseudoMetricSpace Œ≤] {K : ‚Ñù‚â•0}
    {f : Œ± ‚Üí Œ≤} (h : AntilipschitzWith K f) (x y : Œ±) : edist x y ‚â† ‚ä§ :=
  (h.edist_lt_top x y).Ne
#align antilipschitz_with.edist_ne_top AntilipschitzWith.edist_ne_top
-/

section Metric

variable [PseudoMetricSpace Œ±] [PseudoMetricSpace Œ≤] {K : ‚Ñù‚â•0} {f : Œ± ‚Üí Œ≤}

#print antilipschitzWith_iff_le_mul_nndist /-
theorem antilipschitzWith_iff_le_mul_nndist :
    AntilipschitzWith K f ‚Üî ‚àÄ x y, nndist x y ‚â§ K * nndist (f x) (f y) := by
  simp only [AntilipschitzWith, edist_nndist]; norm_cast
#align antilipschitz_with_iff_le_mul_nndist antilipschitzWith_iff_le_mul_nndist
-/

alias ‚ü®AntilipschitzWith.le_mul_nndist, AntilipschitzWith.of_le_mul_nndist‚ü© :=
  antilipschitzWith_iff_le_mul_nndist
#align antilipschitz_with.le_mul_nndist AntilipschitzWith.le_mul_nndist
#align antilipschitz_with.of_le_mul_nndist AntilipschitzWith.of_le_mul_nndist

#print antilipschitzWith_iff_le_mul_dist /-
theorem antilipschitzWith_iff_le_mul_dist :
    AntilipschitzWith K f ‚Üî ‚àÄ x y, dist x y ‚â§ K * dist (f x) (f y) := by
  simp only [antilipschitzWith_iff_le_mul_nndist, dist_nndist]; norm_cast
#align antilipschitz_with_iff_le_mul_dist antilipschitzWith_iff_le_mul_dist
-/

alias ‚ü®AntilipschitzWith.le_mul_dist, AntilipschitzWith.of_le_mul_dist‚ü© :=
  antilipschitzWith_iff_le_mul_dist
#align antilipschitz_with.le_mul_dist AntilipschitzWith.le_mul_dist
#align antilipschitz_with.of_le_mul_dist AntilipschitzWith.of_le_mul_dist

namespace AntilipschitzWith

#print AntilipschitzWith.mul_le_nndist /-
theorem mul_le_nndist (hf : AntilipschitzWith K f) (x y : Œ±) :
    K‚Åª¬π * nndist x y ‚â§ nndist (f x) (f y) := by
  simpa only [div_eq_inv_mul] using NNReal.div_le_of_le_mul' (hf.le_mul_nndist x y)
#align antilipschitz_with.mul_le_nndist AntilipschitzWith.mul_le_nndist
-/

#print AntilipschitzWith.mul_le_dist /-
theorem mul_le_dist (hf : AntilipschitzWith K f) (x y : Œ±) :
    (K‚Åª¬π * dist x y : ‚Ñù) ‚â§ dist (f x) (f y) := by exact_mod_cast hf.mul_le_nndist x y
#align antilipschitz_with.mul_le_dist AntilipschitzWith.mul_le_dist
-/

end AntilipschitzWith

end Metric

namespace AntilipschitzWith

variable [PseudoEMetricSpace Œ±] [PseudoEMetricSpace Œ≤] [PseudoEMetricSpace Œ≥]

variable {K : ‚Ñù‚â•0} {f : Œ± ‚Üí Œ≤}

open Emetric

#print AntilipschitzWith.k /-
-- uses neither `f` nor `hf`
/-- Extract the constant from `hf : antilipschitz_with K f`. This is useful, e.g.,
if `K` is given by a long formula, and we want to reuse this value. -/
@[nolint unused_arguments]
protected def k (hf : AntilipschitzWith K f) : ‚Ñù‚â•0 :=
  K
#align antilipschitz_with.K AntilipschitzWith.k
-/

#print AntilipschitzWith.injective /-
protected theorem injective {Œ± : Type _} {Œ≤ : Type _} [EMetricSpace Œ±] [PseudoEMetricSpace Œ≤]
    {K : ‚Ñù‚â•0} {f : Œ± ‚Üí Œ≤} (hf : AntilipschitzWith K f) : Function.Injective f := fun x y h => by
  simpa only [h, edist_self, MulZeroClass.mul_zero, edist_le_zero] using hf x y
#align antilipschitz_with.injective AntilipschitzWith.injective
-/

#print AntilipschitzWith.mul_le_edist /-
theorem mul_le_edist (hf : AntilipschitzWith K f) (x y : Œ±) :
    (K‚Åª¬π * edist x y : ‚Ñù‚â•0‚àû) ‚â§ edist (f x) (f y) :=
  by
  rw [mul_comm, ‚Üê div_eq_mul_inv]
  exact ENNReal.div_le_of_le_mul' (hf x y)
#align antilipschitz_with.mul_le_edist AntilipschitzWith.mul_le_edist
-/

#print AntilipschitzWith.ediam_preimage_le /-
theorem ediam_preimage_le (hf : AntilipschitzWith K f) (s : Set Œ≤) : diam (f ‚Åª¬π' s) ‚â§ K * diam s :=
  diam_le fun x hx y hy => (hf x y).trans <| mul_le_mul_left' (edist_le_diam_of_mem hx hy) K
#align antilipschitz_with.ediam_preimage_le AntilipschitzWith.ediam_preimage_le
-/

#print AntilipschitzWith.le_mul_ediam_image /-
theorem le_mul_ediam_image (hf : AntilipschitzWith K f) (s : Set Œ±) : diam s ‚â§ K * diam (f '' s) :=
  (diam_mono (subset_preimage_image _ _)).trans (hf.ediam_preimage_le (f '' s))
#align antilipschitz_with.le_mul_ediam_image AntilipschitzWith.le_mul_ediam_image
-/

#print AntilipschitzWith.id /-
protected theorem id : AntilipschitzWith 1 (id : Œ± ‚Üí Œ±) := fun x y => by
  simp only [ENNReal.coe_one, one_mul, id, le_refl]
#align antilipschitz_with.id AntilipschitzWith.id
-/

#print AntilipschitzWith.comp /-
theorem comp {Kg : ‚Ñù‚â•0} {g : Œ≤ ‚Üí Œ≥} (hg : AntilipschitzWith Kg g) {Kf : ‚Ñù‚â•0} {f : Œ± ‚Üí Œ≤}
    (hf : AntilipschitzWith Kf f) : AntilipschitzWith (Kf * Kg) (g ‚àò f) := fun x y =>
  calc
    edist x y ‚â§ Kf * edist (f x) (f y) := hf x y
    _ ‚â§ Kf * (Kg * edist (g (f x)) (g (f y))) := (ENNReal.mul_left_mono (hg _ _))
    _ = _ := by rw [ENNReal.coe_mul, mul_assoc]
#align antilipschitz_with.comp AntilipschitzWith.comp
-/

#print AntilipschitzWith.restrict /-
theorem restrict (hf : AntilipschitzWith K f) (s : Set Œ±) : AntilipschitzWith K (s.restrict f) :=
  fun x y => hf x y
#align antilipschitz_with.restrict AntilipschitzWith.restrict
-/

#print AntilipschitzWith.codRestrict /-
theorem codRestrict (hf : AntilipschitzWith K f) {s : Set Œ≤} (hs : ‚àÄ x, f x ‚àà s) :
    AntilipschitzWith K (s.codRestrict f hs) := fun x y => hf x y
#align antilipschitz_with.cod_restrict AntilipschitzWith.codRestrict
-/

#print AntilipschitzWith.to_rightInvOn' /-
theorem to_rightInvOn' {s : Set Œ±} (hf : AntilipschitzWith K (s.restrict f)) {g : Œ≤ ‚Üí Œ±} {t : Set Œ≤}
    (g_maps : MapsTo g t s) (g_inv : RightInvOn g f t) : LipschitzWith K (t.restrict g) :=
  fun x y => by
  simpa only [restrict_apply, g_inv x.mem, g_inv y.mem, Subtype.edist_eq, Subtype.coe_mk] using
    hf ‚ü®g x, g_maps x.mem‚ü© ‚ü®g y, g_maps y.mem‚ü©
#align antilipschitz_with.to_right_inv_on' AntilipschitzWith.to_rightInvOn'
-/

#print AntilipschitzWith.to_rightInvOn /-
theorem to_rightInvOn (hf : AntilipschitzWith K f) {g : Œ≤ ‚Üí Œ±} {t : Set Œ≤} (h : RightInvOn g f t) :
    LipschitzWith K (t.restrict g) :=
  (hf.restrict univ).to_rightInvOn' (mapsTo_univ g t) h
#align antilipschitz_with.to_right_inv_on AntilipschitzWith.to_rightInvOn
-/

#print AntilipschitzWith.to_rightInverse /-
theorem to_rightInverse (hf : AntilipschitzWith K f) {g : Œ≤ ‚Üí Œ±} (hg : Function.RightInverse g f) :
    LipschitzWith K g := by
  intro x y
  have := hf (g x) (g y)
  rwa [hg x, hg y] at this
#align antilipschitz_with.to_right_inverse AntilipschitzWith.to_rightInverse
-/

#print AntilipschitzWith.comap_uniformity_le /-
theorem comap_uniformity_le (hf : AntilipschitzWith K f) : (ùì§ Œ≤).comap (Prod.map f f) ‚â§ ùì§ Œ± :=
  by
  refine' ((uniformity_basis_edist.comap _).le_basis_iff‚Çì uniformity_basis_edist).2 fun Œµ h‚ÇÄ => _
  refine' ‚ü®K‚Åª¬π * Œµ, ENNReal.mul_pos (ENNReal.inv_ne_zero.2 ENNReal.coe_ne_top) h‚ÇÄ.ne', _‚ü©
  refine' fun x hx => (hf x.1 x.2).trans_lt _
  rw [mul_comm, ‚Üê div_eq_mul_inv] at hx
  rw [mul_comm]
  exact ENNReal.mul_lt_of_lt_div hx
#align antilipschitz_with.comap_uniformity_le AntilipschitzWith.comap_uniformity_le
-/

#print AntilipschitzWith.uniformInducing /-
protected theorem uniformInducing (hf : AntilipschitzWith K f) (hfc : UniformContinuous f) :
    UniformInducing f :=
  ‚ü®le_antisymm hf.comap_uniformity_le hfc.le_comap‚ü©
#align antilipschitz_with.uniform_inducing AntilipschitzWith.uniformInducing
-/

#print AntilipschitzWith.uniformEmbedding /-
protected theorem uniformEmbedding {Œ± : Type _} {Œ≤ : Type _} [EMetricSpace Œ±] [PseudoEMetricSpace Œ≤]
    {K : ‚Ñù‚â•0} {f : Œ± ‚Üí Œ≤} (hf : AntilipschitzWith K f) (hfc : UniformContinuous f) :
    UniformEmbedding f :=
  ‚ü®hf.UniformInducing hfc, hf.Injective‚ü©
#align antilipschitz_with.uniform_embedding AntilipschitzWith.uniformEmbedding
-/

#print AntilipschitzWith.isComplete_range /-
theorem isComplete_range [CompleteSpace Œ±] (hf : AntilipschitzWith K f)
    (hfc : UniformContinuous f) : IsComplete (range f) :=
  (hf.UniformInducing hfc).isComplete_range
#align antilipschitz_with.is_complete_range AntilipschitzWith.isComplete_range
-/

#print AntilipschitzWith.isClosed_range /-
theorem isClosed_range {Œ± Œ≤ : Type _} [PseudoEMetricSpace Œ±] [EMetricSpace Œ≤] [CompleteSpace Œ±]
    {f : Œ± ‚Üí Œ≤} {K : ‚Ñù‚â•0} (hf : AntilipschitzWith K f) (hfc : UniformContinuous f) :
    IsClosed (range f) :=
  (hf.isComplete_range hfc).IsClosed
#align antilipschitz_with.is_closed_range AntilipschitzWith.isClosed_range
-/

#print AntilipschitzWith.closedEmbedding /-
theorem closedEmbedding {Œ± : Type _} {Œ≤ : Type _} [EMetricSpace Œ±] [EMetricSpace Œ≤] {K : ‚Ñù‚â•0}
    {f : Œ± ‚Üí Œ≤} [CompleteSpace Œ±] (hf : AntilipschitzWith K f) (hfc : UniformContinuous f) :
    ClosedEmbedding f :=
  { (hf.UniformEmbedding hfc).Embedding with closed_range := hf.isClosed_range hfc }
#align antilipschitz_with.closed_embedding AntilipschitzWith.closedEmbedding
-/

#print AntilipschitzWith.subtype_coe /-
theorem subtype_coe (s : Set Œ±) : AntilipschitzWith 1 (coe : s ‚Üí Œ±) :=
  AntilipschitzWith.id.restrict s
#align antilipschitz_with.subtype_coe AntilipschitzWith.subtype_coe
-/

#print AntilipschitzWith.of_subsingleton /-
theorem of_subsingleton [Subsingleton Œ±] {K : ‚Ñù‚â•0} : AntilipschitzWith K f := fun x y => by
  simp only [Subsingleton.elim x y, edist_self, zero_le]
#align antilipschitz_with.of_subsingleton AntilipschitzWith.of_subsingleton
-/

#print AntilipschitzWith.subsingleton /-
/-- If `f : Œ± ‚Üí Œ≤` is `0`-antilipschitz, then `Œ±` is a `subsingleton`. -/
protected theorem subsingleton {Œ± Œ≤} [EMetricSpace Œ±] [PseudoEMetricSpace Œ≤] {f : Œ± ‚Üí Œ≤}
    (h : AntilipschitzWith 0 f) : Subsingleton Œ± :=
  ‚ü®fun x y => edist_le_zero.1 <| (h x y).trans_eq <| MulZeroClass.zero_mul _‚ü©
#align antilipschitz_with.subsingleton AntilipschitzWith.subsingleton
-/

end AntilipschitzWith

namespace AntilipschitzWith

open Metric

variable [PseudoMetricSpace Œ±] [PseudoMetricSpace Œ≤] [PseudoMetricSpace Œ≥]

variable {K : ‚Ñù‚â•0} {f : Œ± ‚Üí Œ≤}

#print AntilipschitzWith.isBounded_preimage /-
theorem isBounded_preimage (hf : AntilipschitzWith K f) {s : Set Œ≤} (hs : IsBounded s) :
    IsBounded (f ‚Åª¬π' s) :=
  Exists.intro (K * diam s) fun x hx y hy =>
    calc
      dist x y ‚â§ K * dist (f x) (f y) := hf.le_mul_dist x y
      _ ‚â§ K * diam s := mul_le_mul_of_nonneg_left (dist_le_diam_of_mem hs hx hy) K.2
#align antilipschitz_with.bounded_preimage AntilipschitzWith.isBounded_preimage
-/

#print AntilipschitzWith.tendsto_cobounded /-
theorem tendsto_cobounded (hf : AntilipschitzWith K f) : Tendsto f (cobounded Œ±) (cobounded Œ≤) :=
  compl_surjective.forall.2 fun s (hs : IsBounded s) =>
    Metric.isBounded_iff.2 <| hf.isBounded_preimage <| Metric.isBounded_iff.1 hs
#align antilipschitz_with.tendsto_cobounded AntilipschitzWith.tendsto_cobounded
-/

#print AntilipschitzWith.properSpace /-
/-- The image of a proper space under an expanding onto map is proper. -/
protected theorem properSpace {Œ± : Type _} [MetricSpace Œ±] {K : ‚Ñù‚â•0} {f : Œ± ‚Üí Œ≤} [ProperSpace Œ±]
    (hK : AntilipschitzWith K f) (f_cont : Continuous f) (hf : Function.Surjective f) :
    ProperSpace Œ≤ :=
  by
  apply ProperSpace.of_isCompact_closedBall_of_le 0 fun x‚ÇÄ r hr => _
  let K := f ‚Åª¬π' closed_ball x‚ÇÄ r
  have A : IsClosed K := is_closed_ball.preimage f_cont
  have B : bounded K := hK.bounded_preimage bounded_closed_ball
  have : IsCompact K := is_compact_iff_is_closed_bounded.2 ‚ü®A, B‚ü©
  convert this.image f_cont
  exact (hf.image_preimage _).symm
#align antilipschitz_with.proper_space AntilipschitzWith.properSpace
-/

#print AntilipschitzWith.isBounded_of_image2_left /-
theorem isBounded_of_image2_left (f : Œ± ‚Üí Œ≤ ‚Üí Œ≥) {K‚ÇÅ : ‚Ñù‚â•0}
    (hf : ‚àÄ b, AntilipschitzWith K‚ÇÅ fun a => f a b) {s : Set Œ±} {t : Set Œ≤}
    (hst : IsBounded (Set.image2 f s t)) : IsBounded s ‚à® IsBounded t :=
  by
  contrapose! hst
  obtain ‚ü®b, hb‚ü© : t.nonempty := nonempty_of_unbounded hst.2
  have : ¬¨bounded (Set.image2 f s {b}) := by
    intro h
    apply hst.1
    rw [Set.image2_singleton_right] at h
    replace h := (hf b).isBounded_preimage h
    refine' h.mono (subset_preimage_image _ _)
  exact mt (bounded.mono (image2_subset subset.rfl (singleton_subset_iff.mpr hb))) this
#align antilipschitz_with.bounded_of_image2_left AntilipschitzWith.isBounded_of_image2_left
-/

#print AntilipschitzWith.isBounded_of_image2_right /-
theorem isBounded_of_image2_right {f : Œ± ‚Üí Œ≤ ‚Üí Œ≥} {K‚ÇÇ : ‚Ñù‚â•0} (hf : ‚àÄ a, AntilipschitzWith K‚ÇÇ (f a))
    {s : Set Œ±} {t : Set Œ≤} (hst : IsBounded (Set.image2 f s t)) : IsBounded s ‚à® IsBounded t :=
  Or.symm <| isBounded_of_image2_left (flip f) hf <| image2_swap f s t ‚ñ∏ hst
#align antilipschitz_with.bounded_of_image2_right AntilipschitzWith.isBounded_of_image2_right
-/

end AntilipschitzWith

#print LipschitzWith.to_rightInverse /-
theorem LipschitzWith.to_rightInverse [PseudoEMetricSpace Œ±] [PseudoEMetricSpace Œ≤] {K : ‚Ñù‚â•0}
    {f : Œ± ‚Üí Œ≤} (hf : LipschitzWith K f) {g : Œ≤ ‚Üí Œ±} (hg : Function.RightInverse g f) :
    AntilipschitzWith K g := fun x y => by simpa only [hg _] using hf (g x) (g y)
#align lipschitz_with.to_right_inverse LipschitzWith.to_rightInverse
-/

#print LipschitzWith.properSpace /-
/-- The preimage of a proper space under a Lipschitz homeomorphism is proper. -/
@[protected]
theorem LipschitzWith.properSpace [PseudoMetricSpace Œ±] [MetricSpace Œ≤] [ProperSpace Œ≤] {K : ‚Ñù‚â•0}
    {f : Œ± ‚âÉ‚Çú Œ≤} (hK : LipschitzWith K f) : ProperSpace Œ± :=
  (hK.to_rightInverse f.right_inv).ProperSpace f.symm.Continuous f.symm.Surjective
#align lipschitz_with.proper_space LipschitzWith.properSpace
-/

