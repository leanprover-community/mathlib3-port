import Mathbin.Analysis.SpecificLimits 
import Mathbin.Order.Filter.CountableInter 
import Mathbin.Topology.GDelta

/-!
# Baire theorem

In a complete metric space, a countable intersection of dense open subsets is dense.

The good concept underlying the theorem is that of a Gδ set, i.e., a countable intersection
of open sets. Then Baire theorem can also be formulated as the fact that a countable
intersection of dense Gδ sets is a dense Gδ set. We prove Baire theorem, giving several different
formulations that can be handy. We also prove the important consequence that, if the space is
covered by a countable union of closed sets, then the union of their interiors is dense.

The names of the theorems do not contain the string "Baire", but are instead built from the form of
the statement. "Baire" is however in the docstring of all the theorems, to facilitate grep searches.

We also define the filter `residual α` generated by dense `Gδ` sets and prove that this filter
has the countable intersection property.
-/


noncomputable theory

open_locale Classical TopologicalSpace Filter Ennreal

open Filter Encodable Set

variable{α : Type _}{β : Type _}{γ : Type _}{ι : Type _}

section BaireTheorem

open Emetric Ennreal

variable[EmetricSpace α][CompleteSpace α]

-- error in Topology.MetricSpace.Baire: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
/-- Baire theorem: a countable intersection of dense open sets is dense. Formulated here when
the source space is ℕ (and subsumed below by `dense_Inter_of_open` working with any
encodable source space). -/
theorem dense_Inter_of_open_nat
{f : exprℕ() → set α}
(ho : ∀ n, is_open (f n))
(hd : ∀ n, dense (f n)) : dense «expr⋂ , »((n), f n) :=
begin
  let [ident B] [":", expr exprℕ() → «exprℝ≥0∞»()] [":=", expr λ n, «expr / »(1, «expr ^ »(2, n))],
  have [ident Bpos] [":", expr ∀ n, «expr < »(0, B n)] [],
  { intro [ident n],
    simp [] [] ["only"] ["[", expr B, ",", expr one_div, ",", expr one_mul, ",", expr ennreal.inv_pos, "]"] [] [],
    exact [expr pow_ne_top two_ne_top] },
  have [] [":", expr ∀
   n
   x
   δ, «expr ≠ »(δ, 0) → «expr∃ , »((y
     r), «expr ∧ »(«expr < »(0, r), «expr ∧ »(«expr ≤ »(r, B «expr + »(n, 1)), «expr ⊆ »(closed_ball y r, «expr ∩ »(closed_ball x δ, f n)))))] [],
  { assume [binders (n x δ δpos)],
    have [] [":", expr «expr ∈ »(x, closure (f n))] [":=", expr hd n x],
    rcases [expr emetric.mem_closure_iff.1 this «expr / »(δ, 2) (ennreal.half_pos δpos), "with", "⟨", ident y, ",", ident ys, ",", ident xy, "⟩"],
    rw [expr edist_comm] ["at", ident xy],
    obtain ["⟨", ident r, ",", ident rpos, ",", ident hr, "⟩", ":", expr «expr∃ , »((r «expr > » 0), «expr ⊆ »(closed_ball y r, f n)), ":=", expr nhds_basis_closed_eball.mem_iff.1 (is_open_iff_mem_nhds.1 (ho n) y ys)],
    refine [expr ⟨y, min (min «expr / »(δ, 2) r) (B «expr + »(n, 1)), _, _, λ z hz, ⟨_, _⟩⟩],
    show [expr «expr < »(0, min (min «expr / »(δ, 2) r) (B «expr + »(n, 1)))],
    from [expr lt_min (lt_min (ennreal.half_pos δpos) rpos) (Bpos «expr + »(n, 1))],
    show [expr «expr ≤ »(min (min «expr / »(δ, 2) r) (B «expr + »(n, 1)), B «expr + »(n, 1))],
    from [expr min_le_right _ _],
    show [expr «expr ∈ »(z, closed_ball x δ)],
    from [expr calc
       «expr ≤ »(edist z x, «expr + »(edist z y, edist y x)) : edist_triangle _ _ _
       «expr ≤ »(..., «expr + »(min (min «expr / »(δ, 2) r) (B «expr + »(n, 1)), «expr / »(δ, 2))) : add_le_add hz (le_of_lt xy)
       «expr ≤ »(..., «expr + »(«expr / »(δ, 2), «expr / »(δ, 2))) : add_le_add (le_trans (min_le_left _ _) (min_le_left _ _)) (le_refl _)
       «expr = »(..., δ) : ennreal.add_halves δ],
    show [expr «expr ∈ »(z, f n)],
    from [expr hr (calc
        «expr ≤ »(edist z y, min (min «expr / »(δ, 2) r) (B «expr + »(n, 1))) : hz
        «expr ≤ »(..., r) : le_trans (min_le_left _ _) (min_le_right _ _))] },
  choose ["!"] [ident center] [ident radius, ident Hpos, ident HB, ident Hball] ["using", expr this],
  refine [expr λ x, (mem_closure_iff_nhds_basis nhds_basis_closed_eball).2 (λ ε εpos, _)],
  let [ident F] [":", expr exprℕ() → «expr × »(α, «exprℝ≥0∞»())] [":=", expr λ
   n, nat.rec_on n (prod.mk x (min ε (B 0))) (λ n p, prod.mk (center n p.1 p.2) (radius n p.1 p.2))],
  let [ident c] [":", expr exprℕ() → α] [":=", expr λ n, (F n).1],
  let [ident r] [":", expr exprℕ() → «exprℝ≥0∞»()] [":=", expr λ n, (F n).2],
  have [ident rpos] [":", expr ∀ n, «expr < »(0, r n)] [],
  { assume [binders (n)],
    induction [expr n] [] ["with", ident n, ident hn] [],
    exact [expr lt_min εpos (Bpos 0)],
    exact [expr Hpos n (c n) (r n) hn.ne'] },
  have [ident r0] [":", expr ∀ n, «expr ≠ »(r n, 0)] [":=", expr λ n, (rpos n).ne'],
  have [ident rB] [":", expr ∀ n, «expr ≤ »(r n, B n)] [],
  { assume [binders (n)],
    induction [expr n] [] ["with", ident n, ident hn] [],
    exact [expr min_le_right _ _],
    exact [expr HB n (c n) (r n) (r0 n)] },
  have [ident incl] [":", expr ∀
   n, «expr ⊆ »(closed_ball (c «expr + »(n, 1)) (r «expr + »(n, 1)), «expr ∩ »(closed_ball (c n) (r n), f n))] [":=", expr λ
   n, Hball n (c n) (r n) (r0 n)],
  have [ident cdist] [":", expr ∀ n, «expr ≤ »(edist (c n) (c «expr + »(n, 1)), B n)] [],
  { assume [binders (n)],
    rw [expr edist_comm] [],
    have [ident A] [":", expr «expr ∈ »(c «expr + »(n, 1), closed_ball (c «expr + »(n, 1)) (r «expr + »(n, 1)))] [":=", expr mem_closed_ball_self],
    have [ident I] [] [":=", expr calc
       «expr ⊆ »(closed_ball (c «expr + »(n, 1)) (r «expr + »(n, 1)), closed_ball (c n) (r n)) : subset.trans (incl n) (inter_subset_left _ _)
       «expr ⊆ »(..., closed_ball (c n) (B n)) : closed_ball_subset_closed_ball (rB n)],
    exact [expr I A] },
  have [] [":", expr cauchy_seq c] [":=", expr cauchy_seq_of_edist_le_geometric_two _ one_ne_top cdist],
  rcases [expr cauchy_seq_tendsto_of_complete this, "with", "⟨", ident y, ",", ident ylim, "⟩"],
  use [expr y],
  simp [] [] ["only"] ["[", expr exists_prop, ",", expr set.mem_Inter, "]"] [] [],
  have [ident I] [":", expr ∀ n, ∀ m «expr ≥ » n, «expr ⊆ »(closed_ball (c m) (r m), closed_ball (c n) (r n))] [],
  { assume [binders (n)],
    refine [expr nat.le_induction _ (λ m hnm h, _)],
    { exact [expr subset.refl _] },
    { exact [expr subset.trans (incl m) (subset.trans (inter_subset_left _ _) h)] } },
  have [ident yball] [":", expr ∀ n, «expr ∈ »(y, closed_ball (c n) (r n))] [],
  { assume [binders (n)],
    refine [expr is_closed_ball.mem_of_tendsto ylim _],
    refine [expr (filter.eventually_ge_at_top n).mono (λ m hm, _)],
    exact [expr I n m hm mem_closed_ball_self] },
  split,
  show [expr ∀ n, «expr ∈ »(y, f n)],
  { assume [binders (n)],
    have [] [":", expr «expr ⊆ »(closed_ball (c «expr + »(n, 1)) (r «expr + »(n, 1)), f n)] [":=", expr subset.trans (incl n) (inter_subset_right _ _)],
    exact [expr this (yball «expr + »(n, 1))] },
  show [expr «expr ≤ »(edist y x, ε)],
  from [expr le_trans (yball 0) (min_le_left _ _)]
end

-- error in Topology.MetricSpace.Baire: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
/-- Baire theorem: a countable intersection of dense open sets is dense. Formulated here with ⋂₀. -/
theorem dense_sInter_of_open
{S : set (set α)}
(ho : ∀ s «expr ∈ » S, is_open s)
(hS : countable S)
(hd : ∀ s «expr ∈ » S, dense s) : dense «expr⋂₀ »(S) :=
begin
  cases [expr S.eq_empty_or_nonempty] ["with", ident h, ident h],
  { simp [] [] [] ["[", expr h, "]"] [] [] },
  { rcases [expr hS.exists_surjective h, "with", "⟨", ident f, ",", ident hf, "⟩"],
    have [ident F] [":", expr ∀
     n, «expr ∈ »(f n, S)] [":=", expr λ n, by rw [expr hf] []; exact [expr mem_range_self _]],
    rw ["[", expr hf, ",", expr sInter_range, "]"] [],
    exact [expr dense_Inter_of_open_nat (λ n, ho _ (F n)) (λ n, hd _ (F n))] }
end

/-- Baire theorem: a countable intersection of dense open sets is dense. Formulated here with
an index set which is a countable set in any type. -/
theorem dense_bInter_of_open {S : Set β} {f : β → Set α} (ho : ∀ s (_ : s ∈ S), IsOpen (f s)) (hS : countable S)
  (hd : ∀ s (_ : s ∈ S), Dense (f s)) : Dense (⋂(s : _)(_ : s ∈ S), f s) :=
  by 
    rw [←sInter_image]
    apply dense_sInter_of_open
    ·
      rwa [ball_image_iff]
    ·
      exact hS.image _
    ·
      rwa [ball_image_iff]

/-- Baire theorem: a countable intersection of dense open sets is dense. Formulated here with
an index set which is an encodable type. -/
theorem dense_Inter_of_open [Encodable β] {f : β → Set α} (ho : ∀ s, IsOpen (f s)) (hd : ∀ s, Dense (f s)) :
  Dense (⋂s, f s) :=
  by 
    rw [←sInter_range]
    apply dense_sInter_of_open
    ·
      rwa [forall_range_iff]
    ·
      exact countable_range _
    ·
      rwa [forall_range_iff]

-- error in Topology.MetricSpace.Baire: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
/-- Baire theorem: a countable intersection of dense Gδ sets is dense. Formulated here with ⋂₀. -/
theorem dense_sInter_of_Gδ
{S : set (set α)}
(ho : ∀ s «expr ∈ » S, is_Gδ s)
(hS : countable S)
(hd : ∀ s «expr ∈ » S, dense s) : dense «expr⋂₀ »(S) :=
begin
  choose [] [ident T] [ident hT] ["using", expr ho],
  have [] [":", expr «expr = »(«expr⋂₀ »(S), «expr⋂₀ »(«expr⋃ , »((s «expr ∈ » S), T s «expr‹ ›»(_))))] [":=", expr (sInter_bUnion (λ
     s hs, (hT s hs).2.2)).symm],
  rw [expr this] [],
  refine [expr dense_sInter_of_open _ (hS.bUnion (λ
     s
     hs, (hT s hs).2.1)) _]; simp [] [] ["only"] ["[", expr set.mem_Union, ",", expr exists_prop, "]"] [] []; rintro [ident t, "⟨", ident s, ",", ident hs, ",", ident tTs, "⟩"],
  show [expr is_open t],
  { exact [expr (hT s hs).1 t tTs] },
  show [expr dense t],
  { intro [ident x],
    have [] [] [":=", expr hd s hs x],
    rw [expr (hT s hs).2.2] ["at", ident this],
    exact [expr closure_mono (sInter_subset_of_mem tTs) this] }
end

/-- Baire theorem: a countable intersection of dense Gδ sets is dense. Formulated here with
an index set which is an encodable type. -/
theorem dense_Inter_of_Gδ [Encodable β] {f : β → Set α} (ho : ∀ s, IsGδ (f s)) (hd : ∀ s, Dense (f s)) :
  Dense (⋂s, f s) :=
  by 
    rw [←sInter_range]
    exact dense_sInter_of_Gδ (forall_range_iff.2 ‹_›) (countable_range _) (forall_range_iff.2 ‹_›)

-- error in Topology.MetricSpace.Baire: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
/-- Baire theorem: a countable intersection of dense Gδ sets is dense. Formulated here with
an index set which is a countable set in any type. -/
theorem dense_bInter_of_Gδ
{S : set β}
{f : ∀ x «expr ∈ » S, set α}
(ho : ∀ s «expr ∈ » S, is_Gδ (f s «expr‹ ›»(_)))
(hS : countable S)
(hd : ∀ s «expr ∈ » S, dense (f s «expr‹ ›»(_))) : dense «expr⋂ , »((s «expr ∈ » S), f s «expr‹ ›»(_)) :=
begin
  rw [expr bInter_eq_Inter] [],
  haveI [] [] [":=", expr hS.to_encodable],
  exact [expr dense_Inter_of_Gδ (λ s, ho s s.2) (λ s, hd s s.2)]
end

/-- Baire theorem: the intersection of two dense Gδ sets is dense. -/
theorem Dense.inter_of_Gδ {s t : Set α} (hs : IsGδ s) (ht : IsGδ t) (hsc : Dense s) (htc : Dense t) : Dense (s ∩ t) :=
  by 
    rw [inter_eq_Inter]
    apply dense_Inter_of_Gδ <;> simp [Bool.forall_bool]

/-- A property holds on a residual (comeagre) set if and only if it holds on some dense `Gδ` set. -/
theorem eventually_residual {p : α → Prop} :
  (∀ᶠx in residual α, p x) ↔ ∃ t : Set α, IsGδ t ∧ Dense t ∧ ∀ x (_ : x ∈ t), p x :=
  calc (∀ᶠx in residual α, p x) ↔ ∀ᶠx in ⨅(t : Set α)(ht : IsGδ t ∧ Dense t), 𝓟 t, p x :=
    by 
      simp only [residual, infi_and]
    _ ↔ ∃ (t : Set α)(ht : IsGδ t ∧ Dense t), ∀ᶠx in 𝓟 t, p x :=
    mem_binfi_of_directed
      (fun t₁ h₁ t₂ h₂ =>
        ⟨t₁ ∩ t₂, ⟨h₁.1.inter h₂.1, Dense.inter_of_Gδ h₁.1 h₂.1 h₁.2 h₂.2⟩,
          by 
            simp ⟩)
      ⟨univ, is_Gδ_univ, dense_univ⟩
    _ ↔ _ :=
    by 
      simp [and_assoc]
    

/-- A set is residual (comeagre) if and only if it includes a dense `Gδ` set. -/
theorem mem_residual {s : Set α} : s ∈ residual α ↔ ∃ (t : _)(_ : t ⊆ s), IsGδ t ∧ Dense t :=
  (@eventually_residual α _ _ fun x => x ∈ s).trans$
    exists_congr$
      fun t =>
        by 
          rw [exists_prop, and_comm (t ⊆ s), subset_def, and_assoc]

theorem dense_of_mem_residual {s : Set α} (hs : s ∈ residual α) : Dense s :=
  let ⟨t, hts, _, hd⟩ := mem_residual.1 hs 
  hd.mono hts

instance  : CountableInterFilter (residual α) :=
  ⟨by 
      intro S hSc hS 
      simp only [mem_residual] at *
      choose T hTs hT using hS 
      refine' ⟨⋂(s : _)(_ : s ∈ S), T s ‹_›, _, _, _⟩
      ·
        rw [sInter_eq_bInter]
        exact Inter_subset_Inter fun s => Inter_subset_Inter$ hTs s
      ·
        exact is_Gδ_bInter hSc fun s hs => (hT s hs).1
      ·
        exact dense_bInter_of_Gδ (fun s hs => (hT s hs).1) hSc fun s hs => (hT s hs).2⟩

-- error in Topology.MetricSpace.Baire: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
/-- Baire theorem: if countably many closed sets cover the whole space, then their interiors
are dense. Formulated here with an index set which is a countable set in any type. -/
theorem dense_bUnion_interior_of_closed
{S : set β}
{f : β → set α}
(hc : ∀ s «expr ∈ » S, is_closed (f s))
(hS : countable S)
(hU : «expr = »(«expr⋃ , »((s «expr ∈ » S), f s), univ)) : dense «expr⋃ , »((s «expr ∈ » S), interior (f s)) :=
begin
  let [ident g] [] [":=", expr λ s, «expr ᶜ»(frontier (f s))],
  have [] [":", expr dense «expr⋂ , »((s «expr ∈ » S), g s)] [],
  { refine [expr dense_bInter_of_open (λ s hs, _) hS (λ s hs, _)],
    show [expr is_open (g s)],
    from [expr is_open_compl_iff.2 is_closed_frontier],
    show [expr dense (g s)],
    { intro [ident x],
      simp [] [] [] ["[", expr interior_frontier (hc s hs), "]"] [] [] } },
  refine [expr this.mono _],
  show [expr «expr ⊆ »(«expr⋂ , »((s «expr ∈ » S), g s), «expr⋃ , »((s «expr ∈ » S), interior (f s)))],
  assume [binders (x hx)],
  have [] [":", expr «expr ∈ »(x, «expr⋃ , »((s «expr ∈ » S), f s))] [],
  { have [] [] [":=", expr mem_univ x],
    rwa ["<-", expr hU] ["at", ident this] },
  rcases [expr mem_bUnion_iff.1 this, "with", "⟨", ident s, ",", ident hs, ",", ident xs, "⟩"],
  have [] [":", expr «expr ∈ »(x, g s)] [":=", expr mem_bInter_iff.1 hx s hs],
  have [] [":", expr «expr ∈ »(x, interior (f s))] [],
  { have [] [":", expr «expr ∈ »(x, «expr \ »(f s, frontier (f s)))] [":=", expr mem_inter xs this],
    simpa [] [] [] ["[", expr frontier, ",", expr xs, ",", expr (hc s hs).closure_eq, "]"] [] ["using", expr this] },
  exact [expr mem_bUnion_iff.2 ⟨s, ⟨hs, this⟩⟩]
end

/-- Baire theorem: if countably many closed sets cover the whole space, then their interiors
are dense. Formulated here with `⋃₀`. -/
theorem dense_sUnion_interior_of_closed {S : Set (Set α)} (hc : ∀ s (_ : s ∈ S), IsClosed s) (hS : countable S)
  (hU : ⋃₀S = univ) : Dense (⋃(s : _)(_ : s ∈ S), Interior s) :=
  by 
    rw [sUnion_eq_bUnion] at hU <;> exact dense_bUnion_interior_of_closed hc hS hU

/-- Baire theorem: if countably many closed sets cover the whole space, then their interiors
are dense. Formulated here with an index set which is an encodable type. -/
theorem dense_Union_interior_of_closed [Encodable β] {f : β → Set α} (hc : ∀ s, IsClosed (f s))
  (hU : (⋃s, f s) = univ) : Dense (⋃s, Interior (f s)) :=
  by 
    rw [←bUnion_univ]
    apply dense_bUnion_interior_of_closed
    ·
      simp [hc]
    ·
      apply countable_encodable
    ·
      rwa [←bUnion_univ] at hU

-- error in Topology.MetricSpace.Baire: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
/-- One of the most useful consequences of Baire theorem: if a countable union of closed sets
covers the space, then one of the sets has nonempty interior. -/
theorem nonempty_interior_of_Union_of_closed
[nonempty α]
[encodable β]
{f : β → set α}
(hc : ∀ s, is_closed (f s))
(hU : «expr = »(«expr⋃ , »((s), f s), univ)) : «expr∃ , »((s), «expr $ »(interior, f s).nonempty) :=
begin
  by_contradiction [ident h],
  simp [] [] ["only"] ["[", expr not_exists, ",", expr not_nonempty_iff_eq_empty, "]"] [] ["at", ident h],
  have [] [] [":=", expr calc
     «expr = »(«expr∅»(), closure «expr⋃ , »((s), interior (f s))) : by simp [] [] [] ["[", expr h, "]"] [] []
     «expr = »(..., univ) : (dense_Union_interior_of_closed hc hU).closure_eq],
  exact [expr univ_nonempty.ne_empty this.symm]
end

end BaireTheorem

