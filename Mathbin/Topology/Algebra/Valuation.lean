import Mathbin.Topology.Algebra.Nonarchimedean.Bases 
import Mathbin.Topology.Algebra.UniformFilterBasis 
import Mathbin.RingTheory.Valuation.Basic

/-!
# The topology on a valued ring

In this file, we define the non archimedean topology induced by a valuation on a ring.
The main definition is a `valued` type class which equips a ring with a valuation taking
values in a group with zero (living in the same universe). Other instances are then deduced from
this.
-/


open_locale Classical TopologicalSpace

open Set Valuation

noncomputable theory

universe u

/-- A valued ring is a ring that comes equipped with a distinguished valuation.-/
class Valued(R : Type u)[Ring‚Çì R] where 
  Œì‚ÇÄ : Type u
  [grp : LinearOrderedCommGroupWithZero Œì‚ÇÄ]
  V : Valuation R Œì‚ÇÄ

attribute [instance] Valued.grp

namespace Valued

variable{R : Type _}[Ring‚Çì R][Valued R]

-- error in Topology.Algebra.Valuation: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
/-- The basis of open subgroups for the topology on a valued ring.-/
theorem subgroups_basis : ring_subgroups_basis (Œª Œ≥ : units (Œì‚ÇÄ R), valued.v.lt_add_subgroup Œ≥) :=
{ inter := begin
    rintros [ident Œ≥‚ÇÄ, ident Œ≥‚ÇÅ],
    use [expr min Œ≥‚ÇÄ Œ≥‚ÇÅ],
    simp [] [] [] ["[", expr valuation.lt_add_subgroup, "]"] [] []; tauto []
  end,
  mul := begin
    rintros [ident Œ≥],
    cases [expr exists_square_le Œ≥] ["with", ident Œ≥‚ÇÄ, ident h],
    use [expr Œ≥‚ÇÄ],
    rintro ["-", "‚ü®", ident r, ",", ident s, ",", ident r_in, ",", ident s_in, ",", ident rfl, "‚ü©"],
    calc
      ¬´expr = ¬ª(v ¬´expr * ¬ª(r, s), ¬´expr * ¬ª(v r, v s)) : valuation.map_mul _ _ _
      ¬´expr < ¬ª(..., ¬´expr * ¬ª(Œ≥‚ÇÄ, Œ≥‚ÇÄ)) : mul_lt_mul‚ÇÄ r_in s_in
      ¬´expr ‚â§ ¬ª(..., Œ≥) : by exact_mod_cast [expr h]
  end,
  left_mul := begin
    rintros [ident x, ident Œ≥],
    rcases [expr group_with_zero.eq_zero_or_unit (v x), "with", ident Hx, "|", "‚ü®", ident Œ≥x, ",", ident Hx, "‚ü©"],
    { use [expr 1],
      rintros [ident y, "(", ident y_in, ":", expr ¬´expr < ¬ª(v y, 1), ")"],
      change [expr ¬´expr < ¬ª(v ¬´expr * ¬ª(x, y), _)] [] [],
      rw ["[", expr valuation.map_mul, ",", expr Hx, ",", expr zero_mul, "]"] [],
      exact [expr units.zero_lt Œ≥] },
    { simp [] [] ["only"] ["[", expr image_subset_iff, ",", expr set_of_subset_set_of, ",", expr preimage_set_of_eq, ",", expr valuation.map_mul, "]"] [] [],
      use [expr ¬´expr * ¬ª(¬´expr ‚Åª¬π¬ª(Œ≥x), Œ≥)],
      rintros [ident y, "(", ident vy_lt, ":", expr ¬´expr < ¬ª(v y, ¬´expr‚Üë ¬ª(¬´expr * ¬ª(¬´expr ‚Åª¬π¬ª(Œ≥x), Œ≥))), ")"],
      change [expr ¬´expr < ¬ª(v ¬´expr * ¬ª(x, y), Œ≥)] [] [],
      rw ["[", expr valuation.map_mul, ",", expr Hx, ",", expr mul_comm, "]"] [],
      rw ["[", expr units.coe_mul, ",", expr mul_comm, "]"] ["at", ident vy_lt],
      simpa [] [] [] [] [] ["using", expr mul_inv_lt_of_lt_mul‚ÇÄ vy_lt] }
  end,
  right_mul := begin
    rintros [ident x, ident Œ≥],
    rcases [expr group_with_zero.eq_zero_or_unit (v x), "with", ident Hx, "|", "‚ü®", ident Œ≥x, ",", ident Hx, "‚ü©"],
    { use [expr 1],
      rintros [ident y, "(", ident y_in, ":", expr ¬´expr < ¬ª(v y, 1), ")"],
      change [expr ¬´expr < ¬ª(v ¬´expr * ¬ª(y, x), _)] [] [],
      rw ["[", expr valuation.map_mul, ",", expr Hx, ",", expr mul_zero, "]"] [],
      exact [expr units.zero_lt Œ≥] },
    { use [expr ¬´expr * ¬ª(¬´expr ‚Åª¬π¬ª(Œ≥x), Œ≥)],
      rintros [ident y, "(", ident vy_lt, ":", expr ¬´expr < ¬ª(v y, ¬´expr‚Üë ¬ª(¬´expr * ¬ª(¬´expr ‚Åª¬π¬ª(Œ≥x), Œ≥))), ")"],
      change [expr ¬´expr < ¬ª(v ¬´expr * ¬ª(y, x), Œ≥)] [] [],
      rw ["[", expr valuation.map_mul, ",", expr Hx, "]"] [],
      rw ["[", expr units.coe_mul, ",", expr mul_comm, "]"] ["at", ident vy_lt],
      simpa [] [] [] [] [] ["using", expr mul_inv_lt_of_lt_mul‚ÇÄ vy_lt] }
  end }

instance (priority := 100) : TopologicalSpace R :=
  subgroups_basis.topology

theorem mem_nhds {s : Set R} {x : R} : s ‚àà ùìù x ‚Üî ‚àÉ Œ≥ : Units (Valued.Œì‚ÇÄ R), { y | v (y - x) < Œ≥ } ‚äÜ s :=
  by 
    simpa [(subgroups_basis.has_basis_nhds x).mem_iff]

theorem mem_nhds_zero {s : Set R} : s ‚àà ùìù (0 : R) ‚Üî ‚àÉ Œ≥ : Units (Œì‚ÇÄ R), { x | v x < (Œ≥ : Œì‚ÇÄ R) } ‚äÜ s :=
  by 
    simp [Valued.mem_nhds, sub_zero]

theorem loc_const {x : R} (h : v x ‚â† 0) : { y:R | v y = v x } ‚àà ùìù x :=
  by 
    rw [Valued.mem_nhds]
    rcases units.exists_iff_ne_zero.mpr h with ‚ü®Œ≥, hx‚ü©
    use Œ≥ 
    rw [hx]
    intro y y_in 
    exact Valuation.map_eq_of_sub_lt _ y_in

/-- The uniform structure on a valued ring.-/
instance (priority := 100)UniformSpace : UniformSpace R :=
  TopologicalAddGroup.toUniformSpace R

/-- A valued ring is a uniform additive group.-/
instance (priority := 100)UniformAddGroup : UniformAddGroup R :=
  topological_add_group_is_uniform

theorem cauchy_iff {F : Filter R} :
  Cauchy F ‚Üî F.ne_bot ‚àß ‚àÄ (Œ≥ : Units (Œì‚ÇÄ R)), ‚àÉ (M : _)(_ : M ‚àà F), ‚àÄ x y, x ‚àà M ‚Üí y ‚àà M ‚Üí v (y - x) < Œ≥ :=
  by 
    rw [AddGroupFilterBasis.cauchy_iff]
    apply and_congr Iff.rfl 
    simpRw [subgroups_basis.mem_add_group_filter_basis_iff]
    split 
    ¬∑
      intro h Œ≥ 
      exact h _ (subgroups_basis.mem_add_group_filter_basis _)
    ¬∑
      rintro h - ‚ü®Œ≥, rfl‚ü©
      exact h Œ≥

end Valued

