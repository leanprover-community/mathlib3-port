/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl

! This file was ported from Lean 3 source module topology.instances.ennreal
! leanprover-community/mathlib commit ec4b2eeb50364487f80421c0b4c41328a611f30d
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Topology.Instances.Nnreal
import Mathbin.Topology.Algebra.Order.MonotoneContinuity
import Mathbin.Topology.Algebra.InfiniteSum.Real
import Mathbin.Topology.Algebra.Order.LiminfLimsup
import Mathbin.Topology.MetricSpace.Lipschitz

/-!
# Extended non-negative reals

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.
-/


noncomputable section

open Classical Set Filter Metric

open Classical Topology ENNReal NNReal BigOperators Filter

variable {Œ± : Type _} {Œ≤ : Type _} {Œ≥ : Type _}

namespace ENNReal

variable {a b c d : ‚Ñù‚â•0‚àû} {r p q : ‚Ñù‚â•0}

variable {x y z : ‚Ñù‚â•0‚àû} {Œµ Œµ‚ÇÅ Œµ‚ÇÇ : ‚Ñù‚â•0‚àû} {s : Set ‚Ñù‚â•0‚àû}

section TopologicalSpace

open TopologicalSpace

/-- Topology on `‚Ñù‚â•0‚àû`.

Note: this is different from the `emetric_space` topology. The `emetric_space` topology has
`is_open {‚ä§}`, while this topology doesn't have singleton elements. -/
instance : TopologicalSpace ‚Ñù‚â•0‚àû :=
  Preorder.topology ‚Ñù‚â•0‚àû

instance : OrderTopology ‚Ñù‚â•0‚àû :=
  ‚ü®rfl‚ü©

instance : T2Space ‚Ñù‚â•0‚àû := by infer_instance

-- short-circuit type class inference
instance : NormalSpace ‚Ñù‚â•0‚àû :=
  normalOfCompactT2

instance : SecondCountableTopology ‚Ñù‚â•0‚àû :=
  orderIsoUnitIntervalBirational.toHomeomorph.Embedding.SecondCountableTopology

/- warning: ennreal.embedding_coe -> ENNReal.embedding_coe is a dubious translation:
lean 3 declaration is
  Embedding.{0, 0} NNReal ENNReal NNReal.topologicalSpace ENNReal.topologicalSpace ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))))
but is expected to have type
  Embedding.{0, 0} NNReal ENNReal NNReal.instTopologicalSpaceNNReal ENNReal.instTopologicalSpaceENNReal ENNReal.some
Case conversion may be inaccurate. Consider using '#align ennreal.embedding_coe ENNReal.embedding_coe‚Çì'. -/
theorem embedding_coe : Embedding (coe : ‚Ñù‚â•0 ‚Üí ‚Ñù‚â•0‚àû) :=
  ‚ü®‚ü®by
      refine' le_antisymm _ _
      ¬∑ rw [@OrderTopology.topology_eq_generate_intervals ‚Ñù‚â•0‚àû _, ‚Üê coinduced_le_iff_le_induced]
        refine' le_generateFrom fun s ha => _
        rcases ha with ‚ü®a, rfl | rfl‚ü©
        show IsOpen { b : ‚Ñù‚â•0 | a < ‚Üëb }
        ¬∑ cases a <;> simp [none_eq_top, some_eq_coe, isOpen_lt']
        show IsOpen { b : ‚Ñù‚â•0 | ‚Üëb < a }
        ¬∑ cases a <;> simp [none_eq_top, some_eq_coe, isOpen_gt', isOpen_const]
      ¬∑ rw [@OrderTopology.topology_eq_generate_intervals ‚Ñù‚â•0 _]
        refine' le_generateFrom fun s ha => _
        rcases ha with ‚ü®a, rfl | rfl‚ü©
        exact ‚ü®Ioi a, isOpen_Ioi, by simp [Ioi]‚ü©
        exact ‚ü®Iio a, isOpen_Iio, by simp [Iio]‚ü©‚ü©, fun a b => coe_eq_coe.1‚ü©
#align ennreal.embedding_coe ENNReal.embedding_coe

/- warning: ennreal.is_open_ne_top -> ENNReal.isOpen_ne_top is a dubious translation:
lean 3 declaration is
  IsOpen.{0} ENNReal ENNReal.topologicalSpace (setOf.{0} ENNReal (fun (a : ENNReal) => Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))))
but is expected to have type
  IsOpen.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (setOf.{0} ENNReal (fun (a : ENNReal) => Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))))
Case conversion may be inaccurate. Consider using '#align ennreal.is_open_ne_top ENNReal.isOpen_ne_top‚Çì'. -/
theorem isOpen_ne_top : IsOpen { a : ‚Ñù‚â•0‚àû | a ‚â† ‚ä§ } :=
  isOpen_ne
#align ennreal.is_open_ne_top ENNReal.isOpen_ne_top

/- warning: ennreal.is_open_Ico_zero -> ENNReal.isOpen_Ico_zero is a dubious translation:
lean 3 declaration is
  forall {b : ENNReal}, IsOpen.{0} ENNReal ENNReal.topologicalSpace (Set.Ico.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero))) b)
but is expected to have type
  forall {b : ENNReal}, IsOpen.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (Set.Ico.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero)) b)
Case conversion may be inaccurate. Consider using '#align ennreal.is_open_Ico_zero ENNReal.isOpen_Ico_zero‚Çì'. -/
theorem isOpen_Ico_zero : IsOpen (Ico 0 b) :=
  by
  rw [ENNReal.Ico_eq_Iio]
  exact isOpen_Iio
#align ennreal.is_open_Ico_zero ENNReal.isOpen_Ico_zero

/- warning: ennreal.open_embedding_coe -> ENNReal.openEmbedding_coe is a dubious translation:
lean 3 declaration is
  OpenEmbedding.{0, 0} NNReal ENNReal NNReal.topologicalSpace ENNReal.topologicalSpace ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))))
but is expected to have type
  OpenEmbedding.{0, 0} NNReal ENNReal NNReal.instTopologicalSpaceNNReal ENNReal.instTopologicalSpaceENNReal ENNReal.some
Case conversion may be inaccurate. Consider using '#align ennreal.open_embedding_coe ENNReal.openEmbedding_coe‚Çì'. -/
theorem openEmbedding_coe : OpenEmbedding (coe : ‚Ñù‚â•0 ‚Üí ‚Ñù‚â•0‚àû) :=
  ‚ü®embedding_coe, by
    convert is_open_ne_top
    ext (x | _) <;> simp [none_eq_top, some_eq_coe]‚ü©
#align ennreal.open_embedding_coe ENNReal.openEmbedding_coe

/- warning: ennreal.coe_range_mem_nhds -> ENNReal.coe_range_mem_nhds is a dubious translation:
lean 3 declaration is
  forall {r : NNReal}, Membership.Mem.{0, 0} (Set.{0} ENNReal) (Filter.{0} ENNReal) (Filter.hasMem.{0} ENNReal) (Set.range.{0, 1} ENNReal NNReal ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))))) (nhds.{0} ENNReal ENNReal.topologicalSpace ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) r))
but is expected to have type
  forall {r : NNReal}, Membership.mem.{0, 0} (Set.{0} ENNReal) (Filter.{0} ENNReal) (instMembershipSetFilter.{0} ENNReal) (Set.range.{0, 1} ENNReal NNReal ENNReal.some) (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (ENNReal.some r))
Case conversion may be inaccurate. Consider using '#align ennreal.coe_range_mem_nhds ENNReal.coe_range_mem_nhds‚Çì'. -/
theorem coe_range_mem_nhds : range (coe : ‚Ñù‚â•0 ‚Üí ‚Ñù‚â•0‚àû) ‚àà ùìù (r : ‚Ñù‚â•0‚àû) :=
  IsOpen.mem_nhds openEmbedding_coe.open_range <| mem_range_self _
#align ennreal.coe_range_mem_nhds ENNReal.coe_range_mem_nhds

/- warning: ennreal.tendsto_coe -> ENNReal.tendsto_coe is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Filter.{u1} Œ±} {m : Œ± -> NNReal} {a : NNReal}, Iff (Filter.Tendsto.{u1, 0} Œ± ENNReal (fun (a : Œ±) => (fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) (m a)) f (nhds.{0} ENNReal ENNReal.topologicalSpace ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) a))) (Filter.Tendsto.{u1, 0} Œ± NNReal m f (nhds.{0} NNReal NNReal.topologicalSpace a))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Filter.{u1} Œ±} {m : Œ± -> NNReal} {a : NNReal}, Iff (Filter.Tendsto.{u1, 0} Œ± ENNReal (fun (a : Œ±) => ENNReal.some (m a)) f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (ENNReal.some a))) (Filter.Tendsto.{u1, 0} Œ± NNReal m f (nhds.{0} NNReal NNReal.instTopologicalSpaceNNReal a))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto_coe ENNReal.tendsto_coe‚Çì'. -/
@[norm_cast]
theorem tendsto_coe {f : Filter Œ±} {m : Œ± ‚Üí ‚Ñù‚â•0} {a : ‚Ñù‚â•0} :
    Tendsto (fun a => (m a : ‚Ñù‚â•0‚àû)) f (ùìù ‚Üëa) ‚Üî Tendsto m f (ùìù a) :=
  embedding_coe.tendsto_nhds_iff.symm
#align ennreal.tendsto_coe ENNReal.tendsto_coe

/- warning: ennreal.continuous_coe -> ENNReal.continuous_coe is a dubious translation:
lean 3 declaration is
  Continuous.{0, 0} NNReal ENNReal NNReal.topologicalSpace ENNReal.topologicalSpace ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))))
but is expected to have type
  Continuous.{0, 0} NNReal ENNReal NNReal.instTopologicalSpaceNNReal ENNReal.instTopologicalSpaceENNReal ENNReal.some
Case conversion may be inaccurate. Consider using '#align ennreal.continuous_coe ENNReal.continuous_coe‚Çì'. -/
theorem continuous_coe : Continuous (coe : ‚Ñù‚â•0 ‚Üí ‚Ñù‚â•0‚àû) :=
  embedding_coe.Continuous
#align ennreal.continuous_coe ENNReal.continuous_coe

/- warning: ennreal.continuous_coe_iff -> ENNReal.continuous_coe_iff is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] {f : Œ± -> NNReal}, Iff (Continuous.{u1, 0} Œ± ENNReal _inst_1 ENNReal.topologicalSpace (fun (a : Œ±) => (fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) (f a))) (Continuous.{u1, 0} Œ± NNReal _inst_1 NNReal.topologicalSpace f)
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] {f : Œ± -> NNReal}, Iff (Continuous.{u1, 0} Œ± ENNReal _inst_1 ENNReal.instTopologicalSpaceENNReal (fun (a : Œ±) => ENNReal.some (f a))) (Continuous.{u1, 0} Œ± NNReal _inst_1 NNReal.instTopologicalSpaceNNReal f)
Case conversion may be inaccurate. Consider using '#align ennreal.continuous_coe_iff ENNReal.continuous_coe_iff‚Çì'. -/
theorem continuous_coe_iff {Œ±} [TopologicalSpace Œ±] {f : Œ± ‚Üí ‚Ñù‚â•0} :
    (Continuous fun a => (f a : ‚Ñù‚â•0‚àû)) ‚Üî Continuous f :=
  embedding_coe.continuous_iff.symm
#align ennreal.continuous_coe_iff ENNReal.continuous_coe_iff

/- warning: ennreal.nhds_coe -> ENNReal.nhds_coe is a dubious translation:
lean 3 declaration is
  forall {r : NNReal}, Eq.{1} (Filter.{0} ENNReal) (nhds.{0} ENNReal ENNReal.topologicalSpace ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) r)) (Filter.map.{0, 0} NNReal ENNReal ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe)))) (nhds.{0} NNReal NNReal.topologicalSpace r))
but is expected to have type
  forall {r : NNReal}, Eq.{1} (Filter.{0} ENNReal) (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (ENNReal.some r)) (Filter.map.{0, 0} NNReal ENNReal ENNReal.some (nhds.{0} NNReal NNReal.instTopologicalSpaceNNReal r))
Case conversion may be inaccurate. Consider using '#align ennreal.nhds_coe ENNReal.nhds_coe‚Çì'. -/
theorem nhds_coe {r : ‚Ñù‚â•0} : ùìù (r : ‚Ñù‚â•0‚àû) = (ùìù r).map coe :=
  (openEmbedding_coe.map_nhds_eq r).symm
#align ennreal.nhds_coe ENNReal.nhds_coe

/- warning: ennreal.tendsto_nhds_coe_iff -> ENNReal.tendsto_nhds_coe_iff is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {l : Filter.{u1} Œ±} {x : NNReal} {f : ENNReal -> Œ±}, Iff (Filter.Tendsto.{0, u1} ENNReal Œ± f (nhds.{0} ENNReal ENNReal.topologicalSpace ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) x)) l) (Filter.Tendsto.{0, u1} NNReal Œ± (Function.comp.{1, 1, succ u1} NNReal ENNReal Œ± f ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))))) (nhds.{0} NNReal NNReal.topologicalSpace x) l)
but is expected to have type
  forall {Œ± : Type.{u1}} {l : Filter.{u1} Œ±} {x : NNReal} {f : ENNReal -> Œ±}, Iff (Filter.Tendsto.{0, u1} ENNReal Œ± f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (ENNReal.some x)) l) (Filter.Tendsto.{0, u1} NNReal Œ± (Function.comp.{1, 1, succ u1} NNReal ENNReal Œ± f ENNReal.some) (nhds.{0} NNReal NNReal.instTopologicalSpaceNNReal x) l)
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto_nhds_coe_iff ENNReal.tendsto_nhds_coe_iff‚Çì'. -/
theorem tendsto_nhds_coe_iff {Œ± : Type _} {l : Filter Œ±} {x : ‚Ñù‚â•0} {f : ‚Ñù‚â•0‚àû ‚Üí Œ±} :
    Tendsto f (ùìù ‚Üëx) l ‚Üî Tendsto (f ‚àò coe : ‚Ñù‚â•0 ‚Üí Œ±) (ùìù x) l :=
  show _ ‚â§ _ ‚Üî _ ‚â§ _ by rw [nhds_coe, Filter.map_map]
#align ennreal.tendsto_nhds_coe_iff ENNReal.tendsto_nhds_coe_iff

/- warning: ennreal.continuous_at_coe_iff -> ENNReal.continuousAt_coe_iff is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] {x : NNReal} {f : ENNReal -> Œ±}, Iff (ContinuousAt.{0, u1} ENNReal Œ± ENNReal.topologicalSpace _inst_1 f ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) x)) (ContinuousAt.{0, u1} NNReal Œ± NNReal.topologicalSpace _inst_1 (Function.comp.{1, 1, succ u1} NNReal ENNReal Œ± f ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))))) x)
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] {x : NNReal} {f : ENNReal -> Œ±}, Iff (ContinuousAt.{0, u1} ENNReal Œ± ENNReal.instTopologicalSpaceENNReal _inst_1 f (ENNReal.some x)) (ContinuousAt.{0, u1} NNReal Œ± NNReal.instTopologicalSpaceNNReal _inst_1 (Function.comp.{1, 1, succ u1} NNReal ENNReal Œ± f ENNReal.some) x)
Case conversion may be inaccurate. Consider using '#align ennreal.continuous_at_coe_iff ENNReal.continuousAt_coe_iff‚Çì'. -/
theorem continuousAt_coe_iff {Œ± : Type _} [TopologicalSpace Œ±] {x : ‚Ñù‚â•0} {f : ‚Ñù‚â•0‚àû ‚Üí Œ±} :
    ContinuousAt f ‚Üëx ‚Üî ContinuousAt (f ‚àò coe : ‚Ñù‚â•0 ‚Üí Œ±) x :=
  tendsto_nhds_coe_iff
#align ennreal.continuous_at_coe_iff ENNReal.continuousAt_coe_iff

/- warning: ennreal.nhds_coe_coe -> ENNReal.nhds_coe_coe is a dubious translation:
lean 3 declaration is
  forall {r : NNReal} {p : NNReal}, Eq.{1} (Filter.{0} (Prod.{0, 0} ENNReal ENNReal)) (nhds.{0} (Prod.{0, 0} ENNReal ENNReal) (Prod.topologicalSpace.{0, 0} ENNReal ENNReal ENNReal.topologicalSpace ENNReal.topologicalSpace) (Prod.mk.{0, 0} ENNReal ENNReal ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) r) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) p))) (Filter.map.{0, 0} (Prod.{0, 0} NNReal NNReal) (Prod.{0, 0} ENNReal ENNReal) (fun (p : Prod.{0, 0} NNReal NNReal) => Prod.mk.{0, 0} ENNReal ENNReal ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) (Prod.fst.{0, 0} NNReal NNReal p)) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) (Prod.snd.{0, 0} NNReal NNReal p))) (nhds.{0} (Prod.{0, 0} NNReal NNReal) (Prod.topologicalSpace.{0, 0} NNReal NNReal NNReal.topologicalSpace NNReal.topologicalSpace) (Prod.mk.{0, 0} NNReal NNReal r p)))
but is expected to have type
  forall {r : NNReal} {p : NNReal}, Eq.{1} (Filter.{0} (Prod.{0, 0} ENNReal ENNReal)) (nhds.{0} (Prod.{0, 0} ENNReal ENNReal) (instTopologicalSpaceProd.{0, 0} ENNReal ENNReal ENNReal.instTopologicalSpaceENNReal ENNReal.instTopologicalSpaceENNReal) (Prod.mk.{0, 0} ENNReal ENNReal (ENNReal.some r) (ENNReal.some p))) (Filter.map.{0, 0} (Prod.{0, 0} NNReal NNReal) (Prod.{0, 0} ENNReal ENNReal) (fun (p : Prod.{0, 0} NNReal NNReal) => Prod.mk.{0, 0} ENNReal ENNReal (ENNReal.some (Prod.fst.{0, 0} NNReal NNReal p)) (ENNReal.some (Prod.snd.{0, 0} NNReal NNReal p))) (nhds.{0} (Prod.{0, 0} NNReal NNReal) (instTopologicalSpaceProd.{0, 0} NNReal NNReal NNReal.instTopologicalSpaceNNReal NNReal.instTopologicalSpaceNNReal) (Prod.mk.{0, 0} NNReal NNReal r p)))
Case conversion may be inaccurate. Consider using '#align ennreal.nhds_coe_coe ENNReal.nhds_coe_coe‚Çì'. -/
theorem nhds_coe_coe {r p : ‚Ñù‚â•0} :
    ùìù ((r : ‚Ñù‚â•0‚àû), (p : ‚Ñù‚â•0‚àû)) = (ùìù (r, p)).map fun p : ‚Ñù‚â•0 √ó ‚Ñù‚â•0 => (p.1, p.2) :=
  ((openEmbedding_coe.Prod openEmbedding_coe).map_nhds_eq (r, p)).symm
#align ennreal.nhds_coe_coe ENNReal.nhds_coe_coe

/- warning: ennreal.continuous_of_real -> ENNReal.continuous_ofReal is a dubious translation:
lean 3 declaration is
  Continuous.{0, 0} Real ENNReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) ENNReal.topologicalSpace ENNReal.ofReal
but is expected to have type
  Continuous.{0, 0} Real ENNReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) ENNReal.instTopologicalSpaceENNReal ENNReal.ofReal
Case conversion may be inaccurate. Consider using '#align ennreal.continuous_of_real ENNReal.continuous_ofReal‚Çì'. -/
theorem continuous_ofReal : Continuous ENNReal.ofReal :=
  (continuous_coe_iff.2 continuous_id).comp continuous_real_toNNReal
#align ennreal.continuous_of_real ENNReal.continuous_ofReal

/- warning: ennreal.tendsto_of_real -> ENNReal.tendsto_ofReal is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Filter.{u1} Œ±} {m : Œ± -> Real} {a : Real}, (Filter.Tendsto.{u1, 0} Œ± Real m f (nhds.{0} Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) a)) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal (fun (a : Œ±) => ENNReal.ofReal (m a)) f (nhds.{0} ENNReal ENNReal.topologicalSpace (ENNReal.ofReal a)))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Filter.{u1} Œ±} {m : Œ± -> Real} {a : Real}, (Filter.Tendsto.{u1, 0} Œ± Real m f (nhds.{0} Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) a)) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal (fun (a : Œ±) => ENNReal.ofReal (m a)) f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (ENNReal.ofReal a)))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto_of_real ENNReal.tendsto_ofReal‚Çì'. -/
theorem tendsto_ofReal {f : Filter Œ±} {m : Œ± ‚Üí ‚Ñù} {a : ‚Ñù} (h : Tendsto m f (ùìù a)) :
    Tendsto (fun a => ENNReal.ofReal (m a)) f (ùìù (ENNReal.ofReal a)) :=
  Tendsto.comp (Continuous.tendsto continuous_ofReal _) h
#align ennreal.tendsto_of_real ENNReal.tendsto_ofReal

/- warning: ennreal.tendsto_to_nnreal -> ENNReal.tendsto_toNNReal is a dubious translation:
lean 3 declaration is
  forall {a : ENNReal}, (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (Filter.Tendsto.{0, 0} ENNReal NNReal ENNReal.toNNReal (nhds.{0} ENNReal ENNReal.topologicalSpace a) (nhds.{0} NNReal NNReal.topologicalSpace (ENNReal.toNNReal a)))
but is expected to have type
  forall {a : ENNReal}, (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (Filter.Tendsto.{0, 0} ENNReal NNReal ENNReal.toNNReal (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal a) (nhds.{0} NNReal NNReal.instTopologicalSpaceNNReal (ENNReal.toNNReal a)))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto_to_nnreal ENNReal.tendsto_toNNReal‚Çì'. -/
theorem tendsto_toNNReal {a : ‚Ñù‚â•0‚àû} (ha : a ‚â† ‚ä§) : Tendsto ENNReal.toNNReal (ùìù a) (ùìù a.toNNReal) :=
  by
  lift a to ‚Ñù‚â•0 using ha
  rw [nhds_coe, tendsto_map'_iff]
  exact tendsto_id
#align ennreal.tendsto_to_nnreal ENNReal.tendsto_toNNReal

/- warning: ennreal.eventually_eq_of_to_real_eventually_eq -> ENNReal.eventuallyEq_of_toReal_eventuallyEq is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {l : Filter.{u1} Œ±} {f : Œ± -> ENNReal} {g : Œ± -> ENNReal}, (Filter.Eventually.{u1} Œ± (fun (x : Œ±) => Ne.{1} ENNReal (f x) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) l) -> (Filter.Eventually.{u1} Œ± (fun (x : Œ±) => Ne.{1} ENNReal (g x) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) l) -> (Filter.EventuallyEq.{u1, 0} Œ± Real l (fun (x : Œ±) => ENNReal.toReal (f x)) (fun (x : Œ±) => ENNReal.toReal (g x))) -> (Filter.EventuallyEq.{u1, 0} Œ± ENNReal l f g)
but is expected to have type
  forall {Œ± : Type.{u1}} {l : Filter.{u1} Œ±} {f : Œ± -> ENNReal} {g : Œ± -> ENNReal}, (Filter.Eventually.{u1} Œ± (fun (x : Œ±) => Ne.{1} ENNReal (f x) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) l) -> (Filter.Eventually.{u1} Œ± (fun (x : Œ±) => Ne.{1} ENNReal (g x) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) l) -> (Filter.EventuallyEq.{u1, 0} Œ± Real l (fun (x : Œ±) => ENNReal.toReal (f x)) (fun (x : Œ±) => ENNReal.toReal (g x))) -> (Filter.EventuallyEq.{u1, 0} Œ± ENNReal l f g)
Case conversion may be inaccurate. Consider using '#align ennreal.eventually_eq_of_to_real_eventually_eq ENNReal.eventuallyEq_of_toReal_eventuallyEq‚Çì'. -/
theorem eventuallyEq_of_toReal_eventuallyEq {l : Filter Œ±} {f g : Œ± ‚Üí ‚Ñù‚â•0‚àû}
    (hfi : ‚àÄ·∂† x in l, f x ‚â† ‚àû) (hgi : ‚àÄ·∂† x in l, g x ‚â† ‚àû)
    (hfg : (fun x => (f x).toReal) =·∂†[l] fun x => (g x).toReal) : f =·∂†[l] g :=
  by
  filter_upwards [hfi, hgi, hfg]with _ hfx hgx _
  rwa [‚Üê ENNReal.toReal_eq_toReal hfx hgx]
#align ennreal.eventually_eq_of_to_real_eventually_eq ENNReal.eventuallyEq_of_toReal_eventuallyEq

/- warning: ennreal.continuous_on_to_nnreal -> ENNReal.continuousOn_toNNReal is a dubious translation:
lean 3 declaration is
  ContinuousOn.{0, 0} ENNReal NNReal ENNReal.topologicalSpace NNReal.topologicalSpace ENNReal.toNNReal (setOf.{0} ENNReal (fun (a : ENNReal) => Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))))
but is expected to have type
  ContinuousOn.{0, 0} ENNReal NNReal ENNReal.instTopologicalSpaceENNReal NNReal.instTopologicalSpaceNNReal ENNReal.toNNReal (setOf.{0} ENNReal (fun (a : ENNReal) => Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))))
Case conversion may be inaccurate. Consider using '#align ennreal.continuous_on_to_nnreal ENNReal.continuousOn_toNNReal‚Çì'. -/
theorem continuousOn_toNNReal : ContinuousOn ENNReal.toNNReal { a | a ‚â† ‚àû } := fun a ha =>
  ContinuousAt.continuousWithinAt (tendsto_toNNReal ha)
#align ennreal.continuous_on_to_nnreal ENNReal.continuousOn_toNNReal

/- warning: ennreal.tendsto_to_real -> ENNReal.tendsto_toReal is a dubious translation:
lean 3 declaration is
  forall {a : ENNReal}, (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (Filter.Tendsto.{0, 0} ENNReal Real ENNReal.toReal (nhds.{0} ENNReal ENNReal.topologicalSpace a) (nhds.{0} Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (ENNReal.toReal a)))
but is expected to have type
  forall {a : ENNReal}, (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (Filter.Tendsto.{0, 0} ENNReal Real ENNReal.toReal (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal a) (nhds.{0} Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (ENNReal.toReal a)))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto_to_real ENNReal.tendsto_toReal‚Çì'. -/
theorem tendsto_toReal {a : ‚Ñù‚â•0‚àû} (ha : a ‚â† ‚ä§) : Tendsto ENNReal.toReal (ùìù a) (ùìù a.toReal) :=
  NNReal.tendsto_coe.2 <| tendsto_toNNReal ha
#align ennreal.tendsto_to_real ENNReal.tendsto_toReal

/- warning: ennreal.ne_top_homeomorph_nnreal -> ENNReal.neTopHomeomorphNNReal is a dubious translation:
lean 3 declaration is
  Homeomorph.{0, 0} (coeSort.{1, 2} (Set.{0} ENNReal) Type (Set.hasCoeToSort.{0} ENNReal) (setOf.{0} ENNReal (fun (a : ENNReal) => Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))))) NNReal (Subtype.topologicalSpace.{0} ENNReal (fun (x : ENNReal) => Membership.Mem.{0, 0} ENNReal (Set.{0} ENNReal) (Set.hasMem.{0} ENNReal) x (setOf.{0} ENNReal (fun (a : ENNReal) => Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))))) ENNReal.topologicalSpace) NNReal.topologicalSpace
but is expected to have type
  Homeomorph.{0, 0} (Set.Elem.{0} ENNReal (setOf.{0} ENNReal (fun (a : ENNReal) => Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))))) NNReal (instTopologicalSpaceSubtype.{0} ENNReal (fun (x : ENNReal) => Membership.mem.{0, 0} ENNReal (Set.{0} ENNReal) (Set.instMembershipSet.{0} ENNReal) x (setOf.{0} ENNReal (fun (a : ENNReal) => Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))))) ENNReal.instTopologicalSpaceENNReal) NNReal.instTopologicalSpaceNNReal
Case conversion may be inaccurate. Consider using '#align ennreal.ne_top_homeomorph_nnreal ENNReal.neTopHomeomorphNNReal‚Çì'. -/
/-- The set of finite `‚Ñù‚â•0‚àû` numbers is homeomorphic to `‚Ñù‚â•0`. -/
def neTopHomeomorphNNReal : { a | a ‚â† ‚àû } ‚âÉ‚Çú ‚Ñù‚â•0 :=
  {
    neTopEquivNNReal with
    continuous_toFun := continuousOn_iff_continuous_restrict.1 continuousOn_toNNReal
    continuous_invFun := continuous_coe.subtype_mk _ }
#align ennreal.ne_top_homeomorph_nnreal ENNReal.neTopHomeomorphNNReal

/- warning: ennreal.lt_top_homeomorph_nnreal -> ENNReal.ltTopHomeomorphNNReal is a dubious translation:
lean 3 declaration is
  Homeomorph.{0, 0} (coeSort.{1, 2} (Set.{0} ENNReal) Type (Set.hasCoeToSort.{0} ENNReal) (setOf.{0} ENNReal (fun (a : ENNReal) => LT.lt.{0} ENNReal (Preorder.toHasLt.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))))) NNReal (Subtype.topologicalSpace.{0} ENNReal (fun (x : ENNReal) => Membership.Mem.{0, 0} ENNReal (Set.{0} ENNReal) (Set.hasMem.{0} ENNReal) x (setOf.{0} ENNReal (fun (a : ENNReal) => LT.lt.{0} ENNReal (Preorder.toHasLt.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))))) ENNReal.topologicalSpace) NNReal.topologicalSpace
but is expected to have type
  Homeomorph.{0, 0} (Set.Elem.{0} ENNReal (setOf.{0} ENNReal (fun (a : ENNReal) => LT.lt.{0} ENNReal (Preorder.toLT.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))))) NNReal (instTopologicalSpaceSubtype.{0} ENNReal (fun (x : ENNReal) => Membership.mem.{0, 0} ENNReal (Set.{0} ENNReal) (Set.instMembershipSet.{0} ENNReal) x (setOf.{0} ENNReal (fun (a : ENNReal) => LT.lt.{0} ENNReal (Preorder.toLT.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))))) ENNReal.instTopologicalSpaceENNReal) NNReal.instTopologicalSpaceNNReal
Case conversion may be inaccurate. Consider using '#align ennreal.lt_top_homeomorph_nnreal ENNReal.ltTopHomeomorphNNReal‚Çì'. -/
/-- The set of finite `‚Ñù‚â•0‚àû` numbers is homeomorphic to `‚Ñù‚â•0`. -/
def ltTopHomeomorphNNReal : { a | a < ‚àû } ‚âÉ‚Çú ‚Ñù‚â•0 := by
  refine' (Homeomorph.setCongr <| Set.ext fun x => _).trans ne_top_homeomorph_nnreal <;>
    simp only [mem_set_of_eq, lt_top_iff_ne_top]
#align ennreal.lt_top_homeomorph_nnreal ENNReal.ltTopHomeomorphNNReal

/- warning: ennreal.nhds_top -> ENNReal.nhds_top is a dubious translation:
lean 3 declaration is
  Eq.{1} (Filter.{0} ENNReal) (nhds.{0} ENNReal ENNReal.topologicalSpace (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) (iInf.{0, 1} (Filter.{0} ENNReal) (ConditionallyCompleteLattice.toHasInf.{0} (Filter.{0} ENNReal) (CompleteLattice.toConditionallyCompleteLattice.{0} (Filter.{0} ENNReal) (Filter.completeLattice.{0} ENNReal))) ENNReal (fun (a : ENNReal) => iInf.{0, 0} (Filter.{0} ENNReal) (ConditionallyCompleteLattice.toHasInf.{0} (Filter.{0} ENNReal) (CompleteLattice.toConditionallyCompleteLattice.{0} (Filter.{0} ENNReal) (Filter.completeLattice.{0} ENNReal))) (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) (fun (H : Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) => Filter.principal.{0} ENNReal (Set.Ioi.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) a))))
but is expected to have type
  Eq.{1} (Filter.{0} ENNReal) (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (iInf.{0, 1} (Filter.{0} ENNReal) (ConditionallyCompleteLattice.toInfSet.{0} (Filter.{0} ENNReal) (CompleteLattice.toConditionallyCompleteLattice.{0} (Filter.{0} ENNReal) (Filter.instCompleteLatticeFilter.{0} ENNReal))) ENNReal (fun (a : ENNReal) => iInf.{0, 0} (Filter.{0} ENNReal) (ConditionallyCompleteLattice.toInfSet.{0} (Filter.{0} ENNReal) (CompleteLattice.toConditionallyCompleteLattice.{0} (Filter.{0} ENNReal) (Filter.instCompleteLatticeFilter.{0} ENNReal))) (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (fun (H : Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) => Filter.principal.{0} ENNReal (Set.Ioi.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) a))))
Case conversion may be inaccurate. Consider using '#align ennreal.nhds_top ENNReal.nhds_top‚Çì'. -/
/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (a ¬´expr ‚â† ¬ª ennreal.top()) -/
theorem nhds_top : ùìù ‚àû = ‚®Ö (a) (_ : a ‚â† ‚àû), ùìü (Ioi a) :=
  nhds_top_order.trans <| by simp [lt_top_iff_ne_top, Ioi]
#align ennreal.nhds_top ENNReal.nhds_top

/- warning: ennreal.nhds_top' -> ENNReal.nhds_top' is a dubious translation:
lean 3 declaration is
  Eq.{1} (Filter.{0} ENNReal) (nhds.{0} ENNReal ENNReal.topologicalSpace (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) (iInf.{0, 1} (Filter.{0} ENNReal) (ConditionallyCompleteLattice.toHasInf.{0} (Filter.{0} ENNReal) (CompleteLattice.toConditionallyCompleteLattice.{0} (Filter.{0} ENNReal) (Filter.completeLattice.{0} ENNReal))) NNReal (fun (r : NNReal) => Filter.principal.{0} ENNReal (Set.Ioi.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) r))))
but is expected to have type
  Eq.{1} (Filter.{0} ENNReal) (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (iInf.{0, 1} (Filter.{0} ENNReal) (ConditionallyCompleteLattice.toInfSet.{0} (Filter.{0} ENNReal) (CompleteLattice.toConditionallyCompleteLattice.{0} (Filter.{0} ENNReal) (Filter.instCompleteLatticeFilter.{0} ENNReal))) NNReal (fun (r : NNReal) => Filter.principal.{0} ENNReal (Set.Ioi.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (ENNReal.some r))))
Case conversion may be inaccurate. Consider using '#align ennreal.nhds_top' ENNReal.nhds_top'‚Çì'. -/
theorem nhds_top' : ùìù ‚àû = ‚®Ö r : ‚Ñù‚â•0, ùìü (Ioi r) :=
  nhds_top.trans <| iInf_ne_top _
#align ennreal.nhds_top' ENNReal.nhds_top'

/- warning: ennreal.nhds_top_basis -> ENNReal.nhds_top_basis is a dubious translation:
lean 3 declaration is
  Filter.HasBasis.{0, 1} ENNReal ENNReal (nhds.{0} ENNReal ENNReal.topologicalSpace (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) (fun (a : ENNReal) => LT.lt.{0} ENNReal (Preorder.toHasLt.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) (fun (a : ENNReal) => Set.Ioi.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) a)
but is expected to have type
  Filter.HasBasis.{0, 1} ENNReal ENNReal (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (fun (a : ENNReal) => LT.lt.{0} ENNReal (Preorder.toLT.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (fun (a : ENNReal) => Set.Ioi.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) a)
Case conversion may be inaccurate. Consider using '#align ennreal.nhds_top_basis ENNReal.nhds_top_basis‚Çì'. -/
theorem nhds_top_basis : (ùìù ‚àû).HasBasis (fun a => a < ‚àû) fun a => Ioi a :=
  nhds_top_basis
#align ennreal.nhds_top_basis ENNReal.nhds_top_basis

/- warning: ennreal.tendsto_nhds_top_iff_nnreal -> ENNReal.tendsto_nhds_top_iff_nnreal is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {m : Œ± -> ENNReal} {f : Filter.{u1} Œ±}, Iff (Filter.Tendsto.{u1, 0} Œ± ENNReal m f (nhds.{0} ENNReal ENNReal.topologicalSpace (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (forall (x : NNReal), Filter.Eventually.{u1} Œ± (fun (a : Œ±) => LT.lt.{0} ENNReal (Preorder.toHasLt.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) x) (m a)) f)
but is expected to have type
  forall {Œ± : Type.{u1}} {m : Œ± -> ENNReal} {f : Filter.{u1} Œ±}, Iff (Filter.Tendsto.{u1, 0} Œ± ENNReal m f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (forall (x : NNReal), Filter.Eventually.{u1} Œ± (fun (a : Œ±) => LT.lt.{0} ENNReal (Preorder.toLT.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (ENNReal.some x) (m a)) f)
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto_nhds_top_iff_nnreal ENNReal.tendsto_nhds_top_iff_nnreal‚Çì'. -/
theorem tendsto_nhds_top_iff_nnreal {m : Œ± ‚Üí ‚Ñù‚â•0‚àû} {f : Filter Œ±} :
    Tendsto m f (ùìù ‚ä§) ‚Üî ‚àÄ x : ‚Ñù‚â•0, ‚àÄ·∂† a in f, ‚Üëx < m a := by
  simp only [nhds_top', tendsto_infi, tendsto_principal, mem_Ioi]
#align ennreal.tendsto_nhds_top_iff_nnreal ENNReal.tendsto_nhds_top_iff_nnreal

/- warning: ennreal.tendsto_nhds_top_iff_nat -> ENNReal.tendsto_nhds_top_iff_nat is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {m : Œ± -> ENNReal} {f : Filter.{u1} Œ±}, Iff (Filter.Tendsto.{u1, 0} Œ± ENNReal m f (nhds.{0} ENNReal ENNReal.topologicalSpace (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (forall (n : Nat), Filter.Eventually.{u1} Œ± (fun (a : Œ±) => LT.lt.{0} ENNReal (Preorder.toHasLt.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) Nat ENNReal (HasLiftT.mk.{1, 1} Nat ENNReal (CoeTC‚Çì.coe.{1, 1} Nat ENNReal (Nat.castCoe.{0} ENNReal (AddMonoidWithOne.toNatCast.{0} ENNReal (AddCommMonoidWithOne.toAddMonoidWithOne.{0} ENNReal ENNReal.addCommMonoidWithOne))))) n) (m a)) f)
but is expected to have type
  forall {Œ± : Type.{u1}} {m : Œ± -> ENNReal} {f : Filter.{u1} Œ±}, Iff (Filter.Tendsto.{u1, 0} Œ± ENNReal m f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (forall (n : Nat), Filter.Eventually.{u1} Œ± (fun (a : Œ±) => LT.lt.{0} ENNReal (Preorder.toLT.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (Nat.cast.{0} ENNReal (CanonicallyOrderedCommSemiring.toNatCast.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal) n) (m a)) f)
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto_nhds_top_iff_nat ENNReal.tendsto_nhds_top_iff_nat‚Çì'. -/
theorem tendsto_nhds_top_iff_nat {m : Œ± ‚Üí ‚Ñù‚â•0‚àû} {f : Filter Œ±} :
    Tendsto m f (ùìù ‚ä§) ‚Üî ‚àÄ n : ‚Ñï, ‚àÄ·∂† a in f, ‚Üën < m a :=
  tendsto_nhds_top_iff_nnreal.trans
    ‚ü®fun h n => by simpa only [ENNReal.coe_nat] using h n, fun h x =>
      let ‚ü®n, hn‚ü© := exists_nat_gt x
      (h n).mono fun y => lt_trans <| by rwa [‚Üê ENNReal.coe_nat, coe_lt_coe]‚ü©
#align ennreal.tendsto_nhds_top_iff_nat ENNReal.tendsto_nhds_top_iff_nat

/- warning: ennreal.tendsto_nhds_top -> ENNReal.tendsto_nhds_top is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {m : Œ± -> ENNReal} {f : Filter.{u1} Œ±}, (forall (n : Nat), Filter.Eventually.{u1} Œ± (fun (a : Œ±) => LT.lt.{0} ENNReal (Preorder.toHasLt.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) Nat ENNReal (HasLiftT.mk.{1, 1} Nat ENNReal (CoeTC‚Çì.coe.{1, 1} Nat ENNReal (Nat.castCoe.{0} ENNReal (AddMonoidWithOne.toNatCast.{0} ENNReal (AddCommMonoidWithOne.toAddMonoidWithOne.{0} ENNReal ENNReal.addCommMonoidWithOne))))) n) (m a)) f) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal m f (nhds.{0} ENNReal ENNReal.topologicalSpace (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))))
but is expected to have type
  forall {Œ± : Type.{u1}} {m : Œ± -> ENNReal} {f : Filter.{u1} Œ±}, (forall (n : Nat), Filter.Eventually.{u1} Œ± (fun (a : Œ±) => LT.lt.{0} ENNReal (Preorder.toLT.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (Nat.cast.{0} ENNReal (CanonicallyOrderedCommSemiring.toNatCast.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal) n) (m a)) f) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal m f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto_nhds_top ENNReal.tendsto_nhds_top‚Çì'. -/
theorem tendsto_nhds_top {m : Œ± ‚Üí ‚Ñù‚â•0‚àû} {f : Filter Œ±} (h : ‚àÄ n : ‚Ñï, ‚àÄ·∂† a in f, ‚Üën < m a) :
    Tendsto m f (ùìù ‚ä§) :=
  tendsto_nhds_top_iff_nat.2 h
#align ennreal.tendsto_nhds_top ENNReal.tendsto_nhds_top

/- warning: ennreal.tendsto_nat_nhds_top -> ENNReal.tendsto_nat_nhds_top is a dubious translation:
lean 3 declaration is
  Filter.Tendsto.{0, 0} Nat ENNReal (fun (n : Nat) => (fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) Nat ENNReal (HasLiftT.mk.{1, 1} Nat ENNReal (CoeTC‚Çì.coe.{1, 1} Nat ENNReal (Nat.castCoe.{0} ENNReal (AddMonoidWithOne.toNatCast.{0} ENNReal (AddCommMonoidWithOne.toAddMonoidWithOne.{0} ENNReal ENNReal.addCommMonoidWithOne))))) n) (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (OrderedCancelAddCommMonoid.toPartialOrder.{0} Nat (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} Nat Nat.strictOrderedSemiring)))) (nhds.{0} ENNReal ENNReal.topologicalSpace (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))
but is expected to have type
  Filter.Tendsto.{0, 0} Nat ENNReal (fun (n : Nat) => Nat.cast.{0} ENNReal (CanonicallyOrderedCommSemiring.toNatCast.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal) n) (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (StrictOrderedSemiring.toPartialOrder.{0} Nat Nat.strictOrderedSemiring))) (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto_nat_nhds_top ENNReal.tendsto_nat_nhds_top‚Çì'. -/
theorem tendsto_nat_nhds_top : Tendsto (fun n : ‚Ñï => ‚Üën) atTop (ùìù ‚àû) :=
  tendsto_nhds_top fun n =>
    mem_atTop_sets.2 ‚ü®n + 1, fun m hm => mem_setOf.2 <| Nat.cast_lt.2 <| Nat.lt_of_succ_le hm‚ü©
#align ennreal.tendsto_nat_nhds_top ENNReal.tendsto_nat_nhds_top

/- warning: ennreal.tendsto_coe_nhds_top -> ENNReal.tendsto_coe_nhds_top is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> NNReal} {l : Filter.{u1} Œ±}, Iff (Filter.Tendsto.{u1, 0} Œ± ENNReal (fun (x : Œ±) => (fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) (f x)) l (nhds.{0} ENNReal ENNReal.topologicalSpace (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (Filter.Tendsto.{u1, 0} Œ± NNReal f l (Filter.atTop.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (OrderedCancelAddCommMonoid.toPartialOrder.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)))))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> NNReal} {l : Filter.{u1} Œ±}, Iff (Filter.Tendsto.{u1, 0} Œ± ENNReal (fun (x : Œ±) => ENNReal.some (f x)) l (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (Filter.Tendsto.{u1, 0} Œ± NNReal f l (Filter.atTop.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (StrictOrderedSemiring.toPartialOrder.{0} NNReal instNNRealStrictOrderedSemiring))))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto_coe_nhds_top ENNReal.tendsto_coe_nhds_top‚Çì'. -/
@[simp, norm_cast]
theorem tendsto_coe_nhds_top {f : Œ± ‚Üí ‚Ñù‚â•0} {l : Filter Œ±} :
    Tendsto (fun x => (f x : ‚Ñù‚â•0‚àû)) l (ùìù ‚àû) ‚Üî Tendsto f l atTop := by
  rw [tendsto_nhds_top_iff_nnreal, at_top_basis_Ioi.tendsto_right_iff] <;> [simp, infer_instance,
    infer_instance]
#align ennreal.tendsto_coe_nhds_top ENNReal.tendsto_coe_nhds_top

/- warning: ennreal.tendsto_of_real_at_top -> ENNReal.tendsto_ofReal_atTop is a dubious translation:
lean 3 declaration is
  Filter.Tendsto.{0, 0} Real ENNReal ENNReal.ofReal (Filter.atTop.{0} Real Real.preorder) (nhds.{0} ENNReal ENNReal.topologicalSpace (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))
but is expected to have type
  Filter.Tendsto.{0, 0} Real ENNReal ENNReal.ofReal (Filter.atTop.{0} Real Real.instPreorderReal) (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto_of_real_at_top ENNReal.tendsto_ofReal_atTop‚Çì'. -/
theorem tendsto_ofReal_atTop : Tendsto ENNReal.ofReal atTop (ùìù ‚àû) :=
  tendsto_coe_nhds_top.2 tendsto_real_toNNReal_atTop
#align ennreal.tendsto_of_real_at_top ENNReal.tendsto_ofReal_atTop

/- warning: ennreal.nhds_zero -> ENNReal.nhds_zero is a dubious translation:
lean 3 declaration is
  Eq.{1} (Filter.{0} ENNReal) (nhds.{0} ENNReal ENNReal.topologicalSpace (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) (iInf.{0, 1} (Filter.{0} ENNReal) (ConditionallyCompleteLattice.toHasInf.{0} (Filter.{0} ENNReal) (CompleteLattice.toConditionallyCompleteLattice.{0} (Filter.{0} ENNReal) (Filter.completeLattice.{0} ENNReal))) ENNReal (fun (a : ENNReal) => iInf.{0, 0} (Filter.{0} ENNReal) (ConditionallyCompleteLattice.toHasInf.{0} (Filter.{0} ENNReal) (CompleteLattice.toConditionallyCompleteLattice.{0} (Filter.{0} ENNReal) (Filter.completeLattice.{0} ENNReal))) (Ne.{1} ENNReal a (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) (fun (H : Ne.{1} ENNReal a (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) => Filter.principal.{0} ENNReal (Set.Iio.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) a))))
but is expected to have type
  Eq.{1} (Filter.{0} ENNReal) (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) (iInf.{0, 1} (Filter.{0} ENNReal) (ConditionallyCompleteLattice.toInfSet.{0} (Filter.{0} ENNReal) (CompleteLattice.toConditionallyCompleteLattice.{0} (Filter.{0} ENNReal) (Filter.instCompleteLatticeFilter.{0} ENNReal))) ENNReal (fun (a : ENNReal) => iInf.{0, 0} (Filter.{0} ENNReal) (ConditionallyCompleteLattice.toInfSet.{0} (Filter.{0} ENNReal) (CompleteLattice.toConditionallyCompleteLattice.{0} (Filter.{0} ENNReal) (Filter.instCompleteLatticeFilter.{0} ENNReal))) (Ne.{1} ENNReal a (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) (fun (H : Ne.{1} ENNReal a (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) => Filter.principal.{0} ENNReal (Set.Iio.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) a))))
Case conversion may be inaccurate. Consider using '#align ennreal.nhds_zero ENNReal.nhds_zero‚Çì'. -/
/- ./././Mathport/Syntax/Translate/Basic.lean:635:2: warning: expanding binder collection (a ¬´expr ‚â† ¬ª 0) -/
theorem nhds_zero : ùìù (0 : ‚Ñù‚â•0‚àû) = ‚®Ö (a) (_ : a ‚â† 0), ùìü (Iio a) :=
  nhds_bot_order.trans <| by simp [bot_lt_iff_ne_bot, Iio]
#align ennreal.nhds_zero ENNReal.nhds_zero

/- warning: ennreal.nhds_zero_basis -> ENNReal.nhds_zero_basis is a dubious translation:
lean 3 declaration is
  Filter.HasBasis.{0, 1} ENNReal ENNReal (nhds.{0} ENNReal ENNReal.topologicalSpace (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) (fun (a : ENNReal) => LT.lt.{0} ENNReal (Preorder.toHasLt.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero))) a) (fun (a : ENNReal) => Set.Iio.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) a)
but is expected to have type
  Filter.HasBasis.{0, 1} ENNReal ENNReal (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) (fun (a : ENNReal) => LT.lt.{0} ENNReal (Preorder.toLT.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero)) a) (fun (a : ENNReal) => Set.Iio.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) a)
Case conversion may be inaccurate. Consider using '#align ennreal.nhds_zero_basis ENNReal.nhds_zero_basis‚Çì'. -/
theorem nhds_zero_basis : (ùìù (0 : ‚Ñù‚â•0‚àû)).HasBasis (fun a : ‚Ñù‚â•0‚àû => 0 < a) fun a => Iio a :=
  nhds_bot_basis
#align ennreal.nhds_zero_basis ENNReal.nhds_zero_basis

/- warning: ennreal.nhds_zero_basis_Iic -> ENNReal.nhds_zero_basis_Iic is a dubious translation:
lean 3 declaration is
  Filter.HasBasis.{0, 1} ENNReal ENNReal (nhds.{0} ENNReal ENNReal.topologicalSpace (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) (fun (a : ENNReal) => LT.lt.{0} ENNReal (Preorder.toHasLt.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero))) a) (Set.Iic.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))))
but is expected to have type
  Filter.HasBasis.{0, 1} ENNReal ENNReal (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) (fun (a : ENNReal) => LT.lt.{0} ENNReal (Preorder.toLT.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero)) a) (Set.Iic.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))))
Case conversion may be inaccurate. Consider using '#align ennreal.nhds_zero_basis_Iic ENNReal.nhds_zero_basis_Iic‚Çì'. -/
theorem nhds_zero_basis_Iic : (ùìù (0 : ‚Ñù‚â•0‚àû)).HasBasis (fun a : ‚Ñù‚â•0‚àû => 0 < a) Iic :=
  nhds_bot_basis_Iic
#align ennreal.nhds_zero_basis_Iic ENNReal.nhds_zero_basis_Iic

/- warning: ennreal.nhds_within_Ioi_coe_ne_bot -> ENNReal.nhdsWithin_Ioi_coe_neBot is a dubious translation:
lean 3 declaration is
  forall {r : NNReal}, Filter.NeBot.{0} ENNReal (nhdsWithin.{0} ENNReal ENNReal.topologicalSpace ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) r) (Set.Ioi.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) r)))
but is expected to have type
  forall {r : NNReal}, Filter.NeBot.{0} ENNReal (nhdsWithin.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (ENNReal.some r) (Set.Ioi.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (ENNReal.some r)))
Case conversion may be inaccurate. Consider using '#align ennreal.nhds_within_Ioi_coe_ne_bot ENNReal.nhdsWithin_Ioi_coe_neBot‚Çì'. -/
@[instance]
theorem nhdsWithin_Ioi_coe_neBot {r : ‚Ñù‚â•0} : (ùìù[>] (r : ‚Ñù‚â•0‚àû)).ne_bot :=
  nhdsWithin_Ioi_self_neBot' ‚ü®‚ä§, ENNReal.coe_lt_top‚ü©
#align ennreal.nhds_within_Ioi_coe_ne_bot ENNReal.nhdsWithin_Ioi_coe_neBot

/- warning: ennreal.nhds_within_Ioi_zero_ne_bot -> ENNReal.nhdsWithin_Ioi_zero_neBot is a dubious translation:
lean 3 declaration is
  Filter.NeBot.{0} ENNReal (nhdsWithin.{0} ENNReal ENNReal.topologicalSpace (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero))) (Set.Ioi.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))))
but is expected to have type
  Filter.NeBot.{0} ENNReal (nhdsWithin.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero)) (Set.Ioi.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))))
Case conversion may be inaccurate. Consider using '#align ennreal.nhds_within_Ioi_zero_ne_bot ENNReal.nhdsWithin_Ioi_zero_neBot‚Çì'. -/
@[instance]
theorem nhdsWithin_Ioi_zero_neBot : (ùìù[>] (0 : ‚Ñù‚â•0‚àû)).ne_bot :=
  nhdsWithin_Ioi_coe_neBot
#align ennreal.nhds_within_Ioi_zero_ne_bot ENNReal.nhdsWithin_Ioi_zero_neBot

/- warning: ennreal.Icc_mem_nhds -> ENNReal.Icc_mem_nhds is a dubious translation:
lean 3 declaration is
  forall {x : ENNReal} {Œµ : ENNReal}, (Ne.{1} ENNReal x (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (Ne.{1} ENNReal Œµ (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) -> (Membership.Mem.{0, 0} (Set.{0} ENNReal) (Filter.{0} ENNReal) (Filter.hasMem.{0} ENNReal) (Set.Icc.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) (HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.hasSub) x Œµ) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) x Œµ)) (nhds.{0} ENNReal ENNReal.topologicalSpace x))
but is expected to have type
  forall {x : ENNReal} {Œµ : ENNReal}, (Ne.{1} ENNReal x (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (Ne.{1} ENNReal Œµ (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) -> (Membership.mem.{0, 0} (Set.{0} ENNReal) (Filter.{0} ENNReal) (instMembershipSetFilter.{0} ENNReal) (Set.Icc.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.instSub) x Œµ) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) x Œµ)) (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal x))
Case conversion may be inaccurate. Consider using '#align ennreal.Icc_mem_nhds ENNReal.Icc_mem_nhds‚Çì'. -/
-- using Icc because
-- ‚Ä¢ don't have 'Ioo (x - Œµ) (x + Œµ) ‚àà ùìù x' unless x > 0
-- ‚Ä¢ (x - y ‚â§ Œµ ‚Üî x ‚â§ Œµ + y) is true, while (x - y < Œµ ‚Üî x < Œµ + y) is not
theorem Icc_mem_nhds (xt : x ‚â† ‚ä§) (Œµ0 : Œµ ‚â† 0) : Icc (x - Œµ) (x + Œµ) ‚àà ùìù x :=
  by
  rw [_root_.mem_nhds_iff]
  by_cases x0 : x = 0
  ¬∑ use Iio (x + Œµ)
    have : Iio (x + Œµ) ‚äÜ Icc (x - Œµ) (x + Œµ)
    intro a
    rw [x0]
    simpa using le_of_lt
    use this
    exact ‚ü®isOpen_Iio, mem_Iio_self_add xt Œµ0‚ü©
  ¬∑ use Ioo (x - Œµ) (x + Œµ)
    use Ioo_subset_Icc_self
    exact ‚ü®isOpen_Ioo, mem_Ioo_self_sub_add xt x0 Œµ0 Œµ0‚ü©
#align ennreal.Icc_mem_nhds ENNReal.Icc_mem_nhds

/- warning: ennreal.nhds_of_ne_top -> ENNReal.nhds_of_ne_top is a dubious translation:
lean 3 declaration is
  forall {x : ENNReal}, (Ne.{1} ENNReal x (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (Eq.{1} (Filter.{0} ENNReal) (nhds.{0} ENNReal ENNReal.topologicalSpace x) (iInf.{0, 1} (Filter.{0} ENNReal) (ConditionallyCompleteLattice.toHasInf.{0} (Filter.{0} ENNReal) (CompleteLattice.toConditionallyCompleteLattice.{0} (Filter.{0} ENNReal) (Filter.completeLattice.{0} ENNReal))) ENNReal (fun (Œµ : ENNReal) => iInf.{0, 0} (Filter.{0} ENNReal) (ConditionallyCompleteLattice.toHasInf.{0} (Filter.{0} ENNReal) (CompleteLattice.toConditionallyCompleteLattice.{0} (Filter.{0} ENNReal) (Filter.completeLattice.{0} ENNReal))) (GT.gt.{0} ENNReal (Preorder.toHasLt.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) Œµ (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) (fun (H : GT.gt.{0} ENNReal (Preorder.toHasLt.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) Œµ (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) => Filter.principal.{0} ENNReal (Set.Icc.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) (HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.hasSub) x Œµ) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) x Œµ))))))
but is expected to have type
  forall {x : ENNReal}, (Ne.{1} ENNReal x (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (Eq.{1} (Filter.{0} ENNReal) (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal x) (iInf.{0, 1} (Filter.{0} ENNReal) (ConditionallyCompleteLattice.toInfSet.{0} (Filter.{0} ENNReal) (CompleteLattice.toConditionallyCompleteLattice.{0} (Filter.{0} ENNReal) (Filter.instCompleteLatticeFilter.{0} ENNReal))) ENNReal (fun (Œµ : ENNReal) => iInf.{0, 0} (Filter.{0} ENNReal) (ConditionallyCompleteLattice.toInfSet.{0} (Filter.{0} ENNReal) (CompleteLattice.toConditionallyCompleteLattice.{0} (Filter.{0} ENNReal) (Filter.instCompleteLatticeFilter.{0} ENNReal))) (GT.gt.{0} ENNReal (Preorder.toLT.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) Œµ (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) (fun (H : GT.gt.{0} ENNReal (Preorder.toLT.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) Œµ (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) => Filter.principal.{0} ENNReal (Set.Icc.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.instSub) x Œµ) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) x Œµ))))))
Case conversion may be inaccurate. Consider using '#align ennreal.nhds_of_ne_top ENNReal.nhds_of_ne_top‚Çì'. -/
theorem nhds_of_ne_top (xt : x ‚â† ‚ä§) : ùìù x = ‚®Ö Œµ > 0, ùìü (Icc (x - Œµ) (x + Œµ)) :=
  by
  refine' le_antisymm _ _
  -- first direction
  simp only [le_iInf_iff, le_principal_iff];
  intro Œµ Œµ0; exact Icc_mem_nhds xt Œµ0.lt.ne'
  -- second direction
  rw [nhds_generate_from];
  refine' le_iInf fun s => le_iInf fun hs => _
  rcases hs with ‚ü®xs, ‚ü®a, (rfl : s = Ioi a) | (rfl : s = Iio a)‚ü©‚ü©
  ¬∑ rcases exists_between xs with ‚ü®b, ab, bx‚ü©
    have xb_pos : 0 < x - b := tsub_pos_iff_lt.2 bx
    have xxb : x - (x - b) = b := sub_sub_cancel xt bx.le
    refine' iInf_le_of_le (x - b) (iInf_le_of_le xb_pos _)
    simp only [mem_principal, le_principal_iff]
    intro y
    rintro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
    rw [xxb] at h‚ÇÅ
    calc
      a < b := ab
      _ ‚â§ y := h‚ÇÅ
      
  ¬∑ rcases exists_between xs with ‚ü®b, xb, ba‚ü©
    have bx_pos : 0 < b - x := tsub_pos_iff_lt.2 xb
    have xbx : x + (b - x) = b := add_tsub_cancel_of_le xb.le
    refine' iInf_le_of_le (b - x) (iInf_le_of_le bx_pos _)
    simp only [mem_principal, le_principal_iff]
    intro y
    rintro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
    rw [xbx] at h‚ÇÇ
    calc
      y ‚â§ b := h‚ÇÇ
      _ < a := ba
      
#align ennreal.nhds_of_ne_top ENNReal.nhds_of_ne_top

/- warning: ennreal.tendsto_nhds -> ENNReal.tendsto_nhds is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Filter.{u1} Œ±} {u : Œ± -> ENNReal} {a : ENNReal}, (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (Iff (Filter.Tendsto.{u1, 0} Œ± ENNReal u f (nhds.{0} ENNReal ENNReal.topologicalSpace a)) (forall (Œµ : ENNReal), (GT.gt.{0} ENNReal (Preorder.toHasLt.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) Œµ (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) -> (Filter.Eventually.{u1} Œ± (fun (x : Œ±) => Membership.Mem.{0, 0} ENNReal (Set.{0} ENNReal) (Set.hasMem.{0} ENNReal) (u x) (Set.Icc.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) (HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.hasSub) a Œµ) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) a Œµ))) f)))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Filter.{u1} Œ±} {u : Œ± -> ENNReal} {a : ENNReal}, (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (Iff (Filter.Tendsto.{u1, 0} Œ± ENNReal u f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal a)) (forall (Œµ : ENNReal), (GT.gt.{0} ENNReal (Preorder.toLT.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) Œµ (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) -> (Filter.Eventually.{u1} Œ± (fun (x : Œ±) => Membership.mem.{0, 0} ENNReal (Set.{0} ENNReal) (Set.instMembershipSet.{0} ENNReal) (u x) (Set.Icc.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.instSub) a Œµ) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) a Œµ))) f)))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto_nhds ENNReal.tendsto_nhds‚Çì'. -/
/-- Characterization of neighborhoods for `‚Ñù‚â•0‚àû` numbers. See also `tendsto_order`
for a version with strict inequalities. -/
protected theorem tendsto_nhds {f : Filter Œ±} {u : Œ± ‚Üí ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû} (ha : a ‚â† ‚ä§) :
    Tendsto u f (ùìù a) ‚Üî ‚àÄ Œµ > 0, ‚àÄ·∂† x in f, u x ‚àà Icc (a - Œµ) (a + Œµ) := by
  simp only [nhds_of_ne_top ha, tendsto_infi, tendsto_principal, mem_Icc]
#align ennreal.tendsto_nhds ENNReal.tendsto_nhds

/- warning: ennreal.tendsto_nhds_zero -> ENNReal.tendsto_nhds_zero is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Filter.{u1} Œ±} {u : Œ± -> ENNReal}, Iff (Filter.Tendsto.{u1, 0} Œ± ENNReal u f (nhds.{0} ENNReal ENNReal.topologicalSpace (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero))))) (forall (Œµ : ENNReal), (GT.gt.{0} ENNReal (Preorder.toHasLt.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) Œµ (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) -> (Filter.Eventually.{u1} Œ± (fun (x : Œ±) => LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (u x) Œµ) f))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Filter.{u1} Œ±} {u : Œ± -> ENNReal}, Iff (Filter.Tendsto.{u1, 0} Œ± ENNReal u f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero)))) (forall (Œµ : ENNReal), (GT.gt.{0} ENNReal (Preorder.toLT.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) Œµ (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) -> (Filter.Eventually.{u1} Œ± (fun (x : Œ±) => LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (u x) Œµ) f))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto_nhds_zero ENNReal.tendsto_nhds_zero‚Çì'. -/
protected theorem tendsto_nhds_zero {f : Filter Œ±} {u : Œ± ‚Üí ‚Ñù‚â•0‚àû} :
    Tendsto u f (ùìù 0) ‚Üî ‚àÄ Œµ > 0, ‚àÄ·∂† x in f, u x ‚â§ Œµ :=
  by
  rw [ENNReal.tendsto_nhds zero_ne_top]
  simp only [true_and_iff, zero_tsub, zero_le, zero_add, Set.mem_Icc]
#align ennreal.tendsto_nhds_zero ENNReal.tendsto_nhds_zero

/- warning: ennreal.tendsto_at_top -> ENNReal.tendsto_atTop is a dubious translation:
lean 3 declaration is
  forall {Œ≤ : Type.{u1}} [_inst_1 : Nonempty.{succ u1} Œ≤] [_inst_2 : SemilatticeSup.{u1} Œ≤] {f : Œ≤ -> ENNReal} {a : ENNReal}, (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (Iff (Filter.Tendsto.{u1, 0} Œ≤ ENNReal f (Filter.atTop.{u1} Œ≤ (PartialOrder.toPreorder.{u1} Œ≤ (SemilatticeSup.toPartialOrder.{u1} Œ≤ _inst_2))) (nhds.{0} ENNReal ENNReal.topologicalSpace a)) (forall (Œµ : ENNReal), (GT.gt.{0} ENNReal (Preorder.toHasLt.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) Œµ (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) -> (Exists.{succ u1} Œ≤ (fun (N : Œ≤) => forall (n : Œ≤), (GE.ge.{u1} Œ≤ (Preorder.toHasLe.{u1} Œ≤ (PartialOrder.toPreorder.{u1} Œ≤ (SemilatticeSup.toPartialOrder.{u1} Œ≤ _inst_2))) n N) -> (Membership.Mem.{0, 0} ENNReal (Set.{0} ENNReal) (Set.hasMem.{0} ENNReal) (f n) (Set.Icc.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) (HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.hasSub) a Œµ) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) a Œµ)))))))
but is expected to have type
  forall {Œ≤ : Type.{u1}} [_inst_1 : Nonempty.{succ u1} Œ≤] [_inst_2 : SemilatticeSup.{u1} Œ≤] {f : Œ≤ -> ENNReal} {a : ENNReal}, (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (Iff (Filter.Tendsto.{u1, 0} Œ≤ ENNReal f (Filter.atTop.{u1} Œ≤ (PartialOrder.toPreorder.{u1} Œ≤ (SemilatticeSup.toPartialOrder.{u1} Œ≤ _inst_2))) (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal a)) (forall (Œµ : ENNReal), (GT.gt.{0} ENNReal (Preorder.toLT.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) Œµ (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) -> (Exists.{succ u1} Œ≤ (fun (N : Œ≤) => forall (n : Œ≤), (GE.ge.{u1} Œ≤ (Preorder.toLE.{u1} Œ≤ (PartialOrder.toPreorder.{u1} Œ≤ (SemilatticeSup.toPartialOrder.{u1} Œ≤ _inst_2))) n N) -> (Membership.mem.{0, 0} ENNReal (Set.{0} ENNReal) (Set.instMembershipSet.{0} ENNReal) (f n) (Set.Icc.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.instSub) a Œµ) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) a Œµ)))))))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto_at_top ENNReal.tendsto_atTop‚Çì'. -/
protected theorem tendsto_atTop [Nonempty Œ≤] [SemilatticeSup Œ≤] {f : Œ≤ ‚Üí ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû}
    (ha : a ‚â† ‚ä§) : Tendsto f atTop (ùìù a) ‚Üî ‚àÄ Œµ > 0, ‚àÉ N, ‚àÄ n ‚â• N, f n ‚àà Icc (a - Œµ) (a + Œµ) := by
  simp only [ENNReal.tendsto_nhds ha, mem_at_top_sets, mem_set_of_eq, Filter.Eventually]
#align ennreal.tendsto_at_top ENNReal.tendsto_atTop

instance : ContinuousAdd ‚Ñù‚â•0‚àû :=
  by
  refine' ‚ü®continuous_iff_continuousAt.2 _‚ü©
  rintro ‚ü®_ | a, b‚ü©
  ¬∑ exact tendsto_nhds_top_mono' continuousAt_fst fun p => le_add_right le_rfl
  rcases b with (_ | b)
  ¬∑ exact tendsto_nhds_top_mono' continuousAt_snd fun p => le_add_left le_rfl
  simp only [ContinuousAt, some_eq_coe, nhds_coe_coe, ‚Üê coe_add, tendsto_map'_iff, (¬∑ ‚àò ¬∑),
    tendsto_coe, tendsto_add]

/- warning: ennreal.tendsto_at_top_zero -> ENNReal.tendsto_atTop_zero is a dubious translation:
lean 3 declaration is
  forall {Œ≤ : Type.{u1}} [hŒ≤ : Nonempty.{succ u1} Œ≤] [_inst_1 : SemilatticeSup.{u1} Œ≤] {f : Œ≤ -> ENNReal}, Iff (Filter.Tendsto.{u1, 0} Œ≤ ENNReal f (Filter.atTop.{u1} Œ≤ (PartialOrder.toPreorder.{u1} Œ≤ (SemilatticeSup.toPartialOrder.{u1} Œ≤ _inst_1))) (nhds.{0} ENNReal ENNReal.topologicalSpace (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero))))) (forall (Œµ : ENNReal), (GT.gt.{0} ENNReal (Preorder.toHasLt.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) Œµ (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) -> (Exists.{succ u1} Œ≤ (fun (N : Œ≤) => forall (n : Œ≤), (GE.ge.{u1} Œ≤ (Preorder.toHasLe.{u1} Œ≤ (PartialOrder.toPreorder.{u1} Œ≤ (SemilatticeSup.toPartialOrder.{u1} Œ≤ _inst_1))) n N) -> (LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (f n) Œµ))))
but is expected to have type
  forall {Œ≤ : Type.{u1}} [hŒ≤ : Nonempty.{succ u1} Œ≤] [_inst_1 : SemilatticeSup.{u1} Œ≤] {f : Œ≤ -> ENNReal}, Iff (Filter.Tendsto.{u1, 0} Œ≤ ENNReal f (Filter.atTop.{u1} Œ≤ (PartialOrder.toPreorder.{u1} Œ≤ (SemilatticeSup.toPartialOrder.{u1} Œ≤ _inst_1))) (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero)))) (forall (Œµ : ENNReal), (GT.gt.{0} ENNReal (Preorder.toLT.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) Œµ (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) -> (Exists.{succ u1} Œ≤ (fun (N : Œ≤) => forall (n : Œ≤), (GE.ge.{u1} Œ≤ (Preorder.toLE.{u1} Œ≤ (PartialOrder.toPreorder.{u1} Œ≤ (SemilatticeSup.toPartialOrder.{u1} Œ≤ _inst_1))) n N) -> (LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (f n) Œµ))))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto_at_top_zero ENNReal.tendsto_atTop_zero‚Çì'. -/
protected theorem tendsto_atTop_zero [hŒ≤ : Nonempty Œ≤] [SemilatticeSup Œ≤] {f : Œ≤ ‚Üí ‚Ñù‚â•0‚àû} :
    Filter.atTop.Tendsto f (ùìù 0) ‚Üî ‚àÄ Œµ > 0, ‚àÉ N, ‚àÄ n ‚â• N, f n ‚â§ Œµ :=
  by
  rw [ENNReal.tendsto_atTop zero_ne_top]
  ¬∑ simp_rw [Set.mem_Icc, zero_add, zero_tsub, zero_le _, true_and_iff]
  ¬∑ exact hŒ≤
#align ennreal.tendsto_at_top_zero ENNReal.tendsto_atTop_zero

/- warning: ennreal.tendsto_sub -> ENNReal.tendsto_sub is a dubious translation:
lean 3 declaration is
  forall {a : ENNReal} {b : ENNReal}, (Or (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) (Ne.{1} ENNReal b (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) -> (Filter.Tendsto.{0, 0} (Prod.{0, 0} ENNReal ENNReal) ENNReal (fun (p : Prod.{0, 0} ENNReal ENNReal) => HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.hasSub) (Prod.fst.{0, 0} ENNReal ENNReal p) (Prod.snd.{0, 0} ENNReal ENNReal p)) (nhds.{0} (Prod.{0, 0} ENNReal ENNReal) (Prod.topologicalSpace.{0, 0} ENNReal ENNReal ENNReal.topologicalSpace ENNReal.topologicalSpace) (Prod.mk.{0, 0} ENNReal ENNReal a b)) (nhds.{0} ENNReal ENNReal.topologicalSpace (HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.hasSub) a b)))
but is expected to have type
  forall {a : ENNReal} {b : ENNReal}, (Or (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (Ne.{1} ENNReal b (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) -> (Filter.Tendsto.{0, 0} (Prod.{0, 0} ENNReal ENNReal) ENNReal (fun (p : Prod.{0, 0} ENNReal ENNReal) => HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.instSub) (Prod.fst.{0, 0} ENNReal ENNReal p) (Prod.snd.{0, 0} ENNReal ENNReal p)) (nhds.{0} (Prod.{0, 0} ENNReal ENNReal) (instTopologicalSpaceProd.{0, 0} ENNReal ENNReal ENNReal.instTopologicalSpaceENNReal ENNReal.instTopologicalSpaceENNReal) (Prod.mk.{0, 0} ENNReal ENNReal a b)) (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.instSub) a b)))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto_sub ENNReal.tendsto_sub‚Çì'. -/
theorem tendsto_sub {a b : ‚Ñù‚â•0‚àû} (h : a ‚â† ‚àû ‚à® b ‚â† ‚àû) :
    Tendsto (fun p : ‚Ñù‚â•0‚àû √ó ‚Ñù‚â•0‚àû => p.1 - p.2) (ùìù (a, b)) (ùìù (a - b)) :=
  by
  cases a <;> cases b
  ¬∑ simp only [eq_self_iff_true, not_true, Ne.def, none_eq_top, or_self_iff] at h
    contradiction
  ¬∑ simp only [some_eq_coe, WithTop.top_sub_coe, none_eq_top]
    apply tendsto_nhds_top_iff_nnreal.2 fun n => _
    rw [nhds_prod_eq, eventually_prod_iff]
    refine'
      ‚ü®fun z => (n + (b + 1) : ‚Ñù‚â•0‚àû) < z,
        Ioi_mem_nhds (by simp only [one_lt_top, add_lt_top, coe_lt_top, and_self_iff]), fun z =>
        z < b + 1, Iio_mem_nhds (ENNReal.lt_add_right coe_ne_top one_ne_zero), fun x hx y hy => _‚ü©
    dsimp
    rw [lt_tsub_iff_right]
    have : (n : ‚Ñù‚â•0‚àû) + y + (b + 1) < x + (b + 1) :=
      calc
        (n : ‚Ñù‚â•0‚àû) + y + (b + 1) = (n : ‚Ñù‚â•0‚àû) + (b + 1) + y := by abel
        _ < x + (b + 1) := ENNReal.add_lt_add hx hy
        
    exact lt_of_add_lt_add_right this
  ¬∑ simp only [some_eq_coe, WithTop.sub_top, none_eq_top]
    suffices H : ‚àÄ·∂† p : ‚Ñù‚â•0‚àû √ó ‚Ñù‚â•0‚àû in ùìù (a, ‚àû), 0 = p.1 - p.2
    exact tendsto_const_nhds.congr' H
    rw [nhds_prod_eq, eventually_prod_iff]
    refine'
      ‚ü®fun z => z < a + 1, Iio_mem_nhds (ENNReal.lt_add_right coe_ne_top one_ne_zero), fun z =>
        (a : ‚Ñù‚â•0‚àû) + 1 < z,
        Ioi_mem_nhds (by simp only [one_lt_top, add_lt_top, coe_lt_top, and_self_iff]),
        fun x hx y hy => _‚ü©
    rw [eq_comm]
    simp only [tsub_eq_zero_iff_le, (LT.lt.trans hx hy).le]
  ¬∑ simp only [some_eq_coe, nhds_coe_coe, tendsto_map'_iff, Function.comp, ‚Üê ENNReal.coe_sub,
      tendsto_coe]
    exact Continuous.tendsto (by continuity) _
#align ennreal.tendsto_sub ENNReal.tendsto_sub

/- warning: ennreal.tendsto.sub -> ENNReal.Tendsto.sub is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Filter.{u1} Œ±} {ma : Œ± -> ENNReal} {mb : Œ± -> ENNReal} {a : ENNReal} {b : ENNReal}, (Filter.Tendsto.{u1, 0} Œ± ENNReal ma f (nhds.{0} ENNReal ENNReal.topologicalSpace a)) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal mb f (nhds.{0} ENNReal ENNReal.topologicalSpace b)) -> (Or (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) (Ne.{1} ENNReal b (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal (fun (a : Œ±) => HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.hasSub) (ma a) (mb a)) f (nhds.{0} ENNReal ENNReal.topologicalSpace (HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.hasSub) a b)))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Filter.{u1} Œ±} {ma : Œ± -> ENNReal} {mb : Œ± -> ENNReal} {a : ENNReal} {b : ENNReal}, (Filter.Tendsto.{u1, 0} Œ± ENNReal ma f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal a)) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal mb f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal b)) -> (Or (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (Ne.{1} ENNReal b (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal (fun (a : Œ±) => HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.instSub) (ma a) (mb a)) f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.instSub) a b)))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto.sub ENNReal.Tendsto.sub‚Çì'. -/
protected theorem Tendsto.sub {f : Filter Œ±} {ma : Œ± ‚Üí ‚Ñù‚â•0‚àû} {mb : Œ± ‚Üí ‚Ñù‚â•0‚àû} {a b : ‚Ñù‚â•0‚àû}
    (hma : Tendsto ma f (ùìù a)) (hmb : Tendsto mb f (ùìù b)) (h : a ‚â† ‚àû ‚à® b ‚â† ‚àû) :
    Tendsto (fun a => ma a - mb a) f (ùìù (a - b)) :=
  show Tendsto ((fun p : ‚Ñù‚â•0‚àû √ó ‚Ñù‚â•0‚àû => p.1 - p.2) ‚àò fun a => (ma a, mb a)) f (ùìù (a - b)) from
    Tendsto.comp (ENNReal.tendsto_sub h) (hma.prod_mk_nhds hmb)
#align ennreal.tendsto.sub ENNReal.Tendsto.sub

/- warning: ennreal.tendsto_mul -> ENNReal.tendsto_mul is a dubious translation:
lean 3 declaration is
  forall {a : ENNReal} {b : ENNReal}, (Or (Ne.{1} ENNReal a (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) (Ne.{1} ENNReal b (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) -> (Or (Ne.{1} ENNReal b (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) -> (Filter.Tendsto.{0, 0} (Prod.{0, 0} ENNReal ENNReal) ENNReal (fun (p : Prod.{0, 0} ENNReal ENNReal) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (Prod.fst.{0, 0} ENNReal ENNReal p) (Prod.snd.{0, 0} ENNReal ENNReal p)) (nhds.{0} (Prod.{0, 0} ENNReal ENNReal) (Prod.topologicalSpace.{0, 0} ENNReal ENNReal ENNReal.topologicalSpace ENNReal.topologicalSpace) (Prod.mk.{0, 0} ENNReal ENNReal a b)) (nhds.{0} ENNReal ENNReal.topologicalSpace (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) a b)))
but is expected to have type
  forall {a : ENNReal} {b : ENNReal}, (Or (Ne.{1} ENNReal a (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) (Ne.{1} ENNReal b (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) -> (Or (Ne.{1} ENNReal b (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) -> (Filter.Tendsto.{0, 0} (Prod.{0, 0} ENNReal ENNReal) ENNReal (fun (p : Prod.{0, 0} ENNReal ENNReal) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) (Prod.fst.{0, 0} ENNReal ENNReal p) (Prod.snd.{0, 0} ENNReal ENNReal p)) (nhds.{0} (Prod.{0, 0} ENNReal ENNReal) (instTopologicalSpaceProd.{0, 0} ENNReal ENNReal ENNReal.instTopologicalSpaceENNReal ENNReal.instTopologicalSpaceENNReal) (Prod.mk.{0, 0} ENNReal ENNReal a b)) (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) a b)))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto_mul ENNReal.tendsto_mul‚Çì'. -/
protected theorem tendsto_mul (ha : a ‚â† 0 ‚à® b ‚â† ‚ä§) (hb : b ‚â† 0 ‚à® a ‚â† ‚ä§) :
    Tendsto (fun p : ‚Ñù‚â•0‚àû √ó ‚Ñù‚â•0‚àû => p.1 * p.2) (ùìù (a, b)) (ùìù (a * b)) :=
  by
  have ht :
    ‚àÄ b : ‚Ñù‚â•0‚àû, b ‚â† 0 ‚Üí Tendsto (fun p : ‚Ñù‚â•0‚àû √ó ‚Ñù‚â•0‚àû => p.1 * p.2) (ùìù ((‚ä§ : ‚Ñù‚â•0‚àû), b)) (ùìù ‚ä§) :=
    by
    refine' fun b hb => tendsto_nhds_top_iff_nnreal.2 fun n => _
    rcases lt_iff_exists_nnreal_btwn.1 (pos_iff_ne_zero.2 hb) with ‚ü®Œµ, hŒµ, hŒµb‚ü©
    have : ‚àÄ·∂† c : ‚Ñù‚â•0‚àû √ó ‚Ñù‚â•0‚àû in ùìù (‚àû, b), ‚Üën / ‚ÜëŒµ < c.1 ‚àß ‚ÜëŒµ < c.2 :=
      (lt_mem_nhds <| div_lt_top coe_ne_top hŒµ.ne').prod_nhds (lt_mem_nhds hŒµb)
    refine' this.mono fun c hc => _
    exact (ENNReal.div_mul_cancel hŒµ.ne' coe_ne_top).symm.trans_lt (mul_lt_mul hc.1 hc.2)
  cases a
  ¬∑ simp [none_eq_top] at hb
    simp [none_eq_top, ht b hb, top_mul, hb]
  cases b
  ¬∑ simp [none_eq_top] at ha
    simp [*, nhds_swap (a : ‚Ñù‚â•0‚àû) ‚ä§, none_eq_top, some_eq_coe, top_mul, tendsto_map'_iff, (¬∑ ‚àò ¬∑),
      mul_comm]
  simp [some_eq_coe, nhds_coe_coe, tendsto_map'_iff, (¬∑ ‚àò ¬∑)]
  simp only [coe_mul.symm, tendsto_coe, tendsto_mul]
#align ennreal.tendsto_mul ENNReal.tendsto_mul

/- warning: ennreal.tendsto.mul -> ENNReal.Tendsto.mul is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Filter.{u1} Œ±} {ma : Œ± -> ENNReal} {mb : Œ± -> ENNReal} {a : ENNReal} {b : ENNReal}, (Filter.Tendsto.{u1, 0} Œ± ENNReal ma f (nhds.{0} ENNReal ENNReal.topologicalSpace a)) -> (Or (Ne.{1} ENNReal a (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) (Ne.{1} ENNReal b (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal mb f (nhds.{0} ENNReal ENNReal.topologicalSpace b)) -> (Or (Ne.{1} ENNReal b (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal (fun (a : Œ±) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (ma a) (mb a)) f (nhds.{0} ENNReal ENNReal.topologicalSpace (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) a b)))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Filter.{u1} Œ±} {ma : Œ± -> ENNReal} {mb : Œ± -> ENNReal} {a : ENNReal} {b : ENNReal}, (Filter.Tendsto.{u1, 0} Œ± ENNReal ma f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal a)) -> (Or (Ne.{1} ENNReal a (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) (Ne.{1} ENNReal b (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal mb f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal b)) -> (Or (Ne.{1} ENNReal b (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal (fun (a : Œ±) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) (ma a) (mb a)) f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) a b)))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto.mul ENNReal.Tendsto.mul‚Çì'. -/
protected theorem Tendsto.mul {f : Filter Œ±} {ma : Œ± ‚Üí ‚Ñù‚â•0‚àû} {mb : Œ± ‚Üí ‚Ñù‚â•0‚àû} {a b : ‚Ñù‚â•0‚àû}
    (hma : Tendsto ma f (ùìù a)) (ha : a ‚â† 0 ‚à® b ‚â† ‚ä§) (hmb : Tendsto mb f (ùìù b))
    (hb : b ‚â† 0 ‚à® a ‚â† ‚ä§) : Tendsto (fun a => ma a * mb a) f (ùìù (a * b)) :=
  show Tendsto ((fun p : ‚Ñù‚â•0‚àû √ó ‚Ñù‚â•0‚àû => p.1 * p.2) ‚àò fun a => (ma a, mb a)) f (ùìù (a * b)) from
    Tendsto.comp (ENNReal.tendsto_mul ha hb) (hma.prod_mk_nhds hmb)
#align ennreal.tendsto.mul ENNReal.Tendsto.mul

/- warning: continuous_on.ennreal_mul -> ContinuousOn.ennreal_mul is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] {f : Œ± -> ENNReal} {g : Œ± -> ENNReal} {s : Set.{u1} Œ±}, (ContinuousOn.{u1, 0} Œ± ENNReal _inst_1 ENNReal.topologicalSpace f s) -> (ContinuousOn.{u1, 0} Œ± ENNReal _inst_1 ENNReal.topologicalSpace g s) -> (forall (x : Œ±), (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x s) -> (Or (Ne.{1} ENNReal (f x) (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) (Ne.{1} ENNReal (g x) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))))) -> (forall (x : Œ±), (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x s) -> (Or (Ne.{1} ENNReal (g x) (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) (Ne.{1} ENNReal (f x) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))))) -> (ContinuousOn.{u1, 0} Œ± ENNReal _inst_1 ENNReal.topologicalSpace (fun (x : Œ±) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (f x) (g x)) s)
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] {f : Œ± -> ENNReal} {g : Œ± -> ENNReal} {s : Set.{u1} Œ±}, (ContinuousOn.{u1, 0} Œ± ENNReal _inst_1 ENNReal.instTopologicalSpaceENNReal f s) -> (ContinuousOn.{u1, 0} Œ± ENNReal _inst_1 ENNReal.instTopologicalSpaceENNReal g s) -> (forall (x : Œ±), (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x s) -> (Or (Ne.{1} ENNReal (f x) (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) (Ne.{1} ENNReal (g x) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))))) -> (forall (x : Œ±), (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x s) -> (Or (Ne.{1} ENNReal (g x) (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) (Ne.{1} ENNReal (f x) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))))) -> (ContinuousOn.{u1, 0} Œ± ENNReal _inst_1 ENNReal.instTopologicalSpaceENNReal (fun (x : Œ±) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) (f x) (g x)) s)
Case conversion may be inaccurate. Consider using '#align continuous_on.ennreal_mul ContinuousOn.ennreal_mul‚Çì'. -/
theorem ContinuousOn.ennreal_mul [TopologicalSpace Œ±] {f g : Œ± ‚Üí ‚Ñù‚â•0‚àû} {s : Set Œ±}
    (hf : ContinuousOn f s) (hg : ContinuousOn g s) (h‚ÇÅ : ‚àÄ x ‚àà s, f x ‚â† 0 ‚à® g x ‚â† ‚àû)
    (h‚ÇÇ : ‚àÄ x ‚àà s, g x ‚â† 0 ‚à® f x ‚â† ‚àû) : ContinuousOn (fun x => f x * g x) s := fun x hx =>
  ENNReal.Tendsto.mul (hf x hx) (h‚ÇÅ x hx) (hg x hx) (h‚ÇÇ x hx)
#align continuous_on.ennreal_mul ContinuousOn.ennreal_mul

/- warning: continuous.ennreal_mul -> Continuous.ennreal_mul is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] {f : Œ± -> ENNReal} {g : Œ± -> ENNReal}, (Continuous.{u1, 0} Œ± ENNReal _inst_1 ENNReal.topologicalSpace f) -> (Continuous.{u1, 0} Œ± ENNReal _inst_1 ENNReal.topologicalSpace g) -> (forall (x : Œ±), Or (Ne.{1} ENNReal (f x) (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) (Ne.{1} ENNReal (g x) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) -> (forall (x : Œ±), Or (Ne.{1} ENNReal (g x) (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) (Ne.{1} ENNReal (f x) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) -> (Continuous.{u1, 0} Œ± ENNReal _inst_1 ENNReal.topologicalSpace (fun (x : Œ±) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (f x) (g x)))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} Œ±] {f : Œ± -> ENNReal} {g : Œ± -> ENNReal}, (Continuous.{u1, 0} Œ± ENNReal _inst_1 ENNReal.instTopologicalSpaceENNReal f) -> (Continuous.{u1, 0} Œ± ENNReal _inst_1 ENNReal.instTopologicalSpaceENNReal g) -> (forall (x : Œ±), Or (Ne.{1} ENNReal (f x) (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) (Ne.{1} ENNReal (g x) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) -> (forall (x : Œ±), Or (Ne.{1} ENNReal (g x) (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) (Ne.{1} ENNReal (f x) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) -> (Continuous.{u1, 0} Œ± ENNReal _inst_1 ENNReal.instTopologicalSpaceENNReal (fun (x : Œ±) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) (f x) (g x)))
Case conversion may be inaccurate. Consider using '#align continuous.ennreal_mul Continuous.ennreal_mul‚Çì'. -/
theorem Continuous.ennreal_mul [TopologicalSpace Œ±] {f g : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hf : Continuous f)
    (hg : Continuous g) (h‚ÇÅ : ‚àÄ x, f x ‚â† 0 ‚à® g x ‚â† ‚àû) (h‚ÇÇ : ‚àÄ x, g x ‚â† 0 ‚à® f x ‚â† ‚àû) :
    Continuous fun x => f x * g x :=
  continuous_iff_continuousAt.2 fun x =>
    ENNReal.Tendsto.mul hf.ContinuousAt (h‚ÇÅ x) hg.ContinuousAt (h‚ÇÇ x)
#align continuous.ennreal_mul Continuous.ennreal_mul

/- warning: ennreal.tendsto.const_mul -> ENNReal.Tendsto.const_mul is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Filter.{u1} Œ±} {m : Œ± -> ENNReal} {a : ENNReal} {b : ENNReal}, (Filter.Tendsto.{u1, 0} Œ± ENNReal m f (nhds.{0} ENNReal ENNReal.topologicalSpace b)) -> (Or (Ne.{1} ENNReal b (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal (fun (b : Œ±) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) a (m b)) f (nhds.{0} ENNReal ENNReal.topologicalSpace (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) a b)))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Filter.{u1} Œ±} {m : Œ± -> ENNReal} {a : ENNReal} {b : ENNReal}, (Filter.Tendsto.{u1, 0} Œ± ENNReal m f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal b)) -> (Or (Ne.{1} ENNReal b (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal (fun (b : Œ±) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) a (m b)) f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) a b)))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto.const_mul ENNReal.Tendsto.const_mul‚Çì'. -/
protected theorem Tendsto.const_mul {f : Filter Œ±} {m : Œ± ‚Üí ‚Ñù‚â•0‚àû} {a b : ‚Ñù‚â•0‚àû}
    (hm : Tendsto m f (ùìù b)) (hb : b ‚â† 0 ‚à® a ‚â† ‚ä§) : Tendsto (fun b => a * m b) f (ùìù (a * b)) :=
  by_cases (fun this : a = 0 => by simp [this, tendsto_const_nhds]) fun ha : a ‚â† 0 =>
    ENNReal.Tendsto.mul tendsto_const_nhds (Or.inl ha) hm hb
#align ennreal.tendsto.const_mul ENNReal.Tendsto.const_mul

/- warning: ennreal.tendsto.mul_const -> ENNReal.Tendsto.mul_const is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Filter.{u1} Œ±} {m : Œ± -> ENNReal} {a : ENNReal} {b : ENNReal}, (Filter.Tendsto.{u1, 0} Œ± ENNReal m f (nhds.{0} ENNReal ENNReal.topologicalSpace a)) -> (Or (Ne.{1} ENNReal a (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) (Ne.{1} ENNReal b (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal (fun (x : Œ±) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (m x) b) f (nhds.{0} ENNReal ENNReal.topologicalSpace (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) a b)))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Filter.{u1} Œ±} {m : Œ± -> ENNReal} {a : ENNReal} {b : ENNReal}, (Filter.Tendsto.{u1, 0} Œ± ENNReal m f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal a)) -> (Or (Ne.{1} ENNReal a (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) (Ne.{1} ENNReal b (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal (fun (x : Œ±) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) (m x) b) f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) a b)))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto.mul_const ENNReal.Tendsto.mul_const‚Çì'. -/
protected theorem Tendsto.mul_const {f : Filter Œ±} {m : Œ± ‚Üí ‚Ñù‚â•0‚àû} {a b : ‚Ñù‚â•0‚àû}
    (hm : Tendsto m f (ùìù a)) (ha : a ‚â† 0 ‚à® b ‚â† ‚ä§) : Tendsto (fun x => m x * b) f (ùìù (a * b)) := by
  simpa only [mul_comm] using ENNReal.Tendsto.const_mul hm ha
#align ennreal.tendsto.mul_const ENNReal.Tendsto.mul_const

/- warning: ennreal.tendsto_finset_prod_of_ne_top -> ENNReal.tendsto_finset_prod_of_ne_top is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œπ : Type.{u2}} {f : Œπ -> Œ± -> ENNReal} {x : Filter.{u1} Œ±} {a : Œπ -> ENNReal} (s : Finset.{u2} Œπ), (forall (i : Œπ), (Membership.Mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.hasMem.{u2} Œπ) i s) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal (f i) x (nhds.{0} ENNReal ENNReal.topologicalSpace (a i)))) -> (forall (i : Œπ), (Membership.Mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.hasMem.{u2} Œπ) i s) -> (Ne.{1} ENNReal (a i) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal (fun (b : Œ±) => Finset.prod.{0, u2} ENNReal Œπ (OrderedCommMonoid.toCommMonoid.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommMonoid.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)) s (fun (c : Œπ) => f c b)) x (nhds.{0} ENNReal ENNReal.topologicalSpace (Finset.prod.{0, u2} ENNReal Œπ (OrderedCommMonoid.toCommMonoid.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommMonoid.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)) s (fun (c : Œπ) => a c))))
but is expected to have type
  forall {Œ± : Type.{u1}} {Œπ : Type.{u2}} {f : Œπ -> Œ± -> ENNReal} {x : Filter.{u1} Œ±} {a : Œπ -> ENNReal} (s : Finset.{u2} Œπ), (forall (i : Œπ), (Membership.mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.instMembershipFinset.{u2} Œπ) i s) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal (f i) x (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (a i)))) -> (forall (i : Œπ), (Membership.mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.instMembershipFinset.{u2} Œπ) i s) -> (Ne.{1} ENNReal (a i) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal (fun (b : Œ±) => Finset.prod.{0, u2} ENNReal Œπ (LinearOrderedCommMonoid.toCommMonoid.{0} ENNReal (LinearOrderedCommMonoidWithZero.toLinearOrderedCommMonoid.{0} ENNReal ENNReal.instLinearOrderedCommMonoidWithZeroENNReal)) s (fun (c : Œπ) => f c b)) x (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (Finset.prod.{0, u2} ENNReal Œπ (LinearOrderedCommMonoid.toCommMonoid.{0} ENNReal (LinearOrderedCommMonoidWithZero.toLinearOrderedCommMonoid.{0} ENNReal ENNReal.instLinearOrderedCommMonoidWithZeroENNReal)) s (fun (c : Œπ) => a c))))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto_finset_prod_of_ne_top ENNReal.tendsto_finset_prod_of_ne_top‚Çì'. -/
theorem tendsto_finset_prod_of_ne_top {Œπ : Type _} {f : Œπ ‚Üí Œ± ‚Üí ‚Ñù‚â•0‚àû} {x : Filter Œ±} {a : Œπ ‚Üí ‚Ñù‚â•0‚àû}
    (s : Finset Œπ) (h : ‚àÄ i ‚àà s, Tendsto (f i) x (ùìù (a i))) (h' : ‚àÄ i ‚àà s, a i ‚â† ‚àû) :
    Tendsto (fun b => ‚àè c in s, f c b) x (ùìù (‚àè c in s, a c)) :=
  by
  induction' s using Finset.induction with a s has IH; ¬∑ simp [tendsto_const_nhds]
  simp only [Finset.prod_insert has]
  apply tendsto.mul (h _ (Finset.mem_insert_self _ _))
  ¬∑ right
    exact (prod_lt_top fun i hi => h' _ (Finset.mem_insert_of_mem hi)).Ne
  ¬∑
    exact
      IH (fun i hi => h _ (Finset.mem_insert_of_mem hi)) fun i hi =>
        h' _ (Finset.mem_insert_of_mem hi)
  ¬∑ exact Or.inr (h' _ (Finset.mem_insert_self _ _))
#align ennreal.tendsto_finset_prod_of_ne_top ENNReal.tendsto_finset_prod_of_ne_top

/- warning: ennreal.continuous_at_const_mul -> ENNReal.continuousAt_const_mul is a dubious translation:
lean 3 declaration is
  forall {a : ENNReal} {b : ENNReal}, (Or (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) (Ne.{1} ENNReal b (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero))))) -> (ContinuousAt.{0, 0} ENNReal ENNReal ENNReal.topologicalSpace ENNReal.topologicalSpace (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) a) b)
but is expected to have type
  forall {a : ENNReal} {b : ENNReal}, (Or (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (Ne.{1} ENNReal b (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero)))) -> (ContinuousAt.{0, 0} ENNReal ENNReal ENNReal.instTopologicalSpaceENNReal ENNReal.instTopologicalSpaceENNReal ((fun (x._@.Mathlib.Topology.Instances.ENNReal._hyg.7692 : ENNReal) (x._@.Mathlib.Topology.Instances.ENNReal._hyg.7694 : ENNReal) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) x._@.Mathlib.Topology.Instances.ENNReal._hyg.7692 x._@.Mathlib.Topology.Instances.ENNReal._hyg.7694) a) b)
Case conversion may be inaccurate. Consider using '#align ennreal.continuous_at_const_mul ENNReal.continuousAt_const_mul‚Çì'. -/
protected theorem continuousAt_const_mul {a b : ‚Ñù‚â•0‚àû} (h : a ‚â† ‚ä§ ‚à® b ‚â† 0) :
    ContinuousAt ((¬∑ * ¬∑) a) b :=
  Tendsto.const_mul tendsto_id h.symm
#align ennreal.continuous_at_const_mul ENNReal.continuousAt_const_mul

/- warning: ennreal.continuous_at_mul_const -> ENNReal.continuousAt_mul_const is a dubious translation:
lean 3 declaration is
  forall {a : ENNReal} {b : ENNReal}, (Or (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) (Ne.{1} ENNReal b (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero))))) -> (ContinuousAt.{0, 0} ENNReal ENNReal ENNReal.topologicalSpace ENNReal.topologicalSpace (fun (x : ENNReal) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) x a) b)
but is expected to have type
  forall {a : ENNReal} {b : ENNReal}, (Or (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (Ne.{1} ENNReal b (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero)))) -> (ContinuousAt.{0, 0} ENNReal ENNReal ENNReal.instTopologicalSpaceENNReal ENNReal.instTopologicalSpaceENNReal (fun (x : ENNReal) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) x a) b)
Case conversion may be inaccurate. Consider using '#align ennreal.continuous_at_mul_const ENNReal.continuousAt_mul_const‚Çì'. -/
protected theorem continuousAt_mul_const {a b : ‚Ñù‚â•0‚àû} (h : a ‚â† ‚ä§ ‚à® b ‚â† 0) :
    ContinuousAt (fun x => x * a) b :=
  Tendsto.mul_const tendsto_id h.symm
#align ennreal.continuous_at_mul_const ENNReal.continuousAt_mul_const

/- warning: ennreal.continuous_const_mul -> ENNReal.continuous_const_mul is a dubious translation:
lean 3 declaration is
  forall {a : ENNReal}, (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (Continuous.{0, 0} ENNReal ENNReal ENNReal.topologicalSpace ENNReal.topologicalSpace (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) a))
but is expected to have type
  forall {a : ENNReal}, (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (Continuous.{0, 0} ENNReal ENNReal ENNReal.instTopologicalSpaceENNReal ENNReal.instTopologicalSpaceENNReal ((fun (x._@.Mathlib.Topology.Instances.ENNReal._hyg.7858 : ENNReal) (x._@.Mathlib.Topology.Instances.ENNReal._hyg.7860 : ENNReal) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) x._@.Mathlib.Topology.Instances.ENNReal._hyg.7858 x._@.Mathlib.Topology.Instances.ENNReal._hyg.7860) a))
Case conversion may be inaccurate. Consider using '#align ennreal.continuous_const_mul ENNReal.continuous_const_mul‚Çì'. -/
protected theorem continuous_const_mul {a : ‚Ñù‚â•0‚àû} (ha : a ‚â† ‚ä§) : Continuous ((¬∑ * ¬∑) a) :=
  continuous_iff_continuousAt.2 fun x => ENNReal.continuousAt_const_mul (Or.inl ha)
#align ennreal.continuous_const_mul ENNReal.continuous_const_mul

/- warning: ennreal.continuous_mul_const -> ENNReal.continuous_mul_const is a dubious translation:
lean 3 declaration is
  forall {a : ENNReal}, (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (Continuous.{0, 0} ENNReal ENNReal ENNReal.topologicalSpace ENNReal.topologicalSpace (fun (x : ENNReal) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) x a))
but is expected to have type
  forall {a : ENNReal}, (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (Continuous.{0, 0} ENNReal ENNReal ENNReal.instTopologicalSpaceENNReal ENNReal.instTopologicalSpaceENNReal (fun (x : ENNReal) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) x a))
Case conversion may be inaccurate. Consider using '#align ennreal.continuous_mul_const ENNReal.continuous_mul_const‚Çì'. -/
protected theorem continuous_mul_const {a : ‚Ñù‚â•0‚àû} (ha : a ‚â† ‚ä§) : Continuous fun x => x * a :=
  continuous_iff_continuousAt.2 fun x => ENNReal.continuousAt_mul_const (Or.inl ha)
#align ennreal.continuous_mul_const ENNReal.continuous_mul_const

/- warning: ennreal.continuous_div_const -> ENNReal.continuous_div_const is a dubious translation:
lean 3 declaration is
  forall (c : ENNReal), (Ne.{1} ENNReal c (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) -> (Continuous.{0, 0} ENNReal ENNReal ENNReal.topologicalSpace ENNReal.topologicalSpace (fun (x : ENNReal) => HDiv.hDiv.{0, 0, 0} ENNReal ENNReal ENNReal (instHDiv.{0} ENNReal (DivInvMonoid.toHasDiv.{0} ENNReal ENNReal.divInvMonoid)) x c))
but is expected to have type
  forall (c : ENNReal), (Ne.{1} ENNReal c (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) -> (Continuous.{0, 0} ENNReal ENNReal ENNReal.instTopologicalSpaceENNReal ENNReal.instTopologicalSpaceENNReal (fun (x : ENNReal) => HDiv.hDiv.{0, 0, 0} ENNReal ENNReal ENNReal (instHDiv.{0} ENNReal (DivInvMonoid.toDiv.{0} ENNReal ENNReal.instDivInvMonoidENNReal)) x c))
Case conversion may be inaccurate. Consider using '#align ennreal.continuous_div_const ENNReal.continuous_div_const‚Çì'. -/
protected theorem continuous_div_const (c : ‚Ñù‚â•0‚àû) (c_ne_zero : c ‚â† 0) :
    Continuous fun x : ‚Ñù‚â•0‚àû => x / c :=
  by
  simp_rw [div_eq_mul_inv, continuous_iff_continuousAt]
  intro x
  exact ENNReal.continuousAt_mul_const (Or.intro_left _ (inv_ne_top.mpr c_ne_zero))
#align ennreal.continuous_div_const ENNReal.continuous_div_const

/- warning: ennreal.continuous_pow -> ENNReal.continuous_pow is a dubious translation:
lean 3 declaration is
  forall (n : Nat), Continuous.{0, 0} ENNReal ENNReal ENNReal.topologicalSpace ENNReal.topologicalSpace (fun (a : ENNReal) => HPow.hPow.{0, 0, 0} ENNReal Nat ENNReal (instHPow.{0, 0} ENNReal Nat (Monoid.Pow.{0} ENNReal (MonoidWithZero.toMonoid.{0} ENNReal (Semiring.toMonoidWithZero.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring))))))) a n)
but is expected to have type
  forall (n : Nat), Continuous.{0, 0} ENNReal ENNReal ENNReal.instTopologicalSpaceENNReal ENNReal.instTopologicalSpaceENNReal (fun (a : ENNReal) => HPow.hPow.{0, 0, 0} ENNReal Nat ENNReal (instHPow.{0, 0} ENNReal Nat (Monoid.Pow.{0} ENNReal (MonoidWithZero.toMonoid.{0} ENNReal (Semiring.toMonoidWithZero.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal))))))) a n)
Case conversion may be inaccurate. Consider using '#align ennreal.continuous_pow ENNReal.continuous_pow‚Çì'. -/
@[continuity]
theorem continuous_pow (n : ‚Ñï) : Continuous fun a : ‚Ñù‚â•0‚àû => a ^ n :=
  by
  induction' n with n IH
  ¬∑ simp [continuous_const]
  simp_rw [Nat.succ_eq_add_one, pow_add, pow_one, continuous_iff_continuousAt]
  intro x
  refine' ENNReal.Tendsto.mul (IH.tendsto _) _ tendsto_id _ <;> by_cases H : x = 0
  ¬∑ simp only [H, zero_ne_top, Ne.def, or_true_iff, not_false_iff]
  ¬∑ exact Or.inl fun h => H (pow_eq_zero h)
  ¬∑
    simp only [H, pow_eq_top_iff, zero_ne_top, false_or_iff, eq_self_iff_true, not_true, Ne.def,
      not_false_iff, false_and_iff]
  ¬∑ simp only [H, true_or_iff, Ne.def, not_false_iff]
#align ennreal.continuous_pow ENNReal.continuous_pow

/- warning: ennreal.continuous_on_sub -> ENNReal.continuousOn_sub is a dubious translation:
lean 3 declaration is
  ContinuousOn.{0, 0} (Prod.{0, 0} ENNReal ENNReal) ENNReal (Prod.topologicalSpace.{0, 0} ENNReal ENNReal ENNReal.topologicalSpace ENNReal.topologicalSpace) ENNReal.topologicalSpace (fun (p : Prod.{0, 0} ENNReal ENNReal) => HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.hasSub) (Prod.fst.{0, 0} ENNReal ENNReal p) (Prod.snd.{0, 0} ENNReal ENNReal p)) (setOf.{0} (Prod.{0, 0} ENNReal ENNReal) (fun (p : Prod.{0, 0} ENNReal ENNReal) => Ne.{1} (Prod.{0, 0} ENNReal ENNReal) p (Prod.mk.{0, 0} ENNReal ENNReal (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))))
but is expected to have type
  ContinuousOn.{0, 0} (Prod.{0, 0} ENNReal ENNReal) ENNReal (instTopologicalSpaceProd.{0, 0} ENNReal ENNReal ENNReal.instTopologicalSpaceENNReal ENNReal.instTopologicalSpaceENNReal) ENNReal.instTopologicalSpaceENNReal (fun (p : Prod.{0, 0} ENNReal ENNReal) => HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.instSub) (Prod.fst.{0, 0} ENNReal ENNReal p) (Prod.snd.{0, 0} ENNReal ENNReal p)) (setOf.{0} (Prod.{0, 0} ENNReal ENNReal) (fun (p : Prod.{0, 0} ENNReal ENNReal) => Ne.{1} (Prod.{0, 0} ENNReal ENNReal) p (Prod.mk.{0, 0} ENNReal ENNReal (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))))
Case conversion may be inaccurate. Consider using '#align ennreal.continuous_on_sub ENNReal.continuousOn_sub‚Çì'. -/
theorem continuousOn_sub :
    ContinuousOn (fun p : ‚Ñù‚â•0‚àû √ó ‚Ñù‚â•0‚àû => p.fst - p.snd) { p : ‚Ñù‚â•0‚àû √ó ‚Ñù‚â•0‚àû | p ‚â† ‚ü®‚àû, ‚àû‚ü© } :=
  by
  rw [ContinuousOn]
  rintro ‚ü®x, y‚ü© hp
  simp only [Ne.def, Set.mem_setOf_eq, Prod.mk.inj_iff] at hp
  refine' tendsto_nhdsWithin_of_tendsto_nhds (tendsto_sub (not_and_distrib.mp hp))
#align ennreal.continuous_on_sub ENNReal.continuousOn_sub

/- warning: ennreal.continuous_sub_left -> ENNReal.continuous_sub_left is a dubious translation:
lean 3 declaration is
  forall {a : ENNReal}, (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (Continuous.{0, 0} ENNReal ENNReal ENNReal.topologicalSpace ENNReal.topologicalSpace (fun (x : ENNReal) => HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.hasSub) a x))
but is expected to have type
  forall {a : ENNReal}, (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (Continuous.{0, 0} ENNReal ENNReal ENNReal.instTopologicalSpaceENNReal ENNReal.instTopologicalSpaceENNReal (fun (x : ENNReal) => HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.instSub) a x))
Case conversion may be inaccurate. Consider using '#align ennreal.continuous_sub_left ENNReal.continuous_sub_left‚Çì'. -/
theorem continuous_sub_left {a : ‚Ñù‚â•0‚àû} (a_ne_top : a ‚â† ‚ä§) : Continuous fun x => a - x :=
  by
  rw [show (fun x => a - x) = (fun p : ‚Ñù‚â•0‚àû √ó ‚Ñù‚â•0‚àû => p.fst - p.snd) ‚àò fun x => ‚ü®a, x‚ü© by rfl]
  apply ContinuousOn.comp_continuous continuous_on_sub (Continuous.Prod.mk a)
  intro x
  simp only [a_ne_top, Ne.def, mem_set_of_eq, Prod.mk.inj_iff, false_and_iff, not_false_iff]
#align ennreal.continuous_sub_left ENNReal.continuous_sub_left

/- warning: ennreal.continuous_nnreal_sub -> ENNReal.continuous_nnreal_sub is a dubious translation:
lean 3 declaration is
  forall {a : NNReal}, Continuous.{0, 0} ENNReal ENNReal ENNReal.topologicalSpace ENNReal.topologicalSpace (fun (x : ENNReal) => HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.hasSub) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) a) x)
but is expected to have type
  forall {a : NNReal}, Continuous.{0, 0} ENNReal ENNReal ENNReal.instTopologicalSpaceENNReal ENNReal.instTopologicalSpaceENNReal (fun (x : ENNReal) => HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.instSub) (ENNReal.some a) x)
Case conversion may be inaccurate. Consider using '#align ennreal.continuous_nnreal_sub ENNReal.continuous_nnreal_sub‚Çì'. -/
theorem continuous_nnreal_sub {a : ‚Ñù‚â•0} : Continuous fun x : ‚Ñù‚â•0‚àû => (a : ‚Ñù‚â•0‚àû) - x :=
  continuous_sub_left coe_ne_top
#align ennreal.continuous_nnreal_sub ENNReal.continuous_nnreal_sub

/- warning: ennreal.continuous_on_sub_left -> ENNReal.continuousOn_sub_left is a dubious translation:
lean 3 declaration is
  forall (a : ENNReal), ContinuousOn.{0, 0} ENNReal ENNReal ENNReal.topologicalSpace ENNReal.topologicalSpace (fun (x : ENNReal) => HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.hasSub) a x) (setOf.{0} ENNReal (fun (x : ENNReal) => Ne.{1} ENNReal x (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))))
but is expected to have type
  forall (a : ENNReal), ContinuousOn.{0, 0} ENNReal ENNReal ENNReal.instTopologicalSpaceENNReal ENNReal.instTopologicalSpaceENNReal (fun (x : ENNReal) => HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.instSub) a x) (setOf.{0} ENNReal (fun (x : ENNReal) => Ne.{1} ENNReal x (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))))
Case conversion may be inaccurate. Consider using '#align ennreal.continuous_on_sub_left ENNReal.continuousOn_sub_left‚Çì'. -/
theorem continuousOn_sub_left (a : ‚Ñù‚â•0‚àû) : ContinuousOn (fun x => a - x) { x : ‚Ñù‚â•0‚àû | x ‚â† ‚àû } :=
  by
  rw [show (fun x => a - x) = (fun p : ‚Ñù‚â•0‚àû √ó ‚Ñù‚â•0‚àû => p.fst - p.snd) ‚àò fun x => ‚ü®a, x‚ü© by rfl]
  apply ContinuousOn.comp continuous_on_sub (Continuous.continuousOn (Continuous.Prod.mk a))
  rintro _ h (_ | _)
  exact h none_eq_top
#align ennreal.continuous_on_sub_left ENNReal.continuousOn_sub_left

/- warning: ennreal.continuous_sub_right -> ENNReal.continuous_sub_right is a dubious translation:
lean 3 declaration is
  forall (a : ENNReal), Continuous.{0, 0} ENNReal ENNReal ENNReal.topologicalSpace ENNReal.topologicalSpace (fun (x : ENNReal) => HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.hasSub) x a)
but is expected to have type
  forall (a : ENNReal), Continuous.{0, 0} ENNReal ENNReal ENNReal.instTopologicalSpaceENNReal ENNReal.instTopologicalSpaceENNReal (fun (x : ENNReal) => HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.instSub) x a)
Case conversion may be inaccurate. Consider using '#align ennreal.continuous_sub_right ENNReal.continuous_sub_right‚Çì'. -/
theorem continuous_sub_right (a : ‚Ñù‚â•0‚àû) : Continuous fun x : ‚Ñù‚â•0‚àû => x - a :=
  by
  by_cases a_infty : a = ‚àû
  ¬∑ simp [a_infty, continuous_const]
  ¬∑ rw [show (fun x => x - a) = (fun p : ‚Ñù‚â•0‚àû √ó ‚Ñù‚â•0‚àû => p.fst - p.snd) ‚àò fun x => ‚ü®x, a‚ü© by rfl]
    apply ContinuousOn.comp_continuous continuous_on_sub (continuous_id'.prod_mk continuous_const)
    intro x
    simp only [a_infty, Ne.def, mem_set_of_eq, Prod.mk.inj_iff, and_false_iff, not_false_iff]
#align ennreal.continuous_sub_right ENNReal.continuous_sub_right

/- warning: ennreal.tendsto.pow -> ENNReal.Tendsto.pow is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Filter.{u1} Œ±} {m : Œ± -> ENNReal} {a : ENNReal} {n : Nat}, (Filter.Tendsto.{u1, 0} Œ± ENNReal m f (nhds.{0} ENNReal ENNReal.topologicalSpace a)) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal (fun (x : Œ±) => HPow.hPow.{0, 0, 0} ENNReal Nat ENNReal (instHPow.{0, 0} ENNReal Nat (Monoid.Pow.{0} ENNReal (MonoidWithZero.toMonoid.{0} ENNReal (Semiring.toMonoidWithZero.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring))))))) (m x) n) f (nhds.{0} ENNReal ENNReal.topologicalSpace (HPow.hPow.{0, 0, 0} ENNReal Nat ENNReal (instHPow.{0, 0} ENNReal Nat (Monoid.Pow.{0} ENNReal (MonoidWithZero.toMonoid.{0} ENNReal (Semiring.toMonoidWithZero.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring))))))) a n)))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Filter.{u1} Œ±} {m : Œ± -> ENNReal} {a : ENNReal} {n : Nat}, (Filter.Tendsto.{u1, 0} Œ± ENNReal m f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal a)) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal (fun (x : Œ±) => HPow.hPow.{0, 0, 0} ENNReal Nat ENNReal (instHPow.{0, 0} ENNReal Nat (Monoid.Pow.{0} ENNReal (MonoidWithZero.toMonoid.{0} ENNReal (Semiring.toMonoidWithZero.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal))))))) (m x) n) f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (HPow.hPow.{0, 0, 0} ENNReal Nat ENNReal (instHPow.{0, 0} ENNReal Nat (Monoid.Pow.{0} ENNReal (MonoidWithZero.toMonoid.{0} ENNReal (Semiring.toMonoidWithZero.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal))))))) a n)))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto.pow ENNReal.Tendsto.pow‚Çì'. -/
protected theorem Tendsto.pow {f : Filter Œ±} {m : Œ± ‚Üí ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû} {n : ‚Ñï}
    (hm : Tendsto m f (ùìù a)) : Tendsto (fun x => m x ^ n) f (ùìù (a ^ n)) :=
  ((continuous_pow n).Tendsto a).comp hm
#align ennreal.tendsto.pow ENNReal.Tendsto.pow

/- warning: ennreal.le_of_forall_lt_one_mul_le -> ENNReal.le_of_forall_lt_one_mul_le is a dubious translation:
lean 3 declaration is
  forall {x : ENNReal} {y : ENNReal}, (forall (a : ENNReal), (LT.lt.{0} ENNReal (Preorder.toHasLt.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) a (OfNat.ofNat.{0} ENNReal 1 (OfNat.mk.{0} ENNReal 1 (One.one.{0} ENNReal (AddMonoidWithOne.toOne.{0} ENNReal (AddCommMonoidWithOne.toAddMonoidWithOne.{0} ENNReal ENNReal.addCommMonoidWithOne)))))) -> (LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) a x) y)) -> (LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) x y)
but is expected to have type
  forall {x : ENNReal} {y : ENNReal}, (forall (a : ENNReal), (LT.lt.{0} ENNReal (Preorder.toLT.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) a (OfNat.ofNat.{0} ENNReal 1 (One.toOfNat1.{0} ENNReal (CanonicallyOrderedCommSemiring.toOne.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))) -> (LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) a x) y)) -> (LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) x y)
Case conversion may be inaccurate. Consider using '#align ennreal.le_of_forall_lt_one_mul_le ENNReal.le_of_forall_lt_one_mul_le‚Çì'. -/
theorem le_of_forall_lt_one_mul_le {x y : ‚Ñù‚â•0‚àû} (h : ‚àÄ a < 1, a * x ‚â§ y) : x ‚â§ y :=
  by
  have : tendsto (¬∑ * x) (ùìù[<] 1) (ùìù (1 * x)) :=
    (ENNReal.continuousAt_mul_const (Or.inr one_ne_zero)).mono_left inf_le_left
  rw [one_mul] at this
  haveI : (ùìù[<] (1 : ‚Ñù‚â•0‚àû)).ne_bot := nhdsWithin_Iio_self_neBot' ‚ü®0, zero_lt_one‚ü©
  exact le_of_tendsto this (eventually_nhdsWithin_iff.2 <| eventually_of_forall h)
#align ennreal.le_of_forall_lt_one_mul_le ENNReal.le_of_forall_lt_one_mul_le

/- warning: ennreal.infi_mul_left' -> ENNReal.iInf_mul_left' is a dubious translation:
lean 3 declaration is
  forall {Œπ : Sort.{u1}} {f : Œπ -> ENNReal} {a : ENNReal}, ((Eq.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (Eq.{1} ENNReal (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasInf.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => f i)) (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) -> (Exists.{u1} Œπ (fun (i : Œπ) => Eq.{1} ENNReal (f i) (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))))) -> ((Eq.{1} ENNReal a (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) -> (Nonempty.{u1} Œπ)) -> (Eq.{1} ENNReal (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasInf.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) a (f i))) (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) a (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasInf.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => f i))))
but is expected to have type
  forall {Œπ : Sort.{u1}} {f : Œπ -> ENNReal} {a : ENNReal}, ((Eq.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (Eq.{1} ENNReal (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toInfSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => f i)) (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) -> (Exists.{u1} Œπ (fun (i : Œπ) => Eq.{1} ENNReal (f i) (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))))) -> ((Eq.{1} ENNReal a (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) -> (Nonempty.{u1} Œπ)) -> (Eq.{1} ENNReal (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toInfSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) a (f i))) (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) a (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toInfSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => f i))))
Case conversion may be inaccurate. Consider using '#align ennreal.infi_mul_left' ENNReal.iInf_mul_left'‚Çì'. -/
theorem iInf_mul_left' {Œπ} {f : Œπ ‚Üí ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû} (h : a = ‚ä§ ‚Üí (‚®Ö i, f i) = 0 ‚Üí ‚àÉ i, f i = 0)
    (h0 : a = 0 ‚Üí Nonempty Œπ) : (‚®Ö i, a * f i) = a * ‚®Ö i, f i :=
  by
  by_cases H : a = ‚ä§ ‚àß (‚®Ö i, f i) = 0
  ¬∑ rcases h H.1 H.2 with ‚ü®i, hi‚ü©
    rw [H.2, MulZeroClass.mul_zero, ‚Üê bot_eq_zero, iInf_eq_bot]
    exact fun b hb => ‚ü®i, by rwa [hi, MulZeroClass.mul_zero, ‚Üê bot_eq_zero]‚ü©
  ¬∑ rw [not_and_or] at H
    cases isEmpty_or_nonempty Œπ
    ¬∑ rw [iInf_of_empty, iInf_of_empty, mul_top, if_neg]
      exact mt h0 (not_nonempty_iff.2 ‚Äπ_‚Ä∫)
    ¬∑
      exact
        (ennreal.mul_left_mono.map_infi_of_continuous_at' (ENNReal.continuousAt_const_mul H)).symm
#align ennreal.infi_mul_left' ENNReal.iInf_mul_left'

/- warning: ennreal.infi_mul_left -> ENNReal.iInf_mul_left is a dubious translation:
lean 3 declaration is
  forall {Œπ : Sort.{u1}} [_inst_1 : Nonempty.{u1} Œπ] {f : Œπ -> ENNReal} {a : ENNReal}, ((Eq.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (Eq.{1} ENNReal (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasInf.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => f i)) (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) -> (Exists.{u1} Œπ (fun (i : Œπ) => Eq.{1} ENNReal (f i) (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))))) -> (Eq.{1} ENNReal (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasInf.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) a (f i))) (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) a (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasInf.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => f i))))
but is expected to have type
  forall {Œπ : Sort.{u1}} [_inst_1 : Nonempty.{u1} Œπ] {f : Œπ -> ENNReal} {a : ENNReal}, ((Eq.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (Eq.{1} ENNReal (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toInfSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => f i)) (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) -> (Exists.{u1} Œπ (fun (i : Œπ) => Eq.{1} ENNReal (f i) (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))))) -> (Eq.{1} ENNReal (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toInfSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) a (f i))) (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) a (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toInfSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => f i))))
Case conversion may be inaccurate. Consider using '#align ennreal.infi_mul_left ENNReal.iInf_mul_left‚Çì'. -/
theorem iInf_mul_left {Œπ} [Nonempty Œπ] {f : Œπ ‚Üí ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû}
    (h : a = ‚ä§ ‚Üí (‚®Ö i, f i) = 0 ‚Üí ‚àÉ i, f i = 0) : (‚®Ö i, a * f i) = a * ‚®Ö i, f i :=
  iInf_mul_left' h fun _ => ‚ÄπNonempty Œπ‚Ä∫
#align ennreal.infi_mul_left ENNReal.iInf_mul_left

/- warning: ennreal.infi_mul_right' -> ENNReal.iInf_mul_right' is a dubious translation:
lean 3 declaration is
  forall {Œπ : Sort.{u1}} {f : Œπ -> ENNReal} {a : ENNReal}, ((Eq.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (Eq.{1} ENNReal (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasInf.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => f i)) (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) -> (Exists.{u1} Œπ (fun (i : Œπ) => Eq.{1} ENNReal (f i) (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))))) -> ((Eq.{1} ENNReal a (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) -> (Nonempty.{u1} Œπ)) -> (Eq.{1} ENNReal (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasInf.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (f i) a)) (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasInf.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => f i)) a))
but is expected to have type
  forall {Œπ : Sort.{u1}} {f : Œπ -> ENNReal} {a : ENNReal}, ((Eq.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (Eq.{1} ENNReal (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toInfSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => f i)) (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) -> (Exists.{u1} Œπ (fun (i : Œπ) => Eq.{1} ENNReal (f i) (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))))) -> ((Eq.{1} ENNReal a (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) -> (Nonempty.{u1} Œπ)) -> (Eq.{1} ENNReal (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toInfSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) (f i) a)) (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toInfSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => f i)) a))
Case conversion may be inaccurate. Consider using '#align ennreal.infi_mul_right' ENNReal.iInf_mul_right'‚Çì'. -/
theorem iInf_mul_right' {Œπ} {f : Œπ ‚Üí ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû} (h : a = ‚ä§ ‚Üí (‚®Ö i, f i) = 0 ‚Üí ‚àÉ i, f i = 0)
    (h0 : a = 0 ‚Üí Nonempty Œπ) : (‚®Ö i, f i * a) = (‚®Ö i, f i) * a := by
  simpa only [mul_comm a] using infi_mul_left' h h0
#align ennreal.infi_mul_right' ENNReal.iInf_mul_right'

/- warning: ennreal.infi_mul_right -> ENNReal.iInf_mul_right is a dubious translation:
lean 3 declaration is
  forall {Œπ : Sort.{u1}} [_inst_1 : Nonempty.{u1} Œπ] {f : Œπ -> ENNReal} {a : ENNReal}, ((Eq.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (Eq.{1} ENNReal (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasInf.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => f i)) (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) -> (Exists.{u1} Œπ (fun (i : Œπ) => Eq.{1} ENNReal (f i) (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))))) -> (Eq.{1} ENNReal (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasInf.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (f i) a)) (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasInf.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => f i)) a))
but is expected to have type
  forall {Œπ : Sort.{u1}} [_inst_1 : Nonempty.{u1} Œπ] {f : Œπ -> ENNReal} {a : ENNReal}, ((Eq.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (Eq.{1} ENNReal (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toInfSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => f i)) (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) -> (Exists.{u1} Œπ (fun (i : Œπ) => Eq.{1} ENNReal (f i) (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))))) -> (Eq.{1} ENNReal (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toInfSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) (f i) a)) (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toInfSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => f i)) a))
Case conversion may be inaccurate. Consider using '#align ennreal.infi_mul_right ENNReal.iInf_mul_right‚Çì'. -/
theorem iInf_mul_right {Œπ} [Nonempty Œπ] {f : Œπ ‚Üí ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû}
    (h : a = ‚ä§ ‚Üí (‚®Ö i, f i) = 0 ‚Üí ‚àÉ i, f i = 0) : (‚®Ö i, f i * a) = (‚®Ö i, f i) * a :=
  iInf_mul_right' h fun _ => ‚ÄπNonempty Œπ‚Ä∫
#align ennreal.infi_mul_right ENNReal.iInf_mul_right

/- warning: ennreal.inv_map_infi -> ENNReal.inv_map_iInf is a dubious translation:
lean 3 declaration is
  forall {Œπ : Sort.{u1}} {x : Œπ -> ENNReal}, Eq.{1} ENNReal (Inv.inv.{0} ENNReal ENNReal.hasInv (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasInf.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ x)) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => Inv.inv.{0} ENNReal ENNReal.hasInv (x i)))
but is expected to have type
  forall {Œπ : Sort.{u1}} {x : Œπ -> ENNReal}, Eq.{1} ENNReal (Inv.inv.{0} ENNReal ENNReal.instInvENNReal (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toInfSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ x)) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => Inv.inv.{0} ENNReal ENNReal.instInvENNReal (x i)))
Case conversion may be inaccurate. Consider using '#align ennreal.inv_map_infi ENNReal.inv_map_iInf‚Çì'. -/
theorem inv_map_iInf {Œπ : Sort _} {x : Œπ ‚Üí ‚Ñù‚â•0‚àû} : (iInf x)‚Åª¬π = ‚®Ü i, (x i)‚Åª¬π :=
  OrderIso.invENNReal.map_iInf x
#align ennreal.inv_map_infi ENNReal.inv_map_iInf

/- warning: ennreal.inv_map_supr -> ENNReal.inv_map_iSup is a dubious translation:
lean 3 declaration is
  forall {Œπ : Sort.{u1}} {x : Œπ -> ENNReal}, Eq.{1} ENNReal (Inv.inv.{0} ENNReal ENNReal.hasInv (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ x)) (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasInf.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => Inv.inv.{0} ENNReal ENNReal.hasInv (x i)))
but is expected to have type
  forall {Œπ : Sort.{u1}} {x : Œπ -> ENNReal}, Eq.{1} ENNReal (Inv.inv.{0} ENNReal ENNReal.instInvENNReal (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ x)) (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toInfSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => Inv.inv.{0} ENNReal ENNReal.instInvENNReal (x i)))
Case conversion may be inaccurate. Consider using '#align ennreal.inv_map_supr ENNReal.inv_map_iSup‚Çì'. -/
theorem inv_map_iSup {Œπ : Sort _} {x : Œπ ‚Üí ‚Ñù‚â•0‚àû} : (iSup x)‚Åª¬π = ‚®Ö i, (x i)‚Åª¬π :=
  OrderIso.invENNReal.map_iSup x
#align ennreal.inv_map_supr ENNReal.inv_map_iSup

/- warning: ennreal.inv_limsup -> ENNReal.inv_limsup is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {x : Œπ -> ENNReal} {l : Filter.{u1} Œπ}, Eq.{1} ENNReal (Inv.inv.{0} ENNReal ENNReal.hasInv (Filter.limsup.{0, u1} ENNReal Œπ (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)) x l)) (Filter.liminf.{0, u1} ENNReal Œπ (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)) (fun (i : Œπ) => Inv.inv.{0} ENNReal ENNReal.hasInv (x i)) l)
but is expected to have type
  forall {Œπ : Type.{u1}} {x : Œπ -> ENNReal} {l : Filter.{u1} Œπ}, Eq.{1} ENNReal (Inv.inv.{0} ENNReal ENNReal.instInvENNReal (Filter.limsup.{0, u1} ENNReal Œπ (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))) x l)) (Filter.liminf.{0, u1} ENNReal Œπ (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))) (fun (i : Œπ) => Inv.inv.{0} ENNReal ENNReal.instInvENNReal (x i)) l)
Case conversion may be inaccurate. Consider using '#align ennreal.inv_limsup ENNReal.inv_limsup‚Çì'. -/
theorem inv_limsup {Œπ : Sort _} {x : Œπ ‚Üí ‚Ñù‚â•0‚àû} {l : Filter Œπ} :
    (limsup x l)‚Åª¬π = liminf (fun i => (x i)‚Åª¬π) l := by
  simp only [limsup_eq_infi_supr, inv_map_infi, inv_map_supr, liminf_eq_supr_infi]
#align ennreal.inv_limsup ENNReal.inv_limsup

/- warning: ennreal.inv_liminf -> ENNReal.inv_liminf is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {x : Œπ -> ENNReal} {l : Filter.{u1} Œπ}, Eq.{1} ENNReal (Inv.inv.{0} ENNReal ENNReal.hasInv (Filter.liminf.{0, u1} ENNReal Œπ (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)) x l)) (Filter.limsup.{0, u1} ENNReal Œπ (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)) (fun (i : Œπ) => Inv.inv.{0} ENNReal ENNReal.hasInv (x i)) l)
but is expected to have type
  forall {Œπ : Type.{u1}} {x : Œπ -> ENNReal} {l : Filter.{u1} Œπ}, Eq.{1} ENNReal (Inv.inv.{0} ENNReal ENNReal.instInvENNReal (Filter.liminf.{0, u1} ENNReal Œπ (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))) x l)) (Filter.limsup.{0, u1} ENNReal Œπ (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))) (fun (i : Œπ) => Inv.inv.{0} ENNReal ENNReal.instInvENNReal (x i)) l)
Case conversion may be inaccurate. Consider using '#align ennreal.inv_liminf ENNReal.inv_liminf‚Çì'. -/
theorem inv_liminf {Œπ : Sort _} {x : Œπ ‚Üí ‚Ñù‚â•0‚àû} {l : Filter Œπ} :
    (liminf x l)‚Åª¬π = limsup (fun i => (x i)‚Åª¬π) l := by
  simp only [limsup_eq_infi_supr, inv_map_infi, inv_map_supr, liminf_eq_supr_infi]
#align ennreal.inv_liminf ENNReal.inv_liminf

instance : ContinuousInv ‚Ñù‚â•0‚àû :=
  ‚ü®OrderIso.invENNReal.Continuous‚ü©

/- warning: ennreal.tendsto_inv_iff -> ENNReal.tendsto_inv_iff is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Filter.{u1} Œ±} {m : Œ± -> ENNReal} {a : ENNReal}, Iff (Filter.Tendsto.{u1, 0} Œ± ENNReal (fun (x : Œ±) => Inv.inv.{0} ENNReal ENNReal.hasInv (m x)) f (nhds.{0} ENNReal ENNReal.topologicalSpace (Inv.inv.{0} ENNReal ENNReal.hasInv a))) (Filter.Tendsto.{u1, 0} Œ± ENNReal m f (nhds.{0} ENNReal ENNReal.topologicalSpace a))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Filter.{u1} Œ±} {m : Œ± -> ENNReal} {a : ENNReal}, Iff (Filter.Tendsto.{u1, 0} Œ± ENNReal (fun (x : Œ±) => Inv.inv.{0} ENNReal ENNReal.instInvENNReal (m x)) f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (Inv.inv.{0} ENNReal ENNReal.instInvENNReal a))) (Filter.Tendsto.{u1, 0} Œ± ENNReal m f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal a))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto_inv_iff ENNReal.tendsto_inv_iff‚Çì'. -/
@[simp]
protected theorem tendsto_inv_iff {f : Filter Œ±} {m : Œ± ‚Üí ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû} :
    Tendsto (fun x => (m x)‚Åª¬π) f (ùìù a‚Åª¬π) ‚Üî Tendsto m f (ùìù a) :=
  ‚ü®fun h => by simpa only [inv_inv] using tendsto.inv h, Tendsto.inv‚ü©
#align ennreal.tendsto_inv_iff ENNReal.tendsto_inv_iff

/- warning: ennreal.tendsto.div -> ENNReal.Tendsto.div is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Filter.{u1} Œ±} {ma : Œ± -> ENNReal} {mb : Œ± -> ENNReal} {a : ENNReal} {b : ENNReal}, (Filter.Tendsto.{u1, 0} Œ± ENNReal ma f (nhds.{0} ENNReal ENNReal.topologicalSpace a)) -> (Or (Ne.{1} ENNReal a (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) (Ne.{1} ENNReal b (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero))))) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal mb f (nhds.{0} ENNReal ENNReal.topologicalSpace b)) -> (Or (Ne.{1} ENNReal b (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal (fun (a : Œ±) => HDiv.hDiv.{0, 0, 0} ENNReal ENNReal ENNReal (instHDiv.{0} ENNReal (DivInvMonoid.toHasDiv.{0} ENNReal ENNReal.divInvMonoid)) (ma a) (mb a)) f (nhds.{0} ENNReal ENNReal.topologicalSpace (HDiv.hDiv.{0, 0, 0} ENNReal ENNReal ENNReal (instHDiv.{0} ENNReal (DivInvMonoid.toHasDiv.{0} ENNReal ENNReal.divInvMonoid)) a b)))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Filter.{u1} Œ±} {ma : Œ± -> ENNReal} {mb : Œ± -> ENNReal} {a : ENNReal} {b : ENNReal}, (Filter.Tendsto.{u1, 0} Œ± ENNReal ma f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal a)) -> (Or (Ne.{1} ENNReal a (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) (Ne.{1} ENNReal b (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero)))) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal mb f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal b)) -> (Or (Ne.{1} ENNReal b (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal (fun (a : Œ±) => HDiv.hDiv.{0, 0, 0} ENNReal ENNReal ENNReal (instHDiv.{0} ENNReal (DivInvMonoid.toDiv.{0} ENNReal ENNReal.instDivInvMonoidENNReal)) (ma a) (mb a)) f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (HDiv.hDiv.{0, 0, 0} ENNReal ENNReal ENNReal (instHDiv.{0} ENNReal (DivInvMonoid.toDiv.{0} ENNReal ENNReal.instDivInvMonoidENNReal)) a b)))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto.div ENNReal.Tendsto.div‚Çì'. -/
protected theorem Tendsto.div {f : Filter Œ±} {ma : Œ± ‚Üí ‚Ñù‚â•0‚àû} {mb : Œ± ‚Üí ‚Ñù‚â•0‚àû} {a b : ‚Ñù‚â•0‚àû}
    (hma : Tendsto ma f (ùìù a)) (ha : a ‚â† 0 ‚à® b ‚â† 0) (hmb : Tendsto mb f (ùìù b))
    (hb : b ‚â† ‚ä§ ‚à® a ‚â† ‚ä§) : Tendsto (fun a => ma a / mb a) f (ùìù (a / b)) := by
  apply tendsto.mul hma _ (ENNReal.tendsto_inv_iff.2 hmb) _ <;> simp [ha, hb]
#align ennreal.tendsto.div ENNReal.Tendsto.div

/- warning: ennreal.tendsto.const_div -> ENNReal.Tendsto.const_div is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Filter.{u1} Œ±} {m : Œ± -> ENNReal} {a : ENNReal} {b : ENNReal}, (Filter.Tendsto.{u1, 0} Œ± ENNReal m f (nhds.{0} ENNReal ENNReal.topologicalSpace b)) -> (Or (Ne.{1} ENNReal b (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal (fun (b : Œ±) => HDiv.hDiv.{0, 0, 0} ENNReal ENNReal ENNReal (instHDiv.{0} ENNReal (DivInvMonoid.toHasDiv.{0} ENNReal ENNReal.divInvMonoid)) a (m b)) f (nhds.{0} ENNReal ENNReal.topologicalSpace (HDiv.hDiv.{0, 0, 0} ENNReal ENNReal ENNReal (instHDiv.{0} ENNReal (DivInvMonoid.toHasDiv.{0} ENNReal ENNReal.divInvMonoid)) a b)))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Filter.{u1} Œ±} {m : Œ± -> ENNReal} {a : ENNReal} {b : ENNReal}, (Filter.Tendsto.{u1, 0} Œ± ENNReal m f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal b)) -> (Or (Ne.{1} ENNReal b (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (Ne.{1} ENNReal a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal (fun (b : Œ±) => HDiv.hDiv.{0, 0, 0} ENNReal ENNReal ENNReal (instHDiv.{0} ENNReal (DivInvMonoid.toDiv.{0} ENNReal ENNReal.instDivInvMonoidENNReal)) a (m b)) f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (HDiv.hDiv.{0, 0, 0} ENNReal ENNReal ENNReal (instHDiv.{0} ENNReal (DivInvMonoid.toDiv.{0} ENNReal ENNReal.instDivInvMonoidENNReal)) a b)))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto.const_div ENNReal.Tendsto.const_div‚Çì'. -/
protected theorem Tendsto.const_div {f : Filter Œ±} {m : Œ± ‚Üí ‚Ñù‚â•0‚àû} {a b : ‚Ñù‚â•0‚àû}
    (hm : Tendsto m f (ùìù b)) (hb : b ‚â† ‚ä§ ‚à® a ‚â† ‚ä§) : Tendsto (fun b => a / m b) f (ùìù (a / b)) :=
  by
  apply tendsto.const_mul (ENNReal.tendsto_inv_iff.2 hm)
  simp [hb]
#align ennreal.tendsto.const_div ENNReal.Tendsto.const_div

/- warning: ennreal.tendsto.div_const -> ENNReal.Tendsto.div_const is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Filter.{u1} Œ±} {m : Œ± -> ENNReal} {a : ENNReal} {b : ENNReal}, (Filter.Tendsto.{u1, 0} Œ± ENNReal m f (nhds.{0} ENNReal ENNReal.topologicalSpace a)) -> (Or (Ne.{1} ENNReal a (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) (Ne.{1} ENNReal b (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero))))) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal (fun (x : Œ±) => HDiv.hDiv.{0, 0, 0} ENNReal ENNReal ENNReal (instHDiv.{0} ENNReal (DivInvMonoid.toHasDiv.{0} ENNReal ENNReal.divInvMonoid)) (m x) b) f (nhds.{0} ENNReal ENNReal.topologicalSpace (HDiv.hDiv.{0, 0, 0} ENNReal ENNReal ENNReal (instHDiv.{0} ENNReal (DivInvMonoid.toHasDiv.{0} ENNReal ENNReal.divInvMonoid)) a b)))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Filter.{u1} Œ±} {m : Œ± -> ENNReal} {a : ENNReal} {b : ENNReal}, (Filter.Tendsto.{u1, 0} Œ± ENNReal m f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal a)) -> (Or (Ne.{1} ENNReal a (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) (Ne.{1} ENNReal b (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero)))) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal (fun (x : Œ±) => HDiv.hDiv.{0, 0, 0} ENNReal ENNReal ENNReal (instHDiv.{0} ENNReal (DivInvMonoid.toDiv.{0} ENNReal ENNReal.instDivInvMonoidENNReal)) (m x) b) f (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (HDiv.hDiv.{0, 0, 0} ENNReal ENNReal ENNReal (instHDiv.{0} ENNReal (DivInvMonoid.toDiv.{0} ENNReal ENNReal.instDivInvMonoidENNReal)) a b)))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto.div_const ENNReal.Tendsto.div_const‚Çì'. -/
protected theorem Tendsto.div_const {f : Filter Œ±} {m : Œ± ‚Üí ‚Ñù‚â•0‚àû} {a b : ‚Ñù‚â•0‚àû}
    (hm : Tendsto m f (ùìù a)) (ha : a ‚â† 0 ‚à® b ‚â† 0) : Tendsto (fun x => m x / b) f (ùìù (a / b)) :=
  by
  apply tendsto.mul_const hm
  simp [ha]
#align ennreal.tendsto.div_const ENNReal.Tendsto.div_const

/- warning: ennreal.tendsto_inv_nat_nhds_zero -> ENNReal.tendsto_inv_nat_nhds_zero is a dubious translation:
lean 3 declaration is
  Filter.Tendsto.{0, 0} Nat ENNReal (fun (n : Nat) => Inv.inv.{0} ENNReal ENNReal.hasInv ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) Nat ENNReal (HasLiftT.mk.{1, 1} Nat ENNReal (CoeTC‚Çì.coe.{1, 1} Nat ENNReal (Nat.castCoe.{0} ENNReal (AddMonoidWithOne.toNatCast.{0} ENNReal (AddCommMonoidWithOne.toAddMonoidWithOne.{0} ENNReal ENNReal.addCommMonoidWithOne))))) n)) (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (OrderedCancelAddCommMonoid.toPartialOrder.{0} Nat (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} Nat Nat.strictOrderedSemiring)))) (nhds.{0} ENNReal ENNReal.topologicalSpace (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero))))
but is expected to have type
  Filter.Tendsto.{0, 0} Nat ENNReal (fun (n : Nat) => Inv.inv.{0} ENNReal ENNReal.instInvENNReal (Nat.cast.{0} ENNReal (CanonicallyOrderedCommSemiring.toNatCast.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal) n)) (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (StrictOrderedSemiring.toPartialOrder.{0} Nat Nat.strictOrderedSemiring))) (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero)))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto_inv_nat_nhds_zero ENNReal.tendsto_inv_nat_nhds_zero‚Çì'. -/
protected theorem tendsto_inv_nat_nhds_zero : Tendsto (fun n : ‚Ñï => (n : ‚Ñù‚â•0‚àû)‚Åª¬π) atTop (ùìù 0) :=
  ENNReal.inv_top ‚ñ∏ ENNReal.tendsto_inv_iff.2 tendsto_nat_nhds_top
#align ennreal.tendsto_inv_nat_nhds_zero ENNReal.tendsto_inv_nat_nhds_zero

/- warning: ennreal.supr_add -> ENNReal.iSup_add is a dubious translation:
lean 3 declaration is
  forall {a : ENNReal} {Œπ : Sort.{u1}} {s : Œπ -> ENNReal} [h : Nonempty.{u1} Œπ], Eq.{1} ENNReal (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ s) a) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (b : Œπ) => HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (s b) a))
but is expected to have type
  forall {a : ENNReal} {Œπ : Sort.{u1}} {s : Œπ -> ENNReal} [h : Nonempty.{u1} Œπ], Eq.{1} ENNReal (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ s) a) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (b : Œπ) => HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) (s b) a))
Case conversion may be inaccurate. Consider using '#align ennreal.supr_add ENNReal.iSup_add‚Çì'. -/
theorem iSup_add {Œπ : Sort _} {s : Œπ ‚Üí ‚Ñù‚â•0‚àû} [h : Nonempty Œπ] : iSup s + a = ‚®Ü b, s b + a :=
  Monotone.map_iSup_of_continuousAt' (continuousAt_id.add continuousAt_const) <|
    monotone_id.add monotone_const
#align ennreal.supr_add ENNReal.iSup_add

/- warning: ennreal.bsupr_add' -> ENNReal.biSup_add' is a dubious translation:
lean 3 declaration is
  forall {a : ENNReal} {Œπ : Sort.{u1}} {p : Œπ -> Prop}, (Exists.{u1} Œπ (fun (i : Œπ) => p i)) -> (forall {f : Œπ -> ENNReal}, Eq.{1} ENNReal (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) (p i) (fun (hi : p i) => f i))) a) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) (p i) (fun (hi : p i) => HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (f i) a))))
but is expected to have type
  forall {a : ENNReal} {Œπ : Sort.{u1}} {p : Œπ -> Prop}, (Exists.{u1} Œπ (fun (i : Œπ) => p i)) -> (forall {f : Œπ -> ENNReal}, Eq.{1} ENNReal (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (p i) (fun (hi : p i) => f i))) a) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (p i) (fun (hi : p i) => HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) (f i) a))))
Case conversion may be inaccurate. Consider using '#align ennreal.bsupr_add' ENNReal.biSup_add'‚Çì'. -/
theorem biSup_add' {Œπ : Sort _} {p : Œπ ‚Üí Prop} (h : ‚àÉ i, p i) {f : Œπ ‚Üí ‚Ñù‚â•0‚àû} :
    (‚®Ü (i) (hi : p i), f i) + a = ‚®Ü (i) (hi : p i), f i + a :=
  by
  haveI : Nonempty { i // p i } := nonempty_subtype.2 h
  simp only [iSup_subtype', supr_add]
#align ennreal.bsupr_add' ENNReal.biSup_add'

/- warning: ennreal.add_bsupr' -> ENNReal.add_biSup' is a dubious translation:
lean 3 declaration is
  forall {a : ENNReal} {Œπ : Sort.{u1}} {p : Œπ -> Prop}, (Exists.{u1} Œπ (fun (i : Œπ) => p i)) -> (forall {f : Œπ -> ENNReal}, Eq.{1} ENNReal (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) a (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) (p i) (fun (hi : p i) => f i)))) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) (p i) (fun (hi : p i) => HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) a (f i)))))
but is expected to have type
  forall {a : ENNReal} {Œπ : Sort.{u1}} {p : Œπ -> Prop}, (Exists.{u1} Œπ (fun (i : Œπ) => p i)) -> (forall {f : Œπ -> ENNReal}, Eq.{1} ENNReal (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) a (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (p i) (fun (hi : p i) => f i)))) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (p i) (fun (hi : p i) => HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) a (f i)))))
Case conversion may be inaccurate. Consider using '#align ennreal.add_bsupr' ENNReal.add_biSup'‚Çì'. -/
theorem add_biSup' {Œπ : Sort _} {p : Œπ ‚Üí Prop} (h : ‚àÉ i, p i) {f : Œπ ‚Üí ‚Ñù‚â•0‚àû} :
    (a + ‚®Ü (i) (hi : p i), f i) = ‚®Ü (i) (hi : p i), a + f i := by
  simp only [add_comm a, bsupr_add' h]
#align ennreal.add_bsupr' ENNReal.add_biSup'

/- warning: ennreal.bsupr_add -> ENNReal.biSup_add is a dubious translation:
lean 3 declaration is
  forall {a : ENNReal} {Œπ : Type.{u1}} {s : Set.{u1} Œπ}, (Set.Nonempty.{u1} Œπ s) -> (forall {f : Œπ -> ENNReal}, Eq.{1} ENNReal (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (iSup.{0, succ u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) (Membership.Mem.{u1, u1} Œπ (Set.{u1} Œπ) (Set.hasMem.{u1} Œπ) i s) (fun (H : Membership.Mem.{u1, u1} Œπ (Set.{u1} Œπ) (Set.hasMem.{u1} Œπ) i s) => f i))) a) (iSup.{0, succ u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) (Membership.Mem.{u1, u1} Œπ (Set.{u1} Œπ) (Set.hasMem.{u1} Œπ) i s) (fun (H : Membership.Mem.{u1, u1} Œπ (Set.{u1} Œπ) (Set.hasMem.{u1} Œπ) i s) => HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (f i) a))))
but is expected to have type
  forall {a : ENNReal} {Œπ : Type.{u1}} {s : Set.{u1} Œπ}, (Set.Nonempty.{u1} Œπ s) -> (forall {f : Œπ -> ENNReal}, Eq.{1} ENNReal (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) (iSup.{0, succ u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (Membership.mem.{u1, u1} Œπ (Set.{u1} Œπ) (Set.instMembershipSet.{u1} Œπ) i s) (fun (H : Membership.mem.{u1, u1} Œπ (Set.{u1} Œπ) (Set.instMembershipSet.{u1} Œπ) i s) => f i))) a) (iSup.{0, succ u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (Membership.mem.{u1, u1} Œπ (Set.{u1} Œπ) (Set.instMembershipSet.{u1} Œπ) i s) (fun (H : Membership.mem.{u1, u1} Œπ (Set.{u1} Œπ) (Set.instMembershipSet.{u1} Œπ) i s) => HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) (f i) a))))
Case conversion may be inaccurate. Consider using '#align ennreal.bsupr_add ENNReal.biSup_add‚Çì'. -/
theorem biSup_add {Œπ} {s : Set Œπ} (hs : s.Nonempty) {f : Œπ ‚Üí ‚Ñù‚â•0‚àû} :
    (‚®Ü i ‚àà s, f i) + a = ‚®Ü i ‚àà s, f i + a :=
  biSup_add' hs
#align ennreal.bsupr_add ENNReal.biSup_add

/- warning: ennreal.add_bsupr -> ENNReal.add_biSup is a dubious translation:
lean 3 declaration is
  forall {a : ENNReal} {Œπ : Type.{u1}} {s : Set.{u1} Œπ}, (Set.Nonempty.{u1} Œπ s) -> (forall {f : Œπ -> ENNReal}, Eq.{1} ENNReal (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) a (iSup.{0, succ u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) (Membership.Mem.{u1, u1} Œπ (Set.{u1} Œπ) (Set.hasMem.{u1} Œπ) i s) (fun (H : Membership.Mem.{u1, u1} Œπ (Set.{u1} Œπ) (Set.hasMem.{u1} Œπ) i s) => f i)))) (iSup.{0, succ u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) (Membership.Mem.{u1, u1} Œπ (Set.{u1} Œπ) (Set.hasMem.{u1} Œπ) i s) (fun (H : Membership.Mem.{u1, u1} Œπ (Set.{u1} Œπ) (Set.hasMem.{u1} Œπ) i s) => HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) a (f i)))))
but is expected to have type
  forall {a : ENNReal} {Œπ : Type.{u1}} {s : Set.{u1} Œπ}, (Set.Nonempty.{u1} Œπ s) -> (forall {f : Œπ -> ENNReal}, Eq.{1} ENNReal (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) a (iSup.{0, succ u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (Membership.mem.{u1, u1} Œπ (Set.{u1} Œπ) (Set.instMembershipSet.{u1} Œπ) i s) (fun (H : Membership.mem.{u1, u1} Œπ (Set.{u1} Œπ) (Set.instMembershipSet.{u1} Œπ) i s) => f i)))) (iSup.{0, succ u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (Membership.mem.{u1, u1} Œπ (Set.{u1} Œπ) (Set.instMembershipSet.{u1} Œπ) i s) (fun (H : Membership.mem.{u1, u1} Œπ (Set.{u1} Œπ) (Set.instMembershipSet.{u1} Œπ) i s) => HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) a (f i)))))
Case conversion may be inaccurate. Consider using '#align ennreal.add_bsupr ENNReal.add_biSup‚Çì'. -/
theorem add_biSup {Œπ} {s : Set Œπ} (hs : s.Nonempty) {f : Œπ ‚Üí ‚Ñù‚â•0‚àû} :
    (a + ‚®Ü i ‚àà s, f i) = ‚®Ü i ‚àà s, a + f i :=
  add_biSup' hs
#align ennreal.add_bsupr ENNReal.add_biSup

/- warning: ennreal.Sup_add -> ENNReal.sSup_add is a dubious translation:
lean 3 declaration is
  forall {a : ENNReal} {s : Set.{0} ENNReal}, (Set.Nonempty.{0} ENNReal s) -> (Eq.{1} ENNReal (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (SupSet.sSup.{0} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) s) a) (iSup.{0, 1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) ENNReal (fun (b : ENNReal) => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) (Membership.Mem.{0, 0} ENNReal (Set.{0} ENNReal) (Set.hasMem.{0} ENNReal) b s) (fun (H : Membership.Mem.{0, 0} ENNReal (Set.{0} ENNReal) (Set.hasMem.{0} ENNReal) b s) => HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) b a))))
but is expected to have type
  forall {a : ENNReal} {s : Set.{0} ENNReal}, (Set.Nonempty.{0} ENNReal s) -> (Eq.{1} ENNReal (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) (SupSet.sSup.{0} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) s) a) (iSup.{0, 1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) ENNReal (fun (b : ENNReal) => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (Membership.mem.{0, 0} ENNReal (Set.{0} ENNReal) (Set.instMembershipSet.{0} ENNReal) b s) (fun (H : Membership.mem.{0, 0} ENNReal (Set.{0} ENNReal) (Set.instMembershipSet.{0} ENNReal) b s) => HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) b a))))
Case conversion may be inaccurate. Consider using '#align ennreal.Sup_add ENNReal.sSup_add‚Çì'. -/
theorem sSup_add {s : Set ‚Ñù‚â•0‚àû} (hs : s.Nonempty) : sSup s + a = ‚®Ü b ‚àà s, b + a := by
  rw [sSup_eq_iSup, bsupr_add hs]
#align ennreal.Sup_add ENNReal.sSup_add

/- warning: ennreal.add_supr -> ENNReal.add_iSup is a dubious translation:
lean 3 declaration is
  forall {a : ENNReal} {Œπ : Sort.{u1}} {s : Œπ -> ENNReal} [_inst_1 : Nonempty.{u1} Œπ], Eq.{1} ENNReal (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) a (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ s)) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (b : Œπ) => HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) a (s b)))
but is expected to have type
  forall {a : ENNReal} {Œπ : Sort.{u1}} {s : Œπ -> ENNReal} [_inst_1 : Nonempty.{u1} Œπ], Eq.{1} ENNReal (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) a (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ s)) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (b : Œπ) => HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) a (s b)))
Case conversion may be inaccurate. Consider using '#align ennreal.add_supr ENNReal.add_iSup‚Çì'. -/
theorem add_iSup {Œπ : Sort _} {s : Œπ ‚Üí ‚Ñù‚â•0‚àû} [Nonempty Œπ] : a + iSup s = ‚®Ü b, a + s b := by
  rw [add_comm, supr_add] <;> simp [add_comm]
#align ennreal.add_supr ENNReal.add_iSup

/- warning: ennreal.supr_add_supr_le -> ENNReal.iSup_add_iSup_le is a dubious translation:
lean 3 declaration is
  forall {Œπ : Sort.{u1}} {Œπ' : Sort.{u2}} [_inst_1 : Nonempty.{u1} Œπ] [_inst_2 : Nonempty.{u2} Œπ'] {f : Œπ -> ENNReal} {g : Œπ' -> ENNReal} {a : ENNReal}, (forall (i : Œπ) (j : Œπ'), LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (f i) (g j)) a) -> (LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ f) (iSup.{0, u2} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ' g)) a)
but is expected to have type
  forall {Œπ : Sort.{u2}} {Œπ' : Sort.{u1}} [_inst_1 : Nonempty.{u2} Œπ] [_inst_2 : Nonempty.{u1} Œπ'] {f : Œπ -> ENNReal} {g : Œπ' -> ENNReal} {a : ENNReal}, (forall (i : Œπ) (j : Œπ'), LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) (f i) (g j)) a) -> (LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) (iSup.{0, u2} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ f) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ' g)) a)
Case conversion may be inaccurate. Consider using '#align ennreal.supr_add_supr_le ENNReal.iSup_add_iSup_le‚Çì'. -/
theorem iSup_add_iSup_le {Œπ Œπ' : Sort _} [Nonempty Œπ] [Nonempty Œπ'] {f : Œπ ‚Üí ‚Ñù‚â•0‚àû} {g : Œπ' ‚Üí ‚Ñù‚â•0‚àû}
    {a : ‚Ñù‚â•0‚àû} (h : ‚àÄ i j, f i + g j ‚â§ a) : iSup f + iSup g ‚â§ a := by
  simpa only [add_supr, supr_add] using iSup‚ÇÇ_le h
#align ennreal.supr_add_supr_le ENNReal.iSup_add_iSup_le

/- warning: ennreal.bsupr_add_bsupr_le' -> ENNReal.biSup_add_biSup_le' is a dubious translation:
lean 3 declaration is
  forall {Œπ : Sort.{u1}} {Œπ' : Sort.{u2}} {p : Œπ -> Prop} {q : Œπ' -> Prop}, (Exists.{u1} Œπ (fun (i : Œπ) => p i)) -> (Exists.{u2} Œπ' (fun (j : Œπ') => q j)) -> (forall {f : Œπ -> ENNReal} {g : Œπ' -> ENNReal} {a : ENNReal}, (forall (i : Œπ), (p i) -> (forall (j : Œπ'), (q j) -> (LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (f i) (g j)) a))) -> (LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) (p i) (fun (hi : p i) => f i))) (iSup.{0, u2} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ' (fun (j : Œπ') => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) (q j) (fun (hj : q j) => g j)))) a))
but is expected to have type
  forall {Œπ : Sort.{u2}} {Œπ' : Sort.{u1}} {p : Œπ -> Prop} {q : Œπ' -> Prop}, (Exists.{u2} Œπ (fun (i : Œπ) => p i)) -> (Exists.{u1} Œπ' (fun (j : Œπ') => q j)) -> (forall {f : Œπ -> ENNReal} {g : Œπ' -> ENNReal} {a : ENNReal}, (forall (i : Œπ), (p i) -> (forall (j : Œπ'), (q j) -> (LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) (f i) (g j)) a))) -> (LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) (iSup.{0, u2} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (p i) (fun (hi : p i) => f i))) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ' (fun (j : Œπ') => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (q j) (fun (hj : q j) => g j)))) a))
Case conversion may be inaccurate. Consider using '#align ennreal.bsupr_add_bsupr_le' ENNReal.biSup_add_biSup_le'‚Çì'. -/
theorem biSup_add_biSup_le' {Œπ Œπ'} {p : Œπ ‚Üí Prop} {q : Œπ' ‚Üí Prop} (hp : ‚àÉ i, p i) (hq : ‚àÉ j, q j)
    {f : Œπ ‚Üí ‚Ñù‚â•0‚àû} {g : Œπ' ‚Üí ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû} (h : ‚àÄ (i) (hi : p i) (j) (hj : q j), f i + g j ‚â§ a) :
    ((‚®Ü (i) (hi : p i), f i) + ‚®Ü (j) (hj : q j), g j) ‚â§ a :=
  by
  simp_rw [bsupr_add' hp, add_bsupr' hq]
  exact iSup‚ÇÇ_le fun i hi => iSup‚ÇÇ_le (h i hi)
#align ennreal.bsupr_add_bsupr_le' ENNReal.biSup_add_biSup_le'

/- warning: ennreal.bsupr_add_bsupr_le -> ENNReal.biSup_add_biSup_le is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {Œπ' : Type.{u2}} {s : Set.{u1} Œπ} {t : Set.{u2} Œπ'}, (Set.Nonempty.{u1} Œπ s) -> (Set.Nonempty.{u2} Œπ' t) -> (forall {f : Œπ -> ENNReal} {g : Œπ' -> ENNReal} {a : ENNReal}, (forall (i : Œπ), (Membership.Mem.{u1, u1} Œπ (Set.{u1} Œπ) (Set.hasMem.{u1} Œπ) i s) -> (forall (j : Œπ'), (Membership.Mem.{u2, u2} Œπ' (Set.{u2} Œπ') (Set.hasMem.{u2} Œπ') j t) -> (LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (f i) (g j)) a))) -> (LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (iSup.{0, succ u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) (Membership.Mem.{u1, u1} Œπ (Set.{u1} Œπ) (Set.hasMem.{u1} Œπ) i s) (fun (H : Membership.Mem.{u1, u1} Œπ (Set.{u1} Œπ) (Set.hasMem.{u1} Œπ) i s) => f i))) (iSup.{0, succ u2} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ' (fun (j : Œπ') => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) (Membership.Mem.{u2, u2} Œπ' (Set.{u2} Œπ') (Set.hasMem.{u2} Œπ') j t) (fun (H : Membership.Mem.{u2, u2} Œπ' (Set.{u2} Œπ') (Set.hasMem.{u2} Œπ') j t) => g j)))) a))
but is expected to have type
  forall {Œπ : Type.{u2}} {Œπ' : Type.{u1}} {s : Set.{u2} Œπ} {t : Set.{u1} Œπ'}, (Set.Nonempty.{u2} Œπ s) -> (Set.Nonempty.{u1} Œπ' t) -> (forall {f : Œπ -> ENNReal} {g : Œπ' -> ENNReal} {a : ENNReal}, (forall (i : Œπ), (Membership.mem.{u2, u2} Œπ (Set.{u2} Œπ) (Set.instMembershipSet.{u2} Œπ) i s) -> (forall (j : Œπ'), (Membership.mem.{u1, u1} Œπ' (Set.{u1} Œπ') (Set.instMembershipSet.{u1} Œπ') j t) -> (LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) (f i) (g j)) a))) -> (LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) (iSup.{0, succ u2} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (Membership.mem.{u2, u2} Œπ (Set.{u2} Œπ) (Set.instMembershipSet.{u2} Œπ) i s) (fun (H : Membership.mem.{u2, u2} Œπ (Set.{u2} Œπ) (Set.instMembershipSet.{u2} Œπ) i s) => f i))) (iSup.{0, succ u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ' (fun (j : Œπ') => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (Membership.mem.{u1, u1} Œπ' (Set.{u1} Œπ') (Set.instMembershipSet.{u1} Œπ') j t) (fun (H : Membership.mem.{u1, u1} Œπ' (Set.{u1} Œπ') (Set.instMembershipSet.{u1} Œπ') j t) => g j)))) a))
Case conversion may be inaccurate. Consider using '#align ennreal.bsupr_add_bsupr_le ENNReal.biSup_add_biSup_le‚Çì'. -/
theorem biSup_add_biSup_le {Œπ Œπ'} {s : Set Œπ} {t : Set Œπ'} (hs : s.Nonempty) (ht : t.Nonempty)
    {f : Œπ ‚Üí ‚Ñù‚â•0‚àû} {g : Œπ' ‚Üí ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû} (h : ‚àÄ i ‚àà s, ‚àÄ j ‚àà t, f i + g j ‚â§ a) :
    ((‚®Ü i ‚àà s, f i) + ‚®Ü j ‚àà t, g j) ‚â§ a :=
  biSup_add_biSup_le' hs ht h
#align ennreal.bsupr_add_bsupr_le ENNReal.biSup_add_biSup_le

/- warning: ennreal.supr_add_supr -> ENNReal.iSup_add_iSup is a dubious translation:
lean 3 declaration is
  forall {Œπ : Sort.{u1}} {f : Œπ -> ENNReal} {g : Œπ -> ENNReal}, (forall (i : Œπ) (j : Œπ), Exists.{u1} Œπ (fun (k : Œπ) => LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (f i) (g j)) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (f k) (g k)))) -> (Eq.{1} ENNReal (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ f) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ g)) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (a : Œπ) => HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (f a) (g a))))
but is expected to have type
  forall {Œπ : Sort.{u1}} {f : Œπ -> ENNReal} {g : Œπ -> ENNReal}, (forall (i : Œπ) (j : Œπ), Exists.{u1} Œπ (fun (k : Œπ) => LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) (f i) (g j)) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) (f k) (g k)))) -> (Eq.{1} ENNReal (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ f) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ g)) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (a : Œπ) => HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) (f a) (g a))))
Case conversion may be inaccurate. Consider using '#align ennreal.supr_add_supr ENNReal.iSup_add_iSup‚Çì'. -/
theorem iSup_add_iSup {Œπ : Sort _} {f g : Œπ ‚Üí ‚Ñù‚â•0‚àû} (h : ‚àÄ i j, ‚àÉ k, f i + g j ‚â§ f k + g k) :
    iSup f + iSup g = ‚®Ü a, f a + g a :=
  by
  cases isEmpty_or_nonempty Œπ
  ¬∑ simp only [iSup_of_empty, bot_eq_zero, zero_add]
  ¬∑ refine' le_antisymm _ (iSup_le fun a => add_le_add (le_iSup _ _) (le_iSup _ _))
    refine' supr_add_supr_le fun i j => _
    rcases h i j with ‚ü®k, hk‚ü©
    exact le_iSup_of_le k hk
#align ennreal.supr_add_supr ENNReal.iSup_add_iSup

/- warning: ennreal.supr_add_supr_of_monotone -> ENNReal.iSup_add_iSup_of_monotone is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} [_inst_1 : SemilatticeSup.{u1} Œπ] {f : Œπ -> ENNReal} {g : Œπ -> ENNReal}, (Monotone.{u1, 0} Œπ ENNReal (PartialOrder.toPreorder.{u1} Œπ (SemilatticeSup.toPartialOrder.{u1} Œπ _inst_1)) (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) f) -> (Monotone.{u1, 0} Œπ ENNReal (PartialOrder.toPreorder.{u1} Œπ (SemilatticeSup.toPartialOrder.{u1} Œπ _inst_1)) (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) g) -> (Eq.{1} ENNReal (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (iSup.{0, succ u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ f) (iSup.{0, succ u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ g)) (iSup.{0, succ u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (a : Œπ) => HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (f a) (g a))))
but is expected to have type
  forall {Œπ : Type.{u1}} [_inst_1 : SemilatticeSup.{u1} Œπ] {f : Œπ -> ENNReal} {g : Œπ -> ENNReal}, (Monotone.{u1, 0} Œπ ENNReal (PartialOrder.toPreorder.{u1} Œπ (SemilatticeSup.toPartialOrder.{u1} Œπ _inst_1)) (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) f) -> (Monotone.{u1, 0} Œπ ENNReal (PartialOrder.toPreorder.{u1} Œπ (SemilatticeSup.toPartialOrder.{u1} Œπ _inst_1)) (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) g) -> (Eq.{1} ENNReal (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) (iSup.{0, succ u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ f) (iSup.{0, succ u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ g)) (iSup.{0, succ u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (a : Œπ) => HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) (f a) (g a))))
Case conversion may be inaccurate. Consider using '#align ennreal.supr_add_supr_of_monotone ENNReal.iSup_add_iSup_of_monotone‚Çì'. -/
theorem iSup_add_iSup_of_monotone {Œπ : Sort _} [SemilatticeSup Œπ] {f g : Œπ ‚Üí ‚Ñù‚â•0‚àû} (hf : Monotone f)
    (hg : Monotone g) : iSup f + iSup g = ‚®Ü a, f a + g a :=
  iSup_add_iSup fun i j => ‚ü®i ‚äî j, add_le_add (hf <| le_sup_left) (hg <| le_sup_right)‚ü©
#align ennreal.supr_add_supr_of_monotone ENNReal.iSup_add_iSup_of_monotone

/- warning: ennreal.finset_sum_supr_nat -> ENNReal.finset_sum_iSup_nat is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œπ : Type.{u2}} [_inst_1 : SemilatticeSup.{u2} Œπ] {s : Finset.{u1} Œ±} {f : Œ± -> Œπ -> ENNReal}, (forall (a : Œ±), Monotone.{u2, 0} Œπ ENNReal (PartialOrder.toPreorder.{u2} Œπ (SemilatticeSup.toPartialOrder.{u2} Œπ _inst_1)) (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) (f a)) -> (Eq.{1} ENNReal (Finset.sum.{0, u1} ENNReal Œ± (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) s (fun (a : Œ±) => iSup.{0, succ u2} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (f a))) (iSup.{0, succ u2} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (n : Œπ) => Finset.sum.{0, u1} ENNReal Œ± (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) s (fun (a : Œ±) => f a n))))
but is expected to have type
  forall {Œ± : Type.{u2}} {Œπ : Type.{u1}} [_inst_1 : SemilatticeSup.{u1} Œπ] {s : Finset.{u2} Œ±} {f : Œ± -> Œπ -> ENNReal}, (forall (a : Œ±), Monotone.{u1, 0} Œπ ENNReal (PartialOrder.toPreorder.{u1} Œπ (SemilatticeSup.toPartialOrder.{u1} Œπ _inst_1)) (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (f a)) -> (Eq.{1} ENNReal (Finset.sum.{0, u2} ENNReal Œ± (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) s (fun (a : Œ±) => iSup.{0, succ u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (f a))) (iSup.{0, succ u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (n : Œπ) => Finset.sum.{0, u2} ENNReal Œ± (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) s (fun (a : Œ±) => f a n))))
Case conversion may be inaccurate. Consider using '#align ennreal.finset_sum_supr_nat ENNReal.finset_sum_iSup_nat‚Çì'. -/
theorem finset_sum_iSup_nat {Œ±} {Œπ} [SemilatticeSup Œπ] {s : Finset Œ±} {f : Œ± ‚Üí Œπ ‚Üí ‚Ñù‚â•0‚àû}
    (hf : ‚àÄ a, Monotone (f a)) : (‚àë a in s, iSup (f a)) = ‚®Ü n, ‚àë a in s, f a n :=
  by
  refine' Finset.induction_on s _ _
  ¬∑ simp
  ¬∑ intro a s has ih
    simp only [Finset.sum_insert has]
    rw [ih, supr_add_supr_of_monotone (hf a)]
    intro i j h
    exact Finset.sum_le_sum fun a ha => hf a h
#align ennreal.finset_sum_supr_nat ENNReal.finset_sum_iSup_nat

/- warning: ennreal.mul_supr -> ENNReal.mul_iSup is a dubious translation:
lean 3 declaration is
  forall {Œπ : Sort.{u1}} {f : Œπ -> ENNReal} {a : ENNReal}, Eq.{1} ENNReal (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) a (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ f)) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) a (f i)))
but is expected to have type
  forall {Œπ : Sort.{u1}} {f : Œπ -> ENNReal} {a : ENNReal}, Eq.{1} ENNReal (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) a (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ f)) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) a (f i)))
Case conversion may be inaccurate. Consider using '#align ennreal.mul_supr ENNReal.mul_iSup‚Çì'. -/
theorem mul_iSup {Œπ : Sort _} {f : Œπ ‚Üí ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû} : a * iSup f = ‚®Ü i, a * f i :=
  by
  by_cases hf : ‚àÄ i, f i = 0
  ¬∑ obtain rfl : f = fun _ => 0
    exact funext hf
    simp only [supr_zero_eq_zero, MulZeroClass.mul_zero]
  ¬∑ refine' (monotone_id.const_mul' _).map_iSup_of_continuousAt _ (MulZeroClass.mul_zero a)
    refine' ENNReal.Tendsto.const_mul tendsto_id (Or.inl _)
    exact mt supr_eq_zero.1 hf
#align ennreal.mul_supr ENNReal.mul_iSup

/- warning: ennreal.mul_Sup -> ENNReal.mul_sSup is a dubious translation:
lean 3 declaration is
  forall {s : Set.{0} ENNReal} {a : ENNReal}, Eq.{1} ENNReal (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) a (SupSet.sSup.{0} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) s)) (iSup.{0, 1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) ENNReal (fun (i : ENNReal) => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) (Membership.Mem.{0, 0} ENNReal (Set.{0} ENNReal) (Set.hasMem.{0} ENNReal) i s) (fun (H : Membership.Mem.{0, 0} ENNReal (Set.{0} ENNReal) (Set.hasMem.{0} ENNReal) i s) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) a i)))
but is expected to have type
  forall {s : Set.{0} ENNReal} {a : ENNReal}, Eq.{1} ENNReal (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) a (SupSet.sSup.{0} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) s)) (iSup.{0, 1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) ENNReal (fun (i : ENNReal) => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (Membership.mem.{0, 0} ENNReal (Set.{0} ENNReal) (Set.instMembershipSet.{0} ENNReal) i s) (fun (H : Membership.mem.{0, 0} ENNReal (Set.{0} ENNReal) (Set.instMembershipSet.{0} ENNReal) i s) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) a i)))
Case conversion may be inaccurate. Consider using '#align ennreal.mul_Sup ENNReal.mul_sSup‚Çì'. -/
theorem mul_sSup {s : Set ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû} : a * sSup s = ‚®Ü i ‚àà s, a * i := by
  simp only [sSup_eq_iSup, mul_supr]
#align ennreal.mul_Sup ENNReal.mul_sSup

/- warning: ennreal.supr_mul -> ENNReal.iSup_mul is a dubious translation:
lean 3 declaration is
  forall {Œπ : Sort.{u1}} {f : Œπ -> ENNReal} {a : ENNReal}, Eq.{1} ENNReal (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ f) a) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (f i) a))
but is expected to have type
  forall {Œπ : Sort.{u1}} {f : Œπ -> ENNReal} {a : ENNReal}, Eq.{1} ENNReal (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ f) a) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) (f i) a))
Case conversion may be inaccurate. Consider using '#align ennreal.supr_mul ENNReal.iSup_mul‚Çì'. -/
theorem iSup_mul {Œπ : Sort _} {f : Œπ ‚Üí ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû} : iSup f * a = ‚®Ü i, f i * a := by
  rw [mul_comm, mul_supr] <;> congr <;> funext <;> rw [mul_comm]
#align ennreal.supr_mul ENNReal.iSup_mul

theorem smul_iSup {Œπ : Sort _} {R} [SMul R ‚Ñù‚â•0‚àû] [IsScalarTower R ‚Ñù‚â•0‚àû ‚Ñù‚â•0‚àû] (f : Œπ ‚Üí ‚Ñù‚â•0‚àû)
    (c : R) : (c ‚Ä¢ ‚®Ü i, f i) = ‚®Ü i, c ‚Ä¢ f i := by
  simp only [‚Üê smul_one_mul c (f _), ‚Üê smul_one_mul c (iSup _), ENNReal.mul_iSup]
#align ennreal.smul_supr ENNReal.smul_iSup

theorem smul_sSup {R} [SMul R ‚Ñù‚â•0‚àû] [IsScalarTower R ‚Ñù‚â•0‚àû ‚Ñù‚â•0‚àû] (s : Set ‚Ñù‚â•0‚àû) (c : R) :
    c ‚Ä¢ sSup s = ‚®Ü i ‚àà s, c ‚Ä¢ i := by
  simp_rw [‚Üê smul_one_mul c (Sup _), ENNReal.mul_sSup, smul_one_mul]
#align ennreal.smul_Sup ENNReal.smul_sSup

/- warning: ennreal.supr_div -> ENNReal.iSup_div is a dubious translation:
lean 3 declaration is
  forall {Œπ : Sort.{u1}} {f : Œπ -> ENNReal} {a : ENNReal}, Eq.{1} ENNReal (HDiv.hDiv.{0, 0, 0} ENNReal ENNReal ENNReal (instHDiv.{0} ENNReal (DivInvMonoid.toHasDiv.{0} ENNReal ENNReal.divInvMonoid)) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ f) a) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => HDiv.hDiv.{0, 0, 0} ENNReal ENNReal ENNReal (instHDiv.{0} ENNReal (DivInvMonoid.toHasDiv.{0} ENNReal ENNReal.divInvMonoid)) (f i) a))
but is expected to have type
  forall {Œπ : Sort.{u1}} {f : Œπ -> ENNReal} {a : ENNReal}, Eq.{1} ENNReal (HDiv.hDiv.{0, 0, 0} ENNReal ENNReal ENNReal (instHDiv.{0} ENNReal (DivInvMonoid.toDiv.{0} ENNReal ENNReal.instDivInvMonoidENNReal)) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ f) a) (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => HDiv.hDiv.{0, 0, 0} ENNReal ENNReal ENNReal (instHDiv.{0} ENNReal (DivInvMonoid.toDiv.{0} ENNReal ENNReal.instDivInvMonoidENNReal)) (f i) a))
Case conversion may be inaccurate. Consider using '#align ennreal.supr_div ENNReal.iSup_div‚Çì'. -/
theorem iSup_div {Œπ : Sort _} {f : Œπ ‚Üí ‚Ñù‚â•0‚àû} {a : ‚Ñù‚â•0‚àû} : iSup f / a = ‚®Ü i, f i / a :=
  iSup_mul
#align ennreal.supr_div ENNReal.iSup_div

/- warning: ennreal.tendsto_coe_sub -> ENNReal.tendsto_coe_sub is a dubious translation:
lean 3 declaration is
  forall {r : NNReal} {b : ENNReal}, Filter.Tendsto.{0, 0} ENNReal ENNReal (fun (b : ENNReal) => HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.hasSub) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) r) b) (nhds.{0} ENNReal ENNReal.topologicalSpace b) (nhds.{0} ENNReal ENNReal.topologicalSpace (HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.hasSub) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) r) b))
but is expected to have type
  forall {r : NNReal} {b : ENNReal}, Filter.Tendsto.{0, 0} ENNReal ENNReal (fun (b : ENNReal) => HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.instSub) (ENNReal.some r) b) (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal b) (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.instSub) (ENNReal.some r) b))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto_coe_sub ENNReal.tendsto_coe_sub‚Çì'. -/
protected theorem tendsto_coe_sub :
    ‚àÄ {b : ‚Ñù‚â•0‚àû}, Tendsto (fun b : ‚Ñù‚â•0‚àû => ‚Üër - b) (ùìù b) (ùìù (‚Üër - b)) :=
  by
  refine' forall_ennreal.2 ‚ü®fun a => _, _‚ü©
  ¬∑ simp [@nhds_coe a, tendsto_map'_iff, (¬∑ ‚àò ¬∑), tendsto_coe, ‚Üê WithTop.coe_sub]
    exact tendsto_const_nhds.sub tendsto_id
  simp
  exact
    (tendsto.congr'
        (mem_of_superset (lt_mem_nhds <| @coe_lt_top r) <| by
          simp (config := { contextual := true }) [le_of_lt]))
      tendsto_const_nhds
#align ennreal.tendsto_coe_sub ENNReal.tendsto_coe_sub

/- warning: ennreal.sub_supr -> ENNReal.sub_iSup is a dubious translation:
lean 3 declaration is
  forall {a : ENNReal} {Œπ : Sort.{u1}} [_inst_1 : Nonempty.{u1} Œπ] {b : Œπ -> ENNReal}, (LT.lt.{0} ENNReal (Preorder.toHasLt.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) a (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (Eq.{1} ENNReal (HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.hasSub) a (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => b i))) (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toHasInf.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.hasSub) a (b i))))
but is expected to have type
  forall {a : ENNReal} {Œπ : Sort.{u1}} [_inst_1 : Nonempty.{u1} Œπ] {b : Œπ -> ENNReal}, (LT.lt.{0} ENNReal (Preorder.toLT.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) a (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (Eq.{1} ENNReal (HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.instSub) a (iSup.{0, u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => b i))) (iInf.{0, u1} ENNReal (ConditionallyCompleteLattice.toInfSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.instSub) a (b i))))
Case conversion may be inaccurate. Consider using '#align ennreal.sub_supr ENNReal.sub_iSup‚Çì'. -/
theorem sub_iSup {Œπ : Sort _} [Nonempty Œπ] {b : Œπ ‚Üí ‚Ñù‚â•0‚àû} (hr : a < ‚ä§) :
    (a - ‚®Ü i, b i) = ‚®Ö i, a - b i :=
  by
  let ‚ü®r, Eq, _‚ü© := lt_iff_exists_coe.mp hr
  have : sInf ((fun b => ‚Üër - b) '' range b) = ‚Üër - ‚®Ü i, b i :=
    IsGLB.sInf_eq <|
      isLUB_iSup.isGLB_of_tendsto (fun x _ y _ => tsub_le_tsub (le_refl (r : ‚Ñù‚â•0‚àû)))
        (range_nonempty _) (ENNReal.tendsto_coe_sub.comp (tendsto_id'.2 inf_le_left))
  rw [Eq, ‚Üê this] <;> simp [sInf_image, iInf_range, -mem_range] <;> exact le_rfl
#align ennreal.sub_supr ENNReal.sub_iSup

/- warning: ennreal.exists_countable_dense_no_zero_top -> ENNReal.exists_countable_dense_no_zero_top is a dubious translation:
lean 3 declaration is
  Exists.{1} (Set.{0} ENNReal) (fun (s : Set.{0} ENNReal) => And (Set.Countable.{0} ENNReal s) (And (Dense.{0} ENNReal ENNReal.topologicalSpace s) (And (Not (Membership.Mem.{0, 0} ENNReal (Set.{0} ENNReal) (Set.hasMem.{0} ENNReal) (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero))) s)) (Not (Membership.Mem.{0, 0} ENNReal (Set.{0} ENNReal) (Set.hasMem.{0} ENNReal) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) s)))))
but is expected to have type
  Exists.{1} (Set.{0} ENNReal) (fun (s : Set.{0} ENNReal) => And (Set.Countable.{0} ENNReal s) (And (Dense.{0} ENNReal ENNReal.instTopologicalSpaceENNReal s) (And (Not (Membership.mem.{0, 0} ENNReal (Set.{0} ENNReal) (Set.instMembershipSet.{0} ENNReal) (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero)) s)) (Not (Membership.mem.{0, 0} ENNReal (Set.{0} ENNReal) (Set.instMembershipSet.{0} ENNReal) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))) s)))))
Case conversion may be inaccurate. Consider using '#align ennreal.exists_countable_dense_no_zero_top ENNReal.exists_countable_dense_no_zero_top‚Çì'. -/
theorem exists_countable_dense_no_zero_top :
    ‚àÉ s : Set ‚Ñù‚â•0‚àû, s.Countable ‚àß Dense s ‚àß 0 ‚àâ s ‚àß ‚àû ‚àâ s :=
  by
  obtain ‚ü®s, s_count, s_dense, hs‚ü© :
    ‚àÉ s : Set ‚Ñù‚â•0‚àû, s.Countable ‚àß Dense s ‚àß (‚àÄ x, IsBot x ‚Üí x ‚àâ s) ‚àß ‚àÄ x, IsTop x ‚Üí x ‚àâ s :=
    exists_countable_dense_no_bot_top ‚Ñù‚â•0‚àû
  exact ‚ü®s, s_count, s_dense, fun h => hs.1 0 (by simp) h, fun h => hs.2 ‚àû (by simp) h‚ü©
#align ennreal.exists_countable_dense_no_zero_top ENNReal.exists_countable_dense_no_zero_top

/- warning: ennreal.exists_lt_add_of_lt_add -> ENNReal.exists_lt_add_of_lt_add is a dubious translation:
lean 3 declaration is
  forall {x : ENNReal} {y : ENNReal} {z : ENNReal}, (LT.lt.{0} ENNReal (Preorder.toHasLt.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) x (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) y z)) -> (Ne.{1} ENNReal y (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) -> (Ne.{1} ENNReal z (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) -> (Exists.{1} ENNReal (fun (y' : ENNReal) => Exists.{1} ENNReal (fun (z' : ENNReal) => And (LT.lt.{0} ENNReal (Preorder.toHasLt.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) y' y) (And (LT.lt.{0} ENNReal (Preorder.toHasLt.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) z' z) (LT.lt.{0} ENNReal (Preorder.toHasLt.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) x (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) y' z'))))))
but is expected to have type
  forall {x : ENNReal} {y : ENNReal} {z : ENNReal}, (LT.lt.{0} ENNReal (Preorder.toLT.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) x (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) y z)) -> (Ne.{1} ENNReal y (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) -> (Ne.{1} ENNReal z (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) -> (Exists.{1} ENNReal (fun (y' : ENNReal) => Exists.{1} ENNReal (fun (z' : ENNReal) => And (LT.lt.{0} ENNReal (Preorder.toLT.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) y' y) (And (LT.lt.{0} ENNReal (Preorder.toLT.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) z' z) (LT.lt.{0} ENNReal (Preorder.toLT.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) x (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) y' z'))))))
Case conversion may be inaccurate. Consider using '#align ennreal.exists_lt_add_of_lt_add ENNReal.exists_lt_add_of_lt_add‚Çì'. -/
theorem exists_lt_add_of_lt_add {x y z : ‚Ñù‚â•0‚àû} (h : x < y + z) (hy : y ‚â† 0) (hz : z ‚â† 0) :
    ‚àÉ y' z', y' < y ‚àß z' < z ‚àß x < y' + z' :=
  by
  haveI : ne_bot (ùìù[<] y) := nhdsWithin_Iio_self_neBot' ‚ü®0, pos_iff_ne_zero.2 hy‚ü©
  haveI : ne_bot (ùìù[<] z) := nhdsWithin_Iio_self_neBot' ‚ü®0, pos_iff_ne_zero.2 hz‚ü©
  have A : tendsto (fun p : ‚Ñù‚â•0‚àû √ó ‚Ñù‚â•0‚àû => p.1 + p.2) ((ùìù[<] y).Prod (ùìù[<] z)) (ùìù (y + z)) :=
    by
    apply tendsto.mono_left _ (Filter.prod_mono nhdsWithin_le_nhds nhdsWithin_le_nhds)
    rw [‚Üê nhds_prod_eq]
    exact tendsto_add
  rcases(((tendsto_order.1 A).1 x h).And
        (Filter.prod_mem_prod self_mem_nhdsWithin self_mem_nhdsWithin)).exists with
    ‚ü®‚ü®y', z'‚ü©, hx, hy', hz'‚ü©
  exact ‚ü®y', z', hy', hz', hx‚ü©
#align ennreal.exists_lt_add_of_lt_add ENNReal.exists_lt_add_of_lt_add

end TopologicalSpace

section Liminf

/- warning: ennreal.exists_frequently_lt_of_liminf_ne_top -> ENNReal.exists_frequently_lt_of_liminf_ne_top is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {l : Filter.{u1} Œπ} {x : Œπ -> Real}, (Ne.{1} ENNReal (Filter.liminf.{0, u1} ENNReal Œπ (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)) (fun (n : Œπ) => (fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) (coeFn.{1, 1} (MonoidWithZeroHom.{0, 0} Real NNReal (NonAssocSemiring.toMulZeroOneClass.{0} Real (NonAssocRing.toNonAssocSemiring.{0} Real (Ring.toNonAssocRing.{0} Real Real.ring))) (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal NNReal.semiring))) (fun (_x : MonoidWithZeroHom.{0, 0} Real NNReal (NonAssocSemiring.toMulZeroOneClass.{0} Real (NonAssocRing.toNonAssocSemiring.{0} Real (Ring.toNonAssocRing.{0} Real Real.ring))) (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal NNReal.semiring))) => Real -> NNReal) (MonoidWithZeroHom.hasCoeToFun.{0, 0} Real NNReal (NonAssocSemiring.toMulZeroOneClass.{0} Real (NonAssocRing.toNonAssocSemiring.{0} Real (Ring.toNonAssocRing.{0} Real Real.ring))) (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal NNReal.semiring))) Real.nnabs (x n))) l) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (Exists.{1} Real (fun (R : Real) => Filter.Frequently.{u1} Œπ (fun (n : Œπ) => LT.lt.{0} Real Real.hasLt (x n) R) l))
but is expected to have type
  forall {Œπ : Type.{u1}} {l : Filter.{u1} Œπ} {x : Œπ -> Real}, (Ne.{1} ENNReal (Filter.liminf.{0, u1} ENNReal Œπ (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))) (fun (n : Œπ) => ENNReal.some (FunLike.coe.{1, 1, 1} (MonoidWithZeroHom.{0, 0} Real NNReal (NonAssocSemiring.toMulZeroOneClass.{0} Real (Semiring.toNonAssocSemiring.{0} Real Real.semiring)) (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal instNNRealSemiring))) Real (fun (_x : Real) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : Real) => NNReal) _x) (MulHomClass.toFunLike.{0, 0, 0} (MonoidWithZeroHom.{0, 0} Real NNReal (NonAssocSemiring.toMulZeroOneClass.{0} Real (Semiring.toNonAssocSemiring.{0} Real Real.semiring)) (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal instNNRealSemiring))) Real NNReal (MulOneClass.toMul.{0} Real (MulZeroOneClass.toMulOneClass.{0} Real (NonAssocSemiring.toMulZeroOneClass.{0} Real (Semiring.toNonAssocSemiring.{0} Real Real.semiring)))) (MulOneClass.toMul.{0} NNReal (MulZeroOneClass.toMulOneClass.{0} NNReal (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal instNNRealSemiring)))) (MonoidHomClass.toMulHomClass.{0, 0, 0} (MonoidWithZeroHom.{0, 0} Real NNReal (NonAssocSemiring.toMulZeroOneClass.{0} Real (Semiring.toNonAssocSemiring.{0} Real Real.semiring)) (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal instNNRealSemiring))) Real NNReal (MulZeroOneClass.toMulOneClass.{0} Real (NonAssocSemiring.toMulZeroOneClass.{0} Real (Semiring.toNonAssocSemiring.{0} Real Real.semiring))) (MulZeroOneClass.toMulOneClass.{0} NNReal (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal instNNRealSemiring))) (MonoidWithZeroHomClass.toMonoidHomClass.{0, 0, 0} (MonoidWithZeroHom.{0, 0} Real NNReal (NonAssocSemiring.toMulZeroOneClass.{0} Real (Semiring.toNonAssocSemiring.{0} Real Real.semiring)) (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal instNNRealSemiring))) Real NNReal (NonAssocSemiring.toMulZeroOneClass.{0} Real (Semiring.toNonAssocSemiring.{0} Real Real.semiring)) (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal instNNRealSemiring)) (MonoidWithZeroHom.monoidWithZeroHomClass.{0, 0} Real NNReal (NonAssocSemiring.toMulZeroOneClass.{0} Real (Semiring.toNonAssocSemiring.{0} Real Real.semiring)) (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal instNNRealSemiring)))))) Real.nnabs (x n))) l) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (Exists.{1} Real (fun (R : Real) => Filter.Frequently.{u1} Œπ (fun (n : Œπ) => LT.lt.{0} Real Real.instLTReal (x n) R) l))
Case conversion may be inaccurate. Consider using '#align ennreal.exists_frequently_lt_of_liminf_ne_top ENNReal.exists_frequently_lt_of_liminf_ne_top‚Çì'. -/
/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic filter.is_bounded_default -/
theorem exists_frequently_lt_of_liminf_ne_top {Œπ : Type _} {l : Filter Œπ} {x : Œπ ‚Üí ‚Ñù}
    (hx : liminf (fun n => ((x n).nnabs : ‚Ñù‚â•0‚àû)) l ‚â† ‚àû) : ‚àÉ R, ‚àÉ·∂† n in l, x n < R :=
  by
  by_contra h
  simp_rw [not_exists, not_frequently, not_lt] at h
  refine'
    hx
      (ENNReal.eq_top_of_forall_nnreal_le fun r =>
        le_Liminf_of_le
          (by
            run_tac
              is_bounded_default)
          _)
  simp only [eventually_map, ENNReal.coe_le_coe]
  filter_upwards [h r]with i hi using hi.trans (le_abs_self (x i))
#align ennreal.exists_frequently_lt_of_liminf_ne_top ENNReal.exists_frequently_lt_of_liminf_ne_top

/- warning: ennreal.exists_frequently_lt_of_liminf_ne_top' -> ENNReal.exists_frequently_lt_of_liminf_ne_top' is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {l : Filter.{u1} Œπ} {x : Œπ -> Real}, (Ne.{1} ENNReal (Filter.liminf.{0, u1} ENNReal Œπ (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)) (fun (n : Œπ) => (fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) (coeFn.{1, 1} (MonoidWithZeroHom.{0, 0} Real NNReal (NonAssocSemiring.toMulZeroOneClass.{0} Real (NonAssocRing.toNonAssocSemiring.{0} Real (Ring.toNonAssocRing.{0} Real Real.ring))) (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal NNReal.semiring))) (fun (_x : MonoidWithZeroHom.{0, 0} Real NNReal (NonAssocSemiring.toMulZeroOneClass.{0} Real (NonAssocRing.toNonAssocSemiring.{0} Real (Ring.toNonAssocRing.{0} Real Real.ring))) (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal NNReal.semiring))) => Real -> NNReal) (MonoidWithZeroHom.hasCoeToFun.{0, 0} Real NNReal (NonAssocSemiring.toMulZeroOneClass.{0} Real (NonAssocRing.toNonAssocSemiring.{0} Real (Ring.toNonAssocRing.{0} Real Real.ring))) (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal NNReal.semiring))) Real.nnabs (x n))) l) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (Exists.{1} Real (fun (R : Real) => Filter.Frequently.{u1} Œπ (fun (n : Œπ) => LT.lt.{0} Real Real.hasLt R (x n)) l))
but is expected to have type
  forall {Œπ : Type.{u1}} {l : Filter.{u1} Œπ} {x : Œπ -> Real}, (Ne.{1} ENNReal (Filter.liminf.{0, u1} ENNReal Œπ (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))) (fun (n : Œπ) => ENNReal.some (FunLike.coe.{1, 1, 1} (MonoidWithZeroHom.{0, 0} Real NNReal (NonAssocSemiring.toMulZeroOneClass.{0} Real (Semiring.toNonAssocSemiring.{0} Real Real.semiring)) (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal instNNRealSemiring))) Real (fun (_x : Real) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : Real) => NNReal) _x) (MulHomClass.toFunLike.{0, 0, 0} (MonoidWithZeroHom.{0, 0} Real NNReal (NonAssocSemiring.toMulZeroOneClass.{0} Real (Semiring.toNonAssocSemiring.{0} Real Real.semiring)) (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal instNNRealSemiring))) Real NNReal (MulOneClass.toMul.{0} Real (MulZeroOneClass.toMulOneClass.{0} Real (NonAssocSemiring.toMulZeroOneClass.{0} Real (Semiring.toNonAssocSemiring.{0} Real Real.semiring)))) (MulOneClass.toMul.{0} NNReal (MulZeroOneClass.toMulOneClass.{0} NNReal (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal instNNRealSemiring)))) (MonoidHomClass.toMulHomClass.{0, 0, 0} (MonoidWithZeroHom.{0, 0} Real NNReal (NonAssocSemiring.toMulZeroOneClass.{0} Real (Semiring.toNonAssocSemiring.{0} Real Real.semiring)) (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal instNNRealSemiring))) Real NNReal (MulZeroOneClass.toMulOneClass.{0} Real (NonAssocSemiring.toMulZeroOneClass.{0} Real (Semiring.toNonAssocSemiring.{0} Real Real.semiring))) (MulZeroOneClass.toMulOneClass.{0} NNReal (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal instNNRealSemiring))) (MonoidWithZeroHomClass.toMonoidHomClass.{0, 0, 0} (MonoidWithZeroHom.{0, 0} Real NNReal (NonAssocSemiring.toMulZeroOneClass.{0} Real (Semiring.toNonAssocSemiring.{0} Real Real.semiring)) (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal instNNRealSemiring))) Real NNReal (NonAssocSemiring.toMulZeroOneClass.{0} Real (Semiring.toNonAssocSemiring.{0} Real Real.semiring)) (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal instNNRealSemiring)) (MonoidWithZeroHom.monoidWithZeroHomClass.{0, 0} Real NNReal (NonAssocSemiring.toMulZeroOneClass.{0} Real (Semiring.toNonAssocSemiring.{0} Real Real.semiring)) (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal instNNRealSemiring)))))) Real.nnabs (x n))) l) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (Exists.{1} Real (fun (R : Real) => Filter.Frequently.{u1} Œπ (fun (n : Œπ) => LT.lt.{0} Real Real.instLTReal R (x n)) l))
Case conversion may be inaccurate. Consider using '#align ennreal.exists_frequently_lt_of_liminf_ne_top' ENNReal.exists_frequently_lt_of_liminf_ne_top'‚Çì'. -/
/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:69:18: unsupported non-interactive tactic filter.is_bounded_default -/
theorem exists_frequently_lt_of_liminf_ne_top' {Œπ : Type _} {l : Filter Œπ} {x : Œπ ‚Üí ‚Ñù}
    (hx : liminf (fun n => ((x n).nnabs : ‚Ñù‚â•0‚àû)) l ‚â† ‚àû) : ‚àÉ R, ‚àÉ·∂† n in l, R < x n :=
  by
  by_contra h
  simp_rw [not_exists, not_frequently, not_lt] at h
  refine'
    hx
      (ENNReal.eq_top_of_forall_nnreal_le fun r =>
        le_Liminf_of_le
          (by
            run_tac
              is_bounded_default)
          _)
  simp only [eventually_map, ENNReal.coe_le_coe]
  filter_upwards [h (-r)]with i hi using(le_neg.1 hi).trans (neg_le_abs_self _)
#align ennreal.exists_frequently_lt_of_liminf_ne_top' ENNReal.exists_frequently_lt_of_liminf_ne_top'

/- warning: ennreal.exists_upcrossings_of_not_bounded_under -> ENNReal.exists_upcrossings_of_not_bounded_under is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {l : Filter.{u1} Œπ} {x : Œπ -> Real}, (Ne.{1} ENNReal (Filter.liminf.{0, u1} ENNReal Œπ (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)) (fun (i : Œπ) => (fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) (coeFn.{1, 1} (MonoidWithZeroHom.{0, 0} Real NNReal (NonAssocSemiring.toMulZeroOneClass.{0} Real (NonAssocRing.toNonAssocSemiring.{0} Real (Ring.toNonAssocRing.{0} Real Real.ring))) (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal NNReal.semiring))) (fun (_x : MonoidWithZeroHom.{0, 0} Real NNReal (NonAssocSemiring.toMulZeroOneClass.{0} Real (NonAssocRing.toNonAssocSemiring.{0} Real (Ring.toNonAssocRing.{0} Real Real.ring))) (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal NNReal.semiring))) => Real -> NNReal) (MonoidWithZeroHom.hasCoeToFun.{0, 0} Real NNReal (NonAssocSemiring.toMulZeroOneClass.{0} Real (NonAssocRing.toNonAssocSemiring.{0} Real (Ring.toNonAssocRing.{0} Real Real.ring))) (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal NNReal.semiring))) Real.nnabs (x i))) l) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (Not (Filter.IsBoundedUnder.{0, u1} Real Œπ (LE.le.{0} Real Real.hasLe) l (fun (i : Œπ) => Abs.abs.{0} Real (Neg.toHasAbs.{0} Real Real.hasNeg Real.hasSup) (x i)))) -> (Exists.{1} Rat (fun (a : Rat) => Exists.{1} Rat (fun (b : Rat) => And (LT.lt.{0} Rat Rat.hasLt a b) (And (Filter.Frequently.{u1} Œπ (fun (i : Œπ) => LT.lt.{0} Real Real.hasLt (x i) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) Rat Real (HasLiftT.mk.{1, 1} Rat Real (CoeTC‚Çì.coe.{1, 1} Rat Real (Rat.castCoe.{0} Real Real.hasRatCast))) a)) l) (Filter.Frequently.{u1} Œπ (fun (i : Œπ) => LT.lt.{0} Real Real.hasLt ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) Rat Real (HasLiftT.mk.{1, 1} Rat Real (CoeTC‚Çì.coe.{1, 1} Rat Real (Rat.castCoe.{0} Real Real.hasRatCast))) b) (x i)) l)))))
but is expected to have type
  forall {Œπ : Type.{u1}} {l : Filter.{u1} Œπ} {x : Œπ -> Real}, (Ne.{1} ENNReal (Filter.liminf.{0, u1} ENNReal Œπ (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))) (fun (i : Œπ) => ENNReal.some (FunLike.coe.{1, 1, 1} (MonoidWithZeroHom.{0, 0} Real NNReal (NonAssocSemiring.toMulZeroOneClass.{0} Real (Semiring.toNonAssocSemiring.{0} Real Real.semiring)) (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal instNNRealSemiring))) Real (fun (_x : Real) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.2391 : Real) => NNReal) _x) (MulHomClass.toFunLike.{0, 0, 0} (MonoidWithZeroHom.{0, 0} Real NNReal (NonAssocSemiring.toMulZeroOneClass.{0} Real (Semiring.toNonAssocSemiring.{0} Real Real.semiring)) (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal instNNRealSemiring))) Real NNReal (MulOneClass.toMul.{0} Real (MulZeroOneClass.toMulOneClass.{0} Real (NonAssocSemiring.toMulZeroOneClass.{0} Real (Semiring.toNonAssocSemiring.{0} Real Real.semiring)))) (MulOneClass.toMul.{0} NNReal (MulZeroOneClass.toMulOneClass.{0} NNReal (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal instNNRealSemiring)))) (MonoidHomClass.toMulHomClass.{0, 0, 0} (MonoidWithZeroHom.{0, 0} Real NNReal (NonAssocSemiring.toMulZeroOneClass.{0} Real (Semiring.toNonAssocSemiring.{0} Real Real.semiring)) (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal instNNRealSemiring))) Real NNReal (MulZeroOneClass.toMulOneClass.{0} Real (NonAssocSemiring.toMulZeroOneClass.{0} Real (Semiring.toNonAssocSemiring.{0} Real Real.semiring))) (MulZeroOneClass.toMulOneClass.{0} NNReal (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal instNNRealSemiring))) (MonoidWithZeroHomClass.toMonoidHomClass.{0, 0, 0} (MonoidWithZeroHom.{0, 0} Real NNReal (NonAssocSemiring.toMulZeroOneClass.{0} Real (Semiring.toNonAssocSemiring.{0} Real Real.semiring)) (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal instNNRealSemiring))) Real NNReal (NonAssocSemiring.toMulZeroOneClass.{0} Real (Semiring.toNonAssocSemiring.{0} Real Real.semiring)) (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal instNNRealSemiring)) (MonoidWithZeroHom.monoidWithZeroHomClass.{0, 0} Real NNReal (NonAssocSemiring.toMulZeroOneClass.{0} Real (Semiring.toNonAssocSemiring.{0} Real Real.semiring)) (NonAssocSemiring.toMulZeroOneClass.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal instNNRealSemiring)))))) Real.nnabs (x i))) l) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (Not (Filter.IsBoundedUnder.{0, u1} Real Œπ (fun (x._@.Mathlib.Topology.Instances.ENNReal._hyg.14713 : Real) (x._@.Mathlib.Topology.Instances.ENNReal._hyg.14715 : Real) => LE.le.{0} Real Real.instLEReal x._@.Mathlib.Topology.Instances.ENNReal._hyg.14713 x._@.Mathlib.Topology.Instances.ENNReal._hyg.14715) l (fun (i : Œπ) => Abs.abs.{0} Real (Neg.toHasAbs.{0} Real Real.instNegReal Real.instSupReal) (x i)))) -> (Exists.{1} Rat (fun (a : Rat) => Exists.{1} Rat (fun (b : Rat) => And (LT.lt.{0} Rat Rat.instLTRat_1 a b) (And (Filter.Frequently.{u1} Œπ (fun (i : Œπ) => LT.lt.{0} Real Real.instLTReal (x i) (Rat.cast.{0} Real Real.ratCast a)) l) (Filter.Frequently.{u1} Œπ (fun (i : Œπ) => LT.lt.{0} Real Real.instLTReal (Rat.cast.{0} Real Real.ratCast b) (x i)) l)))))
Case conversion may be inaccurate. Consider using '#align ennreal.exists_upcrossings_of_not_bounded_under ENNReal.exists_upcrossings_of_not_bounded_under‚Çì'. -/
theorem exists_upcrossings_of_not_bounded_under {Œπ : Type _} {l : Filter Œπ} {x : Œπ ‚Üí ‚Ñù}
    (hf : liminf (fun i => ((x i).nnabs : ‚Ñù‚â•0‚àû)) l ‚â† ‚àû)
    (hbdd : ¬¨IsBoundedUnder (¬∑ ‚â§ ¬∑) l fun i => |x i|) :
    ‚àÉ a b : ‚Ñö, a < b ‚àß (‚àÉ·∂† i in l, x i < a) ‚àß ‚àÉ·∂† i in l, ‚Üëb < x i :=
  by
  rw [is_bounded_under_le_abs, not_and_or] at hbdd
  obtain hbdd | hbdd := hbdd
  ¬∑ obtain ‚ü®R, hR‚ü© := exists_frequently_lt_of_liminf_ne_top hf
    obtain ‚ü®q, hq‚ü© := exists_rat_gt R
    refine' ‚ü®q, q + 1, (lt_add_iff_pos_right _).2 zero_lt_one, _, _‚ü©
    ¬∑ refine' fun hcon => hR _
      filter_upwards [hcon]with x hx using not_lt.2 (lt_of_lt_of_le hq (not_lt.1 hx)).le
    ¬∑ simp only [is_bounded_under, is_bounded, eventually_map, eventually_at_top, ge_iff_le,
        not_exists, not_forall, not_le, exists_prop] at hbdd
      refine' fun hcon => hbdd ‚Üë(q + 1) _
      filter_upwards [hcon]with x hx using not_lt.1 hx
  ¬∑ obtain ‚ü®R, hR‚ü© := exists_frequently_lt_of_liminf_ne_top' hf
    obtain ‚ü®q, hq‚ü© := exists_rat_lt R
    refine' ‚ü®q - 1, q, (sub_lt_self_iff _).2 zero_lt_one, _, _‚ü©
    ¬∑ simp only [is_bounded_under, is_bounded, eventually_map, eventually_at_top, ge_iff_le,
        not_exists, not_forall, not_le, exists_prop] at hbdd
      refine' fun hcon => hbdd ‚Üë(q - 1) _
      filter_upwards [hcon]with x hx using not_lt.1 hx
    ¬∑ refine' fun hcon => hR _
      filter_upwards [hcon]with x hx using not_lt.2 ((not_lt.1 hx).trans hq.le)
#align ennreal.exists_upcrossings_of_not_bounded_under ENNReal.exists_upcrossings_of_not_bounded_under

end Liminf

section tsum

variable {f g : Œ± ‚Üí ‚Ñù‚â•0‚àû}

/- warning: ennreal.has_sum_coe -> ENNReal.hasSum_coe is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> NNReal} {r : NNReal}, Iff (HasSum.{0, u1} ENNReal Œ± (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace (fun (a : Œ±) => (fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) (f a)) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) r)) (HasSum.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace f r)
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> NNReal} {r : NNReal}, Iff (HasSum.{0, u1} ENNReal Œ± (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal (fun (a : Œ±) => ENNReal.some (f a)) (ENNReal.some r)) (HasSum.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal f r)
Case conversion may be inaccurate. Consider using '#align ennreal.has_sum_coe ENNReal.hasSum_coe‚Çì'. -/
@[norm_cast]
protected theorem hasSum_coe {f : Œ± ‚Üí ‚Ñù‚â•0} {r : ‚Ñù‚â•0} :
    HasSum (fun a => (f a : ‚Ñù‚â•0‚àû)) ‚Üër ‚Üî HasSum f r :=
  by
  have :
    (fun s : Finset Œ± => ‚àë a in s, ‚Üë(f a)) =
      (coe : ‚Ñù‚â•0 ‚Üí ‚Ñù‚â•0‚àû) ‚àò fun s : Finset Œ± => ‚àë a in s, f a :=
    funext fun s => ENNReal.coe_finset_sum.symm
  unfold HasSum <;> rw [this, tendsto_coe]
#align ennreal.has_sum_coe ENNReal.hasSum_coe

/- warning: ennreal.tsum_coe_eq -> ENNReal.tsum_coe_eq is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {r : NNReal} {f : Œ± -> NNReal}, (HasSum.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace f r) -> (Eq.{1} ENNReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (a : Œ±) => (fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) (f a))) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) r))
but is expected to have type
  forall {Œ± : Type.{u1}} {r : NNReal} {f : Œ± -> NNReal}, (HasSum.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal f r) -> (Eq.{1} ENNReal (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (a : Œ±) => ENNReal.some (f a))) (ENNReal.some r))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_coe_eq ENNReal.tsum_coe_eq‚Çì'. -/
protected theorem tsum_coe_eq {f : Œ± ‚Üí ‚Ñù‚â•0} (h : HasSum f r) : (‚àë' a, (f a : ‚Ñù‚â•0‚àû)) = r :=
  (ENNReal.hasSum_coe.2 h).tsum_eq
#align ennreal.tsum_coe_eq ENNReal.tsum_coe_eq

/- warning: ennreal.coe_tsum -> ENNReal.coe_tsum is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> NNReal}, (Summable.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace f) -> (Eq.{1} ENNReal ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) (tsum.{0, u1} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace Œ± f)) (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (a : Œ±) => (fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) (f a))))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> NNReal}, (Summable.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal f) -> (Eq.{1} ENNReal (ENNReal.some (tsum.{0, u1} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal Œ± f)) (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (a : Œ±) => ENNReal.some (f a))))
Case conversion may be inaccurate. Consider using '#align ennreal.coe_tsum ENNReal.coe_tsum‚Çì'. -/
protected theorem coe_tsum {f : Œ± ‚Üí ‚Ñù‚â•0} : Summable f ‚Üí ‚Üë(tsum f) = ‚àë' a, (f a : ‚Ñù‚â•0‚àû)
  | ‚ü®r, hr‚ü© => by rw [hr.tsum_eq, ENNReal.tsum_coe_eq hr]
#align ennreal.coe_tsum ENNReal.coe_tsum

/- warning: ennreal.has_sum -> ENNReal.hasSum is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal}, HasSum.{0, u1} ENNReal Œ± (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace f (iSup.{0, succ u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) (Finset.{u1} Œ±) (fun (s : Finset.{u1} Œ±) => Finset.sum.{0, u1} ENNReal Œ± (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) s (fun (a : Œ±) => f a)))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal}, HasSum.{0, u1} ENNReal Œ± (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal f (iSup.{0, succ u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (Finset.{u1} Œ±) (fun (s : Finset.{u1} Œ±) => Finset.sum.{0, u1} ENNReal Œ± (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) s (fun (a : Œ±) => f a)))
Case conversion may be inaccurate. Consider using '#align ennreal.has_sum ENNReal.hasSum‚Çì'. -/
protected theorem hasSum : HasSum f (‚®Ü s : Finset Œ±, ‚àë a in s, f a) :=
  tendsto_atTop_iSup fun s t => Finset.sum_le_sum_of_subset
#align ennreal.has_sum ENNReal.hasSum

/- warning: ennreal.summable -> ENNReal.summable is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal}, Summable.{0, u1} ENNReal Œ± (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace f
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal}, Summable.{0, u1} ENNReal Œ± (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal f
Case conversion may be inaccurate. Consider using '#align ennreal.summable ENNReal.summable‚Çì'. -/
@[simp]
protected theorem summable : Summable f :=
  ‚ü®_, ENNReal.hasSum‚ü©
#align ennreal.summable ENNReal.summable

/- warning: ennreal.tsum_coe_ne_top_iff_summable -> ENNReal.tsum_coe_ne_top_iff_summable is a dubious translation:
lean 3 declaration is
  forall {Œ≤ : Type.{u1}} {f : Œ≤ -> NNReal}, Iff (Ne.{1} ENNReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ≤ (fun (b : Œ≤) => (fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) (f b))) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) (Summable.{0, u1} NNReal Œ≤ (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace f)
but is expected to have type
  forall {Œ≤ : Type.{u1}} {f : Œ≤ -> NNReal}, Iff (Ne.{1} ENNReal (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ≤ (fun (b : Œ≤) => ENNReal.some (f b))) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (Summable.{0, u1} NNReal Œ≤ (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal f)
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_coe_ne_top_iff_summable ENNReal.tsum_coe_ne_top_iff_summable‚Çì'. -/
theorem tsum_coe_ne_top_iff_summable {f : Œ≤ ‚Üí ‚Ñù‚â•0} : (‚àë' b, (f b : ‚Ñù‚â•0‚àû)) ‚â† ‚àû ‚Üî Summable f :=
  by
  refine' ‚ü®fun h => _, fun h => ENNReal.coe_tsum h ‚ñ∏ ENNReal.coe_ne_top‚ü©
  lift ‚àë' b, (f b : ‚Ñù‚â•0‚àû) to ‚Ñù‚â•0 using h with a ha
  refine' ‚ü®a, ENNReal.hasSum_coe.1 _‚ü©
  rw [ha]
  exact ennreal.summable.has_sum
#align ennreal.tsum_coe_ne_top_iff_summable ENNReal.tsum_coe_ne_top_iff_summable

/- warning: ennreal.tsum_eq_supr_sum -> ENNReal.tsum_eq_iSup_sum is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal}, Eq.{1} ENNReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (a : Œ±) => f a)) (iSup.{0, succ u1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) (Finset.{u1} Œ±) (fun (s : Finset.{u1} Œ±) => Finset.sum.{0, u1} ENNReal Œ± (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) s (fun (a : Œ±) => f a)))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal}, Eq.{1} ENNReal (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (a : Œ±) => f a)) (iSup.{0, succ u1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (Finset.{u1} Œ±) (fun (s : Finset.{u1} Œ±) => Finset.sum.{0, u1} ENNReal Œ± (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) s (fun (a : Œ±) => f a)))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_eq_supr_sum ENNReal.tsum_eq_iSup_sum‚Çì'. -/
protected theorem tsum_eq_iSup_sum : (‚àë' a, f a) = ‚®Ü s : Finset Œ±, ‚àë a in s, f a :=
  ENNReal.hasSum.tsum_eq
#align ennreal.tsum_eq_supr_sum ENNReal.tsum_eq_iSup_sum

/- warning: ennreal.tsum_eq_supr_sum' -> ENNReal.tsum_eq_iSup_sum' is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal} {Œπ : Type.{u2}} (s : Œπ -> (Finset.{u1} Œ±)), (forall (t : Finset.{u1} Œ±), Exists.{succ u2} Œπ (fun (i : Œπ) => HasSubset.Subset.{u1} (Finset.{u1} Œ±) (Finset.hasSubset.{u1} Œ±) t (s i))) -> (Eq.{1} ENNReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (a : Œ±) => f a)) (iSup.{0, succ u2} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Œπ (fun (i : Œπ) => Finset.sum.{0, u1} ENNReal Œ± (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) (s i) (fun (a : Œ±) => f a))))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal} {Œπ : Type.{u2}} (s : Œπ -> (Finset.{u1} Œ±)), (forall (t : Finset.{u1} Œ±), Exists.{succ u2} Œπ (fun (i : Œπ) => HasSubset.Subset.{u1} (Finset.{u1} Œ±) (Finset.instHasSubsetFinset.{u1} Œ±) t (s i))) -> (Eq.{1} ENNReal (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (a : Œ±) => f a)) (iSup.{0, succ u2} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Œπ (fun (i : Œπ) => Finset.sum.{0, u1} ENNReal Œ± (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) (s i) (fun (a : Œ±) => f a))))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_eq_supr_sum' ENNReal.tsum_eq_iSup_sum'‚Çì'. -/
protected theorem tsum_eq_iSup_sum' {Œπ : Type _} (s : Œπ ‚Üí Finset Œ±) (hs : ‚àÄ t, ‚àÉ i, t ‚äÜ s i) :
    (‚àë' a, f a) = ‚®Ü i, ‚àë a in s i, f a :=
  by
  rw [ENNReal.tsum_eq_iSup_sum]
  symm
  change (‚®Ü i : Œπ, (fun t : Finset Œ± => ‚àë a in t, f a) (s i)) = ‚®Ü s : Finset Œ±, ‚àë a in s, f a
  exact (Finset.sum_mono_set f).iSup_comp_eq hs
#align ennreal.tsum_eq_supr_sum' ENNReal.tsum_eq_iSup_sum'

/- warning: ennreal.tsum_sigma -> ENNReal.tsum_sigma is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Œ± -> Type.{u2}} (f : forall (a : Œ±), (Œ≤ a) -> ENNReal), Eq.{1} ENNReal (tsum.{0, max u1 u2} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace (Sigma.{u1, u2} Œ± (fun (a : Œ±) => Œ≤ a)) (fun (p : Sigma.{u1, u2} Œ± (fun (a : Œ±) => Œ≤ a)) => f (Sigma.fst.{u1, u2} Œ± (fun (a : Œ±) => Œ≤ a) p) (Sigma.snd.{u1, u2} Œ± (fun (a : Œ±) => Œ≤ a) p))) (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (a : Œ±) => tsum.{0, u2} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace (Œ≤ a) (fun (b : Œ≤ a) => f a b)))
but is expected to have type
  forall {Œ± : Type.{u1}} {Œ≤ : Œ± -> Type.{u2}} (f : forall (a : Œ±), (Œ≤ a) -> ENNReal), Eq.{1} ENNReal (tsum.{0, max u1 u2} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal (Sigma.{u1, u2} Œ± (fun (a : Œ±) => Œ≤ a)) (fun (p : Sigma.{u1, u2} Œ± (fun (a : Œ±) => Œ≤ a)) => f (Sigma.fst.{u1, u2} Œ± (fun (a : Œ±) => Œ≤ a) p) (Sigma.snd.{u1, u2} Œ± (fun (a : Œ±) => Œ≤ a) p))) (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (a : Œ±) => tsum.{0, u2} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal (Œ≤ a) (fun (b : Œ≤ a) => f a b)))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_sigma ENNReal.tsum_sigma‚Çì'. -/
/- ./././Mathport/Syntax/Translate/Expr.lean:107:6: warning: expanding binder group (a b) -/
protected theorem tsum_sigma {Œ≤ : Œ± ‚Üí Type _} (f : ‚àÄ a, Œ≤ a ‚Üí ‚Ñù‚â•0‚àû) :
    (‚àë' p : Œ£a, Œ≤ a, f p.1 p.2) = ‚àë' (a) (b), f a b :=
  tsum_sigma' (fun b => ENNReal.summable) ENNReal.summable
#align ennreal.tsum_sigma ENNReal.tsum_sigma

/- warning: ennreal.tsum_sigma' -> ENNReal.tsum_sigma' is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Œ± -> Type.{u2}} (f : (Sigma.{u1, u2} Œ± (fun (a : Œ±) => Œ≤ a)) -> ENNReal), Eq.{1} ENNReal (tsum.{0, max u1 u2} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace (Sigma.{u1, u2} Œ± (fun (a : Œ±) => Œ≤ a)) (fun (p : Sigma.{u1, u2} Œ± (fun (a : Œ±) => Œ≤ a)) => f p)) (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (a : Œ±) => tsum.{0, u2} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace (Œ≤ a) (fun (b : Œ≤ a) => f (Sigma.mk.{u1, u2} Œ± (fun (a : Œ±) => Œ≤ a) a b))))
but is expected to have type
  forall {Œ± : Type.{u1}} {Œ≤ : Œ± -> Type.{u2}} (f : (Sigma.{u1, u2} Œ± (fun (a : Œ±) => Œ≤ a)) -> ENNReal), Eq.{1} ENNReal (tsum.{0, max u1 u2} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal (Sigma.{u1, u2} Œ± (fun (a : Œ±) => Œ≤ a)) (fun (p : Sigma.{u1, u2} Œ± (fun (a : Œ±) => Œ≤ a)) => f p)) (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (a : Œ±) => tsum.{0, u2} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal (Œ≤ a) (fun (b : Œ≤ a) => f (Sigma.mk.{u1, u2} Œ± (fun (a : Œ±) => Œ≤ a) a b))))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_sigma' ENNReal.tsum_sigma'‚Çì'. -/
/- ./././Mathport/Syntax/Translate/Expr.lean:107:6: warning: expanding binder group (a b) -/
protected theorem tsum_sigma' {Œ≤ : Œ± ‚Üí Type _} (f : (Œ£a, Œ≤ a) ‚Üí ‚Ñù‚â•0‚àû) :
    (‚àë' p : Œ£a, Œ≤ a, f p) = ‚àë' (a) (b), f ‚ü®a, b‚ü© :=
  tsum_sigma' (fun b => ENNReal.summable) ENNReal.summable
#align ennreal.tsum_sigma' ENNReal.tsum_sigma'

/- warning: ennreal.tsum_prod -> ENNReal.tsum_prod is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} {f : Œ± -> Œ≤ -> ENNReal}, Eq.{1} ENNReal (tsum.{0, max u1 u2} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace (Prod.{u1, u2} Œ± Œ≤) (fun (p : Prod.{u1, u2} Œ± Œ≤) => f (Prod.fst.{u1, u2} Œ± Œ≤ p) (Prod.snd.{u1, u2} Œ± Œ≤ p))) (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (a : Œ±) => tsum.{0, u2} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ≤ (fun (b : Œ≤) => f a b)))
but is expected to have type
  forall {Œ± : Type.{u2}} {Œ≤ : Type.{u1}} {f : Œ± -> Œ≤ -> ENNReal}, Eq.{1} ENNReal (tsum.{0, max u2 u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal (Prod.{u2, u1} Œ± Œ≤) (fun (p : Prod.{u2, u1} Œ± Œ≤) => f (Prod.fst.{u2, u1} Œ± Œ≤ p) (Prod.snd.{u2, u1} Œ± Œ≤ p))) (tsum.{0, u2} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (a : Œ±) => tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ≤ (fun (b : Œ≤) => f a b)))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_prod ENNReal.tsum_prod‚Çì'. -/
/- ./././Mathport/Syntax/Translate/Expr.lean:107:6: warning: expanding binder group (a b) -/
protected theorem tsum_prod {f : Œ± ‚Üí Œ≤ ‚Üí ‚Ñù‚â•0‚àû} : (‚àë' p : Œ± √ó Œ≤, f p.1 p.2) = ‚àë' (a) (b), f a b :=
  tsum_prod' ENNReal.summable fun _ => ENNReal.summable
#align ennreal.tsum_prod ENNReal.tsum_prod

/- warning: ennreal.tsum_prod' -> ENNReal.tsum_prod' is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} {f : (Prod.{u1, u2} Œ± Œ≤) -> ENNReal}, Eq.{1} ENNReal (tsum.{0, max u1 u2} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace (Prod.{u1, u2} Œ± Œ≤) (fun (p : Prod.{u1, u2} Œ± Œ≤) => f p)) (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (a : Œ±) => tsum.{0, u2} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ≤ (fun (b : Œ≤) => f (Prod.mk.{u1, u2} Œ± Œ≤ a b))))
but is expected to have type
  forall {Œ± : Type.{u2}} {Œ≤ : Type.{u1}} {f : (Prod.{u2, u1} Œ± Œ≤) -> ENNReal}, Eq.{1} ENNReal (tsum.{0, max u2 u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal (Prod.{u2, u1} Œ± Œ≤) (fun (p : Prod.{u2, u1} Œ± Œ≤) => f p)) (tsum.{0, u2} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (a : Œ±) => tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ≤ (fun (b : Œ≤) => f (Prod.mk.{u2, u1} Œ± Œ≤ a b))))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_prod' ENNReal.tsum_prod'‚Çì'. -/
/- ./././Mathport/Syntax/Translate/Expr.lean:107:6: warning: expanding binder group (a b) -/
protected theorem tsum_prod' {f : Œ± √ó Œ≤ ‚Üí ‚Ñù‚â•0‚àû} : (‚àë' p : Œ± √ó Œ≤, f p) = ‚àë' (a) (b), f (a, b) :=
  tsum_prod' ENNReal.summable fun _ => ENNReal.summable
#align ennreal.tsum_prod' ENNReal.tsum_prod'

/- warning: ennreal.tsum_comm -> ENNReal.tsum_comm is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} {f : Œ± -> Œ≤ -> ENNReal}, Eq.{1} ENNReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (a : Œ±) => tsum.{0, u2} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ≤ (fun (b : Œ≤) => f a b))) (tsum.{0, u2} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ≤ (fun (b : Œ≤) => tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (a : Œ±) => f a b)))
but is expected to have type
  forall {Œ± : Type.{u2}} {Œ≤ : Type.{u1}} {f : Œ± -> Œ≤ -> ENNReal}, Eq.{1} ENNReal (tsum.{0, u2} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (a : Œ±) => tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ≤ (fun (b : Œ≤) => f a b))) (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ≤ (fun (b : Œ≤) => tsum.{0, u2} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (a : Œ±) => f a b)))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_comm ENNReal.tsum_comm‚Çì'. -/
protected theorem tsum_comm {f : Œ± ‚Üí Œ≤ ‚Üí ‚Ñù‚â•0‚àû} : (‚àë' a, ‚àë' b, f a b) = ‚àë' b, ‚àë' a, f a b :=
  tsum_comm' ENNReal.summable (fun _ => ENNReal.summable) fun _ => ENNReal.summable
#align ennreal.tsum_comm ENNReal.tsum_comm

/- warning: ennreal.tsum_add -> ENNReal.tsum_add is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal} {g : Œ± -> ENNReal}, Eq.{1} ENNReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (a : Œ±) => HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (f a) (g a))) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (a : Œ±) => f a)) (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (a : Œ±) => g a)))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal} {g : Œ± -> ENNReal}, Eq.{1} ENNReal (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (a : Œ±) => HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) (f a) (g a))) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (a : Œ±) => f a)) (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (a : Œ±) => g a)))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_add ENNReal.tsum_add‚Çì'. -/
protected theorem tsum_add : (‚àë' a, f a + g a) = (‚àë' a, f a) + ‚àë' a, g a :=
  tsum_add ENNReal.summable ENNReal.summable
#align ennreal.tsum_add ENNReal.tsum_add

/- warning: ennreal.tsum_le_tsum -> ENNReal.tsum_le_tsum is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal} {g : Œ± -> ENNReal}, (forall (a : Œ±), LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (f a) (g a)) -> (LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (a : Œ±) => f a)) (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (a : Œ±) => g a)))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal} {g : Œ± -> ENNReal}, (forall (a : Œ±), LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (f a) (g a)) -> (LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (a : Œ±) => f a)) (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (a : Œ±) => g a)))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_le_tsum ENNReal.tsum_le_tsum‚Çì'. -/
protected theorem tsum_le_tsum (h : ‚àÄ a, f a ‚â§ g a) : (‚àë' a, f a) ‚â§ ‚àë' a, g a :=
  tsum_le_tsum h ENNReal.summable ENNReal.summable
#align ennreal.tsum_le_tsum ENNReal.tsum_le_tsum

/- warning: ennreal.sum_le_tsum -> ENNReal.sum_le_tsum is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal} (s : Finset.{u1} Œ±), LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (Finset.sum.{0, u1} ENNReal Œ± (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) s (fun (x : Œ±) => f x)) (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (x : Œ±) => f x))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal} (s : Finset.{u1} Œ±), LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (Finset.sum.{0, u1} ENNReal Œ± (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) s (fun (x : Œ±) => f x)) (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (x : Œ±) => f x))
Case conversion may be inaccurate. Consider using '#align ennreal.sum_le_tsum ENNReal.sum_le_tsum‚Çì'. -/
protected theorem sum_le_tsum {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (s : Finset Œ±) : (‚àë x in s, f x) ‚â§ ‚àë' x, f x :=
  sum_le_tsum s (fun x hx => zero_le _) ENNReal.summable
#align ennreal.sum_le_tsum ENNReal.sum_le_tsum

/- warning: ennreal.tsum_eq_supr_nat' -> ENNReal.tsum_eq_iSup_nat' is a dubious translation:
lean 3 declaration is
  forall {f : Nat -> ENNReal} {N : Nat -> Nat}, (Filter.Tendsto.{0, 0} Nat Nat N (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (OrderedCancelAddCommMonoid.toPartialOrder.{0} Nat (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} Nat Nat.strictOrderedSemiring)))) (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (OrderedCancelAddCommMonoid.toPartialOrder.{0} Nat (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} Nat Nat.strictOrderedSemiring))))) -> (Eq.{1} ENNReal (tsum.{0, 0} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Nat (fun (i : Nat) => f i)) (iSup.{0, 1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Nat (fun (i : Nat) => Finset.sum.{0, 0} ENNReal Nat (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) (Finset.range (N i)) (fun (a : Nat) => f a))))
but is expected to have type
  forall {f : Nat -> ENNReal} {N : Nat -> Nat}, (Filter.Tendsto.{0, 0} Nat Nat N (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (StrictOrderedSemiring.toPartialOrder.{0} Nat Nat.strictOrderedSemiring))) (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (StrictOrderedSemiring.toPartialOrder.{0} Nat Nat.strictOrderedSemiring)))) -> (Eq.{1} ENNReal (tsum.{0, 0} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Nat (fun (i : Nat) => f i)) (iSup.{0, 1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Nat (fun (i : Nat) => Finset.sum.{0, 0} ENNReal Nat (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) (Finset.range (N i)) (fun (a : Nat) => f a))))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_eq_supr_nat' ENNReal.tsum_eq_iSup_nat'‚Çì'. -/
protected theorem tsum_eq_iSup_nat' {f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} {N : ‚Ñï ‚Üí ‚Ñï} (hN : Tendsto N atTop atTop) :
    (‚àë' i : ‚Ñï, f i) = ‚®Ü i : ‚Ñï, ‚àë a in Finset.range (N i), f a :=
  ENNReal.tsum_eq_iSup_sum' _ fun t =>
    let ‚ü®n, hn‚ü© := t.exists_nat_subset_range
    let ‚ü®k, _, hk‚ü© := exists_le_of_tendsto_atTop hN 0 n
    ‚ü®k, Finset.Subset.trans hn (Finset.range_mono hk)‚ü©
#align ennreal.tsum_eq_supr_nat' ENNReal.tsum_eq_iSup_nat'

/- warning: ennreal.tsum_eq_supr_nat -> ENNReal.tsum_eq_iSup_nat is a dubious translation:
lean 3 declaration is
  forall {f : Nat -> ENNReal}, Eq.{1} ENNReal (tsum.{0, 0} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Nat (fun (i : Nat) => f i)) (iSup.{0, 1} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) Nat (fun (i : Nat) => Finset.sum.{0, 0} ENNReal Nat (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) (Finset.range i) (fun (a : Nat) => f a)))
but is expected to have type
  forall {f : Nat -> ENNReal}, Eq.{1} ENNReal (tsum.{0, 0} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Nat (fun (i : Nat) => f i)) (iSup.{0, 1} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) Nat (fun (i : Nat) => Finset.sum.{0, 0} ENNReal Nat (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) (Finset.range i) (fun (a : Nat) => f a)))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_eq_supr_nat ENNReal.tsum_eq_iSup_nat‚Çì'. -/
protected theorem tsum_eq_iSup_nat {f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} :
    (‚àë' i : ‚Ñï, f i) = ‚®Ü i : ‚Ñï, ‚àë a in Finset.range i, f a :=
  ENNReal.tsum_eq_iSup_sum' _ Finset.exists_nat_subset_range
#align ennreal.tsum_eq_supr_nat ENNReal.tsum_eq_iSup_nat

/- warning: ennreal.tsum_eq_liminf_sum_nat -> ENNReal.tsum_eq_liminf_sum_nat is a dubious translation:
lean 3 declaration is
  forall {f : Nat -> ENNReal}, Eq.{1} ENNReal (tsum.{0, 0} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Nat (fun (i : Nat) => f i)) (Filter.liminf.{0, 0} ENNReal Nat (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)) (fun (n : Nat) => Finset.sum.{0, 0} ENNReal Nat (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) (Finset.range n) (fun (i : Nat) => f i)) (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (OrderedCancelAddCommMonoid.toPartialOrder.{0} Nat (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} Nat Nat.strictOrderedSemiring)))))
but is expected to have type
  forall {f : Nat -> ENNReal}, Eq.{1} ENNReal (tsum.{0, 0} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Nat (fun (i : Nat) => f i)) (Filter.liminf.{0, 0} ENNReal Nat (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))) (fun (n : Nat) => Finset.sum.{0, 0} ENNReal Nat (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) (Finset.range n) (fun (i : Nat) => f i)) (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (StrictOrderedSemiring.toPartialOrder.{0} Nat Nat.strictOrderedSemiring))))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_eq_liminf_sum_nat ENNReal.tsum_eq_liminf_sum_nat‚Çì'. -/
protected theorem tsum_eq_liminf_sum_nat {f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} :
    (‚àë' i, f i) = liminf (fun n => ‚àë i in Finset.range n, f i) atTop :=
  by
  rw [ENNReal.tsum_eq_iSup_nat, Filter.liminf_eq_iSup_iInf_of_nat]
  congr
  refine' funext fun n => le_antisymm _ _
  ¬∑ refine' le_iInf‚ÇÇ fun i hi => Finset.sum_le_sum_of_subset_of_nonneg _ fun _ _ _ => zero_le _
    simpa only [Finset.range_subset, add_le_add_iff_right] using hi
  ¬∑ refine' le_trans (iInf_le _ n) _
    simp [le_refl n, le_refl ((Finset.range n).Sum f)]
#align ennreal.tsum_eq_liminf_sum_nat ENNReal.tsum_eq_liminf_sum_nat

/- warning: ennreal.le_tsum -> ENNReal.le_tsum is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal} (a : Œ±), LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (f a) (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (a : Œ±) => f a))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal} (a : Œ±), LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (f a) (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (a : Œ±) => f a))
Case conversion may be inaccurate. Consider using '#align ennreal.le_tsum ENNReal.le_tsum‚Çì'. -/
protected theorem le_tsum (a : Œ±) : f a ‚â§ ‚àë' a, f a :=
  le_tsum' ENNReal.summable a
#align ennreal.le_tsum ENNReal.le_tsum

/- warning: ennreal.tsum_eq_zero -> ENNReal.tsum_eq_zero is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal}, Iff (Eq.{1} ENNReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (i : Œ±) => f i)) (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) (forall (i : Œ±), Eq.{1} ENNReal (f i) (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero))))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal}, Iff (Eq.{1} ENNReal (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (i : Œ±) => f i)) (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) (forall (i : Œ±), Eq.{1} ENNReal (f i) (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero)))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_eq_zero ENNReal.tsum_eq_zero‚Çì'. -/
@[simp]
protected theorem tsum_eq_zero : (‚àë' i, f i) = 0 ‚Üî ‚àÄ i, f i = 0 :=
  ‚ü®fun h i => nonpos_iff_eq_zero.1 <| h ‚ñ∏ ENNReal.le_tsum i, fun h => by simp [h]‚ü©
#align ennreal.tsum_eq_zero ENNReal.tsum_eq_zero

/- warning: ennreal.tsum_eq_top_of_eq_top -> ENNReal.tsum_eq_top_of_eq_top is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal}, (Exists.{succ u1} Œ± (fun (a : Œ±) => Eq.{1} ENNReal (f a) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) -> (Eq.{1} ENNReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (a : Œ±) => f a)) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal}, (Exists.{succ u1} Œ± (fun (a : Œ±) => Eq.{1} ENNReal (f a) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) -> (Eq.{1} ENNReal (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (a : Œ±) => f a)) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_eq_top_of_eq_top ENNReal.tsum_eq_top_of_eq_top‚Çì'. -/
protected theorem tsum_eq_top_of_eq_top : (‚àÉ a, f a = ‚àû) ‚Üí (‚àë' a, f a) = ‚àû
  | ‚ü®a, ha‚ü© => top_unique <| ha ‚ñ∏ ENNReal.le_tsum a
#align ennreal.tsum_eq_top_of_eq_top ENNReal.tsum_eq_top_of_eq_top

/- warning: ennreal.lt_top_of_tsum_ne_top -> ENNReal.lt_top_of_tsum_ne_top is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {a : Œ± -> ENNReal}, (Ne.{1} ENNReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (i : Œ±) => a i)) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (forall (j : Œ±), LT.lt.{0} ENNReal (Preorder.toHasLt.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (a j) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))
but is expected to have type
  forall {Œ± : Type.{u1}} {a : Œ± -> ENNReal}, (Ne.{1} ENNReal (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (i : Œ±) => a i)) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (forall (j : Œ±), LT.lt.{0} ENNReal (Preorder.toLT.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (a j) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))
Case conversion may be inaccurate. Consider using '#align ennreal.lt_top_of_tsum_ne_top ENNReal.lt_top_of_tsum_ne_top‚Çì'. -/
protected theorem lt_top_of_tsum_ne_top {a : Œ± ‚Üí ‚Ñù‚â•0‚àû} (tsum_ne_top : (‚àë' i, a i) ‚â† ‚àû) (j : Œ±) :
    a j < ‚àû := by
  have key := not_imp_not.mpr ENNReal.tsum_eq_top_of_eq_top
  simp only [not_exists] at key
  exact lt_top_iff_ne_top.mpr (key tsum_ne_top j)
#align ennreal.lt_top_of_tsum_ne_top ENNReal.lt_top_of_tsum_ne_top

/- warning: ennreal.tsum_top -> ENNReal.tsum_top is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : Nonempty.{succ u1} Œ±], Eq.{1} ENNReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (a : Œ±) => Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : Nonempty.{succ u1} Œ±], Eq.{1} ENNReal (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (a : Œ±) => Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_top ENNReal.tsum_top‚Çì'. -/
@[simp]
protected theorem tsum_top [Nonempty Œ±] : (‚àë' a : Œ±, ‚àû) = ‚àû :=
  let ‚ü®a‚ü© := ‚ÄπNonempty Œ±‚Ä∫
  ENNReal.tsum_eq_top_of_eq_top ‚ü®a, rfl‚ü©
#align ennreal.tsum_top ENNReal.tsum_top

/- warning: ennreal.tsum_const_eq_top_of_ne_zero -> ENNReal.tsum_const_eq_top_of_ne_zero is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : Infinite.{succ u1} Œ±] {c : ENNReal}, (Ne.{1} ENNReal c (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) -> (Eq.{1} ENNReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (a : Œ±) => c)) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : Infinite.{succ u1} Œ±] {c : ENNReal}, (Ne.{1} ENNReal c (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) -> (Eq.{1} ENNReal (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (a : Œ±) => c)) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_const_eq_top_of_ne_zero ENNReal.tsum_const_eq_top_of_ne_zero‚Çì'. -/
theorem tsum_const_eq_top_of_ne_zero {Œ± : Type _} [Infinite Œ±] {c : ‚Ñù‚â•0‚àû} (hc : c ‚â† 0) :
    (‚àë' a : Œ±, c) = ‚àû :=
  by
  have A : tendsto (fun n : ‚Ñï => (n : ‚Ñù‚â•0‚àû) * c) at_top (ùìù (‚àû * c)) :=
    by
    apply ENNReal.Tendsto.mul_const tendsto_nat_nhds_top
    simp only [true_or_iff, top_ne_zero, Ne.def, not_false_iff]
  have B : ‚àÄ n : ‚Ñï, (n : ‚Ñù‚â•0‚àû) * c ‚â§ ‚àë' a : Œ±, c :=
    by
    intro n
    rcases Infinite.exists_subset_card_eq Œ± n with ‚ü®s, hs‚ü©
    simpa [hs] using @ENNReal.sum_le_tsum Œ± (fun i => c) s
  simpa [hc] using le_of_tendsto' A B
#align ennreal.tsum_const_eq_top_of_ne_zero ENNReal.tsum_const_eq_top_of_ne_zero

/- warning: ennreal.ne_top_of_tsum_ne_top -> ENNReal.ne_top_of_tsum_ne_top is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal}, (Ne.{1} ENNReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (a : Œ±) => f a)) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (forall (a : Œ±), Ne.{1} ENNReal (f a) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal}, (Ne.{1} ENNReal (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (a : Œ±) => f a)) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (forall (a : Œ±), Ne.{1} ENNReal (f a) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))
Case conversion may be inaccurate. Consider using '#align ennreal.ne_top_of_tsum_ne_top ENNReal.ne_top_of_tsum_ne_top‚Çì'. -/
protected theorem ne_top_of_tsum_ne_top (h : (‚àë' a, f a) ‚â† ‚àû) (a : Œ±) : f a ‚â† ‚àû := fun ha =>
  h <| ENNReal.tsum_eq_top_of_eq_top ‚ü®a, ha‚ü©
#align ennreal.ne_top_of_tsum_ne_top ENNReal.ne_top_of_tsum_ne_top

/- warning: ennreal.tsum_mul_left -> ENNReal.tsum_mul_left is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {a : ENNReal} {f : Œ± -> ENNReal}, Eq.{1} ENNReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (i : Œ±) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) a (f i))) (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) a (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (i : Œ±) => f i)))
but is expected to have type
  forall {Œ± : Type.{u1}} {a : ENNReal} {f : Œ± -> ENNReal}, Eq.{1} ENNReal (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (i : Œ±) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) a (f i))) (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) a (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (i : Œ±) => f i)))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_mul_left ENNReal.tsum_mul_left‚Çì'. -/
protected theorem tsum_mul_left : (‚àë' i, a * f i) = a * ‚àë' i, f i :=
  if h : ‚àÄ i, f i = 0 then by simp [h]
  else
    let ‚ü®i, (hi : f i ‚â† 0)‚ü© := not_forall.mp h
    have sum_ne_0 : (‚àë' i, f i) ‚â† 0 :=
      ne_of_gt <|
        calc
          0 < f i := lt_of_le_of_ne (zero_le _) hi.symm
          _ ‚â§ ‚àë' i, f i := ENNReal.le_tsum _
          
    have : Tendsto (fun s : Finset Œ± => ‚àë j in s, a * f j) atTop (ùìù (a * ‚àë' i, f i)) := by
      rw [‚Üê
          show ((¬∑ * ¬∑) a ‚àò fun s : Finset Œ± => ‚àë j in s, f j) = fun s => ‚àë j in s, a * f j from
            funext fun s => Finset.mul_sum] <;>
        exact ENNReal.Tendsto.const_mul ennreal.summable.has_sum (Or.inl sum_ne_0)
    HasSum.tsum_eq this
#align ennreal.tsum_mul_left ENNReal.tsum_mul_left

/- warning: ennreal.tsum_mul_right -> ENNReal.tsum_mul_right is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {a : ENNReal} {f : Œ± -> ENNReal}, Eq.{1} ENNReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (i : Œ±) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (f i) a)) (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (i : Œ±) => f i)) a)
but is expected to have type
  forall {Œ± : Type.{u1}} {a : ENNReal} {f : Œ± -> ENNReal}, Eq.{1} ENNReal (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (i : Œ±) => HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) (f i) a)) (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (i : Œ±) => f i)) a)
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_mul_right ENNReal.tsum_mul_right‚Çì'. -/
protected theorem tsum_mul_right : (‚àë' i, f i * a) = (‚àë' i, f i) * a := by
  simp [mul_comm, ENNReal.tsum_mul_left]
#align ennreal.tsum_mul_right ENNReal.tsum_mul_right

protected theorem tsum_const_smul {R} [SMul R ‚Ñù‚â•0‚àû] [IsScalarTower R ‚Ñù‚â•0‚àû ‚Ñù‚â•0‚àû] (a : R) :
    (‚àë' i, a ‚Ä¢ f i) = a ‚Ä¢ ‚àë' i, f i := by
  simpa only [smul_one_mul] using @ENNReal.tsum_mul_left _ (a ‚Ä¢ 1) _
#align ennreal.tsum_const_smul ENNReal.tsum_const_smul

/- warning: ennreal.tsum_supr_eq -> ENNReal.tsum_iSup_eq is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} (a : Œ±) {f : Œ± -> ENNReal}, Eq.{1} ENNReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (b : Œ±) => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toHasSup.{0} ENNReal (CompleteLattice.toConditionallyCompleteLattice.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) (Eq.{succ u1} Œ± a b) (fun (h : Eq.{succ u1} Œ± a b) => f b))) (f a)
but is expected to have type
  forall {Œ± : Type.{u1}} (a : Œ±) {f : Œ± -> ENNReal}, Eq.{1} ENNReal (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (b : Œ±) => iSup.{0, 0} ENNReal (ConditionallyCompleteLattice.toSupSet.{0} ENNReal (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{0} ENNReal (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{0} ENNReal (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (Eq.{succ u1} Œ± a b) (fun (h : Eq.{succ u1} Œ± a b) => f b))) (f a)
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_supr_eq ENNReal.tsum_iSup_eq‚Çì'. -/
@[simp]
theorem tsum_iSup_eq {Œ± : Type _} (a : Œ±) {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} : (‚àë' b : Œ±, ‚®Ü h : a = b, f b) = f a :=
  le_antisymm
    (by
      rw [ENNReal.tsum_eq_iSup_sum] <;>
        exact
          iSup_le fun s =>
            calc
              (‚àë b in s, ‚®Ü h : a = b, f b) ‚â§ ‚àë b in {a}, ‚®Ü h : a = b, f b :=
                Finset.sum_le_sum_of_ne_zero fun b _ hb =>
                  suffices a = b by simpa using this.symm
                  by_contradiction fun h => by simpa [h] using hb
              _ = f a := by simp
              )
    (calc
      f a ‚â§ ‚®Ü h : a = a, f a := le_iSup (fun h : a = a => f a) rfl
      _ ‚â§ ‚àë' b : Œ±, ‚®Ü h : a = b, f b := ENNReal.le_tsum _
      )
#align ennreal.tsum_supr_eq ENNReal.tsum_iSup_eq

/- warning: ennreal.has_sum_iff_tendsto_nat -> ENNReal.hasSum_iff_tendsto_nat is a dubious translation:
lean 3 declaration is
  forall {f : Nat -> ENNReal} (r : ENNReal), Iff (HasSum.{0, 0} ENNReal Nat (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace f r) (Filter.Tendsto.{0, 0} Nat ENNReal (fun (n : Nat) => Finset.sum.{0, 0} ENNReal Nat (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) (Finset.range n) (fun (i : Nat) => f i)) (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (OrderedCancelAddCommMonoid.toPartialOrder.{0} Nat (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} Nat Nat.strictOrderedSemiring)))) (nhds.{0} ENNReal ENNReal.topologicalSpace r))
but is expected to have type
  forall {f : Nat -> ENNReal} (r : ENNReal), Iff (HasSum.{0, 0} ENNReal Nat (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal f r) (Filter.Tendsto.{0, 0} Nat ENNReal (fun (n : Nat) => Finset.sum.{0, 0} ENNReal Nat (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) (Finset.range n) (fun (i : Nat) => f i)) (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (StrictOrderedSemiring.toPartialOrder.{0} Nat Nat.strictOrderedSemiring))) (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal r))
Case conversion may be inaccurate. Consider using '#align ennreal.has_sum_iff_tendsto_nat ENNReal.hasSum_iff_tendsto_nat‚Çì'. -/
theorem hasSum_iff_tendsto_nat {f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} (r : ‚Ñù‚â•0‚àû) :
    HasSum f r ‚Üî Tendsto (fun n : ‚Ñï => ‚àë i in Finset.range n, f i) atTop (ùìù r) :=
  by
  refine' ‚ü®HasSum.tendsto_sum_nat, fun h => _‚ü©
  rw [‚Üê iSup_eq_of_tendsto _ h, ‚Üê ENNReal.tsum_eq_iSup_nat]
  ¬∑ exact ennreal.summable.has_sum
  ¬∑ exact fun s t hst => Finset.sum_le_sum_of_subset (Finset.range_subset.2 hst)
#align ennreal.has_sum_iff_tendsto_nat ENNReal.hasSum_iff_tendsto_nat

/- warning: ennreal.tendsto_nat_tsum -> ENNReal.tendsto_nat_tsum is a dubious translation:
lean 3 declaration is
  forall (f : Nat -> ENNReal), Filter.Tendsto.{0, 0} Nat ENNReal (fun (n : Nat) => Finset.sum.{0, 0} ENNReal Nat (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) (Finset.range n) (fun (i : Nat) => f i)) (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (OrderedCancelAddCommMonoid.toPartialOrder.{0} Nat (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} Nat Nat.strictOrderedSemiring)))) (nhds.{0} ENNReal ENNReal.topologicalSpace (tsum.{0, 0} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Nat (fun (n : Nat) => f n)))
but is expected to have type
  forall (f : Nat -> ENNReal), Filter.Tendsto.{0, 0} Nat ENNReal (fun (n : Nat) => Finset.sum.{0, 0} ENNReal Nat (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) (Finset.range n) (fun (i : Nat) => f i)) (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (StrictOrderedSemiring.toPartialOrder.{0} Nat Nat.strictOrderedSemiring))) (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (tsum.{0, 0} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Nat (fun (n : Nat) => f n)))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto_nat_tsum ENNReal.tendsto_nat_tsum‚Çì'. -/
theorem tendsto_nat_tsum (f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû) :
    Tendsto (fun n : ‚Ñï => ‚àë i in Finset.range n, f i) atTop (ùìù (‚àë' n, f n)) :=
  by
  rw [‚Üê has_sum_iff_tendsto_nat]
  exact ennreal.summable.has_sum
#align ennreal.tendsto_nat_tsum ENNReal.tendsto_nat_tsum

/- warning: ennreal.to_nnreal_apply_of_tsum_ne_top -> ENNReal.toNNReal_apply_of_tsum_ne_top is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal}, (Ne.{1} ENNReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (i : Œ±) => f i)) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (forall (x : Œ±), Eq.{1} ENNReal ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) (Function.comp.{succ u1, 1, 1} Œ± ENNReal NNReal ENNReal.toNNReal f x)) (f x))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal}, (Ne.{1} ENNReal (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (i : Œ±) => f i)) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (forall (x : Œ±), Eq.{1} ENNReal (ENNReal.some (Function.comp.{succ u1, 1, 1} Œ± ENNReal NNReal ENNReal.toNNReal f x)) (f x))
Case conversion may be inaccurate. Consider using '#align ennreal.to_nnreal_apply_of_tsum_ne_top ENNReal.toNNReal_apply_of_tsum_ne_top‚Çì'. -/
theorem toNNReal_apply_of_tsum_ne_top {Œ± : Type _} {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hf : (‚àë' i, f i) ‚â† ‚àû) (x : Œ±) :
    (((ENNReal.toNNReal ‚àò f) x : ‚Ñù‚â•0) : ‚Ñù‚â•0‚àû) = f x :=
  coe_toNNReal <| ENNReal.ne_top_of_tsum_ne_top hf _
#align ennreal.to_nnreal_apply_of_tsum_ne_top ENNReal.toNNReal_apply_of_tsum_ne_top

/- warning: ennreal.summable_to_nnreal_of_tsum_ne_top -> ENNReal.summable_toNNReal_of_tsum_ne_top is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal}, (Ne.{1} ENNReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (i : Œ±) => f i)) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (Summable.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace (Function.comp.{succ u1, 1, 1} Œ± ENNReal NNReal ENNReal.toNNReal f))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal}, (Ne.{1} ENNReal (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (i : Œ±) => f i)) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (Summable.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal (Function.comp.{succ u1, 1, 1} Œ± ENNReal NNReal ENNReal.toNNReal f))
Case conversion may be inaccurate. Consider using '#align ennreal.summable_to_nnreal_of_tsum_ne_top ENNReal.summable_toNNReal_of_tsum_ne_top‚Çì'. -/
theorem summable_toNNReal_of_tsum_ne_top {Œ± : Type _} {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hf : (‚àë' i, f i) ‚â† ‚àû) :
    Summable (ENNReal.toNNReal ‚àò f) := by
  simpa only [‚Üê tsum_coe_ne_top_iff_summable, to_nnreal_apply_of_tsum_ne_top hf] using hf
#align ennreal.summable_to_nnreal_of_tsum_ne_top ENNReal.summable_toNNReal_of_tsum_ne_top

/- warning: ennreal.tendsto_cofinite_zero_of_tsum_ne_top -> ENNReal.tendsto_cofinite_zero_of_tsum_ne_top is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal}, (Ne.{1} ENNReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (x : Œ±) => f x)) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal f (Filter.cofinite.{u1} Œ±) (nhds.{0} ENNReal ENNReal.topologicalSpace (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal}, (Ne.{1} ENNReal (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (x : Œ±) => f x)) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (Filter.Tendsto.{u1, 0} Œ± ENNReal f (Filter.cofinite.{u1} Œ±) (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto_cofinite_zero_of_tsum_ne_top ENNReal.tendsto_cofinite_zero_of_tsum_ne_top‚Çì'. -/
theorem tendsto_cofinite_zero_of_tsum_ne_top {Œ±} {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hf : (‚àë' x, f x) ‚â† ‚àû) :
    Tendsto f cofinite (ùìù 0) :=
  by
  have f_ne_top : ‚àÄ n, f n ‚â† ‚àû := ENNReal.ne_top_of_tsum_ne_top hf
  have h_f_coe : f = fun n => ((f n).toNNReal : ENNReal) :=
    funext fun n => (coe_to_nnreal (f_ne_top n)).symm
  rw [h_f_coe, ‚Üê @coe_zero, tendsto_coe]
  exact NNReal.tendsto_cofinite_zero_of_summable (summable_to_nnreal_of_tsum_ne_top hf)
#align ennreal.tendsto_cofinite_zero_of_tsum_ne_top ENNReal.tendsto_cofinite_zero_of_tsum_ne_top

/- warning: ennreal.tendsto_at_top_zero_of_tsum_ne_top -> ENNReal.tendsto_atTop_zero_of_tsum_ne_top is a dubious translation:
lean 3 declaration is
  forall {f : Nat -> ENNReal}, (Ne.{1} ENNReal (tsum.{0, 0} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Nat (fun (x : Nat) => f x)) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (Filter.Tendsto.{0, 0} Nat ENNReal f (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (OrderedCancelAddCommMonoid.toPartialOrder.{0} Nat (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} Nat Nat.strictOrderedSemiring)))) (nhds.{0} ENNReal ENNReal.topologicalSpace (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))))
but is expected to have type
  forall {f : Nat -> ENNReal}, (Ne.{1} ENNReal (tsum.{0, 0} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Nat (fun (x : Nat) => f x)) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (Filter.Tendsto.{0, 0} Nat ENNReal f (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (StrictOrderedSemiring.toPartialOrder.{0} Nat Nat.strictOrderedSemiring))) (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto_at_top_zero_of_tsum_ne_top ENNReal.tendsto_atTop_zero_of_tsum_ne_top‚Çì'. -/
theorem tendsto_atTop_zero_of_tsum_ne_top {f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} (hf : (‚àë' x, f x) ‚â† ‚àû) :
    Tendsto f atTop (ùìù 0) := by
  rw [‚Üê Nat.cofinite_eq_atTop]
  exact tendsto_cofinite_zero_of_tsum_ne_top hf
#align ennreal.tendsto_at_top_zero_of_tsum_ne_top ENNReal.tendsto_atTop_zero_of_tsum_ne_top

/- warning: ennreal.tendsto_tsum_compl_at_top_zero -> ENNReal.tendsto_tsum_compl_atTop_zero is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal}, (Ne.{1} ENNReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (x : Œ±) => f x)) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (Filter.Tendsto.{u1, 0} (Finset.{u1} Œ±) ENNReal (fun (s : Finset.{u1} Œ±) => tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace (Subtype.{succ u1} Œ± (fun (x : Œ±) => Not (Membership.Mem.{u1, u1} Œ± (Finset.{u1} Œ±) (Finset.hasMem.{u1} Œ±) x s))) (fun (b : Subtype.{succ u1} Œ± (fun (x : Œ±) => Not (Membership.Mem.{u1, u1} Œ± (Finset.{u1} Œ±) (Finset.hasMem.{u1} Œ±) x s))) => f ((fun (a : Type.{u1}) (b : Type.{u1}) [self : HasLiftT.{succ u1, succ u1} a b] => self.0) (Subtype.{succ u1} Œ± (fun (x : Œ±) => Not (Membership.Mem.{u1, u1} Œ± (Finset.{u1} Œ±) (Finset.hasMem.{u1} Œ±) x s))) Œ± (HasLiftT.mk.{succ u1, succ u1} (Subtype.{succ u1} Œ± (fun (x : Œ±) => Not (Membership.Mem.{u1, u1} Œ± (Finset.{u1} Œ±) (Finset.hasMem.{u1} Œ±) x s))) Œ± (CoeTC‚Çì.coe.{succ u1, succ u1} (Subtype.{succ u1} Œ± (fun (x : Œ±) => Not (Membership.Mem.{u1, u1} Œ± (Finset.{u1} Œ±) (Finset.hasMem.{u1} Œ±) x s))) Œ± (coeBase.{succ u1, succ u1} (Subtype.{succ u1} Œ± (fun (x : Œ±) => Not (Membership.Mem.{u1, u1} Œ± (Finset.{u1} Œ±) (Finset.hasMem.{u1} Œ±) x s))) Œ± (coeSubtype.{succ u1} Œ± (fun (x : Œ±) => Not (Membership.Mem.{u1, u1} Œ± (Finset.{u1} Œ±) (Finset.hasMem.{u1} Œ±) x s)))))) b))) (Filter.atTop.{u1} (Finset.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Finset.{u1} Œ±) (Finset.partialOrder.{u1} Œ±))) (nhds.{0} ENNReal ENNReal.topologicalSpace (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal}, (Ne.{1} ENNReal (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (x : Œ±) => f x)) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (Filter.Tendsto.{u1, 0} (Finset.{u1} Œ±) ENNReal (fun (s : Finset.{u1} Œ±) => tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal (Subtype.{succ u1} Œ± (fun (x : Œ±) => Not (Membership.mem.{u1, u1} Œ± (Finset.{u1} Œ±) (Finset.instMembershipFinset.{u1} Œ±) x s))) (fun (b : Subtype.{succ u1} Œ± (fun (x : Œ±) => Not (Membership.mem.{u1, u1} Œ± (Finset.{u1} Œ±) (Finset.instMembershipFinset.{u1} Œ±) x s))) => f (Subtype.val.{succ u1} Œ± (fun (x : Œ±) => Not (Membership.mem.{u1, u1} Œ± (Finset.{u1} Œ±) (Finset.instMembershipFinset.{u1} Œ±) x s)) b))) (Filter.atTop.{u1} (Finset.{u1} Œ±) (PartialOrder.toPreorder.{u1} (Finset.{u1} Œ±) (Finset.partialOrder.{u1} Œ±))) (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto_tsum_compl_at_top_zero ENNReal.tendsto_tsum_compl_atTop_zero‚Çì'. -/
/-- The sum over the complement of a finset tends to `0` when the finset grows to cover the whole
space. This does not need a summability assumption, as otherwise all sums are zero. -/
theorem tendsto_tsum_compl_atTop_zero {Œ± : Type _} {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hf : (‚àë' x, f x) ‚â† ‚àû) :
    Tendsto (fun s : Finset Œ± => ‚àë' b : { x // x ‚àâ s }, f b) atTop (ùìù 0) :=
  by
  lift f to Œ± ‚Üí ‚Ñù‚â•0 using ENNReal.ne_top_of_tsum_ne_top hf
  convert ENNReal.tendsto_coe.2 (NNReal.tendsto_tsum_compl_atTop_zero f)
  ext1 s
  rw [ENNReal.coe_tsum]
  exact NNReal.summable_comp_injective (tsum_coe_ne_top_iff_summable.1 hf) Subtype.coe_injective
#align ennreal.tendsto_tsum_compl_at_top_zero ENNReal.tendsto_tsum_compl_atTop_zero

/- warning: ennreal.tsum_apply -> ENNReal.tsum_apply is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {Œ± : Type.{u2}} {f : Œπ -> Œ± -> ENNReal} {x : Œ±}, Eq.{1} ENNReal (tsum.{u2, u1} (Œ± -> ENNReal) (Pi.addCommMonoid.{u2, 0} Œ± (fun (·æ∞ : Œ±) => ENNReal) (fun (i : Œ±) => OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring))))) (Pi.topologicalSpace.{u2, 0} Œ± (fun (·æ∞ : Œ±) => ENNReal) (fun (a : Œ±) => ENNReal.topologicalSpace)) Œπ (fun (i : Œπ) => f i) x) (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œπ (fun (i : Œπ) => f i x))
but is expected to have type
  forall {Œπ : Type.{u2}} {Œ± : Type.{u1}} {f : Œπ -> Œ± -> ENNReal} {x : Œ±}, Eq.{1} ENNReal (tsum.{u1, u2} (Œ± -> ENNReal) (Pi.addCommMonoid.{u1, 0} Œ± (fun (·æ∞ : Œ±) => ENNReal) (fun (i : Œ±) => LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal))) (Pi.topologicalSpace.{u1, 0} Œ± (fun (·æ∞ : Œ±) => ENNReal) (fun (a : Œ±) => ENNReal.instTopologicalSpaceENNReal)) Œπ (fun (i : Œπ) => f i) x) (tsum.{0, u2} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œπ (fun (i : Œπ) => f i x))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_apply ENNReal.tsum_apply‚Çì'. -/
protected theorem tsum_apply {Œπ Œ± : Type _} {f : Œπ ‚Üí Œ± ‚Üí ‚Ñù‚â•0‚àû} {x : Œ±} :
    (‚àë' i, f i) x = ‚àë' i, f i x :=
  tsum_apply <| Pi.summable.mpr fun _ => ENNReal.summable
#align ennreal.tsum_apply ENNReal.tsum_apply

/- warning: ennreal.tsum_sub -> ENNReal.tsum_sub is a dubious translation:
lean 3 declaration is
  forall {f : Nat -> ENNReal} {g : Nat -> ENNReal}, (Ne.{1} ENNReal (tsum.{0, 0} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Nat (fun (i : Nat) => g i)) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (LE.le.{0} (Nat -> ENNReal) (Pi.hasLe.{0, 0} Nat (fun (·æ∞ : Nat) => ENNReal) (fun (i : Nat) => Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))))) g f) -> (Eq.{1} ENNReal (tsum.{0, 0} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Nat (fun (i : Nat) => HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.hasSub) (f i) (g i))) (HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.hasSub) (tsum.{0, 0} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Nat (fun (i : Nat) => f i)) (tsum.{0, 0} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Nat (fun (i : Nat) => g i))))
but is expected to have type
  forall {f : Nat -> ENNReal} {g : Nat -> ENNReal}, (Ne.{1} ENNReal (tsum.{0, 0} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Nat (fun (i : Nat) => g i)) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (LE.le.{0} (Nat -> ENNReal) (Pi.hasLe.{0, 0} Nat (fun (·æ∞ : Nat) => ENNReal) (fun (i : Nat) => Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))))) g f) -> (Eq.{1} ENNReal (tsum.{0, 0} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Nat (fun (i : Nat) => HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.instSub) (f i) (g i))) (HSub.hSub.{0, 0, 0} ENNReal ENNReal ENNReal (instHSub.{0} ENNReal ENNReal.instSub) (tsum.{0, 0} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Nat (fun (i : Nat) => f i)) (tsum.{0, 0} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Nat (fun (i : Nat) => g i))))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_sub ENNReal.tsum_sub‚Çì'. -/
theorem tsum_sub {f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} {g : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} (h‚ÇÅ : (‚àë' i, g i) ‚â† ‚àû) (h‚ÇÇ : g ‚â§ f) :
    (‚àë' i, f i - g i) = (‚àë' i, f i) - ‚àë' i, g i :=
  by
  have h‚ÇÉ : (‚àë' i, f i - g i) = (‚àë' i, f i - g i + g i) - ‚àë' i, g i := by
    rw [ENNReal.tsum_add, ENNReal.add_sub_cancel_right h‚ÇÅ]
  have h‚ÇÑ : (fun i => f i - g i + g i) = f := by
    ext n
    rw [tsub_add_cancel_of_le (h‚ÇÇ n)]
  rw [h‚ÇÑ] at h‚ÇÉ
  apply h‚ÇÉ
#align ennreal.tsum_sub ENNReal.tsum_sub

/- warning: ennreal.tsum_mono_subtype -> ENNReal.tsum_mono_subtype is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} (f : Œ± -> ENNReal) {s : Set.{u1} Œ±} {t : Set.{u1} Œ±}, (HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.hasSubset.{u1} Œ±) s t) -> (LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) s) (fun (x : coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) s) => f ((fun (a : Type.{u1}) (b : Type.{u1}) [self : HasLiftT.{succ u1, succ u1} a b] => self.0) (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) s) Œ± (HasLiftT.mk.{succ u1, succ u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) s) Œ± (CoeTC‚Çì.coe.{succ u1, succ u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) s) Œ± (coeBase.{succ u1, succ u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) s) Œ± (coeSubtype.{succ u1} Œ± (fun (x : Œ±) => Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x s))))) x))) (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) t) (fun (x : coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) t) => f ((fun (a : Type.{u1}) (b : Type.{u1}) [self : HasLiftT.{succ u1, succ u1} a b] => self.0) (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) t) Œ± (HasLiftT.mk.{succ u1, succ u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) t) Œ± (CoeTC‚Çì.coe.{succ u1, succ u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) t) Œ± (coeBase.{succ u1, succ u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) t) Œ± (coeSubtype.{succ u1} Œ± (fun (x : Œ±) => Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x t))))) x))))
but is expected to have type
  forall {Œ± : Type.{u1}} (f : Œ± -> ENNReal) {s : Set.{u1} Œ±} {t : Set.{u1} Œ±}, (HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.instHasSubsetSet.{u1} Œ±) s t) -> (LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal (Set.Elem.{u1} Œ± s) (fun (x : Set.Elem.{u1} Œ± s) => f (Subtype.val.{succ u1} Œ± (fun (x : Œ±) => Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x s) x))) (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal (Set.Elem.{u1} Œ± t) (fun (x : Set.Elem.{u1} Œ± t) => f (Subtype.val.{succ u1} Œ± (fun (x : Œ±) => Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x t) x))))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_mono_subtype ENNReal.tsum_mono_subtype‚Çì'. -/
theorem tsum_mono_subtype (f : Œ± ‚Üí ‚Ñù‚â•0‚àû) {s t : Set Œ±} (h : s ‚äÜ t) :
    (‚àë' x : s, f x) ‚â§ ‚àë' x : t, f x :=
  by
  simp only [tsum_subtype]
  apply ENNReal.tsum_le_tsum
  exact indicator_le_indicator_of_subset h fun _ => zero_le _
#align ennreal.tsum_mono_subtype ENNReal.tsum_mono_subtype

/- warning: ennreal.tsum_union_le -> ENNReal.tsum_union_le is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} (f : Œ± -> ENNReal) (s : Set.{u1} Œ±) (t : Set.{u1} Œ±), LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (Union.union.{u1} (Set.{u1} Œ±) (Set.hasUnion.{u1} Œ±) s t)) (fun (x : coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (Union.union.{u1} (Set.{u1} Œ±) (Set.hasUnion.{u1} Œ±) s t)) => f ((fun (a : Type.{u1}) (b : Type.{u1}) [self : HasLiftT.{succ u1, succ u1} a b] => self.0) (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (Union.union.{u1} (Set.{u1} Œ±) (Set.hasUnion.{u1} Œ±) s t)) Œ± (HasLiftT.mk.{succ u1, succ u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (Union.union.{u1} (Set.{u1} Œ±) (Set.hasUnion.{u1} Œ±) s t)) Œ± (CoeTC‚Çì.coe.{succ u1, succ u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (Union.union.{u1} (Set.{u1} Œ±) (Set.hasUnion.{u1} Œ±) s t)) Œ± (coeBase.{succ u1, succ u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (Union.union.{u1} (Set.{u1} Œ±) (Set.hasUnion.{u1} Œ±) s t)) Œ± (coeSubtype.{succ u1} Œ± (fun (x : Œ±) => Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x (Union.union.{u1} (Set.{u1} Œ±) (Set.hasUnion.{u1} Œ±) s t)))))) x))) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) s) (fun (x : coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) s) => f ((fun (a : Type.{u1}) (b : Type.{u1}) [self : HasLiftT.{succ u1, succ u1} a b] => self.0) (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) s) Œ± (HasLiftT.mk.{succ u1, succ u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) s) Œ± (CoeTC‚Çì.coe.{succ u1, succ u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) s) Œ± (coeBase.{succ u1, succ u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) s) Œ± (coeSubtype.{succ u1} Œ± (fun (x : Œ±) => Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x s))))) x))) (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) t) (fun (x : coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) t) => f ((fun (a : Type.{u1}) (b : Type.{u1}) [self : HasLiftT.{succ u1, succ u1} a b] => self.0) (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) t) Œ± (HasLiftT.mk.{succ u1, succ u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) t) Œ± (CoeTC‚Çì.coe.{succ u1, succ u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) t) Œ± (coeBase.{succ u1, succ u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) t) Œ± (coeSubtype.{succ u1} Œ± (fun (x : Œ±) => Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x t))))) x))))
but is expected to have type
  forall {Œ± : Type.{u1}} (f : Œ± -> ENNReal) (s : Set.{u1} Œ±) (t : Set.{u1} Œ±), LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal (Set.Elem.{u1} Œ± (Union.union.{u1} (Set.{u1} Œ±) (Set.instUnionSet.{u1} Œ±) s t)) (fun (x : Set.Elem.{u1} Œ± (Union.union.{u1} (Set.{u1} Œ±) (Set.instUnionSet.{u1} Œ±) s t)) => f (Subtype.val.{succ u1} Œ± (fun (x : Œ±) => Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x (Union.union.{u1} (Set.{u1} Œ±) (Set.instUnionSet.{u1} Œ±) s t)) x))) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal (Set.Elem.{u1} Œ± s) (fun (x : Set.Elem.{u1} Œ± s) => f (Subtype.val.{succ u1} Œ± (fun (x : Œ±) => Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x s) x))) (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal (Set.Elem.{u1} Œ± t) (fun (x : Set.Elem.{u1} Œ± t) => f (Subtype.val.{succ u1} Œ± (fun (x : Œ±) => Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x t) x))))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_union_le ENNReal.tsum_union_le‚Çì'. -/
theorem tsum_union_le (f : Œ± ‚Üí ‚Ñù‚â•0‚àû) (s t : Set Œ±) :
    (‚àë' x : s ‚à™ t, f x) ‚â§ (‚àë' x : s, f x) + ‚àë' x : t, f x :=
  calc
    (‚àë' x : s ‚à™ t, f x) = ‚àë' x : s ‚à™ t \ s, f x :=
      by
      apply tsum_congr_subtype
      rw [union_diff_self]
    _ = (‚àë' x : s, f x) + ‚àë' x : t \ s, f x :=
      (tsum_union_disjoint disjoint_sdiff_self_right ENNReal.summable ENNReal.summable)
    _ ‚â§ (‚àë' x : s, f x) + ‚àë' x : t, f x := add_le_add le_rfl (tsum_mono_subtype _ (diff_subset _ _))
    
#align ennreal.tsum_union_le ENNReal.tsum_union_le

/- warning: ennreal.tsum_bUnion_le -> ENNReal.tsum_biUnion_le is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œπ : Type.{u2}} (f : Œ± -> ENNReal) (s : Finset.{u2} Œπ) (t : Œπ -> (Set.{u1} Œ±)), LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (Set.iUnion.{u1, succ u2} Œ± Œπ (fun (i : Œπ) => Set.iUnion.{u1, 0} Œ± (Membership.Mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.hasMem.{u2} Œπ) i s) (fun (H : Membership.Mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.hasMem.{u2} Œπ) i s) => t i)))) (fun (x : coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (Set.iUnion.{u1, succ u2} Œ± Œπ (fun (i : Œπ) => Set.iUnion.{u1, 0} Œ± (Membership.Mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.hasMem.{u2} Œπ) i s) (fun (H : Membership.Mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.hasMem.{u2} Œπ) i s) => t i)))) => f ((fun (a : Type.{u1}) (b : Type.{u1}) [self : HasLiftT.{succ u1, succ u1} a b] => self.0) (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (Set.iUnion.{u1, succ u2} Œ± Œπ (fun (i : Œπ) => Set.iUnion.{u1, 0} Œ± (Membership.Mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.hasMem.{u2} Œπ) i s) (fun (H : Membership.Mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.hasMem.{u2} Œπ) i s) => t i)))) Œ± (HasLiftT.mk.{succ u1, succ u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (Set.iUnion.{u1, succ u2} Œ± Œπ (fun (i : Œπ) => Set.iUnion.{u1, 0} Œ± (Membership.Mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.hasMem.{u2} Œπ) i s) (fun (H : Membership.Mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.hasMem.{u2} Œπ) i s) => t i)))) Œ± (CoeTC‚Çì.coe.{succ u1, succ u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (Set.iUnion.{u1, succ u2} Œ± Œπ (fun (i : Œπ) => Set.iUnion.{u1, 0} Œ± (Membership.Mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.hasMem.{u2} Œπ) i s) (fun (H : Membership.Mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.hasMem.{u2} Œπ) i s) => t i)))) Œ± (coeBase.{succ u1, succ u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (Set.iUnion.{u1, succ u2} Œ± Œπ (fun (i : Œπ) => Set.iUnion.{u1, 0} Œ± (Membership.Mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.hasMem.{u2} Œπ) i s) (fun (H : Membership.Mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.hasMem.{u2} Œπ) i s) => t i)))) Œ± (coeSubtype.{succ u1} Œ± (fun (x : Œ±) => Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x (Set.iUnion.{u1, succ u2} Œ± Œπ (fun (i : Œπ) => Set.iUnion.{u1, 0} Œ± (Membership.Mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.hasMem.{u2} Œπ) i s) (fun (H : Membership.Mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.hasMem.{u2} Œπ) i s) => t i)))))))) x))) (Finset.sum.{0, u2} ENNReal Œπ (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) s (fun (i : Œπ) => tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (t i)) (fun (x : coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (t i)) => f ((fun (a : Type.{u1}) (b : Type.{u1}) [self : HasLiftT.{succ u1, succ u1} a b] => self.0) (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (t i)) Œ± (HasLiftT.mk.{succ u1, succ u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (t i)) Œ± (CoeTC‚Çì.coe.{succ u1, succ u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (t i)) Œ± (coeBase.{succ u1, succ u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (t i)) Œ± (coeSubtype.{succ u1} Œ± (fun (x : Œ±) => Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x (t i)))))) x))))
but is expected to have type
  forall {Œ± : Type.{u1}} {Œπ : Type.{u2}} (f : Œ± -> ENNReal) (s : Finset.{u2} Œπ) (t : Œπ -> (Set.{u1} Œ±)), LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal (Set.Elem.{u1} Œ± (Set.iUnion.{u1, succ u2} Œ± Œπ (fun (i : Œπ) => Set.iUnion.{u1, 0} Œ± (Membership.mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.instMembershipFinset.{u2} Œπ) i s) (fun (H : Membership.mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.instMembershipFinset.{u2} Œπ) i s) => t i)))) (fun (x : Set.Elem.{u1} Œ± (Set.iUnion.{u1, succ u2} Œ± Œπ (fun (i : Œπ) => Set.iUnion.{u1, 0} Œ± (Membership.mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.instMembershipFinset.{u2} Œπ) i s) (fun (H : Membership.mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.instMembershipFinset.{u2} Œπ) i s) => t i)))) => f (Subtype.val.{succ u1} Œ± (fun (x : Œ±) => Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x (Set.iUnion.{u1, succ u2} Œ± Œπ (fun (i : Œπ) => Set.iUnion.{u1, 0} Œ± (Membership.mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.instMembershipFinset.{u2} Œπ) i s) (fun (h._@.Mathlib.Topology.Instances.ENNReal._hyg.21608 : Membership.mem.{u2, u2} Œπ (Finset.{u2} Œπ) (Finset.instMembershipFinset.{u2} Œπ) i s) => t i)))) x))) (Finset.sum.{0, u2} ENNReal Œπ (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) s (fun (i : Œπ) => tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal (Set.Elem.{u1} Œ± (t i)) (fun (x : Set.Elem.{u1} Œ± (t i)) => f (Subtype.val.{succ u1} Œ± (fun (x : Œ±) => Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x (t i)) x))))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_bUnion_le ENNReal.tsum_biUnion_le‚Çì'. -/
theorem tsum_biUnion_le {Œπ : Type _} (f : Œ± ‚Üí ‚Ñù‚â•0‚àû) (s : Finset Œπ) (t : Œπ ‚Üí Set Œ±) :
    (‚àë' x : ‚ãÉ i ‚àà s, t i, f x) ‚â§ ‚àë i in s, ‚àë' x : t i, f x := by
  classical
    induction' s using Finset.induction_on with i s hi ihs h
    ¬∑ simp
    have : (‚ãÉ j ‚àà insert i s, t j) = t i ‚à™ ‚ãÉ j ‚àà s, t j := by simp
    rw [tsum_congr_subtype f this]
    calc
      (‚àë' x : t i ‚à™ ‚ãÉ j ‚àà s, t j, f x) ‚â§ (‚àë' x : t i, f x) + ‚àë' x : ‚ãÉ j ‚àà s, t j, f x :=
        tsum_union_le _ _ _
      _ ‚â§ (‚àë' x : t i, f x) + ‚àë i in s, ‚àë' x : t i, f x := (add_le_add le_rfl ihs)
      _ = ‚àë j in insert i s, ‚àë' x : t j, f x := (Finset.sum_insert hi).symm
      
#align ennreal.tsum_bUnion_le ENNReal.tsum_biUnion_le

/- warning: ennreal.tsum_Union_le -> ENNReal.tsum_iUnion_le is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œπ : Type.{u2}} [_inst_1 : Fintype.{u2} Œπ] (f : Œ± -> ENNReal) (t : Œπ -> (Set.{u1} Œ±)), LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (Set.iUnion.{u1, succ u2} Œ± Œπ (fun (i : Œπ) => t i))) (fun (x : coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (Set.iUnion.{u1, succ u2} Œ± Œπ (fun (i : Œπ) => t i))) => f ((fun (a : Type.{u1}) (b : Type.{u1}) [self : HasLiftT.{succ u1, succ u1} a b] => self.0) (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (Set.iUnion.{u1, succ u2} Œ± Œπ (fun (i : Œπ) => t i))) Œ± (HasLiftT.mk.{succ u1, succ u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (Set.iUnion.{u1, succ u2} Œ± Œπ (fun (i : Œπ) => t i))) Œ± (CoeTC‚Çì.coe.{succ u1, succ u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (Set.iUnion.{u1, succ u2} Œ± Œπ (fun (i : Œπ) => t i))) Œ± (coeBase.{succ u1, succ u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (Set.iUnion.{u1, succ u2} Œ± Œπ (fun (i : Œπ) => t i))) Œ± (coeSubtype.{succ u1} Œ± (fun (x : Œ±) => Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x (Set.iUnion.{u1, succ u2} Œ± Œπ (fun (i : Œπ) => t i))))))) x))) (Finset.sum.{0, u2} ENNReal Œπ (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) (Finset.univ.{u2} Œπ _inst_1) (fun (i : Œπ) => tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (t i)) (fun (x : coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (t i)) => f ((fun (a : Type.{u1}) (b : Type.{u1}) [self : HasLiftT.{succ u1, succ u1} a b] => self.0) (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (t i)) Œ± (HasLiftT.mk.{succ u1, succ u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (t i)) Œ± (CoeTC‚Çì.coe.{succ u1, succ u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (t i)) Œ± (coeBase.{succ u1, succ u1} (coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ±) Type.{u1} (Set.hasCoeToSort.{u1} Œ±) (t i)) Œ± (coeSubtype.{succ u1} Œ± (fun (x : Œ±) => Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x (t i)))))) x))))
but is expected to have type
  forall {Œ± : Type.{u1}} {Œπ : Type.{u2}} [_inst_1 : Fintype.{u2} Œπ] (f : Œ± -> ENNReal) (t : Œπ -> (Set.{u1} Œ±)), LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal (Set.Elem.{u1} Œ± (Set.iUnion.{u1, succ u2} Œ± Œπ (fun (i : Œπ) => t i))) (fun (x : Set.Elem.{u1} Œ± (Set.iUnion.{u1, succ u2} Œ± Œπ (fun (i : Œπ) => t i))) => f (Subtype.val.{succ u1} Œ± (fun (x : Œ±) => Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x (Set.iUnion.{u1, succ u2} Œ± Œπ (fun (i : Œπ) => t i))) x))) (Finset.sum.{0, u2} ENNReal Œπ (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) (Finset.univ.{u2} Œπ _inst_1) (fun (i : Œπ) => tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal (Set.Elem.{u1} Œ± (t i)) (fun (x : Set.Elem.{u1} Œ± (t i)) => f (Subtype.val.{succ u1} Œ± (fun (x : Œ±) => Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x (t i)) x))))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_Union_le ENNReal.tsum_iUnion_le‚Çì'. -/
theorem tsum_iUnion_le {Œπ : Type _} [Fintype Œπ] (f : Œ± ‚Üí ‚Ñù‚â•0‚àû) (t : Œπ ‚Üí Set Œ±) :
    (‚àë' x : ‚ãÉ i, t i, f x) ‚â§ ‚àë i, ‚àë' x : t i, f x := by
  classical
    have : (‚ãÉ i, t i) = ‚ãÉ i ‚àà (Finset.univ : Finset Œπ), t i := by simp
    rw [tsum_congr_subtype f this]
    exact tsum_bUnion_le _ _ _
#align ennreal.tsum_Union_le ENNReal.tsum_iUnion_le

/- warning: ennreal.tsum_eq_add_tsum_ite -> ENNReal.tsum_eq_add_tsum_ite is a dubious translation:
lean 3 declaration is
  forall {Œ≤ : Type.{u1}} {f : Œ≤ -> ENNReal} (b : Œ≤), Eq.{1} ENNReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ≤ (fun (x : Œ≤) => f x)) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (f b) (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ≤ (fun (x : Œ≤) => ite.{1} ENNReal (Eq.{succ u1} Œ≤ x b) (Classical.propDecidable (Eq.{succ u1} Œ≤ x b)) (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero))) (f x))))
but is expected to have type
  forall {Œ≤ : Type.{u1}} {f : Œ≤ -> ENNReal} (b : Œ≤), Eq.{1} ENNReal (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ≤ (fun (x : Œ≤) => f x)) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) (f b) (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ≤ (fun (x : Œ≤) => ite.{1} ENNReal (Eq.{succ u1} Œ≤ x b) (Classical.propDecidable (Eq.{succ u1} Œ≤ x b)) (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero)) (f x))))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_eq_add_tsum_ite ENNReal.tsum_eq_add_tsum_ite‚Çì'. -/
theorem tsum_eq_add_tsum_ite {f : Œ≤ ‚Üí ‚Ñù‚â•0‚àû} (b : Œ≤) :
    (‚àë' x, f x) = f b + ‚àë' x, ite (x = b) 0 (f x) :=
  tsum_eq_add_tsum_ite' b ENNReal.summable
#align ennreal.tsum_eq_add_tsum_ite ENNReal.tsum_eq_add_tsum_ite

/- warning: ennreal.tsum_add_one_eq_top -> ENNReal.tsum_add_one_eq_top is a dubious translation:
lean 3 declaration is
  forall {f : Nat -> ENNReal}, (Eq.{1} ENNReal (tsum.{0, 0} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Nat (fun (n : Nat) => f n)) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (Ne.{1} ENNReal (f (OfNat.ofNat.{0} Nat 0 (OfNat.mk.{0} Nat 0 (Zero.zero.{0} Nat Nat.hasZero)))) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (Eq.{1} ENNReal (tsum.{0, 0} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Nat (fun (n : Nat) => f (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n (OfNat.ofNat.{0} Nat 1 (OfNat.mk.{0} Nat 1 (One.one.{0} Nat Nat.hasOne)))))) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))
but is expected to have type
  forall {f : Nat -> ENNReal}, (Eq.{1} ENNReal (tsum.{0, 0} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Nat (fun (n : Nat) => f n)) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (Ne.{1} ENNReal (f (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (Eq.{1} ENNReal (tsum.{0, 0} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Nat (fun (n : Nat) => f (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n (OfNat.ofNat.{0} Nat 1 (instOfNatNat 1))))) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_add_one_eq_top ENNReal.tsum_add_one_eq_top‚Çì'. -/
theorem tsum_add_one_eq_top {f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} (hf : (‚àë' n, f n) = ‚àû) (hf0 : f 0 ‚â† ‚àû) :
    (‚àë' n, f (n + 1)) = ‚àû :=
  by
  rw [‚Üê tsum_eq_tsum_of_hasSum_iff_hasSum fun _ => (notMemRangeEquiv 1).hasSum_iff]
  swap
  ¬∑ infer_instance
  have h‚ÇÅ :
    ((‚àë' b : { n // n ‚àà Finset.range 1 }, f b) + ‚àë' b : { n // n ‚àâ Finset.range 1 }, f b) =
      ‚àë' b, f b :=
    tsum_add_tsum_compl ENNReal.summable ENNReal.summable
  rw [Finset.tsum_subtype, Finset.sum_range_one, hf, ENNReal.add_eq_top] at h‚ÇÅ
  rw [‚Üê h‚ÇÅ.resolve_left hf0]
  apply tsum_congr
  rintro ‚ü®i, hi‚ü©
  simp only [Multiset.mem_range, not_lt] at hi
  simp only [tsub_add_cancel_of_le hi, coe_notMemRangeEquiv, Function.comp_apply, Subtype.coe_mk]
#align ennreal.tsum_add_one_eq_top ENNReal.tsum_add_one_eq_top

/- warning: ennreal.finite_const_le_of_tsum_ne_top -> ENNReal.finite_const_le_of_tsum_ne_top is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {a : Œπ -> ENNReal}, (Ne.{1} ENNReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œπ (fun (i : Œπ) => a i)) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (forall {Œµ : ENNReal}, (Ne.{1} ENNReal Œµ (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) -> (Set.Finite.{u1} Œπ (setOf.{u1} Œπ (fun (i : Œπ) => LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) Œµ (a i)))))
but is expected to have type
  forall {Œπ : Type.{u1}} {a : Œπ -> ENNReal}, (Ne.{1} ENNReal (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œπ (fun (i : Œπ) => a i)) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (forall {Œµ : ENNReal}, (Ne.{1} ENNReal Œµ (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) -> (Set.Finite.{u1} Œπ (setOf.{u1} Œπ (fun (i : Œπ) => LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) Œµ (a i)))))
Case conversion may be inaccurate. Consider using '#align ennreal.finite_const_le_of_tsum_ne_top ENNReal.finite_const_le_of_tsum_ne_top‚Çì'. -/
/-- A sum of extended nonnegative reals which is finite can have only finitely many terms
above any positive threshold.-/
theorem finite_const_le_of_tsum_ne_top {Œπ : Type _} {a : Œπ ‚Üí ‚Ñù‚â•0‚àû} (tsum_ne_top : (‚àë' i, a i) ‚â† ‚àû)
    {Œµ : ‚Ñù‚â•0‚àû} (Œµ_ne_zero : Œµ ‚â† 0) : { i : Œπ | Œµ ‚â§ a i }.Finite :=
  by
  by_cases Œµ_infty : Œµ = ‚àû
  ¬∑ rw [Œµ_infty]
    by_contra maybe_infinite
    obtain ‚ü®j, hj‚ü© := Set.Infinite.nonempty maybe_infinite
    exact tsum_ne_top (le_antisymm le_top (le_trans hj (le_tsum' (@ENNReal.summable _ a) j)))
  have key :=
    (nnreal.summable_coe.mpr (summable_to_nnreal_of_tsum_ne_top tsum_ne_top)).tendsto_cofinite_zero
      (Iio_mem_nhds (to_real_pos Œµ_ne_zero Œµ_infty))
  simp only [Filter.mem_map, Filter.mem_cofinite, preimage] at key
  have obs : { i : Œπ | ‚Üë(a i).toNNReal ‚àà Iio Œµ.to_real }·∂ú = { i : Œπ | Œµ ‚â§ a i } :=
    by
    ext i
    simpa only [mem_Iio, mem_compl_iff, mem_set_of_eq, not_lt] using
      to_real_le_to_real Œµ_infty (ENNReal.ne_top_of_tsum_ne_top tsum_ne_top _)
  rwa [obs] at key
#align ennreal.finite_const_le_of_tsum_ne_top ENNReal.finite_const_le_of_tsum_ne_top

/- warning: ennreal.finset_card_const_le_le_of_tsum_le -> ENNReal.finset_card_const_le_le_of_tsum_le is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {a : Œπ -> ENNReal} {c : ENNReal}, (Ne.{1} ENNReal c (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œπ (fun (i : Œπ) => a i)) c) -> (forall {Œµ : ENNReal}, (Ne.{1} ENNReal Œµ (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) -> (Exists.{0} (Set.Finite.{u1} Œπ (setOf.{u1} Œπ (fun (i : Œπ) => LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) Œµ (a i)))) (fun (hf : Set.Finite.{u1} Œπ (setOf.{u1} Œπ (fun (i : Œπ) => LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) Œµ (a i)))) => LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) Nat ENNReal (HasLiftT.mk.{1, 1} Nat ENNReal (CoeTC‚Çì.coe.{1, 1} Nat ENNReal (Nat.castCoe.{0} ENNReal (AddMonoidWithOne.toNatCast.{0} ENNReal (AddCommMonoidWithOne.toAddMonoidWithOne.{0} ENNReal ENNReal.addCommMonoidWithOne))))) (Finset.card.{u1} Œπ (Set.Finite.toFinset.{u1} Œπ (setOf.{u1} Œπ (fun (i : Œπ) => LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) Œµ (a i))) hf))) (HDiv.hDiv.{0, 0, 0} ENNReal ENNReal ENNReal (instHDiv.{0} ENNReal (DivInvMonoid.toHasDiv.{0} ENNReal ENNReal.divInvMonoid)) c Œµ))))
but is expected to have type
  forall {Œπ : Type.{u1}} {a : Œπ -> ENNReal} {c : ENNReal}, (Ne.{1} ENNReal c (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œπ (fun (i : Œπ) => a i)) c) -> (forall {Œµ : ENNReal}, (Ne.{1} ENNReal Œµ (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) -> (Exists.{0} (Set.Finite.{u1} Œπ (setOf.{u1} Œπ (fun (i : Œπ) => LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) Œµ (a i)))) (fun (hf : Set.Finite.{u1} Œπ (setOf.{u1} Œπ (fun (i : Œπ) => LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) Œµ (a i)))) => LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (Nat.cast.{0} ENNReal (CanonicallyOrderedCommSemiring.toNatCast.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal) (Finset.card.{u1} Œπ (Set.Finite.toFinset.{u1} Œπ (setOf.{u1} Œπ (fun (i : Œπ) => LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) Œµ (a i))) hf))) (HDiv.hDiv.{0, 0, 0} ENNReal ENNReal ENNReal (instHDiv.{0} ENNReal (DivInvMonoid.toDiv.{0} ENNReal ENNReal.instDivInvMonoidENNReal)) c Œµ))))
Case conversion may be inaccurate. Consider using '#align ennreal.finset_card_const_le_le_of_tsum_le ENNReal.finset_card_const_le_le_of_tsum_le‚Çì'. -/
/-- Markov's inequality for `finset.card` and `tsum` in `‚Ñù‚â•0‚àû`. -/
theorem finset_card_const_le_le_of_tsum_le {Œπ : Type _} {a : Œπ ‚Üí ‚Ñù‚â•0‚àû} {c : ‚Ñù‚â•0‚àû} (c_ne_top : c ‚â† ‚àû)
    (tsum_le_c : (‚àë' i, a i) ‚â§ c) {Œµ : ‚Ñù‚â•0‚àû} (Œµ_ne_zero : Œµ ‚â† 0) :
    ‚àÉ hf : { i : Œπ | Œµ ‚â§ a i }.Finite, ‚Üëhf.toFinset.card ‚â§ c / Œµ :=
  by
  by_cases Œµ = ‚àû
  ¬∑ have obs : { i : Œπ | Œµ ‚â§ a i } = ‚àÖ :=
      by
      rw [eq_empty_iff_forall_not_mem]
      intro i hi
      have oops := (le_trans hi (le_tsum' (@ENNReal.summable _ a) i)).trans tsum_le_c
      rw [h] at oops
      exact c_ne_top (le_antisymm le_top oops)
    simp only [obs, finite_empty, finite.to_finset_empty, Finset.card_empty, algebraMap.coe_zero,
      zero_le', exists_true_left]
  have hf : { i : Œπ | Œµ ‚â§ a i }.Finite :=
    ENNReal.finite_const_le_of_tsum_ne_top (lt_of_le_of_lt tsum_le_c c_ne_top.lt_top).Ne Œµ_ne_zero
  use hf
  have at_least : ‚àÄ i ‚àà hf.to_finset, Œµ ‚â§ a i :=
    by
    intro i hi
    simpa only [finite.mem_to_finset, mem_set_of_eq] using hi
  have partial_sum :=
    @sum_le_tsum _ _ _ _ _ a hf.to_finset (fun _ _ => zero_le') (@ENNReal.summable _ a)
  have lower_bound := Finset.sum_le_sum at_least
  simp only [Finset.sum_const, nsmul_eq_mul] at lower_bound
  have key := (ENNReal.le_div_iff_mul_le (Or.inl Œµ_ne_zero) (Or.inl h)).mpr lower_bound
  exact le_trans key (ENNReal.div_le_div_right (partial_sum.trans tsum_le_c) _)
#align ennreal.finset_card_const_le_le_of_tsum_le ENNReal.finset_card_const_le_le_of_tsum_le

end tsum

/- warning: ennreal.tendsto_to_real_iff -> ENNReal.tendsto_toReal_iff is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {fi : Filter.{u1} Œπ} {f : Œπ -> ENNReal}, (forall (i : Œπ), Ne.{1} ENNReal (f i) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (forall {x : ENNReal}, (Ne.{1} ENNReal x (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (Iff (Filter.Tendsto.{u1, 0} Œπ Real (fun (n : Œπ) => ENNReal.toReal (f n)) fi (nhds.{0} Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (ENNReal.toReal x))) (Filter.Tendsto.{u1, 0} Œπ ENNReal f fi (nhds.{0} ENNReal ENNReal.topologicalSpace x))))
but is expected to have type
  forall {Œπ : Type.{u1}} {fi : Filter.{u1} Œπ} {f : Œπ -> ENNReal}, (forall (i : Œπ), Ne.{1} ENNReal (f i) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (forall {x : ENNReal}, (Ne.{1} ENNReal x (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (Iff (Filter.Tendsto.{u1, 0} Œπ Real (fun (n : Œπ) => ENNReal.toReal (f n)) fi (nhds.{0} Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (ENNReal.toReal x))) (Filter.Tendsto.{u1, 0} Œπ ENNReal f fi (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal x))))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto_to_real_iff ENNReal.tendsto_toReal_iff‚Çì'. -/
theorem tendsto_toReal_iff {Œπ} {fi : Filter Œπ} {f : Œπ ‚Üí ‚Ñù‚â•0‚àû} (hf : ‚àÄ i, f i ‚â† ‚àû) {x : ‚Ñù‚â•0‚àû}
    (hx : x ‚â† ‚àû) : fi.Tendsto (fun n => (f n).toReal) (ùìù x.toReal) ‚Üî fi.Tendsto f (ùìù x) :=
  by
  refine' ‚ü®fun h => _, fun h => tendsto.comp (ENNReal.tendsto_toReal hx) h‚ü©
  have h_eq : f = fun n => ENNReal.ofReal (f n).toReal :=
    by
    ext1 n
    rw [ENNReal.ofReal_toReal (hf n)]
  rw [h_eq, ‚Üê ENNReal.ofReal_toReal hx]
  exact ENNReal.tendsto_ofReal h
#align ennreal.tendsto_to_real_iff ENNReal.tendsto_toReal_iff

/- warning: ennreal.tsum_coe_ne_top_iff_summable_coe -> ENNReal.tsum_coe_ne_top_iff_summable_coe is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> NNReal}, Iff (Ne.{1} ENNReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (a : Œ±) => (fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) (f a))) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) (Summable.{0, u1} Real Œ± Real.addCommMonoid (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (fun (a : Œ±) => (fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal Real (HasLiftT.mk.{1, 1} NNReal Real (CoeTC‚Çì.coe.{1, 1} NNReal Real (coeBase.{1, 1} NNReal Real NNReal.Real.hasCoe))) (f a)))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> NNReal}, Iff (Ne.{1} ENNReal (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (a : Œ±) => ENNReal.some (f a))) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (Summable.{0, u1} Real Œ± Real.instAddCommMonoidReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (fun (a : Œ±) => NNReal.toReal (f a)))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_coe_ne_top_iff_summable_coe ENNReal.tsum_coe_ne_top_iff_summable_coe‚Çì'. -/
theorem tsum_coe_ne_top_iff_summable_coe {f : Œ± ‚Üí ‚Ñù‚â•0} :
    (‚àë' a, (f a : ‚Ñù‚â•0‚àû)) ‚â† ‚àû ‚Üî Summable fun a => (f a : ‚Ñù) :=
  by
  rw [NNReal.summable_coe]
  exact tsum_coe_ne_top_iff_summable
#align ennreal.tsum_coe_ne_top_iff_summable_coe ENNReal.tsum_coe_ne_top_iff_summable_coe

/- warning: ennreal.tsum_coe_eq_top_iff_not_summable_coe -> ENNReal.tsum_coe_eq_top_iff_not_summable_coe is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> NNReal}, Iff (Eq.{1} ENNReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (a : Œ±) => (fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) (f a))) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) (Not (Summable.{0, u1} Real Œ± Real.addCommMonoid (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (fun (a : Œ±) => (fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal Real (HasLiftT.mk.{1, 1} NNReal Real (CoeTC‚Çì.coe.{1, 1} NNReal Real (coeBase.{1, 1} NNReal Real NNReal.Real.hasCoe))) (f a))))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> NNReal}, Iff (Eq.{1} ENNReal (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (a : Œ±) => ENNReal.some (f a))) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (Not (Summable.{0, u1} Real Œ± Real.instAddCommMonoidReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (fun (a : Œ±) => NNReal.toReal (f a))))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_coe_eq_top_iff_not_summable_coe ENNReal.tsum_coe_eq_top_iff_not_summable_coe‚Çì'. -/
theorem tsum_coe_eq_top_iff_not_summable_coe {f : Œ± ‚Üí ‚Ñù‚â•0} :
    (‚àë' a, (f a : ‚Ñù‚â•0‚àû)) = ‚àû ‚Üî ¬¨Summable fun a => (f a : ‚Ñù) :=
  by
  rw [‚Üê @Classical.not_not ((‚àë' a, ‚Üë(f a)) = ‚ä§)]
  exact not_congr tsum_coe_ne_top_iff_summable_coe
#align ennreal.tsum_coe_eq_top_iff_not_summable_coe ENNReal.tsum_coe_eq_top_iff_not_summable_coe

/- warning: ennreal.has_sum_to_real -> ENNReal.hasSum_toReal is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal}, (Ne.{1} ENNReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (x : Œ±) => f x)) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (HasSum.{0, u1} Real Œ± Real.addCommMonoid (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (fun (x : Œ±) => ENNReal.toReal (f x)) (tsum.{0, u1} Real Real.addCommMonoid (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) Œ± (fun (x : Œ±) => ENNReal.toReal (f x))))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal}, (Ne.{1} ENNReal (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (x : Œ±) => f x)) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (HasSum.{0, u1} Real Œ± Real.instAddCommMonoidReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (fun (x : Œ±) => ENNReal.toReal (f x)) (tsum.{0, u1} Real Real.instAddCommMonoidReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) Œ± (fun (x : Œ±) => ENNReal.toReal (f x))))
Case conversion may be inaccurate. Consider using '#align ennreal.has_sum_to_real ENNReal.hasSum_toReal‚Çì'. -/
theorem hasSum_toReal {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hsum : (‚àë' x, f x) ‚â† ‚àû) :
    HasSum (fun x => (f x).toReal) (‚àë' x, (f x).toReal) :=
  by
  lift f to Œ± ‚Üí ‚Ñù‚â•0 using ENNReal.ne_top_of_tsum_ne_top hsum
  simp only [coe_to_real, ‚Üê NNReal.coe_tsum, NNReal.hasSum_coe]
  exact (tsum_coe_ne_top_iff_summable.1 hsum).HasSum
#align ennreal.has_sum_to_real ENNReal.hasSum_toReal

/- warning: ennreal.summable_to_real -> ENNReal.summable_toReal is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal}, (Ne.{1} ENNReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (x : Œ±) => f x)) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (Summable.{0, u1} Real Œ± Real.addCommMonoid (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (fun (x : Œ±) => ENNReal.toReal (f x)))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal}, (Ne.{1} ENNReal (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (x : Œ±) => f x)) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (Summable.{0, u1} Real Œ± Real.instAddCommMonoidReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (fun (x : Œ±) => ENNReal.toReal (f x)))
Case conversion may be inaccurate. Consider using '#align ennreal.summable_to_real ENNReal.summable_toReal‚Çì'. -/
theorem summable_toReal {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hsum : (‚àë' x, f x) ‚â† ‚àû) : Summable fun x => (f x).toReal :=
  (hasSum_toReal hsum).Summable
#align ennreal.summable_to_real ENNReal.summable_toReal

end ENNReal

namespace NNReal

open NNReal

/- warning: nnreal.tsum_eq_to_nnreal_tsum -> NNReal.tsum_eq_toNNReal_tsum is a dubious translation:
lean 3 declaration is
  forall {Œ≤ : Type.{u1}} {f : Œ≤ -> NNReal}, Eq.{1} NNReal (tsum.{0, u1} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace Œ≤ (fun (b : Œ≤) => f b)) (ENNReal.toNNReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ≤ (fun (b : Œ≤) => (fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) (f b))))
but is expected to have type
  forall {Œ≤ : Type.{u1}} {f : Œ≤ -> NNReal}, Eq.{1} NNReal (tsum.{0, u1} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal Œ≤ (fun (b : Œ≤) => f b)) (ENNReal.toNNReal (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ≤ (fun (b : Œ≤) => ENNReal.some (f b))))
Case conversion may be inaccurate. Consider using '#align nnreal.tsum_eq_to_nnreal_tsum NNReal.tsum_eq_toNNReal_tsum‚Çì'. -/
theorem tsum_eq_toNNReal_tsum {f : Œ≤ ‚Üí ‚Ñù‚â•0} : (‚àë' b, f b) = (‚àë' b, (f b : ‚Ñù‚â•0‚àû)).toNNReal :=
  by
  by_cases h : Summable f
  ¬∑ rw [‚Üê ENNReal.coe_tsum h, ENNReal.toNNReal_coe]
  ¬∑ have A := tsum_eq_zero_of_not_summable h
    simp only [‚Üê ENNReal.tsum_coe_ne_top_iff_summable, Classical.not_not] at h
    simp only [h, ENNReal.top_toNNReal, A]
#align nnreal.tsum_eq_to_nnreal_tsum NNReal.tsum_eq_toNNReal_tsum

/- warning: nnreal.exists_le_has_sum_of_le -> NNReal.exists_le_hasSum_of_le is a dubious translation:
lean 3 declaration is
  forall {Œ≤ : Type.{u1}} {f : Œ≤ -> NNReal} {g : Œ≤ -> NNReal} {r : NNReal}, (forall (b : Œ≤), LE.le.{0} NNReal (Preorder.toHasLe.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (OrderedCancelAddCommMonoid.toPartialOrder.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)))) (g b) (f b)) -> (HasSum.{0, u1} NNReal Œ≤ (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace f r) -> (Exists.{1} NNReal (fun (p : NNReal) => Exists.{0} (LE.le.{0} NNReal (Preorder.toHasLe.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (OrderedCancelAddCommMonoid.toPartialOrder.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)))) p r) (fun (H : LE.le.{0} NNReal (Preorder.toHasLe.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (OrderedCancelAddCommMonoid.toPartialOrder.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)))) p r) => HasSum.{0, u1} NNReal Œ≤ (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace g p)))
but is expected to have type
  forall {Œ≤ : Type.{u1}} {f : Œ≤ -> NNReal} {g : Œ≤ -> NNReal} {r : NNReal}, (forall (b : Œ≤), LE.le.{0} NNReal (Preorder.toLE.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (StrictOrderedSemiring.toPartialOrder.{0} NNReal instNNRealStrictOrderedSemiring))) (g b) (f b)) -> (HasSum.{0, u1} NNReal Œ≤ (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal f r) -> (Exists.{1} NNReal (fun (p : NNReal) => And (LE.le.{0} NNReal (Preorder.toLE.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (StrictOrderedSemiring.toPartialOrder.{0} NNReal instNNRealStrictOrderedSemiring))) p r) (HasSum.{0, u1} NNReal Œ≤ (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal g p)))
Case conversion may be inaccurate. Consider using '#align nnreal.exists_le_has_sum_of_le NNReal.exists_le_hasSum_of_le‚Çì'. -/
/-- Comparison test of convergence of `‚Ñù‚â•0`-valued series. -/
theorem exists_le_hasSum_of_le {f g : Œ≤ ‚Üí ‚Ñù‚â•0} {r : ‚Ñù‚â•0} (hgf : ‚àÄ b, g b ‚â§ f b) (hfr : HasSum f r) :
    ‚àÉ p ‚â§ r, HasSum g p :=
  have : (‚àë' b, (g b : ‚Ñù‚â•0‚àû)) ‚â§ r :=
    by
    refine' hasSum_le (fun b => _) ennreal.summable.has_sum (ENNReal.hasSum_coe.2 hfr)
    exact ENNReal.coe_le_coe.2 (hgf _)
  let ‚ü®p, Eq, hpr‚ü© := ENNReal.le_coe_iff.1 this
  ‚ü®p, hpr, ENNReal.hasSum_coe.1 <| Eq ‚ñ∏ ENNReal.summable.HasSum‚ü©
#align nnreal.exists_le_has_sum_of_le NNReal.exists_le_hasSum_of_le

/- warning: nnreal.summable_of_le -> NNReal.summable_of_le is a dubious translation:
lean 3 declaration is
  forall {Œ≤ : Type.{u1}} {f : Œ≤ -> NNReal} {g : Œ≤ -> NNReal}, (forall (b : Œ≤), LE.le.{0} NNReal (Preorder.toHasLe.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (OrderedCancelAddCommMonoid.toPartialOrder.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)))) (g b) (f b)) -> (Summable.{0, u1} NNReal Œ≤ (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace f) -> (Summable.{0, u1} NNReal Œ≤ (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace g)
but is expected to have type
  forall {Œ≤ : Type.{u1}} {f : Œ≤ -> NNReal} {g : Œ≤ -> NNReal}, (forall (b : Œ≤), LE.le.{0} NNReal (Preorder.toLE.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (StrictOrderedSemiring.toPartialOrder.{0} NNReal instNNRealStrictOrderedSemiring))) (g b) (f b)) -> (Summable.{0, u1} NNReal Œ≤ (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal f) -> (Summable.{0, u1} NNReal Œ≤ (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal g)
Case conversion may be inaccurate. Consider using '#align nnreal.summable_of_le NNReal.summable_of_le‚Çì'. -/
/-- Comparison test of convergence of `‚Ñù‚â•0`-valued series. -/
theorem summable_of_le {f g : Œ≤ ‚Üí ‚Ñù‚â•0} (hgf : ‚àÄ b, g b ‚â§ f b) : Summable f ‚Üí Summable g
  | ‚ü®r, hfr‚ü© =>
    let ‚ü®p, _, hp‚ü© := exists_le_hasSum_of_le hgf hfr
    hp.Summable
#align nnreal.summable_of_le NNReal.summable_of_le

/- warning: nnreal.has_sum_iff_tendsto_nat -> NNReal.hasSum_iff_tendsto_nat is a dubious translation:
lean 3 declaration is
  forall {f : Nat -> NNReal} {r : NNReal}, Iff (HasSum.{0, 0} NNReal Nat (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace f r) (Filter.Tendsto.{0, 0} Nat NNReal (fun (n : Nat) => Finset.sum.{0, 0} NNReal Nat (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) (Finset.range n) (fun (i : Nat) => f i)) (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (OrderedCancelAddCommMonoid.toPartialOrder.{0} Nat (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} Nat Nat.strictOrderedSemiring)))) (nhds.{0} NNReal NNReal.topologicalSpace r))
but is expected to have type
  forall {f : Nat -> NNReal} {r : NNReal}, Iff (HasSum.{0, 0} NNReal Nat (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal f r) (Filter.Tendsto.{0, 0} Nat NNReal (fun (n : Nat) => Finset.sum.{0, 0} NNReal Nat (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) (Finset.range n) (fun (i : Nat) => f i)) (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (StrictOrderedSemiring.toPartialOrder.{0} Nat Nat.strictOrderedSemiring))) (nhds.{0} NNReal NNReal.instTopologicalSpaceNNReal r))
Case conversion may be inaccurate. Consider using '#align nnreal.has_sum_iff_tendsto_nat NNReal.hasSum_iff_tendsto_nat‚Çì'. -/
/-- A series of non-negative real numbers converges to `r` in the sense of `has_sum` if and only if
the sequence of partial sum converges to `r`. -/
theorem hasSum_iff_tendsto_nat {f : ‚Ñï ‚Üí ‚Ñù‚â•0} {r : ‚Ñù‚â•0} :
    HasSum f r ‚Üî Tendsto (fun n : ‚Ñï => ‚àë i in Finset.range n, f i) atTop (ùìù r) :=
  by
  rw [‚Üê ENNReal.hasSum_coe, ENNReal.hasSum_iff_tendsto_nat]
  simp only [ennreal.coe_finset_sum.symm]
  exact ENNReal.tendsto_coe
#align nnreal.has_sum_iff_tendsto_nat NNReal.hasSum_iff_tendsto_nat

/- warning: nnreal.not_summable_iff_tendsto_nat_at_top -> NNReal.not_summable_iff_tendsto_nat_atTop is a dubious translation:
lean 3 declaration is
  forall {f : Nat -> NNReal}, Iff (Not (Summable.{0, 0} NNReal Nat (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace f)) (Filter.Tendsto.{0, 0} Nat NNReal (fun (n : Nat) => Finset.sum.{0, 0} NNReal Nat (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) (Finset.range n) (fun (i : Nat) => f i)) (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (OrderedCancelAddCommMonoid.toPartialOrder.{0} Nat (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} Nat Nat.strictOrderedSemiring)))) (Filter.atTop.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (OrderedCancelAddCommMonoid.toPartialOrder.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)))))
but is expected to have type
  forall {f : Nat -> NNReal}, Iff (Not (Summable.{0, 0} NNReal Nat (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal f)) (Filter.Tendsto.{0, 0} Nat NNReal (fun (n : Nat) => Finset.sum.{0, 0} NNReal Nat (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) (Finset.range n) (fun (i : Nat) => f i)) (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (StrictOrderedSemiring.toPartialOrder.{0} Nat Nat.strictOrderedSemiring))) (Filter.atTop.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (StrictOrderedSemiring.toPartialOrder.{0} NNReal instNNRealStrictOrderedSemiring))))
Case conversion may be inaccurate. Consider using '#align nnreal.not_summable_iff_tendsto_nat_at_top NNReal.not_summable_iff_tendsto_nat_atTop‚Çì'. -/
theorem not_summable_iff_tendsto_nat_atTop {f : ‚Ñï ‚Üí ‚Ñù‚â•0} :
    ¬¨Summable f ‚Üî Tendsto (fun n : ‚Ñï => ‚àë i in Finset.range n, f i) atTop atTop :=
  by
  constructor
  ¬∑ intro h
    refine' ((tendsto_of_monotone _).resolve_right h).comp _
    exacts[Finset.sum_mono_set _, tendsto_finset_range]
  ¬∑ rintro hnat ‚ü®r, hr‚ü©
    exact not_tendsto_nhds_of_tendsto_atTop hnat _ (has_sum_iff_tendsto_nat.1 hr)
#align nnreal.not_summable_iff_tendsto_nat_at_top NNReal.not_summable_iff_tendsto_nat_atTop

/- warning: nnreal.summable_iff_not_tendsto_nat_at_top -> NNReal.summable_iff_not_tendsto_nat_atTop is a dubious translation:
lean 3 declaration is
  forall {f : Nat -> NNReal}, Iff (Summable.{0, 0} NNReal Nat (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace f) (Not (Filter.Tendsto.{0, 0} Nat NNReal (fun (n : Nat) => Finset.sum.{0, 0} NNReal Nat (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) (Finset.range n) (fun (i : Nat) => f i)) (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (OrderedCancelAddCommMonoid.toPartialOrder.{0} Nat (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} Nat Nat.strictOrderedSemiring)))) (Filter.atTop.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (OrderedCancelAddCommMonoid.toPartialOrder.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring))))))
but is expected to have type
  forall {f : Nat -> NNReal}, Iff (Summable.{0, 0} NNReal Nat (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal f) (Not (Filter.Tendsto.{0, 0} Nat NNReal (fun (n : Nat) => Finset.sum.{0, 0} NNReal Nat (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) (Finset.range n) (fun (i : Nat) => f i)) (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (StrictOrderedSemiring.toPartialOrder.{0} Nat Nat.strictOrderedSemiring))) (Filter.atTop.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (StrictOrderedSemiring.toPartialOrder.{0} NNReal instNNRealStrictOrderedSemiring)))))
Case conversion may be inaccurate. Consider using '#align nnreal.summable_iff_not_tendsto_nat_at_top NNReal.summable_iff_not_tendsto_nat_atTop‚Çì'. -/
theorem summable_iff_not_tendsto_nat_atTop {f : ‚Ñï ‚Üí ‚Ñù‚â•0} :
    Summable f ‚Üî ¬¨Tendsto (fun n : ‚Ñï => ‚àë i in Finset.range n, f i) atTop atTop := by
  rw [‚Üê not_iff_not, Classical.not_not, not_summable_iff_tendsto_nat_at_top]
#align nnreal.summable_iff_not_tendsto_nat_at_top NNReal.summable_iff_not_tendsto_nat_atTop

/- warning: nnreal.summable_of_sum_range_le -> NNReal.summable_of_sum_range_le is a dubious translation:
lean 3 declaration is
  forall {f : Nat -> NNReal} {c : NNReal}, (forall (n : Nat), LE.le.{0} NNReal (Preorder.toHasLe.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (OrderedCancelAddCommMonoid.toPartialOrder.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)))) (Finset.sum.{0, 0} NNReal Nat (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) (Finset.range n) (fun (i : Nat) => f i)) c) -> (Summable.{0, 0} NNReal Nat (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace f)
but is expected to have type
  forall {f : Nat -> NNReal} {c : NNReal}, (forall (n : Nat), LE.le.{0} NNReal (Preorder.toLE.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (StrictOrderedSemiring.toPartialOrder.{0} NNReal instNNRealStrictOrderedSemiring))) (Finset.sum.{0, 0} NNReal Nat (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) (Finset.range n) (fun (i : Nat) => f i)) c) -> (Summable.{0, 0} NNReal Nat (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal f)
Case conversion may be inaccurate. Consider using '#align nnreal.summable_of_sum_range_le NNReal.summable_of_sum_range_le‚Çì'. -/
theorem summable_of_sum_range_le {f : ‚Ñï ‚Üí ‚Ñù‚â•0} {c : ‚Ñù‚â•0}
    (h : ‚àÄ n, (‚àë i in Finset.range n, f i) ‚â§ c) : Summable f :=
  by
  apply summable_iff_not_tendsto_nat_at_top.2 fun H => _
  rcases exists_lt_of_tendsto_at_top H 0 c with ‚ü®n, -, hn‚ü©
  exact lt_irrefl _ (hn.trans_le (h n))
#align nnreal.summable_of_sum_range_le NNReal.summable_of_sum_range_le

/- warning: nnreal.tsum_le_of_sum_range_le -> NNReal.tsum_le_of_sum_range_le is a dubious translation:
lean 3 declaration is
  forall {f : Nat -> NNReal} {c : NNReal}, (forall (n : Nat), LE.le.{0} NNReal (Preorder.toHasLe.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (OrderedCancelAddCommMonoid.toPartialOrder.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)))) (Finset.sum.{0, 0} NNReal Nat (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) (Finset.range n) (fun (i : Nat) => f i)) c) -> (LE.le.{0} NNReal (Preorder.toHasLe.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (OrderedCancelAddCommMonoid.toPartialOrder.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)))) (tsum.{0, 0} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace Nat (fun (n : Nat) => f n)) c)
but is expected to have type
  forall {f : Nat -> NNReal} {c : NNReal}, (forall (n : Nat), LE.le.{0} NNReal (Preorder.toLE.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (StrictOrderedSemiring.toPartialOrder.{0} NNReal instNNRealStrictOrderedSemiring))) (Finset.sum.{0, 0} NNReal Nat (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) (Finset.range n) (fun (i : Nat) => f i)) c) -> (LE.le.{0} NNReal (Preorder.toLE.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (StrictOrderedSemiring.toPartialOrder.{0} NNReal instNNRealStrictOrderedSemiring))) (tsum.{0, 0} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal Nat (fun (n : Nat) => f n)) c)
Case conversion may be inaccurate. Consider using '#align nnreal.tsum_le_of_sum_range_le NNReal.tsum_le_of_sum_range_le‚Çì'. -/
theorem tsum_le_of_sum_range_le {f : ‚Ñï ‚Üí ‚Ñù‚â•0} {c : ‚Ñù‚â•0}
    (h : ‚àÄ n, (‚àë i in Finset.range n, f i) ‚â§ c) : (‚àë' n, f n) ‚â§ c :=
  tsum_le_of_sum_range_le (summable_of_sum_range_le h) h
#align nnreal.tsum_le_of_sum_range_le NNReal.tsum_le_of_sum_range_le

/- warning: nnreal.tsum_comp_le_tsum_of_inj -> NNReal.tsum_comp_le_tsum_of_inj is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} {f : Œ± -> NNReal}, (Summable.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace f) -> (forall {i : Œ≤ -> Œ±}, (Function.Injective.{succ u2, succ u1} Œ≤ Œ± i) -> (LE.le.{0} NNReal (Preorder.toHasLe.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (OrderedCancelAddCommMonoid.toPartialOrder.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)))) (tsum.{0, u2} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace Œ≤ (fun (x : Œ≤) => f (i x))) (tsum.{0, u1} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace Œ± (fun (x : Œ±) => f x))))
but is expected to have type
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} {f : Œ± -> NNReal}, (Summable.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal f) -> (forall {i : Œ≤ -> Œ±}, (Function.Injective.{succ u2, succ u1} Œ≤ Œ± i) -> (LE.le.{0} NNReal (Preorder.toLE.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (StrictOrderedSemiring.toPartialOrder.{0} NNReal instNNRealStrictOrderedSemiring))) (tsum.{0, u2} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal Œ≤ (fun (x : Œ≤) => f (i x))) (tsum.{0, u1} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal Œ± (fun (x : Œ±) => f x))))
Case conversion may be inaccurate. Consider using '#align nnreal.tsum_comp_le_tsum_of_inj NNReal.tsum_comp_le_tsum_of_inj‚Çì'. -/
theorem tsum_comp_le_tsum_of_inj {Œ≤ : Type _} {f : Œ± ‚Üí ‚Ñù‚â•0} (hf : Summable f) {i : Œ≤ ‚Üí Œ±}
    (hi : Function.Injective i) : (‚àë' x, f (i x)) ‚â§ ‚àë' x, f x :=
  tsum_le_tsum_of_inj i hi (fun c hc => zero_le _) (fun b => le_rfl) (summable_comp_injective hf hi)
    hf
#align nnreal.tsum_comp_le_tsum_of_inj NNReal.tsum_comp_le_tsum_of_inj

/- warning: nnreal.summable_sigma -> NNReal.summable_sigma is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Œ± -> Type.{u2}} {f : (Sigma.{u1, u2} Œ± (fun (x : Œ±) => Œ≤ x)) -> NNReal}, Iff (Summable.{0, max u1 u2} NNReal (Sigma.{u1, u2} Œ± (fun (x : Œ±) => Œ≤ x)) (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace f) (And (forall (x : Œ±), Summable.{0, u2} NNReal (Œ≤ x) (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace (fun (y : Œ≤ x) => f (Sigma.mk.{u1, u2} Œ± (fun (x : Œ±) => Œ≤ x) x y))) (Summable.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace (fun (x : Œ±) => tsum.{0, u2} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace (Œ≤ x) (fun (y : Œ≤ x) => f (Sigma.mk.{u1, u2} Œ± (fun (x : Œ±) => Œ≤ x) x y)))))
but is expected to have type
  forall {Œ± : Type.{u1}} {Œ≤ : Œ± -> Type.{u2}} {f : (Sigma.{u1, u2} Œ± (fun (x : Œ±) => Œ≤ x)) -> NNReal}, Iff (Summable.{0, max u1 u2} NNReal (Sigma.{u1, u2} Œ± (fun (x : Œ±) => Œ≤ x)) (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal f) (And (forall (x : Œ±), Summable.{0, u2} NNReal (Œ≤ x) (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal (fun (y : Œ≤ x) => f (Sigma.mk.{u1, u2} Œ± (fun (x : Œ±) => Œ≤ x) x y))) (Summable.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal (fun (x : Œ±) => tsum.{0, u2} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal (Œ≤ x) (fun (y : Œ≤ x) => f (Sigma.mk.{u1, u2} Œ± (fun (x : Œ±) => Œ≤ x) x y)))))
Case conversion may be inaccurate. Consider using '#align nnreal.summable_sigma NNReal.summable_sigma‚Çì'. -/
theorem summable_sigma {Œ≤ : ‚àÄ x : Œ±, Type _} {f : (Œ£x, Œ≤ x) ‚Üí ‚Ñù‚â•0} :
    Summable f ‚Üî (‚àÄ x, Summable fun y => f ‚ü®x, y‚ü©) ‚àß Summable fun x => ‚àë' y, f ‚ü®x, y‚ü© :=
  by
  constructor
  ¬∑ simp only [‚Üê NNReal.summable_coe, NNReal.coe_tsum]
    exact fun h => ‚ü®h.sigma_factor, h.Sigma‚ü©
  ¬∑ rintro ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
    simpa only [‚Üê ENNReal.tsum_coe_ne_top_iff_summable, ENNReal.tsum_sigma', ENNReal.coe_tsum,
      h‚ÇÅ] using h‚ÇÇ
#align nnreal.summable_sigma NNReal.summable_sigma

/- warning: nnreal.indicator_summable -> NNReal.indicator_summable is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> NNReal}, (Summable.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace f) -> (forall (s : Set.{u1} Œ±), Summable.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace (Set.indicator.{u1, 0} Œ± NNReal (MulZeroClass.toHasZero.{0} NNReal (NonUnitalNonAssocSemiring.toMulZeroClass.{0} NNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal NNReal.semiring)))) s f))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> NNReal}, (Summable.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal f) -> (forall (s : Set.{u1} Œ±), Summable.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal (Set.indicator.{u1, 0} Œ± NNReal instNNRealZero s f))
Case conversion may be inaccurate. Consider using '#align nnreal.indicator_summable NNReal.indicator_summable‚Çì'. -/
theorem indicator_summable {f : Œ± ‚Üí ‚Ñù‚â•0} (hf : Summable f) (s : Set Œ±) : Summable (s.indicator f) :=
  by
  refine' NNReal.summable_of_le (fun a => le_trans (le_of_eq (s.indicator_apply f a)) _) hf
  split_ifs
  exact le_refl (f a)
  exact zero_le_coe
#align nnreal.indicator_summable NNReal.indicator_summable

/- warning: nnreal.tsum_indicator_ne_zero -> NNReal.tsum_indicator_ne_zero is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> NNReal}, (Summable.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace f) -> (forall {s : Set.{u1} Œ±}, (Exists.{succ u1} Œ± (fun (a : Œ±) => Exists.{0} (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) a s) (fun (H : Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) a s) => Ne.{1} NNReal (f a) (OfNat.ofNat.{0} NNReal 0 (OfNat.mk.{0} NNReal 0 (Zero.zero.{0} NNReal (MulZeroClass.toHasZero.{0} NNReal (NonUnitalNonAssocSemiring.toMulZeroClass.{0} NNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal NNReal.semiring)))))))))) -> (Ne.{1} NNReal (tsum.{0, u1} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace Œ± (fun (x : Œ±) => Set.indicator.{u1, 0} Œ± NNReal (MulZeroClass.toHasZero.{0} NNReal (NonUnitalNonAssocSemiring.toMulZeroClass.{0} NNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal NNReal.semiring)))) s f x)) (OfNat.ofNat.{0} NNReal 0 (OfNat.mk.{0} NNReal 0 (Zero.zero.{0} NNReal (MulZeroClass.toHasZero.{0} NNReal (NonUnitalNonAssocSemiring.toMulZeroClass.{0} NNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal NNReal.semiring)))))))))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> NNReal}, (Summable.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal f) -> (forall {s : Set.{u1} Œ±}, (Exists.{succ u1} Œ± (fun (a : Œ±) => And (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) a s) (Ne.{1} NNReal (f a) (OfNat.ofNat.{0} NNReal 0 (Zero.toOfNat0.{0} NNReal instNNRealZero))))) -> (Ne.{1} NNReal (tsum.{0, u1} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal Œ± (fun (x : Œ±) => Set.indicator.{u1, 0} Œ± NNReal instNNRealZero s f x)) (OfNat.ofNat.{0} NNReal 0 (Zero.toOfNat0.{0} NNReal instNNRealZero))))
Case conversion may be inaccurate. Consider using '#align nnreal.tsum_indicator_ne_zero NNReal.tsum_indicator_ne_zero‚Çì'. -/
theorem tsum_indicator_ne_zero {f : Œ± ‚Üí ‚Ñù‚â•0} (hf : Summable f) {s : Set Œ±} (h : ‚àÉ a ‚àà s, f a ‚â† 0) :
    (‚àë' x, (s.indicator f) x) ‚â† 0 := fun h' =>
  let ‚ü®a, ha, hap‚ü© := h
  hap
    (trans (Set.indicator_apply_eq_self.mpr (absurd ha)).symm
      (((tsum_eq_zero_iff (indicator_summable hf s)).1 h') a))
#align nnreal.tsum_indicator_ne_zero NNReal.tsum_indicator_ne_zero

open Finset

/- warning: nnreal.tendsto_sum_nat_add -> NNReal.tendsto_sum_nat_add is a dubious translation:
lean 3 declaration is
  forall (f : Nat -> NNReal), Filter.Tendsto.{0, 0} Nat NNReal (fun (i : Nat) => tsum.{0, 0} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace Nat (fun (k : Nat) => f (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) k i))) (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (OrderedCancelAddCommMonoid.toPartialOrder.{0} Nat (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} Nat Nat.strictOrderedSemiring)))) (nhds.{0} NNReal NNReal.topologicalSpace (OfNat.ofNat.{0} NNReal 0 (OfNat.mk.{0} NNReal 0 (Zero.zero.{0} NNReal (MulZeroClass.toHasZero.{0} NNReal (NonUnitalNonAssocSemiring.toMulZeroClass.{0} NNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal NNReal.semiring))))))))
but is expected to have type
  forall (f : Nat -> NNReal), Filter.Tendsto.{0, 0} Nat NNReal (fun (i : Nat) => tsum.{0, 0} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal Nat (fun (k : Nat) => f (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) k i))) (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (StrictOrderedSemiring.toPartialOrder.{0} Nat Nat.strictOrderedSemiring))) (nhds.{0} NNReal NNReal.instTopologicalSpaceNNReal (OfNat.ofNat.{0} NNReal 0 (Zero.toOfNat0.{0} NNReal instNNRealZero)))
Case conversion may be inaccurate. Consider using '#align nnreal.tendsto_sum_nat_add NNReal.tendsto_sum_nat_add‚Çì'. -/
/-- For `f : ‚Ñï ‚Üí ‚Ñù‚â•0`, then `‚àë' k, f (k + i)` tends to zero. This does not require a summability
assumption on `f`, as otherwise all sums are zero. -/
theorem tendsto_sum_nat_add (f : ‚Ñï ‚Üí ‚Ñù‚â•0) : Tendsto (fun i => ‚àë' k, f (k + i)) atTop (ùìù 0) :=
  by
  rw [‚Üê tendsto_coe]
  convert tendsto_sum_nat_add fun i => (f i : ‚Ñù)
  norm_cast
#align nnreal.tendsto_sum_nat_add NNReal.tendsto_sum_nat_add

/- warning: nnreal.has_sum_lt -> NNReal.hasSum_lt is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> NNReal} {g : Œ± -> NNReal} {sf : NNReal} {sg : NNReal} {i : Œ±}, (forall (a : Œ±), LE.le.{0} NNReal (Preorder.toHasLe.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (OrderedCancelAddCommMonoid.toPartialOrder.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)))) (f a) (g a)) -> (LT.lt.{0} NNReal (Preorder.toHasLt.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (OrderedCancelAddCommMonoid.toPartialOrder.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)))) (f i) (g i)) -> (HasSum.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace f sf) -> (HasSum.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace g sg) -> (LT.lt.{0} NNReal (Preorder.toHasLt.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (OrderedCancelAddCommMonoid.toPartialOrder.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)))) sf sg)
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> NNReal} {g : Œ± -> NNReal} {sf : NNReal} {sg : NNReal} {i : Œ±}, (forall (a : Œ±), LE.le.{0} NNReal (Preorder.toLE.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (StrictOrderedSemiring.toPartialOrder.{0} NNReal instNNRealStrictOrderedSemiring))) (f a) (g a)) -> (LT.lt.{0} NNReal (Preorder.toLT.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (StrictOrderedSemiring.toPartialOrder.{0} NNReal instNNRealStrictOrderedSemiring))) (f i) (g i)) -> (HasSum.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal f sf) -> (HasSum.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal g sg) -> (LT.lt.{0} NNReal (Preorder.toLT.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (StrictOrderedSemiring.toPartialOrder.{0} NNReal instNNRealStrictOrderedSemiring))) sf sg)
Case conversion may be inaccurate. Consider using '#align nnreal.has_sum_lt NNReal.hasSum_lt‚Çì'. -/
theorem hasSum_lt {f g : Œ± ‚Üí ‚Ñù‚â•0} {sf sg : ‚Ñù‚â•0} {i : Œ±} (h : ‚àÄ a : Œ±, f a ‚â§ g a) (hi : f i < g i)
    (hf : HasSum f sf) (hg : HasSum g sg) : sf < sg :=
  by
  have A : ‚àÄ a : Œ±, (f a : ‚Ñù) ‚â§ g a := fun a => NNReal.coe_le_coe.2 (h a)
  have : (sf : ‚Ñù) < sg := hasSum_lt A (NNReal.coe_lt_coe.2 hi) (has_sum_coe.2 hf) (has_sum_coe.2 hg)
  exact NNReal.coe_lt_coe.1 this
#align nnreal.has_sum_lt NNReal.hasSum_lt

/- warning: nnreal.has_sum_strict_mono -> NNReal.hasSum_strict_mono is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> NNReal} {g : Œ± -> NNReal} {sf : NNReal} {sg : NNReal}, (HasSum.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace f sf) -> (HasSum.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace g sg) -> (LT.lt.{u1} (Œ± -> NNReal) (Preorder.toHasLt.{u1} (Œ± -> NNReal) (Pi.preorder.{u1, 0} Œ± (fun (·æ∞ : Œ±) => NNReal) (fun (i : Œ±) => PartialOrder.toPreorder.{0} NNReal (OrderedCancelAddCommMonoid.toPartialOrder.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring))))) f g) -> (LT.lt.{0} NNReal (Preorder.toHasLt.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (OrderedCancelAddCommMonoid.toPartialOrder.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)))) sf sg)
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> NNReal} {g : Œ± -> NNReal} {sf : NNReal} {sg : NNReal}, (HasSum.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal f sf) -> (HasSum.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal g sg) -> (LT.lt.{u1} (Œ± -> NNReal) (Preorder.toLT.{u1} (Œ± -> NNReal) (Pi.preorder.{u1, 0} Œ± (fun (·æ∞ : Œ±) => NNReal) (fun (i : Œ±) => PartialOrder.toPreorder.{0} NNReal (StrictOrderedSemiring.toPartialOrder.{0} NNReal instNNRealStrictOrderedSemiring)))) f g) -> (LT.lt.{0} NNReal (Preorder.toLT.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (StrictOrderedSemiring.toPartialOrder.{0} NNReal instNNRealStrictOrderedSemiring))) sf sg)
Case conversion may be inaccurate. Consider using '#align nnreal.has_sum_strict_mono NNReal.hasSum_strict_mono‚Çì'. -/
@[mono]
theorem hasSum_strict_mono {f g : Œ± ‚Üí ‚Ñù‚â•0} {sf sg : ‚Ñù‚â•0} (hf : HasSum f sf) (hg : HasSum g sg)
    (h : f < g) : sf < sg :=
  let ‚ü®hle, i, hi‚ü© := Pi.lt_def.mp h
  hasSum_lt hle hi hf hg
#align nnreal.has_sum_strict_mono NNReal.hasSum_strict_mono

/- warning: nnreal.tsum_lt_tsum -> NNReal.tsum_lt_tsum is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> NNReal} {g : Œ± -> NNReal} {i : Œ±}, (forall (a : Œ±), LE.le.{0} NNReal (Preorder.toHasLe.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (OrderedCancelAddCommMonoid.toPartialOrder.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)))) (f a) (g a)) -> (LT.lt.{0} NNReal (Preorder.toHasLt.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (OrderedCancelAddCommMonoid.toPartialOrder.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)))) (f i) (g i)) -> (Summable.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace g) -> (LT.lt.{0} NNReal (Preorder.toHasLt.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (OrderedCancelAddCommMonoid.toPartialOrder.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)))) (tsum.{0, u1} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace Œ± (fun (n : Œ±) => f n)) (tsum.{0, u1} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace Œ± (fun (n : Œ±) => g n)))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> NNReal} {g : Œ± -> NNReal} {i : Œ±}, (forall (a : Œ±), LE.le.{0} NNReal (Preorder.toLE.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (StrictOrderedSemiring.toPartialOrder.{0} NNReal instNNRealStrictOrderedSemiring))) (f a) (g a)) -> (LT.lt.{0} NNReal (Preorder.toLT.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (StrictOrderedSemiring.toPartialOrder.{0} NNReal instNNRealStrictOrderedSemiring))) (f i) (g i)) -> (Summable.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal g) -> (LT.lt.{0} NNReal (Preorder.toLT.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (StrictOrderedSemiring.toPartialOrder.{0} NNReal instNNRealStrictOrderedSemiring))) (tsum.{0, u1} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal Œ± (fun (n : Œ±) => f n)) (tsum.{0, u1} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal Œ± (fun (n : Œ±) => g n)))
Case conversion may be inaccurate. Consider using '#align nnreal.tsum_lt_tsum NNReal.tsum_lt_tsum‚Çì'. -/
theorem tsum_lt_tsum {f g : Œ± ‚Üí ‚Ñù‚â•0} {i : Œ±} (h : ‚àÄ a : Œ±, f a ‚â§ g a) (hi : f i < g i)
    (hg : Summable g) : (‚àë' n, f n) < ‚àë' n, g n :=
  hasSum_lt h hi (summable_of_le h hg).HasSum hg.HasSum
#align nnreal.tsum_lt_tsum NNReal.tsum_lt_tsum

/- warning: nnreal.tsum_strict_mono -> NNReal.tsum_strict_mono is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> NNReal} {g : Œ± -> NNReal}, (Summable.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace g) -> (LT.lt.{u1} (Œ± -> NNReal) (Preorder.toHasLt.{u1} (Œ± -> NNReal) (Pi.preorder.{u1, 0} Œ± (fun (·æ∞ : Œ±) => NNReal) (fun (i : Œ±) => PartialOrder.toPreorder.{0} NNReal (OrderedCancelAddCommMonoid.toPartialOrder.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring))))) f g) -> (LT.lt.{0} NNReal (Preorder.toHasLt.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (OrderedCancelAddCommMonoid.toPartialOrder.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)))) (tsum.{0, u1} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace Œ± (fun (n : Œ±) => f n)) (tsum.{0, u1} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace Œ± (fun (n : Œ±) => g n)))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> NNReal} {g : Œ± -> NNReal}, (Summable.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal g) -> (LT.lt.{u1} (Œ± -> NNReal) (Preorder.toLT.{u1} (Œ± -> NNReal) (Pi.preorder.{u1, 0} Œ± (fun (·æ∞ : Œ±) => NNReal) (fun (i : Œ±) => PartialOrder.toPreorder.{0} NNReal (StrictOrderedSemiring.toPartialOrder.{0} NNReal instNNRealStrictOrderedSemiring)))) f g) -> (LT.lt.{0} NNReal (Preorder.toLT.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (StrictOrderedSemiring.toPartialOrder.{0} NNReal instNNRealStrictOrderedSemiring))) (tsum.{0, u1} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal Œ± (fun (n : Œ±) => f n)) (tsum.{0, u1} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal Œ± (fun (n : Œ±) => g n)))
Case conversion may be inaccurate. Consider using '#align nnreal.tsum_strict_mono NNReal.tsum_strict_mono‚Çì'. -/
@[mono]
theorem tsum_strict_mono {f g : Œ± ‚Üí ‚Ñù‚â•0} (hg : Summable g) (h : f < g) : (‚àë' n, f n) < ‚àë' n, g n :=
  let ‚ü®hle, i, hi‚ü© := Pi.lt_def.mp h
  tsum_lt_tsum hle hi hg
#align nnreal.tsum_strict_mono NNReal.tsum_strict_mono

/- warning: nnreal.tsum_pos -> NNReal.tsum_pos is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {g : Œ± -> NNReal}, (Summable.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace g) -> (forall (i : Œ±), (LT.lt.{0} NNReal (Preorder.toHasLt.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (OrderedCancelAddCommMonoid.toPartialOrder.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)))) (OfNat.ofNat.{0} NNReal 0 (OfNat.mk.{0} NNReal 0 (Zero.zero.{0} NNReal (MulZeroClass.toHasZero.{0} NNReal (NonUnitalNonAssocSemiring.toMulZeroClass.{0} NNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal NNReal.semiring))))))) (g i)) -> (LT.lt.{0} NNReal (Preorder.toHasLt.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (OrderedCancelAddCommMonoid.toPartialOrder.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)))) (OfNat.ofNat.{0} NNReal 0 (OfNat.mk.{0} NNReal 0 (Zero.zero.{0} NNReal (MulZeroClass.toHasZero.{0} NNReal (NonUnitalNonAssocSemiring.toMulZeroClass.{0} NNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal NNReal.semiring))))))) (tsum.{0, u1} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace Œ± (fun (b : Œ±) => g b))))
but is expected to have type
  forall {Œ± : Type.{u1}} {g : Œ± -> NNReal}, (Summable.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal g) -> (forall (i : Œ±), (LT.lt.{0} NNReal (Preorder.toLT.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (StrictOrderedSemiring.toPartialOrder.{0} NNReal instNNRealStrictOrderedSemiring))) (OfNat.ofNat.{0} NNReal 0 (Zero.toOfNat0.{0} NNReal instNNRealZero)) (g i)) -> (LT.lt.{0} NNReal (Preorder.toLT.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (StrictOrderedSemiring.toPartialOrder.{0} NNReal instNNRealStrictOrderedSemiring))) (OfNat.ofNat.{0} NNReal 0 (Zero.toOfNat0.{0} NNReal instNNRealZero)) (tsum.{0, u1} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal Œ± (fun (b : Œ±) => g b))))
Case conversion may be inaccurate. Consider using '#align nnreal.tsum_pos NNReal.tsum_pos‚Çì'. -/
theorem tsum_pos {g : Œ± ‚Üí ‚Ñù‚â•0} (hg : Summable g) (i : Œ±) (hi : 0 < g i) : 0 < ‚àë' b, g b :=
  by
  rw [‚Üê tsum_zero]
  exact tsum_lt_tsum (fun a => zero_le _) hi hg
#align nnreal.tsum_pos NNReal.tsum_pos

/- warning: nnreal.tsum_eq_add_tsum_ite -> NNReal.tsum_eq_add_tsum_ite is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> NNReal}, (Summable.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace f) -> (forall (i : Œ±), Eq.{1} NNReal (tsum.{0, u1} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace Œ± (fun (x : Œ±) => f x)) (HAdd.hAdd.{0, 0, 0} NNReal NNReal NNReal (instHAdd.{0} NNReal (Distrib.toHasAdd.{0} NNReal (NonUnitalNonAssocSemiring.toDistrib.{0} NNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal NNReal.semiring))))) (f i) (tsum.{0, u1} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace Œ± (fun (x : Œ±) => ite.{1} NNReal (Eq.{succ u1} Œ± x i) (Classical.propDecidable (Eq.{succ u1} Œ± x i)) (OfNat.ofNat.{0} NNReal 0 (OfNat.mk.{0} NNReal 0 (Zero.zero.{0} NNReal (MulZeroClass.toHasZero.{0} NNReal (NonUnitalNonAssocSemiring.toMulZeroClass.{0} NNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal NNReal.semiring))))))) (f x)))))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> NNReal}, (Summable.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal f) -> (forall (i : Œ±), Eq.{1} NNReal (tsum.{0, u1} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal Œ± (fun (x : Œ±) => f x)) (HAdd.hAdd.{0, 0, 0} NNReal NNReal NNReal (instHAdd.{0} NNReal (Distrib.toAdd.{0} NNReal (NonUnitalNonAssocSemiring.toDistrib.{0} NNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal instNNRealSemiring))))) (f i) (tsum.{0, u1} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal Œ± (fun (x : Œ±) => ite.{1} NNReal (Eq.{succ u1} Œ± x i) (Classical.propDecidable (Eq.{succ u1} Œ± x i)) (OfNat.ofNat.{0} NNReal 0 (Zero.toOfNat0.{0} NNReal instNNRealZero)) (f x)))))
Case conversion may be inaccurate. Consider using '#align nnreal.tsum_eq_add_tsum_ite NNReal.tsum_eq_add_tsum_ite‚Çì'. -/
theorem tsum_eq_add_tsum_ite {f : Œ± ‚Üí ‚Ñù‚â•0} (hf : Summable f) (i : Œ±) :
    (‚àë' x, f x) = f i + ‚àë' x, ite (x = i) 0 (f x) :=
  by
  refine' tsum_eq_add_tsum_ite' i (NNReal.summable_of_le (fun i' => _) hf)
  rw [Function.update_apply]
  split_ifs <;> simp only [zero_le', le_rfl]
#align nnreal.tsum_eq_add_tsum_ite NNReal.tsum_eq_add_tsum_ite

end NNReal

namespace ENNReal

/- warning: ennreal.tsum_to_nnreal_eq -> ENNReal.tsum_toNNReal_eq is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal}, (forall (a : Œ±), Ne.{1} ENNReal (f a) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (Eq.{1} NNReal (ENNReal.toNNReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (a : Œ±) => f a))) (tsum.{0, u1} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace Œ± (fun (a : Œ±) => ENNReal.toNNReal (f a))))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal}, (forall (a : Œ±), Ne.{1} ENNReal (f a) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (Eq.{1} NNReal (ENNReal.toNNReal (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (a : Œ±) => f a))) (tsum.{0, u1} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal Œ± (fun (a : Œ±) => ENNReal.toNNReal (f a))))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_to_nnreal_eq ENNReal.tsum_toNNReal_eq‚Çì'. -/
theorem tsum_toNNReal_eq {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hf : ‚àÄ a, f a ‚â† ‚àû) :
    (‚àë' a, f a).toNNReal = ‚àë' a, (f a).toNNReal :=
  (congr_arg ENNReal.toNNReal (tsum_congr fun x => (coe_toNNReal (hf x)).symm)).trans
    NNReal.tsum_eq_toNNReal_tsum.symm
#align ennreal.tsum_to_nnreal_eq ENNReal.tsum_toNNReal_eq

/- warning: ennreal.tsum_to_real_eq -> ENNReal.tsum_toReal_eq is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal}, (forall (a : Œ±), Ne.{1} ENNReal (f a) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (Eq.{1} Real (ENNReal.toReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (a : Œ±) => f a))) (tsum.{0, u1} Real Real.addCommMonoid (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) Œ± (fun (a : Œ±) => ENNReal.toReal (f a))))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal}, (forall (a : Œ±), Ne.{1} ENNReal (f a) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (Eq.{1} Real (ENNReal.toReal (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (a : Œ±) => f a))) (tsum.{0, u1} Real Real.instAddCommMonoidReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) Œ± (fun (a : Œ±) => ENNReal.toReal (f a))))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_to_real_eq ENNReal.tsum_toReal_eq‚Çì'. -/
theorem tsum_toReal_eq {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (hf : ‚àÄ a, f a ‚â† ‚àû) :
    (‚àë' a, f a).toReal = ‚àë' a, (f a).toReal := by
  simp only [ENNReal.toReal, tsum_to_nnreal_eq hf, NNReal.coe_tsum]
#align ennreal.tsum_to_real_eq ENNReal.tsum_toReal_eq

/- warning: ennreal.tendsto_sum_nat_add -> ENNReal.tendsto_sum_nat_add is a dubious translation:
lean 3 declaration is
  forall (f : Nat -> ENNReal), (Ne.{1} ENNReal (tsum.{0, 0} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Nat (fun (i : Nat) => f i)) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (Filter.Tendsto.{0, 0} Nat ENNReal (fun (i : Nat) => tsum.{0, 0} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Nat (fun (k : Nat) => f (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) k i))) (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (OrderedCancelAddCommMonoid.toPartialOrder.{0} Nat (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} Nat Nat.strictOrderedSemiring)))) (nhds.{0} ENNReal ENNReal.topologicalSpace (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))))
but is expected to have type
  forall (f : Nat -> ENNReal), (Ne.{1} ENNReal (tsum.{0, 0} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Nat (fun (i : Nat) => f i)) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (Filter.Tendsto.{0, 0} Nat ENNReal (fun (i : Nat) => tsum.{0, 0} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Nat (fun (k : Nat) => f (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) k i))) (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (StrictOrderedSemiring.toPartialOrder.{0} Nat Nat.strictOrderedSemiring))) (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))))
Case conversion may be inaccurate. Consider using '#align ennreal.tendsto_sum_nat_add ENNReal.tendsto_sum_nat_add‚Çì'. -/
theorem tendsto_sum_nat_add (f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû) (hf : (‚àë' i, f i) ‚â† ‚àû) :
    Tendsto (fun i => ‚àë' k, f (k + i)) atTop (ùìù 0) :=
  by
  lift f to ‚Ñï ‚Üí ‚Ñù‚â•0 using ENNReal.ne_top_of_tsum_ne_top hf
  replace hf : Summable f := tsum_coe_ne_top_iff_summable.1 hf
  simp only [‚Üê ENNReal.coe_tsum, NNReal.summable_nat_add _ hf, ‚Üê ENNReal.coe_zero]
  exact_mod_cast NNReal.tendsto_sum_nat_add f
#align ennreal.tendsto_sum_nat_add ENNReal.tendsto_sum_nat_add

/- warning: ennreal.tsum_le_of_sum_range_le -> ENNReal.tsum_le_of_sum_range_le is a dubious translation:
lean 3 declaration is
  forall {f : Nat -> ENNReal} {c : ENNReal}, (forall (n : Nat), LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (Finset.sum.{0, 0} ENNReal Nat (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) (Finset.range n) (fun (i : Nat) => f i)) c) -> (LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (tsum.{0, 0} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Nat (fun (n : Nat) => f n)) c)
but is expected to have type
  forall {f : Nat -> ENNReal} {c : ENNReal}, (forall (n : Nat), LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (Finset.sum.{0, 0} ENNReal Nat (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) (Finset.range n) (fun (i : Nat) => f i)) c) -> (LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (tsum.{0, 0} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Nat (fun (n : Nat) => f n)) c)
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_le_of_sum_range_le ENNReal.tsum_le_of_sum_range_le‚Çì'. -/
theorem tsum_le_of_sum_range_le {f : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû} {c : ‚Ñù‚â•0‚àû}
    (h : ‚àÄ n, (‚àë i in Finset.range n, f i) ‚â§ c) : (‚àë' n, f n) ‚â§ c :=
  tsum_le_of_sum_range_le ENNReal.summable h
#align ennreal.tsum_le_of_sum_range_le ENNReal.tsum_le_of_sum_range_le

/- warning: ennreal.has_sum_lt -> ENNReal.hasSum_lt is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal} {g : Œ± -> ENNReal} {sf : ENNReal} {sg : ENNReal} {i : Œ±}, (forall (a : Œ±), LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (f a) (g a)) -> (LT.lt.{0} ENNReal (Preorder.toHasLt.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (f i) (g i)) -> (Ne.{1} ENNReal sf (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (HasSum.{0, u1} ENNReal Œ± (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace f sf) -> (HasSum.{0, u1} ENNReal Œ± (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace g sg) -> (LT.lt.{0} ENNReal (Preorder.toHasLt.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) sf sg)
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal} {g : Œ± -> ENNReal} {sf : ENNReal} {sg : ENNReal} {i : Œ±}, (forall (a : Œ±), LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (f a) (g a)) -> (LT.lt.{0} ENNReal (Preorder.toLT.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (f i) (g i)) -> (Ne.{1} ENNReal sf (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (HasSum.{0, u1} ENNReal Œ± (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal f sf) -> (HasSum.{0, u1} ENNReal Œ± (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal g sg) -> (LT.lt.{0} ENNReal (Preorder.toLT.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) sf sg)
Case conversion may be inaccurate. Consider using '#align ennreal.has_sum_lt ENNReal.hasSum_lt‚Çì'. -/
theorem hasSum_lt {f g : Œ± ‚Üí ‚Ñù‚â•0‚àû} {sf sg : ‚Ñù‚â•0‚àû} {i : Œ±} (h : ‚àÄ a : Œ±, f a ‚â§ g a) (hi : f i < g i)
    (hsf : sf ‚â† ‚ä§) (hf : HasSum f sf) (hg : HasSum g sg) : sf < sg :=
  by
  by_cases hsg : sg = ‚ä§
  ¬∑ exact hsg.symm ‚ñ∏ lt_of_le_of_ne le_top hsf
  ¬∑ have hg' : ‚àÄ x, g x ‚â† ‚ä§ := ENNReal.ne_top_of_tsum_ne_top (hg.tsum_eq.symm ‚ñ∏ hsg)
    lift f to Œ± ‚Üí ‚Ñù‚â•0 using fun x =>
      ne_of_lt (lt_of_le_of_lt (h x) <| lt_of_le_of_ne le_top (hg' x))
    lift g to Œ± ‚Üí ‚Ñù‚â•0 using hg'
    lift sf to ‚Ñù‚â•0 using hsf
    lift sg to ‚Ñù‚â•0 using hsg
    simp only [coe_le_coe, coe_lt_coe] at h hi‚ä¢
    exact NNReal.hasSum_lt h hi (ENNReal.hasSum_coe.1 hf) (ENNReal.hasSum_coe.1 hg)
#align ennreal.has_sum_lt ENNReal.hasSum_lt

/- warning: ennreal.tsum_lt_tsum -> ENNReal.tsum_lt_tsum is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal} {g : Œ± -> ENNReal} {i : Œ±}, (Ne.{1} ENNReal (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± f) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (forall (a : Œ±), LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (f a) (g a)) -> (LT.lt.{0} ENNReal (Preorder.toHasLt.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (f i) (g i)) -> (LT.lt.{0} ENNReal (Preorder.toHasLt.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (x : Œ±) => f x)) (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (x : Œ±) => g x)))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> ENNReal} {g : Œ± -> ENNReal} {i : Œ±}, (Ne.{1} ENNReal (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± f) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (forall (a : Œ±), LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (f a) (g a)) -> (LT.lt.{0} ENNReal (Preorder.toLT.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (f i) (g i)) -> (LT.lt.{0} ENNReal (Preorder.toLT.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (x : Œ±) => f x)) (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (x : Œ±) => g x)))
Case conversion may be inaccurate. Consider using '#align ennreal.tsum_lt_tsum ENNReal.tsum_lt_tsum‚Çì'. -/
theorem tsum_lt_tsum {f g : Œ± ‚Üí ‚Ñù‚â•0‚àû} {i : Œ±} (hfi : tsum f ‚â† ‚ä§) (h : ‚àÄ a : Œ±, f a ‚â§ g a)
    (hi : f i < g i) : (‚àë' x, f x) < ‚àë' x, g x :=
  hasSum_lt h hi hfi ENNReal.summable.HasSum ENNReal.summable.HasSum
#align ennreal.tsum_lt_tsum ENNReal.tsum_lt_tsum

end ENNReal

/- warning: tsum_comp_le_tsum_of_inj -> tsum_comp_le_tsum_of_inj is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} {f : Œ± -> Real}, (Summable.{0, u1} Real Œ± Real.addCommMonoid (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) f) -> (forall (a : Œ±), LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) (f a)) -> (forall {i : Œ≤ -> Œ±}, (Function.Injective.{succ u2, succ u1} Œ≤ Œ± i) -> (LE.le.{0} Real Real.hasLe (tsum.{0, u2} Real Real.addCommMonoid (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) Œ≤ (Function.comp.{succ u2, succ u1, 1} Œ≤ Œ± Real f i)) (tsum.{0, u1} Real Real.addCommMonoid (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) Œ± f)))
but is expected to have type
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} {f : Œ± -> Real}, (Summable.{0, u1} Real Œ± Real.instAddCommMonoidReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) f) -> (forall (a : Œ±), LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) (f a)) -> (forall {i : Œ≤ -> Œ±}, (Function.Injective.{succ u2, succ u1} Œ≤ Œ± i) -> (LE.le.{0} Real Real.instLEReal (tsum.{0, u2} Real Real.instAddCommMonoidReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) Œ≤ (Function.comp.{succ u2, succ u1, 1} Œ≤ Œ± Real f i)) (tsum.{0, u1} Real Real.instAddCommMonoidReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) Œ± f)))
Case conversion may be inaccurate. Consider using '#align tsum_comp_le_tsum_of_inj tsum_comp_le_tsum_of_inj‚Çì'. -/
theorem tsum_comp_le_tsum_of_inj {Œ≤ : Type _} {f : Œ± ‚Üí ‚Ñù} (hf : Summable f) (hn : ‚àÄ a, 0 ‚â§ f a)
    {i : Œ≤ ‚Üí Œ±} (hi : Function.Injective i) : tsum (f ‚àò i) ‚â§ tsum f :=
  by
  lift f to Œ± ‚Üí ‚Ñù‚â•0 using hn
  rw [NNReal.summable_coe] at hf
  simpa only [(¬∑ ‚àò ¬∑), ‚Üê NNReal.coe_tsum] using NNReal.tsum_comp_le_tsum_of_inj hf hi
#align tsum_comp_le_tsum_of_inj tsum_comp_le_tsum_of_inj

/- warning: summable_of_nonneg_of_le -> summable_of_nonneg_of_le is a dubious translation:
lean 3 declaration is
  forall {Œ≤ : Type.{u1}} {f : Œ≤ -> Real} {g : Œ≤ -> Real}, (forall (b : Œ≤), LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) (g b)) -> (forall (b : Œ≤), LE.le.{0} Real Real.hasLe (g b) (f b)) -> (Summable.{0, u1} Real Œ≤ Real.addCommMonoid (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) f) -> (Summable.{0, u1} Real Œ≤ Real.addCommMonoid (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) g)
but is expected to have type
  forall {Œ≤ : Type.{u1}} {f : Œ≤ -> Real} {g : Œ≤ -> Real}, (forall (b : Œ≤), LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) (g b)) -> (forall (b : Œ≤), LE.le.{0} Real Real.instLEReal (g b) (f b)) -> (Summable.{0, u1} Real Œ≤ Real.instAddCommMonoidReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) f) -> (Summable.{0, u1} Real Œ≤ Real.instAddCommMonoidReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) g)
Case conversion may be inaccurate. Consider using '#align summable_of_nonneg_of_le summable_of_nonneg_of_le‚Çì'. -/
/-- Comparison test of convergence of series of non-negative real numbers. -/
theorem summable_of_nonneg_of_le {f g : Œ≤ ‚Üí ‚Ñù} (hg : ‚àÄ b, 0 ‚â§ g b) (hgf : ‚àÄ b, g b ‚â§ f b)
    (hf : Summable f) : Summable g :=
  by
  lift f to Œ≤ ‚Üí ‚Ñù‚â•0 using fun b => (hg b).trans (hgf b)
  lift g to Œ≤ ‚Üí ‚Ñù‚â•0 using hg
  rw [NNReal.summable_coe] at hf‚ä¢
  exact NNReal.summable_of_le (fun b => NNReal.coe_le_coe.1 (hgf b)) hf
#align summable_of_nonneg_of_le summable_of_nonneg_of_le

/- warning: summable.to_nnreal -> Summable.toNNReal is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> Real}, (Summable.{0, u1} Real Œ± Real.addCommMonoid (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) f) -> (Summable.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace (fun (n : Œ±) => Real.toNNReal (f n)))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> Real}, (Summable.{0, u1} Real Œ± Real.instAddCommMonoidReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) f) -> (Summable.{0, u1} NNReal Œ± (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal (fun (n : Œ±) => Real.toNNReal (f n)))
Case conversion may be inaccurate. Consider using '#align summable.to_nnreal Summable.toNNReal‚Çì'. -/
theorem Summable.toNNReal {f : Œ± ‚Üí ‚Ñù} (hf : Summable f) : Summable fun n => (f n).toNNReal :=
  by
  apply NNReal.summable_coe.1
  refine' summable_of_nonneg_of_le (fun n => NNReal.coe_nonneg _) (fun n => _) hf.abs
  simp only [le_abs_self, Real.coe_toNNReal', max_le_iff, abs_nonneg, and_self_iff]
#align summable.to_nnreal Summable.toNNReal

/- warning: has_sum_iff_tendsto_nat_of_nonneg -> hasSum_iff_tendsto_nat_of_nonneg is a dubious translation:
lean 3 declaration is
  forall {f : Nat -> Real}, (forall (i : Nat), LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) (f i)) -> (forall (r : Real), Iff (HasSum.{0, 0} Real Nat Real.addCommMonoid (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) f r) (Filter.Tendsto.{0, 0} Nat Real (fun (n : Nat) => Finset.sum.{0, 0} Real Nat Real.addCommMonoid (Finset.range n) (fun (i : Nat) => f i)) (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (OrderedCancelAddCommMonoid.toPartialOrder.{0} Nat (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} Nat Nat.strictOrderedSemiring)))) (nhds.{0} Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) r)))
but is expected to have type
  forall {f : Nat -> Real}, (forall (i : Nat), LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) (f i)) -> (forall (r : Real), Iff (HasSum.{0, 0} Real Nat Real.instAddCommMonoidReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) f r) (Filter.Tendsto.{0, 0} Nat Real (fun (n : Nat) => Finset.sum.{0, 0} Real Nat Real.instAddCommMonoidReal (Finset.range n) (fun (i : Nat) => f i)) (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (StrictOrderedSemiring.toPartialOrder.{0} Nat Nat.strictOrderedSemiring))) (nhds.{0} Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) r)))
Case conversion may be inaccurate. Consider using '#align has_sum_iff_tendsto_nat_of_nonneg hasSum_iff_tendsto_nat_of_nonneg‚Çì'. -/
/-- A series of non-negative real numbers converges to `r` in the sense of `has_sum` if and only if
the sequence of partial sum converges to `r`. -/
theorem hasSum_iff_tendsto_nat_of_nonneg {f : ‚Ñï ‚Üí ‚Ñù} (hf : ‚àÄ i, 0 ‚â§ f i) (r : ‚Ñù) :
    HasSum f r ‚Üî Tendsto (fun n : ‚Ñï => ‚àë i in Finset.range n, f i) atTop (ùìù r) :=
  by
  lift f to ‚Ñï ‚Üí ‚Ñù‚â•0 using hf
  simp only [HasSum, ‚Üê NNReal.coe_sum, NNReal.tendsto_coe']
  exact exists_congr fun hr => NNReal.hasSum_iff_tendsto_nat
#align has_sum_iff_tendsto_nat_of_nonneg hasSum_iff_tendsto_nat_of_nonneg

/- warning: ennreal.of_real_tsum_of_nonneg -> ENNReal.ofReal_tsum_of_nonneg is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {f : Œ± -> Real}, (forall (n : Œ±), LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) (f n)) -> (Summable.{0, u1} Real Œ± Real.addCommMonoid (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) f) -> (Eq.{1} ENNReal (ENNReal.ofReal (tsum.{0, u1} Real Real.addCommMonoid (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) Œ± (fun (n : Œ±) => f n))) (tsum.{0, u1} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Œ± (fun (n : Œ±) => ENNReal.ofReal (f n))))
but is expected to have type
  forall {Œ± : Type.{u1}} {f : Œ± -> Real}, (forall (n : Œ±), LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) (f n)) -> (Summable.{0, u1} Real Œ± Real.instAddCommMonoidReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) f) -> (Eq.{1} ENNReal (ENNReal.ofReal (tsum.{0, u1} Real Real.instAddCommMonoidReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) Œ± (fun (n : Œ±) => f n))) (tsum.{0, u1} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Œ± (fun (n : Œ±) => ENNReal.ofReal (f n))))
Case conversion may be inaccurate. Consider using '#align ennreal.of_real_tsum_of_nonneg ENNReal.ofReal_tsum_of_nonneg‚Çì'. -/
theorem ENNReal.ofReal_tsum_of_nonneg {f : Œ± ‚Üí ‚Ñù} (hf_nonneg : ‚àÄ n, 0 ‚â§ f n) (hf : Summable f) :
    ENNReal.ofReal (‚àë' n, f n) = ‚àë' n, ENNReal.ofReal (f n) := by
  simp_rw [ENNReal.ofReal, ENNReal.tsum_coe_eq (NNReal.hasSum_real_toNNReal_of_nonneg hf_nonneg hf)]
#align ennreal.of_real_tsum_of_nonneg ENNReal.ofReal_tsum_of_nonneg

/- warning: not_summable_iff_tendsto_nat_at_top_of_nonneg -> not_summable_iff_tendsto_nat_atTop_of_nonneg is a dubious translation:
lean 3 declaration is
  forall {f : Nat -> Real}, (forall (n : Nat), LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) (f n)) -> (Iff (Not (Summable.{0, 0} Real Nat Real.addCommMonoid (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) f)) (Filter.Tendsto.{0, 0} Nat Real (fun (n : Nat) => Finset.sum.{0, 0} Real Nat Real.addCommMonoid (Finset.range n) (fun (i : Nat) => f i)) (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (OrderedCancelAddCommMonoid.toPartialOrder.{0} Nat (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} Nat Nat.strictOrderedSemiring)))) (Filter.atTop.{0} Real Real.preorder)))
but is expected to have type
  forall {f : Nat -> Real}, (forall (n : Nat), LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) (f n)) -> (Iff (Not (Summable.{0, 0} Real Nat Real.instAddCommMonoidReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) f)) (Filter.Tendsto.{0, 0} Nat Real (fun (n : Nat) => Finset.sum.{0, 0} Real Nat Real.instAddCommMonoidReal (Finset.range n) (fun (i : Nat) => f i)) (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (StrictOrderedSemiring.toPartialOrder.{0} Nat Nat.strictOrderedSemiring))) (Filter.atTop.{0} Real Real.instPreorderReal)))
Case conversion may be inaccurate. Consider using '#align not_summable_iff_tendsto_nat_at_top_of_nonneg not_summable_iff_tendsto_nat_atTop_of_nonneg‚Çì'. -/
theorem not_summable_iff_tendsto_nat_atTop_of_nonneg {f : ‚Ñï ‚Üí ‚Ñù} (hf : ‚àÄ n, 0 ‚â§ f n) :
    ¬¨Summable f ‚Üî Tendsto (fun n : ‚Ñï => ‚àë i in Finset.range n, f i) atTop atTop :=
  by
  lift f to ‚Ñï ‚Üí ‚Ñù‚â•0 using hf
  exact_mod_cast NNReal.not_summable_iff_tendsto_nat_atTop
#align not_summable_iff_tendsto_nat_at_top_of_nonneg not_summable_iff_tendsto_nat_atTop_of_nonneg

/- warning: summable_iff_not_tendsto_nat_at_top_of_nonneg -> summable_iff_not_tendsto_nat_atTop_of_nonneg is a dubious translation:
lean 3 declaration is
  forall {f : Nat -> Real}, (forall (n : Nat), LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) (f n)) -> (Iff (Summable.{0, 0} Real Nat Real.addCommMonoid (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) f) (Not (Filter.Tendsto.{0, 0} Nat Real (fun (n : Nat) => Finset.sum.{0, 0} Real Nat Real.addCommMonoid (Finset.range n) (fun (i : Nat) => f i)) (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (OrderedCancelAddCommMonoid.toPartialOrder.{0} Nat (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} Nat Nat.strictOrderedSemiring)))) (Filter.atTop.{0} Real Real.preorder))))
but is expected to have type
  forall {f : Nat -> Real}, (forall (n : Nat), LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) (f n)) -> (Iff (Summable.{0, 0} Real Nat Real.instAddCommMonoidReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) f) (Not (Filter.Tendsto.{0, 0} Nat Real (fun (n : Nat) => Finset.sum.{0, 0} Real Nat Real.instAddCommMonoidReal (Finset.range n) (fun (i : Nat) => f i)) (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (StrictOrderedSemiring.toPartialOrder.{0} Nat Nat.strictOrderedSemiring))) (Filter.atTop.{0} Real Real.instPreorderReal))))
Case conversion may be inaccurate. Consider using '#align summable_iff_not_tendsto_nat_at_top_of_nonneg summable_iff_not_tendsto_nat_atTop_of_nonneg‚Çì'. -/
theorem summable_iff_not_tendsto_nat_atTop_of_nonneg {f : ‚Ñï ‚Üí ‚Ñù} (hf : ‚àÄ n, 0 ‚â§ f n) :
    Summable f ‚Üî ¬¨Tendsto (fun n : ‚Ñï => ‚àë i in Finset.range n, f i) atTop atTop := by
  rw [‚Üê not_iff_not, Classical.not_not, not_summable_iff_tendsto_nat_atTop_of_nonneg hf]
#align summable_iff_not_tendsto_nat_at_top_of_nonneg summable_iff_not_tendsto_nat_atTop_of_nonneg

/- warning: summable_sigma_of_nonneg -> summable_sigma_of_nonneg is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Œ± -> Type.{u2}} {f : (Sigma.{u1, u2} Œ± (fun (x : Œ±) => Œ≤ x)) -> Real}, (forall (x : Sigma.{u1, u2} Œ± (fun (x : Œ±) => Œ≤ x)), LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) (f x)) -> (Iff (Summable.{0, max u1 u2} Real (Sigma.{u1, u2} Œ± (fun (x : Œ±) => Œ≤ x)) Real.addCommMonoid (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) f) (And (forall (x : Œ±), Summable.{0, u2} Real (Œ≤ x) Real.addCommMonoid (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (fun (y : Œ≤ x) => f (Sigma.mk.{u1, u2} Œ± (fun (x : Œ±) => Œ≤ x) x y))) (Summable.{0, u1} Real Œ± Real.addCommMonoid (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (fun (x : Œ±) => tsum.{0, u2} Real Real.addCommMonoid (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (Œ≤ x) (fun (y : Œ≤ x) => f (Sigma.mk.{u1, u2} Œ± (fun (x : Œ±) => Œ≤ x) x y))))))
but is expected to have type
  forall {Œ± : Type.{u1}} {Œ≤ : Œ± -> Type.{u2}} {f : (Sigma.{u1, u2} Œ± (fun (x : Œ±) => Œ≤ x)) -> Real}, (forall (x : Sigma.{u1, u2} Œ± (fun (x : Œ±) => Œ≤ x)), LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) (f x)) -> (Iff (Summable.{0, max u1 u2} Real (Sigma.{u1, u2} Œ± (fun (x : Œ±) => Œ≤ x)) Real.instAddCommMonoidReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) f) (And (forall (x : Œ±), Summable.{0, u2} Real (Œ≤ x) Real.instAddCommMonoidReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (fun (y : Œ≤ x) => f (Sigma.mk.{u1, u2} Œ± (fun (x : Œ±) => Œ≤ x) x y))) (Summable.{0, u1} Real Œ± Real.instAddCommMonoidReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (fun (x : Œ±) => tsum.{0, u2} Real Real.instAddCommMonoidReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (Œ≤ x) (fun (y : Œ≤ x) => f (Sigma.mk.{u1, u2} Œ± (fun (x : Œ±) => Œ≤ x) x y))))))
Case conversion may be inaccurate. Consider using '#align summable_sigma_of_nonneg summable_sigma_of_nonneg‚Çì'. -/
theorem summable_sigma_of_nonneg {Œ≤ : ‚àÄ x : Œ±, Type _} {f : (Œ£x, Œ≤ x) ‚Üí ‚Ñù} (hf : ‚àÄ x, 0 ‚â§ f x) :
    Summable f ‚Üî (‚àÄ x, Summable fun y => f ‚ü®x, y‚ü©) ‚àß Summable fun x => ‚àë' y, f ‚ü®x, y‚ü© :=
  by
  lift f to (Œ£x, Œ≤ x) ‚Üí ‚Ñù‚â•0 using hf
  exact_mod_cast NNReal.summable_sigma
#align summable_sigma_of_nonneg summable_sigma_of_nonneg

/- warning: summable_of_sum_le -> summable_of_sum_le is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {f : Œπ -> Real} {c : Real}, (LE.le.{u1} (Œπ -> Real) (Pi.hasLe.{u1, 0} Œπ (fun (·æ∞ : Œπ) => Real) (fun (i : Œπ) => Real.hasLe)) (OfNat.ofNat.{u1} (Œπ -> Real) 0 (OfNat.mk.{u1} (Œπ -> Real) 0 (Zero.zero.{u1} (Œπ -> Real) (Pi.instZero.{u1, 0} Œπ (fun (·æ∞ : Œπ) => Real) (fun (i : Œπ) => Real.hasZero))))) f) -> (forall (u : Finset.{u1} Œπ), LE.le.{0} Real Real.hasLe (Finset.sum.{0, u1} Real Œπ Real.addCommMonoid u (fun (x : Œπ) => f x)) c) -> (Summable.{0, u1} Real Œπ Real.addCommMonoid (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) f)
but is expected to have type
  forall {Œπ : Type.{u1}} {f : Œπ -> Real} {c : Real}, (LE.le.{u1} (Œπ -> Real) (Pi.hasLe.{u1, 0} Œπ (fun (·æ∞ : Œπ) => Real) (fun (i : Œπ) => Real.instLEReal)) (OfNat.ofNat.{u1} (Œπ -> Real) 0 (Zero.toOfNat0.{u1} (Œπ -> Real) (Pi.instZero.{u1, 0} Œπ (fun (a._@.Mathlib.Topology.Instances.ENNReal._hyg.26995 : Œπ) => Real) (fun (i : Œπ) => Real.instZeroReal)))) f) -> (forall (u : Finset.{u1} Œπ), LE.le.{0} Real Real.instLEReal (Finset.sum.{0, u1} Real Œπ Real.instAddCommMonoidReal u (fun (x : Œπ) => f x)) c) -> (Summable.{0, u1} Real Œπ Real.instAddCommMonoidReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) f)
Case conversion may be inaccurate. Consider using '#align summable_of_sum_le summable_of_sum_le‚Çì'. -/
theorem summable_of_sum_le {Œπ : Type _} {f : Œπ ‚Üí ‚Ñù} {c : ‚Ñù} (hf : 0 ‚â§ f)
    (h : ‚àÄ u : Finset Œπ, (‚àë x in u, f x) ‚â§ c) : Summable f :=
  ‚ü®‚®Ü u : Finset Œπ, ‚àë x in u, f x,
    tendsto_atTop_ciSup (Finset.sum_mono_set_of_nonneg hf) ‚ü®c, fun y ‚ü®u, hu‚ü© => hu ‚ñ∏ h u‚ü©‚ü©
#align summable_of_sum_le summable_of_sum_le

/- warning: summable_of_sum_range_le -> summable_of_sum_range_le is a dubious translation:
lean 3 declaration is
  forall {f : Nat -> Real} {c : Real}, (forall (n : Nat), LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) (f n)) -> (forall (n : Nat), LE.le.{0} Real Real.hasLe (Finset.sum.{0, 0} Real Nat Real.addCommMonoid (Finset.range n) (fun (i : Nat) => f i)) c) -> (Summable.{0, 0} Real Nat Real.addCommMonoid (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) f)
but is expected to have type
  forall {f : Nat -> Real} {c : Real}, (forall (n : Nat), LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) (f n)) -> (forall (n : Nat), LE.le.{0} Real Real.instLEReal (Finset.sum.{0, 0} Real Nat Real.instAddCommMonoidReal (Finset.range n) (fun (i : Nat) => f i)) c) -> (Summable.{0, 0} Real Nat Real.instAddCommMonoidReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) f)
Case conversion may be inaccurate. Consider using '#align summable_of_sum_range_le summable_of_sum_range_le‚Çì'. -/
theorem summable_of_sum_range_le {f : ‚Ñï ‚Üí ‚Ñù} {c : ‚Ñù} (hf : ‚àÄ n, 0 ‚â§ f n)
    (h : ‚àÄ n, (‚àë i in Finset.range n, f i) ‚â§ c) : Summable f :=
  by
  apply (summable_iff_not_tendsto_nat_atTop_of_nonneg hf).2 fun H => _
  rcases exists_lt_of_tendsto_at_top H 0 c with ‚ü®n, -, hn‚ü©
  exact lt_irrefl _ (hn.trans_le (h n))
#align summable_of_sum_range_le summable_of_sum_range_le

/- warning: real.tsum_le_of_sum_range_le -> Real.tsum_le_of_sum_range_le is a dubious translation:
lean 3 declaration is
  forall {f : Nat -> Real} {c : Real}, (forall (n : Nat), LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) (f n)) -> (forall (n : Nat), LE.le.{0} Real Real.hasLe (Finset.sum.{0, 0} Real Nat Real.addCommMonoid (Finset.range n) (fun (i : Nat) => f i)) c) -> (LE.le.{0} Real Real.hasLe (tsum.{0, 0} Real Real.addCommMonoid (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) Nat (fun (n : Nat) => f n)) c)
but is expected to have type
  forall {f : Nat -> Real} {c : Real}, (forall (n : Nat), LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) (f n)) -> (forall (n : Nat), LE.le.{0} Real Real.instLEReal (Finset.sum.{0, 0} Real Nat Real.instAddCommMonoidReal (Finset.range n) (fun (i : Nat) => f i)) c) -> (LE.le.{0} Real Real.instLEReal (tsum.{0, 0} Real Real.instAddCommMonoidReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) Nat (fun (n : Nat) => f n)) c)
Case conversion may be inaccurate. Consider using '#align real.tsum_le_of_sum_range_le Real.tsum_le_of_sum_range_le‚Çì'. -/
theorem Real.tsum_le_of_sum_range_le {f : ‚Ñï ‚Üí ‚Ñù} {c : ‚Ñù} (hf : ‚àÄ n, 0 ‚â§ f n)
    (h : ‚àÄ n, (‚àë i in Finset.range n, f i) ‚â§ c) : (‚àë' n, f n) ‚â§ c :=
  tsum_le_of_sum_range_le (summable_of_sum_range_le hf h) h
#align real.tsum_le_of_sum_range_le Real.tsum_le_of_sum_range_le

/- warning: tsum_lt_tsum_of_nonneg -> tsum_lt_tsum_of_nonneg is a dubious translation:
lean 3 declaration is
  forall {i : Nat} {f : Nat -> Real} {g : Nat -> Real}, (forall (b : Nat), LE.le.{0} Real Real.hasLe (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) (f b)) -> (forall (b : Nat), LE.le.{0} Real Real.hasLe (f b) (g b)) -> (LT.lt.{0} Real Real.hasLt (f i) (g i)) -> (Summable.{0, 0} Real Nat Real.addCommMonoid (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) g) -> (LT.lt.{0} Real Real.hasLt (tsum.{0, 0} Real Real.addCommMonoid (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) Nat (fun (n : Nat) => f n)) (tsum.{0, 0} Real Real.addCommMonoid (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) Nat (fun (n : Nat) => g n)))
but is expected to have type
  forall {i : Nat} {f : Nat -> Real} {g : Nat -> Real}, (forall (b : Nat), LE.le.{0} Real Real.instLEReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) (f b)) -> (forall (b : Nat), LE.le.{0} Real Real.instLEReal (f b) (g b)) -> (LT.lt.{0} Real Real.instLTReal (f i) (g i)) -> (Summable.{0, 0} Real Nat Real.instAddCommMonoidReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) g) -> (LT.lt.{0} Real Real.instLTReal (tsum.{0, 0} Real Real.instAddCommMonoidReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) Nat (fun (n : Nat) => f n)) (tsum.{0, 0} Real Real.instAddCommMonoidReal (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) Nat (fun (n : Nat) => g n)))
Case conversion may be inaccurate. Consider using '#align tsum_lt_tsum_of_nonneg tsum_lt_tsum_of_nonneg‚Çì'. -/
/-- If a sequence `f` with non-negative terms is dominated by a sequence `g` with summable
series and at least one term of `f` is strictly smaller than the corresponding term in `g`,
then the series of `f` is strictly smaller than the series of `g`. -/
theorem tsum_lt_tsum_of_nonneg {i : ‚Ñï} {f g : ‚Ñï ‚Üí ‚Ñù} (h0 : ‚àÄ b : ‚Ñï, 0 ‚â§ f b)
    (h : ‚àÄ b : ‚Ñï, f b ‚â§ g b) (hi : f i < g i) (hg : Summable g) : (‚àë' n, f n) < ‚àë' n, g n :=
  tsum_lt_tsum h hi (summable_of_nonneg_of_le h0 h hg) hg
#align tsum_lt_tsum_of_nonneg tsum_lt_tsum_of_nonneg

section

variable [EMetricSpace Œ≤]

open ENNReal Filter Emetric

/- warning: edist_ne_top_of_mem_ball -> edist_ne_top_of_mem_ball is a dubious translation:
lean 3 declaration is
  forall {Œ≤ : Type.{u1}} [_inst_1 : EMetricSpace.{u1} Œ≤] {a : Œ≤} {r : ENNReal} (x : coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ≤) Type.{u1} (Set.hasCoeToSort.{u1} Œ≤) (EMetric.ball.{u1} Œ≤ (EMetricSpace.toPseudoEmetricSpace.{u1} Œ≤ _inst_1) a r)) (y : coeSort.{succ u1, succ (succ u1)} (Set.{u1} Œ≤) Type.{u1} (Set.hasCoeToSort.{u1} Œ≤) (EMetric.ball.{u1} Œ≤ (EMetricSpace.toPseudoEmetricSpace.{u1} Œ≤ _inst_1) a r)), Ne.{1} ENNReal (EDist.edist.{u1} Œ≤ (PseudoEMetricSpace.toHasEdist.{u1} Œ≤ (EMetricSpace.toPseudoEmetricSpace.{u1} Œ≤ _inst_1)) (Subtype.val.{succ u1} Œ≤ (fun (x : Œ≤) => Membership.Mem.{u1, u1} Œ≤ (Set.{u1} Œ≤) (Set.hasMem.{u1} Œ≤) x (EMetric.ball.{u1} Œ≤ (EMetricSpace.toPseudoEmetricSpace.{u1} Œ≤ _inst_1) a r)) x) (Subtype.val.{succ u1} Œ≤ (fun (x : Œ≤) => Membership.Mem.{u1, u1} Œ≤ (Set.{u1} Œ≤) (Set.hasMem.{u1} Œ≤) x (EMetric.ball.{u1} Œ≤ (EMetricSpace.toPseudoEmetricSpace.{u1} Œ≤ _inst_1) a r)) y)) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))
but is expected to have type
  forall {Œ≤ : Type.{u1}} [_inst_1 : EMetricSpace.{u1} Œ≤] {a : Œ≤} {r : ENNReal} (x : Set.Elem.{u1} Œ≤ (EMetric.ball.{u1} Œ≤ (EMetricSpace.toPseudoEMetricSpace.{u1} Œ≤ _inst_1) a r)) (y : Set.Elem.{u1} Œ≤ (EMetric.ball.{u1} Œ≤ (EMetricSpace.toPseudoEMetricSpace.{u1} Œ≤ _inst_1) a r)), Ne.{1} ENNReal (EDist.edist.{u1} Œ≤ (PseudoEMetricSpace.toEDist.{u1} Œ≤ (EMetricSpace.toPseudoEMetricSpace.{u1} Œ≤ _inst_1)) (Subtype.val.{succ u1} Œ≤ (fun (x : Œ≤) => Membership.mem.{u1, u1} Œ≤ (Set.{u1} Œ≤) (Set.instMembershipSet.{u1} Œ≤) x (EMetric.ball.{u1} Œ≤ (EMetricSpace.toPseudoEMetricSpace.{u1} Œ≤ _inst_1) a r)) x) (Subtype.val.{succ u1} Œ≤ (fun (x : Œ≤) => Membership.mem.{u1, u1} Œ≤ (Set.{u1} Œ≤) (Set.instMembershipSet.{u1} Œ≤) x (EMetric.ball.{u1} Œ≤ (EMetricSpace.toPseudoEMetricSpace.{u1} Œ≤ _inst_1) a r)) y)) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))
Case conversion may be inaccurate. Consider using '#align edist_ne_top_of_mem_ball edist_ne_top_of_mem_ball‚Çì'. -/
/-- In an emetric ball, the distance between points is everywhere finite -/
theorem edist_ne_top_of_mem_ball {a : Œ≤} {r : ‚Ñù‚â•0‚àû} (x y : ball a r) : edist x.1 y.1 ‚â† ‚ä§ :=
  lt_top_iff_ne_top.1 <|
    calc
      edist x y ‚â§ edist a x + edist a y := edist_triangle_left x.1 y.1 a
      _ < r + r := by rw [edist_comm a x, edist_comm a y] <;> exact add_lt_add x.2 y.2
      _ ‚â§ ‚ä§ := le_top
      
#align edist_ne_top_of_mem_ball edist_ne_top_of_mem_ball

#print metricSpaceEMetricBall /-
/-- Each ball in an extended metric space gives us a metric space, as the edist
is everywhere finite. -/
def metricSpaceEMetricBall (a : Œ≤) (r : ‚Ñù‚â•0‚àû) : MetricSpace (ball a r) :=
  EMetricSpace.toMetricSpace edist_ne_top_of_mem_ball
#align metric_space_emetric_ball metricSpaceEMetricBall
-/

attribute [local instance] metricSpaceEMetricBall

#print nhds_eq_nhds_emetric_ball /-
theorem nhds_eq_nhds_emetric_ball (a x : Œ≤) (r : ‚Ñù‚â•0‚àû) (h : x ‚àà ball a r) :
    ùìù x = map (coe : ball a r ‚Üí Œ≤) (ùìù ‚ü®x, h‚ü©) :=
  (map_nhds_subtype_coe_eq_nhds _ <| IsOpen.mem_nhds EMetric.isOpen_ball h).symm
#align nhds_eq_nhds_emetric_ball nhds_eq_nhds_emetric_ball
-/

end

section

variable [PseudoEMetricSpace Œ±]

open Emetric

/- warning: tendsto_iff_edist_tendsto_0 -> tendsto_iff_edist_tendsto_0 is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : PseudoEMetricSpace.{u1} Œ±] {l : Filter.{u2} Œ≤} {f : Œ≤ -> Œ±} {y : Œ±}, Iff (Filter.Tendsto.{u2, u1} Œ≤ Œ± f l (nhds.{u1} Œ± (UniformSpace.toTopologicalSpace.{u1} Œ± (PseudoEMetricSpace.toUniformSpace.{u1} Œ± _inst_1)) y)) (Filter.Tendsto.{u2, 0} Œ≤ ENNReal (fun (x : Œ≤) => EDist.edist.{u1} Œ± (PseudoEMetricSpace.toHasEdist.{u1} Œ± _inst_1) (f x) y) l (nhds.{0} ENNReal ENNReal.topologicalSpace (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))))
but is expected to have type
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : PseudoEMetricSpace.{u1} Œ±] {l : Filter.{u2} Œ≤} {f : Œ≤ -> Œ±} {y : Œ±}, Iff (Filter.Tendsto.{u2, u1} Œ≤ Œ± f l (nhds.{u1} Œ± (UniformSpace.toTopologicalSpace.{u1} Œ± (PseudoEMetricSpace.toUniformSpace.{u1} Œ± _inst_1)) y)) (Filter.Tendsto.{u2, 0} Œ≤ ENNReal (fun (x : Œ≤) => EDist.edist.{u1} Œ± (PseudoEMetricSpace.toEDist.{u1} Œ± _inst_1) (f x) y) l (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))))
Case conversion may be inaccurate. Consider using '#align tendsto_iff_edist_tendsto_0 tendsto_iff_edist_tendsto_0‚Çì'. -/
theorem tendsto_iff_edist_tendsto_0 {l : Filter Œ≤} {f : Œ≤ ‚Üí Œ±} {y : Œ±} :
    Tendsto f l (ùìù y) ‚Üî Tendsto (fun x => edist (f x) y) l (ùìù 0) := by
  simp only [emetric.nhds_basis_eball.tendsto_right_iff, EMetric.mem_ball,
    @tendsto_order ‚Ñù‚â•0‚àû Œ≤ _ _, forall_prop_of_false ENNReal.not_lt_zero, forall_const, true_and_iff]
#align tendsto_iff_edist_tendsto_0 tendsto_iff_edist_tendsto_0

/- warning: emetric.cauchy_seq_iff_le_tendsto_0 -> EMetric.cauchySeq_iff_le_tendsto_0 is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : PseudoEMetricSpace.{u1} Œ±] [_inst_2 : Nonempty.{succ u2} Œ≤] [_inst_3 : SemilatticeSup.{u2} Œ≤] {s : Œ≤ -> Œ±}, Iff (CauchySeq.{u1, u2} Œ± Œ≤ (PseudoEMetricSpace.toUniformSpace.{u1} Œ± _inst_1) _inst_3 s) (Exists.{succ u2} (Œ≤ -> ENNReal) (fun (b : Œ≤ -> ENNReal) => And (forall (n : Œ≤) (m : Œ≤) (N : Œ≤), (LE.le.{u2} Œ≤ (Preorder.toHasLe.{u2} Œ≤ (PartialOrder.toPreorder.{u2} Œ≤ (SemilatticeSup.toPartialOrder.{u2} Œ≤ _inst_3))) N n) -> (LE.le.{u2} Œ≤ (Preorder.toHasLe.{u2} Œ≤ (PartialOrder.toPreorder.{u2} Œ≤ (SemilatticeSup.toPartialOrder.{u2} Œ≤ _inst_3))) N m) -> (LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (EDist.edist.{u1} Œ± (PseudoEMetricSpace.toHasEdist.{u1} Œ± _inst_1) (s n) (s m)) (b N))) (Filter.Tendsto.{u2, 0} Œ≤ ENNReal b (Filter.atTop.{u2} Œ≤ (PartialOrder.toPreorder.{u2} Œ≤ (SemilatticeSup.toPartialOrder.{u2} Œ≤ _inst_3))) (nhds.{0} ENNReal ENNReal.topologicalSpace (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))))))
but is expected to have type
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : PseudoEMetricSpace.{u1} Œ±] [_inst_2 : Nonempty.{succ u2} Œ≤] [_inst_3 : SemilatticeSup.{u2} Œ≤] {s : Œ≤ -> Œ±}, Iff (CauchySeq.{u1, u2} Œ± Œ≤ (PseudoEMetricSpace.toUniformSpace.{u1} Œ± _inst_1) _inst_3 s) (Exists.{succ u2} (Œ≤ -> ENNReal) (fun (b : Œ≤ -> ENNReal) => And (forall (n : Œ≤) (m : Œ≤) (N : Œ≤), (LE.le.{u2} Œ≤ (Preorder.toLE.{u2} Œ≤ (PartialOrder.toPreorder.{u2} Œ≤ (SemilatticeSup.toPartialOrder.{u2} Œ≤ _inst_3))) N n) -> (LE.le.{u2} Œ≤ (Preorder.toLE.{u2} Œ≤ (PartialOrder.toPreorder.{u2} Œ≤ (SemilatticeSup.toPartialOrder.{u2} Œ≤ _inst_3))) N m) -> (LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (EDist.edist.{u1} Œ± (PseudoEMetricSpace.toEDist.{u1} Œ± _inst_1) (s n) (s m)) (b N))) (Filter.Tendsto.{u2, 0} Œ≤ ENNReal b (Filter.atTop.{u2} Œ≤ (PartialOrder.toPreorder.{u2} Œ≤ (SemilatticeSup.toPartialOrder.{u2} Œ≤ _inst_3))) (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))))))
Case conversion may be inaccurate. Consider using '#align emetric.cauchy_seq_iff_le_tendsto_0 EMetric.cauchySeq_iff_le_tendsto_0‚Çì'. -/
/-- Yet another metric characterization of Cauchy sequences on integers. This one is often the
most efficient. -/
theorem EMetric.cauchySeq_iff_le_tendsto_0 [Nonempty Œ≤] [SemilatticeSup Œ≤] {s : Œ≤ ‚Üí Œ±} :
    CauchySeq s ‚Üî
      ‚àÉ b : Œ≤ ‚Üí ‚Ñù‚â•0‚àû,
        (‚àÄ n m N : Œ≤, N ‚â§ n ‚Üí N ‚â§ m ‚Üí edist (s n) (s m) ‚â§ b N) ‚àß Tendsto b atTop (ùìù 0) :=
  ‚ü®by
    intro hs
    rw [EMetric.cauchySeq_iff] at hs
    /- `s` is Cauchy sequence. The sequence `b` will be constructed by taking
      the supremum of the distances between `s n` and `s m` for `n m ‚â• N`-/
    let b N := Sup ((fun p : Œ≤ √ó Œ≤ => edist (s p.1) (s p.2)) '' { p | p.1 ‚â• N ‚àß p.2 ‚â• N })
    --Prove that it bounds the distances of points in the Cauchy sequence
    have C : ‚àÄ n m N, N ‚â§ n ‚Üí N ‚â§ m ‚Üí edist (s n) (s m) ‚â§ b N :=
      by
      refine' fun m n N hm hn => le_sSup _
      use Prod.mk m n
      simp only [and_true_iff, eq_self_iff_true, Set.mem_setOf_eq]
      exact ‚ü®hm, hn‚ü©
    --Prove that it tends to `0`, by using the Cauchy property of `s`
    have D : tendsto b at_top (ùìù 0) :=
      by
      refine' tendsto_order.2 ‚ü®fun a ha => absurd ha ENNReal.not_lt_zero, fun Œµ Œµpos => _‚ü©
      rcases exists_between Œµpos with ‚ü®Œ¥, Œ¥pos, Œ¥lt‚ü©
      rcases hs Œ¥ Œ¥pos with ‚ü®N, hN‚ü©
      refine' Filter.mem_atTop_sets.2 ‚ü®N, fun n hn => _‚ü©
      have : b n ‚â§ Œ¥ :=
        sSup_le
          (by
            simp only [and_imp, Set.mem_image, Set.mem_setOf_eq, exists_imp, Prod.exists]
            intro d p q hp hq hd
            rw [‚Üê hd]
            exact le_of_lt (hN p (le_trans hn hp) q (le_trans hn hq)))
      simpa using lt_of_le_of_lt this Œ¥lt
    -- Conclude
    exact ‚ü®b, ‚ü®C, D‚ü©‚ü©,
    by
    rintro ‚ü®b, ‚ü®b_bound, b_lim‚ü©‚ü©
    /-b : ‚Ñï ‚Üí ‚Ñù, b_bound : ‚àÄ (n m N : ‚Ñï), N ‚â§ n ‚Üí N ‚â§ m ‚Üí edist (s n) (s m) ‚â§ b N,
        b_lim : tendsto b at_top (ùìù 0)-/
    refine' EMetric.cauchySeq_iff.2 fun Œµ Œµpos => _
    have : ‚àÄ·∂† n in at_top, b n < Œµ := (tendsto_order.1 b_lim).2 _ Œµpos
    rcases Filter.mem_atTop_sets.1 this with ‚ü®N, hN‚ü©
    exact
      ‚ü®N, fun m hm n hn =>
        calc
          edist (s m) (s n) ‚â§ b N := b_bound m n N hm hn
          _ < Œµ := hN _ (le_refl N)
          ‚ü©‚ü©
#align emetric.cauchy_seq_iff_le_tendsto_0 EMetric.cauchySeq_iff_le_tendsto_0

/- warning: continuous_of_le_add_edist -> continuous_of_le_add_edist is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : PseudoEMetricSpace.{u1} Œ±] {f : Œ± -> ENNReal} (C : ENNReal), (Ne.{1} ENNReal C (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (forall (x : Œ±) (y : Œ±), LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (f x) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (f y) (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) C (EDist.edist.{u1} Œ± (PseudoEMetricSpace.toHasEdist.{u1} Œ± _inst_1) x y)))) -> (Continuous.{u1, 0} Œ± ENNReal (UniformSpace.toTopologicalSpace.{u1} Œ± (PseudoEMetricSpace.toUniformSpace.{u1} Œ± _inst_1)) ENNReal.topologicalSpace f)
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : PseudoEMetricSpace.{u1} Œ±] {f : Œ± -> ENNReal} (C : ENNReal), (Ne.{1} ENNReal C (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (forall (x : Œ±) (y : Œ±), LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (f x) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) (f y) (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) C (EDist.edist.{u1} Œ± (PseudoEMetricSpace.toEDist.{u1} Œ± _inst_1) x y)))) -> (Continuous.{u1, 0} Œ± ENNReal (UniformSpace.toTopologicalSpace.{u1} Œ± (PseudoEMetricSpace.toUniformSpace.{u1} Œ± _inst_1)) ENNReal.instTopologicalSpaceENNReal f)
Case conversion may be inaccurate. Consider using '#align continuous_of_le_add_edist continuous_of_le_add_edist‚Çì'. -/
theorem continuous_of_le_add_edist {f : Œ± ‚Üí ‚Ñù‚â•0‚àû} (C : ‚Ñù‚â•0‚àû) (hC : C ‚â† ‚ä§)
    (h : ‚àÄ x y, f x ‚â§ f y + C * edist x y) : Continuous f :=
  by
  rcases eq_or_ne C 0 with (rfl | C0)
  ¬∑ simp only [MulZeroClass.zero_mul, add_zero] at h
    exact continuous_of_const fun x y => le_antisymm (h _ _) (h _ _)
  ¬∑ refine' continuous_iff_continuousAt.2 fun x => _
    by_cases hx : f x = ‚àû
    ¬∑ have : f =·∂†[ùìù x] fun _ => ‚àû :=
        by
        filter_upwards [EMetric.ball_mem_nhds x ENNReal.coe_lt_top]
        refine' fun y (hy : edist y x < ‚ä§) => _
        rw [edist_comm] at hy
        simpa [hx, ENNReal.mul_ne_top hC hy.ne] using h x y
      exact this.continuous_at
    ¬∑ refine' (ENNReal.tendsto_nhds hx).2 fun Œµ (Œµ0 : 0 < Œµ) => _
      filter_upwards [EMetric.closedBall_mem_nhds x (ENNReal.div_pos_iff.2 ‚ü®Œµ0.ne', hC‚ü©)]
      have hŒµC : C * (Œµ / C) = Œµ := ENNReal.mul_div_cancel' C0 hC
      refine' fun y (hy : edist y x ‚â§ Œµ / C) => ‚ü®tsub_le_iff_right.2 _, _‚ü©
      ¬∑ rw [edist_comm] at hy
        calc
          f x ‚â§ f y + C * edist x y := h x y
          _ ‚â§ f y + C * (Œµ / C) := (add_le_add_left (mul_le_mul_left' hy C) (f y))
          _ = f y + Œµ := by rw [hŒµC]
          
      ¬∑
        calc
          f y ‚â§ f x + C * edist y x := h y x
          _ ‚â§ f x + C * (Œµ / C) := (add_le_add_left (mul_le_mul_left' hy C) (f x))
          _ = f x + Œµ := by rw [hŒµC]
          
#align continuous_of_le_add_edist continuous_of_le_add_edist

/- warning: continuous_edist -> continuous_edist is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : PseudoEMetricSpace.{u1} Œ±], Continuous.{u1, 0} (Prod.{u1, u1} Œ± Œ±) ENNReal (Prod.topologicalSpace.{u1, u1} Œ± Œ± (UniformSpace.toTopologicalSpace.{u1} Œ± (PseudoEMetricSpace.toUniformSpace.{u1} Œ± _inst_1)) (UniformSpace.toTopologicalSpace.{u1} Œ± (PseudoEMetricSpace.toUniformSpace.{u1} Œ± _inst_1))) ENNReal.topologicalSpace (fun (p : Prod.{u1, u1} Œ± Œ±) => EDist.edist.{u1} Œ± (PseudoEMetricSpace.toHasEdist.{u1} Œ± _inst_1) (Prod.fst.{u1, u1} Œ± Œ± p) (Prod.snd.{u1, u1} Œ± Œ± p))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : PseudoEMetricSpace.{u1} Œ±], Continuous.{u1, 0} (Prod.{u1, u1} Œ± Œ±) ENNReal (instTopologicalSpaceProd.{u1, u1} Œ± Œ± (UniformSpace.toTopologicalSpace.{u1} Œ± (PseudoEMetricSpace.toUniformSpace.{u1} Œ± _inst_1)) (UniformSpace.toTopologicalSpace.{u1} Œ± (PseudoEMetricSpace.toUniformSpace.{u1} Œ± _inst_1))) ENNReal.instTopologicalSpaceENNReal (fun (p : Prod.{u1, u1} Œ± Œ±) => EDist.edist.{u1} Œ± (PseudoEMetricSpace.toEDist.{u1} Œ± _inst_1) (Prod.fst.{u1, u1} Œ± Œ± p) (Prod.snd.{u1, u1} Œ± Œ± p))
Case conversion may be inaccurate. Consider using '#align continuous_edist continuous_edist‚Çì'. -/
theorem continuous_edist : Continuous fun p : Œ± √ó Œ± => edist p.1 p.2 :=
  by
  apply continuous_of_le_add_edist 2 (by norm_num)
  rintro ‚ü®x, y‚ü© ‚ü®x', y'‚ü©
  calc
    edist x y ‚â§ edist x x' + edist x' y' + edist y' y := edist_triangle4 _ _ _ _
    _ = edist x' y' + (edist x x' + edist y y') := by simp [edist_comm] <;> cc
    _ ‚â§ edist x' y' + (edist (x, y) (x', y') + edist (x, y) (x', y')) :=
      (add_le_add_left (add_le_add (le_max_left _ _) (le_max_right _ _)) _)
    _ = edist x' y' + 2 * edist (x, y) (x', y') := by rw [‚Üê mul_two, mul_comm]
    
#align continuous_edist continuous_edist

/- warning: continuous.edist -> Continuous.edist is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : PseudoEMetricSpace.{u1} Œ±] [_inst_2 : TopologicalSpace.{u2} Œ≤] {f : Œ≤ -> Œ±} {g : Œ≤ -> Œ±}, (Continuous.{u2, u1} Œ≤ Œ± _inst_2 (UniformSpace.toTopologicalSpace.{u1} Œ± (PseudoEMetricSpace.toUniformSpace.{u1} Œ± _inst_1)) f) -> (Continuous.{u2, u1} Œ≤ Œ± _inst_2 (UniformSpace.toTopologicalSpace.{u1} Œ± (PseudoEMetricSpace.toUniformSpace.{u1} Œ± _inst_1)) g) -> (Continuous.{u2, 0} Œ≤ ENNReal _inst_2 ENNReal.topologicalSpace (fun (b : Œ≤) => EDist.edist.{u1} Œ± (PseudoEMetricSpace.toHasEdist.{u1} Œ± _inst_1) (f b) (g b)))
but is expected to have type
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : PseudoEMetricSpace.{u1} Œ±] [_inst_2 : TopologicalSpace.{u2} Œ≤] {f : Œ≤ -> Œ±} {g : Œ≤ -> Œ±}, (Continuous.{u2, u1} Œ≤ Œ± _inst_2 (UniformSpace.toTopologicalSpace.{u1} Œ± (PseudoEMetricSpace.toUniformSpace.{u1} Œ± _inst_1)) f) -> (Continuous.{u2, u1} Œ≤ Œ± _inst_2 (UniformSpace.toTopologicalSpace.{u1} Œ± (PseudoEMetricSpace.toUniformSpace.{u1} Œ± _inst_1)) g) -> (Continuous.{u2, 0} Œ≤ ENNReal _inst_2 ENNReal.instTopologicalSpaceENNReal (fun (b : Œ≤) => EDist.edist.{u1} Œ± (PseudoEMetricSpace.toEDist.{u1} Œ± _inst_1) (f b) (g b)))
Case conversion may be inaccurate. Consider using '#align continuous.edist Continuous.edist‚Çì'. -/
@[continuity]
theorem Continuous.edist [TopologicalSpace Œ≤] {f g : Œ≤ ‚Üí Œ±} (hf : Continuous f)
    (hg : Continuous g) : Continuous fun b => edist (f b) (g b) :=
  continuous_edist.comp (hf.prod_mk hg : _)
#align continuous.edist Continuous.edist

/- warning: filter.tendsto.edist -> Filter.Tendsto.edist is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : PseudoEMetricSpace.{u1} Œ±] {f : Œ≤ -> Œ±} {g : Œ≤ -> Œ±} {x : Filter.{u2} Œ≤} {a : Œ±} {b : Œ±}, (Filter.Tendsto.{u2, u1} Œ≤ Œ± f x (nhds.{u1} Œ± (UniformSpace.toTopologicalSpace.{u1} Œ± (PseudoEMetricSpace.toUniformSpace.{u1} Œ± _inst_1)) a)) -> (Filter.Tendsto.{u2, u1} Œ≤ Œ± g x (nhds.{u1} Œ± (UniformSpace.toTopologicalSpace.{u1} Œ± (PseudoEMetricSpace.toUniformSpace.{u1} Œ± _inst_1)) b)) -> (Filter.Tendsto.{u2, 0} Œ≤ ENNReal (fun (x : Œ≤) => EDist.edist.{u1} Œ± (PseudoEMetricSpace.toHasEdist.{u1} Œ± _inst_1) (f x) (g x)) x (nhds.{0} ENNReal ENNReal.topologicalSpace (EDist.edist.{u1} Œ± (PseudoEMetricSpace.toHasEdist.{u1} Œ± _inst_1) a b)))
but is expected to have type
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : PseudoEMetricSpace.{u1} Œ±] {f : Œ≤ -> Œ±} {g : Œ≤ -> Œ±} {x : Filter.{u2} Œ≤} {a : Œ±} {b : Œ±}, (Filter.Tendsto.{u2, u1} Œ≤ Œ± f x (nhds.{u1} Œ± (UniformSpace.toTopologicalSpace.{u1} Œ± (PseudoEMetricSpace.toUniformSpace.{u1} Œ± _inst_1)) a)) -> (Filter.Tendsto.{u2, u1} Œ≤ Œ± g x (nhds.{u1} Œ± (UniformSpace.toTopologicalSpace.{u1} Œ± (PseudoEMetricSpace.toUniformSpace.{u1} Œ± _inst_1)) b)) -> (Filter.Tendsto.{u2, 0} Œ≤ ENNReal (fun (x : Œ≤) => EDist.edist.{u1} Œ± (PseudoEMetricSpace.toEDist.{u1} Œ± _inst_1) (f x) (g x)) x (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (EDist.edist.{u1} Œ± (PseudoEMetricSpace.toEDist.{u1} Œ± _inst_1) a b)))
Case conversion may be inaccurate. Consider using '#align filter.tendsto.edist Filter.Tendsto.edist‚Çì'. -/
theorem Filter.Tendsto.edist {f g : Œ≤ ‚Üí Œ±} {x : Filter Œ≤} {a b : Œ±} (hf : Tendsto f x (ùìù a))
    (hg : Tendsto g x (ùìù b)) : Tendsto (fun x => edist (f x) (g x)) x (ùìù (edist a b)) :=
  (continuous_edist.Tendsto (a, b)).comp (hf.prod_mk_nhds hg)
#align filter.tendsto.edist Filter.Tendsto.edist

/- warning: cauchy_seq_of_edist_le_of_tsum_ne_top -> cauchySeq_of_edist_le_of_tsum_ne_top is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : PseudoEMetricSpace.{u1} Œ±] {f : Nat -> Œ±} (d : Nat -> ENNReal), (forall (n : Nat), LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (EDist.edist.{u1} Œ± (PseudoEMetricSpace.toHasEdist.{u1} Œ± _inst_1) (f n) (f (Nat.succ n))) (d n)) -> (Ne.{1} ENNReal (tsum.{0, 0} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Nat d) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) -> (CauchySeq.{u1, 0} Œ± Nat (PseudoEMetricSpace.toUniformSpace.{u1} Œ± _inst_1) (CanonicallyLinearOrderedAddMonoid.semilatticeSup.{0} Nat Nat.canonicallyLinearOrderedAddMonoid) f)
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : PseudoEMetricSpace.{u1} Œ±] {f : Nat -> Œ±} (d : Nat -> ENNReal), (forall (n : Nat), LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (EDist.edist.{u1} Œ± (PseudoEMetricSpace.toEDist.{u1} Œ± _inst_1) (f n) (f (Nat.succ n))) (d n)) -> (Ne.{1} ENNReal (tsum.{0, 0} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Nat d) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) -> (CauchySeq.{u1, 0} Œ± Nat (PseudoEMetricSpace.toUniformSpace.{u1} Œ± _inst_1) (Lattice.toSemilatticeSup.{0} Nat Nat.instLatticeNat) f)
Case conversion may be inaccurate. Consider using '#align cauchy_seq_of_edist_le_of_tsum_ne_top cauchySeq_of_edist_le_of_tsum_ne_top‚Çì'. -/
theorem cauchySeq_of_edist_le_of_tsum_ne_top {f : ‚Ñï ‚Üí Œ±} (d : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû)
    (hf : ‚àÄ n, edist (f n) (f n.succ) ‚â§ d n) (hd : tsum d ‚â† ‚àû) : CauchySeq f :=
  by
  lift d to ‚Ñï ‚Üí NNReal using fun i => ENNReal.ne_top_of_tsum_ne_top hd i
  rw [ENNReal.tsum_coe_ne_top_iff_summable] at hd
  exact cauchySeq_of_edist_le_of_summable d hf hd
#align cauchy_seq_of_edist_le_of_tsum_ne_top cauchySeq_of_edist_le_of_tsum_ne_top

#print EMetric.isClosed_ball /-
theorem EMetric.isClosed_ball {a : Œ±} {r : ‚Ñù‚â•0‚àû} : IsClosed (closedBall a r) :=
  isClosed_le (continuous_id.edist continuous_const) continuous_const
#align emetric.is_closed_ball EMetric.isClosed_ball
-/

#print EMetric.diam_closure /-
@[simp]
theorem EMetric.diam_closure (s : Set Œ±) : diam (closure s) = diam s :=
  by
  refine' le_antisymm (diam_le fun x hx y hy => _) (diam_mono subset_closure)
  have : edist x y ‚àà closure (Iic (diam s)) :=
    map_mem_closure‚ÇÇ continuous_edist hx hy fun x hx y hy => edist_le_diam_of_mem hx hy
  rwa [closure_Iic] at this
#align emetric.diam_closure EMetric.diam_closure
-/

#print Metric.diam_closure /-
@[simp]
theorem Metric.diam_closure {Œ± : Type _} [PseudoMetricSpace Œ±] (s : Set Œ±) :
    Metric.diam (closure s) = diam s := by simp only [Metric.diam, EMetric.diam_closure]
#align metric.diam_closure Metric.diam_closure
-/

/- warning: is_closed_set_of_lipschitz_on_with -> isClosed_setOf_lipschitzOnWith is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_2 : PseudoEMetricSpace.{u1} Œ±] [_inst_3 : PseudoEMetricSpace.{u2} Œ≤] (K : NNReal) (s : Set.{u1} Œ±), IsClosed.{max u1 u2} (Œ± -> Œ≤) (Pi.topologicalSpace.{u1, u2} Œ± (fun (·æ∞ : Œ±) => Œ≤) (fun (a : Œ±) => UniformSpace.toTopologicalSpace.{u2} Œ≤ (PseudoEMetricSpace.toUniformSpace.{u2} Œ≤ _inst_3))) (setOf.{max u1 u2} (Œ± -> Œ≤) (fun (f : Œ± -> Œ≤) => LipschitzOnWith.{u1, u2} Œ± Œ≤ _inst_2 _inst_3 K f s))
but is expected to have type
  forall {Œ± : Type.{u2}} {Œ≤ : Type.{u1}} [_inst_2 : PseudoEMetricSpace.{u2} Œ±] [_inst_3 : PseudoEMetricSpace.{u1} Œ≤] (K : NNReal) (s : Set.{u2} Œ±), IsClosed.{max u2 u1} (Œ± -> Œ≤) (Pi.topologicalSpace.{u2, u1} Œ± (fun (·æ∞ : Œ±) => Œ≤) (fun (a : Œ±) => UniformSpace.toTopologicalSpace.{u1} Œ≤ (PseudoEMetricSpace.toUniformSpace.{u1} Œ≤ _inst_3))) (setOf.{max u2 u1} (Œ± -> Œ≤) (fun (f : Œ± -> Œ≤) => LipschitzOnWith.{u2, u1} Œ± Œ≤ _inst_2 _inst_3 K f s))
Case conversion may be inaccurate. Consider using '#align is_closed_set_of_lipschitz_on_with isClosed_setOf_lipschitzOnWith‚Çì'. -/
theorem isClosed_setOf_lipschitzOnWith {Œ± Œ≤} [PseudoEMetricSpace Œ±] [PseudoEMetricSpace Œ≤] (K : ‚Ñù‚â•0)
    (s : Set Œ±) : IsClosed { f : Œ± ‚Üí Œ≤ | LipschitzOnWith K f s } :=
  by
  simp only [LipschitzOnWith, set_of_forall]
  refine' isClosed_biInter fun x hx => isClosed_biInter fun y hy => isClosed_le _ _
  exacts[Continuous.edist (continuous_apply x) (continuous_apply y), continuous_const]
#align is_closed_set_of_lipschitz_on_with isClosed_setOf_lipschitzOnWith

/- warning: is_closed_set_of_lipschitz_with -> isClosed_setOf_lipschitzWith is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_2 : PseudoEMetricSpace.{u1} Œ±] [_inst_3 : PseudoEMetricSpace.{u2} Œ≤] (K : NNReal), IsClosed.{max u1 u2} (Œ± -> Œ≤) (Pi.topologicalSpace.{u1, u2} Œ± (fun (·æ∞ : Œ±) => Œ≤) (fun (a : Œ±) => UniformSpace.toTopologicalSpace.{u2} Œ≤ (PseudoEMetricSpace.toUniformSpace.{u2} Œ≤ _inst_3))) (setOf.{max u1 u2} (Œ± -> Œ≤) (fun (f : Œ± -> Œ≤) => LipschitzWith.{u1, u2} Œ± Œ≤ _inst_2 _inst_3 K f))
but is expected to have type
  forall {Œ± : Type.{u2}} {Œ≤ : Type.{u1}} [_inst_2 : PseudoEMetricSpace.{u2} Œ±] [_inst_3 : PseudoEMetricSpace.{u1} Œ≤] (K : NNReal), IsClosed.{max u2 u1} (Œ± -> Œ≤) (Pi.topologicalSpace.{u2, u1} Œ± (fun (·æ∞ : Œ±) => Œ≤) (fun (a : Œ±) => UniformSpace.toTopologicalSpace.{u1} Œ≤ (PseudoEMetricSpace.toUniformSpace.{u1} Œ≤ _inst_3))) (setOf.{max u2 u1} (Œ± -> Œ≤) (fun (f : Œ± -> Œ≤) => LipschitzWith.{u2, u1} Œ± Œ≤ _inst_2 _inst_3 K f))
Case conversion may be inaccurate. Consider using '#align is_closed_set_of_lipschitz_with isClosed_setOf_lipschitzWith‚Çì'. -/
theorem isClosed_setOf_lipschitzWith {Œ± Œ≤} [PseudoEMetricSpace Œ±] [PseudoEMetricSpace Œ≤] (K : ‚Ñù‚â•0) :
    IsClosed { f : Œ± ‚Üí Œ≤ | LipschitzWith K f } := by
  simp only [‚Üê lipschitz_on_univ, isClosed_setOf_lipschitzOnWith]
#align is_closed_set_of_lipschitz_with isClosed_setOf_lipschitzWith

namespace Real

/- warning: real.ediam_eq -> Real.ediam_eq is a dubious translation:
lean 3 declaration is
  forall {s : Set.{0} Real}, (Metric.Bounded.{0} Real Real.pseudoMetricSpace s) -> (Eq.{1} ENNReal (EMetric.diam.{0} Real (PseudoMetricSpace.toPseudoEMetricSpace.{0} Real Real.pseudoMetricSpace) s) (ENNReal.ofReal (HSub.hSub.{0, 0, 0} Real Real Real (instHSub.{0} Real Real.hasSub) (SupSet.sSup.{0} Real Real.hasSup s) (InfSet.sInf.{0} Real Real.hasInf s))))
but is expected to have type
  forall {s : Set.{0} Real}, (Metric.Bounded.{0} Real Real.pseudoMetricSpace s) -> (Eq.{1} ENNReal (EMetric.diam.{0} Real (EMetricSpace.toPseudoEMetricSpace.{0} Real (MetricSpace.toEMetricSpace.{0} Real Real.metricSpace)) s) (ENNReal.ofReal (HSub.hSub.{0, 0, 0} Real Real Real (instHSub.{0} Real Real.instSubReal) (SupSet.sSup.{0} Real Real.instSupSetReal s) (InfSet.sInf.{0} Real Real.instInfSetReal s))))
Case conversion may be inaccurate. Consider using '#align real.ediam_eq Real.ediam_eq‚Çì'. -/
/-- For a bounded set `s : set ‚Ñù`, its `emetric.diam` is equal to `Sup s - Inf s` reinterpreted as
`‚Ñù‚â•0‚àû`. -/
theorem ediam_eq {s : Set ‚Ñù} (h : Bounded s) : EMetric.diam s = ENNReal.ofReal (sSup s - sInf s) :=
  by
  rcases eq_empty_or_nonempty s with (rfl | hne); ¬∑ simp
  refine' le_antisymm (Metric.ediam_le_of_forall_dist_le fun x hx y hy => _) _
  ¬∑ have := Real.subset_Icc_sInf_sSup_of_bounded h
    exact Real.dist_le_of_mem_Icc (this hx) (this hy)
  ¬∑ apply ENNReal.ofReal_le_of_le_toReal
    rw [‚Üê Metric.diam, ‚Üê Metric.diam_closure]
    have h' := Real.bounded_iff_bddBelow_bddAbove.1 h
    calc
      Sup s - Inf s ‚â§ dist (Sup s) (Inf s) := le_abs_self _
      _ ‚â§ diam (closure s) :=
        dist_le_diam_of_mem h.closure (csSup_mem_closure hne h'.2) (csInf_mem_closure hne h'.1)
      
#align real.ediam_eq Real.ediam_eq

/- warning: real.diam_eq -> Real.diam_eq is a dubious translation:
lean 3 declaration is
  forall {s : Set.{0} Real}, (Metric.Bounded.{0} Real Real.pseudoMetricSpace s) -> (Eq.{1} Real (Metric.diam.{0} Real Real.pseudoMetricSpace s) (HSub.hSub.{0, 0, 0} Real Real Real (instHSub.{0} Real Real.hasSub) (SupSet.sSup.{0} Real Real.hasSup s) (InfSet.sInf.{0} Real Real.hasInf s)))
but is expected to have type
  forall {s : Set.{0} Real}, (Metric.Bounded.{0} Real Real.pseudoMetricSpace s) -> (Eq.{1} Real (Metric.diam.{0} Real Real.pseudoMetricSpace s) (HSub.hSub.{0, 0, 0} Real Real Real (instHSub.{0} Real Real.instSubReal) (SupSet.sSup.{0} Real Real.instSupSetReal s) (InfSet.sInf.{0} Real Real.instInfSetReal s)))
Case conversion may be inaccurate. Consider using '#align real.diam_eq Real.diam_eq‚Çì'. -/
/-- For a bounded set `s : set ‚Ñù`, its `metric.diam` is equal to `Sup s - Inf s`. -/
theorem diam_eq {s : Set ‚Ñù} (h : Bounded s) : Metric.diam s = sSup s - sInf s :=
  by
  rw [Metric.diam, Real.ediam_eq h, ENNReal.toReal_ofReal]
  rw [Real.bounded_iff_bddBelow_bddAbove] at h
  exact sub_nonneg.2 (Real.sInf_le_sSup s h.1 h.2)
#align real.diam_eq Real.diam_eq

/- warning: real.ediam_Ioo -> Real.ediam_Ioo is a dubious translation:
lean 3 declaration is
  forall (a : Real) (b : Real), Eq.{1} ENNReal (EMetric.diam.{0} Real (PseudoMetricSpace.toPseudoEMetricSpace.{0} Real Real.pseudoMetricSpace) (Set.Ioo.{0} Real Real.preorder a b)) (ENNReal.ofReal (HSub.hSub.{0, 0, 0} Real Real Real (instHSub.{0} Real Real.hasSub) b a))
but is expected to have type
  forall (a : Real) (b : Real), Eq.{1} ENNReal (EMetric.diam.{0} Real (EMetricSpace.toPseudoEMetricSpace.{0} Real (MetricSpace.toEMetricSpace.{0} Real Real.metricSpace)) (Set.Ioo.{0} Real Real.instPreorderReal a b)) (ENNReal.ofReal (HSub.hSub.{0, 0, 0} Real Real Real (instHSub.{0} Real Real.instSubReal) b a))
Case conversion may be inaccurate. Consider using '#align real.ediam_Ioo Real.ediam_Ioo‚Çì'. -/
@[simp]
theorem ediam_Ioo (a b : ‚Ñù) : EMetric.diam (Ioo a b) = ENNReal.ofReal (b - a) :=
  by
  rcases le_or_lt b a with (h | h)
  ¬∑ simp [h]
  ¬∑ rw [Real.ediam_eq (bounded_Ioo _ _), csSup_Ioo h, csInf_Ioo h]
#align real.ediam_Ioo Real.ediam_Ioo

/- warning: real.ediam_Icc -> Real.ediam_Icc is a dubious translation:
lean 3 declaration is
  forall (a : Real) (b : Real), Eq.{1} ENNReal (EMetric.diam.{0} Real (PseudoMetricSpace.toPseudoEMetricSpace.{0} Real Real.pseudoMetricSpace) (Set.Icc.{0} Real Real.preorder a b)) (ENNReal.ofReal (HSub.hSub.{0, 0, 0} Real Real Real (instHSub.{0} Real Real.hasSub) b a))
but is expected to have type
  forall (a : Real) (b : Real), Eq.{1} ENNReal (EMetric.diam.{0} Real (EMetricSpace.toPseudoEMetricSpace.{0} Real (MetricSpace.toEMetricSpace.{0} Real Real.metricSpace)) (Set.Icc.{0} Real Real.instPreorderReal a b)) (ENNReal.ofReal (HSub.hSub.{0, 0, 0} Real Real Real (instHSub.{0} Real Real.instSubReal) b a))
Case conversion may be inaccurate. Consider using '#align real.ediam_Icc Real.ediam_Icc‚Çì'. -/
@[simp]
theorem ediam_Icc (a b : ‚Ñù) : EMetric.diam (Icc a b) = ENNReal.ofReal (b - a) :=
  by
  rcases le_or_lt a b with (h | h)
  ¬∑ rw [Real.ediam_eq (bounded_Icc _ _), csSup_Icc h, csInf_Icc h]
  ¬∑ simp [h, h.le]
#align real.ediam_Icc Real.ediam_Icc

/- warning: real.ediam_Ico -> Real.ediam_Ico is a dubious translation:
lean 3 declaration is
  forall (a : Real) (b : Real), Eq.{1} ENNReal (EMetric.diam.{0} Real (PseudoMetricSpace.toPseudoEMetricSpace.{0} Real Real.pseudoMetricSpace) (Set.Ico.{0} Real Real.preorder a b)) (ENNReal.ofReal (HSub.hSub.{0, 0, 0} Real Real Real (instHSub.{0} Real Real.hasSub) b a))
but is expected to have type
  forall (a : Real) (b : Real), Eq.{1} ENNReal (EMetric.diam.{0} Real (EMetricSpace.toPseudoEMetricSpace.{0} Real (MetricSpace.toEMetricSpace.{0} Real Real.metricSpace)) (Set.Ico.{0} Real Real.instPreorderReal a b)) (ENNReal.ofReal (HSub.hSub.{0, 0, 0} Real Real Real (instHSub.{0} Real Real.instSubReal) b a))
Case conversion may be inaccurate. Consider using '#align real.ediam_Ico Real.ediam_Ico‚Çì'. -/
@[simp]
theorem ediam_Ico (a b : ‚Ñù) : EMetric.diam (Ico a b) = ENNReal.ofReal (b - a) :=
  le_antisymm (ediam_Icc a b ‚ñ∏ diam_mono Ico_subset_Icc_self)
    (ediam_Ioo a b ‚ñ∏ diam_mono Ioo_subset_Ico_self)
#align real.ediam_Ico Real.ediam_Ico

/- warning: real.ediam_Ioc -> Real.ediam_Ioc is a dubious translation:
lean 3 declaration is
  forall (a : Real) (b : Real), Eq.{1} ENNReal (EMetric.diam.{0} Real (PseudoMetricSpace.toPseudoEMetricSpace.{0} Real Real.pseudoMetricSpace) (Set.Ioc.{0} Real Real.preorder a b)) (ENNReal.ofReal (HSub.hSub.{0, 0, 0} Real Real Real (instHSub.{0} Real Real.hasSub) b a))
but is expected to have type
  forall (a : Real) (b : Real), Eq.{1} ENNReal (EMetric.diam.{0} Real (EMetricSpace.toPseudoEMetricSpace.{0} Real (MetricSpace.toEMetricSpace.{0} Real Real.metricSpace)) (Set.Ioc.{0} Real Real.instPreorderReal a b)) (ENNReal.ofReal (HSub.hSub.{0, 0, 0} Real Real Real (instHSub.{0} Real Real.instSubReal) b a))
Case conversion may be inaccurate. Consider using '#align real.ediam_Ioc Real.ediam_Ioc‚Çì'. -/
@[simp]
theorem ediam_Ioc (a b : ‚Ñù) : EMetric.diam (Ioc a b) = ENNReal.ofReal (b - a) :=
  le_antisymm (ediam_Icc a b ‚ñ∏ diam_mono Ioc_subset_Icc_self)
    (ediam_Ioo a b ‚ñ∏ diam_mono Ioo_subset_Ioc_self)
#align real.ediam_Ioc Real.ediam_Ioc

/- warning: real.diam_Icc -> Real.diam_Icc is a dubious translation:
lean 3 declaration is
  forall {a : Real} {b : Real}, (LE.le.{0} Real Real.hasLe a b) -> (Eq.{1} Real (Metric.diam.{0} Real Real.pseudoMetricSpace (Set.Icc.{0} Real Real.preorder a b)) (HSub.hSub.{0, 0, 0} Real Real Real (instHSub.{0} Real Real.hasSub) b a))
but is expected to have type
  forall {a : Real} {b : Real}, (LE.le.{0} Real Real.instLEReal a b) -> (Eq.{1} Real (Metric.diam.{0} Real Real.pseudoMetricSpace (Set.Icc.{0} Real Real.instPreorderReal a b)) (HSub.hSub.{0, 0, 0} Real Real Real (instHSub.{0} Real Real.instSubReal) b a))
Case conversion may be inaccurate. Consider using '#align real.diam_Icc Real.diam_Icc‚Çì'. -/
theorem diam_Icc {a b : ‚Ñù} (h : a ‚â§ b) : Metric.diam (Icc a b) = b - a := by
  simp [Metric.diam, ENNReal.toReal_ofReal, sub_nonneg.2 h]
#align real.diam_Icc Real.diam_Icc

/- warning: real.diam_Ico -> Real.diam_Ico is a dubious translation:
lean 3 declaration is
  forall {a : Real} {b : Real}, (LE.le.{0} Real Real.hasLe a b) -> (Eq.{1} Real (Metric.diam.{0} Real Real.pseudoMetricSpace (Set.Ico.{0} Real Real.preorder a b)) (HSub.hSub.{0, 0, 0} Real Real Real (instHSub.{0} Real Real.hasSub) b a))
but is expected to have type
  forall {a : Real} {b : Real}, (LE.le.{0} Real Real.instLEReal a b) -> (Eq.{1} Real (Metric.diam.{0} Real Real.pseudoMetricSpace (Set.Ico.{0} Real Real.instPreorderReal a b)) (HSub.hSub.{0, 0, 0} Real Real Real (instHSub.{0} Real Real.instSubReal) b a))
Case conversion may be inaccurate. Consider using '#align real.diam_Ico Real.diam_Ico‚Çì'. -/
theorem diam_Ico {a b : ‚Ñù} (h : a ‚â§ b) : Metric.diam (Ico a b) = b - a := by
  simp [Metric.diam, ENNReal.toReal_ofReal, sub_nonneg.2 h]
#align real.diam_Ico Real.diam_Ico

/- warning: real.diam_Ioc -> Real.diam_Ioc is a dubious translation:
lean 3 declaration is
  forall {a : Real} {b : Real}, (LE.le.{0} Real Real.hasLe a b) -> (Eq.{1} Real (Metric.diam.{0} Real Real.pseudoMetricSpace (Set.Ioc.{0} Real Real.preorder a b)) (HSub.hSub.{0, 0, 0} Real Real Real (instHSub.{0} Real Real.hasSub) b a))
but is expected to have type
  forall {a : Real} {b : Real}, (LE.le.{0} Real Real.instLEReal a b) -> (Eq.{1} Real (Metric.diam.{0} Real Real.pseudoMetricSpace (Set.Ioc.{0} Real Real.instPreorderReal a b)) (HSub.hSub.{0, 0, 0} Real Real Real (instHSub.{0} Real Real.instSubReal) b a))
Case conversion may be inaccurate. Consider using '#align real.diam_Ioc Real.diam_Ioc‚Çì'. -/
theorem diam_Ioc {a b : ‚Ñù} (h : a ‚â§ b) : Metric.diam (Ioc a b) = b - a := by
  simp [Metric.diam, ENNReal.toReal_ofReal, sub_nonneg.2 h]
#align real.diam_Ioc Real.diam_Ioc

/- warning: real.diam_Ioo -> Real.diam_Ioo is a dubious translation:
lean 3 declaration is
  forall {a : Real} {b : Real}, (LE.le.{0} Real Real.hasLe a b) -> (Eq.{1} Real (Metric.diam.{0} Real Real.pseudoMetricSpace (Set.Ioo.{0} Real Real.preorder a b)) (HSub.hSub.{0, 0, 0} Real Real Real (instHSub.{0} Real Real.hasSub) b a))
but is expected to have type
  forall {a : Real} {b : Real}, (LE.le.{0} Real Real.instLEReal a b) -> (Eq.{1} Real (Metric.diam.{0} Real Real.pseudoMetricSpace (Set.Ioo.{0} Real Real.instPreorderReal a b)) (HSub.hSub.{0, 0, 0} Real Real Real (instHSub.{0} Real Real.instSubReal) b a))
Case conversion may be inaccurate. Consider using '#align real.diam_Ioo Real.diam_Ioo‚Çì'. -/
theorem diam_Ioo {a b : ‚Ñù} (h : a ‚â§ b) : Metric.diam (Ioo a b) = b - a := by
  simp [Metric.diam, ENNReal.toReal_ofReal, sub_nonneg.2 h]
#align real.diam_Ioo Real.diam_Ioo

end Real

/- warning: edist_le_tsum_of_edist_le_of_tendsto -> edist_le_tsum_of_edist_le_of_tendsto is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : PseudoEMetricSpace.{u1} Œ±] {f : Nat -> Œ±} (d : Nat -> ENNReal), (forall (n : Nat), LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (EDist.edist.{u1} Œ± (PseudoEMetricSpace.toHasEdist.{u1} Œ± _inst_1) (f n) (f (Nat.succ n))) (d n)) -> (forall {a : Œ±}, (Filter.Tendsto.{0, u1} Nat Œ± f (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (OrderedCancelAddCommMonoid.toPartialOrder.{0} Nat (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} Nat Nat.strictOrderedSemiring)))) (nhds.{u1} Œ± (UniformSpace.toTopologicalSpace.{u1} Œ± (PseudoEMetricSpace.toUniformSpace.{u1} Œ± _inst_1)) a)) -> (forall (n : Nat), LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (EDist.edist.{u1} Œ± (PseudoEMetricSpace.toHasEdist.{u1} Œ± _inst_1) (f n) a) (tsum.{0, 0} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Nat (fun (m : Nat) => d (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat Nat.hasAdd) n m)))))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : PseudoEMetricSpace.{u1} Œ±] {f : Nat -> Œ±} (d : Nat -> ENNReal), (forall (n : Nat), LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (EDist.edist.{u1} Œ± (PseudoEMetricSpace.toEDist.{u1} Œ± _inst_1) (f n) (f (Nat.succ n))) (d n)) -> (forall {a : Œ±}, (Filter.Tendsto.{0, u1} Nat Œ± f (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (StrictOrderedSemiring.toPartialOrder.{0} Nat Nat.strictOrderedSemiring))) (nhds.{u1} Œ± (UniformSpace.toTopologicalSpace.{u1} Œ± (PseudoEMetricSpace.toUniformSpace.{u1} Œ± _inst_1)) a)) -> (forall (n : Nat), LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (EDist.edist.{u1} Œ± (PseudoEMetricSpace.toEDist.{u1} Œ± _inst_1) (f n) a) (tsum.{0, 0} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Nat (fun (m : Nat) => d (HAdd.hAdd.{0, 0, 0} Nat Nat Nat (instHAdd.{0} Nat instAddNat) n m)))))
Case conversion may be inaccurate. Consider using '#align edist_le_tsum_of_edist_le_of_tendsto edist_le_tsum_of_edist_le_of_tendsto‚Çì'. -/
/-- If `edist (f n) (f (n+1))` is bounded above by a function `d : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû`,
then the distance from `f n` to the limit is bounded by `‚àë'_{k=n}^‚àû d k`. -/
theorem edist_le_tsum_of_edist_le_of_tendsto {f : ‚Ñï ‚Üí Œ±} (d : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû)
    (hf : ‚àÄ n, edist (f n) (f n.succ) ‚â§ d n) {a : Œ±} (ha : Tendsto f atTop (ùìù a)) (n : ‚Ñï) :
    edist (f n) a ‚â§ ‚àë' m, d (n + m) :=
  by
  refine' le_of_tendsto (tendsto_const_nhds.edist ha) (mem_at_top_sets.2 ‚ü®n, fun m hnm => _‚ü©)
  refine' le_trans (edist_le_Ico_sum_of_edist_le hnm fun k _ _ => hf k) _
  rw [Finset.sum_Ico_eq_sum_range]
  exact sum_le_tsum _ (fun _ _ => zero_le _) ENNReal.summable
#align edist_le_tsum_of_edist_le_of_tendsto edist_le_tsum_of_edist_le_of_tendsto

/- warning: edist_le_tsum_of_edist_le_of_tendsto‚ÇÄ -> edist_le_tsum_of_edist_le_of_tendsto‚ÇÄ is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : PseudoEMetricSpace.{u1} Œ±] {f : Nat -> Œ±} (d : Nat -> ENNReal), (forall (n : Nat), LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (EDist.edist.{u1} Œ± (PseudoEMetricSpace.toHasEdist.{u1} Œ± _inst_1) (f n) (f (Nat.succ n))) (d n)) -> (forall {a : Œ±}, (Filter.Tendsto.{0, u1} Nat Œ± f (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (OrderedCancelAddCommMonoid.toPartialOrder.{0} Nat (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} Nat Nat.strictOrderedSemiring)))) (nhds.{u1} Œ± (UniformSpace.toTopologicalSpace.{u1} Œ± (PseudoEMetricSpace.toUniformSpace.{u1} Œ± _inst_1)) a)) -> (LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (EDist.edist.{u1} Œ± (PseudoEMetricSpace.toHasEdist.{u1} Œ± _inst_1) (f (OfNat.ofNat.{0} Nat 0 (OfNat.mk.{0} Nat 0 (Zero.zero.{0} Nat Nat.hasZero)))) a) (tsum.{0, 0} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Nat (fun (m : Nat) => d m))))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : PseudoEMetricSpace.{u1} Œ±] {f : Nat -> Œ±} (d : Nat -> ENNReal), (forall (n : Nat), LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (EDist.edist.{u1} Œ± (PseudoEMetricSpace.toEDist.{u1} Œ± _inst_1) (f n) (f (Nat.succ n))) (d n)) -> (forall {a : Œ±}, (Filter.Tendsto.{0, u1} Nat Œ± f (Filter.atTop.{0} Nat (PartialOrder.toPreorder.{0} Nat (StrictOrderedSemiring.toPartialOrder.{0} Nat Nat.strictOrderedSemiring))) (nhds.{u1} Œ± (UniformSpace.toTopologicalSpace.{u1} Œ± (PseudoEMetricSpace.toUniformSpace.{u1} Œ± _inst_1)) a)) -> (LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (EDist.edist.{u1} Œ± (PseudoEMetricSpace.toEDist.{u1} Œ± _inst_1) (f (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))) a) (tsum.{0, 0} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Nat (fun (m : Nat) => d m))))
Case conversion may be inaccurate. Consider using '#align edist_le_tsum_of_edist_le_of_tendsto‚ÇÄ edist_le_tsum_of_edist_le_of_tendsto‚ÇÄ‚Çì'. -/
/-- If `edist (f n) (f (n+1))` is bounded above by a function `d : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû`,
then the distance from `f 0` to the limit is bounded by `‚àë'_{k=0}^‚àû d k`. -/
theorem edist_le_tsum_of_edist_le_of_tendsto‚ÇÄ {f : ‚Ñï ‚Üí Œ±} (d : ‚Ñï ‚Üí ‚Ñù‚â•0‚àû)
    (hf : ‚àÄ n, edist (f n) (f n.succ) ‚â§ d n) {a : Œ±} (ha : Tendsto f atTop (ùìù a)) :
    edist (f 0) a ‚â§ ‚àë' m, d m := by simpa using edist_le_tsum_of_edist_le_of_tendsto d hf ha 0
#align edist_le_tsum_of_edist_le_of_tendsto‚ÇÄ edist_le_tsum_of_edist_le_of_tendsto‚ÇÄ

end

--section
