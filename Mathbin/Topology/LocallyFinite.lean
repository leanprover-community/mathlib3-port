/-
Copyright (c) 2022 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov

! This file was ported from Lean 3 source module topology.locally_finite
! leanprover-community/mathlib commit 32253a1a1071173b33dc7d6a218cf722c6feb514
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Topology.Basic
import Mathbin.Order.Filter.SmallSets

/-!
### Locally finite families of sets

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

We say that a family of sets in a topological space is *locally finite* if at every point `x : X`,
there is a neighborhood of `x` which meets only finitely many sets in the family.

In this file we give the definition and prove basic properties of locally finite families of sets.
-/


-- locally finite family [General Topology (Bourbaki, 1995)]
open Set Function Filter

open Topology Filter

universe u

variable {Œπ : Type u} {Œπ' Œ± X Y : Type _} [TopologicalSpace X] [TopologicalSpace Y]
  {f g : Œπ ‚Üí Set X}

#print LocallyFinite /-
/-- A family of sets in `set X` is locally finite if at every point `x : X`,
there is a neighborhood of `x` which meets only finitely many sets in the family. -/
def LocallyFinite (f : Œπ ‚Üí Set X) :=
  ‚àÄ x : X, ‚àÉ t ‚àà ùìù x, { i | (f i ‚à© t).Nonempty }.Finite
#align locally_finite LocallyFinite
-/

/- warning: locally_finite_of_finite -> locallyFinite_of_finite is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {X : Type.{u2}} [_inst_1 : TopologicalSpace.{u2} X] [_inst_3 : Finite.{succ u1} Œπ] (f : Œπ -> (Set.{u2} X)), LocallyFinite.{u1, u2} Œπ X _inst_1 f
but is expected to have type
  forall {Œπ : Type.{u2}} {X : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} X] [_inst_3 : Finite.{succ u2} Œπ] (f : Œπ -> (Set.{u1} X)), LocallyFinite.{u2, u1} Œπ X _inst_1 f
Case conversion may be inaccurate. Consider using '#align locally_finite_of_finite locallyFinite_of_finite‚Çì'. -/
theorem locallyFinite_of_finite [Finite Œπ] (f : Œπ ‚Üí Set X) : LocallyFinite f := fun x =>
  ‚ü®univ, univ_mem, toFinite _‚ü©
#align locally_finite_of_finite locallyFinite_of_finite

namespace LocallyFinite

/- warning: locally_finite.point_finite -> LocallyFinite.point_finite is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {X : Type.{u2}} [_inst_1 : TopologicalSpace.{u2} X] {f : Œπ -> (Set.{u2} X)}, (LocallyFinite.{u1, u2} Œπ X _inst_1 f) -> (forall (x : X), Set.Finite.{u1} Œπ (setOf.{u1} Œπ (fun (b : Œπ) => Membership.Mem.{u2, u2} X (Set.{u2} X) (Set.hasMem.{u2} X) x (f b))))
but is expected to have type
  forall {Œπ : Type.{u2}} {X : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} X] {f : Œπ -> (Set.{u1} X)}, (LocallyFinite.{u2, u1} Œπ X _inst_1 f) -> (forall (x : X), Set.Finite.{u2} Œπ (setOf.{u2} Œπ (fun (b : Œπ) => Membership.mem.{u1, u1} X (Set.{u1} X) (Set.instMembershipSet.{u1} X) x (f b))))
Case conversion may be inaccurate. Consider using '#align locally_finite.point_finite LocallyFinite.point_finite‚Çì'. -/
theorem point_finite (hf : LocallyFinite f) (x : X) : { b | x ‚àà f b }.Finite :=
  let ‚ü®t, hxt, ht‚ü© := hf x
  ht.Subset fun b hb => ‚ü®x, hb, mem_of_mem_nhds hxt‚ü©
#align locally_finite.point_finite LocallyFinite.point_finite

/- warning: locally_finite.subset -> LocallyFinite.subset is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {X : Type.{u2}} [_inst_1 : TopologicalSpace.{u2} X] {f : Œπ -> (Set.{u2} X)} {g : Œπ -> (Set.{u2} X)}, (LocallyFinite.{u1, u2} Œπ X _inst_1 f) -> (forall (i : Œπ), HasSubset.Subset.{u2} (Set.{u2} X) (Set.hasSubset.{u2} X) (g i) (f i)) -> (LocallyFinite.{u1, u2} Œπ X _inst_1 g)
but is expected to have type
  forall {Œπ : Type.{u2}} {X : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} X] {f : Œπ -> (Set.{u1} X)} {g : Œπ -> (Set.{u1} X)}, (LocallyFinite.{u2, u1} Œπ X _inst_1 f) -> (forall (i : Œπ), HasSubset.Subset.{u1} (Set.{u1} X) (Set.instHasSubsetSet.{u1} X) (g i) (f i)) -> (LocallyFinite.{u2, u1} Œπ X _inst_1 g)
Case conversion may be inaccurate. Consider using '#align locally_finite.subset LocallyFinite.subset‚Çì'. -/
protected theorem subset (hf : LocallyFinite f) (hg : ‚àÄ i, g i ‚äÜ f i) : LocallyFinite g := fun a =>
  let ‚ü®t, ht‚ÇÅ, ht‚ÇÇ‚ü© := hf a
  ‚ü®t, ht‚ÇÅ, ht‚ÇÇ.Subset fun i hi => hi.mono <| inter_subset_inter (hg i) Subset.rfl‚ü©
#align locally_finite.subset LocallyFinite.subset

/- warning: locally_finite.comp_inj_on -> LocallyFinite.comp_injOn is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {Œπ' : Type.{u2}} {X : Type.{u3}} [_inst_1 : TopologicalSpace.{u3} X] {f : Œπ -> (Set.{u3} X)} {g : Œπ' -> Œπ}, (LocallyFinite.{u1, u3} Œπ X _inst_1 f) -> (Set.InjOn.{u2, u1} Œπ' Œπ g (setOf.{u2} Œπ' (fun (i : Œπ') => Set.Nonempty.{u3} X (f (g i))))) -> (LocallyFinite.{u2, u3} Œπ' X _inst_1 (Function.comp.{succ u2, succ u1, succ u3} Œπ' Œπ (Set.{u3} X) f g))
but is expected to have type
  forall {Œπ : Type.{u3}} {Œπ' : Type.{u1}} {X : Type.{u2}} [_inst_1 : TopologicalSpace.{u2} X] {f : Œπ -> (Set.{u2} X)} {g : Œπ' -> Œπ}, (LocallyFinite.{u3, u2} Œπ X _inst_1 f) -> (Set.InjOn.{u1, u3} Œπ' Œπ g (setOf.{u1} Œπ' (fun (i : Œπ') => Set.Nonempty.{u2} X (f (g i))))) -> (LocallyFinite.{u1, u2} Œπ' X _inst_1 (Function.comp.{succ u1, succ u3, succ u2} Œπ' Œπ (Set.{u2} X) f g))
Case conversion may be inaccurate. Consider using '#align locally_finite.comp_inj_on LocallyFinite.comp_injOn‚Çì'. -/
theorem comp_injOn {g : Œπ' ‚Üí Œπ} (hf : LocallyFinite f) (hg : InjOn g { i | (f (g i)).Nonempty }) :
    LocallyFinite (f ‚àò g) := fun x =>
  let ‚ü®t, htx, htf‚ü© := hf x
  ‚ü®t, htx, htf.Preimage <| hg.mono fun i hi => hi.out.mono <| inter_subset_left _ _‚ü©
#align locally_finite.comp_inj_on LocallyFinite.comp_injOn

/- warning: locally_finite.comp_injective -> LocallyFinite.comp_injective is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {Œπ' : Type.{u2}} {X : Type.{u3}} [_inst_1 : TopologicalSpace.{u3} X] {f : Œπ -> (Set.{u3} X)} {g : Œπ' -> Œπ}, (LocallyFinite.{u1, u3} Œπ X _inst_1 f) -> (Function.Injective.{succ u2, succ u1} Œπ' Œπ g) -> (LocallyFinite.{u2, u3} Œπ' X _inst_1 (Function.comp.{succ u2, succ u1, succ u3} Œπ' Œπ (Set.{u3} X) f g))
but is expected to have type
  forall {Œπ : Type.{u3}} {Œπ' : Type.{u1}} {X : Type.{u2}} [_inst_1 : TopologicalSpace.{u2} X] {f : Œπ -> (Set.{u2} X)} {g : Œπ' -> Œπ}, (LocallyFinite.{u3, u2} Œπ X _inst_1 f) -> (Function.Injective.{succ u1, succ u3} Œπ' Œπ g) -> (LocallyFinite.{u1, u2} Œπ' X _inst_1 (Function.comp.{succ u1, succ u3, succ u2} Œπ' Œπ (Set.{u2} X) f g))
Case conversion may be inaccurate. Consider using '#align locally_finite.comp_injective LocallyFinite.comp_injective‚Çì'. -/
theorem comp_injective {g : Œπ' ‚Üí Œπ} (hf : LocallyFinite f) (hg : Injective g) :
    LocallyFinite (f ‚àò g) :=
  hf.comp_injOn (hg.InjOn _)
#align locally_finite.comp_injective LocallyFinite.comp_injective

/- warning: locally_finite_iff_small_sets -> locallyFinite_iff_smallSets is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {X : Type.{u2}} [_inst_1 : TopologicalSpace.{u2} X] {f : Œπ -> (Set.{u2} X)}, Iff (LocallyFinite.{u1, u2} Œπ X _inst_1 f) (forall (x : X), Filter.Eventually.{u2} (Set.{u2} X) (fun (s : Set.{u2} X) => Set.Finite.{u1} Œπ (setOf.{u1} Œπ (fun (i : Œπ) => Set.Nonempty.{u2} X (Inter.inter.{u2} (Set.{u2} X) (Set.hasInter.{u2} X) (f i) s)))) (Filter.smallSets.{u2} X (nhds.{u2} X _inst_1 x)))
but is expected to have type
  forall {Œπ : Type.{u2}} {X : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} X] {f : Œπ -> (Set.{u1} X)}, Iff (LocallyFinite.{u2, u1} Œπ X _inst_1 f) (forall (x : X), Filter.Eventually.{u1} (Set.{u1} X) (fun (s : Set.{u1} X) => Set.Finite.{u2} Œπ (setOf.{u2} Œπ (fun (i : Œπ) => Set.Nonempty.{u1} X (Inter.inter.{u1} (Set.{u1} X) (Set.instInterSet.{u1} X) (f i) s)))) (Filter.smallSets.{u1} X (nhds.{u1} X _inst_1 x)))
Case conversion may be inaccurate. Consider using '#align locally_finite_iff_small_sets locallyFinite_iff_smallSets‚Çì'. -/
theorem locallyFinite_iff_smallSets :
    LocallyFinite f ‚Üî ‚àÄ x, ‚àÄ·∂† s in (ùìù x).smallSets, { i | (f i ‚à© s).Nonempty }.Finite :=
  forall_congr' fun x =>
    Iff.symm <|
      eventually_small_sets' fun s t hst ht =>
        ht.Subset fun i hi => hi.mono <| inter_subset_inter_right _ hst
#align locally_finite_iff_small_sets locallyFinite_iff_smallSets

/- warning: locally_finite.eventually_small_sets -> LocallyFinite.eventually_smallSets is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {X : Type.{u2}} [_inst_1 : TopologicalSpace.{u2} X] {f : Œπ -> (Set.{u2} X)}, (LocallyFinite.{u1, u2} Œπ X _inst_1 f) -> (forall (x : X), Filter.Eventually.{u2} (Set.{u2} X) (fun (s : Set.{u2} X) => Set.Finite.{u1} Œπ (setOf.{u1} Œπ (fun (i : Œπ) => Set.Nonempty.{u2} X (Inter.inter.{u2} (Set.{u2} X) (Set.hasInter.{u2} X) (f i) s)))) (Filter.smallSets.{u2} X (nhds.{u2} X _inst_1 x)))
but is expected to have type
  forall {Œπ : Type.{u2}} {X : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} X] {f : Œπ -> (Set.{u1} X)}, (LocallyFinite.{u2, u1} Œπ X _inst_1 f) -> (forall (x : X), Filter.Eventually.{u1} (Set.{u1} X) (fun (s : Set.{u1} X) => Set.Finite.{u2} Œπ (setOf.{u2} Œπ (fun (i : Œπ) => Set.Nonempty.{u1} X (Inter.inter.{u1} (Set.{u1} X) (Set.instInterSet.{u1} X) (f i) s)))) (Filter.smallSets.{u1} X (nhds.{u1} X _inst_1 x)))
Case conversion may be inaccurate. Consider using '#align locally_finite.eventually_small_sets LocallyFinite.eventually_smallSets‚Çì'. -/
protected theorem eventually_smallSets (hf : LocallyFinite f) (x : X) :
    ‚àÄ·∂† s in (ùìù x).smallSets, { i | (f i ‚à© s).Nonempty }.Finite :=
  locallyFinite_iff_smallSets.mp hf x
#align locally_finite.eventually_small_sets LocallyFinite.eventually_smallSets

/- warning: locally_finite.exists_mem_basis -> LocallyFinite.exists_mem_basis is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {X : Type.{u2}} [_inst_1 : TopologicalSpace.{u2} X] {f : Œπ -> (Set.{u2} X)} {Œπ' : Sort.{u3}}, (LocallyFinite.{u1, u2} Œπ X _inst_1 f) -> (forall {p : Œπ' -> Prop} {s : Œπ' -> (Set.{u2} X)} {x : X}, (Filter.HasBasis.{u2, u3} X Œπ' (nhds.{u2} X _inst_1 x) p s) -> (Exists.{u3} Œπ' (fun (i : Œπ') => Exists.{0} (p i) (fun (hi : p i) => Set.Finite.{u1} Œπ (setOf.{u1} Œπ (fun (j : Œπ) => Set.Nonempty.{u2} X (Inter.inter.{u2} (Set.{u2} X) (Set.hasInter.{u2} X) (f j) (s i))))))))
but is expected to have type
  forall {Œπ : Type.{u2}} {X : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} X] {f : Œπ -> (Set.{u1} X)} {Œπ' : Sort.{u3}}, (LocallyFinite.{u2, u1} Œπ X _inst_1 f) -> (forall {p : Œπ' -> Prop} {s : Œπ' -> (Set.{u1} X)} {x : X}, (Filter.HasBasis.{u1, u3} X Œπ' (nhds.{u1} X _inst_1 x) p s) -> (Exists.{u3} Œπ' (fun (i : Œπ') => And (p i) (Set.Finite.{u2} Œπ (setOf.{u2} Œπ (fun (j : Œπ) => Set.Nonempty.{u1} X (Inter.inter.{u1} (Set.{u1} X) (Set.instInterSet.{u1} X) (f j) (s i))))))))
Case conversion may be inaccurate. Consider using '#align locally_finite.exists_mem_basis LocallyFinite.exists_mem_basis‚Çì'. -/
theorem exists_mem_basis {Œπ' : Sort _} (hf : LocallyFinite f) {p : Œπ' ‚Üí Prop} {s : Œπ' ‚Üí Set X}
    {x : X} (hb : (ùìù x).HasBasis p s) : ‚àÉ (i : _)(hi : p i), { j | (f j ‚à© s i).Nonempty }.Finite :=
  let ‚ü®i, hpi, hi‚ü© := hb.smallSets.eventually_iff.mp (hf.eventually_smallSets x)
  ‚ü®i, hpi, hi Subset.rfl‚ü©
#align locally_finite.exists_mem_basis LocallyFinite.exists_mem_basis

/- warning: locally_finite.closure -> LocallyFinite.closure is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {X : Type.{u2}} [_inst_1 : TopologicalSpace.{u2} X] {f : Œπ -> (Set.{u2} X)}, (LocallyFinite.{u1, u2} Œπ X _inst_1 f) -> (LocallyFinite.{u1, u2} Œπ X _inst_1 (fun (i : Œπ) => closure.{u2} X _inst_1 (f i)))
but is expected to have type
  forall {Œπ : Type.{u2}} {X : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} X] {f : Œπ -> (Set.{u1} X)}, (LocallyFinite.{u2, u1} Œπ X _inst_1 f) -> (LocallyFinite.{u2, u1} Œπ X _inst_1 (fun (i : Œπ) => closure.{u1} X _inst_1 (f i)))
Case conversion may be inaccurate. Consider using '#align locally_finite.closure LocallyFinite.closure‚Çì'. -/
protected theorem closure (hf : LocallyFinite f) : LocallyFinite fun i => closure (f i) :=
  by
  intro x
  rcases hf x with ‚ü®s, hsx, hsf‚ü©
  refine' ‚ü®interior s, interior_mem_nhds.2 hsx, hsf.subset fun i hi => _‚ü©
  exact
    (hi.mono is_open_interior.closure_inter).of_closure.mono
      (inter_subset_inter_right _ interior_subset)
#align locally_finite.closure LocallyFinite.closure

/- warning: locally_finite.is_closed_Union -> LocallyFinite.isClosed_union·µ¢ is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {X : Type.{u2}} [_inst_1 : TopologicalSpace.{u2} X] {f : Œπ -> (Set.{u2} X)}, (LocallyFinite.{u1, u2} Œπ X _inst_1 f) -> (forall (i : Œπ), IsClosed.{u2} X _inst_1 (f i)) -> (IsClosed.{u2} X _inst_1 (Set.union·µ¢.{u2, succ u1} X Œπ (fun (i : Œπ) => f i)))
but is expected to have type
  forall {Œπ : Type.{u2}} {X : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} X] {f : Œπ -> (Set.{u1} X)}, (LocallyFinite.{u2, u1} Œπ X _inst_1 f) -> (forall (i : Œπ), IsClosed.{u1} X _inst_1 (f i)) -> (IsClosed.{u1} X _inst_1 (Set.union·µ¢.{u1, succ u2} X Œπ (fun (i : Œπ) => f i)))
Case conversion may be inaccurate. Consider using '#align locally_finite.is_closed_Union LocallyFinite.isClosed_union·µ¢‚Çì'. -/
theorem isClosed_union·µ¢ (hf : LocallyFinite f) (hc : ‚àÄ i, IsClosed (f i)) : IsClosed (‚ãÉ i, f i) :=
  by
  simp only [‚Üê isOpen_compl_iff, compl_Union, isOpen_iff_mem_nhds, mem_Inter]
  intro a ha
  replace ha : ‚àÄ i, f i·∂ú ‚àà ùìù a := fun i => (hc i).isOpen_compl.mem_nhds (ha i)
  rcases hf a with ‚ü®t, h_nhds, h_fin‚ü©
  have : (t ‚à© ‚ãÇ i ‚àà { i | (f i ‚à© t).Nonempty }, f i·∂ú) ‚àà ùìù a :=
    inter_mem h_nhds ((bInter_mem h_fin).2 fun i _ => ha i)
  filter_upwards [this]
  simp only [mem_inter_iff, mem_Inter]
  rintro b ‚ü®hbt, hn‚ü© i hfb
  exact hn i ‚ü®b, hfb, hbt‚ü© hfb
#align locally_finite.is_closed_Union LocallyFinite.isClosed_union·µ¢

/- warning: locally_finite.closure_Union -> LocallyFinite.closure_union·µ¢ is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {X : Type.{u2}} [_inst_1 : TopologicalSpace.{u2} X] {f : Œπ -> (Set.{u2} X)}, (LocallyFinite.{u1, u2} Œπ X _inst_1 f) -> (Eq.{succ u2} (Set.{u2} X) (closure.{u2} X _inst_1 (Set.union·µ¢.{u2, succ u1} X Œπ (fun (i : Œπ) => f i))) (Set.union·µ¢.{u2, succ u1} X Œπ (fun (i : Œπ) => closure.{u2} X _inst_1 (f i))))
but is expected to have type
  forall {Œπ : Type.{u2}} {X : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} X] {f : Œπ -> (Set.{u1} X)}, (LocallyFinite.{u2, u1} Œπ X _inst_1 f) -> (Eq.{succ u1} (Set.{u1} X) (closure.{u1} X _inst_1 (Set.union·µ¢.{u1, succ u2} X Œπ (fun (i : Œπ) => f i))) (Set.union·µ¢.{u1, succ u2} X Œπ (fun (i : Œπ) => closure.{u1} X _inst_1 (f i))))
Case conversion may be inaccurate. Consider using '#align locally_finite.closure_Union LocallyFinite.closure_union·µ¢‚Çì'. -/
theorem closure_union·µ¢ (h : LocallyFinite f) : closure (‚ãÉ i, f i) = ‚ãÉ i, closure (f i) :=
  Subset.antisymm
    (closure_minimal (union·µ¢_mono fun _ => subset_closure) <|
      h.closure.isClosed_union·µ¢ fun _ => isClosed_closure)
    (union·µ¢_subset fun i => closure_mono <| subset_union·µ¢ _ _)
#align locally_finite.closure_Union LocallyFinite.closure_union·µ¢

/- warning: locally_finite.Inter_compl_mem_nhds -> LocallyFinite.inter·µ¢_compl_mem_nhds is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {X : Type.{u2}} [_inst_1 : TopologicalSpace.{u2} X] {f : Œπ -> (Set.{u2} X)}, (LocallyFinite.{u1, u2} Œπ X _inst_1 f) -> (forall (i : Œπ), IsClosed.{u2} X _inst_1 (f i)) -> (forall (x : X), Membership.Mem.{u2, u2} (Set.{u2} X) (Filter.{u2} X) (Filter.hasMem.{u2} X) (Set.inter·µ¢.{u2, succ u1} X Œπ (fun (i : Œπ) => Set.inter·µ¢.{u2, 0} X (Not (Membership.Mem.{u2, u2} X (Set.{u2} X) (Set.hasMem.{u2} X) x (f i))) (fun (hi : Not (Membership.Mem.{u2, u2} X (Set.{u2} X) (Set.hasMem.{u2} X) x (f i))) => HasCompl.compl.{u2} (Set.{u2} X) (BooleanAlgebra.toHasCompl.{u2} (Set.{u2} X) (Set.booleanAlgebra.{u2} X)) (f i)))) (nhds.{u2} X _inst_1 x))
but is expected to have type
  forall {Œπ : Type.{u2}} {X : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} X] {f : Œπ -> (Set.{u1} X)}, (LocallyFinite.{u2, u1} Œπ X _inst_1 f) -> (forall (i : Œπ), IsClosed.{u1} X _inst_1 (f i)) -> (forall (x : X), Membership.mem.{u1, u1} (Set.{u1} X) (Filter.{u1} X) (instMembershipSetFilter.{u1} X) (Set.inter·µ¢.{u1, succ u2} X Œπ (fun (i : Œπ) => Set.inter·µ¢.{u1, 0} X (Not (Membership.mem.{u1, u1} X (Set.{u1} X) (Set.instMembershipSet.{u1} X) x (f i))) (fun (hi : Not (Membership.mem.{u1, u1} X (Set.{u1} X) (Set.instMembershipSet.{u1} X) x (f i))) => HasCompl.compl.{u1} (Set.{u1} X) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} X) (Set.instBooleanAlgebraSet.{u1} X)) (f i)))) (nhds.{u1} X _inst_1 x))
Case conversion may be inaccurate. Consider using '#align locally_finite.Inter_compl_mem_nhds LocallyFinite.inter·µ¢_compl_mem_nhds‚Çì'. -/
/-- If `f : Œ≤ ‚Üí set Œ±` is a locally finite family of closed sets, then for any `x : Œ±`, the
intersection of the complements to `f i`, `x ‚àâ f i`, is a neighbourhood of `x`. -/
theorem inter·µ¢_compl_mem_nhds (hf : LocallyFinite f) (hc : ‚àÄ i, IsClosed (f i)) (x : X) :
    (‚ãÇ (i) (hi : x ‚àâ f i), f i·∂ú) ‚àà ùìù x :=
  by
  refine' IsOpen.mem_nhds _ (mem_Inter‚ÇÇ.2 fun i => id)
  suffices IsClosed (‚ãÉ i : { i // x ‚àâ f i }, f i) by
    rwa [‚Üê isOpen_compl_iff, compl_Union, Inter_subtype] at this
  exact (hf.comp_injective Subtype.coe_injective).isClosed_union·µ¢ fun i => hc _
#align locally_finite.Inter_compl_mem_nhds LocallyFinite.inter·µ¢_compl_mem_nhds

#print LocallyFinite.exists_forall_eventually_eq_prod /-
/-- Let `f : ‚Ñï ‚Üí Œ† a, Œ≤ a` be a sequence of (dependent) functions on a topological space. Suppose
that the family of sets `s n = {x | f (n + 1) x ‚â† f n x}` is locally finite. Then there exists a
function `F : Œ† a, Œ≤ a` such that for any `x`, we have `f n x = F x` on the product of an infinite
interval `[N, +‚àû)` and a neighbourhood of `x`.

We formulate the conclusion in terms of the product of filter `filter.at_top` and `ùìù x`. -/
theorem exists_forall_eventually_eq_prod {œÄ : X ‚Üí Sort _} {f : ‚Ñï ‚Üí ‚àÄ x : X, œÄ x}
    (hf : LocallyFinite fun n => { x | f (n + 1) x ‚â† f n x }) :
    ‚àÉ F : ‚àÄ x : X, œÄ x, ‚àÄ x, ‚àÄ·∂† p : ‚Ñï √ó X in atTop √ó·∂† ùìù x, f p.1 p.2 = F p.2 :=
  by
  choose U hUx hU using hf
  choose N hN using fun x => (hU x).BddAbove
  replace hN : ‚àÄ (x), ‚àÄ n > N x, ‚àÄ y ‚àà U x, f (n + 1) y = f n y
  exact fun x n hn y hy => by_contra fun hne => hn.lt.not_le <| hN x ‚ü®y, hne, hy‚ü©
  replace hN : ‚àÄ (x), ‚àÄ n ‚â• N x + 1, ‚àÄ y ‚àà U x, f n y = f (N x + 1) y
  exact fun x n hn y hy => Nat.le_induction rfl (fun k hle => (hN x _ hle _ hy).trans) n hn
  refine' ‚ü®fun x => f (N x + 1) x, fun x => _‚ü©
  filter_upwards [Filter.prod_mem_prod (eventually_gt_at_top (N x)) (hUx x)]
  rintro ‚ü®n, y‚ü© ‚ü®hn : N x < n, hy : y ‚àà U x‚ü©
  calc
    f n y = f (N x + 1) y := hN _ _ hn _ hy
    _ = f (max (N x + 1) (N y + 1)) y := (hN _ _ (le_max_left _ _) _ hy).symm
    _ = f (N y + 1) y := hN _ _ (le_max_right _ _) _ (mem_of_mem_nhds <| hUx y)
    
#align locally_finite.exists_forall_eventually_eq_prod LocallyFinite.exists_forall_eventually_eq_prod
-/

#print LocallyFinite.exists_forall_eventually_atTop_eventually_eq' /-
/-- Let `f : ‚Ñï ‚Üí Œ† a, Œ≤ a` be a sequence of (dependent) functions on a topological space. Suppose
that the family of sets `s n = {x | f (n + 1) x ‚â† f n x}` is locally finite. Then there exists a
function `F : Œ† a, Œ≤ a` such that for any `x`, for sufficiently large values of `n`, we have
`f n y = F y` in a neighbourhood of `x`. -/
theorem exists_forall_eventually_atTop_eventually_eq' {œÄ : X ‚Üí Sort _} {f : ‚Ñï ‚Üí ‚àÄ x : X, œÄ x}
    (hf : LocallyFinite fun n => { x | f (n + 1) x ‚â† f n x }) :
    ‚àÉ F : ‚àÄ x : X, œÄ x, ‚àÄ x, ‚àÄ·∂† n : ‚Ñï in atTop, ‚àÄ·∂† y : X in ùìù x, f n y = F y :=
  hf.exists_forall_eventually_eq_prod.imp fun F hF x => (hF x).curry
#align locally_finite.exists_forall_eventually_at_top_eventually_eq' LocallyFinite.exists_forall_eventually_atTop_eventually_eq'
-/

#print LocallyFinite.exists_forall_eventually_atTop_eventuallyEq /-
/-- Let `f : ‚Ñï ‚Üí Œ± ‚Üí Œ≤` be a sequence of functions on a topological space. Suppose
that the family of sets `s n = {x | f (n + 1) x ‚â† f n x}` is locally finite. Then there exists a
function `F :  Œ± ‚Üí Œ≤` such that for any `x`, for sufficiently large values of `n`, we have
`f n =·∂†[ùìù x] F`. -/
theorem exists_forall_eventually_atTop_eventuallyEq {f : ‚Ñï ‚Üí X ‚Üí Œ±}
    (hf : LocallyFinite fun n => { x | f (n + 1) x ‚â† f n x }) :
    ‚àÉ F : X ‚Üí Œ±, ‚àÄ x, ‚àÄ·∂† n : ‚Ñï in atTop, f n =·∂†[ùìù x] F :=
  hf.exists_forall_eventually_atTop_eventually_eq'
#align locally_finite.exists_forall_eventually_at_top_eventually_eq LocallyFinite.exists_forall_eventually_atTop_eventuallyEq
-/

/- warning: locally_finite.preimage_continuous -> LocallyFinite.preimage_continuous is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {X : Type.{u2}} {Y : Type.{u3}} [_inst_1 : TopologicalSpace.{u2} X] [_inst_2 : TopologicalSpace.{u3} Y] {f : Œπ -> (Set.{u2} X)} {g : Y -> X}, (LocallyFinite.{u1, u2} Œπ X _inst_1 f) -> (Continuous.{u3, u2} Y X _inst_2 _inst_1 g) -> (LocallyFinite.{u1, u3} Œπ Y _inst_2 (fun (i : Œπ) => Set.preimage.{u3, u2} Y X g (f i)))
but is expected to have type
  forall {Œπ : Type.{u3}} {X : Type.{u2}} {Y : Type.{u1}} [_inst_1 : TopologicalSpace.{u2} X] [_inst_2 : TopologicalSpace.{u1} Y] {f : Œπ -> (Set.{u2} X)} {g : Y -> X}, (LocallyFinite.{u3, u2} Œπ X _inst_1 f) -> (Continuous.{u1, u2} Y X _inst_2 _inst_1 g) -> (LocallyFinite.{u3, u1} Œπ Y _inst_2 (fun (i : Œπ) => Set.preimage.{u1, u2} Y X g (f i)))
Case conversion may be inaccurate. Consider using '#align locally_finite.preimage_continuous LocallyFinite.preimage_continuous‚Çì'. -/
theorem preimage_continuous {g : Y ‚Üí X} (hf : LocallyFinite f) (hg : Continuous g) :
    LocallyFinite fun i => g ‚Åª¬π' f i := fun x =>
  let ‚ü®s, hsx, hs‚ü© := hf (g x)
  ‚ü®g ‚Åª¬π' s, hg.ContinuousAt hsx, hs.Subset fun i ‚ü®y, hy‚ü© => ‚ü®g y, hy‚ü©‚ü©
#align locally_finite.preimage_continuous LocallyFinite.preimage_continuous

end LocallyFinite

/- warning: equiv.locally_finite_comp_iff -> Equiv.locallyFinite_comp_iff is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {Œπ' : Type.{u2}} {X : Type.{u3}} [_inst_1 : TopologicalSpace.{u3} X] {f : Œπ -> (Set.{u3} X)} (e : Equiv.{succ u2, succ u1} Œπ' Œπ), Iff (LocallyFinite.{u2, u3} Œπ' X _inst_1 (Function.comp.{succ u2, succ u1, succ u3} Œπ' Œπ (Set.{u3} X) f (coeFn.{max 1 (max (succ u2) (succ u1)) (succ u1) (succ u2), max (succ u2) (succ u1)} (Equiv.{succ u2, succ u1} Œπ' Œπ) (fun (_x : Equiv.{succ u2, succ u1} Œπ' Œπ) => Œπ' -> Œπ) (Equiv.hasCoeToFun.{succ u2, succ u1} Œπ' Œπ) e))) (LocallyFinite.{u1, u3} Œπ X _inst_1 f)
but is expected to have type
  forall {Œπ : Type.{u2}} {Œπ' : Type.{u3}} {X : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} X] {f : Œπ -> (Set.{u1} X)} (e : Equiv.{succ u3, succ u2} Œπ' Œπ), Iff (LocallyFinite.{u3, u1} Œπ' X _inst_1 (Function.comp.{succ u3, succ u2, succ u1} Œπ' Œπ (Set.{u1} X) f (FunLike.coe.{max (succ u2) (succ u3), succ u3, succ u2} (Equiv.{succ u3, succ u2} Œπ' Œπ) Œπ' (fun (_x : Œπ') => (fun (x._@.Mathlib.Logic.Equiv.Defs._hyg.805 : Œπ') => Œπ) _x) (Equiv.instFunLikeEquiv.{succ u3, succ u2} Œπ' Œπ) e))) (LocallyFinite.{u2, u1} Œπ X _inst_1 f)
Case conversion may be inaccurate. Consider using '#align equiv.locally_finite_comp_iff Equiv.locallyFinite_comp_iff‚Çì'. -/
@[simp]
theorem Equiv.locallyFinite_comp_iff (e : Œπ' ‚âÉ Œπ) : LocallyFinite (f ‚àò e) ‚Üî LocallyFinite f :=
  ‚ü®fun h => by simpa only [(¬∑ ‚àò ¬∑), e.apply_symm_apply] using h.comp_injective e.symm.injective,
    fun h => h.comp_injective e.Injective‚ü©
#align equiv.locally_finite_comp_iff Equiv.locallyFinite_comp_iff

/- warning: locally_finite_sum -> locallyFinite_sum is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {Œπ' : Type.{u2}} {X : Type.{u3}} [_inst_1 : TopologicalSpace.{u3} X] {f : (Sum.{u1, u2} Œπ Œπ') -> (Set.{u3} X)}, Iff (LocallyFinite.{max u1 u2, u3} (Sum.{u1, u2} Œπ Œπ') X _inst_1 f) (And (LocallyFinite.{u1, u3} Œπ X _inst_1 (Function.comp.{succ u1, max (succ u1) (succ u2), succ u3} Œπ (Sum.{u1, u2} Œπ Œπ') (Set.{u3} X) f (Sum.inl.{u1, u2} Œπ Œπ'))) (LocallyFinite.{u2, u3} Œπ' X _inst_1 (Function.comp.{succ u2, max (succ u1) (succ u2), succ u3} Œπ' (Sum.{u1, u2} Œπ Œπ') (Set.{u3} X) f (Sum.inr.{u1, u2} Œπ Œπ'))))
but is expected to have type
  forall {Œπ : Type.{u3}} {Œπ' : Type.{u2}} {X : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} X] {f : (Sum.{u3, u2} Œπ Œπ') -> (Set.{u1} X)}, Iff (LocallyFinite.{max u3 u2, u1} (Sum.{u3, u2} Œπ Œπ') X _inst_1 f) (And (LocallyFinite.{u3, u1} Œπ X _inst_1 (Function.comp.{succ u3, max (succ u3) (succ u2), succ u1} Œπ (Sum.{u3, u2} Œπ Œπ') (Set.{u1} X) f (Sum.inl.{u3, u2} Œπ Œπ'))) (LocallyFinite.{u2, u1} Œπ' X _inst_1 (Function.comp.{succ u2, max (succ u3) (succ u2), succ u1} Œπ' (Sum.{u3, u2} Œπ Œπ') (Set.{u1} X) f (Sum.inr.{u3, u2} Œπ Œπ'))))
Case conversion may be inaccurate. Consider using '#align locally_finite_sum locallyFinite_sum‚Çì'. -/
theorem locallyFinite_sum {f : Sum Œπ Œπ' ‚Üí Set X} :
    LocallyFinite f ‚Üî LocallyFinite (f ‚àò Sum.inl) ‚àß LocallyFinite (f ‚àò Sum.inr) := by
  simp only [locallyFinite_iff_smallSets, ‚Üê forall_and, ‚Üê finite_preimage_inl_and_inr,
    preimage_set_of_eq, (¬∑ ‚àò ¬∑), eventually_and]
#align locally_finite_sum locallyFinite_sum

/- warning: locally_finite.sum_elim -> LocallyFinite.sum_elim is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {Œπ' : Type.{u2}} {X : Type.{u3}} [_inst_1 : TopologicalSpace.{u3} X] {f : Œπ -> (Set.{u3} X)} {g : Œπ' -> (Set.{u3} X)}, (LocallyFinite.{u1, u3} Œπ X _inst_1 f) -> (LocallyFinite.{u2, u3} Œπ' X _inst_1 g) -> (LocallyFinite.{max u1 u2, u3} (Sum.{u1, u2} Œπ Œπ') X _inst_1 (Sum.elim.{u1, u2, succ u3} Œπ Œπ' (Set.{u3} X) f g))
but is expected to have type
  forall {Œπ : Type.{u2}} {Œπ' : Type.{u1}} {X : Type.{u3}} [_inst_1 : TopologicalSpace.{u3} X] {f : Œπ -> (Set.{u3} X)} {g : Œπ' -> (Set.{u3} X)}, (LocallyFinite.{u2, u3} Œπ X _inst_1 f) -> (LocallyFinite.{u1, u3} Œπ' X _inst_1 g) -> (LocallyFinite.{max u1 u2, u3} (Sum.{u2, u1} Œπ Œπ') X _inst_1 (Sum.elim.{u2, u1, succ u3} Œπ Œπ' (Set.{u3} X) f g))
Case conversion may be inaccurate. Consider using '#align locally_finite.sum_elim LocallyFinite.sum_elim‚Çì'. -/
theorem LocallyFinite.sum_elim {g : Œπ' ‚Üí Set X} (hf : LocallyFinite f) (hg : LocallyFinite g) :
    LocallyFinite (Sum.elim f g) :=
  locallyFinite_sum.mpr ‚ü®hf, hg‚ü©
#align locally_finite.sum_elim LocallyFinite.sum_elim

/- warning: locally_finite_option -> locallyFinite_option is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {X : Type.{u2}} [_inst_1 : TopologicalSpace.{u2} X] {f : (Option.{u1} Œπ) -> (Set.{u2} X)}, Iff (LocallyFinite.{u1, u2} (Option.{u1} Œπ) X _inst_1 f) (LocallyFinite.{u1, u2} Œπ X _inst_1 (Function.comp.{succ u1, succ u1, succ u2} Œπ (Option.{u1} Œπ) (Set.{u2} X) f (Option.some.{u1} Œπ)))
but is expected to have type
  forall {Œπ : Type.{u2}} {X : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} X] {f : (Option.{u2} Œπ) -> (Set.{u1} X)}, Iff (LocallyFinite.{u2, u1} (Option.{u2} Œπ) X _inst_1 f) (LocallyFinite.{u2, u1} Œπ X _inst_1 (Function.comp.{succ u2, succ u2, succ u1} Œπ (Option.{u2} Œπ) (Set.{u1} X) f (Option.some.{u2} Œπ)))
Case conversion may be inaccurate. Consider using '#align locally_finite_option locallyFinite_option‚Çì'. -/
theorem locallyFinite_option {f : Option Œπ ‚Üí Set X} : LocallyFinite f ‚Üî LocallyFinite (f ‚àò some) :=
  by
  simp only [‚Üê (Equiv.optionEquivSumPUnit.{u} Œπ).symm.locallyFinite_comp_iff, locallyFinite_sum,
    locallyFinite_of_finite, and_true_iff]
  rfl
#align locally_finite_option locallyFinite_option

/- warning: locally_finite.option_elim -> LocallyFinite.option_elim' is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {X : Type.{u2}} [_inst_1 : TopologicalSpace.{u2} X] {f : Œπ -> (Set.{u2} X)}, (LocallyFinite.{u1, u2} Œπ X _inst_1 f) -> (forall (s : Set.{u2} X), LocallyFinite.{u1, u2} (Option.{u1} Œπ) X _inst_1 (Option.elim'.{u1, u2} Œπ (Set.{u2} X) s f))
but is expected to have type
  forall {Œπ : Type.{u2}} {X : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} X] {f : Œπ -> (Set.{u1} X)}, (LocallyFinite.{u2, u1} Œπ X _inst_1 f) -> (forall (s : Set.{u1} X), LocallyFinite.{u2, u1} (Option.{u2} Œπ) X _inst_1 (Option.elim'.{u2, u1} Œπ (Set.{u1} X) s f))
Case conversion may be inaccurate. Consider using '#align locally_finite.option_elim LocallyFinite.option_elim'‚Çì'. -/
theorem LocallyFinite.option_elim' (hf : LocallyFinite f) (s : Set X) :
    LocallyFinite (Option.elim' s f) :=
  locallyFinite_option.2 hf
#align locally_finite.option_elim LocallyFinite.option_elim'

