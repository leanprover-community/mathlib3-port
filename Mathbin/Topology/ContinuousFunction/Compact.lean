import Mathbin.Topology.ContinuousFunction.Bounded 
import Mathbin.Topology.UniformSpace.CompactSeparated 
import Mathbin.Tactic.EquivRw

/-!
# Continuous functions on a compact space

Continuous functions `C(Œ±, Œ≤)` from a compact space `Œ±` to a metric space `Œ≤`
are automatically bounded, and so acquire various structures inherited from `Œ± ‚Üí·µá Œ≤`.

This file transfers these structures, and restates some lemmas
characterising these structures.

If you need a lemma which is proved about `Œ± ‚Üí·µá Œ≤` but not for `C(Œ±, Œ≤)` when `Œ±` is compact,
you should restate it here. You can also use
`bounded_continuous_function.equiv_continuous_map_of_compact` to move functions back and forth.

-/


noncomputable theory

open_locale TopologicalSpace Classical Nnreal BoundedContinuousFunction

open Set Filter Metric

open BoundedContinuousFunction

namespace ContinuousMap

variable{Œ± Œ≤ E : Type _}[TopologicalSpace Œ±][CompactSpace Œ±][MetricSpace Œ≤][NormedGroup E]

section 

variable(Œ± Œ≤)

/--
When `Œ±` is compact, the bounded continuous maps `Œ± ‚Üí·µá Œ≤` are
equivalent to `C(Œ±, Œ≤)`.
-/
@[simps (config := { fullyApplied := ff })]
def equiv_bounded_of_compact : C(Œ±, Œ≤) ‚âÉ (Œ± ‚Üí·µá Œ≤) :=
  ‚ü®mk_of_compact, forget_boundedness Œ± Œ≤,
    fun f =>
      by 
        ext 
        rfl,
    fun f =>
      by 
        ext 
        rfl‚ü©

/--
When `Œ±` is compact, the bounded continuous maps `Œ± ‚Üí·µá ùïú` are
additively equivalent to `C(Œ±, ùïú)`.
-/
@[simps (config := { fullyApplied := ff }) apply symmApply]
def add_equiv_bounded_of_compact [AddMonoid‚Çì Œ≤] [HasLipschitzAdd Œ≤] : C(Œ±, Œ≤) ‚âÉ+ (Œ± ‚Üí·µá Œ≤) :=
  ({ forget_boundedness_add_hom Œ± Œ≤, (equiv_bounded_of_compact Œ± Œ≤).symm with  } : (Œ± ‚Üí·µá Œ≤) ‚âÉ+ C(Œ±, Œ≤)).symm

instance  : MetricSpace C(Œ±, Œ≤) :=
  MetricSpace.induced (equiv_bounded_of_compact Œ± Œ≤) (equiv_bounded_of_compact Œ± Œ≤).Injective
    (by 
      infer_instance)

/--
When `Œ±` is compact, and `Œ≤` is a metric space, the bounded continuous maps `Œ± ‚Üí·µá Œ≤` are
isometric to `C(Œ±, Œ≤)`.
-/
@[simps (config := { fullyApplied := ff }) toEquiv apply symmApply]
def isometric_bounded_of_compact : C(Œ±, Œ≤) ‚âÉ·µ¢ (Œ± ‚Üí·µá Œ≤) :=
  { isometry_to_fun := fun x y => rfl, toEquiv := equiv_bounded_of_compact Œ± Œ≤ }

end 

@[simp]
theorem _root_.bounded_continuous_function.dist_mk_of_compact (f g : C(Œ±, Œ≤)) :
  dist (mk_of_compact f) (mk_of_compact g) = dist f g :=
  rfl

@[simp]
theorem _root_.bounded_continuous_function.dist_forget_boundedness (f g : Œ± ‚Üí·µá Œ≤) :
  dist (f.forget_boundedness _ _) (g.forget_boundedness _ _) = dist f g :=
  rfl

open BoundedContinuousFunction

section 

variable{Œ± Œ≤}{f g : C(Œ±, Œ≤)}{C : ‚Ñù}

/-- The pointwise distance is controlled by the distance between functions, by definition. -/
theorem dist_apply_le_dist (x : Œ±) : dist (f x) (g x) ‚â§ dist f g :=
  by 
    simp only [‚Üêdist_mk_of_compact, dist_coe_le_dist, ‚Üêmk_of_compact_apply]

/-- The distance between two functions is controlled by the supremum of the pointwise distances -/
theorem dist_le (C0 : (0 : ‚Ñù) ‚â§ C) : dist f g ‚â§ C ‚Üî ‚àÄ (x : Œ±), dist (f x) (g x) ‚â§ C :=
  by 
    simp only [‚Üêdist_mk_of_compact, dist_le C0, mk_of_compact_apply]

theorem dist_le_iff_of_nonempty [Nonempty Œ±] : dist f g ‚â§ C ‚Üî ‚àÄ x, dist (f x) (g x) ‚â§ C :=
  by 
    simp only [‚Üêdist_mk_of_compact, dist_le_iff_of_nonempty, mk_of_compact_apply]

theorem dist_lt_iff_of_nonempty [Nonempty Œ±] : dist f g < C ‚Üî ‚àÄ (x : Œ±), dist (f x) (g x) < C :=
  by 
    simp only [‚Üêdist_mk_of_compact, dist_lt_iff_of_nonempty_compact, mk_of_compact_apply]

theorem dist_lt_of_nonempty [Nonempty Œ±] (w : ‚àÄ (x : Œ±), dist (f x) (g x) < C) : dist f g < C :=
  dist_lt_iff_of_nonempty.2 w

theorem dist_lt_iff (C0 : (0 : ‚Ñù) < C) : dist f g < C ‚Üî ‚àÄ (x : Œ±), dist (f x) (g x) < C :=
  by 
    simp only [‚Üêdist_mk_of_compact, dist_lt_iff_of_compact C0, mk_of_compact_apply]

end 

instance  [CompleteSpace Œ≤] : CompleteSpace C(Œ±, Œ≤) :=
  (isometric_bounded_of_compact Œ± Œ≤).CompleteSpace

-- error in Topology.ContinuousFunction.Compact: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
@[continuity #[]] theorem continuous_eval : continuous (Œª p : ¬´expr √ó ¬ª(¬´exprC( , )¬ª(Œ±, Œ≤), Œ±), p.1 p.2) :=
continuous_eval.comp ((isometric_bounded_of_compact Œ± Œ≤).continuous.prod_map continuous_id)

-- error in Topology.ContinuousFunction.Compact: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
@[continuity #[]] theorem continuous_evalx (x : Œ±) : continuous (Œª f : ¬´exprC( , )¬ª(Œ±, Œ≤), f x) :=
continuous_eval.comp (continuous_id.prod_mk continuous_const)

theorem continuous_coe : @Continuous C(Œ±, Œ≤) (Œ± ‚Üí Œ≤) _ _ coeFn :=
  continuous_pi continuous_evalx

instance  : HasNorm C(Œ±, E) :=
  { norm := fun x => dist x 0 }

@[simp]
theorem _root_.bounded_continuous_function.norm_mk_of_compact (f : C(Œ±, E)) : ‚à•mk_of_compact f‚à• = ‚à•f‚à• :=
  rfl

@[simp]
theorem _root_.bounded_continuous_function.norm_forget_boundedness_eq (f : Œ± ‚Üí·µá E) : ‚à•forget_boundedness Œ± E f‚à• = ‚à•f‚à• :=
  rfl

open BoundedContinuousFunction

instance  : NormedGroup C(Œ±, E) :=
  { dist_eq :=
      fun x y =>
        by 
          rw [‚Üênorm_mk_of_compact, ‚Üêdist_mk_of_compact, dist_eq_norm]
          congr 1 
          exact ((add_equiv_bounded_of_compact Œ± E).map_sub _ _).symm }

section 

variable(f : C(Œ±, E))

theorem norm_coe_le_norm (x : Œ±) : ‚à•f x‚à• ‚â§ ‚à•f‚à• :=
  (mk_of_compact f).norm_coe_le_norm x

/-- Distance between the images of any two points is at most twice the norm of the function. -/
theorem dist_le_two_norm (x y : Œ±) : dist (f x) (f y) ‚â§ 2*‚à•f‚à• :=
  (mk_of_compact f).dist_le_two_norm x y

/-- The norm of a function is controlled by the supremum of the pointwise norms -/
theorem norm_le {C : ‚Ñù} (C0 : (0 : ‚Ñù) ‚â§ C) : ‚à•f‚à• ‚â§ C ‚Üî ‚àÄ (x : Œ±), ‚à•f x‚à• ‚â§ C :=
  @BoundedContinuousFunction.norm_le _ _ _ _ (mk_of_compact f) _ C0

theorem norm_le_of_nonempty [Nonempty Œ±] {M : ‚Ñù} : ‚à•f‚à• ‚â§ M ‚Üî ‚àÄ x, ‚à•f x‚à• ‚â§ M :=
  @BoundedContinuousFunction.norm_le_of_nonempty _ _ _ _ _ (mk_of_compact f) _

theorem norm_lt_iff {M : ‚Ñù} (M0 : 0 < M) : ‚à•f‚à• < M ‚Üî ‚àÄ x, ‚à•f x‚à• < M :=
  @BoundedContinuousFunction.norm_lt_iff_of_compact _ _ _ _ _ (mk_of_compact f) _ M0

theorem norm_lt_iff_of_nonempty [Nonempty Œ±] {M : ‚Ñù} : ‚à•f‚à• < M ‚Üî ‚àÄ x, ‚à•f x‚à• < M :=
  @BoundedContinuousFunction.norm_lt_iff_of_nonempty_compact _ _ _ _ _ _ (mk_of_compact f) _

theorem apply_le_norm (f : C(Œ±, ‚Ñù)) (x : Œ±) : f x ‚â§ ‚à•f‚à• :=
  le_trans‚Çì (le_abs.mpr (Or.inl (le_refl‚Çì (f x)))) (f.norm_coe_le_norm x)

theorem neg_norm_le_apply (f : C(Œ±, ‚Ñù)) (x : Œ±) : -‚à•f‚à• ‚â§ f x :=
  le_trans‚Çì (neg_le_neg (f.norm_coe_le_norm x)) (neg_le.mp (neg_le_abs_self (f x)))

theorem norm_eq_supr_norm : ‚à•f‚à• = ‚®Üx : Œ±, ‚à•f x‚à• :=
  (mk_of_compact f).norm_eq_supr_norm

end 

section 

variable{R : Type _}[NormedRing R]

instance  : NormedRing C(Œ±, R) :=
  { (inferInstance : NormedGroup C(Œ±, R)) with norm_mul := fun f g => norm_mul_le (mk_of_compact f) (mk_of_compact g) }

end 

section 

variable{ùïú : Type _}[NormedField ùïú][NormedSpace ùïú E]

instance  : NormedSpace ùïú C(Œ±, E) :=
  { norm_smul_le := fun c f => le_of_eq‚Çì (norm_smul c (mk_of_compact f)) }

section 

variable(Œ± ùïú E)

/--
When `Œ±` is compact and `ùïú` is a normed field,
the `ùïú`-algebra of bounded continuous maps `Œ± ‚Üí·µá Œ≤` is
`ùïú`-linearly isometric to `C(Œ±, Œ≤)`.
-/
def linear_isometry_bounded_of_compact : C(Œ±, E) ‚âÉ‚Çó·µ¢[ùïú] Œ± ‚Üí·µá E :=
  { add_equiv_bounded_of_compact Œ± E with
    map_smul' :=
      fun c f =>
        by 
          ext 
          simp ,
    norm_map' := fun f => rfl }

end 

@[simp]
theorem linear_isometry_bounded_of_compact_symm_apply (f : Œ± ‚Üí·µá E) :
  (linear_isometry_bounded_of_compact Œ± E ùïú).symm f = f.forget_boundedness Œ± E :=
  rfl

@[simp]
theorem linear_isometry_bounded_of_compact_apply_apply (f : C(Œ±, E)) (a : Œ±) :
  (linear_isometry_bounded_of_compact Œ± E ùïú f) a = f a :=
  rfl

@[simp]
theorem linear_isometry_bounded_of_compact_to_isometric :
  (linear_isometry_bounded_of_compact Œ± E ùïú).toIsometric = isometric_bounded_of_compact Œ± E :=
  rfl

@[simp]
theorem linear_isometry_bounded_of_compact_to_add_equiv :
  (linear_isometry_bounded_of_compact Œ± E ùïú).toLinearEquiv.toAddEquiv = add_equiv_bounded_of_compact Œ± E :=
  rfl

@[simp]
theorem linear_isometry_bounded_of_compact_of_compact_to_equiv :
  (linear_isometry_bounded_of_compact Œ± E ùïú).toLinearEquiv.toEquiv = equiv_bounded_of_compact Œ± E :=
  rfl

end 

section 

variable{ùïú : Type _}{Œ≥ : Type _}[NormedField ùïú][NormedRing Œ≥][NormedAlgebra ùïú Œ≥]

instance  [Nonempty Œ±] : NormedAlgebra ùïú C(Œ±, Œ≥) :=
  { norm_algebra_map_eq := fun c => (norm_algebra_map_eq (Œ± ‚Üí·µá Œ≥) c : _) }

end 

end ContinuousMap

namespace ContinuousMap

section UniformContinuity

variable{Œ± Œ≤ : Type _}

variable[MetricSpace Œ±][CompactSpace Œ±][MetricSpace Œ≤]

/-!
We now set up some declarations making it convenient to use uniform continuity.
-/


theorem uniform_continuity (f : C(Œ±, Œ≤)) (Œµ : ‚Ñù) (h : 0 < Œµ) :
  ‚àÉ (Œ¥ : _)(_ : Œ¥ > 0), ‚àÄ {x y}, dist x y < Œ¥ ‚Üí dist (f x) (f y) < Œµ :=
  Metric.uniform_continuous_iff.mp (CompactSpace.uniform_continuous_of_continuous f.continuous) Œµ h

/--
An arbitrarily chosen modulus of uniform continuity for a given function `f` and `Œµ > 0`.
-/
def modulus (f : C(Œ±, Œ≤)) (Œµ : ‚Ñù) (h : 0 < Œµ) : ‚Ñù :=
  Classical.some (uniform_continuity f Œµ h)

theorem modulus_pos (f : C(Œ±, Œ≤)) {Œµ : ‚Ñù} {h : 0 < Œµ} : 0 < f.modulus Œµ h :=
  (Classical.some_spec (uniform_continuity f Œµ h)).fst

theorem dist_lt_of_dist_lt_modulus (f : C(Œ±, Œ≤)) (Œµ : ‚Ñù) (h : 0 < Œµ) {a b : Œ±} (w : dist a b < f.modulus Œµ h) :
  dist (f a) (f b) < Œµ :=
  (Classical.some_spec (uniform_continuity f Œµ h)).snd w

end UniformContinuity

end ContinuousMap

section CompLeft

variable(X : Type _){ùïú Œ≤ Œ≥ : Type _}[TopologicalSpace X][CompactSpace X][NondiscreteNormedField ùïú]

variable[NormedGroup Œ≤][NormedSpace ùïú Œ≤][NormedGroup Œ≥][NormedSpace ùïú Œ≥]

open ContinuousMap

/--
Postcomposition of continuous functions into a normed module by a continuous linear map is a
continuous linear map.
Transferred version of `continuous_linear_map.comp_left_continuous_bounded`,
upgraded version of `continuous_linear_map.comp_left_continuous`,
similar to `linear_map.comp_left`. -/
protected def ContinuousLinearMap.compLeftContinuousCompact (g : Œ≤ ‚ÜíL[ùïú] Œ≥) : C(X, Œ≤) ‚ÜíL[ùïú] C(X, Œ≥) :=
  (linear_isometry_bounded_of_compact X Œ≥ ùïú).symm.toLinearIsometry.toContinuousLinearMap.comp$
    (g.comp_left_continuous_bounded X).comp$
      (linear_isometry_bounded_of_compact X Œ≤ ùïú).toLinearIsometry.toContinuousLinearMap

@[simp]
theorem ContinuousLinearMap.to_linear_comp_left_continuous_compact (g : Œ≤ ‚ÜíL[ùïú] Œ≥) :
  (g.comp_left_continuous_compact X : C(X, Œ≤) ‚Üí‚Çó[ùïú] C(X, Œ≥)) = g.comp_left_continuous ùïú X :=
  by 
    ext f 
    rfl

@[simp]
theorem ContinuousLinearMap.comp_left_continuous_compact_apply (g : Œ≤ ‚ÜíL[ùïú] Œ≥) (f : C(X, Œ≤)) (x : X) :
  g.comp_left_continuous_compact X f x = g (f x) :=
  rfl

end CompLeft

namespace ContinuousMap

/-!
We now setup variations on `comp_right_* f`, where `f : C(X, Y)`
(that is, precomposition by a continuous map),
as a morphism `C(Y, T) ‚Üí C(X, T)`, respecting various types of structure.

In particular:
* `comp_right_continuous_map`, the bundled continuous map (for this we need `X Y` compact).
* `comp_right_homeomorph`, when we precompose by a homeomorphism.
* `comp_right_alg_hom`, when `T = R` is a topological ring.
-/


section CompRight

/--
Precomposition by a continuous map is itself a continuous map between spaces of continuous maps.
-/
def comp_right_continuous_map {X Y : Type _} (T : Type _) [TopologicalSpace X] [CompactSpace X] [TopologicalSpace Y]
  [CompactSpace Y] [NormedGroup T] (f : C(X, Y)) : C(C(Y, T), C(X, T)) :=
  { toFun := fun g => g.comp f,
    continuous_to_fun :=
      by 
        refine' metric.continuous_iff.mpr _ 
        intro g Œµ Œµ_pos 
        refine' ‚ü®Œµ, Œµ_pos, fun g' h => _‚ü©
        rw [ContinuousMap.dist_lt_iff Œµ_pos] at h‚ä¢
        ¬∑
          exact fun x => h (f x) }

@[simp]
theorem comp_right_continuous_map_apply {X Y : Type _} (T : Type _) [TopologicalSpace X] [CompactSpace X]
  [TopologicalSpace Y] [CompactSpace Y] [NormedGroup T] (f : C(X, Y)) (g : C(Y, T)) :
  (comp_right_continuous_map T f) g = g.comp f :=
  rfl

/--
Precomposition by a homeomorphism is itself a homeomorphism between spaces of continuous maps.
-/
def comp_right_homeomorph {X Y : Type _} (T : Type _) [TopologicalSpace X] [CompactSpace X] [TopologicalSpace Y]
  [CompactSpace Y] [NormedGroup T] (f : X ‚âÉ‚Çú Y) : C(Y, T) ‚âÉ‚Çú C(X, T) :=
  { toFun := comp_right_continuous_map T f.to_continuous_map,
    invFun := comp_right_continuous_map T f.symm.to_continuous_map,
    left_inv :=
      by 
        tidy,
    right_inv :=
      by 
        tidy }

/--
Precomposition of functions into a normed ring by continuous map is an algebra homomorphism.
-/
def comp_right_alg_hom {X Y : Type _} (R : Type _) [TopologicalSpace X] [TopologicalSpace Y] [NormedCommRing R]
  (f : C(X, Y)) : C(Y, R) ‚Üí‚Çê[R] C(X, R) :=
  { toFun := fun g => g.comp f,
    map_zero' :=
      by 
        ext 
        simp ,
    map_add' :=
      fun g‚ÇÅ g‚ÇÇ =>
        by 
          ext 
          simp ,
    map_one' :=
      by 
        ext 
        simp ,
    map_mul' :=
      fun g‚ÇÅ g‚ÇÇ =>
        by 
          ext 
          simp ,
    commutes' :=
      fun r =>
        by 
          ext 
          simp  }

@[simp]
theorem comp_right_alg_hom_apply {X Y : Type _} (R : Type _) [TopologicalSpace X] [TopologicalSpace Y]
  [NormedCommRing R] (f : C(X, Y)) (g : C(Y, R)) : (comp_right_alg_hom R f) g = g.comp f :=
  rfl

theorem comp_right_alg_hom_continuous {X Y : Type _} (R : Type _) [TopologicalSpace X] [CompactSpace X]
  [TopologicalSpace Y] [CompactSpace Y] [NormedCommRing R] (f : C(X, Y)) : Continuous (comp_right_alg_hom R f) :=
  by 
    change Continuous (comp_right_continuous_map R f)
    continuity

end CompRight

end ContinuousMap

