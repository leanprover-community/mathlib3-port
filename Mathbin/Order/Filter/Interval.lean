/-
Copyright (c) 2020 Yury G. Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury G. Kudryashov

! This file was ported from Lean 3 source module order.filter.interval
! leanprover-community/mathlib commit f93c11933efbc3c2f0299e47b8ff83e9b539cbf6
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Data.Set.Intervals.OrdConnected
import Mathbin.Order.Filter.SmallSets
import Mathbin.Order.Filter.AtTopBot

/-!
# Convergence of intervals

If both `a` and `b` tend to some filter `l‚ÇÅ`, sometimes this implies that `Ixx a b` tends to
`l‚ÇÇ.small_sets`, i.e., for any `s ‚àà l‚ÇÇ` eventually `Ixx a b` becomes a subset of `s`.  Here and
below `Ixx` is one of `Icc`, `Ico`, `Ioc`, and `Ioo`. We define `filter.tendsto_Ixx_class Ixx l‚ÇÅ l‚ÇÇ`
to be a typeclass representing this property.

The instances provide the best `l‚ÇÇ` for a given `l‚ÇÅ`. In many cases `l‚ÇÅ = l‚ÇÇ` but sometimes we can
drop an endpoint from an interval: e.g., we prove `tendsto_Ixx_class Ico (ùìü $ Iic a) (ùìü $ Iio a)`,
i.e., if `u‚ÇÅ n` and `u‚ÇÇ n` belong eventually to `Iic a`, then the interval `Ico (u‚ÇÅ n) (u‚ÇÇ n)` is
eventually included in `Iio a`.

The next table shows ‚Äúoutput‚Äù filters `l‚ÇÇ` for different values of `Ixx` and `l‚ÇÅ`. The instances
that need topology are defined in `topology/algebra/ordered`.

| Input filter |  `Ixx = Icc`  |  `Ixx = Ico`  |  `Ixx = Ioc`  |  `Ixx = Ioo`  |
| -----------: | :-----------: | :-----------: | :-----------: | :-----------: |
|     `at_top` |    `at_top`   |    `at_top`   |    `at_top`   |    `at_top`   |
|     `at_bot` |    `at_bot`   |    `at_bot`   |    `at_bot`   |    `at_bot`   |
|     `pure a` |    `pure a`   |      `‚ä•`      |      `‚ä•`      |      `‚ä•`      |
|  `ùìü (Iic a)` |  `ùìü (Iic a)`  |  `ùìü (Iio a)`  |  `ùìü (Iic a)`  |  `ùìü (Iio a)`  |
|  `ùìü (Ici a)` |  `ùìü (Ici a)`  |  `ùìü (Ici a)`  |  `ùìü (Ioi a)`  |  `ùìü (Ioi a)`  |
|  `ùìü (Ioi a)` |  `ùìü (Ioi a)`  |  `ùìü (Ioi a)`  |  `ùìü (Ioi a)`  |  `ùìü (Ioi a)`  |
|  `ùìü (Iio a)` |  `ùìü (Iio a)`  |  `ùìü (Iio a)`  |  `ùìü (Iio a)`  |  `ùìü (Iio a)`  |
|        `ùìù a` |     `ùìù a`     |     `ùìù a`     |     `ùìù a`     |     `ùìù a`     |
| `ùìù[Iic a] b` |  `ùìù[Iic a] b` |  `ùìù[Iio a] b` |  `ùìù[Iic a] b` |  `ùìù[Iio a] b` |
| `ùìù[Ici a] b` |  `ùìù[Ici a] b` |  `ùìù[Ici a] b` |  `ùìù[Ioi a] b` |  `ùìù[Ioi a] b` |
| `ùìù[Ioi a] b` |  `ùìù[Ioi a] b` |  `ùìù[Ioi a] b` |  `ùìù[Ioi a] b` |  `ùìù[Ioi a] b` |
| `ùìù[Iio a] b` |  `ùìù[Iio a] b` |  `ùìù[Iio a] b` |  `ùìù[Iio a] b` |  `ùìù[Iio a] b` |

-/


variable {Œ± Œ≤ : Type _}

open Classical Filter Interval

open Set Function

namespace Filter

section Preorder

variable [Preorder Œ±]

/- warning: filter.tendsto_Ixx_class -> Filter.TendstoIxxClass is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : Preorder.{u1} Œ±], (Œ± -> Œ± -> (Set.{u1} Œ±)) -> (Filter.{u1} Œ±) -> (outParam.{succ u1} (Filter.{u1} Œ±)) -> Prop
but is expected to have type
  forall {Œ± : Type.{u1}}, (Œ± -> Œ± -> (Set.{u1} Œ±)) -> (Filter.{u1} Œ±) -> (outParam.{succ u1} (Filter.{u1} Œ±)) -> Prop
Case conversion may be inaccurate. Consider using '#align filter.tendsto_Ixx_class Filter.TendstoIxxClass‚Çì'. -/
/-- A pair of filters `l‚ÇÅ`, `l‚ÇÇ` has `tendsto_Ixx_class Ixx` property if `Ixx a b` tends to
`l‚ÇÇ.small_sets` as `a` and `b` tend to `l‚ÇÅ`. In all instances `Ixx` is one of `Icc`, `Ico`, `Ioc`,
or `Ioo`. The instances provide the best `l‚ÇÇ` for a given `l‚ÇÅ`. In many cases `l‚ÇÅ = l‚ÇÇ` but
sometimes we can drop an endpoint from an interval: e.g., we prove `tendsto_Ixx_class Ico (ùìü $ Iic
a) (ùìü $ Iio a)`, i.e., if `u‚ÇÅ n` and `u‚ÇÇ n` belong eventually to `Iic a`, then the interval `Ico (u‚ÇÅ
n) (u‚ÇÇ n)` is eventually included in `Iio a`.

We mark `l‚ÇÇ` as an `out_param` so that Lean can automatically find an appropriate `l‚ÇÇ` based on
`Ixx` and `l‚ÇÅ`. This way, e.g., `tendsto.Ico h‚ÇÅ h‚ÇÇ` works without specifying explicitly `l‚ÇÇ`. -/
class TendstoIxxClass (Ixx : Œ± ‚Üí Œ± ‚Üí Set Œ±) (l‚ÇÅ : Filter Œ±) (l‚ÇÇ : outParam <| Filter Œ±) : Prop where
  tendsto_Ixx : Tendsto (fun p : Œ± √ó Œ± => Ixx p.1 p.2) (l‚ÇÅ √ó·∂† l‚ÇÅ) l‚ÇÇ.smallSets
#align filter.tendsto_Ixx_class Filter.TendstoIxxClass

/- warning: filter.tendsto.Icc -> Filter.Tendsto.Icc is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : Preorder.{u1} Œ±] {l‚ÇÅ : Filter.{u1} Œ±} {l‚ÇÇ : Filter.{u1} Œ±} [_inst_2 : Filter.TendstoIxxClass.{u1} Œ± _inst_1 (Set.Icc.{u1} Œ± _inst_1) l‚ÇÅ l‚ÇÇ] {lb : Filter.{u2} Œ≤} {u‚ÇÅ : Œ≤ -> Œ±} {u‚ÇÇ : Œ≤ -> Œ±}, (Filter.Tendsto.{u2, u1} Œ≤ Œ± u‚ÇÅ lb l‚ÇÅ) -> (Filter.Tendsto.{u2, u1} Œ≤ Œ± u‚ÇÇ lb l‚ÇÅ) -> (Filter.Tendsto.{u2, u1} Œ≤ (Set.{u1} Œ±) (fun (x : Œ≤) => Set.Icc.{u1} Œ± _inst_1 (u‚ÇÅ x) (u‚ÇÇ x)) lb (Filter.smallSets.{u1} Œ± l‚ÇÇ))
but is expected to have type
  forall {Œ± : Type.{u2}} {Œ≤ : Type.{u1}} [_inst_1 : Preorder.{u2} Œ±] {l‚ÇÅ : Filter.{u2} Œ±} {l‚ÇÇ : Filter.{u2} Œ±} [_inst_2 : Filter.TendstoIxxClass.{u2} Œ± (Set.Icc.{u2} Œ± _inst_1) l‚ÇÅ l‚ÇÇ] {lb : Filter.{u1} Œ≤} {u‚ÇÅ : Œ≤ -> Œ±} {u‚ÇÇ : Œ≤ -> Œ±}, (Filter.Tendsto.{u1, u2} Œ≤ Œ± u‚ÇÅ lb l‚ÇÅ) -> (Filter.Tendsto.{u1, u2} Œ≤ Œ± u‚ÇÇ lb l‚ÇÅ) -> (Filter.Tendsto.{u1, u2} Œ≤ (Set.{u2} Œ±) (fun (x : Œ≤) => Set.Icc.{u2} Œ± _inst_1 (u‚ÇÅ x) (u‚ÇÇ x)) lb (Filter.smallSets.{u2} Œ± l‚ÇÇ))
Case conversion may be inaccurate. Consider using '#align filter.tendsto.Icc Filter.Tendsto.Icc‚Çì'. -/
theorem Tendsto.Icc {l‚ÇÅ l‚ÇÇ : Filter Œ±} [TendstoIxxClass Icc l‚ÇÅ l‚ÇÇ] {lb : Filter Œ≤} {u‚ÇÅ u‚ÇÇ : Œ≤ ‚Üí Œ±}
    (h‚ÇÅ : Tendsto u‚ÇÅ lb l‚ÇÅ) (h‚ÇÇ : Tendsto u‚ÇÇ lb l‚ÇÅ) :
    Tendsto (fun x => Icc (u‚ÇÅ x) (u‚ÇÇ x)) lb l‚ÇÇ.smallSets :=
  TendstoIxxClass.tendsto_Ixx.comp <| h‚ÇÅ.prod_mk h‚ÇÇ
#align filter.tendsto.Icc Filter.Tendsto.Icc

/- warning: filter.tendsto.Ioc -> Filter.Tendsto.Ioc is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : Preorder.{u1} Œ±] {l‚ÇÅ : Filter.{u1} Œ±} {l‚ÇÇ : Filter.{u1} Œ±} [_inst_2 : Filter.TendstoIxxClass.{u1} Œ± _inst_1 (Set.Ioc.{u1} Œ± _inst_1) l‚ÇÅ l‚ÇÇ] {lb : Filter.{u2} Œ≤} {u‚ÇÅ : Œ≤ -> Œ±} {u‚ÇÇ : Œ≤ -> Œ±}, (Filter.Tendsto.{u2, u1} Œ≤ Œ± u‚ÇÅ lb l‚ÇÅ) -> (Filter.Tendsto.{u2, u1} Œ≤ Œ± u‚ÇÇ lb l‚ÇÅ) -> (Filter.Tendsto.{u2, u1} Œ≤ (Set.{u1} Œ±) (fun (x : Œ≤) => Set.Ioc.{u1} Œ± _inst_1 (u‚ÇÅ x) (u‚ÇÇ x)) lb (Filter.smallSets.{u1} Œ± l‚ÇÇ))
but is expected to have type
  forall {Œ± : Type.{u2}} {Œ≤ : Type.{u1}} [_inst_1 : Preorder.{u2} Œ±] {l‚ÇÅ : Filter.{u2} Œ±} {l‚ÇÇ : Filter.{u2} Œ±} [_inst_2 : Filter.TendstoIxxClass.{u2} Œ± (Set.Ioc.{u2} Œ± _inst_1) l‚ÇÅ l‚ÇÇ] {lb : Filter.{u1} Œ≤} {u‚ÇÅ : Œ≤ -> Œ±} {u‚ÇÇ : Œ≤ -> Œ±}, (Filter.Tendsto.{u1, u2} Œ≤ Œ± u‚ÇÅ lb l‚ÇÅ) -> (Filter.Tendsto.{u1, u2} Œ≤ Œ± u‚ÇÇ lb l‚ÇÅ) -> (Filter.Tendsto.{u1, u2} Œ≤ (Set.{u2} Œ±) (fun (x : Œ≤) => Set.Ioc.{u2} Œ± _inst_1 (u‚ÇÅ x) (u‚ÇÇ x)) lb (Filter.smallSets.{u2} Œ± l‚ÇÇ))
Case conversion may be inaccurate. Consider using '#align filter.tendsto.Ioc Filter.Tendsto.Ioc‚Çì'. -/
theorem Tendsto.Ioc {l‚ÇÅ l‚ÇÇ : Filter Œ±} [TendstoIxxClass Ioc l‚ÇÅ l‚ÇÇ] {lb : Filter Œ≤} {u‚ÇÅ u‚ÇÇ : Œ≤ ‚Üí Œ±}
    (h‚ÇÅ : Tendsto u‚ÇÅ lb l‚ÇÅ) (h‚ÇÇ : Tendsto u‚ÇÇ lb l‚ÇÅ) :
    Tendsto (fun x => Ioc (u‚ÇÅ x) (u‚ÇÇ x)) lb l‚ÇÇ.smallSets :=
  TendstoIxxClass.tendsto_Ixx.comp <| h‚ÇÅ.prod_mk h‚ÇÇ
#align filter.tendsto.Ioc Filter.Tendsto.Ioc

/- warning: filter.tendsto.Ico -> Filter.Tendsto.Ico is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : Preorder.{u1} Œ±] {l‚ÇÅ : Filter.{u1} Œ±} {l‚ÇÇ : Filter.{u1} Œ±} [_inst_2 : Filter.TendstoIxxClass.{u1} Œ± _inst_1 (Set.Ico.{u1} Œ± _inst_1) l‚ÇÅ l‚ÇÇ] {lb : Filter.{u2} Œ≤} {u‚ÇÅ : Œ≤ -> Œ±} {u‚ÇÇ : Œ≤ -> Œ±}, (Filter.Tendsto.{u2, u1} Œ≤ Œ± u‚ÇÅ lb l‚ÇÅ) -> (Filter.Tendsto.{u2, u1} Œ≤ Œ± u‚ÇÇ lb l‚ÇÅ) -> (Filter.Tendsto.{u2, u1} Œ≤ (Set.{u1} Œ±) (fun (x : Œ≤) => Set.Ico.{u1} Œ± _inst_1 (u‚ÇÅ x) (u‚ÇÇ x)) lb (Filter.smallSets.{u1} Œ± l‚ÇÇ))
but is expected to have type
  forall {Œ± : Type.{u2}} {Œ≤ : Type.{u1}} [_inst_1 : Preorder.{u2} Œ±] {l‚ÇÅ : Filter.{u2} Œ±} {l‚ÇÇ : Filter.{u2} Œ±} [_inst_2 : Filter.TendstoIxxClass.{u2} Œ± (Set.Ico.{u2} Œ± _inst_1) l‚ÇÅ l‚ÇÇ] {lb : Filter.{u1} Œ≤} {u‚ÇÅ : Œ≤ -> Œ±} {u‚ÇÇ : Œ≤ -> Œ±}, (Filter.Tendsto.{u1, u2} Œ≤ Œ± u‚ÇÅ lb l‚ÇÅ) -> (Filter.Tendsto.{u1, u2} Œ≤ Œ± u‚ÇÇ lb l‚ÇÅ) -> (Filter.Tendsto.{u1, u2} Œ≤ (Set.{u2} Œ±) (fun (x : Œ≤) => Set.Ico.{u2} Œ± _inst_1 (u‚ÇÅ x) (u‚ÇÇ x)) lb (Filter.smallSets.{u2} Œ± l‚ÇÇ))
Case conversion may be inaccurate. Consider using '#align filter.tendsto.Ico Filter.Tendsto.Ico‚Çì'. -/
theorem Tendsto.Ico {l‚ÇÅ l‚ÇÇ : Filter Œ±} [TendstoIxxClass Ico l‚ÇÅ l‚ÇÇ] {lb : Filter Œ≤} {u‚ÇÅ u‚ÇÇ : Œ≤ ‚Üí Œ±}
    (h‚ÇÅ : Tendsto u‚ÇÅ lb l‚ÇÅ) (h‚ÇÇ : Tendsto u‚ÇÇ lb l‚ÇÅ) :
    Tendsto (fun x => Ico (u‚ÇÅ x) (u‚ÇÇ x)) lb l‚ÇÇ.smallSets :=
  TendstoIxxClass.tendsto_Ixx.comp <| h‚ÇÅ.prod_mk h‚ÇÇ
#align filter.tendsto.Ico Filter.Tendsto.Ico

/- warning: filter.tendsto.Ioo -> Filter.Tendsto.Ioo is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : Preorder.{u1} Œ±] {l‚ÇÅ : Filter.{u1} Œ±} {l‚ÇÇ : Filter.{u1} Œ±} [_inst_2 : Filter.TendstoIxxClass.{u1} Œ± _inst_1 (Set.Ioo.{u1} Œ± _inst_1) l‚ÇÅ l‚ÇÇ] {lb : Filter.{u2} Œ≤} {u‚ÇÅ : Œ≤ -> Œ±} {u‚ÇÇ : Œ≤ -> Œ±}, (Filter.Tendsto.{u2, u1} Œ≤ Œ± u‚ÇÅ lb l‚ÇÅ) -> (Filter.Tendsto.{u2, u1} Œ≤ Œ± u‚ÇÇ lb l‚ÇÅ) -> (Filter.Tendsto.{u2, u1} Œ≤ (Set.{u1} Œ±) (fun (x : Œ≤) => Set.Ioo.{u1} Œ± _inst_1 (u‚ÇÅ x) (u‚ÇÇ x)) lb (Filter.smallSets.{u1} Œ± l‚ÇÇ))
but is expected to have type
  forall {Œ± : Type.{u2}} {Œ≤ : Type.{u1}} [_inst_1 : Preorder.{u2} Œ±] {l‚ÇÅ : Filter.{u2} Œ±} {l‚ÇÇ : Filter.{u2} Œ±} [_inst_2 : Filter.TendstoIxxClass.{u2} Œ± (Set.Ioo.{u2} Œ± _inst_1) l‚ÇÅ l‚ÇÇ] {lb : Filter.{u1} Œ≤} {u‚ÇÅ : Œ≤ -> Œ±} {u‚ÇÇ : Œ≤ -> Œ±}, (Filter.Tendsto.{u1, u2} Œ≤ Œ± u‚ÇÅ lb l‚ÇÅ) -> (Filter.Tendsto.{u1, u2} Œ≤ Œ± u‚ÇÇ lb l‚ÇÅ) -> (Filter.Tendsto.{u1, u2} Œ≤ (Set.{u2} Œ±) (fun (x : Œ≤) => Set.Ioo.{u2} Œ± _inst_1 (u‚ÇÅ x) (u‚ÇÇ x)) lb (Filter.smallSets.{u2} Œ± l‚ÇÇ))
Case conversion may be inaccurate. Consider using '#align filter.tendsto.Ioo Filter.Tendsto.Ioo‚Çì'. -/
theorem Tendsto.Ioo {l‚ÇÅ l‚ÇÇ : Filter Œ±} [TendstoIxxClass Ioo l‚ÇÅ l‚ÇÇ] {lb : Filter Œ≤} {u‚ÇÅ u‚ÇÇ : Œ≤ ‚Üí Œ±}
    (h‚ÇÅ : Tendsto u‚ÇÅ lb l‚ÇÅ) (h‚ÇÇ : Tendsto u‚ÇÇ lb l‚ÇÅ) :
    Tendsto (fun x => Ioo (u‚ÇÅ x) (u‚ÇÇ x)) lb l‚ÇÇ.smallSets :=
  TendstoIxxClass.tendsto_Ixx.comp <| h‚ÇÅ.prod_mk h‚ÇÇ
#align filter.tendsto.Ioo Filter.Tendsto.Ioo

/- warning: filter.tendsto_Ixx_class_principal -> Filter.tendstoIxxClass_principal is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : Preorder.{u1} Œ±] {s : Set.{u1} Œ±} {t : Set.{u1} Œ±} {Ixx : Œ± -> Œ± -> (Set.{u1} Œ±)}, Iff (Filter.TendstoIxxClass.{u1} Œ± _inst_1 Ixx (Filter.principal.{u1} Œ± s) (Filter.principal.{u1} Œ± t)) (forall (x : Œ±), (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x s) -> (forall (y : Œ±), (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) y s) -> (HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.hasSubset.{u1} Œ±) (Ixx x y) t)))
but is expected to have type
  forall {Œ± : Type.{u1}} {_inst_1 : Set.{u1} Œ±} {s : Set.{u1} Œ±} {t : Œ± -> Œ± -> (Set.{u1} Œ±)}, Iff (Filter.TendstoIxxClass.{u1} Œ± t (Filter.principal.{u1} Œ± _inst_1) (Filter.principal.{u1} Œ± s)) (forall (x : Œ±), (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x _inst_1) -> (forall (y : Œ±), (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) y _inst_1) -> (HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.instHasSubsetSet.{u1} Œ±) (t x y) s)))
Case conversion may be inaccurate. Consider using '#align filter.tendsto_Ixx_class_principal Filter.tendstoIxxClass_principal‚Çì'. -/
/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (x y ¬´expr ‚àà ¬ª s) -/
theorem tendstoIxxClass_principal {s t : Set Œ±} {Ixx : Œ± ‚Üí Œ± ‚Üí Set Œ±} :
    TendstoIxxClass Ixx (ùìü s) (ùìü t) ‚Üî ‚àÄ (x) (_ : x ‚àà s) (y) (_ : y ‚àà s), Ixx x y ‚äÜ t :=
  Iff.trans ‚ü®fun h => h.1, fun h => ‚ü®h‚ü©‚ü© <| by
    simp only [small_sets_principal, prod_principal_principal, tendsto_principal_principal,
      forall_prod_set, mem_powerset_iff, mem_principal]
#align filter.tendsto_Ixx_class_principal Filter.tendstoIxxClass_principal

/- warning: filter.tendsto_Ixx_class_inf -> Filter.tendstoIxxClass_inf is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : Preorder.{u1} Œ±] {l‚ÇÅ : Filter.{u1} Œ±} {l‚ÇÅ' : Filter.{u1} Œ±} {l‚ÇÇ : Filter.{u1} Œ±} {l‚ÇÇ' : Filter.{u1} Œ±} {Ixx : Œ± -> Œ± -> (Set.{u1} Œ±)} [h : Filter.TendstoIxxClass.{u1} Œ± _inst_1 Ixx l‚ÇÅ l‚ÇÇ] [h' : Filter.TendstoIxxClass.{u1} Œ± _inst_1 Ixx l‚ÇÅ' l‚ÇÇ'], Filter.TendstoIxxClass.{u1} Œ± _inst_1 Ixx (HasInf.inf.{u1} (Filter.{u1} Œ±) (Filter.hasInf.{u1} Œ±) l‚ÇÅ l‚ÇÅ') (HasInf.inf.{u1} (outParam.{succ u1} (Filter.{u1} Œ±)) (Filter.hasInf.{u1} Œ±) l‚ÇÇ l‚ÇÇ')
but is expected to have type
  forall {Œ± : Type.{u1}} {_inst_1 : Filter.{u1} Œ±} {l‚ÇÅ : Filter.{u1} Œ±} {l‚ÇÅ' : Filter.{u1} Œ±} {l‚ÇÇ : Filter.{u1} Œ±} {l‚ÇÇ' : Œ± -> Œ± -> (Set.{u1} Œ±)} [Ixx : Filter.TendstoIxxClass.{u1} Œ± l‚ÇÇ' _inst_1 l‚ÇÅ'] [h : Filter.TendstoIxxClass.{u1} Œ± l‚ÇÇ' l‚ÇÅ l‚ÇÇ], Filter.TendstoIxxClass.{u1} Œ± l‚ÇÇ' (HasInf.inf.{u1} (Filter.{u1} Œ±) (Filter.instHasInfFilter.{u1} Œ±) _inst_1 l‚ÇÅ) (HasInf.inf.{u1} (Filter.{u1} Œ±) (Filter.instHasInfFilter.{u1} Œ±) l‚ÇÅ' l‚ÇÇ)
Case conversion may be inaccurate. Consider using '#align filter.tendsto_Ixx_class_inf Filter.tendstoIxxClass_inf‚Çì'. -/
theorem tendstoIxxClass_inf {l‚ÇÅ l‚ÇÅ' l‚ÇÇ l‚ÇÇ' : Filter Œ±} {Ixx} [h : TendstoIxxClass Ixx l‚ÇÅ l‚ÇÇ]
    [h' : TendstoIxxClass Ixx l‚ÇÅ' l‚ÇÇ'] : TendstoIxxClass Ixx (l‚ÇÅ ‚äì l‚ÇÅ') (l‚ÇÇ ‚äì l‚ÇÇ') :=
  ‚ü®by simpa only [prod_inf_prod, small_sets_inf] using h.1.inf h'.1‚ü©
#align filter.tendsto_Ixx_class_inf Filter.tendstoIxxClass_inf

/- warning: filter.tendsto_Ixx_class_of_subset -> Filter.tendstoIxxClass_of_subset is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : Preorder.{u1} Œ±] {l‚ÇÅ : Filter.{u1} Œ±} {l‚ÇÇ : Filter.{u1} Œ±} {Ixx : Œ± -> Œ± -> (Set.{u1} Œ±)} {Ixx' : Œ± -> Œ± -> (Set.{u1} Œ±)}, (forall (a : Œ±) (b : Œ±), HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.hasSubset.{u1} Œ±) (Ixx a b) (Ixx' a b)) -> (forall [h' : Filter.TendstoIxxClass.{u1} Œ± _inst_1 Ixx' l‚ÇÅ l‚ÇÇ], Filter.TendstoIxxClass.{u1} Œ± _inst_1 Ixx l‚ÇÅ l‚ÇÇ)
but is expected to have type
  forall {Œ± : Type.{u1}} {_inst_1 : Filter.{u1} Œ±} {l‚ÇÅ : Filter.{u1} Œ±} {l‚ÇÇ : Œ± -> Œ± -> (Set.{u1} Œ±)} {Ixx : Œ± -> Œ± -> (Set.{u1} Œ±)}, (forall (·æ∞ : Œ±) (·æ∞_1 : Œ±), HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.instHasSubsetSet.{u1} Œ±) (l‚ÇÇ ·æ∞ ·æ∞_1) (Ixx ·æ∞ ·æ∞_1)) -> (forall [h : Filter.TendstoIxxClass.{u1} Œ± Ixx _inst_1 l‚ÇÅ], Filter.TendstoIxxClass.{u1} Œ± l‚ÇÇ _inst_1 l‚ÇÅ)
Case conversion may be inaccurate. Consider using '#align filter.tendsto_Ixx_class_of_subset Filter.tendstoIxxClass_of_subset‚Çì'. -/
theorem tendstoIxxClass_of_subset {l‚ÇÅ l‚ÇÇ : Filter Œ±} {Ixx Ixx' : Œ± ‚Üí Œ± ‚Üí Set Œ±}
    (h : ‚àÄ a b, Ixx a b ‚äÜ Ixx' a b) [h' : TendstoIxxClass Ixx' l‚ÇÅ l‚ÇÇ] : TendstoIxxClass Ixx l‚ÇÅ l‚ÇÇ :=
  ‚ü®h'.1.small_sets_mono <| eventually_of_forall <| Prod.forall.2 h‚ü©
#align filter.tendsto_Ixx_class_of_subset Filter.tendstoIxxClass_of_subset

/- warning: filter.has_basis.tendsto_Ixx_class -> Filter.HasBasis.tendstoIxxClass is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : Preorder.{u1} Œ±] {Œπ : Type.{u2}} {p : Œπ -> Prop} {s : Œπ -> (Set.{u1} Œ±)} {l : Filter.{u1} Œ±}, (Filter.HasBasis.{u1, succ u2} Œ± Œπ l p s) -> (forall {Ixx : Œ± -> Œ± -> (Set.{u1} Œ±)}, (forall (i : Œπ), (p i) -> (forall (x : Œ±), (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) x (s i)) -> (forall (y : Œ±), (Membership.Mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.hasMem.{u1} Œ±) y (s i)) -> (HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.hasSubset.{u1} Œ±) (Ixx x y) (s i))))) -> (Filter.TendstoIxxClass.{u1} Œ± _inst_1 Ixx l l))
but is expected to have type
  forall {Œ± : Type.{u1}} {_inst_1 : Type.{u2}} {Œπ : _inst_1 -> Prop} {p : _inst_1 -> (Set.{u1} Œ±)} {s : Filter.{u1} Œ±}, (Filter.HasBasis.{u1, succ u2} Œ± _inst_1 s Œπ p) -> (forall {hl : Œ± -> Œ± -> (Set.{u1} Œ±)}, (forall (·æ∞ : _inst_1), (Œπ ·æ∞) -> (forall (x : Œ±), (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) x (p ·æ∞)) -> (forall (y : Œ±), (Membership.mem.{u1, u1} Œ± (Set.{u1} Œ±) (Set.instMembershipSet.{u1} Œ±) y (p ·æ∞)) -> (HasSubset.Subset.{u1} (Set.{u1} Œ±) (Set.instHasSubsetSet.{u1} Œ±) (hl x y) (p ·æ∞))))) -> (Filter.TendstoIxxClass.{u1} Œ± hl s s))
Case conversion may be inaccurate. Consider using '#align filter.has_basis.tendsto_Ixx_class Filter.HasBasis.tendstoIxxClass‚Çì'. -/
theorem HasBasis.tendstoIxxClass {Œπ : Type _} {p : Œπ ‚Üí Prop} {s} {l : Filter Œ±}
    (hl : l.HasBasis p s) {Ixx : Œ± ‚Üí Œ± ‚Üí Set Œ±}
    (H : ‚àÄ i, p i ‚Üí ‚àÄ x ‚àà s i, ‚àÄ y ‚àà s i, Ixx x y ‚äÜ s i) : TendstoIxxClass Ixx l l :=
  ‚ü®(hl.prod_self.tendsto_iff hl.smallSets).2 fun i hi => ‚ü®i, hi, fun x hx => H i hi _ hx.1 _ hx.2‚ü©‚ü©
#align filter.has_basis.tendsto_Ixx_class Filter.HasBasis.tendstoIxxClass

#print Filter.tendsto_Icc_atTop_atTop /-
instance tendsto_Icc_atTop_atTop : TendstoIxxClass Icc (atTop : Filter Œ±) atTop :=
  (hasBasis_inf·µ¢_principal_finite _).TendstoIxxClass fun s hs =>
    Set.OrdConnected.out <| ord_connected_bInter fun i hi => ordConnected_Ici
#align filter.tendsto_Icc_at_top_at_top Filter.tendsto_Icc_atTop_atTop
-/

#print Filter.tendsto_Ico_atTop_atTop /-
instance tendsto_Ico_atTop_atTop : TendstoIxxClass Ico (atTop : Filter Œ±) atTop :=
  tendstoIxxClass_of_subset fun _ _ => Ico_subset_Icc_self
#align filter.tendsto_Ico_at_top_at_top Filter.tendsto_Ico_atTop_atTop
-/

#print Filter.tendsto_Ioc_atTop_atTop /-
instance tendsto_Ioc_atTop_atTop : TendstoIxxClass Ioc (atTop : Filter Œ±) atTop :=
  tendstoIxxClass_of_subset fun _ _ => Ioc_subset_Icc_self
#align filter.tendsto_Ioc_at_top_at_top Filter.tendsto_Ioc_atTop_atTop
-/

#print Filter.tendsto_Ioo_atTop_atTop /-
instance tendsto_Ioo_atTop_atTop : TendstoIxxClass Ioo (atTop : Filter Œ±) atTop :=
  tendstoIxxClass_of_subset fun _ _ => Ioo_subset_Icc_self
#align filter.tendsto_Ioo_at_top_at_top Filter.tendsto_Ioo_atTop_atTop
-/

#print Filter.tendsto_Icc_atBot_atBot /-
instance tendsto_Icc_atBot_atBot : TendstoIxxClass Icc (atBot : Filter Œ±) atBot :=
  (hasBasis_inf·µ¢_principal_finite _).TendstoIxxClass fun s hs =>
    Set.OrdConnected.out <| ord_connected_bInter fun i hi => ordConnected_Iic
#align filter.tendsto_Icc_at_bot_at_bot Filter.tendsto_Icc_atBot_atBot
-/

#print Filter.tendsto_Ico_atBot_atBot /-
instance tendsto_Ico_atBot_atBot : TendstoIxxClass Ico (atBot : Filter Œ±) atBot :=
  tendstoIxxClass_of_subset fun _ _ => Ico_subset_Icc_self
#align filter.tendsto_Ico_at_bot_at_bot Filter.tendsto_Ico_atBot_atBot
-/

#print Filter.tendsto_Ioc_atBot_atBot /-
instance tendsto_Ioc_atBot_atBot : TendstoIxxClass Ioc (atBot : Filter Œ±) atBot :=
  tendstoIxxClass_of_subset fun _ _ => Ioc_subset_Icc_self
#align filter.tendsto_Ioc_at_bot_at_bot Filter.tendsto_Ioc_atBot_atBot
-/

#print Filter.tendsto_Ioo_atBot_atBot /-
instance tendsto_Ioo_atBot_atBot : TendstoIxxClass Ioo (atBot : Filter Œ±) atBot :=
  tendstoIxxClass_of_subset fun _ _ => Ioo_subset_Icc_self
#align filter.tendsto_Ioo_at_bot_at_bot Filter.tendsto_Ioo_atBot_atBot
-/

#print Filter.OrdConnected.tendsto_Icc /-
instance OrdConnected.tendsto_Icc {s : Set Œ±} [hs : OrdConnected s] :
    TendstoIxxClass Icc (ùìü s) (ùìü s) :=
  tendstoIxxClass_principal.2 hs.out
#align filter.ord_connected.tendsto_Icc Filter.OrdConnected.tendsto_Icc
-/

#print Filter.tendsto_Ico_Ici_Ici /-
instance tendsto_Ico_Ici_Ici {a : Œ±} : TendstoIxxClass Ico (ùìü (Ici a)) (ùìü (Ici a)) :=
  tendstoIxxClass_of_subset fun _ _ => Ico_subset_Icc_self
#align filter.tendsto_Ico_Ici_Ici Filter.tendsto_Ico_Ici_Ici
-/

#print Filter.tendsto_Ico_Ioi_Ioi /-
instance tendsto_Ico_Ioi_Ioi {a : Œ±} : TendstoIxxClass Ico (ùìü (Ioi a)) (ùìü (Ioi a)) :=
  tendstoIxxClass_of_subset fun _ _ => Ico_subset_Icc_self
#align filter.tendsto_Ico_Ioi_Ioi Filter.tendsto_Ico_Ioi_Ioi
-/

#print Filter.tendsto_Ico_Iic_Iio /-
instance tendsto_Ico_Iic_Iio {a : Œ±} : TendstoIxxClass Ico (ùìü (Iic a)) (ùìü (Iio a)) :=
  tendstoIxxClass_principal.2 fun a ha b hb x hx => lt_of_lt_of_le hx.2 hb
#align filter.tendsto_Ico_Iic_Iio Filter.tendsto_Ico_Iic_Iio
-/

#print Filter.tendsto_Ico_Iio_Iio /-
instance tendsto_Ico_Iio_Iio {a : Œ±} : TendstoIxxClass Ico (ùìü (Iio a)) (ùìü (Iio a)) :=
  tendstoIxxClass_of_subset fun _ _ => Ico_subset_Icc_self
#align filter.tendsto_Ico_Iio_Iio Filter.tendsto_Ico_Iio_Iio
-/

#print Filter.tendsto_Ioc_Ici_Ioi /-
instance tendsto_Ioc_Ici_Ioi {a : Œ±} : TendstoIxxClass Ioc (ùìü (Ici a)) (ùìü (Ioi a)) :=
  tendstoIxxClass_principal.2 fun x hx y hy t ht => lt_of_le_of_lt hx ht.1
#align filter.tendsto_Ioc_Ici_Ioi Filter.tendsto_Ioc_Ici_Ioi
-/

#print Filter.tendsto_Ioc_Iic_Iic /-
instance tendsto_Ioc_Iic_Iic {a : Œ±} : TendstoIxxClass Ioc (ùìü (Iic a)) (ùìü (Iic a)) :=
  tendstoIxxClass_of_subset fun _ _ => Ioc_subset_Icc_self
#align filter.tendsto_Ioc_Iic_Iic Filter.tendsto_Ioc_Iic_Iic
-/

#print Filter.tendsto_Ioc_Iio_Iio /-
instance tendsto_Ioc_Iio_Iio {a : Œ±} : TendstoIxxClass Ioc (ùìü (Iio a)) (ùìü (Iio a)) :=
  tendstoIxxClass_of_subset fun _ _ => Ioc_subset_Icc_self
#align filter.tendsto_Ioc_Iio_Iio Filter.tendsto_Ioc_Iio_Iio
-/

#print Filter.tendsto_Ioc_Ioi_Ioi /-
instance tendsto_Ioc_Ioi_Ioi {a : Œ±} : TendstoIxxClass Ioc (ùìü (Ioi a)) (ùìü (Ioi a)) :=
  tendstoIxxClass_of_subset fun _ _ => Ioc_subset_Icc_self
#align filter.tendsto_Ioc_Ioi_Ioi Filter.tendsto_Ioc_Ioi_Ioi
-/

#print Filter.tendsto_Ioo_Ici_Ioi /-
instance tendsto_Ioo_Ici_Ioi {a : Œ±} : TendstoIxxClass Ioo (ùìü (Ici a)) (ùìü (Ioi a)) :=
  tendstoIxxClass_of_subset fun _ _ => Ioo_subset_Ioc_self
#align filter.tendsto_Ioo_Ici_Ioi Filter.tendsto_Ioo_Ici_Ioi
-/

#print Filter.tendsto_Ioo_Iic_Iio /-
instance tendsto_Ioo_Iic_Iio {a : Œ±} : TendstoIxxClass Ioo (ùìü (Iic a)) (ùìü (Iio a)) :=
  tendstoIxxClass_of_subset fun _ _ => Ioo_subset_Ico_self
#align filter.tendsto_Ioo_Iic_Iio Filter.tendsto_Ioo_Iic_Iio
-/

#print Filter.tendsto_Ioo_Ioi_Ioi /-
instance tendsto_Ioo_Ioi_Ioi {a : Œ±} : TendstoIxxClass Ioo (ùìü (Ioi a)) (ùìü (Ioi a)) :=
  tendstoIxxClass_of_subset fun _ _ => Ioo_subset_Ioc_self
#align filter.tendsto_Ioo_Ioi_Ioi Filter.tendsto_Ioo_Ioi_Ioi
-/

#print Filter.tendsto_Ioo_Iio_Iio /-
instance tendsto_Ioo_Iio_Iio {a : Œ±} : TendstoIxxClass Ioo (ùìü (Iio a)) (ùìü (Iio a)) :=
  tendstoIxxClass_of_subset fun _ _ => Ioo_subset_Ioc_self
#align filter.tendsto_Ioo_Iio_Iio Filter.tendsto_Ioo_Iio_Iio
-/

#print Filter.tendsto_Icc_Icc_Icc /-
instance tendsto_Icc_Icc_Icc {a b : Œ±} : TendstoIxxClass Icc (ùìü (Icc a b)) (ùìü (Icc a b)) :=
  tendstoIxxClass_principal.mpr fun x hx y hy => Icc_subset_Icc hx.1 hy.2
#align filter.tendsto_Icc_Icc_Icc Filter.tendsto_Icc_Icc_Icc
-/

#print Filter.tendsto_Ioc_Icc_Icc /-
instance tendsto_Ioc_Icc_Icc {a b : Œ±} : TendstoIxxClass Ioc (ùìü (Icc a b)) (ùìü (Icc a b)) :=
  tendsto_Ixx_class_of_subset fun _ _ => Ioc_subset_Icc_self
#align filter.tendsto_Ioc_Icc_Icc Filter.tendsto_Ioc_Icc_Icc
-/

end Preorder

section PartialOrder

variable [PartialOrder Œ±]

#print Filter.tendsto_Icc_pure_pure /-
instance tendsto_Icc_pure_pure {a : Œ±} : TendstoIxxClass Icc (pure a) (pure a : Filter Œ±) :=
  by
  rw [‚Üê principal_singleton]
  exact tendsto_Ixx_class_principal.2 ord_connected_singleton.out
#align filter.tendsto_Icc_pure_pure Filter.tendsto_Icc_pure_pure
-/

#print Filter.tendsto_Ico_pure_bot /-
instance tendsto_Ico_pure_bot {a : Œ±} : TendstoIxxClass Ico (pure a) ‚ä• :=
  ‚ü®by simp‚ü©
#align filter.tendsto_Ico_pure_bot Filter.tendsto_Ico_pure_bot
-/

#print Filter.tendsto_Ioc_pure_bot /-
instance tendsto_Ioc_pure_bot {a : Œ±} : TendstoIxxClass Ioc (pure a) ‚ä• :=
  ‚ü®by simp‚ü©
#align filter.tendsto_Ioc_pure_bot Filter.tendsto_Ioc_pure_bot
-/

#print Filter.tendsto_Ioo_pure_bot /-
instance tendsto_Ioo_pure_bot {a : Œ±} : TendstoIxxClass Ioo (pure a) ‚ä• :=
  ‚ü®by simp‚ü©
#align filter.tendsto_Ioo_pure_bot Filter.tendsto_Ioo_pure_bot
-/

end PartialOrder

section LinearOrder

variable [LinearOrder Œ±]

#print Filter.tendsto_Icc_uIcc_uIcc /-
instance tendsto_Icc_uIcc_uIcc {a b : Œ±} : TendstoIxxClass Icc (ùìü [a, b]) (ùìü [a, b]) :=
  Filter.tendsto_Icc_Icc_Icc
#align filter.tendsto_Icc_uIcc_uIcc Filter.tendsto_Icc_uIcc_uIcc
-/

#print Filter.tendsto_Ioc_uIcc_uIcc /-
instance tendsto_Ioc_uIcc_uIcc {a b : Œ±} : TendstoIxxClass Ioc (ùìü [a, b]) (ùìü [a, b]) :=
  Filter.tendsto_Ioc_Icc_Icc
#align filter.tendsto_Ioc_uIcc_uIcc Filter.tendsto_Ioc_uIcc_uIcc
-/

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
#print Filter.tendsto_uIcc_of_Icc /-
instance tendsto_uIcc_of_Icc {l : Filter Œ±} [TendstoIxxClass Icc l l] : TendstoIxxClass uIcc l l :=
  by
  refine' ‚ü®fun s hs => mem_map.2 <| mem_prod_self_iff.2 _‚ü©
  obtain ‚ü®t, htl, hts‚ü© : ‚àÉ t ‚àà l, ‚àÄ p ‚àà (t : Set Œ±) √óÀ¢ t, Icc (p : Œ± √ó Œ±).1 p.2 ‚àà s
  exact mem_prod_self_iff.1 (mem_map.1 (tendsto_fst.Icc tendsto_snd hs))
  refine' ‚ü®t, htl, fun p hp => _‚ü©
  cases le_total p.1 p.2
  ¬∑ rw [mem_preimage, uIcc_of_le h]
    exact hts p hp
  ¬∑ rw [mem_preimage, uIcc_of_ge h]
    exact hts ‚ü®p.2, p.1‚ü© ‚ü®hp.2, hp.1‚ü©
#align filter.tendsto_uIcc_of_Icc Filter.tendsto_uIcc_of_Icc
-/

/- warning: filter.tendsto.uIcc -> Filter.Tendsto.uIcc is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} {Œ≤ : Type.{u2}} [_inst_1 : LinearOrder.{u1} Œ±] {l : Filter.{u1} Œ±} [_inst_2 : Filter.TendstoIxxClass.{u1} Œ± (PartialOrder.toPreorder.{u1} Œ± (SemilatticeInf.toPartialOrder.{u1} Œ± (Lattice.toSemilatticeInf.{u1} Œ± (LinearOrder.toLattice.{u1} Œ± _inst_1)))) (Set.Icc.{u1} Œ± (PartialOrder.toPreorder.{u1} Œ± (SemilatticeInf.toPartialOrder.{u1} Œ± (Lattice.toSemilatticeInf.{u1} Œ± (LinearOrder.toLattice.{u1} Œ± _inst_1))))) l l] {f : Œ≤ -> Œ±} {g : Œ≤ -> Œ±} {lb : Filter.{u2} Œ≤}, (Filter.Tendsto.{u2, u1} Œ≤ Œ± f lb l) -> (Filter.Tendsto.{u2, u1} Œ≤ Œ± g lb l) -> (Filter.Tendsto.{u2, u1} Œ≤ (Set.{u1} Œ±) (fun (x : Œ≤) => Set.uIcc.{u1} Œ± (LinearOrder.toLattice.{u1} Œ± _inst_1) (f x) (g x)) lb (Filter.smallSets.{u1} Œ± l))
but is expected to have type
  forall {Œ± : Type.{u2}} {Œ≤ : Type.{u1}} [_inst_1 : LinearOrder.{u2} Œ±] {l : Filter.{u2} Œ±} [_inst_2 : Filter.TendstoIxxClass.{u2} Œ± (Set.Icc.{u2} Œ± (PartialOrder.toPreorder.{u2} Œ± (SemilatticeInf.toPartialOrder.{u2} Œ± (Lattice.toSemilatticeInf.{u2} Œ± (DistribLattice.toLattice.{u2} Œ± (instDistribLattice.{u2} Œ± _inst_1)))))) l l] {f : Œ≤ -> Œ±} {g : Œ≤ -> Œ±} {lb : Filter.{u1} Œ≤}, (Filter.Tendsto.{u1, u2} Œ≤ Œ± f lb l) -> (Filter.Tendsto.{u1, u2} Œ≤ Œ± g lb l) -> (Filter.Tendsto.{u1, u2} Œ≤ (Set.{u2} Œ±) (fun (x : Œ≤) => Set.uIcc.{u2} Œ± (DistribLattice.toLattice.{u2} Œ± (instDistribLattice.{u2} Œ± _inst_1)) (f x) (g x)) lb (Filter.smallSets.{u2} Œ± l))
Case conversion may be inaccurate. Consider using '#align filter.tendsto.uIcc Filter.Tendsto.uIcc‚Çì'. -/
theorem Tendsto.uIcc {l : Filter Œ±} [TendstoIxxClass Icc l l] {f g : Œ≤ ‚Üí Œ±} {lb : Filter Œ≤}
    (hf : Tendsto f lb l) (hg : Tendsto g lb l) : Tendsto (fun x => [f x, g x]) lb l.smallSets :=
  TendstoIxxClass.tendsto_Ixx.comp <| hf.prod_mk hg
#align filter.tendsto.uIcc Filter.Tendsto.uIcc

end LinearOrder

end Filter

