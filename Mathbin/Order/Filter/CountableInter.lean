import Mathbin.Order.Filter.Basic 
import Mathbin.Data.Set.Countable

/-!
# Filters with countable intersection property

In this file we define `countable_Inter_filter` to be the class of filters with the following
property: for any countable collection of sets `s ‚àà l` their intersection belongs to `l` as well.

Two main examples are the `residual` filter defined in `topology.metric_space.baire` and
the `measure.ae` filter defined in `measure_theory.measure_space`.
-/


open Set Filter

open_locale Filter

variable{Œπ Œ± : Type _}

/-- A filter `l` has the countable intersection property if for any countable collection
of sets `s ‚àà l` their intersection belongs to `l` as well. -/
class CountableInterFilter(l : Filter Œ±) : Prop where 
  countable_sInter_mem_sets' : ‚àÄ {S : Set (Set Œ±)} (hSc : countable S) (hS : ‚àÄ s (_ : s ‚àà S), s ‚àà l), ‚ãÇ‚ÇÄS ‚àà l

variable{l : Filter Œ±}[CountableInterFilter l]

theorem countable_sInter_mem_sets {S : Set (Set Œ±)} (hSc : countable S) : ‚ãÇ‚ÇÄS ‚àà l ‚Üî ‚àÄ s (_ : s ‚àà S), s ‚àà l :=
  ‚ü®fun hS s hs => mem_of_superset hS (sInter_subset_of_mem hs), CountableInterFilter.countable_sInter_mem_sets' hSc‚ü©

theorem countable_Inter_mem_sets [Encodable Œπ] {s : Œπ ‚Üí Set Œ±} : (‚ãÇi, s i) ‚àà l ‚Üî ‚àÄ i, s i ‚àà l :=
  sInter_range s ‚ñ∏ (countable_sInter_mem_sets (countable_range _)).trans forall_range_iff

-- error in Order.Filter.CountableInter: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
theorem countable_bInter_mem
{S : set Œπ}
(hS : countable S)
{s : ‚àÄ
 i ¬´expr ‚àà ¬ª S, set Œ±} : ¬´expr ‚Üî ¬ª(¬´expr ‚àà ¬ª(¬´expr‚ãÇ , ¬ª((i ¬´expr ‚àà ¬ª S), s i ¬´expr‚Äπ ‚Ä∫¬ª(_)), l), ‚àÄ
 i ¬´expr ‚àà ¬ª S, ¬´expr ‚àà ¬ª(s i ¬´expr‚Äπ ‚Ä∫¬ª(_), l)) :=
begin
  rw ["[", expr bInter_eq_Inter, "]"] [],
  haveI [] [] [":=", expr hS.to_encodable],
  exact [expr countable_Inter_mem_sets.trans subtype.forall]
end

theorem eventually_countable_forall [Encodable Œπ] {p : Œ± ‚Üí Œπ ‚Üí Prop} : (‚àÄ·∂†x in l, ‚àÄ i, p x i) ‚Üî ‚àÄ i, ‚àÄ·∂†x in l, p x i :=
  by 
    simpa only [Filter.Eventually, set_of_forall] using @countable_Inter_mem_sets _ _ l _ _ fun i => { x | p x i }

theorem eventually_countable_ball {S : Set Œπ} (hS : countable S) {p : ‚àÄ (x : Œ±) i (_ : i ‚àà S), Prop} :
  (‚àÄ·∂†x in l, ‚àÄ i (_ : i ‚àà S), p x i ‚Äπ_‚Ä∫) ‚Üî ‚àÄ i (_ : i ‚àà S), ‚àÄ·∂†x in l, p x i ‚Äπ_‚Ä∫ :=
  by 
    simpa only [Filter.Eventually, set_of_forall] using @countable_bInter_mem _ _ l _ _ hS fun i hi => { x | p x i hi }

theorem EventuallyLe.countable_Union [Encodable Œπ] {s t : Œπ ‚Üí Set Œ±} (h : ‚àÄ i, s i ‚â§·∂†[l] t i) :
  (‚ãÉi, s i) ‚â§·∂†[l] ‚ãÉi, t i :=
  (eventually_countable_forall.2 h).mono$ fun x hst hs => mem_Union.2$ (mem_Union.1 hs).imp hst

theorem EventuallyEq.countable_Union [Encodable Œπ] {s t : Œπ ‚Üí Set Œ±} (h : ‚àÄ i, s i =·∂†[l] t i) :
  (‚ãÉi, s i) =·∂†[l] ‚ãÉi, t i :=
  (EventuallyLe.countable_Union fun i => (h i).le).antisymm (EventuallyLe.countable_Union fun i => (h i).symm.le)

-- error in Order.Filter.CountableInter: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
theorem eventually_le.countable_bUnion
{S : set Œπ}
(hS : countable S)
{s t : ‚àÄ i ¬´expr ‚àà ¬ª S, set Œ±}
(h : ‚àÄ
 i ¬´expr ‚àà ¬ª S, ¬´expr ‚â§·∂†[ ] ¬ª(s i ¬´expr‚Äπ ‚Ä∫¬ª(_), l, t i ¬´expr‚Äπ ‚Ä∫¬ª(_))) : ¬´expr ‚â§·∂†[ ] ¬ª(¬´expr‚ãÉ , ¬ª((i ¬´expr ‚àà ¬ª S), s i ¬´expr‚Äπ ‚Ä∫¬ª(_)), l, ¬´expr‚ãÉ , ¬ª((i ¬´expr ‚àà ¬ª S), t i ¬´expr‚Äπ ‚Ä∫¬ª(_))) :=
begin
  simp [] [] ["only"] ["[", expr bUnion_eq_Union, "]"] [] [],
  haveI [] [] [":=", expr hS.to_encodable],
  exact [expr eventually_le.countable_Union (Œª i, h i i.2)]
end

theorem EventuallyEq.countable_bUnion {S : Set Œπ} (hS : countable S) {s t : ‚àÄ i (_ : i ‚àà S), Set Œ±}
  (h : ‚àÄ i (_ : i ‚àà S), s i ‚Äπ_‚Ä∫ =·∂†[l] t i ‚Äπ_‚Ä∫) : (‚ãÉ(i : _)(_ : i ‚àà S), s i ‚Äπ_‚Ä∫) =·∂†[l] ‚ãÉ(i : _)(_ : i ‚àà S), t i ‚Äπ_‚Ä∫ :=
  (EventuallyLe.countable_bUnion hS fun i hi => (h i hi).le).antisymm
    (EventuallyLe.countable_bUnion hS fun i hi => (h i hi).symm.le)

theorem EventuallyLe.countable_Inter [Encodable Œπ] {s t : Œπ ‚Üí Set Œ±} (h : ‚àÄ i, s i ‚â§·∂†[l] t i) :
  (‚ãÇi, s i) ‚â§·∂†[l] ‚ãÇi, t i :=
  (eventually_countable_forall.2 h).mono$ fun x hst hs => mem_Inter.2$ fun i => hst _ (mem_Inter.1 hs i)

theorem EventuallyEq.countable_Inter [Encodable Œπ] {s t : Œπ ‚Üí Set Œ±} (h : ‚àÄ i, s i =·∂†[l] t i) :
  (‚ãÇi, s i) =·∂†[l] ‚ãÇi, t i :=
  (EventuallyLe.countable_Inter fun i => (h i).le).antisymm (EventuallyLe.countable_Inter fun i => (h i).symm.le)

-- error in Order.Filter.CountableInter: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
theorem eventually_le.countable_bInter
{S : set Œπ}
(hS : countable S)
{s t : ‚àÄ i ¬´expr ‚àà ¬ª S, set Œ±}
(h : ‚àÄ
 i ¬´expr ‚àà ¬ª S, ¬´expr ‚â§·∂†[ ] ¬ª(s i ¬´expr‚Äπ ‚Ä∫¬ª(_), l, t i ¬´expr‚Äπ ‚Ä∫¬ª(_))) : ¬´expr ‚â§·∂†[ ] ¬ª(¬´expr‚ãÇ , ¬ª((i ¬´expr ‚àà ¬ª S), s i ¬´expr‚Äπ ‚Ä∫¬ª(_)), l, ¬´expr‚ãÇ , ¬ª((i ¬´expr ‚àà ¬ª S), t i ¬´expr‚Äπ ‚Ä∫¬ª(_))) :=
begin
  simp [] [] ["only"] ["[", expr bInter_eq_Inter, "]"] [] [],
  haveI [] [] [":=", expr hS.to_encodable],
  exact [expr eventually_le.countable_Inter (Œª i, h i i.2)]
end

theorem EventuallyEq.countable_bInter {S : Set Œπ} (hS : countable S) {s t : ‚àÄ i (_ : i ‚àà S), Set Œ±}
  (h : ‚àÄ i (_ : i ‚àà S), s i ‚Äπ_‚Ä∫ =·∂†[l] t i ‚Äπ_‚Ä∫) : (‚ãÇ(i : _)(_ : i ‚àà S), s i ‚Äπ_‚Ä∫) =·∂†[l] ‚ãÇ(i : _)(_ : i ‚àà S), t i ‚Äπ_‚Ä∫ :=
  (EventuallyLe.countable_bInter hS fun i hi => (h i hi).le).antisymm
    (EventuallyLe.countable_bInter hS fun i hi => (h i hi).symm.le)

instance countable_Inter_filter_principal (s : Set Œ±) : CountableInterFilter (ùìü s) :=
  ‚ü®fun S hSc hS => subset_sInter hS‚ü©

instance countable_Inter_filter_bot : CountableInterFilter (‚ä• : Filter Œ±) :=
  by 
    rw [‚Üêprincipal_empty]
    apply countable_Inter_filter_principal

instance countable_Inter_filter_top : CountableInterFilter (‚ä§ : Filter Œ±) :=
  by 
    rw [‚Üêprincipal_univ]
    apply countable_Inter_filter_principal

/-- Infimum of two `countable_Inter_filter`s is a `countable_Inter_filter`. This is useful, e.g.,
to automatically get an instance for `residual Œ± ‚äì ùìü s`. -/
instance countable_Inter_filter_inf (l‚ÇÅ l‚ÇÇ : Filter Œ±) [CountableInterFilter l‚ÇÅ] [CountableInterFilter l‚ÇÇ] :
  CountableInterFilter (l‚ÇÅ‚äìl‚ÇÇ) :=
  by 
    refine' ‚ü®fun S hSc hS => _‚ü©
    choose s hs t ht hst using hS 
    replace hs : (‚ãÇ(i : _)(_ : i ‚àà S), s i ‚Äπ_‚Ä∫) ‚àà l‚ÇÅ := (countable_bInter_mem hSc).2 hs 
    replace ht : (‚ãÇ(i : _)(_ : i ‚àà S), t i ‚Äπ_‚Ä∫) ‚àà l‚ÇÇ := (countable_bInter_mem hSc).2 ht 
    refine' mem_of_superset (inter_mem_inf hs ht) (subset_sInter$ fun i hi => _)
    rw [hst i hi]
    apply inter_subset_inter <;> exact Inter_subset_of_subset i (Inter_subset _ _)

/-- Supremum of two `countable_Inter_filter`s is a `countable_Inter_filter`. -/
instance countable_Inter_filter_sup (l‚ÇÅ l‚ÇÇ : Filter Œ±) [CountableInterFilter l‚ÇÅ] [CountableInterFilter l‚ÇÇ] :
  CountableInterFilter (l‚ÇÅ‚äîl‚ÇÇ) :=
  by 
    refine' ‚ü®fun S hSc hS => ‚ü®_, _‚ü©‚ü© <;> refine' (countable_sInter_mem_sets hSc).2 fun s hs => _ 
    exacts[(hS s hs).1, (hS s hs).2]

