import Mathbin.CategoryTheory.Monoidal.Category

/-!
# Rigid (autonomous) monoidal categories

This file defines rigid (autonomous) monoidal categories and the necessary theory about
exact pairings and duals.

## Main definitions

* `exact_pairing` of two objects of a monoidal category
* Type classes `has_left_dual` and `has_right_dual` that capture that a pairing exists
* The `right_adjoint_mate f` as a morphism `f·òÅ : Y·òÅ ‚ü∂ X·òÅ` for a morphism `f : X ‚ü∂ Y`
* The classes of `right_rigid_category`, `left_rigid_category` and `rigid_category`

## Main statements

* `comp_right_adjoint_mate`: The adjoint mates of the composition is the composition of
  adjoint mates.

## Notations

* `Œ∑_` and `Œµ_` denote the coevaluation and evaluation morphism of an exact pairing.
* `X·òÅ` and `·òÅX` denote the right and left dual of an object, as well as the adjoint
  mate of a morphism.

## Future work

* Show that `X ‚äó Y` and `Y·òÅ ‚äó X·òÅ` form an exact pairing.
* Show that the left adjoint mate of the right adjoint mate of a morphism is the morphism itself.
* Simplify constructions in the case where a symmetry or braiding is present.

## References

* <https://ncatlab.org/nlab/show/rigid+monoidal+category>

## Tags

rigid category, monoidal category

-/


open CategoryTheory

universe v v‚ÇÅ v‚ÇÇ v‚ÇÉ u u‚ÇÅ u‚ÇÇ u‚ÇÉ

noncomputable theory

namespace CategoryTheory

variable{C : Type u‚ÇÅ}[category.{v‚ÇÅ} C][monoidal_category C]

/-- An exact pairing is a pair of objects `X Y : C` which admit
  a coevaluation and evaluation morphism which fulfill two triangle equalities. -/
class exact_pairing(X Y : C) where 
  coevaluation{} : ùüô_ C ‚ü∂ X ‚äó Y 
  evaluation{} : Y ‚äó X ‚ü∂ ùüô_ C 
  coevaluation_evaluation'{} : (ùüô Y ‚äó coevaluation) ‚â´ (Œ±_ _ _ _).inv ‚â´ (evaluation ‚äó ùüô Y) = (œÅ_ Y).Hom ‚â´ (Œª_ Y).inv :=
   by 
  runTac 
    obviously 
  evaluation_coevaluation'{} : (coevaluation ‚äó ùüô X) ‚â´ (Œ±_ _ _ _).Hom ‚â´ (ùüô X ‚äó evaluation) = (Œª_ X).Hom ‚â´ (œÅ_ X).inv :=
   by 
  runTac 
    obviously

open ExactPairing

notation "Œ∑_" => exact_pairing.coevaluation

notation "Œµ_" => exact_pairing.evaluation

restate_axiom coevaluation_evaluation'

attribute [reassoc, simp] exact_pairing.coevaluation_evaluation

restate_axiom evaluation_coevaluation'

attribute [reassoc, simp] exact_pairing.evaluation_coevaluation

instance exact_pairing_unit : exact_pairing (ùüô_ C) (ùüô_ C) :=
  { coevaluation := (œÅ_ _).inv, evaluation := (œÅ_ _).Hom,
    coevaluation_evaluation' :=
      by 
        rw [monoidal_category.triangle_assoc_comp_right, monoidal_category.unitors_inv_equal,
          monoidal_category.unitors_equal]
        simp ,
    evaluation_coevaluation' :=
      by 
        rw [monoidal_category.triangle_assoc_comp_right_inv_assoc, monoidal_category.unitors_inv_equal,
          monoidal_category.unitors_equal]
        simp  }

/-- A class of objects which have a right dual. -/
class has_right_dual(X : C) where 
  rightDual : C
  [exact : exact_pairing X right_dual]

/-- A class of objects with have a left dual. -/
class has_left_dual(Y : C) where 
  leftDual : C
  [exact : exact_pairing left_dual Y]

attribute [instance] has_right_dual.exact

attribute [instance] has_left_dual.exact

open ExactPairing HasRightDual HasLeftDual MonoidalCategory

prefix:1025 "·òÅ" => left_dual

postfix:1025 "·òÅ" => right_dual

instance has_right_dual_unit : has_right_dual (ùüô_ C) :=
  { rightDual := ùüô_ C }

instance has_left_dual_unit : has_left_dual (ùüô_ C) :=
  { leftDual := ùüô_ C }

instance has_right_dual_left_dual {X : C} [has_left_dual X] : has_right_dual ·òÅ(X) :=
  { rightDual := X }

instance has_left_dual_right_dual {X : C} [has_right_dual X] : has_left_dual (X)·òÅ :=
  { leftDual := X }

@[simp]
theorem left_dual_right_dual {X : C} [has_right_dual X] : ·òÅ(X)·òÅ = X :=
  rfl

@[simp]
theorem right_dual_left_dual {X : C} [has_left_dual X] : (·òÅ(X))·òÅ = X :=
  rfl

/-- The right adjoint mate `f·òÅ : X·òÅ ‚ü∂ Y·òÅ` of a morphism `f : X ‚ü∂ Y`. -/
def right_adjoint_mate {X Y : C} [has_right_dual X] [has_right_dual Y] (f : X ‚ü∂ Y) : (Y)·òÅ ‚ü∂ (X)·òÅ :=
  (œÅ_ _).inv ‚â´ (ùüô _ ‚äó Œ∑_ _ _) ‚â´ (ùüô _ ‚äó f ‚äó ùüô _) ‚â´ (Œ±_ _ _ _).inv ‚â´ (Œµ_ _ _ ‚äó ùüô _) ‚â´ (Œª_ _).Hom

/-- The left adjoint mate `·òÅf : ·òÅY ‚ü∂ ·òÅX` of a morphism `f : X ‚ü∂ Y`. -/
def left_adjoint_mate {X Y : C} [has_left_dual X] [has_left_dual Y] (f : X ‚ü∂ Y) : ·òÅ(Y) ‚ü∂ ·òÅ(X) :=
  (Œª_ _).inv ‚â´ (Œ∑_ ·òÅ(X) X ‚äó ùüô _) ‚â´ ((ùüô _ ‚äó f) ‚äó ùüô _) ‚â´ (Œ±_ _ _ _).Hom ‚â´ (ùüô _ ‚äó Œµ_ _ _) ‚â´ (œÅ_ _).Hom

notation f "·òÅ" => right_adjoint_mate f

notation "·òÅ" f => left_adjoint_mate f

@[simp]
theorem right_adjoint_mate_id {X : C} [has_right_dual X] : ùüô X·òÅ = ùüô (X·òÅ) :=
  by 
    simp only [right_adjoint_mate, monoidal_category.tensor_id, category.id_comp, coevaluation_evaluation_assoc,
      category.comp_id, iso.inv_hom_id]

@[simp]
theorem left_adjoint_mate_id {X : C} [has_left_dual X] : (·òÅùüô X) = ùüô (·òÅX) :=
  by 
    simp only [left_adjoint_mate, monoidal_category.tensor_id, category.id_comp, evaluation_coevaluation_assoc,
      category.comp_id, iso.inv_hom_id]

theorem right_adjoint_mate_comp {X Y Z : C} [has_right_dual X] [has_right_dual Y] {f : X ‚ü∂ Y} {g : X·òÅ ‚ü∂ Z} :
  f·òÅ ‚â´ g = (œÅ_ (Y·òÅ)).inv ‚â´ (ùüô _ ‚äó Œ∑_ X (X·òÅ)) ‚â´ (ùüô _ ‚äó f ‚äó g) ‚â´ (Œ±_ (Y·òÅ) Y Z).inv ‚â´ (Œµ_ Y (Y·òÅ) ‚äó ùüô _) ‚â´ (Œª_ Z).Hom :=
  by 
    dunfold right_adjoint_mate 
    rw [category.assoc, category.assoc, associator_inv_naturality_assoc, associator_inv_naturality_assoc,
      ‚Üêtensor_id_comp_id_tensor g, category.assoc, category.assoc, category.assoc, category.assoc,
      id_tensor_comp_tensor_id_assoc, ‚Üêleft_unitor_naturality, tensor_id_comp_id_tensor_assoc]

theorem left_adjoint_mate_comp {X Y Z : C} [has_left_dual X] [has_left_dual Y] {f : X ‚ü∂ Y} {g : (·òÅX) ‚ü∂ Z} :
  (·òÅf) ‚â´ g = (Œª_ _).inv ‚â´ (Œ∑_ (·òÅX) X ‚äó ùüô _) ‚â´ ((g ‚äó f) ‚äó ùüô _) ‚â´ (Œ±_ _ _ _).Hom ‚â´ (ùüô _ ‚äó Œµ_ _ _) ‚â´ (œÅ_ _).Hom :=
  by 
    dunfold left_adjoint_mate 
    rw [category.assoc, category.assoc, associator_naturality_assoc, associator_naturality_assoc,
      ‚Üêid_tensor_comp_tensor_id _ g, category.assoc, category.assoc, category.assoc, category.assoc,
      tensor_id_comp_id_tensor_assoc, ‚Üêright_unitor_naturality, id_tensor_comp_tensor_id_assoc]

/-- The composition of right adjoint mates is the adjoint mate of the composition. -/
@[reassoc]
theorem comp_right_adjoint_mate {X Y Z : C} [has_right_dual X] [has_right_dual Y] [has_right_dual Z] {f : X ‚ü∂ Y}
  {g : Y ‚ü∂ Z} : (f ‚â´ g)·òÅ = g·òÅ ‚â´ f·òÅ :=
  by 
    rw [right_adjoint_mate_comp]
    simp only [right_adjoint_mate, comp_tensor_id, iso.cancel_iso_inv_left, id_tensor_comp, category.assoc]
    symm 
    iterate 5
      trans 
      rw [‚Üêcategory.id_comp g, tensor_comp]
    rw [‚Üêcategory.assoc]
    symm 
    iterate 2
      trans 
      rw [‚Üêcategory.assoc]
    apply eq_whisker 
    repeat' 
      rw [‚Üêid_tensor_comp]
    congr 1
    rw [‚Üêid_tensor_comp_tensor_id (Œª_ (X·òÅ)).Hom g, id_tensor_right_unitor_inv, category.assoc, category.assoc,
      right_unitor_inv_naturality_assoc, ‚Üêassociator_naturality_assoc, tensor_id, tensor_id_comp_id_tensor_assoc,
      ‚Üêassociator_naturality_assoc]
    sliceRHS 2 3 => rw [‚Üêtensor_comp, tensor_id, category.comp_id, ‚Üêcategory.id_comp (Œ∑_ Y (Y·òÅ)), tensor_comp]
    rw [‚Üêid_tensor_comp_tensor_id _ (Œ∑_ Y (Y·òÅ)), ‚Üêtensor_id]
    repeat' 
      rw [category.assoc]
    rw [pentagon_hom_inv_assoc, ‚Üêassociator_naturality_assoc, associator_inv_naturality_assoc]
    sliceRHS 5 7 => rw [‚Üêcomp_tensor_id, ‚Üêcomp_tensor_id, evaluation_coevaluation, comp_tensor_id]
    rw [associator_inv_naturality_assoc]
    sliceRHS 4 5 => rw [‚Üêtensor_comp, left_unitor_naturality, tensor_comp]
    repeat' 
      rw [category.assoc]
    rw [triangle_assoc_comp_right_inv_assoc, ‚Üêleft_unitor_tensor_assoc, left_unitor_naturality_assoc, unitors_equal,
      ‚Üêcategory.assoc, ‚Üêcategory.assoc]
    simp 

/-- The composition of left adjoint mates is the adjoint mate of the composition. -/
@[reassoc]
theorem comp_left_adjoint_mate {X Y Z : C} [has_left_dual X] [has_left_dual Y] [has_left_dual Z] {f : X ‚ü∂ Y}
  {g : Y ‚ü∂ Z} : (·òÅf ‚â´ g) = (·òÅg) ‚â´ ·òÅf :=
  by 
    rw [left_adjoint_mate_comp]
    simp only [left_adjoint_mate, id_tensor_comp, iso.cancel_iso_inv_left, comp_tensor_id, category.assoc]
    symm 
    iterate 5
      trans 
      rw [‚Üêcategory.id_comp g, tensor_comp]
    rw [‚Üêcategory.assoc]
    symm 
    iterate 2
      trans 
      rw [‚Üêcategory.assoc]
    apply eq_whisker 
    repeat' 
      rw [‚Üêcomp_tensor_id]
    congr 1
    rw [‚Üêtensor_id_comp_id_tensor g (œÅ_ (·òÅX)).Hom, left_unitor_inv_tensor_id, category.assoc, category.assoc,
      left_unitor_inv_naturality_assoc, ‚Üêassociator_inv_naturality_assoc, tensor_id, id_tensor_comp_tensor_id_assoc,
      ‚Üêassociator_inv_naturality_assoc]
    sliceRHS 2 3 => rw [‚Üêtensor_comp, tensor_id, category.comp_id, ‚Üêcategory.id_comp (Œ∑_ (·òÅY) Y), tensor_comp]
    rw [‚Üêtensor_id_comp_id_tensor (Œ∑_ (·òÅY) Y), ‚Üêtensor_id]
    repeat' 
      rw [category.assoc]
    rw [pentagon_inv_hom_assoc, ‚Üêassociator_inv_naturality_assoc, associator_naturality_assoc]
    sliceRHS 5 7 => rw [‚Üêid_tensor_comp, ‚Üêid_tensor_comp, coevaluation_evaluation, id_tensor_comp]
    rw [associator_naturality_assoc]
    sliceRHS 4 5 => rw [‚Üêtensor_comp, right_unitor_naturality, tensor_comp]
    repeat' 
      rw [category.assoc]
    rw [triangle_assoc_comp_left_inv_assoc, ‚Üêright_unitor_tensor_assoc, right_unitor_naturality_assoc, ‚Üêunitors_equal,
      ‚Üêcategory.assoc, ‚Üêcategory.assoc]
    simp 

/-- Right duals are isomorphic. -/
def right_dual_iso {X Y‚ÇÅ Y‚ÇÇ : C} (_ : exact_pairing X Y‚ÇÅ) (_ : exact_pairing X Y‚ÇÇ) : Y‚ÇÅ ‚âÖ Y‚ÇÇ :=
  { Hom := @right_adjoint_mate C _ _ X X ‚ü®Y‚ÇÇ‚ü© ‚ü®Y‚ÇÅ‚ü© (ùüô X), inv := @right_adjoint_mate C _ _ X X ‚ü®Y‚ÇÅ‚ü© ‚ü®Y‚ÇÇ‚ü© (ùüô X),
    hom_inv_id' :=
      by 
        rw [‚Üêcomp_right_adjoint_mate, category.comp_id, right_adjoint_mate_id],
    inv_hom_id' :=
      by 
        rw [‚Üêcomp_right_adjoint_mate, category.comp_id, right_adjoint_mate_id] }

/-- Left duals are isomorphic. -/
def left_dual_iso {X‚ÇÅ X‚ÇÇ Y : C} (p‚ÇÅ : exact_pairing X‚ÇÅ Y) (p‚ÇÇ : exact_pairing X‚ÇÇ Y) : X‚ÇÅ ‚âÖ X‚ÇÇ :=
  { Hom := @left_adjoint_mate C _ _ Y Y ‚ü®X‚ÇÇ‚ü© ‚ü®X‚ÇÅ‚ü© (ùüô Y), inv := @left_adjoint_mate C _ _ Y Y ‚ü®X‚ÇÅ‚ü© ‚ü®X‚ÇÇ‚ü© (ùüô Y),
    hom_inv_id' :=
      by 
        rw [‚Üêcomp_left_adjoint_mate, category.comp_id, left_adjoint_mate_id],
    inv_hom_id' :=
      by 
        rw [‚Üêcomp_left_adjoint_mate, category.comp_id, left_adjoint_mate_id] }

@[simp]
theorem right_dual_iso_id {X Y : C} (p : exact_pairing X Y) : right_dual_iso p p = iso.refl Y :=
  by 
    ext 
    simp only [right_dual_iso, iso.refl_hom, right_adjoint_mate_id]

@[simp]
theorem left_dual_iso_id {X Y : C} (p : exact_pairing X Y) : left_dual_iso p p = iso.refl X :=
  by 
    ext 
    simp only [left_dual_iso, iso.refl_hom, left_adjoint_mate_id]

/-- A right rigid monoidal category is one in which every object has a right dual. -/
class right_rigid_category(C : Type u)[category.{v} C][monoidal_category.{v} C] where 
  [rightDual : ‚àÄ (X : C), has_right_dual X]

/-- A left rigid monoidal category is one in which every object has a right dual. -/
class left_rigid_category(C : Type u)[category.{v} C][monoidal_category.{v} C] where 
  [leftDual : ‚àÄ (X : C), has_left_dual X]

attribute [instance] right_rigid_category.right_dual

attribute [instance] left_rigid_category.left_dual

/-- A rigid monoidal category is a monoidal category which is left rigid and right rigid. -/
class rigid_category(C : Type u)[category.{v} C][monoidal_category.{v} C] extends right_rigid_category C,
  left_rigid_category C

end CategoryTheory

