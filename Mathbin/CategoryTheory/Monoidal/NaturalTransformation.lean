import Mathbin.CategoryTheory.Monoidal.Functor 
import Mathbin.CategoryTheory.FullSubcategory

/-!
# Monoidal natural transformations

Natural transformations between (lax) monoidal functors must satisfy
an additional compatibility relation with the tensorators:
`F.Œº X Y ‚â´ app (X ‚äó Y) = (app X ‚äó app Y) ‚â´ G.Œº X Y`.

(Lax) monoidal functors between a fixed pair of monoidal categories
themselves form a category.
-/


open CategoryTheory

universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

open CategoryTheory.Category

open CategoryTheory.Functor

namespace CategoryTheory

open MonoidalCategory

variable{C : Type u‚ÇÅ}[category.{v‚ÇÅ} C][monoidal_category.{v‚ÇÅ} C]{D : Type u‚ÇÇ}[category.{v‚ÇÇ} D][monoidal_category.{v‚ÇÇ} D]

/--
A monoidal natural transformation is a natural transformation between (lax) monoidal functors
additionally satisfying:
`F.Œº X Y ‚â´ app (X ‚äó Y) = (app X ‚äó app Y) ‚â´ G.Œº X Y`
-/
@[ext]
structure monoidal_nat_trans(F G : lax_monoidal_functor C D) extends nat_trans F.to_functor G.to_functor where 
  unit' : F.Œµ ‚â´ app (ùüô_ C) = G.Œµ :=  by 
  runTac 
    obviously 
  tensor' : ‚àÄ X Y, F.Œº _ _ ‚â´ app (X ‚äó Y) = (app X ‚äó app Y) ‚â´ G.Œº _ _ :=  by 
  runTac 
    obviously

restate_axiom monoidal_nat_trans.tensor'

attribute [simp, reassoc] monoidal_nat_trans.tensor

restate_axiom monoidal_nat_trans.unit'

attribute [simp, reassoc] monoidal_nat_trans.unit

namespace MonoidalNatTrans

/--
The identity monoidal natural transformation.
-/
@[simps]
def id (F : lax_monoidal_functor C D) : monoidal_nat_trans F F :=
  { ùüô F.to_functor with  }

instance  (F : lax_monoidal_functor C D) : Inhabited (monoidal_nat_trans F F) :=
  ‚ü®id F‚ü©

/--
Vertical composition of monoidal natural transformations.
-/
@[simps]
def vcomp {F G H : lax_monoidal_functor C D} (Œ± : monoidal_nat_trans F G) (Œ≤ : monoidal_nat_trans G H) :
  monoidal_nat_trans F H :=
  { nat_trans.vcomp Œ±.to_nat_trans Œ≤.to_nat_trans with  }

instance category_lax_monoidal_functor : category (lax_monoidal_functor C D) :=
  { Hom := monoidal_nat_trans, id := id, comp := fun F G H Œ± Œ≤ => vcomp Œ± Œ≤ }

@[simp]
theorem comp_to_nat_trans_lax {F G H : lax_monoidal_functor C D} {Œ± : F ‚ü∂ G} {Œ≤ : G ‚ü∂ H} :
  (Œ± ‚â´ Œ≤).toNatTrans = @category_struct.comp (C ‚•§ D) _ _ _ _ Œ±.to_nat_trans Œ≤.to_nat_trans :=
  rfl

instance category_monoidal_functor : category (monoidal_functor C D) :=
  induced_category.category monoidal_functor.to_lax_monoidal_functor

@[simp]
theorem comp_to_nat_trans {F G H : monoidal_functor C D} {Œ± : F ‚ü∂ G} {Œ≤ : G ‚ü∂ H} :
  (Œ± ‚â´ Œ≤).toNatTrans = @category_struct.comp (C ‚•§ D) _ _ _ _ Œ±.to_nat_trans Œ≤.to_nat_trans :=
  rfl

variable{E : Type u‚ÇÉ}[category.{v‚ÇÉ} E][monoidal_category.{v‚ÇÉ} E]

/--
Horizontal composition of monoidal natural transformations.
-/
@[simps]
def hcomp {F G : lax_monoidal_functor C D} {H K : lax_monoidal_functor D E} (Œ± : monoidal_nat_trans F G)
  (Œ≤ : monoidal_nat_trans H K) : monoidal_nat_trans (F ‚äó‚ãô H) (G ‚äó‚ãô K) :=
  { nat_trans.hcomp Œ±.to_nat_trans Œ≤.to_nat_trans with
    unit' :=
      by 
        dsimp 
        simp 
        convLHS => rw [‚ÜêK.to_functor.map_comp, Œ±.unit],
    tensor' :=
      fun X Y =>
        by 
          dsimp 
          simp 
          convLHS => rw [‚ÜêK.to_functor.map_comp, Œ±.tensor, K.to_functor.map_comp] }

end MonoidalNatTrans

namespace MonoidalNatIso

variable{F G : lax_monoidal_functor C D}

/--
Construct a monoidal natural isomorphism from object level isomorphisms,
and the monoidal naturality in the forward direction.
-/
def of_components (app : ‚àÄ (X : C), F.obj X ‚âÖ G.obj X)
  (naturality : ‚àÄ {X Y : C} (f : X ‚ü∂ Y), F.map f ‚â´ (app Y).Hom = (app X).Hom ‚â´ G.map f)
  (unit : F.Œµ ‚â´ (app (ùüô_ C)).Hom = G.Œµ)
  (tensor : ‚àÄ X Y, F.Œº X Y ‚â´ (app (X ‚äó Y)).Hom = ((app X).Hom ‚äó (app Y).Hom) ‚â´ G.Œº X Y) : F ‚âÖ G :=
  { Hom := { app := fun X => (app X).Hom },
    inv :=
      { (nat_iso.of_components app @naturality).inv with app := fun X => (app X).inv,
        unit' :=
          by 
            dsimp 
            rw [‚ÜêUnit, assoc, iso.hom_inv_id, comp_id],
        tensor' :=
          fun X Y =>
            by 
              dsimp 
              rw [iso.comp_inv_eq, assoc, tensor, ‚Üêtensor_comp_assoc, iso.inv_hom_id, iso.inv_hom_id, tensor_id,
                id_comp] } }

@[simp]
theorem of_components.hom_app (app : ‚àÄ (X : C), F.obj X ‚âÖ G.obj X) naturality unit tensor X :
  (of_components app naturality Unit tensor).Hom.app X = (app X).Hom :=
  rfl

@[simp]
theorem of_components.inv_app (app : ‚àÄ (X : C), F.obj X ‚âÖ G.obj X) naturality unit tensor X :
  (of_components app naturality Unit tensor).inv.app X = (app X).inv :=
  by 
    simp [of_components]

instance is_iso_of_is_iso_app (Œ± : F ‚ü∂ G) [‚àÄ (X : C), is_iso (Œ±.app X)] : is_iso Œ± :=
  ‚ü®(is_iso.of_iso
        (of_components (fun X => as_iso (Œ±.app X)) (fun X Y f => Œ±.to_nat_trans.naturality f) Œ±.unit Œ±.tensor)).1‚ü©

end MonoidalNatIso

end CategoryTheory

