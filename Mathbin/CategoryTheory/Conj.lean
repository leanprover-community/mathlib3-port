/-
Copyright (c) 2019 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov

! This file was ported from Lean 3 source module category_theory.conj
! leanprover-community/mathlib commit dd71334db81d0bd444af1ee339a29298bef40734
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Algebra.Hom.Equiv.Units.Basic
import Mathbin.CategoryTheory.Endomorphism

/-!
# Conjugate morphisms by isomorphisms

An isomorphism `Œ± : X ‚âÖ Y` defines
- a monoid isomorphism `conj : End X ‚âÉ* End Y` by `Œ±.conj f = Œ±.inv ‚â´ f ‚â´ Œ±.hom`;
- a group isomorphism `conj_Aut : Aut X ‚âÉ* Aut Y` by `Œ±.conj_Aut f = Œ±.symm ‚â™‚â´ f ‚â™‚â´ Œ±`.

For completeness, we also define `hom_congr : (X ‚âÖ X‚ÇÅ) ‚Üí (Y ‚âÖ Y‚ÇÅ) ‚Üí (X ‚ü∂ Y) ‚âÉ (X‚ÇÅ ‚ü∂ Y‚ÇÅ)`,
cf. `equiv.arrow_congr`.
-/


universe v u

namespace CategoryTheory

namespace Iso

variable {C : Type u} [Category.{v} C]

/-- If `X` is isomorphic to `X‚ÇÅ` and `Y` is isomorphic to `Y‚ÇÅ`, then
there is a natural bijection between `X ‚ü∂ Y` and `X‚ÇÅ ‚ü∂ Y‚ÇÅ`. See also `equiv.arrow_congr`. -/
def homCongr {X Y X‚ÇÅ Y‚ÇÅ : C} (Œ± : X ‚âÖ X‚ÇÅ) (Œ≤ : Y ‚âÖ Y‚ÇÅ) : (X ‚ü∂ Y) ‚âÉ (X‚ÇÅ ‚ü∂ Y‚ÇÅ)
    where
  toFun f := Œ±.inv ‚â´ f ‚â´ Œ≤.Hom
  invFun f := Œ±.Hom ‚â´ f ‚â´ Œ≤.inv
  left_inv f :=
    show Œ±.Hom ‚â´ (Œ±.inv ‚â´ f ‚â´ Œ≤.Hom) ‚â´ Œ≤.inv = f by
      rw [category.assoc, category.assoc, Œ≤.hom_inv_id, Œ±.hom_inv_id_assoc, category.comp_id]
  right_inv f :=
    show Œ±.inv ‚â´ (Œ±.Hom ‚â´ f ‚â´ Œ≤.inv) ‚â´ Œ≤.Hom = f by
      rw [category.assoc, category.assoc, Œ≤.inv_hom_id, Œ±.inv_hom_id_assoc, category.comp_id]
#align category_theory.iso.hom_congr CategoryTheory.Iso.homCongr

@[simp]
theorem hom_congr_apply {X Y X‚ÇÅ Y‚ÇÅ : C} (Œ± : X ‚âÖ X‚ÇÅ) (Œ≤ : Y ‚âÖ Y‚ÇÅ) (f : X ‚ü∂ Y) :
    Œ±.homCongr Œ≤ f = Œ±.inv ‚â´ f ‚â´ Œ≤.Hom :=
  rfl
#align category_theory.iso.hom_congr_apply CategoryTheory.Iso.hom_congr_apply

theorem hom_congr_comp {X Y Z X‚ÇÅ Y‚ÇÅ Z‚ÇÅ : C} (Œ± : X ‚âÖ X‚ÇÅ) (Œ≤ : Y ‚âÖ Y‚ÇÅ) (Œ≥ : Z ‚âÖ Z‚ÇÅ) (f : X ‚ü∂ Y)
    (g : Y ‚ü∂ Z) : Œ±.homCongr Œ≥ (f ‚â´ g) = Œ±.homCongr Œ≤ f ‚â´ Œ≤.homCongr Œ≥ g := by simp
#align category_theory.iso.hom_congr_comp CategoryTheory.Iso.hom_congr_comp

@[simp]
theorem hom_congr_refl {X Y : C} (f : X ‚ü∂ Y) : (Iso.refl X).homCongr (Iso.refl Y) f = f := by simp
#align category_theory.iso.hom_congr_refl CategoryTheory.Iso.hom_congr_refl

@[simp]
theorem hom_congr_trans {X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ X‚ÇÉ Y‚ÇÉ : C} (Œ±‚ÇÅ : X‚ÇÅ ‚âÖ X‚ÇÇ) (Œ≤‚ÇÅ : Y‚ÇÅ ‚âÖ Y‚ÇÇ) (Œ±‚ÇÇ : X‚ÇÇ ‚âÖ X‚ÇÉ)
    (Œ≤‚ÇÇ : Y‚ÇÇ ‚âÖ Y‚ÇÉ) (f : X‚ÇÅ ‚ü∂ Y‚ÇÅ) :
    (Œ±‚ÇÅ ‚â™‚â´ Œ±‚ÇÇ).homCongr (Œ≤‚ÇÅ ‚â™‚â´ Œ≤‚ÇÇ) f = (Œ±‚ÇÅ.homCongr Œ≤‚ÇÅ).trans (Œ±‚ÇÇ.homCongr Œ≤‚ÇÇ) f := by simp
#align category_theory.iso.hom_congr_trans CategoryTheory.Iso.hom_congr_trans

@[simp]
theorem hom_congr_symm {X‚ÇÅ Y‚ÇÅ X‚ÇÇ Y‚ÇÇ : C} (Œ± : X‚ÇÅ ‚âÖ X‚ÇÇ) (Œ≤ : Y‚ÇÅ ‚âÖ Y‚ÇÇ) :
    (Œ±.homCongr Œ≤).symm = Œ±.symm.homCongr Œ≤.symm :=
  rfl
#align category_theory.iso.hom_congr_symm CategoryTheory.Iso.hom_congr_symm

variable {X Y : C} (Œ± : X ‚âÖ Y)

/-- An isomorphism between two objects defines a monoid isomorphism between their
monoid of endomorphisms. -/
def conj : EndCat X ‚âÉ* EndCat Y :=
  { homCongr Œ± Œ± with map_mul' := fun f g => hom_congr_comp Œ± Œ± Œ± g f }
#align category_theory.iso.conj CategoryTheory.Iso.conj

theorem conj_apply (f : EndCat X) : Œ±.conj f = Œ±.inv ‚â´ f ‚â´ Œ±.Hom :=
  rfl
#align category_theory.iso.conj_apply CategoryTheory.Iso.conj_apply

@[simp]
theorem conj_comp (f g : EndCat X) : Œ±.conj (f ‚â´ g) = Œ±.conj f ‚â´ Œ±.conj g :=
  Œ±.conj.map_mul g f
#align category_theory.iso.conj_comp CategoryTheory.Iso.conj_comp

@[simp]
theorem conj_id : Œ±.conj (ùüô X) = ùüô Y :=
  Œ±.conj.map_one
#align category_theory.iso.conj_id CategoryTheory.Iso.conj_id

@[simp]
theorem refl_conj (f : EndCat X) : (Iso.refl X).conj f = f := by
  rw [conj_apply, iso.refl_inv, iso.refl_hom, category.id_comp, category.comp_id]
#align category_theory.iso.refl_conj CategoryTheory.Iso.refl_conj

@[simp]
theorem trans_conj {Z : C} (Œ≤ : Y ‚âÖ Z) (f : EndCat X) : (Œ± ‚â™‚â´ Œ≤).conj f = Œ≤.conj (Œ±.conj f) :=
  hom_congr_trans Œ± Œ± Œ≤ Œ≤ f
#align category_theory.iso.trans_conj CategoryTheory.Iso.trans_conj

@[simp]
theorem symm_self_conj (f : EndCat X) : Œ±.symm.conj (Œ±.conj f) = f := by
  rw [‚Üê trans_conj, Œ±.self_symm_id, refl_conj]
#align category_theory.iso.symm_self_conj CategoryTheory.Iso.symm_self_conj

@[simp]
theorem self_symm_conj (f : EndCat Y) : Œ±.conj (Œ±.symm.conj f) = f :=
  Œ±.symm.symm_self_conj f
#align category_theory.iso.self_symm_conj CategoryTheory.Iso.self_symm_conj

@[simp]
theorem conj_pow (f : EndCat X) (n : ‚Ñï) : Œ±.conj (f ^ n) = Œ±.conj f ^ n :=
  Œ±.conj.toMonoidHom.map_pow f n
#align category_theory.iso.conj_pow CategoryTheory.Iso.conj_pow

/-- `conj` defines a group isomorphisms between groups of automorphisms -/
def conjAut : AutCat X ‚âÉ* AutCat Y :=
  (AutCat.unitsEndEquivAut X).symm.trans <|
    (Units.mapEquiv Œ±.conj).trans <| AutCat.unitsEndEquivAut Y
#align category_theory.iso.conj_Aut CategoryTheory.Iso.conjAut

theorem conj_Aut_apply (f : AutCat X) : Œ±.conjAut f = Œ±.symm ‚â™‚â´ f ‚â™‚â´ Œ± := by
  cases f <;> cases Œ± <;> ext <;> rfl
#align category_theory.iso.conj_Aut_apply CategoryTheory.Iso.conj_Aut_apply

@[simp]
theorem conj_Aut_hom (f : AutCat X) : (Œ±.conjAut f).Hom = Œ±.conj f.Hom :=
  rfl
#align category_theory.iso.conj_Aut_hom CategoryTheory.Iso.conj_Aut_hom

@[simp]
theorem trans_conj_Aut {Z : C} (Œ≤ : Y ‚âÖ Z) (f : AutCat X) :
    (Œ± ‚â™‚â´ Œ≤).conjAut f = Œ≤.conjAut (Œ±.conjAut f) := by
  simp only [conj_Aut_apply, iso.trans_symm, iso.trans_assoc]
#align category_theory.iso.trans_conj_Aut CategoryTheory.Iso.trans_conj_Aut

@[simp]
theorem conj_Aut_mul (f g : AutCat X) : Œ±.conjAut (f * g) = Œ±.conjAut f * Œ±.conjAut g :=
  Œ±.conjAut.map_mul f g
#align category_theory.iso.conj_Aut_mul CategoryTheory.Iso.conj_Aut_mul

@[simp]
theorem conj_Aut_trans (f g : AutCat X) : Œ±.conjAut (f ‚â™‚â´ g) = Œ±.conjAut f ‚â™‚â´ Œ±.conjAut g :=
  conj_Aut_mul Œ± g f
#align category_theory.iso.conj_Aut_trans CategoryTheory.Iso.conj_Aut_trans

@[simp]
theorem conj_Aut_pow (f : AutCat X) (n : ‚Ñï) : Œ±.conjAut (f ^ n) = Œ±.conjAut f ^ n :=
  Œ±.conjAut.toMonoidHom.map_pow f n
#align category_theory.iso.conj_Aut_pow CategoryTheory.Iso.conj_Aut_pow

@[simp]
theorem conj_Aut_zpow (f : AutCat X) (n : ‚Ñ§) : Œ±.conjAut (f ^ n) = Œ±.conjAut f ^ n :=
  Œ±.conjAut.toMonoidHom.map_zpow f n
#align category_theory.iso.conj_Aut_zpow CategoryTheory.Iso.conj_Aut_zpow

end Iso

namespace Functor

universe v‚ÇÅ u‚ÇÅ

variable {C : Type u} [Category.{v} C] {D : Type u‚ÇÅ} [Category.{v‚ÇÅ} D] (F : C ‚•§ D)

theorem map_hom_congr {X Y X‚ÇÅ Y‚ÇÅ : C} (Œ± : X ‚âÖ X‚ÇÅ) (Œ≤ : Y ‚âÖ Y‚ÇÅ) (f : X ‚ü∂ Y) :
    F.map (Iso.homCongr Œ± Œ≤ f) = Iso.homCongr (F.mapIso Œ±) (F.mapIso Œ≤) (F.map f) := by simp
#align category_theory.functor.map_hom_congr CategoryTheory.Functor.map_hom_congr

theorem map_conj {X Y : C} (Œ± : X ‚âÖ Y) (f : EndCat X) :
    F.map (Œ±.conj f) = (F.mapIso Œ±).conj (F.map f) :=
  map_hom_congr F Œ± Œ± f
#align category_theory.functor.map_conj CategoryTheory.Functor.map_conj

theorem map_conj_Aut (F : C ‚•§ D) {X Y : C} (Œ± : X ‚âÖ Y) (f : AutCat X) :
    F.mapIso (Œ±.conjAut f) = (F.mapIso Œ±).conjAut (F.mapIso f) := by
  ext <;> simp only [map_iso_hom, iso.conj_Aut_hom, F.map_conj]
#align category_theory.functor.map_conj_Aut CategoryTheory.Functor.map_conj_Aut

-- alternative proof: by simp only [iso.conj_Aut_apply, F.map_iso_trans, F.map_iso_symm]
end Functor

end CategoryTheory

