/-
Copyright (c) 2022 R√©mi Bottinelli, Junyan Xu. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©mi Bottinelli, Junyan Xu

! This file was ported from Lean 3 source module category_theory.mittag_leffler
! leanprover-community/mathlib commit 740acc0e6f9adf4423f92a485d0456fc271482da
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.CategoryTheory.Filtered
import Mathbin.Data.Set.Finite

/-!
# The Mittag-Leffler condition

This files defines the Mittag-Leffler condition for cofiltered systems and (TODO) other properties
of such systems and their sections.

## Main definitions

Given a functor `F : J ‚•§ Type v`:

* For `j : J`, `F.eventual_range j` is the intersections of all ranges of morphisms `F.map f`
  where `f` has codomain `j`.
* `F.is_mittag_leffler` states that the functor `F` satisfies the Mittag-Leffler
  condition: the ranges of morphisms `F.map f` (with `f` having codomain `j`) stabilize.
* If `J` is cofiltered `F.to_eventual_ranges` is the subfunctor of `F` obtained by restriction
  to `F.eventual_range`.
* `F.to_preimages` restricts a functor to preimages of a given set in some `F.obj i`. If `J` is
  cofiltered, then it is Mittag-Leffler if `F` is, see `is_mittag_leffler.to_preimages`.

## Main statements

* `is_mittag_leffler_of_exists_finite_range` shows that if `J` is cofiltered and for all `j`,
  there exists some `i` and `f : i ‚ü∂ j` such that the range of `F.map f` is finite, then
  `F` is Mittag-Leffler.
* `to_eventual_ranges_surjective` shows that if `F` is Mittag-Leffler, then `F.to_eventual_ranges`
  has all morphisms `F.map f` surjective.

## Todo

* Specialize to inverse systems and fintype systems.
* Prove [Stacks: Lemma 0597](https://stacks.math.columbia.edu/tag/0597)

## References

* [Stacks: Mittag-Leffler systems](https://stacks.math.columbia.edu/tag/0594)

## Tags

Mittag-Leffler, surjective, eventual range, inverse system,

-/


universe u v

namespace CategoryTheory

namespace Functor

open IsCofiltered Set FunctorToTypes

variable {J : Type u} [Category J] (F : J ‚•§ Type v) {i j k : J} (s : Set (F.obj i))

/-- The eventual range of the functor `F : J ‚•§ Type v` at index `j : J` is the intersection
of the ranges of all maps `F.map f` with `i : J` and `f : i ‚ü∂ j`.
-/
def eventualRange (j : J) :=
  ‚ãÇ (i) (f : i ‚ü∂ j), range (F.map f)
#align category_theory.functor.eventual_range CategoryTheory.Functor.eventualRange

theorem mem_eventualRange_iff {x : F.obj j} :
    x ‚àà F.eventualRange j ‚Üî ‚àÄ ‚¶Éi‚¶Ñ (f : i ‚ü∂ j), x ‚àà range (F.map f) :=
  mem_inter·µ¢‚ÇÇ
#align category_theory.functor.mem_eventual_range_iff CategoryTheory.Functor.mem_eventualRange_iff

/-- The functor `F : J ‚•§ Type v` satisfies the Mittag-Leffler condition if for all `j : J`,
there exists some `i : J` and `f : i ‚ü∂ j` such that for all `k : J` and `g : k ‚ü∂ j`, the range
of `F.map f` is contained in that of `F.map g`;
in other words (see `is_mittag_leffler_iff_eventual_range`), the eventual range at `j` is attained
by some `f : i ‚ü∂ j`.
-/
def IsMittagLeffler : Prop :=
  ‚àÄ j : J, ‚àÉ (i : _)(f : i ‚ü∂ j), ‚àÄ ‚¶Ék‚¶Ñ (g : k ‚ü∂ j), range (F.map f) ‚äÜ range (F.map g)
#align category_theory.functor.is_mittag_leffler CategoryTheory.Functor.IsMittagLeffler

theorem isMittagLeffler_iff_eventualRange :
    F.IsMittagLeffler ‚Üî ‚àÄ j : J, ‚àÉ (i : _)(f : i ‚ü∂ j), F.eventualRange j = range (F.map f) :=
  forall_congr' fun j =>
    exists‚ÇÇ_congr fun i f =>
      ‚ü®fun h => (inter·µ¢‚ÇÇ_subset _ _).antisymm <| subset_inter·µ¢‚ÇÇ h, fun h => h ‚ñ∏ inter·µ¢‚ÇÇ_subset‚ü©
#align category_theory.functor.is_mittag_leffler_iff_eventual_range CategoryTheory.Functor.isMittagLeffler_iff_eventualRange

theorem IsMittagLeffler.subset_image_eventualRange (h : F.IsMittagLeffler) (f : j ‚ü∂ i) :
    F.eventualRange i ‚äÜ F.map f '' F.eventualRange j :=
  by
  obtain ‚ü®k, g, hg‚ü© := F.is_mittag_leffler_iff_eventual_range.1 h j
  rw [hg]; intro x hx
  obtain ‚ü®x, rfl‚ü© := F.mem_eventual_range_iff.1 hx (g ‚â´ f)
  refine' ‚ü®_, ‚ü®x, rfl‚ü©, by simpa only [F.map_comp] ‚ü©
#align category_theory.functor.is_mittag_leffler.subset_image_eventual_range CategoryTheory.Functor.IsMittagLeffler.subset_image_eventualRange

theorem eventualRange_eq_range_precomp (f : i ‚ü∂ j) (g : j ‚ü∂ k)
    (h : F.eventualRange k = range (F.map g)) : F.eventualRange k = range (F.map <| f ‚â´ g) :=
  by
  apply subset_antisymm
  ¬∑ apply Inter‚ÇÇ_subset
  ¬∑ rw [h, F.map_comp]
    apply range_comp_subset_range
#align category_theory.functor.eventual_range_eq_range_precomp CategoryTheory.Functor.eventualRange_eq_range_precomp

theorem isMittagLeffler_of_surjective (h : ‚àÄ (i j : J) (f : i ‚ü∂ j), (F.map f).Surjective) :
    F.IsMittagLeffler := fun j =>
  ‚ü®j, ùüô j, fun k g => by rw [map_id, types_id, range_id, (h k j g).range_eq]‚ü©
#align category_theory.functor.is_mittag_leffler_of_surjective CategoryTheory.Functor.isMittagLeffler_of_surjective

/-- The subfunctor of `F` obtained by restricting to the preimages of a set `s ‚àà F.obj i`. -/
@[simps]
def toPreimages : J ‚•§ Type v where
  obj j := ‚ãÇ f : j ‚ü∂ i, F.map f ‚Åª¬π' s
  map j k g :=
    MapsTo.restrict (F.map g) _ _ fun x h =>
      by
      rw [mem_Inter] at h‚ä¢; intro f
      rw [‚Üê mem_preimage, preimage_preimage]
      convert h (g ‚â´ f); rw [F.map_comp]; rfl
  map_id' j := by
    simp_rw [F.map_id]
    ext
    rfl
  map_comp' j k l f g := by
    simp_rw [F.map_comp]
    rfl
#align category_theory.functor.to_preimages CategoryTheory.Functor.toPreimages

variable [IsCofilteredOrEmpty J]

theorem eventualRange_mapsTo (f : j ‚ü∂ i) :
    (F.eventualRange j).MapsTo (F.map f) (F.eventualRange i) := fun x hx =>
  by
  rw [mem_eventual_range_iff] at hx‚ä¢
  intro k f'
  obtain ‚ü®l, g, g', he‚ü© := cospan f f'
  obtain ‚ü®x, rfl‚ü© := hx g
  rw [‚Üê map_comp_apply, he, F.map_comp]
  exact ‚ü®_, rfl‚ü©
#align category_theory.functor.eventual_range_maps_to CategoryTheory.Functor.eventualRange_mapsTo

theorem IsMittagLeffler.eq_image_eventualRange (h : F.IsMittagLeffler) (f : j ‚ü∂ i) :
    F.eventualRange i = F.map f '' F.eventualRange j :=
  (h.subset_image_eventualRange F f).antisymm <| mapsTo'.1 (F.eventualRange_mapsTo f)
#align category_theory.functor.is_mittag_leffler.eq_image_eventual_range CategoryTheory.Functor.IsMittagLeffler.eq_image_eventualRange

theorem eventualRange_eq_iff {f : i ‚ü∂ j} :
    F.eventualRange j = range (F.map f) ‚Üî
      ‚àÄ ‚¶Ék‚¶Ñ (g : k ‚ü∂ i), range (F.map f) ‚äÜ range (F.map <| g ‚â´ f) :=
  by
  rw [subset_antisymm_iff, eventual_range, and_iff_right (Inter‚ÇÇ_subset _ _), subset_Inter‚ÇÇ_iff]
  refine' ‚ü®fun h k g => h _ _, fun h j' f' => _‚ü©
  obtain ‚ü®k, g, g', he‚ü© := cospan f f'
  refine' (h g).trans _
  rw [he, F.map_comp]
  apply range_comp_subset_range
#align category_theory.functor.eventual_range_eq_iff CategoryTheory.Functor.eventualRange_eq_iff

theorem isMittagLeffler_iff_subset_range_comp :
    F.IsMittagLeffler ‚Üî
      ‚àÄ j : J, ‚àÉ (i : _)(f : i ‚ü∂ j), ‚àÄ ‚¶Ék‚¶Ñ (g : k ‚ü∂ i), range (F.map f) ‚äÜ range (F.map <| g ‚â´ f) :=
  by simp_rw [is_mittag_leffler_iff_eventual_range, eventual_range_eq_iff]
#align category_theory.functor.is_mittag_leffler_iff_subset_range_comp CategoryTheory.Functor.isMittagLeffler_iff_subset_range_comp

theorem IsMittagLeffler.toPreimages (h : F.IsMittagLeffler) : (F.toPreimages s).IsMittagLeffler :=
  (isMittagLeffler_iff_subset_range_comp _).2 fun j =>
    by
    obtain ‚ü®j‚ÇÅ, g‚ÇÅ, f‚ÇÅ, -‚ü© := cone_objs i j
    obtain ‚ü®j‚ÇÇ, f‚ÇÇ, h‚ÇÇ‚ü© := F.is_mittag_leffler_iff_eventual_range.1 h j‚ÇÅ
    refine' ‚ü®j‚ÇÇ, f‚ÇÇ ‚â´ f‚ÇÅ, fun j‚ÇÉ f‚ÇÉ => _‚ü©
    rintro _ ‚ü®‚ü®x, hx‚ü©, rfl‚ü©
    have : F.map f‚ÇÇ x ‚àà F.eventual_range j‚ÇÅ := by
      rw [h‚ÇÇ]
      exact ‚ü®_, rfl‚ü©
    obtain ‚ü®y, hy, h‚ÇÉ‚ü© := h.subset_image_eventual_range F (f‚ÇÉ ‚â´ f‚ÇÇ) this
    refine' ‚ü®‚ü®y, mem_Inter.2 fun g‚ÇÇ => _‚ü©, Subtype.ext _‚ü©
    ¬∑ obtain ‚ü®j‚ÇÑ, f‚ÇÑ, h‚ÇÑ‚ü© := cone_maps g‚ÇÇ ((f‚ÇÉ ‚â´ f‚ÇÇ) ‚â´ g‚ÇÅ)
      obtain ‚ü®y, rfl‚ü© := F.mem_eventual_range_iff.1 hy f‚ÇÑ
      rw [‚Üê map_comp_apply] at h‚ÇÉ
      rw [mem_preimage, ‚Üê map_comp_apply, h‚ÇÑ, ‚Üê category.assoc, map_comp_apply, h‚ÇÉ, ‚Üê
        map_comp_apply]
      apply mem_Inter.1 hx
    ¬∑ simp_rw [to_preimages_map, maps_to.coe_restrict_apply, Subtype.coe_mk]
      rw [‚Üê category.assoc, map_comp_apply, h‚ÇÉ, map_comp_apply]
#align category_theory.functor.is_mittag_leffler.to_preimages CategoryTheory.Functor.IsMittagLeffler.toPreimages

theorem isMittagLeffler_of_exists_finite_range
    (h : ‚àÄ j : J, ‚àÉ (i : _)(f : i ‚ü∂ j), (range <| F.map f).Finite) : F.IsMittagLeffler := fun j =>
  by
  obtain ‚ü®i, hi, hf‚ü© := h j
  obtain ‚ü®m, ‚ü®i, f, hm‚ü©, hmin‚ü© :=
    finset.is_well_founded_lt.wf.has_min
      { s : Finset (F.obj j) | ‚àÉ (i : _)(f : i ‚ü∂ j), ‚Üës = range (F.map f) }
      ‚ü®_, i, hi, hf.coe_to_finset‚ü©
  refine'
    ‚ü®i, f, fun k g =>
      (directed_on_range.mp <| F.ranges_directed j).is_bot_of_is_min ‚ü®‚ü®i, f‚ü©, rfl‚ü© _ _
        ‚ü®‚ü®k, g‚ü©, rfl‚ü©‚ü©
  rintro _ ‚ü®‚ü®k', g'‚ü©, rfl‚ü© hl
  refine' (eq_of_le_of_not_lt hl _).ge
  have := hmin _ ‚ü®k', g', (m.finite_to_set.subset <| hm.substr hl).coe_toFinset‚ü©
  rwa [Finset.lt_iff_ssubset, ‚Üê Finset.coe_ssubset, Set.Finite.coe_toFinset, hm] at this
#align category_theory.functor.is_mittag_leffler_of_exists_finite_range CategoryTheory.Functor.isMittagLeffler_of_exists_finite_range

/-- The subfunctor of `F` obtained by restricting to the eventual range at each index.
-/
@[simps]
def toEventualRanges : J ‚•§ Type v
    where
  obj j := F.eventualRange j
  map i j f := (F.eventualRange_mapsTo f).restrict _ _ _
  map_id' i := by
    simp_rw [F.map_id]
    ext
    rfl
  map_comp' _ _ _ _ _ := by
    simp_rw [F.map_comp]
    rfl
#align category_theory.functor.to_eventual_ranges CategoryTheory.Functor.toEventualRanges

/-- The sections of the functor `F : J ‚•§ Type v` are in bijection with the sections of
`F.eventual_ranges`.
-/
def toEventualRangesSectionsEquiv : F.toEventualRanges.sections ‚âÉ F.sections
    where
  toFun s := ‚ü®_, fun i j f => Subtype.coe_inj.2 <| s.Prop f‚ü©
  invFun s :=
    ‚ü®fun j => ‚ü®_, mem_inter·µ¢‚ÇÇ.2 fun i f => ‚ü®_, s.Prop f‚ü©‚ü©, fun i j f => Subtype.ext <| s.Prop f‚ü©
  left_inv _ := by
    ext
    rfl
  right_inv _ := by
    ext
    rfl
#align category_theory.functor.to_eventual_ranges_sections_equiv CategoryTheory.Functor.toEventualRangesSectionsEquiv

/--
If `F` satisfies the Mittag-Leffler condition, its restriction to eventual ranges is a surjective
functor.
-/
theorem surjective_toEventualRanges (h : F.IsMittagLeffler) (f : i ‚ü∂ j) :
    (F.toEventualRanges.map f).Surjective := fun ‚ü®x, hx‚ü© =>
  by
  obtain ‚ü®y, hy, rfl‚ü© := h.subset_image_eventual_range F f hx
  exact ‚ü®‚ü®y, hy‚ü©, rfl‚ü©
#align category_theory.functor.surjective_to_eventual_ranges CategoryTheory.Functor.surjective_toEventualRanges

/-- If `F` is nonempty at each index and Mittag-Leffler, then so is `F.to_eventual_ranges`. -/
theorem toEventualRanges_nonempty (h : F.IsMittagLeffler) [‚àÄ j : J, Nonempty (F.obj j)] (j : J) :
    Nonempty (F.toEventualRanges.obj j) :=
  by
  let ‚ü®i, f, h‚ü© := F.isMittagLeffler_iff_eventualRange.1 h j
  rw [to_eventual_ranges_obj, h]
  infer_instance
#align category_theory.functor.to_eventual_ranges_nonempty CategoryTheory.Functor.toEventualRanges_nonempty

/-- If `F` has all arrows surjective, then it "factors through a poset". -/
theorem thin_diagram_of_surjective (Fsur : ‚àÄ (i j : J) (f : i ‚ü∂ j), (F.map f).Surjective) (i j)
    (f g : i ‚ü∂ j) : F.map f = F.map g :=
  let ‚ü®k, œÜ, hœÜ‚ü© := cone_maps f g
  (Fsur k i œÜ).injective_comp_right <| by simp_rw [‚Üê types_comp, ‚Üê F.map_comp, hœÜ]
#align category_theory.functor.thin_diagram_of_surjective CategoryTheory.Functor.thin_diagram_of_surjective

end Functor

end CategoryTheory

