/-
Copyright (c) 2022 Yuma Mizuno. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yuma Mizuno
-/
import Mathbin.CategoryTheory.Bicategory.NaturalTransformation

#align_import category_theory.bicategory.functor_bicategory from "leanprover-community/mathlib"@"44e2ae8cffc713925494e4975ee31ec1d06929b3"

/-!
# The bicategory of oplax functors between two bicategories

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

Given bicategories `B` and `C`, we give a bicategory structure on `oplax_functor B C` whose
* objects are oplax functors,
* 1-morphisms are oplax natural transformations, and
* 2-morphisms are modifications.
-/


namespace CategoryTheory

open Category Bicategory

open scoped Bicategory

universe w‚ÇÅ w‚ÇÇ v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

variable {B : Type u‚ÇÅ} [Bicategory.{w‚ÇÅ, v‚ÇÅ} B] {C : Type u‚ÇÇ} [Bicategory.{w‚ÇÇ, v‚ÇÇ} C]

variable {F G H I : OplaxFunctor B C}

namespace OplaxNatTrans

#print CategoryTheory.OplaxNatTrans.whiskerLeft /-
/-- Left whiskering of an oplax natural transformation and a modification. -/
@[simps]
def whiskerLeft (Œ∑ : F ‚ü∂ G) {Œ∏ Œπ : G ‚ü∂ H} (Œì : Œ∏ ‚ü∂ Œπ) : Œ∑ ‚â´ Œ∏ ‚ü∂ Œ∑ ‚â´ Œπ
    where
  app a := Œ∑.app a ‚óÅ Œì.app a
  naturality a b f := by dsimp; rw [associator_inv_naturality_right_assoc, whisker_exchange_assoc];
    simp
#align category_theory.oplax_nat_trans.whisker_left CategoryTheory.OplaxNatTrans.whiskerLeft
-/

#print CategoryTheory.OplaxNatTrans.whiskerRight /-
/-- Right whiskering of an oplax natural transformation and a modification. -/
@[simps]
def whiskerRight {Œ∑ Œ∏ : F ‚ü∂ G} (Œì : Œ∑ ‚ü∂ Œ∏) (Œπ : G ‚ü∂ H) : Œ∑ ‚â´ Œπ ‚ü∂ Œ∏ ‚â´ Œπ
    where
  app a := Œì.app a ‚ñ∑ Œπ.app a
  naturality a b f := by dsimp;
    simp_rw [assoc, ‚Üê associator_inv_naturality_left, whisker_exchange_assoc]; simp
#align category_theory.oplax_nat_trans.whisker_right CategoryTheory.OplaxNatTrans.whiskerRight
-/

#print CategoryTheory.OplaxNatTrans.associator /-
/-- Associator for the vertical composition of oplax natural transformations. -/
@[simps]
def associator (Œ∑ : F ‚ü∂ G) (Œ∏ : G ‚ü∂ H) (Œπ : H ‚ü∂ I) : (Œ∑ ‚â´ Œ∏) ‚â´ Œπ ‚âÖ Œ∑ ‚â´ Œ∏ ‚â´ Œπ :=
  ModificationIso.ofComponents (fun a => Œ±_ (Œ∑.app a) (Œ∏.app a) (Œπ.app a)) (by tidy)
#align category_theory.oplax_nat_trans.associator CategoryTheory.OplaxNatTrans.associator
-/

#print CategoryTheory.OplaxNatTrans.leftUnitor /-
/-- Left unitor for the vertical composition of oplax natural transformations. -/
@[simps]
def leftUnitor (Œ∑ : F ‚ü∂ G) : ùüô F ‚â´ Œ∑ ‚âÖ Œ∑ :=
  ModificationIso.ofComponents (fun a => Œª_ (Œ∑.app a)) (by tidy)
#align category_theory.oplax_nat_trans.left_unitor CategoryTheory.OplaxNatTrans.leftUnitor
-/

#print CategoryTheory.OplaxNatTrans.rightUnitor /-
/-- Right unitor for the vertical composition of oplax natural transformations. -/
@[simps]
def rightUnitor (Œ∑ : F ‚ü∂ G) : Œ∑ ‚â´ ùüô G ‚âÖ Œ∑ :=
  ModificationIso.ofComponents (fun a => œÅ_ (Œ∑.app a)) (by tidy)
#align category_theory.oplax_nat_trans.right_unitor CategoryTheory.OplaxNatTrans.rightUnitor
-/

end OplaxNatTrans

variable (B C)

#print CategoryTheory.OplaxFunctor.bicategory /-
/-- A bicategory structure on the oplax functors between bicategories. -/
@[simps]
instance OplaxFunctor.bicategory : Bicategory (OplaxFunctor B C)
    where
  whiskerLeft F G H Œ∑ _ _ Œì := OplaxNatTrans.whiskerLeft Œ∑ Œì
  whiskerRight F G H _ _ Œì Œ∑ := OplaxNatTrans.whiskerRight Œì Œ∑
  associator F G H I := OplaxNatTrans.associator
  leftUnitor F G := OplaxNatTrans.leftUnitor
  rightUnitor F G := OplaxNatTrans.rightUnitor
  whisker_exchange := by intros; ext; apply whisker_exchange
#align category_theory.oplax_functor.bicategory CategoryTheory.OplaxFunctor.bicategory
-/

end CategoryTheory

