import Mathbin.CategoryTheory.Sites.Pretopology 
import Mathbin.CategoryTheory.Limits.Shapes.Types 
import Mathbin.CategoryTheory.FullSubcategory

/-!
# Sheaves of types on a Grothendieck topology

Defines the notion of a sheaf of types (usually called a sheaf of sets by mathematicians)
on a category equipped with a Grothendieck topology, as well as a range of equivalent
conditions useful in different situations.

First define what it means for a presheaf `P : Cᵒᵖ ⥤ Type v` to be a sheaf *for* a particular
presieve `R` on `X`:
* A *family of elements* `x` for `P` at `R` is an element `x_f` of `P Y` for every `f : Y ⟶ X` in
  `R`. See `family_of_elements`.
* The family `x` is *compatible* if, for any `f₁ : Y₁ ⟶ X` and `f₂ : Y₂ ⟶ X` both in `R`,
  and any `g₁ : Z ⟶ Y₁` and `g₂ : Z ⟶ Y₂` such that `g₁ ≫ f₁ = g₂ ≫ f₂`, the restriction of
  `x_f₁` along `g₁` agrees with the restriction of `x_f₂` along `g₂`.
  See `family_of_elements.compatible`.
* An *amalgamation* `t` for the family is an element of `P X` such that for every `f : Y ⟶ X` in
  `R`, the restriction of `t` on `f` is `x_f`.
  See `family_of_elements.is_amalgamation`.
We then say `P` is *separated* for `R` if every compatible family has at most one amalgamation,
and it is a *sheaf* for `R` if every compatible family has a unique amalgamation.
See `is_separated_for` and `is_sheaf_for`.

In the special case where `R` is a sieve, the compatibility condition can be simplified:
* The family `x` is *compatible* if, for any `f : Y ⟶ X` in `R` and `g : Z ⟶ Y`, the restriction of
  `x_f` along `g` agrees with `x_(g ≫ f)` (which is well defined since `g ≫ f` is in `R`).
See `family_of_elements.sieve_compatible` and `compatible_iff_sieve_compatible`.

In the special case where `C` has pullbacks, the compatibility condition can be simplified:
* The family `x` is *compatible* if, for any `f : Y ⟶ X` and `g : Z ⟶ X` both in `R`,
  the restriction of `x_f` along `π₁ : pullback f g ⟶ Y` agrees with the restriction of `x_g`
  along `π₂ : pullback f g ⟶ Z`.
See `family_of_elements.pullback_compatible` and `pullback_compatible_iff`.

Now given a Grothendieck topology `J`, `P` is a sheaf if it is a sheaf for every sieve in the
topology. See `is_sheaf`.

In the case where the topology is generated by a basis, it suffices to check `P` is a sheaf for
every presieve in the pretopology. See `is_sheaf_pretopology`.

We also provide equivalent conditions to satisfy alternate definitions given in the literature.

* Stacks: In `equalizer.presieve.sheaf_condition`, the sheaf condition at a presieve is shown to be
  equivalent to that of https://stacks.math.columbia.edu/tag/00VM (and combined with
  `is_sheaf_pretopology`, this shows the notions of `is_sheaf` are exactly equivalent.)

  The condition of https://stacks.math.columbia.edu/tag/00Z8 is virtually identical to the
  statement of `yoneda_condition_iff_sheaf_condition` (since the bijection described there carries
  the same information as the unique existence.)

* Maclane-Moerdijk [MM92]: Using `compatible_iff_sieve_compatible`, the definitions of `is_sheaf`
  are equivalent. There are also alternate definitions given:
  - Yoneda condition: Defined in `yoneda_sheaf_condition` and equivalence in
    `yoneda_condition_iff_sheaf_condition`.
  - Equalizer condition (Equation 3): Defined in the `equalizer.sieve` namespace, and equivalence
    in `equalizer.sieve.sheaf_condition`.
  - Matching family for presieves with pullback: `pullback_compatible_iff`.
  - Sheaf for a pretopology (Prop 1): `is_sheaf_pretopology` combined with the previous.
  - Sheaf for a pretopology as equalizer (Prop 1, bis): `equalizer.presieve.sheaf_condition`
    combined with the previous.

## Implementation

The sheaf condition is given as a proposition, rather than a subsingleton in `Type (max u₁ v)`.
This doesn't seem to make a big difference, other than making a couple of definitions noncomputable,
but it means that equivalent conditions can be given as `↔` statements rather than `≃` statements,
which can be convenient.

## References

* [MM92]: *Sheaves in geometry and logic*, Saunders MacLane, and Ieke Moerdijk:
  Chapter III, Section 4.
* [Elephant]: *Sketches of an Elephant*, P. T. Johnstone: C2.1.
* https://stacks.math.columbia.edu/tag/00VL (sheaves on a pretopology or site)
* https://stacks.math.columbia.edu/tag/00ZB (sheaves on a topology)

-/


universe w v₁ v₂ u₁ u₂

namespace CategoryTheory

open Opposite CategoryTheory Category Limits Sieve Classical

namespace Presieve

variable{C : Type u₁}[category.{v₁} C]

variable{P Q U : «expr ᵒᵖ» C ⥤ Type w}

variable{X Y : C}{S : sieve X}{R : presieve X}

variable(J J₂ : grothendieck_topology C)

/--
A family of elements for a presheaf `P` given a collection of arrows `R` with fixed codomain `X`
consists of an element of `P Y` for every `f : Y ⟶ X` in `R`.
A presheaf is a sheaf (resp, separated) if every *compatible* family of elements has exactly one
(resp, at most one) amalgamation.

This data is referred to as a `family` in [MM92], Chapter III, Section 4. It is also a concrete
version of the elements of the middle object in https://stacks.math.columbia.edu/tag/00VM which is
more useful for direct calculations. It is also used implicitly in Definition C2.1.2 in [Elephant].
-/
def family_of_elements (P : «expr ᵒᵖ» C ⥤ Type w) (R : presieve X) :=
  ∀ ⦃Y : C⦄ (f : Y ⟶ X), R f → P.obj (op Y)

instance  : Inhabited (family_of_elements P (⊥ : presieve X)) :=
  ⟨fun Y f => False.elim⟩

/--
A family of elements for a presheaf on the presieve `R₂` can be restricted to a smaller presieve
`R₁`.
-/
def family_of_elements.restrict {R₁ R₂ : presieve X} (h : R₁ ≤ R₂) :
  family_of_elements P R₂ → family_of_elements P R₁ :=
  fun x Y f hf => x f (h _ hf)

/--
A family of elements for the arrow set `R` is *compatible* if for any `f₁ : Y₁ ⟶ X` and
`f₂ : Y₂ ⟶ X` in `R`, and any `g₁ : Z ⟶ Y₁` and `g₂ : Z ⟶ Y₂`, if the square `g₁ ≫ f₁ = g₂ ≫ f₂`
commutes then the elements of `P Z` obtained by restricting the element of `P Y₁` along `g₁` and
restricting the element of `P Y₂` along `g₂` are the same.

In special cases, this condition can be simplified, see `pullback_compatible_iff` and
`compatible_iff_sieve_compatible`.

This is referred to as a "compatible family" in Definition C2.1.2 of [Elephant], and on nlab:
https://ncatlab.org/nlab/show/sheaf#GeneralDefinitionInComponents
-/
def family_of_elements.compatible (x : family_of_elements P R) : Prop :=
  ∀ ⦃Y₁ Y₂ Z⦄ (g₁ : Z ⟶ Y₁) (g₂ : Z ⟶ Y₂) ⦃f₁ : Y₁ ⟶ X⦄ ⦃f₂ : Y₂ ⟶ X⦄ (h₁ : R f₁) (h₂ : R f₂),
    g₁ ≫ f₁ = g₂ ≫ f₂ → P.map g₁.op (x f₁ h₁) = P.map g₂.op (x f₂ h₂)

/--
If the category `C` has pullbacks, this is an alternative condition for a family of elements to be
compatible: For any `f : Y ⟶ X` and `g : Z ⟶ X` in the presieve `R`, the restriction of the
given elements for `f` and `g` to the pullback agree.
This is equivalent to being compatible (provided `C` has pullbacks), shown in
`pullback_compatible_iff`.

This is the definition for a "matching" family given in [MM92], Chapter III, Section 4,
Equation (5). Viewing the type `family_of_elements` as the middle object of the fork in
https://stacks.math.columbia.edu/tag/00VM, this condition expresses that `pr₀* (x) = pr₁* (x)`,
using the notation defined there.
-/
def family_of_elements.pullback_compatible (x : family_of_elements P R) [has_pullbacks C] : Prop :=
  ∀ ⦃Y₁ Y₂⦄ ⦃f₁ : Y₁ ⟶ X⦄ ⦃f₂ : Y₂ ⟶ X⦄ (h₁ : R f₁) (h₂ : R f₂),
    P.map (pullback.fst : pullback f₁ f₂ ⟶ _).op (x f₁ h₁) = P.map pullback.snd.op (x f₂ h₂)

theorem pullback_compatible_iff (x : family_of_elements P R) [has_pullbacks C] : x.compatible ↔ x.pullback_compatible :=
  by 
    split 
    ·
      intro t Y₁ Y₂ f₁ f₂ hf₁ hf₂ 
      apply t 
      apply pullback.condition
    ·
      intro t Y₁ Y₂ Z g₁ g₂ f₁ f₂ hf₁ hf₂ comm 
      rw [←pullback.lift_fst _ _ comm, op_comp, functor_to_types.map_comp_apply, t hf₁ hf₂,
        ←functor_to_types.map_comp_apply, ←op_comp, pullback.lift_snd]

/-- The restriction of a compatible family is compatible. -/
theorem family_of_elements.compatible.restrict {R₁ R₂ : presieve X} (h : R₁ ≤ R₂) {x : family_of_elements P R₂} :
  x.compatible → (x.restrict h).Compatible :=
  fun q Y₁ Y₂ Z g₁ g₂ f₁ f₂ h₁ h₂ comm => q g₁ g₂ (h _ h₁) (h _ h₂) comm

/--
Extend a family of elements to the sieve generated by an arrow set.
This is the construction described as "easy" in Lemma C2.1.3 of [Elephant].
-/
noncomputable def family_of_elements.sieve_extend (x : family_of_elements P R) : family_of_elements P (generate R) :=
  fun Z f hf => P.map (some (some_spec hf)).op (x _ (some_spec (some_spec (some_spec hf))).1)

/-- The extension of a compatible family to the generated sieve is compatible. -/
theorem family_of_elements.compatible.sieve_extend (x : family_of_elements P R) (hx : x.compatible) :
  x.sieve_extend.compatible :=
  by 
    intro Y₁ Y₂ Z g₁ g₂ f₁ f₂ h₁ h₂ comm 
    rw [←(some_spec (some_spec (some_spec h₁))).2, ←(some_spec (some_spec (some_spec h₂))).2, ←assoc, ←assoc] at comm 
    dsimp [family_of_elements.sieve_extend]
    rw [←functor_to_types.map_comp_apply, ←functor_to_types.map_comp_apply]
    apply hx _ _ _ _ comm

-- error in CategoryTheory.Sites.SheafOfTypes: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
/-- The extension of a family agrees with the original family. -/
theorem extend_agrees
{x : family_of_elements P R}
(t : x.compatible)
{f : «expr ⟶ »(Y, X)}
(hf : R f) : «expr = »(x.sieve_extend f ⟨_, «expr𝟙»() _, f, hf, id_comp _⟩, x f hf) :=
begin
  have [ident h] [":", expr generate R f] [":=", expr ⟨_, _, _, hf, id_comp _⟩],
  change [expr «expr = »(P.map (some (some_spec h)).op (x _ _), x f hf)] [] [],
  rw [expr t (some (some_spec h)) («expr𝟙»() _) _ hf _] [],
  { simp [] [] [] [] [] [] },
  simp_rw ["[", expr id_comp, "]"] [],
  apply [expr (some_spec (some_spec (some_spec h))).2]
end

/-- The restriction of an extension is the original. -/
@[simp]
theorem restrict_extend {x : family_of_elements P R} (t : x.compatible) : x.sieve_extend.restrict (le_generate R) = x :=
  by 
    ext Y f hf 
    exact extend_agrees t hf

/--
If the arrow set for a family of elements is actually a sieve (i.e. it is downward closed) then the
consistency condition can be simplified.
This is an equivalent condition, see `compatible_iff_sieve_compatible`.

This is the notion of "matching" given for families on sieves given in [MM92], Chapter III,
Section 4, Equation 1, and nlab: https://ncatlab.org/nlab/show/matching+family.
See also the discussion before Lemma C2.1.4 of [Elephant].
-/
def family_of_elements.sieve_compatible (x : family_of_elements P S) : Prop :=
  ∀ ⦃Y Z⦄ (f : Y ⟶ X) (g : Z ⟶ Y) hf, x (g ≫ f) (S.downward_closed hf g) = P.map g.op (x f hf)

theorem compatible_iff_sieve_compatible (x : family_of_elements P S) : x.compatible ↔ x.sieve_compatible :=
  by 
    split 
    ·
      intro h Y Z f g hf 
      simpa using h (𝟙 _) g (S.downward_closed hf g) hf (id_comp _)
    ·
      intro h Y₁ Y₂ Z g₁ g₂ f₁ f₂ h₁ h₂ k 
      simpRw [←h f₁ g₁ h₁, k, h f₂ g₂ h₂]

theorem family_of_elements.compatible.to_sieve_compatible {x : family_of_elements P S} (t : x.compatible) :
  x.sieve_compatible :=
  (compatible_iff_sieve_compatible x).1 t

/--
Two compatible families on the sieve generated by a presieve `R` are equal if and only if they are
equal when restricted to `R`.
-/
theorem restrict_inj {x₁ x₂ : family_of_elements P (generate R)} (t₁ : x₁.compatible) (t₂ : x₂.compatible) :
  x₁.restrict (le_generate R) = x₂.restrict (le_generate R) → x₁ = x₂ :=
  by 
    intro h 
    ext Z f ⟨Y, f, g, hg, rfl⟩
    rw [compatible_iff_sieve_compatible] at t₁ t₂ 
    erw [t₁ g f ⟨_, _, g, hg, id_comp _⟩, t₂ g f ⟨_, _, g, hg, id_comp _⟩]
    congr 1
    apply congr_funₓ (congr_funₓ (congr_funₓ h _) g) hg

/--
Given a family of elements `x` for the sieve `S` generated by a presieve `R`, if `x` is restricted
to `R` and then extended back up to `S`, the resulting extension equals `x`.
-/
@[simp]
theorem extend_restrict {x : family_of_elements P (generate R)} (t : x.compatible) :
  (x.restrict (le_generate R)).sieveExtend = x :=
  by 
    apply restrict_inj
    ·
      exact (t.restrict (le_generate R)).sieveExtend _
    ·
      exact t 
    rw [restrict_extend]
    exact t.restrict (le_generate R)

theorem family_of_elements.comp_of_compatible (S : sieve X) {x : family_of_elements P S} (t : x.compatible) {f : Y ⟶ X}
  (hf : S f) {Z} (g : Z ⟶ Y) : x (g ≫ f) (S.downward_closed hf g) = P.map g.op (x f hf) :=
  by 
    simpa using t (𝟙 _) g (S.downward_closed hf g) hf (category.id_comp _)

section FunctorPullback

variable{D : Type u₂}[category.{v₂} D](F : D ⥤ C){Z : D}

variable{T : presieve (F.obj Z)}{x : family_of_elements P T}

/--
Given a family of elements of a sieve `S` on `F(X)`, we can realize it as a family of elements of
`S.functor_pullback F`.
-/
def family_of_elements.functor_pullback (x : family_of_elements P T) :
  family_of_elements (F.op ⋙ P) (T.functor_pullback F) :=
  fun Y f hf => x (F.map f) hf

theorem family_of_elements.compatible.functor_pullback (h : x.compatible) : (x.functor_pullback F).Compatible :=
  by 
    intro Z₁ Z₂ W g₁ g₂ f₁ f₂ h₁ h₂ eq 
    exact
      h (F.map g₁) (F.map g₂) h₁ h₂
        (by 
          simp only [←F.map_comp, Eq])

end FunctorPullback

/--
Given a family of elements of a sieve `S` on `X` whose values factors through `F`, we can
realize it as a family of elements of `S.functor_pushforward F`. Since the preimage is obtained by
choice, this is not well-defined generally.
-/
noncomputable def family_of_elements.functor_pushforward {D : Type u₂} [category.{v₂} D] (F : D ⥤ C) {X : D}
  {T : presieve X} (x : family_of_elements (F.op ⋙ P) T) : family_of_elements P (T.functor_pushforward F) :=
  fun Y f h =>
    by 
      obtain ⟨Z, g, h, h₁, _⟩ := get_functor_pushforward_structure h 
      exact P.map h.op (x g h₁)

section Pullback

/--
Given a family of elements of a sieve `S` on `X`, and a map `Y ⟶ X`, we can obtain a
family of elements of `S.pullback f` by taking the same elements.
-/
def family_of_elements.pullback (f : Y ⟶ X) (x : family_of_elements P S) : family_of_elements P (S.pullback f) :=
  fun _ g hg => x (g ≫ f) hg

theorem family_of_elements.compatible.pullback (f : Y ⟶ X) {x : family_of_elements P S} (h : x.compatible) :
  (x.pullback f).Compatible :=
  by 
    simp only [compatible_iff_sieve_compatible] at h⊢
    intro W Z f₁ f₂ hf 
    unfold family_of_elements.pullback 
    rw [←h (f₁ ≫ f) f₂ hf]
    simp only [category.assoc]

end Pullback

/--
Given a morphism of presheaves `f : P ⟶ Q`, we can take a family of elements valued in `P` to a
family of elements valued in `Q` by composing with `f`.
-/
def family_of_elements.comp_presheaf_map (f : P ⟶ Q) (x : family_of_elements P R) : family_of_elements Q R :=
  fun Y g hg => f.app (op Y) (x g hg)

@[simp]
theorem family_of_elements.comp_presheaf_map_id (x : family_of_elements P R) : x.comp_presheaf_map (𝟙 P) = x :=
  rfl

@[simp]
theorem family_of_elements.comp_prersheaf_map_comp (x : family_of_elements P R) (f : P ⟶ Q) (g : Q ⟶ U) :
  (x.comp_presheaf_map f).compPresheafMap g = x.comp_presheaf_map (f ≫ g) :=
  rfl

theorem family_of_elements.compatible.comp_presheaf_map (f : P ⟶ Q) {x : family_of_elements P R} (h : x.compatible) :
  (x.comp_presheaf_map f).Compatible :=
  by 
    intro Z₁ Z₂ W g₁ g₂ f₁ f₂ h₁ h₂ eq 
    unfold family_of_elements.comp_presheaf_map 
    rwa [←functor_to_types.naturality, ←functor_to_types.naturality, h]

/--
The given element `t` of `P.obj (op X)` is an *amalgamation* for the family of elements `x` if every
restriction `P.map f.op t = x_f` for every arrow `f` in the presieve `R`.

This is the definition given in  https://ncatlab.org/nlab/show/sheaf#GeneralDefinitionInComponents,
and https://ncatlab.org/nlab/show/matching+family, as well as [MM92], Chapter III, Section 4,
equation (2).
-/
def family_of_elements.is_amalgamation (x : family_of_elements P R) (t : P.obj (op X)) : Prop :=
  ∀ ⦃Y : C⦄ (f : Y ⟶ X) (h : R f), P.map f.op t = x f h

theorem family_of_elements.is_amalgamation.comp_presheaf_map {x : family_of_elements P R} {t} (f : P ⟶ Q)
  (h : x.is_amalgamation t) : (x.comp_presheaf_map f).IsAmalgamation (f.app (op X) t) :=
  by 
    intro Y g hg 
    dsimp [family_of_elements.comp_presheaf_map]
    change (f.app _ ≫ Q.map _) _ = _ 
    simp [←f.naturality, h g hg]

theorem is_compatible_of_exists_amalgamation (x : family_of_elements P R) (h : ∃ t, x.is_amalgamation t) :
  x.compatible :=
  by 
    cases' h with t ht 
    intro Y₁ Y₂ Z g₁ g₂ f₁ f₂ h₁ h₂ comm 
    rw [←ht _ h₁, ←ht _ h₂, ←functor_to_types.map_comp_apply, ←op_comp, comm]
    simp 

theorem is_amalgamation_restrict {R₁ R₂ : presieve X} (h : R₁ ≤ R₂) (x : family_of_elements P R₂) (t : P.obj (op X))
  (ht : x.is_amalgamation t) : (x.restrict h).IsAmalgamation t :=
  fun Y f hf => ht f (h Y hf)

theorem is_amalgamation_sieve_extend {R : presieve X} (x : family_of_elements P R) (t : P.obj (op X))
  (ht : x.is_amalgamation t) : x.sieve_extend.is_amalgamation t :=
  by 
    intro Y f hf 
    dsimp [family_of_elements.sieve_extend]
    rw [←ht _, ←functor_to_types.map_comp_apply, ←op_comp, (some_spec (some_spec (some_spec hf))).2]

/-- A presheaf is separated for a presieve if there is at most one amalgamation. -/
def is_separated_for (P : «expr ᵒᵖ» C ⥤ Type w) (R : presieve X) : Prop :=
  ∀ (x : family_of_elements P R) t₁ t₂, x.is_amalgamation t₁ → x.is_amalgamation t₂ → t₁ = t₂

theorem is_separated_for.ext {R : presieve X} (hR : is_separated_for P R) {t₁ t₂ : P.obj (op X)}
  (h : ∀ ⦃Y⦄ ⦃f : Y ⟶ X⦄ (hf : R f), P.map f.op t₁ = P.map f.op t₂) : t₁ = t₂ :=
  hR (fun Y f hf => P.map f.op t₂) t₁ t₂ (fun Y f hf => h hf) fun Y f hf => rfl

theorem is_separated_for_iff_generate : is_separated_for P R ↔ is_separated_for P (generate R) :=
  by 
    split 
    ·
      intro h x t₁ t₂ ht₁ ht₂ 
      apply h (x.restrict (le_generate R)) t₁ t₂ _ _
      ·
        exact is_amalgamation_restrict _ x t₁ ht₁
      ·
        exact is_amalgamation_restrict _ x t₂ ht₂
    ·
      intro h x t₁ t₂ ht₁ ht₂ 
      apply h x.sieve_extend
      ·
        exact is_amalgamation_sieve_extend x t₁ ht₁
      ·
        exact is_amalgamation_sieve_extend x t₂ ht₂

-- error in CategoryTheory.Sites.SheafOfTypes: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
theorem is_separated_for_top (P : «expr ⥤ »(«expr ᵒᵖ»(C), Type w)) : is_separated_for P («expr⊤»() : presieve X) :=
λ x t₁ t₂ h₁ h₂, begin
  have [ident q₁] [] [":=", expr h₁ («expr𝟙»() X) (by simp [] [] [] [] [] [])],
  have [ident q₂] [] [":=", expr h₂ («expr𝟙»() X) (by simp [] [] [] [] [] [])],
  simp [] [] ["only"] ["[", expr op_id, ",", expr functor_to_types.map_id_apply, "]"] [] ["at", ident q₁, ident q₂],
  rw ["[", expr q₁, ",", expr q₂, "]"] []
end

/--
We define `P` to be a sheaf for the presieve `R` if every compatible family has a unique
amalgamation.

This is the definition of a sheaf for the given presieve given in C2.1.2 of [Elephant], and
https://ncatlab.org/nlab/show/sheaf#GeneralDefinitionInComponents.
Using `compatible_iff_sieve_compatible`,
this is equivalent to the definition of a sheaf in [MM92], Chapter III, Section 4.
-/
def is_sheaf_for (P : «expr ᵒᵖ» C ⥤ Type w) (R : presieve X) : Prop :=
  ∀ (x : family_of_elements P R), x.compatible → ∃!t, x.is_amalgamation t

/--
This is an equivalent condition to be a sheaf, which is useful for the abstraction to local
operators on elementary toposes. However this definition is defined only for sieves, not presieves.
The equivalence between this and `is_sheaf_for` is given in `yoneda_condition_iff_sheaf_condition`.
This version is also useful to establish that being a sheaf is preserved under isomorphism of
presheaves.

See the discussion before Equation (3) of [MM92], Chapter III, Section 4. See also C2.1.4 of
[Elephant]. This is also a direct reformulation of https://stacks.math.columbia.edu/tag/00Z8.
-/
def yoneda_sheaf_condition (P : «expr ᵒᵖ» C ⥤ Type v₁) (S : sieve X) : Prop :=
  ∀ (f : S.functor ⟶ P), ∃!g, S.functor_inclusion ≫ g = f

/--
(Implementation). This is a (primarily internal) equivalence between natural transformations
and compatible families.

Cf the discussion after Lemma 7.47.10 in https://stacks.math.columbia.edu/tag/00YW. See also
the proof of C2.1.4 of [Elephant], and the discussion in [MM92], Chapter III, Section 4.
-/
def nat_trans_equiv_compatible_family {P : «expr ᵒᵖ» C ⥤ Type v₁} :
  (S.functor ⟶ P) ≃ { x : family_of_elements P S // x.compatible } :=
  { toFun :=
      fun α =>
        by 
          refine' ⟨fun Y f hf => _, _⟩
          ·
            apply α.app (op Y) ⟨_, hf⟩
          ·
            rw [compatible_iff_sieve_compatible]
            intro Y Z f g hf 
            dsimp 
            rw [←functor_to_types.naturality _ _ α g.op]
            rfl,
    invFun :=
      fun t =>
        { app := fun Y f => t.1 _ f.2,
          naturality' :=
            fun Y Z g =>
              by 
                ext ⟨f, hf⟩
                apply t.2.to_sieve_compatible _ },
    left_inv :=
      fun α =>
        by 
          ext X ⟨_, _⟩
          rfl,
    right_inv :=
      by 
        rintro ⟨x, hx⟩
        rfl }

-- error in CategoryTheory.Sites.SheafOfTypes: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
/-- (Implementation). A lemma useful to prove `yoneda_condition_iff_sheaf_condition`. -/
theorem extension_iff_amalgamation
{P : «expr ⥤ »(«expr ᵒᵖ»(C), Type v₁)}
(x : «expr ⟶ »(S.functor, P))
(g : «expr ⟶ »(yoneda.obj X, P)) : «expr ↔ »(«expr = »(«expr ≫ »(S.functor_inclusion, g), x), (nat_trans_equiv_compatible_family x).1.is_amalgamation (yoneda_equiv g)) :=
begin
  change [expr «expr ↔ »(_, ∀
    {{Y : C}}
    (f : «expr ⟶ »(Y, X))
    (h : S f), «expr = »(P.map f.op (yoneda_equiv g), x.app (op Y) ⟨f, h⟩))] [] [],
  split,
  { rintro [ident rfl, ident Y, ident f, ident hf],
    rw [expr yoneda_equiv_naturality] [],
    dsimp [] [] [] [],
    simp [] [] [] [] [] [] },
  { intro [ident h],
    ext [] [ident Y, "⟨", ident f, ",", ident hf, "⟩"] [],
    have [] [":", expr «expr = »(_, x.app Y _)] [":=", expr h f hf],
    rw [expr yoneda_equiv_naturality] ["at", ident this],
    rw ["<-", expr this] [],
    dsimp [] [] [] [],
    simp [] [] [] [] [] [] }
end

/--
The yoneda version of the sheaf condition is equivalent to the sheaf condition.

C2.1.4 of [Elephant].
-/
theorem is_sheaf_for_iff_yoneda_sheaf_condition {P : «expr ᵒᵖ» C ⥤ Type v₁} :
  is_sheaf_for P S ↔ yoneda_sheaf_condition P S :=
  by 
    rw [is_sheaf_for, yoneda_sheaf_condition]
    simpRw [extension_iff_amalgamation]
    rw [Equiv.forall_congr_left' nat_trans_equiv_compatible_family]
    rw [Subtype.forall]
    apply ball_congr 
    intro x hx 
    rw [Equiv.exists_unique_congr_left _]
    simp 

/--
If `P` is a sheaf for the sieve `S` on `X`, a natural transformation from `S` (viewed as a functor)
to `P` can be (uniquely) extended to all of `yoneda.obj X`.

      f
   S  →  P
   ↓  ↗
   yX

-/
noncomputable def is_sheaf_for.extend {P : «expr ᵒᵖ» C ⥤ Type v₁} (h : is_sheaf_for P S) (f : S.functor ⟶ P) :
  yoneda.obj X ⟶ P :=
  Classical.some (is_sheaf_for_iff_yoneda_sheaf_condition.1 h f).exists

/--
Show that the extension of `f : S.functor ⟶ P` to all of `yoneda.obj X` is in fact an extension, ie
that the triangle below commutes, provided `P` is a sheaf for `S`

      f
   S  →  P
   ↓  ↗
   yX

-/
@[simp, reassoc]
theorem is_sheaf_for.functor_inclusion_comp_extend {P : «expr ᵒᵖ» C ⥤ Type v₁} (h : is_sheaf_for P S)
  (f : S.functor ⟶ P) : S.functor_inclusion ≫ h.extend f = f :=
  Classical.some_spec (is_sheaf_for_iff_yoneda_sheaf_condition.1 h f).exists

/-- The extension of `f` to `yoneda.obj X` is unique. -/
theorem is_sheaf_for.unique_extend {P : «expr ᵒᵖ» C ⥤ Type v₁} (h : is_sheaf_for P S) {f : S.functor ⟶ P}
  (t : yoneda.obj X ⟶ P) (ht : S.functor_inclusion ≫ t = f) : t = h.extend f :=
  (is_sheaf_for_iff_yoneda_sheaf_condition.1 h f).unique ht (h.functor_inclusion_comp_extend f)

/--
If `P` is a sheaf for the sieve `S` on `X`, then if two natural transformations from `yoneda.obj X`
to `P` agree when restricted to the subfunctor given by `S`, they are equal.
-/
theorem is_sheaf_for.hom_ext {P : «expr ᵒᵖ» C ⥤ Type v₁} (h : is_sheaf_for P S) (t₁ t₂ : yoneda.obj X ⟶ P)
  (ht : S.functor_inclusion ≫ t₁ = S.functor_inclusion ≫ t₂) : t₁ = t₂ :=
  (h.unique_extend t₁ ht).trans (h.unique_extend t₂ rfl).symm

/-- `P` is a sheaf for `R` iff it is separated for `R` and there exists an amalgamation. -/
theorem is_separated_for_and_exists_is_amalgamation_iff_sheaf_for :
  (is_separated_for P R ∧ ∀ (x : family_of_elements P R), x.compatible → ∃ t, x.is_amalgamation t) ↔ is_sheaf_for P R :=
  by 
    rw [is_separated_for, ←forall_and_distrib]
    apply forall_congrₓ 
    intro x 
    split 
    ·
      intro z hx 
      exact exists_unique_of_exists_of_unique (z.2 hx) z.1
    ·
      intro h 
      refine' ⟨_, exists_of_exists_unique ∘ h⟩
      intro t₁ t₂ ht₁ ht₂ 
      apply (h _).unique ht₁ ht₂ 
      exact is_compatible_of_exists_amalgamation x ⟨_, ht₂⟩

/--
If `P` is separated for `R` and every family has an amalgamation, then `P` is a sheaf for `R`.
-/
theorem is_separated_for.is_sheaf_for (t : is_separated_for P R) :
  (∀ (x : family_of_elements P R), x.compatible → ∃ t, x.is_amalgamation t) → is_sheaf_for P R :=
  by 
    rw [←is_separated_for_and_exists_is_amalgamation_iff_sheaf_for]
    exact And.intro t

/-- If `P` is a sheaf for `R`, it is separated for `R`. -/
theorem is_sheaf_for.is_separated_for : is_sheaf_for P R → is_separated_for P R :=
  fun q => (is_separated_for_and_exists_is_amalgamation_iff_sheaf_for.2 q).1

/-- Get the amalgamation of the given compatible family, provided we have a sheaf. -/
noncomputable def is_sheaf_for.amalgamate (t : is_sheaf_for P R) (x : family_of_elements P R) (hx : x.compatible) :
  P.obj (op X) :=
  Classical.some (t x hx).exists

theorem is_sheaf_for.is_amalgamation (t : is_sheaf_for P R) {x : family_of_elements P R} (hx : x.compatible) :
  x.is_amalgamation (t.amalgamate x hx) :=
  Classical.some_spec (t x hx).exists

@[simp]
theorem is_sheaf_for.valid_glue (t : is_sheaf_for P R) {x : family_of_elements P R} (hx : x.compatible) (f : Y ⟶ X)
  (Hf : R f) : P.map f.op (t.amalgamate x hx) = x f Hf :=
  t.is_amalgamation hx f Hf

/-- C2.1.3 in [Elephant] -/
theorem is_sheaf_for_iff_generate (R : presieve X) : is_sheaf_for P R ↔ is_sheaf_for P (generate R) :=
  by 
    rw [←is_separated_for_and_exists_is_amalgamation_iff_sheaf_for]
    rw [←is_separated_for_and_exists_is_amalgamation_iff_sheaf_for]
    rw [←is_separated_for_iff_generate]
    apply and_congr (Iff.refl _)
    split 
    ·
      intro q x hx 
      apply exists_imp_exists _ (q _ (hx.restrict (le_generate R)))
      intro t ht 
      simpa [hx] using is_amalgamation_sieve_extend _ _ ht
    ·
      intro q x hx 
      apply exists_imp_exists _ (q _ (hx.sieve_extend _))
      intro t ht 
      simpa [hx] using is_amalgamation_restrict (le_generate R) _ _ ht

/--
Every presheaf is a sheaf for the family {𝟙 X}.

[Elephant] C2.1.5(i)
-/
theorem is_sheaf_for_singleton_iso (P : «expr ᵒᵖ» C ⥤ Type w) : is_sheaf_for P (presieve.singleton (𝟙 X)) :=
  by 
    intro x hx 
    refine' ⟨x _ (presieve.singleton_self _), _, _⟩
    ·
      rintro _ _ ⟨rfl, rfl⟩
      simp 
    ·
      intro t ht 
      simpa using ht _ (presieve.singleton_self _)

/--
Every presheaf is a sheaf for the maximal sieve.

[Elephant] C2.1.5(ii)
-/
theorem is_sheaf_for_top_sieve (P : «expr ᵒᵖ» C ⥤ Type w) : is_sheaf_for P ((⊤ : sieve X) : presieve X) :=
  by 
    rw [←generate_of_singleton_split_epi (𝟙 X)]
    rw [←is_sheaf_for_iff_generate]
    apply is_sheaf_for_singleton_iso

-- error in CategoryTheory.Sites.SheafOfTypes: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
/--
If `P` is a sheaf for `S`, and it is iso to `P'`, then `P'` is a sheaf for `S`. This shows that
"being a sheaf for a presieve" is a mathematical or hygenic property.
-/
theorem is_sheaf_for_iso
{P' : «expr ⥤ »(«expr ᵒᵖ»(C), Type w)}
(i : «expr ≅ »(P, P')) : is_sheaf_for P R → is_sheaf_for P' R :=
begin
  intros [ident h, ident x, ident hx],
  let [ident x'] [] [":=", expr x.comp_presheaf_map i.inv],
  have [] [":", expr x'.compatible] [":=", expr family_of_elements.compatible.comp_presheaf_map i.inv hx],
  obtain ["⟨", ident t, ",", ident ht1, ",", ident ht2, "⟩", ":=", expr h x' this],
  use [expr i.hom.app _ t],
  fsplit,
  { convert [] [expr family_of_elements.is_amalgamation.comp_presheaf_map i.hom ht1] [],
    dsimp [] ["[", expr x', "]"] [] [],
    simp [] [] [] [] [] [] },
  { intros [ident y, ident hy],
    rw [expr show «expr = »(y, «expr ≫ »(i.inv.app (op X), i.hom.app (op X)) y), by simp [] [] [] [] [] []] [],
    simp [] [] [] ["[", expr ht2 (i.inv.app _ y) (family_of_elements.is_amalgamation.comp_presheaf_map i.inv hy), "]"] [] [] }
end

/--
If a presieve `R` on `X` has a subsieve `S` such that:

* `P` is a sheaf for `S`.
* For every `f` in `R`, `P` is separated for the pullback of `S` along `f`,

then `P` is a sheaf for `R`.

This is closely related to [Elephant] C2.1.6(i).
-/
theorem is_sheaf_for_subsieve_aux (P : «expr ᵒᵖ» C ⥤ Type w) {S : sieve X} {R : presieve X} (h : (S : presieve X) ≤ R)
  (hS : is_sheaf_for P S) (trans : ∀ ⦃Y⦄ ⦃f : Y ⟶ X⦄, R f → is_separated_for P (S.pullback f)) : is_sheaf_for P R :=
  by 
    rw [←is_separated_for_and_exists_is_amalgamation_iff_sheaf_for]
    split 
    ·
      intro x t₁ t₂ ht₁ ht₂ 
      exact hS.is_separated_for _ _ _ (is_amalgamation_restrict h x t₁ ht₁) (is_amalgamation_restrict h x t₂ ht₂)
    ·
      intro x hx 
      use hS.amalgamate _ (hx.restrict h)
      intro W j hj 
      apply (trans hj).ext 
      intro Y f hf 
      rw [←functor_to_types.map_comp_apply, ←op_comp, hS.valid_glue (hx.restrict h) _ hf, family_of_elements.restrict,
        ←hx (𝟙 _) f _ _ (id_comp _)]
      simp 

/--
If `P` is a sheaf for every pullback of the sieve `S`, then `P` is a sheaf for any presieve which
contains `S`.
This is closely related to [Elephant] C2.1.6.
-/
theorem is_sheaf_for_subsieve (P : «expr ᵒᵖ» C ⥤ Type w) {S : sieve X} {R : presieve X} (h : (S : presieve X) ≤ R)
  (trans : ∀ ⦃Y⦄ (f : Y ⟶ X), is_sheaf_for P (S.pullback f)) : is_sheaf_for P R :=
  is_sheaf_for_subsieve_aux P h
    (by 
      simpa using trans (𝟙 _))
    fun Y f hf => (trans f).IsSeparatedFor

/-- A presheaf is separated for a topology if it is separated for every sieve in the topology. -/
def is_separated (P : «expr ᵒᵖ» C ⥤ Type w) : Prop :=
  ∀ {X} (S : sieve X), S ∈ J X → is_separated_for P S

/--
A presheaf is a sheaf for a topology if it is a sheaf for every sieve in the topology.

If the given topology is given by a pretopology, `is_sheaf_for_pretopology` shows it suffices to
check the sheaf condition at presieves in the pretopology.
-/
def is_sheaf (P : «expr ᵒᵖ» C ⥤ Type w) : Prop :=
  ∀ ⦃X⦄ (S : sieve X), S ∈ J X → is_sheaf_for P S

theorem is_sheaf.is_sheaf_for {P : «expr ᵒᵖ» C ⥤ Type w} (hp : is_sheaf J P) (R : presieve X) (hr : generate R ∈ J X) :
  is_sheaf_for P R :=
  (is_sheaf_for_iff_generate R).2$ hp _ hr

theorem is_sheaf_of_le (P : «expr ᵒᵖ» C ⥤ Type w) {J₁ J₂ : grothendieck_topology C} :
  J₁ ≤ J₂ → is_sheaf J₂ P → is_sheaf J₁ P :=
  fun h t X S hS => t S (h _ hS)

theorem is_separated_of_is_sheaf (P : «expr ᵒᵖ» C ⥤ Type w) (h : is_sheaf J P) : is_separated J P :=
  fun X S hS => (h S hS).IsSeparatedFor

/-- The property of being a sheaf is preserved by isomorphism. -/
theorem is_sheaf_iso {P' : «expr ᵒᵖ» C ⥤ Type w} (i : P ≅ P') (h : is_sheaf J P) : is_sheaf J P' :=
  fun X S hS => is_sheaf_for_iso i (h S hS)

theorem is_sheaf_of_yoneda {P : «expr ᵒᵖ» C ⥤ Type v₁} (h : ∀ {X} (S : sieve X), S ∈ J X → yoneda_sheaf_condition P S) :
  is_sheaf J P :=
  fun X S hS => is_sheaf_for_iff_yoneda_sheaf_condition.2 (h _ hS)

-- error in CategoryTheory.Sites.SheafOfTypes: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
/--
For a topology generated by a basis, it suffices to check the sheaf condition on the basis
presieves only.
-/
theorem is_sheaf_pretopology
[has_pullbacks C]
(K : pretopology C) : «expr ↔ »(is_sheaf (K.to_grothendieck C) P, ∀
 {X : C}
 (R : presieve X), «expr ∈ »(R, K X) → is_sheaf_for P R) :=
begin
  split,
  { intros [ident PJ, ident X, ident R, ident hR],
    rw [expr is_sheaf_for_iff_generate] [],
    apply [expr PJ (sieve.generate R) ⟨_, hR, le_generate R⟩] },
  { rintro [ident PK, ident X, ident S, "⟨", ident R, ",", ident hR, ",", ident RS, "⟩"],
    have [ident gRS] [":", expr «expr ≤ »(«expr⇑ »(generate R), S)] [],
    { apply [expr gi_generate.gc.monotone_u],
      rwa [expr sets_iff_generate] [] },
    apply [expr is_sheaf_for_subsieve P gRS _],
    intros [ident Y, ident f],
    rw ["[", "<-", expr pullback_arrows_comm, ",", "<-", expr is_sheaf_for_iff_generate, "]"] [],
    exact [expr PK (pullback_arrows f R) (K.pullbacks f R hR)] }
end

/-- Any presheaf is a sheaf for the bottom (trivial) grothendieck topology. -/
theorem is_sheaf_bot : is_sheaf (⊥ : grothendieck_topology C) P :=
  fun X =>
    by 
      simp [is_sheaf_for_top_sieve]

end Presieve

namespace Equalizer

variable{C : Type u₁}[category.{v₁} C](P : «expr ᵒᵖ» C ⥤ Type max v₁ u₁){X : C}(R : presieve X)(S : sieve X)

noncomputable theory

-- error in CategoryTheory.Sites.SheafOfTypes: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
/--
The middle object of the fork diagram given in Equation (3) of [MM92], as well as the fork diagram
of https://stacks.math.columbia.edu/tag/00VM.
-/ def first_obj : Type max v₁ u₁ :=
«expr∏ »(λ f : «exprΣ , »((Y), {f : «expr ⟶ »(Y, X) // R f}), P.obj (op f.1))

-- error in CategoryTheory.Sites.SheafOfTypes: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
/-- Show that `first_obj` is isomorphic to `family_of_elements`. -/
@[simps #[]]
def first_obj_eq_family : «expr ≅ »(first_obj P R, R.family_of_elements P) :=
{ hom := λ t Y f hf, pi.π (λ f : «exprΣ , »((Y), {f : «expr ⟶ »(Y, X) // R f}), P.obj (op f.1)) ⟨_, _, hf⟩ t,
  inv := pi.lift (λ f x, x _ f.2.2),
  hom_inv_id' := begin
    ext [] ["⟨", ident Y, ",", ident f, ",", ident hf, "⟩", ident p] [],
    simpa [] [] [] [] [] []
  end,
  inv_hom_id' := begin
    ext [] [ident x, ident Y, ident f, ident hf] [],
    apply [expr limits.types.limit.lift_π_apply]
  end }

instance  : Inhabited (first_obj P (⊥ : presieve X)) :=
  (first_obj_eq_family P _).toEquiv.Inhabited

/--
The left morphism of the fork diagram given in Equation (3) of [MM92], as well as the fork diagram
of https://stacks.math.columbia.edu/tag/00VM.
-/
def fork_map : P.obj (op X) ⟶ first_obj P R :=
  pi.lift fun f => P.map f.2.1.op

/-!
This section establishes the equivalence between the sheaf condition of Equation (3) [MM92] and
the definition of `is_sheaf_for`.
-/


namespace Sieve

-- error in CategoryTheory.Sites.SheafOfTypes: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
/--
The rightmost object of the fork diagram of Equation (3) [MM92], which contains the data used
to check a family is compatible.
-/ def second_obj : Type max v₁ u₁ :=
«expr∏ »(λ f : «exprΣ , »((Y Z) (g : «expr ⟶ »(Z, Y)), {f' : «expr ⟶ »(Y, X) // S f'}), P.obj (op f.2.1))

/-- The map `p` of Equations (3,4) [MM92]. -/
def first_map : first_obj P S ⟶ second_obj P S :=
  pi.lift fun fg => pi.π _ (⟨_, _, S.downward_closed fg.2.2.2.2 fg.2.2.1⟩ : ΣY, { f : Y ⟶ X // S f })

instance  : Inhabited (second_obj P (⊥ : sieve X)) :=
  ⟨first_map _ _ (default _)⟩

/-- The map `a` of Equations (3,4) [MM92]. -/
def second_map : first_obj P S ⟶ second_obj P S :=
  pi.lift fun fg => pi.π _ ⟨_, fg.2.2.2⟩ ≫ P.map fg.2.2.1.op

theorem w : fork_map P S ≫ first_map P S = fork_map P S ≫ second_map P S :=
  by 
    apply limit.hom_ext 
    rintro ⟨Y, Z, g, f, hf⟩
    simp [first_map, second_map, fork_map]

/--
The family of elements given by `x : first_obj P S` is compatible iff `first_map` and `second_map`
map it to the same point.
-/
theorem compatible_iff (x : first_obj P S) :
  ((first_obj_eq_family P S).Hom x).Compatible ↔ first_map P S x = second_map P S x :=
  by 
    rw [presieve.compatible_iff_sieve_compatible]
    split 
    ·
      intro t 
      ext ⟨Y, Z, g, f, hf⟩
      simpa [first_map, second_map] using t _ g hf
    ·
      intro t Y Z f g hf 
      rw [types.limit_ext_iff] at t 
      simpa [first_map, second_map] using t ⟨Y, Z, g, f, hf⟩

/-- `P` is a sheaf for `S`, iff the fork given by `w` is an equalizer. -/
theorem equalizer_sheaf_condition : presieve.is_sheaf_for P S ↔ Nonempty (is_limit (fork.of_ι _ (w P S))) :=
  by 
    rw [types.type_equalizer_iff_unique, ←Equiv.forall_congr_left (first_obj_eq_family P S).toEquiv.symm]
    simpRw [←compatible_iff]
    simp only [inv_hom_id_apply, iso.to_equiv_symm_fun]
    apply ball_congr 
    intro x tx 
    apply exists_unique_congr 
    intro t 
    rw [←iso.to_equiv_symm_fun]
    rw [Equiv.eq_symm_apply]
    split 
    ·
      intro q 
      ext Y f hf 
      simpa [first_obj_eq_family, fork_map] using q _ _
    ·
      intro q Y f hf 
      rw [←q]
      simp [first_obj_eq_family, fork_map]

end Sieve

/-!
This section establishes the equivalence between the sheaf condition of
https://stacks.math.columbia.edu/tag/00VM and the definition of `is_sheaf_for`.
-/


namespace Presieve

variable[has_pullbacks C]

-- error in CategoryTheory.Sites.SheafOfTypes: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
/--
The rightmost object of the fork diagram of https://stacks.math.columbia.edu/tag/00VM, which
contains the data used to check a family of elements for a presieve is compatible.
-/ def second_obj : Type max v₁ u₁ :=
«expr∏ »(λ
 fg : «expr × »(«exprΣ , »((Y), {f : «expr ⟶ »(Y, X) // R f}), «exprΣ , »((Z), {g : «expr ⟶ »(Z, X) // R g})), P.obj (op (pullback fg.1.2.1 fg.2.2.1)))

/-- The map `pr₀*` of https://stacks.math.columbia.edu/tag/00VL. -/
def first_map : first_obj P R ⟶ second_obj P R :=
  pi.lift fun fg => pi.π _ _ ≫ P.map pullback.fst.op

instance  : Inhabited (second_obj P (⊥ : presieve X)) :=
  ⟨first_map _ _ (default _)⟩

/-- The map `pr₁*` of https://stacks.math.columbia.edu/tag/00VL. -/
def second_map : first_obj P R ⟶ second_obj P R :=
  pi.lift fun fg => pi.π _ _ ≫ P.map pullback.snd.op

theorem w : fork_map P R ≫ first_map P R = fork_map P R ≫ second_map P R :=
  by 
    apply limit.hom_ext 
    rintro ⟨⟨Y, f, hf⟩, ⟨Z, g, hg⟩⟩
    simp only [first_map, second_map, fork_map]
    simp only [limit.lift_π, limit.lift_π_assoc, assoc, fan.mk_π_app, Subtype.coe_mk, Subtype.val_eq_coe]
    rw [←P.map_comp, ←op_comp, pullback.condition]
    simp 

/--
The family of elements given by `x : first_obj P S` is compatible iff `first_map` and `second_map`
map it to the same point.
-/
theorem compatible_iff (x : first_obj P R) :
  ((first_obj_eq_family P R).Hom x).Compatible ↔ first_map P R x = second_map P R x :=
  by 
    rw [presieve.pullback_compatible_iff]
    split 
    ·
      intro t 
      ext ⟨⟨Y, f, hf⟩, Z, g, hg⟩
      simpa [first_map, second_map] using t hf hg
    ·
      intro t Y Z f g hf hg 
      rw [types.limit_ext_iff] at t 
      simpa [first_map, second_map] using t ⟨⟨Y, f, hf⟩, Z, g, hg⟩

/--
`P` is a sheaf for `R`, iff the fork given by `w` is an equalizer.
See https://stacks.math.columbia.edu/tag/00VM.
-/
theorem sheaf_condition : R.is_sheaf_for P ↔ Nonempty (is_limit (fork.of_ι _ (w P R))) :=
  by 
    rw [types.type_equalizer_iff_unique]
    erw [←Equiv.forall_congr_left (first_obj_eq_family P R).toEquiv.symm]
    simpRw [←compatible_iff, ←iso.to_equiv_fun, Equiv.apply_symm_apply]
    apply ball_congr 
    intro x hx 
    apply exists_unique_congr 
    intro t 
    rw [Equiv.eq_symm_apply]
    split 
    ·
      intro q 
      ext Y f hf 
      simpa [fork_map] using q _ _
    ·
      intro q Y f hf 
      rw [←q]
      simp [fork_map]

end Presieve

end Equalizer

variable{C : Type u₁}[category.{v₁} C]

variable(J : grothendieck_topology C)

-- error in CategoryTheory.Sites.SheafOfTypes: ././Mathport/Syntax/Translate/Basic.lean:704:9: unsupported derive handler category
/-- The category of sheaves on a grothendieck topology. -/
@[derive #[expr category]]
def SheafOfTypes (J : grothendieck_topology C) : Type max u₁ v₁ w+1 :=
{P : «expr ⥤ »(«expr ᵒᵖ»(C), Type w) // presieve.is_sheaf J P}

-- error in CategoryTheory.Sites.SheafOfTypes: ././Mathport/Syntax/Translate/Basic.lean:704:9: unsupported derive handler full
/-- The inclusion functor from sheaves to presheaves. -/
@[simps #[expr { rhs_md := semireducible }], derive #["[", expr full, ",", expr faithful, "]"]]
def SheafOfTypes_to_presheaf : «expr ⥤ »(SheafOfTypes J, «expr ⥤ »(«expr ᵒᵖ»(C), Type w)) :=
full_subcategory_inclusion (presieve.is_sheaf J)

/--
The category of sheaves on the bottom (trivial) grothendieck topology is equivalent to the category
of presheaves.
-/
@[simps]
def SheafOfTypes_bot_equiv : SheafOfTypes (⊥ : grothendieck_topology C) ≌ «expr ᵒᵖ» C ⥤ Type w :=
  { Functor := SheafOfTypes_to_presheaf _,
    inverse :=
      { obj := fun P => ⟨P, presieve.is_sheaf_bot⟩, map := fun P₁ P₂ f => (SheafOfTypes_to_presheaf _).Preimage f },
    unitIso := { Hom := { app := fun _ => 𝟙 _ }, inv := { app := fun _ => 𝟙 _ } }, counitIso := iso.refl _ }

instance  : Inhabited (SheafOfTypes (⊥ : grothendieck_topology C)) :=
  ⟨SheafOfTypes_bot_equiv.inverse.obj ((Functor.Const _).obj PUnit)⟩

end CategoryTheory

