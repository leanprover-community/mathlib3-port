import Mathbin.CategoryTheory.Sites.Grothendieck

/-!
# Grothendieck pretopologies

Definition and lemmas about Grothendieck pretopologies.
A Grothendieck pretopology for a category `C` is a set of families of morphisms with fixed codomain,
satisfying certain closure conditions.

We show that a pretopology generates a genuine Grothendieck topology, and every topology has
a maximal pretopology which generates it.

The pretopology associated to a topological space is defined in `spaces.lean`.

## Tags

coverage, pretopology, site

## References

* [https://ncatlab.org/nlab/show/Grothendieck+pretopology][nlab]
* [S. MacLane, I. Moerdijk, *Sheaves in Geometry and Logic*][MM92]
* [https://stacks.math.columbia.edu/tag/00VG][Stacks]
-/


universe v u

noncomputable theory

namespace CategoryTheory

open CategoryTheory Category Limits Presieve

variable{C : Type u}[category.{v} C][has_pullbacks C]

variable(C)

/--
A (Grothendieck) pretopology on `C` consists of a collection of families of morphisms with a fixed
target `X` for every object `X` in `C`, called "coverings" of `X`, which satisfies the following
three axioms:
1. Every family consisting of a single isomorphism is a covering family.
2. The collection of covering families is stable under pullback.
3. Given a covering family, and a covering family on each domain of the former, the composition
   is a covering family.

In some sense, a pretopology can be seen as Grothendieck topology with weaker saturation conditions,
in that each covering is not necessarily downward closed.

See: https://ncatlab.org/nlab/show/Grothendieck+pretopology, or
https://stacks.math.columbia.edu/tag/00VH, or [MM92] Chapter III, Section 2, Definition 2.
Note that Stacks calls a category together with a pretopology a site, and [MM92] calls this
a basis for a topology.
-/
@[ext]
structure pretopology where 
  Coverings : ‚àÄ (X : C), Set (presieve X)
  has_isos : ‚àÄ ‚¶ÉX Y‚¶Ñ (f : Y ‚ü∂ X) [is_iso f], presieve.singleton f ‚àà coverings X 
  pullbacks : ‚àÄ ‚¶ÉX Y‚¶Ñ (f : Y ‚ü∂ X) S, S ‚àà coverings X ‚Üí pullback_arrows f S ‚àà coverings Y 
  Transitive :
  ‚àÄ ‚¶ÉX : C‚¶Ñ (S : presieve X) (Ti : ‚àÄ ‚¶ÉY‚¶Ñ (f : Y ‚ü∂ X), S f ‚Üí presieve Y),
    S ‚àà coverings X ‚Üí (‚àÄ ‚¶ÉY‚¶Ñ f (H : S f), Ti f H ‚àà coverings Y) ‚Üí S.bind Ti ‚àà coverings X

namespace Pretopology

instance  : CoeFun (pretopology C) fun _ => ‚àÄ (X : C), Set (presieve X) :=
  ‚ü®coverings‚ü©

variable{C}

instance  : LE (pretopology C) :=
  { le := fun K‚ÇÅ K‚ÇÇ => (K‚ÇÅ : ‚àÄ (X : C), Set (presieve X)) ‚â§ K‚ÇÇ }

theorem le_def {K‚ÇÅ K‚ÇÇ : pretopology C} : K‚ÇÅ ‚â§ K‚ÇÇ ‚Üî (K‚ÇÅ : ‚àÄ (X : C), Set (presieve X)) ‚â§ K‚ÇÇ :=
  Iff.rfl

variable(C)

instance  : PartialOrder‚Çì (pretopology C) :=
  { pretopology.has_le with le_refl := fun K => le_def.mpr (le_refl‚Çì _),
    le_trans := fun K‚ÇÅ K‚ÇÇ K‚ÇÉ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ => le_def.mpr (le_trans‚Çì h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ),
    le_antisymm := fun K‚ÇÅ K‚ÇÇ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÅ => pretopology.ext _ _ (le_antisymm‚Çì h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÅ) }

instance  : OrderTop (pretopology C) :=
  { top :=
      { Coverings := fun _ => Set.Univ, has_isos := fun _ _ _ _ => Set.mem_univ _,
        pullbacks := fun _ _ _ _ _ => Set.mem_univ _, Transitive := fun _ _ _ _ _ => Set.mem_univ _ },
    le_top := fun K X S hS => Set.mem_univ _ }

instance  : Inhabited (pretopology C) :=
  ‚ü®‚ä§‚ü©

/--
A pretopology `K` can be completed to a Grothendieck topology `J` by declaring a sieve to be
`J`-covering if it contains a family in `K`.

See https://stacks.math.columbia.edu/tag/00ZC, or [MM92] Chapter III, Section 2, Equation (2).
-/
def to_grothendieck (K : pretopology C) : grothendieck_topology C :=
  { Sieves := fun X S => ‚àÉ (R : _)(_ : R ‚àà K X), R ‚â§ (S : presieve _),
    top_mem' := fun X => ‚ü®presieve.singleton (ùüô _), K.has_isos _, fun _ _ _ => ‚ü®‚ü©‚ü©,
    pullback_stable' :=
      fun X Y S g =>
        by 
          rintro ‚ü®R, hR, RS‚ü©
          refine' ‚ü®_, K.pullbacks g _ hR, _‚ü©
          rw [‚Üêsieve.sets_iff_generate, sieve.pullback_arrows_comm]
          apply sieve.pullback_monotone 
          rwa [sieve.gi_generate.gc],
    transitive' :=
      by 
        rintro X S ‚ü®R', hR', RS‚ü© R t 
        choose t‚ÇÅ t‚ÇÇ t‚ÇÉ using t 
        refine' ‚ü®_, K.transitive _ _ hR' fun _ f hf => t‚ÇÇ (RS _ hf), _‚ü©
        rintro Y _ ‚ü®Z, g, f, hg, hf, rfl‚ü©
        apply t‚ÇÉ (RS _ hg) _ hf }

theorem mem_to_grothendieck (K : pretopology C) X S :
  S ‚àà to_grothendieck C K X ‚Üî ‚àÉ (R : _)(_ : R ‚àà K X), R ‚â§ (S : presieve X) :=
  Iff.rfl

/--
The largest pretopology generating the given Grothendieck topology.

See [MM92] Chapter III, Section 2, Equations (3,4).
-/
def of_grothendieck (J : grothendieck_topology C) : pretopology C :=
  { Coverings := fun X R => sieve.generate R ‚àà J X,
    has_isos :=
      fun X Y f i =>
        by 
          exact
            J.covering_of_eq_top
              (by 
                simp ),
    pullbacks :=
      fun X Y f R hR =>
        by 
          rw [Set.mem_def, sieve.pullback_arrows_comm]
          apply J.pullback_stable f hR,
    Transitive :=
      fun X S Ti hS hTi =>
        by 
          apply J.transitive hS 
          intro Y f 
          rintro ‚ü®Z, g, f, hf, rfl‚ü©
          rw [sieve.pullback_comp]
          apply J.pullback_stable g 
          apply J.superset_covering _ (hTi _ hf)
          rintro Y g ‚ü®W, h, g, hg, rfl‚ü©
          exact
            ‚ü®_, h, _, ‚ü®_, _, _, hf, hg, rfl‚ü©,
              by 
                simp ‚ü© }

/-- We have a galois insertion from pretopologies to Grothendieck topologies. -/
def gi : GaloisInsertion (to_grothendieck C) (of_grothendieck C) :=
  { gc :=
      fun K J =>
        by 
          split 
          ¬∑
            intro h X R hR 
            exact h _ ‚ü®_, hR, sieve.le_generate R‚ü©
          ¬∑
            rintro h X S ‚ü®R, hR, RS‚ü©
            apply J.superset_covering _ (h _ hR)
            rwa [sieve.gi_generate.gc],
    le_l_u := fun J X S hS => ‚ü®S, J.superset_covering S.le_generate hS, le_refl‚Çì _‚ü©,
    choice := fun x hx => to_grothendieck C x, choice_eq := fun _ _ => rfl }

/--
The trivial pretopology, in which the coverings are exactly singleton isomorphisms. This topology is
also known as the indiscrete, coarse, or chaotic topology.

See https://stacks.math.columbia.edu/tag/07GE
-/
def trivial‚Çì : pretopology C :=
  { Coverings := fun X S => ‚àÉ (Y : _)(f : Y ‚ü∂ X)(h : is_iso f), S = presieve.singleton f,
    has_isos := fun X Y f i => ‚ü®_, _, i, rfl‚ü©,
    pullbacks :=
      fun X Y f S =>
        by 
          rintro ‚ü®Z, g, i, rfl‚ü©
          refine' ‚ü®pullback g f, pullback.snd, _, _‚ü©
          ¬∑
            skip 
            refine'
              ‚ü®‚ü®pullback.lift (f ‚â´ inv g) (ùüô _)
                    (by 
                      simp ),
                  ‚ü®_,
                    by 
                      tidy‚ü©‚ü©‚ü©
            apply pullback.hom_ext
            ¬∑
              rw [assoc, pullback.lift_fst, ‚Üêpullback.condition_assoc]
              simp 
            ¬∑
              simp 
          ¬∑
            apply pullback_singleton,
    Transitive :=
      by 
        rintro X S Ti ‚ü®Z, g, i, rfl‚ü© hS 
        rcases hS g (singleton_self g) with ‚ü®Y, f, i, hTi‚ü©
        refine' ‚ü®_, f ‚â´ g, _, _‚ü©
        ¬∑
          skip 
          infer_instance 
        ext W k 
        split 
        ¬∑
          rintro ‚ü®V, h, k, ‚ü®_‚ü©, hh, rfl‚ü©
          rw [hTi] at hh 
          cases hh 
          apply singleton.mk
        ¬∑
          rintro ‚ü®_‚ü©
          refine' bind_comp g presieve.singleton.mk _ 
          rw [hTi]
          apply presieve.singleton.mk }

instance  : OrderBot (pretopology C) :=
  { bot := trivial‚Çì C,
    bot_le :=
      fun K X R =>
        by 
          rintro ‚ü®Y, f, hf, rfl‚ü©
          exact K.has_isos f }

/-- The trivial pretopology induces the trivial grothendieck topology. -/
theorem to_grothendieck_bot : to_grothendieck C ‚ä• = ‚ä• :=
  (gi C).gc.l_bot

end Pretopology

end CategoryTheory

