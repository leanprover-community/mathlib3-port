import Mathbin.CategoryTheory.Sites.Canonical

/-!
# Grothendieck Topology and Sheaves on the Category of Types

In this file we define a Grothendieck topology on the category of types,
and construct the canonical functor that sends a type to a sheaf over
the category of types, and make this an equivalence of categories.

Then we prove that the topology defined is the canonical topology.
-/


universe u

namespace CategoryTheory

open_locale CategoryTheory.Type

-- error in CategoryTheory.Sites.Types: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
/-- A Grothendieck topology associated to the category of all types.
A sieve is a covering iff it is jointly surjective. -/
def types_grothendieck_topology : grothendieck_topology (Type u) :=
{ sieves := Œª Œ± S, ‚àÄ x : Œ±, S (Œª _ : punit, x),
  top_mem' := Œª Œ± x, trivial,
  pullback_stable' := Œª Œ± Œ≤ S f hs x, hs (f x),
  transitive' := Œª Œ± S hs R hr x, hr (hs x) punit.star }

/-- The discrete sieve on a type, which only includes arrows whose image is a subsingleton. -/
@[simps]
def discrete_sieve (Œ± : Type u) : sieve Œ± :=
  { Arrows := fun Œ≤ f => ‚àÉ x, ‚àÄ y, f y = x, downward_closed' := fun Œ≤ Œ≥ f ‚ü®x, hx‚ü© g => ‚ü®x, fun y => hx$ g y‚ü© }

theorem discrete_sieve_mem (Œ± : Type u) : discrete_sieve Œ± ‚àà types_grothendieck_topology Œ± :=
  fun x => ‚ü®x, fun y => rfl‚ü©

/-- The discrete presieve on a type, which only includes arrows whose domain is a singleton. -/
def discrete_presieve (Œ± : Type u) : presieve Œ± :=
  fun Œ≤ f => ‚àÉ x : Œ≤, ‚àÄ (y : Œ≤), y = x

theorem generate_discrete_presieve_mem (Œ± : Type u) :
  sieve.generate (discrete_presieve Œ±) ‚àà types_grothendieck_topology Œ± :=
  fun x => ‚ü®PUnit, id, fun _ => x, ‚ü®PUnit.unit, fun _ => Subsingleton.elim‚Çì _ _‚ü©, rfl‚ü©

open Presieve

theorem is_sheaf_yoneda' {Œ± : Type u} : is_sheaf types_grothendieck_topology (yoneda.obj Œ±) :=
  fun Œ≤ S hs x hx =>
    ‚ü®fun y => x _ (hs y) PUnit.unit,
      fun Œ≥ f h =>
        funext$
          fun z =>
            have  := congr_fun‚Çì (hx (ùüô _) (fun _ => z) (hs$ f z) h rfl) PUnit.unit 
            by 
              convert this 
              exact rfl,
      fun f hf =>
        funext$
          fun y =>
            by 
              convert congr_fun‚Çì (hf _ (hs y)) PUnit.unit‚ü©

/-- The yoneda functor that sends a type to a sheaf over the category of types -/
@[simps]
def yoneda' : Type u ‚•§ SheafOfTypes types_grothendieck_topology :=
  { obj := fun Œ± => ‚ü®yoneda.obj Œ±, is_sheaf_yoneda'‚ü©, map := fun Œ± Œ≤ f => yoneda.map f }

@[simp]
theorem yoneda'_comp : yoneda'.{u} ‚ãô induced_functor _ = yoneda :=
  rfl

open Opposite

/-- Given a presheaf `P` on the category of types, construct
a map `P(Œ±) ‚Üí (Œ± ‚Üí P(*))` for all type `Œ±`. -/
def eval (P : ¬´expr ·µí·µñ¬ª (Type u) ‚•§ Type u) (Œ± : Type u) (s : P.obj (op Œ±)) (x : Œ±) : P.obj (op PUnit) :=
  P.map (‚Üæfun _ => x).op s

/-- Given a sheaf `S` on the category of types, construct a map
`(Œ± ‚Üí S(*)) ‚Üí S(Œ±)` that is inverse to `eval`. -/
noncomputable def types_glue (S : ¬´expr ·µí·µñ¬ª (Type u) ‚•§ Type u) (hs : is_sheaf types_grothendieck_topology S)
  (Œ± : Type u) (f : Œ± ‚Üí S.obj (op PUnit)) : S.obj (op Œ±) :=
  (hs.is_sheaf_for _ _ (generate_discrete_presieve_mem Œ±)).amalgamate
    (fun Œ≤ g hg => S.map (‚Üæfun x => PUnit.unit).op$ f$ g$ Classical.some hg)
    fun Œ≤ Œ≥ Œ¥ g‚ÇÅ g‚ÇÇ f‚ÇÅ f‚ÇÇ hf‚ÇÅ hf‚ÇÇ h =>
      (hs.is_sheaf_for _ _ (generate_discrete_presieve_mem Œ¥)).IsSeparatedFor.ext$
        fun Œµ g ‚ü®x, hx‚ü© =>
          have  : f‚ÇÅ (Classical.some hf‚ÇÅ) = f‚ÇÇ (Classical.some hf‚ÇÇ) :=
            Classical.some_spec hf‚ÇÅ (g‚ÇÅ$ g x) ‚ñ∏ Classical.some_spec hf‚ÇÇ (g‚ÇÇ$ g x) ‚ñ∏ congr_fun‚Çì h _ 
          by 
            simpRw [‚Üêfunctor_to_types.map_comp_apply, this, ‚Üêop_comp]
            rfl

theorem eval_types_glue {S hs Œ±} f : eval.{u} S Œ± (types_glue S hs Œ± f) = f :=
  funext$
    fun x =>
      (is_sheaf_for.valid_glue _ _ _$
            by 
              exact ‚ü®PUnit.unit, fun _ => Subsingleton.elim‚Çì _ _‚ü©).trans$
        by 
          convert functor_to_types.map_id_apply _ _ 
          rw [‚Üêop_id]
          congr

theorem types_glue_eval {S hs Œ±} s : types_glue.{u} S hs Œ± (eval S Œ± s) = s :=
  (hs.is_sheaf_for _ _ (generate_discrete_presieve_mem Œ±)).IsSeparatedFor.ext$
    fun Œ≤ f hf =>
      (is_sheaf_for.valid_glue _ _ _ hf).trans$
        (functor_to_types.map_comp_apply _ _ _ _).symm.trans$
          by 
            rw [‚Üêop_comp]
            congr 2 
            exact funext fun x => congr_arg‚Çì f (Classical.some_spec hf x).symm

/-- Given a sheaf `S`, construct an equivalence `S(Œ±) ‚âÉ (Œ± ‚Üí S(*))`. -/
@[simps]
noncomputable def eval_equiv (S : ¬´expr ·µí·µñ¬ª (Type u) ‚•§ Type u) (hs : is_sheaf types_grothendieck_topology S)
  (Œ± : Type u) : S.obj (op Œ±) ‚âÉ (Œ± ‚Üí S.obj (op PUnit)) :=
  { toFun := eval S Œ±, invFun := types_glue S hs Œ±, left_inv := types_glue_eval, right_inv := eval_types_glue }

theorem eval_map (S : ¬´expr ·µí·µñ¬ª (Type u) ‚•§ Type u) Œ± Œ≤ (f : Œ≤ ‚ü∂ Œ±) s x : eval S Œ≤ (S.map f.op s) x = eval S Œ± s (f x) :=
  by 
    simpRw [eval, ‚Üêfunctor_to_types.map_comp_apply, ‚Üêop_comp]
    rfl

/-- Given a sheaf `S`, construct an isomorphism `S ‚âÖ [-, S(*)]`. -/
@[simps]
noncomputable def equiv_yoneda (S : ¬´expr ·µí·µñ¬ª (Type u) ‚•§ Type u) (hs : is_sheaf types_grothendieck_topology S) :
  S ‚âÖ yoneda.obj (S.obj (op PUnit)) :=
  (nat_iso.of_components fun Œ± => Equiv.toIso$ eval_equiv S hs$ unop Œ±)$
    fun Œ± Œ≤ f => funext$ fun s => funext$ fun x => eval_map S (unop Œ±) (unop Œ≤) f.unop _ _

/-- Given a sheaf `S`, construct an isomorphism `S ‚âÖ [-, S(*)]`. -/
@[simps]
noncomputable def equiv_yoneda' (S : SheafOfTypes types_grothendieck_topology) : S ‚âÖ yoneda'.obj (S.1.obj (op PUnit)) :=
  { Hom := (equiv_yoneda S.1 S.2).Hom, inv := (equiv_yoneda S.1 S.2).inv,
    hom_inv_id' := (equiv_yoneda S.1 S.2).hom_inv_id, inv_hom_id' := (equiv_yoneda S.1 S.2).inv_hom_id }

-- error in CategoryTheory.Sites.Types: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
theorem eval_app
(S‚ÇÅ S‚ÇÇ : SheafOfTypes.{u} types_grothendieck_topology)
(f : ¬´expr ‚ü∂ ¬ª(S‚ÇÅ, S‚ÇÇ))
(Œ± : Type u)
(s : S‚ÇÅ.1.obj (op Œ±))
(x : Œ±) : ¬´expr = ¬ª(eval S‚ÇÇ.1 Œ± (f.app (op Œ±) s) x, f.app (op punit) (eval S‚ÇÅ.1 Œ± s x)) :=
(congr_fun (f.2 ¬´expr‚Üæ ¬ª(Œª _ : punit, x).op) s).symm

/-- `yoneda'` induces an equivalence of category between `Type u` and
`Sheaf types_grothendieck_topology`. -/
@[simps]
noncomputable def type_equiv : Type u ‚âå SheafOfTypes types_grothendieck_topology :=
  equivalence.mk yoneda' (induced_functor _ ‚ãô (evaluation _ _).obj (op PUnit))
    (nat_iso.of_components
      (fun Œ± =>
        { Hom := fun x _ => x, inv := fun f => f PUnit.unit, hom_inv_id' := funext$ fun x => rfl,
          inv_hom_id' := funext$ fun f => funext$ fun y => PUnit.casesOn y rfl })
      fun Œ± Œ≤ f => rfl)
    (iso.symm$
      nat_iso.of_components (fun S => equiv_yoneda' S)
        fun S‚ÇÅ S‚ÇÇ f =>
          nat_trans.ext _ _$ funext$ fun Œ± => funext$ fun s => funext$ fun x => eval_app S‚ÇÅ S‚ÇÇ f (unop Œ±) s x)

theorem subcanonical_types_grothendieck_topology : sheaf.subcanonical types_grothendieck_topology.{u} :=
  sheaf.subcanonical.of_yoneda_is_sheaf _ fun X => is_sheaf_yoneda'

theorem types_grothendieck_topology_eq_canonical :
  types_grothendieck_topology.{u} = sheaf.canonical_topology (Type u) :=
  le_antisymm‚Çì subcanonical_types_grothendieck_topology$
    Inf_le
      ‚ü®yoneda.obj (Ulift Bool), ‚ü®_, rfl‚ü©,
        grothendieck_topology.ext$
          funext$
            fun Œ± =>
              Set.ext$
                fun S =>
                  ‚ü®fun hs x =>
                      Classical.by_contradiction$
                        fun hsx =>
                          have  :
                            (fun _ => Ulift.up tt : (yoneda.obj (Ulift Bool)).obj (op PUnit)) = fun _ => Ulift.up ff :=
                            (hs PUnit fun _ => x).IsSeparatedFor.ext$
                              fun Œ≤ f hf => funext$ fun y => hsx.elim$ S.2 hf$ fun _ => y 
                          Bool.noConfusion$ Ulift.up.inj$ (congr_fun‚Çì this PUnit.unit : _),
                    fun hs Œ≤ f => is_sheaf_yoneda' _$ fun y => hs _‚ü©‚ü©

end CategoryTheory

