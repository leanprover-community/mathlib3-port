import Mathbin.CategoryTheory.Subobject.FactorThru 
import Mathbin.CategoryTheory.Subobject.WellPowered

/-!
# The lattice of subobjects

We provide the `semilattice_inf` with `order_top (subobject X)` instance when `[has_pullback C]`,
and the `semilattice_sup (subobject X)` instance when `[has_images C] [has_binary_coproducts C]`.
-/


universe v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

noncomputable theory

open CategoryTheory CategoryTheory.Category CategoryTheory.Limits

variable{C : Type u‚ÇÅ}[category.{v‚ÇÅ} C]{X Y Z : C}

variable{D : Type u‚ÇÇ}[category.{v‚ÇÇ} D]

namespace CategoryTheory

namespace MonoOver

section HasTop

instance  {X : C} : HasTop (mono_over X) :=
  { top := mk' (ùüô _) }

instance  {X : C} : Inhabited (mono_over X) :=
  ‚ü®‚ä§‚ü©

/-- The morphism to the top object in `mono_over X`. -/
def le_top (f : mono_over X) : f ‚ü∂ ‚ä§ :=
  hom_mk f.arrow (comp_id _)

@[simp]
theorem top_left (X : C) : ((‚ä§ : mono_over X) : C) = X :=
  rfl

@[simp]
theorem top_arrow (X : C) : (‚ä§ : mono_over X).arrow = ùüô X :=
  rfl

/-- `map f` sends `‚ä§ : mono_over X` to `‚ü®X, f‚ü© : mono_over Y`. -/
def map_top (f : X ‚ü∂ Y) [mono f] : (map f).obj ‚ä§ ‚âÖ mk' f :=
  iso_of_both_ways (hom_mk (ùüô _) rfl)
    (hom_mk (ùüô _)
      (by 
        simp [id_comp f]))

section 

variable[has_pullbacks C]

/-- The pullback of the top object in `mono_over Y`
is (isomorphic to) the top object in `mono_over X`. -/
def pullback_top (f : X ‚ü∂ Y) : (pullback f).obj ‚ä§ ‚âÖ ‚ä§ :=
  iso_of_both_ways (le_top _)
    (hom_mk
      (pullback.lift f (ùüô _)
        (by 
          tidy))
      (pullback.lift_snd _ _ _))

/-- There is a morphism from `‚ä§ : mono_over A` to the pullback of a monomorphism along itself;
as the category is thin this is an isomorphism. -/
def top_le_pullback_self {A B : C} (f : A ‚ü∂ B) [mono f] : (‚ä§ : mono_over A) ‚ü∂ (pullback f).obj (mk' f) :=
  hom_mk _ (pullback.lift_snd _ _ rfl)

/-- The pullback of a monomorphism along itself is isomorphic to the top object. -/
def pullback_self {A B : C} (f : A ‚ü∂ B) [mono f] : (pullback f).obj (mk' f) ‚âÖ ‚ä§ :=
  iso_of_both_ways (le_top _) (top_le_pullback_self _)

end 

end HasTop

section HasBot

variable[has_initial C][initial_mono_class C]

instance  {X : C} : HasBot (mono_over X) :=
  { bot := mk' (initial.to X) }

@[simp]
theorem bot_left (X : C) : ((‚ä• : mono_over X) : C) = ‚ä•_ C :=
  rfl

@[simp]
theorem bot_arrow {X : C} : (‚ä• : mono_over X).arrow = initial.to X :=
  rfl

/-- The (unique) morphism from `‚ä• : mono_over X` to any other `f : mono_over X`. -/
def bot_le {X : C} (f : mono_over X) : ‚ä• ‚ü∂ f :=
  hom_mk (initial.to _)
    (by 
      simp )

/-- `map f` sends `‚ä• : mono_over X` to `‚ä• : mono_over Y`. -/
def map_bot (f : X ‚ü∂ Y) [mono f] : (map f).obj ‚ä• ‚âÖ ‚ä• :=
  iso_of_both_ways
    (hom_mk (initial.to _)
      (by 
        simp ))
    (hom_mk (ùüô _)
      (by 
        simp ))

end HasBot

section ZeroOrderBot

variable[has_zero_object C]

open_locale ZeroObject

/-- The object underlying `‚ä• : subobject B` is (up to isomorphism) the zero object. -/
def bot_coe_iso_zero {B : C} : ((‚ä• : mono_over B) : C) ‚âÖ 0 :=
  initial_is_initial.uniqueUpToIso has_zero_object.zero_is_initial

@[simp]
theorem bot_arrow_eq_zero [has_zero_morphisms C] {B : C} : (‚ä• : mono_over B).arrow = 0 :=
  zero_of_source_iso_zero _ bot_coe_iso_zero

end ZeroOrderBot

section Inf

variable[has_pullbacks C]

/--
When `[has_pullbacks C]`, `mono_over A` has "intersections", functorial in both arguments.

As `mono_over A` is only a preorder, this doesn't satisfy the axioms of `semilattice_inf`,
but we reuse all the names from `semilattice_inf` because they will be used to construct
`semilattice_inf (subobject A)` shortly.
-/
@[simps]
def inf {A : C} : mono_over A ‚•§ mono_over A ‚•§ mono_over A :=
  { obj := fun f => pullback f.arrow ‚ãô map f.arrow,
    map :=
      fun f‚ÇÅ f‚ÇÇ k =>
        { app :=
            fun g =>
              by 
                apply hom_mk _ _ 
                apply pullback.lift pullback.fst (pullback.snd ‚â´ k.left) _ 
                rw [pullback.condition, assoc, w k]
                dsimp 
                rw [pullback.lift_snd_assoc, assoc, w k] } }

/-- A morphism from the "infimum" of two objects in `mono_over A` to the first object. -/
def inf_le_left {A : C} (f g : mono_over A) : (inf.obj f).obj g ‚ü∂ f :=
  hom_mk _ rfl

/-- A morphism from the "infimum" of two objects in `mono_over A` to the second object. -/
def inf_le_right {A : C} (f g : mono_over A) : (inf.obj f).obj g ‚ü∂ g :=
  hom_mk _ pullback.condition

/-- A morphism version of the `le_inf` axiom. -/
def le_inf {A : C} (f g h : mono_over A) : (h ‚ü∂ f) ‚Üí (h ‚ü∂ g) ‚Üí (h ‚ü∂ (inf.obj f).obj g) :=
  by 
    intro k‚ÇÅ k‚ÇÇ 
    refine' hom_mk (pullback.lift k‚ÇÇ.left k‚ÇÅ.left _) _ 
    rw [w k‚ÇÅ, w k‚ÇÇ]
    erw [pullback.lift_snd_assoc, w k‚ÇÅ]

end Inf

section Sup

variable[has_images C][has_binary_coproducts C]

/-- When `[has_images C] [has_binary_coproducts C]`, `mono_over A` has a `sup` construction,
which is functorial in both arguments,
and which on `subobject A` will induce a `semilattice_sup`. -/
def sup {A : C} : mono_over A ‚•§ mono_over A ‚•§ mono_over A :=
  curry_obj ((forget A).Prod (forget A) ‚ãô uncurry.obj over.coprod ‚ãô image)

/-- A morphism version of `le_sup_left`. -/
def le_sup_left {A : C} (f g : mono_over A) : f ‚ü∂ (sup.obj f).obj g :=
  by 
    refine' hom_mk (coprod.inl ‚â´ factor_thru_image _) _ 
    erw [category.assoc, image.fac, coprod.inl_desc]
    rfl

/-- A morphism version of `le_sup_right`. -/
def le_sup_right {A : C} (f g : mono_over A) : g ‚ü∂ (sup.obj f).obj g :=
  by 
    refine' hom_mk (coprod.inr ‚â´ factor_thru_image _) _ 
    erw [category.assoc, image.fac, coprod.inr_desc]
    rfl

/-- A morphism version of `sup_le`. -/
def sup_le {A : C} (f g h : mono_over A) : (f ‚ü∂ h) ‚Üí (g ‚ü∂ h) ‚Üí ((sup.obj f).obj g ‚ü∂ h) :=
  by 
    intro k‚ÇÅ k‚ÇÇ 
    refine' hom_mk _ _ 
    apply image.lift ‚ü®_, h.arrow, coprod.desc k‚ÇÅ.left k‚ÇÇ.left, _‚ü©
    ¬∑
      dsimp 
      ext1
      ¬∑
        simp [w k‚ÇÅ]
      ¬∑
        simp [w k‚ÇÇ]
    ¬∑
      apply image.lift_fac

end Sup

end MonoOver

namespace Subobject

section OrderTop

instance OrderTop {X : C} : OrderTop (subobject X) :=
  { top := Quotient‚Çì.mk' ‚ä§,
    le_top :=
      by 
        refine' Quotient‚Çì.ind' fun f => _ 
        exact ‚ü®mono_over.le_top f‚ü© }

instance  {X : C} : Inhabited (subobject X) :=
  ‚ü®‚ä§‚ü©

theorem top_eq_id (B : C) : (‚ä§ : subobject B) = subobject.mk (ùüô B) :=
  rfl

theorem underlying_iso_top_hom {B : C} : (underlying_iso (ùüô B)).Hom = (‚ä§ : subobject B).arrow :=
  by 
    convert underlying_iso_hom_comp_eq_mk (ùüô B)
    simp only [comp_id]

instance top_arrow_is_iso {B : C} : is_iso (‚ä§ : subobject B).arrow :=
  by 
    rw [‚Üêunderlying_iso_top_hom]
    infer_instance

@[simp, reassoc]
theorem underlying_iso_inv_top_arrow {B : C} : (underlying_iso _).inv ‚â´ (‚ä§ : subobject B).arrow = ùüô B :=
  underlying_iso_arrow _

@[simp]
theorem map_top (f : X ‚ü∂ Y) [mono f] : (map f).obj ‚ä§ = subobject.mk f :=
  Quotient‚Çì.sound' ‚ü®mono_over.map_top f‚ü©

theorem top_factors {A B : C} (f : A ‚ü∂ B) : (‚ä§ : subobject B).Factors f :=
  ‚ü®f, comp_id _‚ü©

theorem is_iso_iff_mk_eq_top {X Y : C} (f : X ‚ü∂ Y) [mono f] : is_iso f ‚Üî mk f = ‚ä§ :=
  ‚ü®fun _ =>
      by 
        exact mk_eq_mk_of_comm _ _ (as_iso f) (category.comp_id _),
    fun h =>
      by 
        rw [‚Üêof_mk_le_mk_comp h.le, category.comp_id]
        exact is_iso.of_iso (iso_of_mk_eq_mk _ _ h)‚ü©

theorem is_iso_arrow_iff_eq_top {Y : C} (P : subobject Y) : is_iso P.arrow ‚Üî P = ‚ä§ :=
  by 
    rw [is_iso_iff_mk_eq_top, mk_arrow]

instance is_iso_top_arrow {Y : C} : is_iso (‚ä§ : subobject Y).arrow :=
  by 
    rw [is_iso_arrow_iff_eq_top]

theorem mk_eq_top_of_is_iso {X Y : C} (f : X ‚ü∂ Y) [is_iso f] : mk f = ‚ä§ :=
  (is_iso_iff_mk_eq_top f).mp inferInstance

theorem eq_top_of_is_iso_arrow {Y : C} (P : subobject Y) [is_iso P.arrow] : P = ‚ä§ :=
  (is_iso_arrow_iff_eq_top P).mp inferInstance

section 

variable[has_pullbacks C]

theorem pullback_top (f : X ‚ü∂ Y) : (pullback f).obj ‚ä§ = ‚ä§ :=
  Quotient‚Çì.sound' ‚ü®mono_over.pullback_top f‚ü©

theorem pullback_self {A B : C} (f : A ‚ü∂ B) [mono f] : (pullback f).obj (mk f) = ‚ä§ :=
  Quotient‚Çì.sound' ‚ü®mono_over.pullback_self f‚ü©

end 

end OrderTop

section OrderBot

variable[has_initial C][initial_mono_class C]

instance OrderBot {X : C} : OrderBot (subobject X) :=
  { bot := Quotient‚Çì.mk' ‚ä•,
    bot_le :=
      by 
        refine' Quotient‚Çì.ind' fun f => _ 
        exact ‚ü®mono_over.bot_le f‚ü© }

theorem bot_eq_initial_to {B : C} : (‚ä• : subobject B) = subobject.mk (initial.to B) :=
  rfl

/-- The object underlying `‚ä• : subobject B` is (up to isomorphism) the initial object. -/
def bot_coe_iso_initial {B : C} : ((‚ä• : subobject B) : C) ‚âÖ ‚ä•_ C :=
  underlying_iso _

theorem map_bot (f : X ‚ü∂ Y) [mono f] : (map f).obj ‚ä• = ‚ä• :=
  Quotient‚Çì.sound' ‚ü®mono_over.map_bot f‚ü©

end OrderBot

section ZeroOrderBot

variable[has_zero_object C]

open_locale ZeroObject

/-- The object underlying `‚ä• : subobject B` is (up to isomorphism) the zero object. -/
def bot_coe_iso_zero {B : C} : ((‚ä• : subobject B) : C) ‚âÖ 0 :=
  bot_coe_iso_initial ‚â™‚â´ initial_is_initial.uniqueUpToIso has_zero_object.zero_is_initial

variable[has_zero_morphisms C]

theorem bot_eq_zero {B : C} : (‚ä• : subobject B) = subobject.mk (0 : 0 ‚ü∂ B) :=
  mk_eq_mk_of_comm _ _ (initial_is_initial.uniqueUpToIso has_zero_object.zero_is_initial)
    (by 
      simp )

@[simp]
theorem bot_arrow {B : C} : (‚ä• : subobject B).arrow = 0 :=
  zero_of_source_iso_zero _ bot_coe_iso_zero

theorem bot_factors_iff_zero {A B : C} (f : A ‚ü∂ B) : (‚ä• : subobject B).Factors f ‚Üî f = 0 :=
  ‚ü®by 
      rintro ‚ü®h, rfl‚ü©
      simp ,
    by 
      rintro rfl 
      exact
        ‚ü®0,
          by 
            simp ‚ü©‚ü©

end ZeroOrderBot

section Functor

variable(C)

/-- Sending `X : C` to `subobject X` is a contravariant functor `C·µí·µñ ‚•§ Type`. -/
@[simps]
def Functor [has_pullbacks C] : ¬´expr ·µí·µñ¬ª C ‚•§ Type max u‚ÇÅ v‚ÇÅ :=
  { obj := fun X => subobject X.unop, map := fun X Y f => (pullback f.unop).obj, map_id' := fun X => funext pullback_id,
    map_comp' := fun X Y Z f g => funext (pullback_comp _ _) }

end Functor

section SemilatticeInfTop

variable[has_pullbacks C]

/-- The functorial infimum on `mono_over A` descends to an infimum on `subobject A`. -/
def inf {A : C} : subobject A ‚•§ subobject A ‚•§ subobject A :=
  thin_skeleton.map‚ÇÇ mono_over.inf

theorem inf_le_left {A : C} (f g : subobject A) : (inf.obj f).obj g ‚â§ f :=
  Quotient‚Çì.induction_on‚ÇÇ' f g fun a b => ‚ü®mono_over.inf_le_left _ _‚ü©

theorem inf_le_right {A : C} (f g : subobject A) : (inf.obj f).obj g ‚â§ g :=
  Quotient‚Çì.induction_on‚ÇÇ' f g fun a b => ‚ü®mono_over.inf_le_right _ _‚ü©

theorem le_inf {A : C} (h f g : subobject A) : h ‚â§ f ‚Üí h ‚â§ g ‚Üí h ‚â§ (inf.obj f).obj g :=
  Quotient‚Çì.induction_on‚ÇÉ' h f g
    (by 
      rintro f g h ‚ü®k‚ü© ‚ü®l‚ü©
      exact ‚ü®mono_over.le_inf _ _ _ k l‚ü©)

instance  {B : C} : SemilatticeInf (subobject B) :=
  { subobject.partial_order _ with inf := fun m n => (inf.obj m).obj n, inf_le_left := inf_le_left,
    inf_le_right := inf_le_right, le_inf := le_inf }

theorem factors_left_of_inf_factors {A B : C} {X Y : subobject B} {f : A ‚ü∂ B} (h : (X‚äìY).Factors f) : X.factors f :=
  factors_of_le _ (inf_le_left _ _) h

theorem factors_right_of_inf_factors {A B : C} {X Y : subobject B} {f : A ‚ü∂ B} (h : (X‚äìY).Factors f) : Y.factors f :=
  factors_of_le _ (inf_le_right _ _) h

@[simp]
theorem inf_factors {A B : C} {X Y : subobject B} (f : A ‚ü∂ B) : (X‚äìY).Factors f ‚Üî X.factors f ‚àß Y.factors f :=
  ‚ü®fun h => ‚ü®factors_left_of_inf_factors h, factors_right_of_inf_factors h‚ü©,
    by 
      revert X Y 
      refine' Quotient‚Çì.ind‚ÇÇ' _ 
      rintro X Y ‚ü®‚ü®g‚ÇÅ, rfl‚ü©, ‚ü®g‚ÇÇ, hg‚ÇÇ‚ü©‚ü©
      exact ‚ü®_, pullback.lift_snd_assoc _ _ hg‚ÇÇ _‚ü©‚ü©

theorem inf_arrow_factors_left {B : C} (X Y : subobject B) : X.factors (X‚äìY).arrow :=
  (factors_iff _ _).mpr
    ‚ü®of_le (X‚äìY) X (inf_le_left X Y),
      by 
        simp ‚ü©

theorem inf_arrow_factors_right {B : C} (X Y : subobject B) : Y.factors (X‚äìY).arrow :=
  (factors_iff _ _).mpr
    ‚ü®of_le (X‚äìY) Y (inf_le_right X Y),
      by 
        simp ‚ü©

@[simp]
theorem finset_inf_factors {I : Type _} {A B : C} {s : Finset I} {P : I ‚Üí subobject B} (f : A ‚ü∂ B) :
  (s.inf P).Factors f ‚Üî ‚àÄ i (_ : i ‚àà s), (P i).Factors f :=
  by 
    classical 
    apply Finset.induction_on s
    ¬∑
      simp [top_factors]
    ¬∑
      intro i s nm ih 
      simp [ih]

theorem finset_inf_arrow_factors {I : Type _} {B : C} (s : Finset I) (P : I ‚Üí subobject B) (i : I) (m : i ‚àà s) :
  (P i).Factors (s.inf P).arrow :=
  by 
    revert i m 
    classical 
    apply Finset.induction_on s
    ¬∑
      rintro _ ‚ü®‚ü©
    ¬∑
      intro i s nm ih j m 
      rw [Finset.inf_insert]
      simp only [Finset.mem_insert] at m 
      rcases m with (rfl | m)
      ¬∑
        rw [‚Üêfactor_thru_arrow _ _ (inf_arrow_factors_left _ _)]
        exact factors_comp_arrow _
      ¬∑
        rw [‚Üêfactor_thru_arrow _ _ (inf_arrow_factors_right _ _)]
        apply factors_of_factors_right 
        exact ih _ m

theorem inf_eq_map_pullback' {A : C} (f‚ÇÅ : mono_over A) (f‚ÇÇ : subobject A) :
  (subobject.inf.obj (Quotient‚Çì.mk' f‚ÇÅ)).obj f‚ÇÇ = (subobject.map f‚ÇÅ.arrow).obj ((subobject.pullback f‚ÇÅ.arrow).obj f‚ÇÇ) :=
  by 
    apply Quotient‚Çì.induction_on' f‚ÇÇ 
    intro f‚ÇÇ 
    rfl

theorem inf_eq_map_pullback {A : C} (f‚ÇÅ : mono_over A) (f‚ÇÇ : subobject A) :
  (Quotient‚Çì.mk' f‚ÇÅ‚äìf‚ÇÇ : subobject A) = (map f‚ÇÅ.arrow).obj ((pullback f‚ÇÅ.arrow).obj f‚ÇÇ) :=
  inf_eq_map_pullback' f‚ÇÅ f‚ÇÇ

theorem prod_eq_inf {A : C} {f‚ÇÅ f‚ÇÇ : subobject A} [has_binary_product f‚ÇÅ f‚ÇÇ] : (f‚ÇÅ ‚®Ø f‚ÇÇ) = f‚ÇÅ‚äìf‚ÇÇ :=
  le_antisymm‚Çì (_root_.le_inf limits.prod.fst.le limits.prod.snd.le)
    (prod.lift _root_.inf_le_left.Hom _root_.inf_le_right.Hom).le

theorem inf_def {B : C} (m m' : subobject B) : m‚äìm' = (inf.obj m).obj m' :=
  rfl

/-- `‚äì` commutes with pullback. -/
theorem inf_pullback {X Y : C} (g : X ‚ü∂ Y) f‚ÇÅ f‚ÇÇ : (pullback g).obj (f‚ÇÅ‚äìf‚ÇÇ) = (pullback g).obj f‚ÇÅ‚äì(pullback g).obj f‚ÇÇ :=
  by 
    revert f‚ÇÅ 
    apply Quotient‚Çì.ind' 
    intro f‚ÇÅ 
    erw [inf_def, inf_def, inf_eq_map_pullback', inf_eq_map_pullback', ‚Üêpullback_comp,
      ‚Üêmap_pullback pullback.condition (pullback_is_pullback f‚ÇÅ.arrow g), ‚Üêpullback_comp, pullback.condition]
    rfl

/-- `‚äì` commutes with map. -/
theorem inf_map {X Y : C} (g : Y ‚ü∂ X) [mono g] f‚ÇÅ f‚ÇÇ : (map g).obj (f‚ÇÅ‚äìf‚ÇÇ) = (map g).obj f‚ÇÅ‚äì(map g).obj f‚ÇÇ :=
  by 
    revert f‚ÇÅ 
    apply Quotient‚Çì.ind' 
    intro f‚ÇÅ 
    erw [inf_def, inf_def, inf_eq_map_pullback', inf_eq_map_pullback', ‚Üêmap_comp]
    dsimp 
    rw [pullback_comp, pullback_map_self]

end SemilatticeInfTop

section SemilatticeSup

variable[has_images C][has_binary_coproducts C]

/-- The functorial supremum on `mono_over A` descends to an supremum on `subobject A`. -/
def sup {A : C} : subobject A ‚•§ subobject A ‚•§ subobject A :=
  thin_skeleton.map‚ÇÇ mono_over.sup

instance  {B : C} : SemilatticeSup (subobject B) :=
  { subobject.partial_order B with sup := fun m n => (sup.obj m).obj n,
    le_sup_left := fun m n => Quotient‚Çì.induction_on‚ÇÇ' m n fun a b => ‚ü®mono_over.le_sup_left _ _‚ü©,
    le_sup_right := fun m n => Quotient‚Çì.induction_on‚ÇÇ' m n fun a b => ‚ü®mono_over.le_sup_right _ _‚ü©,
    sup_le := fun m n k => Quotient‚Çì.induction_on‚ÇÉ' m n k fun a b c ‚ü®i‚ü© ‚ü®j‚ü© => ‚ü®mono_over.sup_le _ _ _ i j‚ü© }

theorem sup_factors_of_factors_left {A B : C} {X Y : subobject B} {f : A ‚ü∂ B} (P : X.factors f) : (X‚äîY).Factors f :=
  factors_of_le f le_sup_left P

theorem sup_factors_of_factors_right {A B : C} {X Y : subobject B} {f : A ‚ü∂ B} (P : Y.factors f) : (X‚äîY).Factors f :=
  factors_of_le f le_sup_right P

variable[has_initial C][initial_mono_class C]

theorem finset_sup_factors {I : Type _} {A B : C} {s : Finset I} {P : I ‚Üí subobject B} {f : A ‚ü∂ B}
  (h : ‚àÉ (i : _)(_ : i ‚àà s), (P i).Factors f) : (s.sup P).Factors f :=
  by 
    classical 
    revert h 
    apply Finset.induction_on s
    ¬∑
      rintro ‚ü®_, ‚ü®‚ü®‚ü©, _‚ü©‚ü©
    ¬∑
      rintro i s nm ih ‚ü®j, ‚ü®m, h‚ü©‚ü©
      simp only [Finset.sup_insert]
      simp  at m 
      rcases m with (rfl | m)
      ¬∑
        exact sup_factors_of_factors_left h
      ¬∑
        exact sup_factors_of_factors_right (ih ‚ü®j, ‚ü®m, h‚ü©‚ü©)

end SemilatticeSup

section Lattice

instance  [has_initial C] [initial_mono_class C] {B : C} : BoundedOrder (subobject B) :=
  { subobject.order_top, subobject.order_bot with  }

variable[has_pullbacks C][has_images C][has_binary_coproducts C]

instance  {B : C} : Lattice (subobject B) :=
  { subobject.semilattice_inf, subobject.semilattice_sup with  }

end Lattice

section Inf

variable[well_powered C]

-- error in CategoryTheory.Subobject.Lattice: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
/--
The "wide cospan" diagram, with a small indexing type, constructed from a set of subobjects.
(This is just the diagram of all the subobjects pasted together, but using `well_powered C`
to make the diagram small.)
-/ def wide_cospan {A : C} (s : set (subobject A)) : ¬´expr ‚•§ ¬ª(wide_pullback_shape ¬´expr '' ¬ª(equiv_shrink _, s), C) :=
wide_pullback_shape.wide_cospan A (Œª
 j : ¬´expr '' ¬ª(equiv_shrink _, s), ((equiv_shrink (subobject A)).symm j : C)) (Œª
 j, ((equiv_shrink (subobject A)).symm j).arrow)

@[simp]
theorem wide_cospan_map_term {A : C} (s : Set (subobject A)) j :
  (wide_cospan s).map (wide_pullback_shape.hom.term j) = ((equivShrink (subobject A)).symm j).arrow :=
  rfl

/-- Auxiliary construction of a cone for `le_Inf`. -/
def le_Inf_cone {A : C} (s : Set (subobject A)) (f : subobject A) (k : ‚àÄ g (_ : g ‚àà s), f ‚â§ g) : cone (wide_cospan s) :=
  wide_pullback_shape.mk_cone f.arrow
    (fun j =>
      underlying.map
        (hom_of_le
          (k _
            (by 
              rcases j with ‚ü®-, ‚ü®g, ‚ü®m, rfl‚ü©‚ü©‚ü©
              simpa using m))))
    (by 
      tidy)

@[simp]
theorem le_Inf_cone_œÄ_app_none {A : C} (s : Set (subobject A)) (f : subobject A) (k : ‚àÄ g (_ : g ‚àà s), f ‚â§ g) :
  (le_Inf_cone s f k).œÄ.app none = f.arrow :=
  rfl

variable[has_wide_pullbacks C]

/--
The limit of `wide_cospan s`. (This will be the supremum of the set of subobjects.)
-/
def wide_pullback {A : C} (s : Set (subobject A)) : C :=
  limits.limit (wide_cospan s)

/--
The inclusion map from `wide_pullback s` to `A`
-/
def wide_pullback_Œπ {A : C} (s : Set (subobject A)) : wide_pullback s ‚ü∂ A :=
  limits.limit.œÄ (wide_cospan s) none

instance wide_pullback_Œπ_mono {A : C} (s : Set (subobject A)) : mono (wide_pullback_Œπ s) :=
  ‚ü®fun W u v h =>
      limit.hom_ext
        fun j =>
          by 
            cases j
            ¬∑
              exact h
            ¬∑
              apply (cancel_mono ((equivShrink (subobject A)).symm j).arrow).1
              rw [assoc, assoc]
              erw [limit.w (wide_cospan s) (wide_pullback_shape.hom.term j)]
              exact h‚ü©

/--
When `[well_powered C]` and `[has_wide_pullbacks C]`, `subobject A` has arbitrary infimums.
-/
def Inf {A : C} (s : Set (subobject A)) : subobject A :=
  subobject.mk (wide_pullback_Œπ s)

-- error in CategoryTheory.Subobject.Lattice: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
theorem Inf_le {A : C} (s : set (subobject A)) (f ¬´expr ‚àà ¬ª s) : ¬´expr ‚â§ ¬ª(Inf s, f) :=
begin
  fapply [expr le_of_comm],
  { refine [expr ¬´expr ‚â´ ¬ª((underlying_iso _).hom, ¬´expr ‚â´ ¬ª(limits.limit.œÄ (wide_cospan s) (some ‚ü®equiv_shrink _ f, set.mem_image_of_mem (equiv_shrink (subobject A)) H‚ü©), _))],
    apply [expr eq_to_hom],
    apply [expr congr_arg (Œª X : subobject A, (X : C))],
    exact [expr equiv.symm_apply_apply _ _] },
  { dsimp [] ["[", expr Inf, "]"] [] [],
    simp [] [] ["only"] ["[", expr category.comp_id, ",", expr category.assoc, ",", "<-", expr underlying_iso_hom_comp_eq_mk, ",", expr subobject.arrow_congr, ",", expr congr_arg_mpr_hom_left, ",", expr iso.cancel_iso_hom_left, "]"] [] [],
    convert [] [expr limit.w (wide_cospan s) (wide_pullback_shape.hom.term _)] [] }
end

theorem le_Inf {A : C} (s : Set (subobject A)) (f : subobject A) (k : ‚àÄ g (_ : g ‚àà s), f ‚â§ g) : f ‚â§ Inf s :=
  by 
    fapply le_of_comm
    ¬∑
      exact limits.limit.lift _ (le_Inf_cone s f k) ‚â´ (underlying_iso _).inv
    ¬∑
      dsimp [Inf, wide_pullback_Œπ]
      simp 

instance  {B : C} : CompleteSemilatticeInf (subobject B) :=
  { subobject.partial_order B with inf := Inf, Inf_le := Inf_le, le_Inf := le_Inf }

end Inf

section Sup

variable[well_powered C][has_coproducts C]

-- error in CategoryTheory.Subobject.Lattice: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
/--
The univesal morphism out of the coproduct of a set of subobjects,
after using `[well_powered C]` to reindex by a small type.
-/ def small_coproduct_desc {A : C} (s : set (subobject A)) : ¬´expr ‚ü∂ ¬ª(_, A) :=
limits.sigma.desc (Œª j : ¬´expr '' ¬ª(equiv_shrink _, s), ((equiv_shrink (subobject A)).symm j).arrow)

variable[has_images C]

/-- When `[well_powered C] [has_images C] [has_coproducts C]`,
`subobject A` has arbitrary supremums. -/
def Sup {A : C} (s : Set (subobject A)) : subobject A :=
  subobject.mk (image.Œπ (small_coproduct_desc s))

-- error in CategoryTheory.Subobject.Lattice: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
theorem le_Sup {A : C} (s : set (subobject A)) (f ¬´expr ‚àà ¬ª s) : ¬´expr ‚â§ ¬ª(f, Sup s) :=
begin
  fapply [expr le_of_comm],
  { dsimp [] ["[", expr Sup, "]"] [] [],
    refine [expr ¬´expr ‚â´ ¬ª(_, ¬´expr ‚â´ ¬ª(factor_thru_image _, (underlying_iso _).inv))],
    refine [expr ¬´expr ‚â´ ¬ª(_, sigma.Œπ _ ‚ü®equiv_shrink _ f, by simpa [] [] [] ["[", expr set.mem_image, "]"] [] ["using", expr H]‚ü©)],
    exact [expr eq_to_hom (congr_arg (Œª X : subobject A, (X : C)) (equiv.symm_apply_apply _ _).symm)] },
  { dsimp [] ["[", expr Sup, ",", expr small_coproduct_desc, "]"] [] [],
    simp [] [] [] [] [] [],
    dsimp [] [] [] [],
    simp [] [] [] [] [] [] }
end

theorem symm_apply_mem_iff_mem_image {Œ± Œ≤ : Type _} (e : Œ± ‚âÉ Œ≤) (s : Set Œ±) (x : Œ≤) : e.symm x ‚àà s ‚Üî x ‚àà e '' s :=
  ‚ü®fun h =>
      ‚ü®e.symm x, h,
        by 
          simp ‚ü©,
    by 
      rintro ‚ü®a, m, rfl‚ü©
      simpa using m‚ü©

theorem Sup_le {A : C} (s : Set (subobject A)) (f : subobject A) (k : ‚àÄ g (_ : g ‚àà s), g ‚â§ f) : Sup s ‚â§ f :=
  by 
    fapply le_of_comm
    ¬∑
      dsimp [Sup]
      refine' (underlying_iso _).Hom ‚â´ image.lift ‚ü®_, f.arrow, _, _‚ü©
      ¬∑
        refine' sigma.desc _ 
        rintro ‚ü®g, m‚ü©
        refine' underlying.map (hom_of_le (k _ _))
        simpa [symm_apply_mem_iff_mem_image] using m
      ¬∑
        ext j 
        rcases j with ‚ü®j, m‚ü©
        dsimp [small_coproduct_desc]
        simp 
        dsimp 
        simp 
    ¬∑
      dsimp [Sup]
      simp 

instance  {B : C} : CompleteSemilatticeSup (subobject B) :=
  { subobject.partial_order B with sup := Sup, le_Sup := le_Sup, Sup_le := Sup_le }

end Sup

section CompleteLattice

variable[well_powered C][has_wide_pullbacks C][has_images C][has_coproducts C][initial_mono_class C]

instance  {B : C} : CompleteLattice (subobject B) :=
  { subobject.semilattice_inf, subobject.semilattice_sup, subobject.bounded_order, subobject.complete_semilattice_Inf,
    subobject.complete_semilattice_Sup with  }

end CompleteLattice

end Subobject

end CategoryTheory

