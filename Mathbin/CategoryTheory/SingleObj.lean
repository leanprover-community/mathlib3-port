/-
Copyright (c) 2019 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov

! This file was ported from Lean 3 source module category_theory.single_obj
! leanprover-community/mathlib commit 940d371319c6658e526349d2c3e1daeeabfae0fd
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.CategoryTheory.Endomorphism
import Mathbin.CategoryTheory.Category.CatCat
import Mathbin.Algebra.Category.MonCat.Basic

/-!
# Single-object category

Single object category with a given monoid of endomorphisms.
It is defined to facilitate transfering some definitions and lemmas (e.g., conjugacy etc.)
from category theory to monoids and groups.

## Main definitions

Given a type `Œ±` with a monoid structure, `single_obj Œ±` is `unit` type with `category` structure
such that `End (single_obj Œ±).star` is the monoid `Œ±`.  This can be extended to a functor `Mon ‚•§
Cat`.

If `Œ±` is a group, then `single_obj Œ±` is a groupoid.

An element `x : Œ±` can be reinterpreted as an element of `End (single_obj.star Œ±)` using
`single_obj.to_End`.

## Implementation notes

- `category_struct.comp` on `End (single_obj.star Œ±)` is `flip (*)`, not `(*)`. This way
  multiplication on `End` agrees with the multiplication on `Œ±`.

- By default, Lean puts instances into `category_theory` namespace instead of
  `category_theory.single_obj`, so we give all names explicitly.
-/


universe u v w

namespace CategoryTheory

/-- Type tag on `unit` used to define single-object categories and groupoids. -/
@[nolint unused_arguments has_nonempty_instance]
def SingleObj (Œ± : Type u) : Type :=
  Unit
#align category_theory.single_obj CategoryTheory.SingleObj

namespace SingleObj

variable (Œ± : Type u)

/-- One and `flip (*)` become `id` and `comp` for morphisms of the single object category. -/
instance categoryStruct [One Œ±] [Mul Œ±] : CategoryStruct (SingleObj Œ±)
    where
  Hom _ _ := Œ±
  comp _ _ _ x y := y * x
  id _ := 1
#align category_theory.single_obj.category_struct CategoryTheory.SingleObj.categoryStruct

/-- Monoid laws become category laws for the single object category. -/
instance category [Monoid Œ±] : Category (SingleObj Œ±)
    where
  comp_id' _ _ := one_mul
  id_comp' _ _ := mul_one
  assoc' _ _ _ _ x y z := (mul_assoc z y x).symm
#align category_theory.single_obj.category CategoryTheory.SingleObj.category

theorem id_as_one [Monoid Œ±] (x : SingleObj Œ±) : ùüô x = 1 :=
  rfl
#align category_theory.single_obj.id_as_one CategoryTheory.SingleObj.id_as_one

theorem comp_as_mul [Monoid Œ±] {x y z : SingleObj Œ±} (f : x ‚ü∂ y) (g : y ‚ü∂ z) : f ‚â´ g = g * f :=
  rfl
#align category_theory.single_obj.comp_as_mul CategoryTheory.SingleObj.comp_as_mul

/-- Groupoid structure on `single_obj Œ±`.

See <https://stacks.math.columbia.edu/tag/0019>.
-/
instance groupoid [Group Œ±] : Groupoid (SingleObj Œ±)
    where
  inv _ _ x := x‚Åª¬π
  inv_comp' _ _ := mul_right_inv
  comp_inv' _ _ := mul_left_inv
#align category_theory.single_obj.groupoid CategoryTheory.SingleObj.groupoid

theorem inv_as_inv [Group Œ±] {x y : SingleObj Œ±} (f : x ‚ü∂ y) : inv f = f‚Åª¬π :=
  by
  ext
  rw [comp_as_mul, inv_mul_self, id_as_one]
#align category_theory.single_obj.inv_as_inv CategoryTheory.SingleObj.inv_as_inv

/-- The single object in `single_obj Œ±`. -/
protected def star : SingleObj Œ± :=
  Unit.unit
#align category_theory.single_obj.star CategoryTheory.SingleObj.star

/-- The endomorphisms monoid of the only object in `single_obj Œ±` is equivalent to the original
     monoid Œ±. -/
def toEnd [Monoid Œ±] : Œ± ‚âÉ* EndCat (SingleObj.star Œ±) :=
  { Equiv.refl Œ± with map_mul' := fun x y => rfl }
#align category_theory.single_obj.to_End CategoryTheory.SingleObj.toEnd

theorem to_End_def [Monoid Œ±] (x : Œ±) : toEnd Œ± x = x :=
  rfl
#align category_theory.single_obj.to_End_def CategoryTheory.SingleObj.to_End_def

/-- There is a 1-1 correspondence between monoid homomorphisms `Œ± ‚Üí Œ≤` and functors between the
    corresponding single-object categories. It means that `single_obj` is a fully faithful
    functor.

See <https://stacks.math.columbia.edu/tag/001F> --
although we do not characterize when the functor is full or faithful.
-/
def mapHom (Œ± : Type u) (Œ≤ : Type v) [Monoid Œ±] [Monoid Œ≤] : (Œ± ‚Üí* Œ≤) ‚âÉ SingleObj Œ± ‚•§ SingleObj Œ≤
    where
  toFun f :=
    { obj := id
      map := fun _ _ => ‚áëf
      map_id' := fun _ => f.map_one
      map_comp' := fun _ _ _ x y => f.map_mul y x }
  invFun f :=
    { toFun := @Functor.map _ _ _ _ f (SingleObj.star Œ±) (SingleObj.star Œ±)
      map_one' := f.map_id _
      map_mul' := fun x y => f.map_comp y x }
  left_inv := fun ‚ü®f, h‚ÇÅ, h‚ÇÇ‚ü© => rfl
  right_inv f := by cases f <;> obviously
#align category_theory.single_obj.map_hom CategoryTheory.SingleObj.mapHom

theorem map_hom_id (Œ± : Type u) [Monoid Œ±] : mapHom Œ± Œ± (MonoidHom.id Œ±) = ùü≠ _ :=
  rfl
#align category_theory.single_obj.map_hom_id CategoryTheory.SingleObj.map_hom_id

theorem map_hom_comp {Œ± : Type u} {Œ≤ : Type v} [Monoid Œ±] [Monoid Œ≤] (f : Œ± ‚Üí* Œ≤) {Œ≥ : Type w}
    [Monoid Œ≥] (g : Œ≤ ‚Üí* Œ≥) : mapHom Œ± Œ≥ (g.comp f) = mapHom Œ± Œ≤ f ‚ãô mapHom Œ≤ Œ≥ g :=
  rfl
#align category_theory.single_obj.map_hom_comp CategoryTheory.SingleObj.map_hom_comp

/-- Given a function `f : C ‚Üí G` from a category to a group, we get a functor
    `C ‚•§ G` sending any morphism `x ‚ü∂ y` to `f y * (f x)‚Åª¬π`. -/
@[simps]
def differenceFunctor {C G} [Category C] [Group G] (f : C ‚Üí G) : C ‚•§ SingleObj G
    where
  obj _ := ()
  map x y _ := f y * (f x)‚Åª¬π
  map_id' := by
    intro
    rw [single_obj.id_as_one, mul_right_inv]
  map_comp' := by
    intros
    rw [single_obj.comp_as_mul, ‚Üê mul_assoc, mul_left_inj, mul_assoc, inv_mul_self, mul_one]
#align category_theory.single_obj.difference_functor CategoryTheory.SingleObj.differenceFunctor

end SingleObj

end CategoryTheory

open CategoryTheory

namespace MonoidHom

/-- Reinterpret a monoid homomorphism `f : Œ± ‚Üí Œ≤` as a functor `(single_obj Œ±) ‚•§ (single_obj Œ≤)`.
See also `category_theory.single_obj.map_hom` for an equivalence between these types. -/
@[reducible]
def toFunctor {Œ± : Type u} {Œ≤ : Type v} [Monoid Œ±] [Monoid Œ≤] (f : Œ± ‚Üí* Œ≤) :
    SingleObj Œ± ‚•§ SingleObj Œ≤ :=
  SingleObj.mapHom Œ± Œ≤ f
#align monoid_hom.to_functor MonoidHom.toFunctor

@[simp]
theorem id_to_functor (Œ± : Type u) [Monoid Œ±] : (id Œ±).toFunctor = ùü≠ _ :=
  rfl
#align monoid_hom.id_to_functor MonoidHom.id_to_functor

@[simp]
theorem comp_to_functor {Œ± : Type u} {Œ≤ : Type v} [Monoid Œ±] [Monoid Œ≤] (f : Œ± ‚Üí* Œ≤) {Œ≥ : Type w}
    [Monoid Œ≥] (g : Œ≤ ‚Üí* Œ≥) : (g.comp f).toFunctor = f.toFunctor ‚ãô g.toFunctor :=
  rfl
#align monoid_hom.comp_to_functor MonoidHom.comp_to_functor

end MonoidHom

namespace Units

variable (Œ± : Type u) [Monoid Œ±]

/-- The units in a monoid are (multiplicatively) equivalent to
the automorphisms of `star` when we think of the monoid as a single-object category. -/
def toAut : Œ±À£ ‚âÉ* AutCat (SingleObj.star Œ±) :=
  (Units.mapEquiv (SingleObj.toEnd Œ±)).trans <| AutCat.unitsEndEquivAut _
#align units.to_Aut Units.toAut

@[simp]
theorem to_Aut_hom (x : Œ±À£) : (toAut Œ± x).Hom = SingleObj.toEnd Œ± x :=
  rfl
#align units.to_Aut_hom Units.to_Aut_hom

@[simp]
theorem to_Aut_inv (x : Œ±À£) : (toAut Œ± x).inv = SingleObj.toEnd Œ± (x‚Åª¬π : Œ±À£) :=
  rfl
#align units.to_Aut_inv Units.to_Aut_inv

end Units

namespace MonCat

open CategoryTheory

/-- The fully faithful functor from `Mon` to `Cat`. -/
def toCat : MonCat ‚•§ Cat where
  obj x := CatCat.of (SingleObj x)
  map x y f := SingleObj.mapHom x y f
#align Mon.to_Cat MonCat.toCat

instance toCatFull : Full toCat
    where
  preimage x y := (SingleObj.mapHom x y).invFun
  witness' x y := by apply Equiv.right_inv
#align Mon.to_Cat_full MonCat.toCatFull

instance to_Cat_faithful : Faithful toCat where map_injective' x y := by apply Equiv.injective
#align Mon.to_Cat_faithful MonCat.to_Cat_faithful

end MonCat

