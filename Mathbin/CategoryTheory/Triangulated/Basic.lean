/-
Copyright (c) 2021 Luke Kershaw. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Luke Kershaw

! This file was ported from Lean 3 source module category_theory.triangulated.basic
! leanprover-community/mathlib commit 550b58538991c8977703fdeb7c9d51a5aa27df11
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Data.Int.Basic
import Mathbin.CategoryTheory.Shift

/-!
# Triangles

This file contains the definition of triangles in an additive category with an additive shift.
It also defines morphisms between these triangles.

TODO: generalise this to n-angles in n-angulated categories as in https://arxiv.org/abs/1006.4592
-/


noncomputable section

open CategoryTheory

open CategoryTheory.Limits

universe v v‚ÇÄ v‚ÇÅ v‚ÇÇ u u‚ÇÄ u‚ÇÅ u‚ÇÇ

namespace CategoryTheory.Pretriangulated

open CategoryTheory.Category

/-
We work in a category `C` equipped with a shift.
-/
variable (C : Type u) [Category.{v} C] [HasShift C ‚Ñ§]

/-- A triangle in `C` is a sextuple `(X,Y,Z,f,g,h)` where `X,Y,Z` are objects of `C`,
and `f : X ‚ü∂ Y`, `g : Y ‚ü∂ Z`, `h : Z ‚ü∂ X‚ü¶1‚üß` are morphisms in `C`.
See <https://stacks.math.columbia.edu/tag/0144>.
-/
structure Triangle where mk' ::
  obj‚ÇÅ : C
  obj‚ÇÇ : C
  obj‚ÇÉ : C
  mor‚ÇÅ : obj‚ÇÅ ‚ü∂ obj‚ÇÇ
  mor‚ÇÇ : obj‚ÇÇ ‚ü∂ obj‚ÇÉ
  mor‚ÇÉ : obj‚ÇÉ ‚ü∂ obj‚ÇÅ‚ü¶(1 : ‚Ñ§)‚üß
#align category_theory.pretriangulated.triangle CategoryTheory.Pretriangulated.Triangle

variable {C}

/-- A triangle `(X,Y,Z,f,g,h)` in `C` is defined by the morphisms `f : X ‚ü∂ Y`, `g : Y ‚ü∂ Z`
and `h : Z ‚ü∂ X‚ü¶1‚üß`.
-/
@[simps]
def Triangle.mk {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (h : Z ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß) :
    Triangle C where 
  obj‚ÇÅ := X
  obj‚ÇÇ := Y
  obj‚ÇÉ := Z
  mor‚ÇÅ := f
  mor‚ÇÇ := g
  mor‚ÇÉ := h
#align category_theory.pretriangulated.triangle.mk CategoryTheory.Pretriangulated.Triangle.mk

section

variable [HasZeroObject C] [HasZeroMorphisms C]

open ZeroObject

instance : Inhabited (Triangle C) :=
  ‚ü®‚ü®0, 0, 0, 0, 0, 0‚ü©‚ü©

/-- For each object in `C`, there is a triangle of the form `(X,X,0,ùüô X,0,0)`
-/
@[simps]
def contractibleTriangle (X : C) : Triangle C :=
  Triangle.mk (ùüô X) (0 : X ‚ü∂ 0) 0
#align
  category_theory.pretriangulated.contractible_triangle CategoryTheory.Pretriangulated.contractibleTriangle

end

/-- A morphism of triangles `(X,Y,Z,f,g,h) ‚ü∂ (X',Y',Z',f',g',h')` in `C` is a triple of morphisms
`a : X ‚ü∂ X'`, `b : Y ‚ü∂ Y'`, `c : Z ‚ü∂ Z'` such that
`a ‚â´ f' = f ‚â´ b`, `b ‚â´ g' = g ‚â´ c`, and `a‚ü¶1‚üß' ‚â´ h = h' ‚â´ c`.
In other words, we have a commutative diagram:
```
     f      g      h
  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
  ‚îÇ       ‚îÇ       ‚îÇ        ‚îÇ
  ‚îÇa      ‚îÇb      ‚îÇc       ‚îÇa‚ü¶1‚üß'
  V       V       V        V
  X' ‚îÄ‚îÄ‚îÄ> Y' ‚îÄ‚îÄ‚îÄ> Z' ‚îÄ‚îÄ‚îÄ> X'‚ü¶1‚üß
     f'     g'     h'
```
See <https://stacks.math.columbia.edu/tag/0144>.
-/
@[ext]
structure TriangleMorphism (T‚ÇÅ : Triangle C) (T‚ÇÇ : Triangle C) where
  hom‚ÇÅ : T‚ÇÅ.obj‚ÇÅ ‚ü∂ T‚ÇÇ.obj‚ÇÅ
  hom‚ÇÇ : T‚ÇÅ.obj‚ÇÇ ‚ü∂ T‚ÇÇ.obj‚ÇÇ
  hom‚ÇÉ : T‚ÇÅ.obj‚ÇÉ ‚ü∂ T‚ÇÇ.obj‚ÇÉ
  comm‚ÇÅ' : T‚ÇÅ.mor‚ÇÅ ‚â´ hom‚ÇÇ = hom‚ÇÅ ‚â´ T‚ÇÇ.mor‚ÇÅ := by obviously
  comm‚ÇÇ' : T‚ÇÅ.mor‚ÇÇ ‚â´ hom‚ÇÉ = hom‚ÇÇ ‚â´ T‚ÇÇ.mor‚ÇÇ := by obviously
  comm‚ÇÉ' : T‚ÇÅ.mor‚ÇÉ ‚â´ hom‚ÇÅ‚ü¶1‚üß' = hom‚ÇÉ ‚â´ T‚ÇÇ.mor‚ÇÉ := by obviously
#align
  category_theory.pretriangulated.triangle_morphism CategoryTheory.Pretriangulated.TriangleMorphism

restate_axiom triangle_morphism.comm‚ÇÅ'

restate_axiom triangle_morphism.comm‚ÇÇ'

restate_axiom triangle_morphism.comm‚ÇÉ'

attribute [simp, reassoc.1] triangle_morphism.comm‚ÇÅ triangle_morphism.comm‚ÇÇ triangle_morphism.comm‚ÇÉ

/-- The identity triangle morphism.
-/
@[simps]
def triangleMorphismId (T : Triangle C) :
    TriangleMorphism T T where 
  hom‚ÇÅ := ùüô T.obj‚ÇÅ
  hom‚ÇÇ := ùüô T.obj‚ÇÇ
  hom‚ÇÉ := ùüô T.obj‚ÇÉ
#align
  category_theory.pretriangulated.triangle_morphism_id CategoryTheory.Pretriangulated.triangleMorphismId

instance (T : Triangle C) : Inhabited (TriangleMorphism T T) :=
  ‚ü®triangleMorphismId T‚ü©

variable {T‚ÇÅ T‚ÇÇ T‚ÇÉ : Triangle C}

/-- Composition of triangle morphisms gives a triangle morphism.
-/
@[simps]
def TriangleMorphism.comp (f : TriangleMorphism T‚ÇÅ T‚ÇÇ) (g : TriangleMorphism T‚ÇÇ T‚ÇÉ) :
    TriangleMorphism T‚ÇÅ T‚ÇÉ where 
  hom‚ÇÅ := f.hom‚ÇÅ ‚â´ g.hom‚ÇÅ
  hom‚ÇÇ := f.hom‚ÇÇ ‚â´ g.hom‚ÇÇ
  hom‚ÇÉ := f.hom‚ÇÉ ‚â´ g.hom‚ÇÉ
#align
  category_theory.pretriangulated.triangle_morphism.comp CategoryTheory.Pretriangulated.TriangleMorphism.comp

/-- Triangles with triangle morphisms form a category.
-/
@[simps]
instance triangleCategory :
    Category (Triangle C) where 
  Hom A B := TriangleMorphism A B
  id A := triangleMorphismId A
  comp A B C f g := f.comp g
#align
  category_theory.pretriangulated.triangle_category CategoryTheory.Pretriangulated.triangleCategory

end CategoryTheory.Pretriangulated

