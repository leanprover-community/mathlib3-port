/-
Copyright (c) 2021 Luke Kershaw. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Luke Kershaw

! This file was ported from Lean 3 source module category_theory.triangulated.pretriangulated
! leanprover-community/mathlib commit 008205aa645b3f194c1da47025c5f110c8406eab
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.CategoryTheory.Preadditive.AdditiveFunctor
import Mathbin.CategoryTheory.Shift
import Mathbin.CategoryTheory.Triangulated.Rotate

/-!
# Pretriangulated Categories

This file contains the definition of pretriangulated categories and triangulated functors
between them.

## Implementation Notes

We work under the assumption that pretriangulated categories are preadditive categories,
but not necessarily additive categories, as is assumed in some sources.

TODO: generalise this to n-angulated categories as in https://arxiv.org/abs/1006.4592
-/


noncomputable section

open CategoryTheory

open CategoryTheory.Preadditive

open CategoryTheory.Limits

universe v v‚ÇÄ v‚ÇÅ v‚ÇÇ u u‚ÇÄ u‚ÇÅ u‚ÇÇ

namespace CategoryTheory

open Category Pretriangulated

/-
We work in a preadditive category `C` equipped with an additive shift.
-/
variable (C : Type u) [Category.{v} C] [HasZeroObject C] [HasShift C ‚Ñ§] [Preadditive C]
  [‚àÄ n : ‚Ñ§, Functor.Additive (shiftFunctor C n)]

variable (D : Type u‚ÇÇ) [Category.{v‚ÇÇ} D] [HasZeroObject D] [HasShift D ‚Ñ§] [Preadditive D]
  [‚àÄ n : ‚Ñ§, Functor.Additive (shiftFunctor D n)]

/- ./././Mathport/Syntax/Translate/Command.lean:379:30: infer kinds are unsupported in Lean 4: #[`distinguishedTriangles] [] -/
/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (T‚ÇÇ ¬´expr ‚âÖ ¬ª T‚ÇÅ) -/
/-- A preadditive category `C` with an additive shift, and a class of "distinguished triangles"
relative to that shift is called pretriangulated if the following hold:
* Any triangle that is isomorphic to a distinguished triangle is also distinguished.
* Any triangle of the form `(X,X,0,id,0,0)` is distinguished.
* For any morphism `f : X ‚ü∂ Y` there exists a distinguished triangle of the form `(X,Y,Z,f,g,h)`.
* The triangle `(X,Y,Z,f,g,h)` is distinguished if and only if `(Y,Z,X‚ü¶1‚üß,g,h,-f‚ü¶1‚üß)` is.
* Given a diagram:
  ```
        f       g       h
    X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
    ‚îÇ       ‚îÇ                ‚îÇ
    ‚îÇa      ‚îÇb               ‚îÇa‚ü¶1‚üß'
    V       V                V
    X' ‚îÄ‚îÄ‚îÄ> Y' ‚îÄ‚îÄ‚îÄ> Z' ‚îÄ‚îÄ‚îÄ> X'‚ü¶1‚üß
        f'      g'      h'
  ```
  where the left square commutes, and whose rows are distinguished triangles,
  there exists a morphism `c : Z ‚ü∂ Z'` such that `(a,b,c)` is a triangle morphism.

See <https://stacks.math.columbia.edu/tag/0145>
-/
class Pretriangulated where
  distinguishedTriangles : Set (Triangle C)
  isomorphic_distinguished :
    ‚àÄ T‚ÇÅ ‚àà distinguished_triangles, ‚àÄ (T‚ÇÇ) (_ : T‚ÇÇ ‚âÖ T‚ÇÅ), T‚ÇÇ ‚àà distinguished_triangles
  contractible_distinguished : ‚àÄ X : C, contractibleTriangle X ‚àà distinguished_triangles
  distinguished_cocone_triangle :
    ‚àÄ (X Y : C) (f : X ‚ü∂ Y),
      ‚àÉ (Z : C)(g : Y ‚ü∂ Z)(h : Z ‚ü∂ X‚ü¶(1 : ‚Ñ§)‚üß), Triangle.mk f g h ‚àà distinguished_triangles
  rotate_distinguished_triangle :
    ‚àÄ T : Triangle C, T ‚àà distinguished_triangles ‚Üî T.rotate ‚àà distinguished_triangles
  complete_distinguished_triangle_morphism :
    ‚àÄ (T‚ÇÅ T‚ÇÇ : Triangle C) (h‚ÇÅ : T‚ÇÅ ‚àà distinguished_triangles) (h‚ÇÇ : T‚ÇÇ ‚àà distinguished_triangles)
      (a : T‚ÇÅ.obj‚ÇÅ ‚ü∂ T‚ÇÇ.obj‚ÇÅ) (b : T‚ÇÅ.obj‚ÇÇ ‚ü∂ T‚ÇÇ.obj‚ÇÇ) (comm‚ÇÅ : T‚ÇÅ.mor‚ÇÅ ‚â´ b = a ‚â´ T‚ÇÇ.mor‚ÇÅ),
      ‚àÉ c : T‚ÇÅ.obj‚ÇÉ ‚ü∂ T‚ÇÇ.obj‚ÇÉ, T‚ÇÅ.mor‚ÇÇ ‚â´ c = b ‚â´ T‚ÇÇ.mor‚ÇÇ ‚àß T‚ÇÅ.mor‚ÇÉ ‚â´ a‚ü¶1‚üß' = c ‚â´ T‚ÇÇ.mor‚ÇÉ
#align category_theory.pretriangulated CategoryTheory.Pretriangulated

namespace Pretriangulated

variable [hC : Pretriangulated C]

include hC

-- mathport name: ¬´exprdist_triang ¬ª
notation:20 "dist_triang " C => distinguishedTriangles C

/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (T ¬´expr ‚àà ¬ª ¬´exprdist_triang ¬ª(C)) -/
/-- Given any distinguished triangle `T`, then we know `T.rotate` is also distinguished.
-/
theorem rot_of_dist_triangle (T) (_ : T ‚àà (dist_triang C)) : T.rotate ‚àà (dist_triang C) :=
  (rotate_distinguished_triangle T).mp H
#align
  category_theory.pretriangulated.rot_of_dist_triangle CategoryTheory.Pretriangulated.rot_of_dist_triangle

/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (T ¬´expr ‚àà ¬ª ¬´exprdist_triang ¬ª(C)) -/
/-- Given any distinguished triangle `T`, then we know `T.inv_rotate` is also distinguished.
-/
theorem inv_rot_of_dist_triangle (T) (_ : T ‚àà (dist_triang C)) : T.invRotate ‚àà (dist_triang C) :=
  (rotate_distinguished_triangle T.invRotate).mpr
    (isomorphic_distinguished T H T.invRotate.rotate (invRotCompRot.app T))
#align
  category_theory.pretriangulated.inv_rot_of_dist_triangle CategoryTheory.Pretriangulated.inv_rot_of_dist_triangle

/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (T ¬´expr ‚àà ¬ª ¬´exprdist_triang ¬ª(C)) -/
/-- Given any distinguished triangle
```
      f       g       h
  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
```
the composition `f ‚â´ g = 0`.
See <https://stacks.math.columbia.edu/tag/0146>
-/
theorem comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ (T) (_ : T ‚àà (dist_triang C)) : T.mor‚ÇÅ ‚â´ T.mor‚ÇÇ = 0 :=
  by
  obtain ‚ü®c, hc‚ü© :=
    complete_distinguished_triangle_morphism _ _ (contractible_distinguished T.obj‚ÇÅ) H (ùüô T.obj‚ÇÅ)
      T.mor‚ÇÅ rfl
  simpa only [contractible_triangle_mor‚ÇÇ, zero_comp] using hc.left.symm
#align
  category_theory.pretriangulated.comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ CategoryTheory.Pretriangulated.comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ

/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (T ¬´expr ‚àà ¬ª ¬´exprdist_triang ¬ª(C)) -/
/-- Given any distinguished triangle
```
      f       g       h
  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
```
the composition `g ‚â´ h = 0`.
See <https://stacks.math.columbia.edu/tag/0146>
-/
theorem comp_dist_triangle_mor_zero‚ÇÇ‚ÇÉ (T) (_ : T ‚àà (dist_triang C)) : T.mor‚ÇÇ ‚â´ T.mor‚ÇÉ = 0 :=
  comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ C T.rotate (rot_of_dist_triangle C T H)
#align
  category_theory.pretriangulated.comp_dist_triangle_mor_zero‚ÇÇ‚ÇÉ CategoryTheory.Pretriangulated.comp_dist_triangle_mor_zero‚ÇÇ‚ÇÉ

/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (T ¬´expr ‚àà ¬ª ¬´exprdist_triang ¬ª(C)) -/
/-- Given any distinguished triangle
```
      f       g       h
  X  ‚îÄ‚îÄ‚îÄ> Y  ‚îÄ‚îÄ‚îÄ> Z  ‚îÄ‚îÄ‚îÄ> X‚ü¶1‚üß
```
the composition `h ‚â´ f‚ü¶1‚üß = 0`.
See <https://stacks.math.columbia.edu/tag/0146>
-/
theorem comp_dist_triangle_mor_zero‚ÇÉ‚ÇÅ (T) (_ : T ‚àà (dist_triang C)) :
    T.mor‚ÇÉ ‚â´ (shiftEquiv C 1).Functor.map T.mor‚ÇÅ = 0 :=
  by
  have H‚ÇÇ := rot_of_dist_triangle C T.rotate (rot_of_dist_triangle C T H)
  simpa using comp_dist_triangle_mor_zero‚ÇÅ‚ÇÇ C T.rotate.rotate H‚ÇÇ
#align
  category_theory.pretriangulated.comp_dist_triangle_mor_zero‚ÇÉ‚ÇÅ CategoryTheory.Pretriangulated.comp_dist_triangle_mor_zero‚ÇÉ‚ÇÅ

/-
TODO: If `C` is pretriangulated with respect to a shift,
then `C·µí·µñ` is pretriangulated with respect to the inverse shift.
-/
omit hC

/--
The underlying structure of a triangulated functor between pretriangulated categories `C` and `D`
is a functor `F : C ‚•§ D` together with given functorial isomorphisms `Œæ X : F(X‚ü¶1‚üß) ‚ü∂ F(X)‚ü¶1‚üß`.
-/
structure TriangulatedFunctorStruct extends C ‚•§ D where
  commShift : shiftFunctor C (1 : ‚Ñ§) ‚ãô to_functor ‚âÖ to_functor ‚ãô shiftFunctor D (1 : ‚Ñ§)
#align
  category_theory.pretriangulated.triangulated_functor_struct CategoryTheory.Pretriangulated.TriangulatedFunctorStruct

namespace TriangulatedFunctorStruct

/-- The identity `triangulated_functor_struct`. -/
def id : TriangulatedFunctorStruct C C where
  obj X := X
  map _ _ f := f
  commShift := by rfl
#align
  category_theory.pretriangulated.triangulated_functor_struct.id CategoryTheory.Pretriangulated.TriangulatedFunctorStruct.id

instance : Inhabited (TriangulatedFunctorStruct C C) :=
  ‚ü®id C‚ü©

variable {C D}

/-- Given a `triangulated_functor_struct` we can define a functor from triangles of `C` to
triangles of `D`.
-/
@[simps]
def mapTriangle (F : TriangulatedFunctorStruct C D) : Triangle C ‚•§ Triangle D
    where
  obj T := Triangle.mk (F.map T.mor‚ÇÅ) (F.map T.mor‚ÇÇ) (F.map T.mor‚ÇÉ ‚â´ F.commShift.Hom.app T.obj‚ÇÅ)
  map S T f :=
    { hom‚ÇÅ := F.map f.hom‚ÇÅ
      hom‚ÇÇ := F.map f.hom‚ÇÇ
      hom‚ÇÉ := F.map f.hom‚ÇÉ
      comm‚ÇÅ' := by
        dsimp
        simp only [‚Üê F.to_functor.map_comp, f.comm‚ÇÅ]
      comm‚ÇÇ' := by
        dsimp
        simp only [‚Üê F.to_functor.map_comp, f.comm‚ÇÇ]
      comm‚ÇÉ' := by
        dsimp
        erw [category.assoc, ‚Üê F.comm_shift.hom.naturality]
        simp only [functor.comp_map, ‚Üê F.to_functor.map_comp_assoc, f.comm‚ÇÉ] }
#align
  category_theory.pretriangulated.triangulated_functor_struct.map_triangle CategoryTheory.Pretriangulated.TriangulatedFunctorStruct.mapTriangle

end TriangulatedFunctorStruct

include hC

variable (C D) [Pretriangulated D]

/-- A triangulated functor between pretriangulated categories `C` and `D` is a functor `F : C ‚•§ D`
together with given functorial isomorphisms `Œæ X : F(X‚ü¶1‚üß) ‚ü∂ F(X)‚ü¶1‚üß` such that for every
distinguished triangle `(X,Y,Z,f,g,h)` of `C`, the triangle
`(F(X), F(Y), F(Z), F(f), F(g), F(h) ‚â´ (Œæ X))` is a distinguished triangle of `D`.
See <https://stacks.math.columbia.edu/tag/014V>
-/
structure TriangulatedFunctor extends TriangulatedFunctorStruct C D where
  map_distinguished' :
    ‚àÄ T : Triangle C,
      T ‚àà (dist_triang C) ‚Üí to_triangulated_functor_struct.mapTriangle.obj T ‚àà (dist_triang D)
#align
  category_theory.pretriangulated.triangulated_functor CategoryTheory.Pretriangulated.TriangulatedFunctor

instance : Inhabited (TriangulatedFunctor C C) :=
  ‚ü®{  obj := fun X => X
      map := fun _ _ f => f
      commShift := by rfl
      map_distinguished' := by
        rintro ‚ü®_, _, _, _‚ü© Tdt
        dsimp at *
        rwa [category.comp_id] }‚ü©

variable {C D}

/--
Given a `triangulated_functor` we can define a functor from triangles of `C` to triangles of `D`.
-/
@[simps]
def TriangulatedFunctor.mapTriangle (F : TriangulatedFunctor C D) : Triangle C ‚•§ Triangle D :=
  F.toTriangulatedFunctorStruct.mapTriangle
#align
  category_theory.pretriangulated.triangulated_functor.map_triangle CategoryTheory.Pretriangulated.TriangulatedFunctor.mapTriangle

/-- Given a `triangulated_functor` and a distinguished triangle `T` of `C`, then the triangle it
maps onto in `D` is also distinguished.
-/
theorem TriangulatedFunctor.map_distinguished (F : TriangulatedFunctor C D) (T : Triangle C)
    (h : T ‚àà (dist_triang C)) : F.mapTriangle.obj T ‚àà (dist_triang D) :=
  F.map_distinguished' T h
#align
  category_theory.pretriangulated.triangulated_functor.map_distinguished CategoryTheory.Pretriangulated.TriangulatedFunctor.map_distinguished

end Pretriangulated

end CategoryTheory

