import Mathbin.CategoryTheory.NaturalIsomorphism 
import Mathbin.Data.Equiv.Basic

/-!
# Full and faithful functors

We define typeclasses `full` and `faithful`, decorating functors.

Use `F.map_injective` to retrieve the fact that `F.map` is injective when `[faithful F]`,
and `F.preimage` to obtain preimages of morphisms when `[full F]`.

We prove some basic "cancellation" lemmas for full and/or faithful functors.

See `category_theory.equivalence` for the fact that a functor is an equivalence if and only if
it is fully faithful and essentially surjective.

-/


universe v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ

namespace CategoryTheory

variable{C : Type u‚ÇÅ}[category.{v‚ÇÅ} C]{D : Type u‚ÇÇ}[category.{v‚ÇÇ} D]

/--
A functor `F : C ‚•§ D` is full if for each `X Y : C`, `F.map` is surjective.
In fact, we use a constructive definition, so the `full F` typeclass contains data,
specifying a particular preimage of each `f : F.obj X ‚ü∂ F.obj Y`.

See https://stacks.math.columbia.edu/tag/001C.
-/
class full(F : C ‚•§ D) where 
  Preimage : ‚àÄ {X Y : C} (f : F.obj X ‚ü∂ F.obj Y), X ‚ü∂ Y 
  witness' : ‚àÄ {X Y : C} (f : F.obj X ‚ü∂ F.obj Y), F.map (preimage f) = f :=  by 
  runTac 
    obviously

restate_axiom full.witness'

attribute [simp] full.witness

/--
A functor `F : C ‚•§ D` is faithful if for each `X Y : C`, `F.map` is injective.

See https://stacks.math.columbia.edu/tag/001C.
-/
class faithful(F : C ‚•§ D) : Prop where 
  map_injective'{} : ‚àÄ {X Y : C}, Function.Injective (@Functor.map _ _ _ _ F X Y) :=  by 
  runTac 
    obviously

restate_axiom faithful.map_injective'

namespace Functor

theorem map_injective (F : C ‚•§ D) [faithful F] {X Y : C} : Function.Injective$ @Functor.map _ _ _ _ F X Y :=
  faithful.map_injective F

/-- The specified preimage of a morphism under a full functor. -/
def preimage (F : C ‚•§ D) [full F] {X Y : C} (f : F.obj X ‚ü∂ F.obj Y) : X ‚ü∂ Y :=
  full.preimage.{v‚ÇÅ, v‚ÇÇ} f

@[simp]
theorem image_preimage (F : C ‚•§ D) [full F] {X Y : C} (f : F.obj X ‚ü∂ F.obj Y) : F.map (preimage F f) = f :=
  by 
    unfold preimage <;>
      runTac 
        obviously

end Functor

variable{F : C ‚•§ D}[full F][faithful F]{X Y Z : C}

@[simp]
theorem preimage_id : F.preimage (ùüô (F.obj X)) = ùüô X :=
  F.map_injective
    (by 
      simp )

@[simp]
theorem preimage_comp (f : F.obj X ‚ü∂ F.obj Y) (g : F.obj Y ‚ü∂ F.obj Z) :
  F.preimage (f ‚â´ g) = F.preimage f ‚â´ F.preimage g :=
  F.map_injective
    (by 
      simp )

@[simp]
theorem preimage_map (f : X ‚ü∂ Y) : F.preimage (F.map f) = f :=
  F.map_injective
    (by 
      simp )

/-- If `F : C ‚•§ D` is fully faithful, every isomorphism `F.obj X ‚âÖ F.obj Y` has a preimage. -/
def preimage_iso (f : F.obj X ‚âÖ F.obj Y) : X ‚âÖ Y :=
  { Hom := F.preimage f.hom, inv := F.preimage f.inv,
    hom_inv_id' :=
      F.map_injective
        (by 
          simp ),
    inv_hom_id' :=
      F.map_injective
        (by 
          simp ) }

@[simp]
theorem preimage_iso_hom (f : F.obj X ‚âÖ F.obj Y) : (preimage_iso f).Hom = F.preimage f.hom :=
  rfl

@[simp]
theorem preimage_iso_inv (f : F.obj X ‚âÖ F.obj Y) : (preimage_iso f).inv = F.preimage f.inv :=
  rfl

@[simp]
theorem preimage_iso_map_iso (f : X ‚âÖ Y) : preimage_iso (F.map_iso f) = f :=
  by 
    tidy

variable(F)

/--
If the image of a morphism under a fully faithful functor in an isomorphism,
then the original morphisms is also an isomorphism.
-/
theorem is_iso_of_fully_faithful (f : X ‚ü∂ Y) [is_iso (F.map f)] : is_iso f :=
  ‚ü®‚ü®F.preimage (inv (F.map f)),
      ‚ü®F.map_injective
          (by 
            simp ),
        F.map_injective
          (by 
            simp )‚ü©‚ü©‚ü©

/-- If `F` is fully faithful, we have an equivalence of hom-sets `X ‚ü∂ Y` and `F X ‚ü∂ F Y`. -/
def equiv_of_fully_faithful {X Y} : (X ‚ü∂ Y) ‚âÉ (F.obj X ‚ü∂ F.obj Y) :=
  { toFun := fun f => F.map f, invFun := fun f => F.preimage f,
    left_inv :=
      fun f =>
        by 
          simp ,
    right_inv :=
      fun f =>
        by 
          simp  }

@[simp]
theorem equiv_of_fully_faithful_apply {X Y : C} (f : X ‚ü∂ Y) : equiv_of_fully_faithful F f = F.map f :=
  rfl

@[simp]
theorem equiv_of_fully_faithful_symm_apply {X Y} (f : F.obj X ‚ü∂ F.obj Y) :
  (equiv_of_fully_faithful F).symm f = F.preimage f :=
  rfl

end CategoryTheory

namespace CategoryTheory

variable{C : Type u‚ÇÅ}[category.{v‚ÇÅ} C]

instance full.id : full (ùü≠ C) :=
  { Preimage := fun _ _ f => f }

instance faithful.id : faithful (ùü≠ C) :=
  by 
    runTac 
      obviously

variable{D : Type u‚ÇÇ}[category.{v‚ÇÇ} D]{E : Type u‚ÇÉ}[category.{v‚ÇÉ} E]

variable(F F' : C ‚•§ D)(G : D ‚•§ E)

instance faithful.comp [faithful F] [faithful G] : faithful (F ‚ãô G) :=
  { map_injective' := fun _ _ _ _ p => F.map_injective (G.map_injective p) }

theorem faithful.of_comp [faithful$ F ‚ãô G] : faithful F :=
  { map_injective' := fun X Y => (F ‚ãô G).map_injective.of_comp }

section 

variable{F F'}

/-- If `F` is full, and naturally isomorphic to some `F'`, then `F'` is also full. -/
def full.of_iso [full F] (Œ± : F ‚âÖ F') : full F' :=
  { Preimage := fun X Y f => F.preimage ((Œ±.app X).Hom ‚â´ f ‚â´ (Œ±.app Y).inv),
    witness' :=
      fun X Y f =>
        by 
          simp [‚Üênat_iso.naturality_1 Œ±] }

theorem faithful.of_iso [faithful F] (Œ± : F ‚âÖ F') : faithful F' :=
  { map_injective' :=
      fun X Y f f' h =>
        F.map_injective
          (by 
            rw [‚Üênat_iso.naturality_1 Œ±.symm, h, nat_iso.naturality_1 Œ±.symm]) }

end 

variable{F G}

theorem faithful.of_comp_iso {H : C ‚•§ E} [‚Ñã : faithful H] (h : F ‚ãô G ‚âÖ H) : faithful F :=
  @faithful.of_comp _ _ _ _ _ _ F G (faithful.of_iso h.symm)

alias faithful.of_comp_iso ‚Üê CategoryTheory.Iso.faithful_of_comp

theorem faithful.of_comp_eq {H : C ‚•§ E} [‚Ñã : faithful H] (h : F ‚ãô G = H) : faithful F :=
  @faithful.of_comp _ _ _ _ _ _ F G (h.symm ‚ñ∏ ‚Ñã)

alias faithful.of_comp_eq ‚Üê Eq.faithful_of_comp

variable(F G)

/-- ‚ÄúDivide‚Äù a functor by a faithful functor. -/
protected def faithful.div (F : C ‚•§ E) (G : D ‚•§ E) [faithful G] (obj : C ‚Üí D) (h_obj : ‚àÄ X, G.obj (obj X) = F.obj X)
  (map : ‚àÄ {X Y}, (X ‚ü∂ Y) ‚Üí (obj X ‚ü∂ obj Y)) (h_map : ‚àÄ {X Y} {f : X ‚ü∂ Y}, HEq (G.map (map f)) (F.map f)) : C ‚•§ D :=
  { obj, map := @map,
    map_id' :=
      by 
        intro X 
        apply G.map_injective 
        apply eq_of_heq 
        trans F.map (ùüô X)
        exact h_map 
        rw [F.map_id, G.map_id, h_obj X],
    map_comp' :=
      by 
        intro X Y Z f g 
        apply G.map_injective 
        apply eq_of_heq 
        trans F.map (f ‚â´ g)
        exact h_map 
        rw [F.map_comp, G.map_comp]
        congr 1 <;>
          try 
              exact (h_obj _).symm <;>
            exact h_map.symm }

-- error in CategoryTheory.FullyFaithful: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: parenthesize: uncaught backtrack exception
theorem faithful.div_comp
(F : ¬´expr ‚•§ ¬ª(C, E))
[faithful F]
(G : ¬´expr ‚•§ ¬ª(D, E))
[faithful G]
(obj : C ‚Üí D)
(h_obj : ‚àÄ X, ¬´expr = ¬ª(G.obj (obj X), F.obj X))
(map : ‚àÄ {X Y}, ¬´expr ‚ü∂ ¬ª(X, Y) ‚Üí ¬´expr ‚ü∂ ¬ª(obj X, obj Y))
(h_map : ‚àÄ
 {X Y}
 {f : ¬´expr ‚ü∂ ¬ª(X, Y)}, ¬´expr == ¬ª(G.map (map f), F.map f)) : ¬´expr = ¬ª(¬´expr ‚ãô ¬ª(faithful.div F G obj @h_obj @map @h_map, G), F) :=
begin
  casesI [expr F] ["with", ident F_obj, "_", "_", "_"],
  casesI [expr G] ["with", ident G_obj, "_", "_", "_"],
  unfold [ident faithful.div, ident functor.comp] [],
  unfold_projs ["at", ident h_obj],
  have [] [":", expr ¬´expr = ¬ª(F_obj, ¬´expr ‚àò ¬ª(G_obj, obj))] [":=", expr (funext h_obj).symm],
  substI [expr this],
  congr,
  funext [],
  exact [expr eq_of_heq h_map]
end

theorem faithful.div_faithful (F : C ‚•§ E) [faithful F] (G : D ‚•§ E) [faithful G] (obj : C ‚Üí D)
  (h_obj : ‚àÄ X, G.obj (obj X) = F.obj X) (map : ‚àÄ {X Y}, (X ‚ü∂ Y) ‚Üí (obj X ‚ü∂ obj Y))
  (h_map : ‚àÄ {X Y} {f : X ‚ü∂ Y}, HEq (G.map (map f)) (F.map f)) : faithful (faithful.div F G obj @h_obj @map @h_map) :=
  (faithful.div_comp F G _ h_obj _ @h_map).faithful_of_comp

instance full.comp [full F] [full G] : full (F ‚ãô G) :=
  { Preimage := fun _ _ f => F.preimage (G.preimage f) }

/-- If `F ‚ãô G` is full and `G` is faithful, then `F` is full -/
def full.of_comp_faithful [full$ F ‚ãô G] [faithful G] : full F :=
  { Preimage := fun X Y f => (F ‚ãô G).Preimage (G.map f),
    witness' := fun X Y f => G.map_injective ((F ‚ãô G).image_preimage _) }

/--
Given a natural isomorphism between `F ‚ãô H` and `G ‚ãô H` for a fully faithful functor `H`, we
can 'cancel' it to give a natural iso between `F` and `G`.
-/
def fully_faithful_cancel_right {F G : C ‚•§ D} (H : D ‚•§ E) [full H] [faithful H] (comp_iso : F ‚ãô H ‚âÖ G ‚ãô H) : F ‚âÖ G :=
  nat_iso.of_components (fun X => preimage_iso (comp_iso.app X))
    fun X Y f =>
      H.map_injective
        (by 
          simpa using comp_iso.hom.naturality f)

@[simp]
theorem fully_faithful_cancel_right_hom_app {F G : C ‚•§ D} {H : D ‚•§ E} [full H] [faithful H] (comp_iso : F ‚ãô H ‚âÖ G ‚ãô H)
  (X : C) : (fully_faithful_cancel_right H comp_iso).Hom.app X = H.preimage (comp_iso.hom.app X) :=
  rfl

@[simp]
theorem fully_faithful_cancel_right_inv_app {F G : C ‚•§ D} {H : D ‚•§ E} [full H] [faithful H] (comp_iso : F ‚ãô H ‚âÖ G ‚ãô H)
  (X : C) : (fully_faithful_cancel_right H comp_iso).inv.app X = H.preimage (comp_iso.inv.app X) :=
  rfl

end CategoryTheory

