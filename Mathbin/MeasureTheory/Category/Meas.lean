import Mathbin.MeasureTheory.Measure.GiryMonad 
import Mathbin.CategoryTheory.ConcreteCategory.UnbundledHom 
import Mathbin.CategoryTheory.Monad.Algebra 
import Mathbin.Topology.Category.Top.Basic

/-!
# The category of measurable spaces

Measurable spaces and measurable functions form a (concrete) category `Meas`.

## Main definitions

* `Measure : Meas ⥤ Meas`: the functor which sends a measurable space `X`
to the space of measures on `X`; it is a monad (the "Giry monad").

* `Borel : Top ⥤ Meas`: sends a topological space `X` to `X` equipped with the
`σ`-algebra of Borel sets (the `σ`-algebra generated by the open subsets of `X`).

## Tags

measurable space, giry monad, borel
-/


noncomputable theory

open CategoryTheory MeasureTheory

open_locale Ennreal

universe u v

/-- The category of measurable spaces and measurable functions. -/
def Meas : Type (u + 1) :=
  bundled MeasurableSpace

namespace Meas

instance  : CoeSort Meas (Type _) :=
  bundled.has_coe_to_sort

instance  (X : Meas) : MeasurableSpace X :=
  X.str

/-- Construct a bundled `Meas` from the underlying type and the typeclass. -/
def of (α : Type u) [MeasurableSpace α] : Meas :=
  ⟨α⟩

@[simp]
theorem coe_of (X : Type u) [MeasurableSpace X] : (of X : Type u) = X :=
  rfl

instance unbundled_hom : unbundled_hom @Measurable :=
  ⟨@measurable_id, @Measurable.comp⟩

-- error in MeasureTheory.Category.Meas: ././Mathport/Syntax/Translate/Basic.lean:704:9: unsupported derive handler large_category
attribute [derive #["[", expr large_category, ",", expr concrete_category, "]"]] Meas

instance  : Inhabited Meas :=
  ⟨Meas.of Empty⟩

/-- `Measure X` is the measurable space of measures over the measurable space `X`. It is the
weakest measurable space, s.t. λμ, μ s is measurable for all measurable sets `s` in `X`. An
important purpose is to assign a monadic structure on it, the Giry monad. In the Giry monad,
the pure values are the Dirac measure, and the bind operation maps to the integral:
`(μ >>= ν) s = ∫ x. (ν x) s dμ`.

In probability theory, the `Meas`-morphisms `X → Prob X` are (sub-)Markov kernels (here `Prob` is
the restriction of `Measure` to (sub-)probability space.)
-/
def Measure : Meas ⥤ Meas :=
  { obj := fun X => ⟨@MeasureTheory.Measure X.1 X.2⟩,
    map := fun X Y f => ⟨measure.map (f : X → Y), measure.measurable_map f f.2⟩,
    map_id' := fun ⟨α, I⟩ => Subtype.eq$ funext$ fun μ => @measure.map_id α I μ,
    map_comp' := fun X Y Z ⟨f, hf⟩ ⟨g, hg⟩ => Subtype.eq$ funext$ fun μ => (measure.map_map hg hf).symm }

/-- The Giry monad, i.e. the monadic structure associated with `Measure`. -/
def Giry : CategoryTheory.Monad Meas :=
  { toFunctor := Measure,
    η' :=
      { app := fun X => ⟨@measure.dirac X.1 X.2, measure.measurable_dirac⟩,
        naturality' := fun X Y ⟨f, hf⟩ => Subtype.eq$ funext$ fun a => (measure.map_dirac hf a).symm },
    μ' :=
      { app := fun X => ⟨@measure.join X.1 X.2, measure.measurable_join⟩,
        naturality' := fun X Y ⟨f, hf⟩ => Subtype.eq$ funext$ fun μ => measure.join_map_map hf μ },
    assoc' := fun α => Subtype.eq$ funext$ fun μ => @measure.join_map_join _ _ _,
    left_unit' := fun α => Subtype.eq$ funext$ fun μ => @measure.join_dirac _ _ _,
    right_unit' := fun α => Subtype.eq$ funext$ fun μ => @measure.join_map_dirac _ _ _ }

-- error in MeasureTheory.Category.Meas: ././Mathport/Syntax/Translate/Basic.lean:177:17: failed to parenthesize: no declaration of attribute [parenthesizer] found for 'Lean.Parser.Term.explicitBinder'
/-- An example for an algebra on `Measure`: the nonnegative Lebesgue integral is a hom, behaving
nicely under the monad operations. -/ def Integral : Giry.algebra :=
{ A := Meas.of «exprℝ≥0∞»(),
  a := ⟨λ m : measure «exprℝ≥0∞»(), «expr∫⁻ , ∂ »((x), x, m), measure.measurable_lintegral measurable_id⟩,
  unit' := «expr $ »(subtype.eq, «expr $ »(funext, assume r : «exprℝ≥0∞»(), lintegral_dirac' _ measurable_id)),
  assoc' := «expr $ »(subtype.eq, «expr $ »(funext, assume
    μ : measure (measure «exprℝ≥0∞»()), show «expr = »(«expr∫⁻ , ∂ »((x), x, μ.join), «expr∫⁻ , ∂ »((x), x, measure.map (λ
       m : measure «exprℝ≥0∞»(), «expr∫⁻ , ∂ »((x), x, m)) μ)), by rw ["[", expr measure.lintegral_join, ",", expr lintegral_map, "]"] []; apply_rules ["[", expr measurable_id, ",", expr measure.measurable_lintegral, "]"])) }

end Meas

instance Top.hasForgetToMeas : has_forget₂ Top.{u} Meas.{u} :=
  bundled_hom.mk_has_forget₂ borel (fun X Y f => ⟨f.1, f.2.borel_measurable⟩)
    (by 
      intros  <;> rfl)

/-- The Borel functor, the canonical embedding of topological spaces into measurable spaces. -/
@[reducible]
def borelₓ : Top.{u} ⥤ Meas.{u} :=
  forget₂ Top.{u} Meas.{u}

