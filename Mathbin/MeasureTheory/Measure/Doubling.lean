/-
Copyright (c) 2022 Oliver Nash. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Oliver Nash

! This file was ported from Lean 3 source module measure_theory.measure.doubling
! leanprover-community/mathlib commit 5f6e827d81dfbeb6151d7016586ceeb0099b9655
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Analysis.SpecialFunctions.Log.Base
import Mathbin.MeasureTheory.Measure.MeasureSpaceDef

/-!
# Uniformly locally doubling measures

A uniformly locally doubling measure `Œº` on a metric space is a measure for which there exists a
constant `C` such that for all sufficiently small radii `Œµ`, and for any centre, the measure of a
ball of radius `2 * Œµ` is bounded by `C` times the measure of the concentric ball of radius `Œµ`.

This file records basic facts about uniformly locally doubling measures.

## Main definitions

  * `is_unif_loc_doubling_measure`: the definition of a uniformly locally doubling measure (as a
  typeclass).
  * `is_unif_loc_doubling_measure.doubling_constant`: a function yielding the doubling constant `C`
  appearing in the definition of a uniformly locally doubling measure.
-/


noncomputable section

open Set Filter Metric MeasureTheory TopologicalSpace

open ENNReal NNReal Topology

#print IsUnifLocDoublingMeasure /-
/- ./././Mathport/Syntax/Translate/Command.lean:393:30: infer kinds are unsupported in Lean 4: #[`exists_measure_closedBall_le_mul] [] -/
/-- A measure `Œº` is said to be a uniformly locally doubling measure if there exists a constant `C`
such that for all sufficiently small radii `Œµ`, and for any centre, the measure of a ball of radius
`2 * Œµ` is bounded by `C` times the measure of the concentric ball of radius `Œµ`.

Note: it is important that this definition makes a demand only for sufficiently small `Œµ`. For
example we want hyperbolic space to carry the instance `is_unif_loc_doubling_measure volume` but
volumes grow exponentially in hyperbolic space. To be really explicit, consider the hyperbolic plane
of curvature -1, the area of a disc of radius `Œµ` is `A(Œµ) = 2œÄ(cosh(Œµ) - 1)` so
`A(2Œµ)/A(Œµ) ~ exp(Œµ)`. -/
class IsUnifLocDoublingMeasure {Œ± : Type _} [MetricSpace Œ±] [MeasurableSpace Œ±]
  (Œº : Measure Œ±) where
  exists_measure_closedBall_le_mul :
    ‚àÉ C : ‚Ñù‚â•0, ‚àÄ·∂† Œµ in ùìù[>] 0, ‚àÄ x, Œº (closedBall x (2 * Œµ)) ‚â§ C * Œº (closedBall x Œµ)
#align is_unif_loc_doubling_measure IsUnifLocDoublingMeasure
-/

namespace IsUnifLocDoublingMeasure

variable {Œ± : Type _} [MetricSpace Œ±] [MeasurableSpace Œ±] (Œº : Measure Œ±)
  [IsUnifLocDoublingMeasure Œº]

#print IsUnifLocDoublingMeasure.doublingConstant /-
/-- A doubling constant for a uniformly locally doubling measure.

See also `is_unif_loc_doubling_measure.scaling_constant_of`. -/
def doublingConstant : ‚Ñù‚â•0 :=
  Classical.choose <| exists_measure_closedBall_le_mul Œº
#align is_unif_loc_doubling_measure.doubling_constant IsUnifLocDoublingMeasure.doublingConstant
-/

/- warning: is_unif_loc_doubling_measure.exists_measure_closed_ball_le_mul' -> IsUnifLocDoublingMeasure.exists_measure_closedBall_le_mul' is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : MetricSpace.{u1} Œ±] [_inst_2 : MeasurableSpace.{u1} Œ±] (Œº : MeasureTheory.Measure.{u1} Œ± _inst_2) [_inst_3 : IsUnifLocDoublingMeasure.{u1} Œ± _inst_1 _inst_2 Œº], Filter.Eventually.{0} Real (fun (Œµ : Real) => forall (x : Œ±), LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} Œ± _inst_2) (fun (_x : MeasureTheory.Measure.{u1} Œ± _inst_2) => (Set.{u1} Œ±) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} Œ± _inst_2) Œº (Metric.closedBall.{u1} Œ± (MetricSpace.toPseudoMetricSpace.{u1} Œ± _inst_1) x (HMul.hMul.{0, 0, 0} Real Real Real (instHMul.{0} Real Real.hasMul) (OfNat.ofNat.{0} Real 2 (OfNat.mk.{0} Real 2 (bit0.{0} Real Real.hasAdd (One.one.{0} Real Real.hasOne)))) Œµ))) (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) (IsUnifLocDoublingMeasure.doublingConstant.{u1} Œ± _inst_1 _inst_2 Œº _inst_3)) (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} Œ± _inst_2) (fun (_x : MeasureTheory.Measure.{u1} Œ± _inst_2) => (Set.{u1} Œ±) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} Œ± _inst_2) Œº (Metric.closedBall.{u1} Œ± (MetricSpace.toPseudoMetricSpace.{u1} Œ± _inst_1) x Œµ)))) (nhdsWithin.{0} Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) (Set.Ioi.{0} Real Real.preorder (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero)))))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : MetricSpace.{u1} Œ±] [_inst_2 : MeasurableSpace.{u1} Œ±] (Œº : MeasureTheory.Measure.{u1} Œ± _inst_2) [_inst_3 : IsUnifLocDoublingMeasure.{u1} Œ± _inst_1 _inst_2 Œº], Filter.Eventually.{0} Real (fun (Œµ : Real) => forall (x : Œ±), LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (OmegaCompletePartialOrder.toPartialOrder.{0} ENNReal (CompleteLattice.instOmegaCompletePartialOrder.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (MeasureTheory.OuterMeasure.measureOf.{u1} Œ± (MeasureTheory.Measure.toOuterMeasure.{u1} Œ± _inst_2 Œº) (Metric.closedBall.{u1} Œ± (MetricSpace.toPseudoMetricSpace.{u1} Œ± _inst_1) x (HMul.hMul.{0, 0, 0} Real Real Real (instHMul.{0} Real Real.instMulReal) (OfNat.ofNat.{0} Real 2 (instOfNat.{0} Real 2 Real.natCast (instAtLeastTwoHAddNatInstHAddInstAddNatOfNat (OfNat.ofNat.{0} Nat 0 (instOfNatNat 0))))) Œµ))) (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) (ENNReal.some (IsUnifLocDoublingMeasure.doublingConstant.{u1} Œ± _inst_1 _inst_2 Œº _inst_3)) (MeasureTheory.OuterMeasure.measureOf.{u1} Œ± (MeasureTheory.Measure.toOuterMeasure.{u1} Œ± _inst_2 Œº) (Metric.closedBall.{u1} Œ± (MetricSpace.toPseudoMetricSpace.{u1} Œ± _inst_1) x Œµ)))) (nhdsWithin.{0} Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) (Set.Ioi.{0} Real Real.instPreorderReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal))))
Case conversion may be inaccurate. Consider using '#align is_unif_loc_doubling_measure.exists_measure_closed_ball_le_mul' IsUnifLocDoublingMeasure.exists_measure_closedBall_le_mul'‚Çì'. -/
theorem exists_measure_closedBall_le_mul' :
    ‚àÄ·∂† Œµ in ùìù[>] 0, ‚àÄ x, Œº (closedBall x (2 * Œµ)) ‚â§ doublingConstant Œº * Œº (closedBall x Œµ) :=
  Classical.choose_spec <| exists_measure_closedBall_le_mul Œº
#align is_unif_loc_doubling_measure.exists_measure_closed_ball_le_mul' IsUnifLocDoublingMeasure.exists_measure_closedBall_le_mul'

/- warning: is_unif_loc_doubling_measure.exists_eventually_forall_measure_closed_ball_le_mul -> IsUnifLocDoublingMeasure.exists_eventually_forall_measure_closedBall_le_mul is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : MetricSpace.{u1} Œ±] [_inst_2 : MeasurableSpace.{u1} Œ±] (Œº : MeasureTheory.Measure.{u1} Œ± _inst_2) [_inst_3 : IsUnifLocDoublingMeasure.{u1} Œ± _inst_1 _inst_2 Œº] (K : Real), Exists.{1} NNReal (fun (C : NNReal) => Filter.Eventually.{0} Real (fun (Œµ : Real) => forall (x : Œ±) (t : Real), (LE.le.{0} Real Real.hasLe t K) -> (LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} Œ± _inst_2) (fun (_x : MeasureTheory.Measure.{u1} Œ± _inst_2) => (Set.{u1} Œ±) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} Œ± _inst_2) Œº (Metric.closedBall.{u1} Œ± (MetricSpace.toPseudoMetricSpace.{u1} Œ± _inst_1) x (HMul.hMul.{0, 0, 0} Real Real Real (instHMul.{0} Real Real.hasMul) t Œµ))) (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) C) (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} Œ± _inst_2) (fun (_x : MeasureTheory.Measure.{u1} Œ± _inst_2) => (Set.{u1} Œ±) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} Œ± _inst_2) Œº (Metric.closedBall.{u1} Œ± (MetricSpace.toPseudoMetricSpace.{u1} Œ± _inst_1) x Œµ))))) (nhdsWithin.{0} Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) (Set.Ioi.{0} Real Real.preorder (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))))))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : MetricSpace.{u1} Œ±] [_inst_2 : MeasurableSpace.{u1} Œ±] (Œº : MeasureTheory.Measure.{u1} Œ± _inst_2) [_inst_3 : IsUnifLocDoublingMeasure.{u1} Œ± _inst_1 _inst_2 Œº] (K : Real), Exists.{1} NNReal (fun (C : NNReal) => Filter.Eventually.{0} Real (fun (Œµ : Real) => forall (x : Œ±) (t : Real), (LE.le.{0} Real Real.instLEReal t K) -> (LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (OmegaCompletePartialOrder.toPartialOrder.{0} ENNReal (CompleteLattice.instOmegaCompletePartialOrder.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (MeasureTheory.OuterMeasure.measureOf.{u1} Œ± (MeasureTheory.Measure.toOuterMeasure.{u1} Œ± _inst_2 Œº) (Metric.closedBall.{u1} Œ± (MetricSpace.toPseudoMetricSpace.{u1} Œ± _inst_1) x (HMul.hMul.{0, 0, 0} Real Real Real (instHMul.{0} Real Real.instMulReal) t Œµ))) (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) (ENNReal.some C) (MeasureTheory.OuterMeasure.measureOf.{u1} Œ± (MeasureTheory.Measure.toOuterMeasure.{u1} Œ± _inst_2 Œº) (Metric.closedBall.{u1} Œ± (MetricSpace.toPseudoMetricSpace.{u1} Œ± _inst_1) x Œµ))))) (nhdsWithin.{0} Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) (Set.Ioi.{0} Real Real.instPreorderReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)))))
Case conversion may be inaccurate. Consider using '#align is_unif_loc_doubling_measure.exists_eventually_forall_measure_closed_ball_le_mul IsUnifLocDoublingMeasure.exists_eventually_forall_measure_closedBall_le_mul‚Çì'. -/
theorem exists_eventually_forall_measure_closedBall_le_mul (K : ‚Ñù) :
    ‚àÉ C : ‚Ñù‚â•0,
      ‚àÄ·∂† Œµ in ùìù[>] 0, ‚àÄ (x t) (ht : t ‚â§ K), Œº (closedBall x (t * Œµ)) ‚â§ C * Œº (closedBall x Œµ) :=
  by
  let C := doubling_constant Œº
  have hŒº :
    ‚àÄ n : ‚Ñï, ‚àÄ·∂† Œµ in ùìù[>] 0, ‚àÄ x, Œº (closed_ball x (2 ^ n * Œµ)) ‚â§ ‚Üë(C ^ n) * Œº (closed_ball x Œµ) :=
    by
    intro n
    induction' n with n ih
    ¬∑ simp
    replace ih := eventually_nhdsWithin_pos_mul_left (two_pos : 0 < (2 : ‚Ñù)) ih
    refine' (ih.and (exists_measure_closed_ball_le_mul' Œº)).mono fun Œµ hŒµ x => _
    calc
      Œº (closed_ball x (2 ^ (n + 1) * Œµ)) = Œº (closed_ball x (2 ^ n * (2 * Œµ))) := by
        rw [pow_succ', mul_assoc]
      _ ‚â§ ‚Üë(C ^ n) * Œº (closed_ball x (2 * Œµ)) := (hŒµ.1 x)
      _ ‚â§ ‚Üë(C ^ n) * (C * Œº (closed_ball x Œµ)) := (ENNReal.mul_left_mono (hŒµ.2 x))
      _ = ‚Üë(C ^ (n + 1)) * Œº (closed_ball x Œµ) := by rw [‚Üê mul_assoc, pow_succ', ENNReal.coe_mul]
      
  rcases lt_or_le K 1 with (hK | hK)
  ¬∑ refine' ‚ü®1, _‚ü©
    simp only [ENNReal.coe_one, one_mul]
    exact
      eventually_mem_nhds_within.mono fun Œµ hŒµ x t ht =>
        measure_mono <| closed_ball_subset_closed_ball (by nlinarith [mem_Ioi.mp hŒµ])
  ¬∑ refine'
      ‚ü®C ^ ‚åàReal.logb 2 K‚åâ‚Çä,
        ((hŒº ‚åàReal.logb 2 K‚åâ‚Çä).And eventually_mem_nhdsWithin).mono fun Œµ hŒµ x t ht =>
          le_trans (measure_mono <| closed_ball_subset_closed_ball _) (hŒµ.1 x)‚ü©
    refine' mul_le_mul_of_nonneg_right (ht.trans _) (mem_Ioi.mp hŒµ.2).le
    conv_lhs => rw [‚Üê Real.rpow_logb two_pos (by norm_num) (by linarith : 0 < K)]
    rw [‚Üê Real.rpow_nat_cast]
    exact Real.rpow_le_rpow_of_exponent_le one_le_two (Nat.le_ceil (Real.logb 2 K))
#align is_unif_loc_doubling_measure.exists_eventually_forall_measure_closed_ball_le_mul IsUnifLocDoublingMeasure.exists_eventually_forall_measure_closedBall_le_mul

#print IsUnifLocDoublingMeasure.scalingConstantOf /-
/-- A variant of `is_unif_loc_doubling_measure.doubling_constant` which allows for scaling the
radius by values other than `2`. -/
def scalingConstantOf (K : ‚Ñù) : ‚Ñù‚â•0 :=
  max (Classical.choose <| exists_eventually_forall_measure_closedBall_le_mul Œº K) 1
#align is_unif_loc_doubling_measure.scaling_constant_of IsUnifLocDoublingMeasure.scalingConstantOf
-/

/- warning: is_unif_loc_doubling_measure.one_le_scaling_constant_of -> IsUnifLocDoublingMeasure.one_le_scalingConstantOf is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : MetricSpace.{u1} Œ±] [_inst_2 : MeasurableSpace.{u1} Œ±] (Œº : MeasureTheory.Measure.{u1} Œ± _inst_2) [_inst_3 : IsUnifLocDoublingMeasure.{u1} Œ± _inst_1 _inst_2 Œº] (K : Real), LE.le.{0} NNReal (Preorder.toHasLe.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (OrderedCancelAddCommMonoid.toPartialOrder.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)))) (OfNat.ofNat.{0} NNReal 1 (OfNat.mk.{0} NNReal 1 (One.one.{0} NNReal (AddMonoidWithOne.toOne.{0} NNReal (AddCommMonoidWithOne.toAddMonoidWithOne.{0} NNReal (NonAssocSemiring.toAddCommMonoidWithOne.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal NNReal.semiring))))))) (IsUnifLocDoublingMeasure.scalingConstantOf.{u1} Œ± _inst_1 _inst_2 Œº _inst_3 K)
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : MetricSpace.{u1} Œ±] [_inst_2 : MeasurableSpace.{u1} Œ±] (Œº : MeasureTheory.Measure.{u1} Œ± _inst_2) [_inst_3 : IsUnifLocDoublingMeasure.{u1} Œ± _inst_1 _inst_2 Œº] (K : Real), LE.le.{0} NNReal (Preorder.toLE.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (StrictOrderedSemiring.toPartialOrder.{0} NNReal instNNRealStrictOrderedSemiring))) (OfNat.ofNat.{0} NNReal 1 (One.toOfNat1.{0} NNReal instNNRealOne)) (IsUnifLocDoublingMeasure.scalingConstantOf.{u1} Œ± _inst_1 _inst_2 Œº _inst_3 K)
Case conversion may be inaccurate. Consider using '#align is_unif_loc_doubling_measure.one_le_scaling_constant_of IsUnifLocDoublingMeasure.one_le_scalingConstantOf‚Çì'. -/
@[simp]
theorem one_le_scalingConstantOf (K : ‚Ñù) : 1 ‚â§ scalingConstantOf Œº K :=
  le_max_of_le_right <| le_refl 1
#align is_unif_loc_doubling_measure.one_le_scaling_constant_of IsUnifLocDoublingMeasure.one_le_scalingConstantOf

/- warning: is_unif_loc_doubling_measure.eventually_measure_mul_le_scaling_constant_of_mul -> IsUnifLocDoublingMeasure.eventually_measure_mul_le_scalingConstantOf_mul is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : MetricSpace.{u1} Œ±] [_inst_2 : MeasurableSpace.{u1} Œ±] (Œº : MeasureTheory.Measure.{u1} Œ± _inst_2) [_inst_3 : IsUnifLocDoublingMeasure.{u1} Œ± _inst_1 _inst_2 Œº] (K : Real), Exists.{1} Real (fun (R : Real) => And (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) R) (forall (x : Œ±) (t : Real) (r : Real), (Membership.Mem.{0, 0} Real (Set.{0} Real) (Set.hasMem.{0} Real) t (Set.Ioc.{0} Real Real.preorder (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) K)) -> (LE.le.{0} Real Real.hasLe r R) -> (LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} Œ± _inst_2) (fun (_x : MeasureTheory.Measure.{u1} Œ± _inst_2) => (Set.{u1} Œ±) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} Œ± _inst_2) Œº (Metric.closedBall.{u1} Œ± (MetricSpace.toPseudoMetricSpace.{u1} Œ± _inst_1) x (HMul.hMul.{0, 0, 0} Real Real Real (instHMul.{0} Real Real.hasMul) t r))) (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) (IsUnifLocDoublingMeasure.scalingConstantOf.{u1} Œ± _inst_1 _inst_2 Œº _inst_3 K)) (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} Œ± _inst_2) (fun (_x : MeasureTheory.Measure.{u1} Œ± _inst_2) => (Set.{u1} Œ±) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} Œ± _inst_2) Œº (Metric.closedBall.{u1} Œ± (MetricSpace.toPseudoMetricSpace.{u1} Œ± _inst_1) x r))))))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : MetricSpace.{u1} Œ±] [_inst_2 : MeasurableSpace.{u1} Œ±] (Œº : MeasureTheory.Measure.{u1} Œ± _inst_2) [_inst_3 : IsUnifLocDoublingMeasure.{u1} Œ± _inst_1 _inst_2 Œº] (K : Real), Exists.{1} Real (fun (R : Real) => And (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) R) (forall (x : Œ±) (t : Real) (r : Real), (Membership.mem.{0, 0} Real (Set.{0} Real) (Set.instMembershipSet.{0} Real) t (Set.Ioc.{0} Real Real.instPreorderReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) K)) -> (LE.le.{0} Real Real.instLEReal r R) -> (LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (OmegaCompletePartialOrder.toPartialOrder.{0} ENNReal (CompleteLattice.instOmegaCompletePartialOrder.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (MeasureTheory.OuterMeasure.measureOf.{u1} Œ± (MeasureTheory.Measure.toOuterMeasure.{u1} Œ± _inst_2 Œº) (Metric.closedBall.{u1} Œ± (MetricSpace.toPseudoMetricSpace.{u1} Œ± _inst_1) x (HMul.hMul.{0, 0, 0} Real Real Real (instHMul.{0} Real Real.instMulReal) t r))) (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) (ENNReal.some (IsUnifLocDoublingMeasure.scalingConstantOf.{u1} Œ± _inst_1 _inst_2 Œº _inst_3 K)) (MeasureTheory.OuterMeasure.measureOf.{u1} Œ± (MeasureTheory.Measure.toOuterMeasure.{u1} Œ± _inst_2 Œº) (Metric.closedBall.{u1} Œ± (MetricSpace.toPseudoMetricSpace.{u1} Œ± _inst_1) x r))))))
Case conversion may be inaccurate. Consider using '#align is_unif_loc_doubling_measure.eventually_measure_mul_le_scaling_constant_of_mul IsUnifLocDoublingMeasure.eventually_measure_mul_le_scalingConstantOf_mul‚Çì'. -/
theorem eventually_measure_mul_le_scalingConstantOf_mul (K : ‚Ñù) :
    ‚àÉ R : ‚Ñù,
      0 < R ‚àß
        ‚àÄ (x t r) (ht : t ‚àà Ioc 0 K) (hr : r ‚â§ R),
          Œº (closedBall x (t * r)) ‚â§ scalingConstantOf Œº K * Œº (closedBall x r) :=
  by
  have h := Classical.choose_spec (exists_eventually_forall_measure_closed_ball_le_mul Œº K)
  rcases mem_nhdsWithin_Ioi_iff_exists_Ioc_subset.1 h with ‚ü®R, Rpos, hR‚ü©
  refine' ‚ü®R, Rpos, fun x t r ht hr => _‚ü©
  rcases lt_trichotomy r 0 with (rneg | rfl | rpos)
  ¬∑ have : t * r < 0 := mul_neg_of_pos_of_neg ht.1 rneg
    simp only [closed_ball_eq_empty.2 this, measure_empty, zero_le']
  ¬∑ simp only [MulZeroClass.mul_zero, closed_ball_zero]
    refine' le_mul_of_one_le_of_le _ le_rfl
    apply ENNReal.one_le_coe_iff.2 (le_max_right _ _)
  ¬∑ apply (hR ‚ü®rpos, hr‚ü© x t ht.2).trans _
    exact mul_le_mul_right' (ENNReal.coe_le_coe.2 (le_max_left _ _)) _
#align is_unif_loc_doubling_measure.eventually_measure_mul_le_scaling_constant_of_mul IsUnifLocDoublingMeasure.eventually_measure_mul_le_scalingConstantOf_mul

/- warning: is_unif_loc_doubling_measure.eventually_measure_le_scaling_constant_mul -> IsUnifLocDoublingMeasure.eventually_measure_le_scaling_constant_mul is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : MetricSpace.{u1} Œ±] [_inst_2 : MeasurableSpace.{u1} Œ±] (Œº : MeasureTheory.Measure.{u1} Œ± _inst_2) [_inst_3 : IsUnifLocDoublingMeasure.{u1} Œ± _inst_1 _inst_2 Œº] (K : Real), Filter.Eventually.{0} Real (fun (r : Real) => forall (x : Œ±), LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} Œ± _inst_2) (fun (_x : MeasureTheory.Measure.{u1} Œ± _inst_2) => (Set.{u1} Œ±) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} Œ± _inst_2) Œº (Metric.closedBall.{u1} Œ± (MetricSpace.toPseudoMetricSpace.{u1} Œ± _inst_1) x (HMul.hMul.{0, 0, 0} Real Real Real (instHMul.{0} Real Real.hasMul) K r))) (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) (IsUnifLocDoublingMeasure.scalingConstantOf.{u1} Œ± _inst_1 _inst_2 Œº _inst_3 K)) (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} Œ± _inst_2) (fun (_x : MeasureTheory.Measure.{u1} Œ± _inst_2) => (Set.{u1} Œ±) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} Œ± _inst_2) Œº (Metric.closedBall.{u1} Œ± (MetricSpace.toPseudoMetricSpace.{u1} Œ± _inst_1) x r)))) (nhdsWithin.{0} Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) (Set.Ioi.{0} Real Real.preorder (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero)))))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : MetricSpace.{u1} Œ±] [_inst_2 : MeasurableSpace.{u1} Œ±] (Œº : MeasureTheory.Measure.{u1} Œ± _inst_2) [_inst_3 : IsUnifLocDoublingMeasure.{u1} Œ± _inst_1 _inst_2 Œº] (K : Real), Filter.Eventually.{0} Real (fun (r : Real) => forall (x : Œ±), LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (OmegaCompletePartialOrder.toPartialOrder.{0} ENNReal (CompleteLattice.instOmegaCompletePartialOrder.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (MeasureTheory.OuterMeasure.measureOf.{u1} Œ± (MeasureTheory.Measure.toOuterMeasure.{u1} Œ± _inst_2 Œº) (Metric.closedBall.{u1} Œ± (MetricSpace.toPseudoMetricSpace.{u1} Œ± _inst_1) x (HMul.hMul.{0, 0, 0} Real Real Real (instHMul.{0} Real Real.instMulReal) K r))) (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) (ENNReal.some (IsUnifLocDoublingMeasure.scalingConstantOf.{u1} Œ± _inst_1 _inst_2 Œº _inst_3 K)) (MeasureTheory.OuterMeasure.measureOf.{u1} Œ± (MeasureTheory.Measure.toOuterMeasure.{u1} Œ± _inst_2 Œº) (Metric.closedBall.{u1} Œ± (MetricSpace.toPseudoMetricSpace.{u1} Œ± _inst_1) x r)))) (nhdsWithin.{0} Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) (Set.Ioi.{0} Real Real.instPreorderReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal))))
Case conversion may be inaccurate. Consider using '#align is_unif_loc_doubling_measure.eventually_measure_le_scaling_constant_mul IsUnifLocDoublingMeasure.eventually_measure_le_scaling_constant_mul‚Çì'. -/
theorem eventually_measure_le_scaling_constant_mul (K : ‚Ñù) :
    ‚àÄ·∂† r in ùìù[>] 0, ‚àÄ x, Œº (closedBall x (K * r)) ‚â§ scalingConstantOf Œº K * Œº (closedBall x r) :=
  by
  filter_upwards [Classical.choose_spec
      (exists_eventually_forall_measure_closed_ball_le_mul Œº K)]with r hr x
  exact (hr x K le_rfl).trans (mul_le_mul_right' (ENNReal.coe_le_coe.2 (le_max_left _ _)) _)
#align is_unif_loc_doubling_measure.eventually_measure_le_scaling_constant_mul IsUnifLocDoublingMeasure.eventually_measure_le_scaling_constant_mul

/- warning: is_unif_loc_doubling_measure.eventually_measure_le_scaling_constant_mul' -> IsUnifLocDoublingMeasure.eventually_measure_le_scaling_constant_mul' is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : MetricSpace.{u1} Œ±] [_inst_2 : MeasurableSpace.{u1} Œ±] (Œº : MeasureTheory.Measure.{u1} Œ± _inst_2) [_inst_3 : IsUnifLocDoublingMeasure.{u1} Œ± _inst_1 _inst_2 Œº] (K : Real), (LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) K) -> (Filter.Eventually.{0} Real (fun (r : Real) => forall (x : Œ±), LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} Œ± _inst_2) (fun (_x : MeasureTheory.Measure.{u1} Œ± _inst_2) => (Set.{u1} Œ±) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} Œ± _inst_2) Œº (Metric.closedBall.{u1} Œ± (MetricSpace.toPseudoMetricSpace.{u1} Œ± _inst_1) x r)) (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) (IsUnifLocDoublingMeasure.scalingConstantOf.{u1} Œ± _inst_1 _inst_2 Œº _inst_3 (Inv.inv.{0} Real Real.hasInv K))) (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} Œ± _inst_2) (fun (_x : MeasureTheory.Measure.{u1} Œ± _inst_2) => (Set.{u1} Œ±) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} Œ± _inst_2) Œº (Metric.closedBall.{u1} Œ± (MetricSpace.toPseudoMetricSpace.{u1} Œ± _inst_1) x (HMul.hMul.{0, 0, 0} Real Real Real (instHMul.{0} Real Real.hasMul) K r))))) (nhdsWithin.{0} Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) (Set.Ioi.{0} Real Real.preorder (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))))))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : MetricSpace.{u1} Œ±] [_inst_2 : MeasurableSpace.{u1} Œ±] (Œº : MeasureTheory.Measure.{u1} Œ± _inst_2) [_inst_3 : IsUnifLocDoublingMeasure.{u1} Œ± _inst_1 _inst_2 Œº] (K : Real), (LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) K) -> (Filter.Eventually.{0} Real (fun (r : Real) => forall (x : Œ±), LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (OmegaCompletePartialOrder.toPartialOrder.{0} ENNReal (CompleteLattice.instOmegaCompletePartialOrder.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (MeasureTheory.OuterMeasure.measureOf.{u1} Œ± (MeasureTheory.Measure.toOuterMeasure.{u1} Œ± _inst_2 Œº) (Metric.closedBall.{u1} Œ± (MetricSpace.toPseudoMetricSpace.{u1} Œ± _inst_1) x r)) (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) (ENNReal.some (IsUnifLocDoublingMeasure.scalingConstantOf.{u1} Œ± _inst_1 _inst_2 Œº _inst_3 (Inv.inv.{0} Real Real.instInvReal K))) (MeasureTheory.OuterMeasure.measureOf.{u1} Œ± (MeasureTheory.Measure.toOuterMeasure.{u1} Œ± _inst_2 Œº) (Metric.closedBall.{u1} Œ± (MetricSpace.toPseudoMetricSpace.{u1} Œ± _inst_1) x (HMul.hMul.{0, 0, 0} Real Real Real (instHMul.{0} Real Real.instMulReal) K r))))) (nhdsWithin.{0} Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) (Set.Ioi.{0} Real Real.instPreorderReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)))))
Case conversion may be inaccurate. Consider using '#align is_unif_loc_doubling_measure.eventually_measure_le_scaling_constant_mul' IsUnifLocDoublingMeasure.eventually_measure_le_scaling_constant_mul'‚Çì'. -/
theorem eventually_measure_le_scaling_constant_mul' (K : ‚Ñù) (hK : 0 < K) :
    ‚àÄ·∂† r in ùìù[>] 0, ‚àÄ x, Œº (closedBall x r) ‚â§ scalingConstantOf Œº K‚Åª¬π * Œº (closedBall x (K * r)) :=
  by
  convert eventually_nhdsWithin_pos_mul_left hK (eventually_measure_le_scaling_constant_mul Œº K‚Åª¬π)
  ext
  simp [inv_mul_cancel_left‚ÇÄ hK.ne']
#align is_unif_loc_doubling_measure.eventually_measure_le_scaling_constant_mul' IsUnifLocDoublingMeasure.eventually_measure_le_scaling_constant_mul'

#print IsUnifLocDoublingMeasure.scalingScaleOf /-
/-- A scale below which the doubling measure `Œº` satisfies good rescaling properties when one
multiplies the radius of balls by at most `K`, as stated
in `measure_mul_le_scaling_constant_of_mul`. -/
def scalingScaleOf (K : ‚Ñù) : ‚Ñù :=
  (eventually_measure_mul_le_scalingConstantOf_mul Œº K).some
#align is_unif_loc_doubling_measure.scaling_scale_of IsUnifLocDoublingMeasure.scalingScaleOf
-/

/- warning: is_unif_loc_doubling_measure.scaling_scale_of_pos -> IsUnifLocDoublingMeasure.scalingScaleOf_pos is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : MetricSpace.{u1} Œ±] [_inst_2 : MeasurableSpace.{u1} Œ±] (Œº : MeasureTheory.Measure.{u1} Œ± _inst_2) [_inst_3 : IsUnifLocDoublingMeasure.{u1} Œ± _inst_1 _inst_2 Œº] (K : Real), LT.lt.{0} Real Real.hasLt (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) (IsUnifLocDoublingMeasure.scalingScaleOf.{u1} Œ± _inst_1 _inst_2 Œº _inst_3 K)
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : MetricSpace.{u1} Œ±] [_inst_2 : MeasurableSpace.{u1} Œ±] (Œº : MeasureTheory.Measure.{u1} Œ± _inst_2) [_inst_3 : IsUnifLocDoublingMeasure.{u1} Œ± _inst_1 _inst_2 Œº] (K : Real), LT.lt.{0} Real Real.instLTReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) (IsUnifLocDoublingMeasure.scalingScaleOf.{u1} Œ± _inst_1 _inst_2 Œº _inst_3 K)
Case conversion may be inaccurate. Consider using '#align is_unif_loc_doubling_measure.scaling_scale_of_pos IsUnifLocDoublingMeasure.scalingScaleOf_pos‚Çì'. -/
theorem scalingScaleOf_pos (K : ‚Ñù) : 0 < scalingScaleOf Œº K :=
  (eventually_measure_mul_le_scalingConstantOf_mul Œº K).choose_spec.1
#align is_unif_loc_doubling_measure.scaling_scale_of_pos IsUnifLocDoublingMeasure.scalingScaleOf_pos

/- warning: is_unif_loc_doubling_measure.measure_mul_le_scaling_constant_of_mul -> IsUnifLocDoublingMeasure.measure_mul_le_scalingConstantOf_mul is a dubious translation:
lean 3 declaration is
  forall {Œ± : Type.{u1}} [_inst_1 : MetricSpace.{u1} Œ±] [_inst_2 : MeasurableSpace.{u1} Œ±] (Œº : MeasureTheory.Measure.{u1} Œ± _inst_2) [_inst_3 : IsUnifLocDoublingMeasure.{u1} Œ± _inst_1 _inst_2 Œº] {K : Real} {x : Œ±} {t : Real} {r : Real}, (Membership.Mem.{0, 0} Real (Set.{0} Real) (Set.hasMem.{0} Real) t (Set.Ioc.{0} Real Real.preorder (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero))) K)) -> (LE.le.{0} Real Real.hasLe r (IsUnifLocDoublingMeasure.scalingScaleOf.{u1} Œ± _inst_1 _inst_2 Œº _inst_3 K)) -> (LE.le.{0} ENNReal (Preorder.toHasLe.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} Œ± _inst_2) (fun (_x : MeasureTheory.Measure.{u1} Œ± _inst_2) => (Set.{u1} Œ±) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} Œ± _inst_2) Œº (Metric.closedBall.{u1} Œ± (MetricSpace.toPseudoMetricSpace.{u1} Œ± _inst_1) x (HMul.hMul.{0, 0, 0} Real Real Real (instHMul.{0} Real Real.hasMul) t r))) (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (Distrib.toHasMul.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTC‚Çì.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) (IsUnifLocDoublingMeasure.scalingConstantOf.{u1} Œ± _inst_1 _inst_2 Œº _inst_3 K)) (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} Œ± _inst_2) (fun (_x : MeasureTheory.Measure.{u1} Œ± _inst_2) => (Set.{u1} Œ±) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} Œ± _inst_2) Œº (Metric.closedBall.{u1} Œ± (MetricSpace.toPseudoMetricSpace.{u1} Œ± _inst_1) x r))))
but is expected to have type
  forall {Œ± : Type.{u1}} [_inst_1 : MetricSpace.{u1} Œ±] [_inst_2 : MeasurableSpace.{u1} Œ±] (Œº : MeasureTheory.Measure.{u1} Œ± _inst_2) [_inst_3 : IsUnifLocDoublingMeasure.{u1} Œ± _inst_1 _inst_2 Œº] {K : Real} {x : Œ±} {t : Real} {r : Real}, (Membership.mem.{0, 0} Real (Set.{0} Real) (Set.instMembershipSet.{0} Real) t (Set.Ioc.{0} Real Real.instPreorderReal (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal)) K)) -> (LE.le.{0} Real Real.instLEReal r (IsUnifLocDoublingMeasure.scalingScaleOf.{u1} Œ± _inst_1 _inst_2 Œº _inst_3 K)) -> (LE.le.{0} ENNReal (Preorder.toLE.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (OmegaCompletePartialOrder.toPartialOrder.{0} ENNReal (CompleteLattice.instOmegaCompletePartialOrder.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) (MeasureTheory.OuterMeasure.measureOf.{u1} Œ± (MeasureTheory.Measure.toOuterMeasure.{u1} Œ± _inst_2 Œº) (Metric.closedBall.{u1} Œ± (MetricSpace.toPseudoMetricSpace.{u1} Œ± _inst_1) x (HMul.hMul.{0, 0, 0} Real Real Real (instHMul.{0} Real Real.instMulReal) t r))) (HMul.hMul.{0, 0, 0} ENNReal ENNReal ENNReal (instHMul.{0} ENNReal (CanonicallyOrderedCommSemiring.toMul.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)) (ENNReal.some (IsUnifLocDoublingMeasure.scalingConstantOf.{u1} Œ± _inst_1 _inst_2 Œº _inst_3 K)) (MeasureTheory.OuterMeasure.measureOf.{u1} Œ± (MeasureTheory.Measure.toOuterMeasure.{u1} Œ± _inst_2 Œº) (Metric.closedBall.{u1} Œ± (MetricSpace.toPseudoMetricSpace.{u1} Œ± _inst_1) x r))))
Case conversion may be inaccurate. Consider using '#align is_unif_loc_doubling_measure.measure_mul_le_scaling_constant_of_mul IsUnifLocDoublingMeasure.measure_mul_le_scalingConstantOf_mul‚Çì'. -/
theorem measure_mul_le_scalingConstantOf_mul {K : ‚Ñù} {x : Œ±} {t r : ‚Ñù} (ht : t ‚àà Ioc 0 K)
    (hr : r ‚â§ scalingScaleOf Œº K) :
    Œº (closedBall x (t * r)) ‚â§ scalingConstantOf Œº K * Œº (closedBall x r) :=
  (eventually_measure_mul_le_scalingConstantOf_mul Œº K).choose_spec.2 x t r ht hr
#align is_unif_loc_doubling_measure.measure_mul_le_scaling_constant_of_mul IsUnifLocDoublingMeasure.measure_mul_le_scalingConstantOf_mul

end IsUnifLocDoublingMeasure

