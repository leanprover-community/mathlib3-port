/-
Copyright (c) 2022 Oliver Nash. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Oliver Nash
-/
import Mathbin.MeasureTheory.Measure.MeasureSpace
import Mathbin.Analysis.SpecialFunctions.Log.Base

/-!
# Doubling measures

A doubling measure `Œº` on a metric space is a measure for which there exists a constant `C` such
that for all sufficiently small radii `Œµ`, and for any centre, the measure of a ball of radius
`2 * Œµ` is bounded by `C` times the measure of the concentric ball of radius `Œµ`.

This file records basic files on doubling measures.

## Main definitions

  * `is_doubling_measure`: the definition of a doubling measure (as a typeclass).
  * `is_doubling_measure.doubling_constant`: a function yielding the doubling constant `C` appearing
  in the definition of a doubling measure.
-/


noncomputable section

open Set Filter Metric MeasureTheory TopologicalSpace

open Nnreal TopologicalSpace

/- ./././Mathport/Syntax/Translate/Command.lean:340:30: infer kinds are unsupported in Lean 4: #[`exists_measure_closed_ball_le_mul] [] -/
/-- A measure `Œº` is said to be a doubling measure if there exists a constant `C` such that for
all sufficiently small radii `Œµ`, and for any centre, the measure of a ball of radius `2 * Œµ` is
bounded by `C` times the measure of the concentric ball of radius `Œµ`.

Note: it is important that this definition makes a demand only for sufficiently small `Œµ`. For
example we want hyperbolic space to carry the instance `is_doubling_measure volume` but volumes grow
exponentially in hyperbolic space. To be really explicit, consider the hyperbolic plane of
curvature -1, the area of a disc of radius `Œµ` is `A(Œµ) = 2œÄ(cosh(Œµ) - 1)` so `A(2Œµ)/A(Œµ) ~ exp(Œµ)`.
-/
class IsDoublingMeasure {Œ± : Type _} [MetricSpace Œ±] [MeasurableSpace Œ±] (Œº : Measure Œ±) where
  exists_measure_closed_ball_le_mul : ‚àÉ C : ‚Ñù‚â•0, ‚àÄ·∂† Œµ in ùìù[>] 0, ‚àÄ x, Œº (ClosedBall x (2 * Œµ)) ‚â§ C * Œº (ClosedBall x Œµ)

namespace IsDoublingMeasure

variable {Œ± : Type _} [MetricSpace Œ±] [MeasurableSpace Œ±] (Œº : Measure Œ±) [IsDoublingMeasure Œº]

/-- A doubling constant for a doubling measure.

See also `is_doubling_measure.scaling_constant_of`. -/
def doublingConstant : ‚Ñù‚â•0 :=
  Classical.choose <| exists_measure_closed_ball_le_mul Œº

theorem exists_measure_closed_ball_le_mul' :
    ‚àÄ·∂† Œµ in ùìù[>] 0, ‚àÄ x, Œº (ClosedBall x (2 * Œµ)) ‚â§ doublingConstant Œº * Œº (ClosedBall x Œµ) :=
  Classical.choose_spec <| exists_measure_closed_ball_le_mul Œº

theorem exists_eventually_forall_measure_closed_ball_le_mul (K : ‚Ñù) :
    ‚àÉ C : ‚Ñù‚â•0, ‚àÄ·∂† Œµ in ùìù[>] 0, ‚àÄ (x t) (ht : t ‚â§ K), Œº (ClosedBall x (t * Œµ)) ‚â§ C * Œº (ClosedBall x Œµ) := by
  let C := doubling_constant Œº
  have hŒº : ‚àÄ n : ‚Ñï, ‚àÄ·∂† Œµ in ùìù[>] 0, ‚àÄ x, Œº (closed_ball x (2 ^ n * Œµ)) ‚â§ ‚Üë(C ^ n) * Œº (closed_ball x Œµ) := by
    intro n
    induction' n with n ih
    ¬∑ simp
      
    replace ih := eventually_nhds_within_pos_mul_left (two_pos : 0 < (2 : ‚Ñù)) ih
    refine' (ih.and (exists_measure_closed_ball_le_mul' Œº)).mono fun Œµ hŒµ x => _
    calc
      Œº (closed_ball x (2 ^ (n + 1) * Œµ)) = Œº (closed_ball x (2 ^ n * (2 * Œµ))) := by rw [pow_succ', mul_assoc]
      _ ‚â§ ‚Üë(C ^ n) * Œº (closed_ball x (2 * Œµ)) := hŒµ.1 x
      _ ‚â§ ‚Üë(C ^ n) * (C * Œº (closed_ball x Œµ)) := Ennreal.mul_left_mono (hŒµ.2 x)
      _ = ‚Üë(C ^ (n + 1)) * Œº (closed_ball x Œµ) := by rw [‚Üê mul_assoc, pow_succ', Ennreal.coe_mul]
      
  rcases lt_or_le K 1 with (hK | hK)
  ¬∑ refine' ‚ü®1, _‚ü©
    simp only [Ennreal.coe_one, one_mul]
    exact
      eventually_mem_nhds_within.mono fun Œµ hŒµ x t ht =>
        measure_mono <| closed_ball_subset_closed_ball (by nlinarith [mem_Ioi.mp hŒµ])
    
  ¬∑ refine'
      ‚ü®C ^ ‚åàReal.logb 2 K‚åâ‚Çä,
        ((hŒº ‚åàReal.logb 2 K‚åâ‚Çä).And eventually_mem_nhds_within).mono fun Œµ hŒµ x t ht =>
          le_trans (measure_mono <| closed_ball_subset_closed_ball _) (hŒµ.1 x)‚ü©
    refine' mul_le_mul_of_nonneg_right (ht.trans _) (mem_Ioi.mp hŒµ.2).le
    conv_lhs => rw [‚Üê Real.rpow_logb two_pos (by norm_num) (by linarith : 0 < K)]
    rw [‚Üê Real.rpow_nat_cast]
    exact Real.rpow_le_rpow_of_exponent_le one_le_two (Nat.le_ceil (Real.logb 2 K))
    

/-- A variant of `is_doubling_measure.doubling_constant` which allows for scaling the radius by
values other than `2`. -/
def scalingConstantOf (K : ‚Ñù) : ‚Ñù‚â•0 :=
  max (Classical.choose <| exists_eventually_forall_measure_closed_ball_le_mul Œº K) 1

theorem eventually_measure_mul_le_scaling_constant_of_mul (K : ‚Ñù) :
    ‚àÉ R : ‚Ñù,
      0 < R ‚àß
        ‚àÄ (x t r) (ht : t ‚àà IocCat 0 K) (hr : r ‚â§ R),
          Œº (ClosedBall x (t * r)) ‚â§ scalingConstantOf Œº K * Œº (ClosedBall x r) :=
  by
  have h := Classical.choose_spec (exists_eventually_forall_measure_closed_ball_le_mul Œº K)
  rcases mem_nhds_within_Ioi_iff_exists_Ioc_subset.1 h with ‚ü®R, Rpos, hR‚ü©
  refine' ‚ü®R, Rpos, fun x t r ht hr => _‚ü©
  rcases lt_trichotomy r 0 with (rneg | rfl | rpos)
  ¬∑ have : t * r < 0 := mul_neg_of_pos_of_neg ht.1 rneg
    simp only [closed_ball_eq_empty.2 this, measure_empty, zero_le']
    
  ¬∑ simp only [mul_zero, closed_ball_zero]
    refine' le_mul_of_one_le_of_le _ le_rfl
    apply Ennreal.one_le_coe_iff.2 (le_max_right _ _)
    
  ¬∑ apply (hR ‚ü®rpos, hr‚ü© x t ht.2).trans _
    exact Ennreal.mul_le_mul (Ennreal.coe_le_coe.2 (le_max_left _ _)) le_rfl
    

/-- A scale below which the doubling measure `Œº` satisfies good rescaling properties when one
multiplies the radius of balls by at most `K`, as stated
in `measure_mul_le_scaling_constant_of_mul`. -/
def scalingScaleOf (K : ‚Ñù) : ‚Ñù :=
  (eventually_measure_mul_le_scaling_constant_of_mul Œº K).some

theorem scaling_scale_of_pos (K : ‚Ñù) : 0 < scalingScaleOf Œº K :=
  (eventually_measure_mul_le_scaling_constant_of_mul Œº K).some_spec.1

theorem measure_mul_le_scaling_constant_of_mul {K : ‚Ñù} {x : Œ±} {t r : ‚Ñù} (ht : t ‚àà IocCat 0 K)
    (hr : r ‚â§ scalingScaleOf Œº K) : Œº (ClosedBall x (t * r)) ‚â§ scalingConstantOf Œº K * Œº (ClosedBall x r) :=
  (eventually_measure_mul_le_scaling_constant_of_mul Œº K).some_spec.2 x t r ht hr

end IsDoublingMeasure

