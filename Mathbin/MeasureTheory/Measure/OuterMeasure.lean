/-
Copyright (c) 2017 Johannes H√∂lzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes H√∂lzl, Mario Carneiro

! This file was ported from Lean 3 source module measure_theory.measure.outer_measure
! leanprover-community/mathlib commit aba57d4d3dae35460225919dcd82fe91355162f9
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Analysis.SpecificLimits.Basic
import Mathbin.MeasureTheory.PiSystem
import Mathbin.Data.Countable.Basic
import Mathbin.Data.Fin.VecNotation
import Mathbin.Topology.Algebra.InfiniteSum

/-!
# Outer Measures

An outer measure is a function `Œº : set Œ± ‚Üí ‚Ñù‚â•0‚àû`, from the powerset of a type to the extended
nonnegative real numbers that satisfies the following conditions:
1. `Œº ‚àÖ = 0`;
2. `Œº` is monotone;
3. `Œº` is countably subadditive. This means that the outer measure of a countable union is at most
   the sum of the outer measure on the individual sets.

Note that we do not need `Œ±` to be measurable to define an outer measure.

The outer measures on a type `Œ±` form a complete lattice.

Given an arbitrary function `m : set Œ± ‚Üí ‚Ñù‚â•0‚àû` that sends `‚àÖ` to `0` we can define an outer
measure on `Œ±` that on `s` is defined to be the infimum of `‚àë·µ¢, m (s·µ¢)` for all collections of sets
`s·µ¢` that cover `s`. This is the unique maximal outer measure that is at most the given function.
We also define this for functions `m` defined on a subset of `set Œ±`, by treating the function as
having value `‚àû` outside its domain.

Given an outer measure `m`, the Carath√©odory-measurable sets are the sets `s` such that
for all sets `t` we have `m t = m (t ‚à© s) + m (t \ s)`. This forms a measurable space.

## Main definitions and statements

* `outer_measure.bounded_by` is the greatest outer measure that is at most the given function.
  If you know that the given functions sends `‚àÖ` to `0`, then `outer_measure.of_function` is a
  special case.
* `caratheodory` is the Carath√©odory-measurable space of an outer measure.
* `Inf_eq_of_function_Inf_gen` is a characterization of the infimum of outer measures.
* `induced_outer_measure` is the measure induced by a function on a subset of `set Œ±`

## References

* <https://en.wikipedia.org/wiki/Outer_measure>
* <https://en.wikipedia.org/wiki/Carath%C3%A9odory%27s_criterion>

## Tags

outer measure, Carath√©odory-measurable, Carath√©odory's criterion
-/


noncomputable section

open Set Function Filter

open TopologicalSpace (SecondCountableTopology)

open Classical BigOperators Nnreal TopologicalSpace Ennreal MeasureTheory

namespace MeasureTheory

/-- An outer measure is a countably subadditive monotone function that sends `‚àÖ` to `0`. -/
structure OuterMeasure (Œ± : Type _) where
  measureOf : Set Œ± ‚Üí ‚Ñù‚â•0‚àû
  Empty : measure_of ‚àÖ = 0
  mono : ‚àÄ {s‚ÇÅ s‚ÇÇ}, s‚ÇÅ ‚äÜ s‚ÇÇ ‚Üí measure_of s‚ÇÅ ‚â§ measure_of s‚ÇÇ
  Union_nat : ‚àÄ s : ‚Ñï ‚Üí Set Œ±, measure_of (‚ãÉ i, s i) ‚â§ ‚àë' i, measure_of (s i)
#align measure_theory.outer_measure MeasureTheory.OuterMeasure

namespace OuterMeasure

section Basic

variable {Œ± Œ≤ R R' : Type _} {ms : Set (OuterMeasure Œ±)} {m : OuterMeasure Œ±}

instance : CoeFun (OuterMeasure Œ±) fun _ => Set Œ± ‚Üí ‚Ñù‚â•0‚àû :=
  ‚ü®fun m => m.measureOf‚ü©

@[simp]
theorem measure_of_eq_coe (m : OuterMeasure Œ±) : m.measureOf = m :=
  rfl
#align measure_theory.outer_measure.measure_of_eq_coe MeasureTheory.OuterMeasure.measure_of_eq_coe

@[simp]
theorem empty' (m : OuterMeasure Œ±) : m ‚àÖ = 0 :=
  m.Empty
#align measure_theory.outer_measure.empty' MeasureTheory.OuterMeasure.empty'

theorem mono' (m : OuterMeasure Œ±) {s‚ÇÅ s‚ÇÇ} (h : s‚ÇÅ ‚äÜ s‚ÇÇ) : m s‚ÇÅ ‚â§ m s‚ÇÇ :=
  m.mono h
#align measure_theory.outer_measure.mono' MeasureTheory.OuterMeasure.mono'

theorem mono_null (m : OuterMeasure Œ±) {s t} (h : s ‚äÜ t) (ht : m t = 0) : m s = 0 :=
  nonpos_iff_eq_zero.mp <| ht ‚ñ∏ m.mono' h
#align measure_theory.outer_measure.mono_null MeasureTheory.OuterMeasure.mono_null

theorem pos_of_subset_ne_zero (m : OuterMeasure Œ±) {a b : Set Œ±} (hs : a ‚äÜ b) (hnz : m a ‚â† 0) :
    0 < m b :=
  lt_of_lt_of_le (pos_iff_ne_zero.mpr hnz) (m.mono hs)
#align
  measure_theory.outer_measure.pos_of_subset_ne_zero MeasureTheory.OuterMeasure.pos_of_subset_ne_zero

protected theorem Union (m : OuterMeasure Œ±) {Œ≤} [Countable Œ≤] (s : Œ≤ ‚Üí Set Œ±) :
    m (‚ãÉ i, s i) ‚â§ ‚àë' i, m (s i) :=
  relSuprTsum m m.Empty (¬∑ ‚â§ ¬∑) m.Union_nat s
#align measure_theory.outer_measure.Union MeasureTheory.OuterMeasure.Union

theorem Union_null [Countable Œ≤] (m : OuterMeasure Œ±) {s : Œ≤ ‚Üí Set Œ±} (h : ‚àÄ i, m (s i) = 0) :
    m (‚ãÉ i, s i) = 0 := by simpa [h] using m.Union s
#align measure_theory.outer_measure.Union_null MeasureTheory.OuterMeasure.Union_null

@[simp]
theorem Union_null_iff [Countable Œ≤] (m : OuterMeasure Œ±) {s : Œ≤ ‚Üí Set Œ±} :
    m (‚ãÉ i, s i) = 0 ‚Üî ‚àÄ i, m (s i) = 0 :=
  ‚ü®fun h i => m.mono_null (subset_Union _ _) h, m.Union_null‚ü©
#align measure_theory.outer_measure.Union_null_iff MeasureTheory.OuterMeasure.Union_null_iff

/-- A version of `Union_null_iff` for unions indexed by Props.
TODO: in the long run it would be better to combine this with `Union_null_iff` by
generalising to `Sort`. -/
@[simp]
theorem Union_null_iff' (m : OuterMeasure Œ±) {Œπ : Prop} {s : Œπ ‚Üí Set Œ±} :
    m (‚ãÉ i, s i) = 0 ‚Üî ‚àÄ i, m (s i) = 0 := by by_cases i : Œπ <;> simp [i]
#align measure_theory.outer_measure.Union_null_iff' MeasureTheory.OuterMeasure.Union_null_iff'

theorem bUnion_null_iff (m : OuterMeasure Œ±) {s : Set Œ≤} (hs : s.Countable) {t : Œ≤ ‚Üí Set Œ±} :
    m (‚ãÉ i ‚àà s, t i) = 0 ‚Üî ‚àÄ i ‚àà s, m (t i) = 0 := by
  haveI := hs.to_encodable
  rw [bUnion_eq_Union, Union_null_iff, SetCoe.forall']
#align measure_theory.outer_measure.bUnion_null_iff MeasureTheory.OuterMeasure.bUnion_null_iff

theorem sUnion_null_iff (m : OuterMeasure Œ±) {S : Set (Set Œ±)} (hS : S.Countable) :
    m (‚ãÉ‚ÇÄS) = 0 ‚Üî ‚àÄ s ‚àà S, m s = 0 := by rw [sUnion_eq_bUnion, m.bUnion_null_iff hS]
#align measure_theory.outer_measure.sUnion_null_iff MeasureTheory.OuterMeasure.sUnion_null_iff

protected theorem Union_finset (m : OuterMeasure Œ±) (s : Œ≤ ‚Üí Set Œ±) (t : Finset Œ≤) :
    m (‚ãÉ i ‚àà t, s i) ‚â§ ‚àë i in t, m (s i) :=
  relSuprSum m m.Empty (¬∑ ‚â§ ¬∑) m.Union_nat s t
#align measure_theory.outer_measure.Union_finset MeasureTheory.OuterMeasure.Union_finset

protected theorem union (m : OuterMeasure Œ±) (s‚ÇÅ s‚ÇÇ : Set Œ±) : m (s‚ÇÅ ‚à™ s‚ÇÇ) ‚â§ m s‚ÇÅ + m s‚ÇÇ :=
  relSupAdd m m.Empty (¬∑ ‚â§ ¬∑) m.Union_nat s‚ÇÅ s‚ÇÇ
#align measure_theory.outer_measure.union MeasureTheory.OuterMeasure.union

/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (t ¬´expr ‚äÜ ¬ª s) -/
/-- If a set has zero measure in a neighborhood of each of its points, then it has zero measure
in a second-countable space. -/
theorem null_of_locally_null [TopologicalSpace Œ±] [SecondCountableTopology Œ±] (m : OuterMeasure Œ±)
    (s : Set Œ±) (hs : ‚àÄ x ‚àà s, ‚àÉ u ‚àà ùìù[s] x, m u = 0) : m s = 0 := by
  choose! u hxu hu‚ÇÄ using hs
  obtain ‚ü®t, ts, t_count, ht‚ü© : ‚àÉ (t : _)(_ : t ‚äÜ s), t.Countable ‚àß s ‚äÜ ‚ãÉ x ‚àà t, u x :=
    TopologicalSpace.countable_cover_nhds_within hxu
  apply m.mono_null ht
  exact (m.bUnion_null_iff t_count).2 fun x hx => hu‚ÇÄ x (ts hx)
#align
  measure_theory.outer_measure.null_of_locally_null MeasureTheory.OuterMeasure.null_of_locally_null

/-- If `m s ‚â† 0`, then for some point `x ‚àà s` and any `t ‚àà ùìù[s] x` we have `0 < m t`. -/
theorem exists_mem_forall_mem_nhds_within_pos [TopologicalSpace Œ±] [SecondCountableTopology Œ±]
    (m : OuterMeasure Œ±) {s : Set Œ±} (hs : m s ‚â† 0) : ‚àÉ x ‚àà s, ‚àÄ t ‚àà ùìù[s] x, 0 < m t := by
  contrapose! hs
  simp only [nonpos_iff_eq_zero, ‚Üê exists_prop] at hs
  exact m.null_of_locally_null s hs
#align
  measure_theory.outer_measure.exists_mem_forall_mem_nhds_within_pos MeasureTheory.OuterMeasure.exists_mem_forall_mem_nhds_within_pos

/-- If `s : Œπ ‚Üí set Œ±` is a sequence of sets, `S = ‚ãÉ n, s n`, and `m (S \ s n)` tends to zero along
some nontrivial filter (usually `at_top` on `Œπ = ‚Ñï`), then `m S = ‚®Ü n, m (s n)`. -/
theorem Union_of_tendsto_zero {Œπ} (m : OuterMeasure Œ±) {s : Œπ ‚Üí Set Œ±} (l : Filter Œπ) [NeBot l]
    (h0 : Tendsto (fun k => m ((‚ãÉ n, s n) \ s k)) l (ùìù 0)) : m (‚ãÉ n, s n) = ‚®Ü n, m (s n) := by
  set S := ‚ãÉ n, s n
  set M := ‚®Ü n, m (s n)
  have hsS : ‚àÄ {k}, s k ‚äÜ S := fun k => subset_Union _ _
  refine' le_antisymm _ (supr_le fun n => m.mono hsS)
  have A : ‚àÄ k, m S ‚â§ M + m (S \ s k) := fun k =>
    calc
      m S = m (s k ‚à™ S \ s k) := by rw [union_diff_self, union_eq_self_of_subset_left hsS]
      _ ‚â§ m (s k) + m (S \ s k) := m.union _ _
      _ ‚â§ M + m (S \ s k) := add_le_add_right (le_supr _ k) _
      
  have B : tendsto (fun k => M + m (S \ s k)) l (ùìù (M + 0)) := tendsto_const_nhds.add h0
  rw [add_zero] at B
  exact ge_of_tendsto' B A
#align
  measure_theory.outer_measure.Union_of_tendsto_zero MeasureTheory.OuterMeasure.Union_of_tendsto_zero

/-- If `s : ‚Ñï ‚Üí set Œ±` is a monotone sequence of sets such that `‚àë' k, m (s (k + 1) \ s k) ‚â† ‚àû`,
then `m (‚ãÉ n, s n) = ‚®Ü n, m (s n)`. -/
theorem Union_nat_of_monotone_of_tsum_ne_top (m : OuterMeasure Œ±) {s : ‚Ñï ‚Üí Set Œ±}
    (h_mono : ‚àÄ n, s n ‚äÜ s (n + 1)) (h0 : (‚àë' k, m (s (k + 1) \ s k)) ‚â† ‚àû) :
    m (‚ãÉ n, s n) = ‚®Ü n, m (s n) := by
  refine' m.Union_of_tendsto_zero at_top _
  refine' tendsto_nhds_bot_mono' (Ennreal.tendsto_sum_nat_add _ h0) fun n => _
  refine' (m.mono _).trans (m.Union _)
  -- Current goal: `(‚ãÉ k, s k) \ s n ‚äÜ ‚ãÉ k, s (k + n + 1) \ s (k + n)`
  have h' : Monotone s := @monotone_nat_of_le_succ (Set Œ±) _ _ h_mono
  simp only [diff_subset_iff, Union_subset_iff]
  intro i x hx
  rcases Nat.findX ‚ü®i, hx‚ü© with ‚ü®j, hj, hlt‚ü©
  clear hx i
  cases' le_or_lt j n with hjn hnj
  ¬∑ exact Or.inl (h' hjn hj)
  have : j - (n + 1) + n + 1 = j := by rw [add_assoc, tsub_add_cancel_of_le hnj.nat_succ_le]
  refine' Or.inr (mem_Union.2 ‚ü®j - (n + 1), _, hlt _ _‚ü©)
  ¬∑ rwa [this]
  ¬∑ rw [‚Üê Nat.succ_le_iff, Nat.succ_eq_add_one, this]
#align
  measure_theory.outer_measure.Union_nat_of_monotone_of_tsum_ne_top MeasureTheory.OuterMeasure.Union_nat_of_monotone_of_tsum_ne_top

theorem le_inter_add_diff {m : OuterMeasure Œ±} {t : Set Œ±} (s : Set Œ±) :
    m t ‚â§ m (t ‚à© s) + m (t \ s) := by 
  convert m.union _ _
  rw [inter_union_diff t s]
#align measure_theory.outer_measure.le_inter_add_diff MeasureTheory.OuterMeasure.le_inter_add_diff

theorem diff_null (m : OuterMeasure Œ±) (s : Set Œ±) {t : Set Œ±} (ht : m t = 0) : m (s \ t) = m s :=
  by 
  refine' le_antisymm (m.mono <| diff_subset _ _) _
  calc
    m s ‚â§ m (s ‚à© t) + m (s \ t) := le_inter_add_diff _
    _ ‚â§ m t + m (s \ t) := add_le_add_right (m.mono <| inter_subset_right _ _) _
    _ = m (s \ t) := by rw [ht, zero_add]
    
#align measure_theory.outer_measure.diff_null MeasureTheory.OuterMeasure.diff_null

theorem union_null (m : OuterMeasure Œ±) {s‚ÇÅ s‚ÇÇ : Set Œ±} (h‚ÇÅ : m s‚ÇÅ = 0) (h‚ÇÇ : m s‚ÇÇ = 0) :
    m (s‚ÇÅ ‚à™ s‚ÇÇ) = 0 := by simpa [h‚ÇÅ, h‚ÇÇ] using m.union s‚ÇÅ s‚ÇÇ
#align measure_theory.outer_measure.union_null MeasureTheory.OuterMeasure.union_null

theorem coe_fn_injective : Injective fun (Œº : OuterMeasure Œ±) (s : Set Œ±) => Œº s := fun Œº‚ÇÅ Œº‚ÇÇ h =>
  by 
  cases Œº‚ÇÅ
  cases Œº‚ÇÇ
  congr
  exact h
#align measure_theory.outer_measure.coe_fn_injective MeasureTheory.OuterMeasure.coe_fn_injective

@[ext]
theorem ext {Œº‚ÇÅ Œº‚ÇÇ : OuterMeasure Œ±} (h : ‚àÄ s, Œº‚ÇÅ s = Œº‚ÇÇ s) : Œº‚ÇÅ = Œº‚ÇÇ :=
  coe_fn_injective <| funext h
#align measure_theory.outer_measure.ext MeasureTheory.OuterMeasure.ext

/-- A version of `measure_theory.outer_measure.ext` that assumes `Œº‚ÇÅ s = Œº‚ÇÇ s` on all *nonempty*
sets `s`, and gets `Œº‚ÇÅ ‚àÖ = Œº‚ÇÇ ‚àÖ` from `measure_theory.outer_measure.empty'`. -/
theorem ext_nonempty {Œº‚ÇÅ Œº‚ÇÇ : OuterMeasure Œ±} (h : ‚àÄ s : Set Œ±, s.Nonempty ‚Üí Œº‚ÇÅ s = Œº‚ÇÇ s) :
    Œº‚ÇÅ = Œº‚ÇÇ :=
  ext fun s => s.eq_empty_or_nonempty.elim (fun he => by rw [he, empty', empty']) (h s)
#align measure_theory.outer_measure.ext_nonempty MeasureTheory.OuterMeasure.ext_nonempty

instance : Zero (OuterMeasure Œ±) :=
  ‚ü®{  measureOf := fun _ => 0
      Empty := rfl
      mono := fun _ _ _ => le_refl 0
      Union_nat := fun s => zero_le _ }‚ü©

@[simp]
theorem coe_zero : ‚áë(0 : OuterMeasure Œ±) = 0 :=
  rfl
#align measure_theory.outer_measure.coe_zero MeasureTheory.OuterMeasure.coe_zero

instance : Inhabited (OuterMeasure Œ±) :=
  ‚ü®0‚ü©

instance : Add (OuterMeasure Œ±) :=
  ‚ü®fun m‚ÇÅ m‚ÇÇ =>
    { measureOf := fun s => m‚ÇÅ s + m‚ÇÇ s
      Empty := show m‚ÇÅ ‚àÖ + m‚ÇÇ ‚àÖ = 0 by simp [outer_measure.empty]
      mono := fun s‚ÇÅ s‚ÇÇ h => add_le_add (m‚ÇÅ.mono h) (m‚ÇÇ.mono h)
      Union_nat := fun s =>
        calc
          m‚ÇÅ (‚ãÉ i, s i) + m‚ÇÇ (‚ãÉ i, s i) ‚â§ (‚àë' i, m‚ÇÅ (s i)) + ‚àë' i, m‚ÇÇ (s i) :=
            add_le_add (m‚ÇÅ.Union_nat s) (m‚ÇÇ.Union_nat s)
          _ = _ := Ennreal.tsum_add.symm
           }‚ü©

@[simp]
theorem coe_add (m‚ÇÅ m‚ÇÇ : OuterMeasure Œ±) : ‚áë(m‚ÇÅ + m‚ÇÇ) = m‚ÇÅ + m‚ÇÇ :=
  rfl
#align measure_theory.outer_measure.coe_add MeasureTheory.OuterMeasure.coe_add

theorem add_apply (m‚ÇÅ m‚ÇÇ : OuterMeasure Œ±) (s : Set Œ±) : (m‚ÇÅ + m‚ÇÇ) s = m‚ÇÅ s + m‚ÇÇ s :=
  rfl
#align measure_theory.outer_measure.add_apply MeasureTheory.OuterMeasure.add_apply

section HasSmul

variable [HasSmul R ‚Ñù‚â•0‚àû] [IsScalarTower R ‚Ñù‚â•0‚àû ‚Ñù‚â•0‚àû]

variable [HasSmul R' ‚Ñù‚â•0‚àû] [IsScalarTower R' ‚Ñù‚â•0‚àû ‚Ñù‚â•0‚àû]

instance : HasSmul R (OuterMeasure Œ±) :=
  ‚ü®fun c m =>
    { measureOf := fun s => c ‚Ä¢ m s
      Empty := by rw [‚Üê smul_one_mul c (_ : ‚Ñù‚â•0‚àû), empty', mul_zero]
      mono := fun s t h => by
        rw [‚Üê smul_one_mul c (m s), ‚Üê smul_one_mul c (m t)]
        exact Ennreal.mul_left_mono (m.mono h)
      Union_nat := fun s => by
        simp_rw [‚Üê smul_one_mul c (m _), Ennreal.tsum_mul_left]
        exact Ennreal.mul_left_mono (m.Union _) }‚ü©

@[simp]
theorem coe_smul (c : R) (m : OuterMeasure Œ±) : ‚áë(c ‚Ä¢ m) = c ‚Ä¢ m :=
  rfl
#align measure_theory.outer_measure.coe_smul MeasureTheory.OuterMeasure.coe_smul

theorem smul_apply (c : R) (m : OuterMeasure Œ±) (s : Set Œ±) : (c ‚Ä¢ m) s = c ‚Ä¢ m s :=
  rfl
#align measure_theory.outer_measure.smul_apply MeasureTheory.OuterMeasure.smul_apply

instance [SMulCommClass R R' ‚Ñù‚â•0‚àû] : SMulCommClass R R' (OuterMeasure Œ±) :=
  ‚ü®fun _ _ _ => ext fun _ => smul_comm _ _ _‚ü©

instance [HasSmul R R'] [IsScalarTower R R' ‚Ñù‚â•0‚àû] : IsScalarTower R R' (OuterMeasure Œ±) :=
  ‚ü®fun _ _ _ => ext fun _ => smul_assoc _ _ _‚ü©

instance [HasSmul R·µê·µí·µñ ‚Ñù‚â•0‚àû] [IsCentralScalar R ‚Ñù‚â•0‚àû] : IsCentralScalar R (OuterMeasure Œ±) :=
  ‚ü®fun _ _ => ext fun _ => op_smul_eq_smul _ _‚ü©

end HasSmul

instance [Monoid R] [MulAction R ‚Ñù‚â•0‚àû] [IsScalarTower R ‚Ñù‚â•0‚àû ‚Ñù‚â•0‚àû] : MulAction R (OuterMeasure Œ±) :=
  Injective.mulAction _ coe_fn_injective coe_smul

instance addCommMonoid : AddCommMonoid (OuterMeasure Œ±) :=
  Injective.addCommMonoid (show OuterMeasure Œ± ‚Üí Set Œ± ‚Üí ‚Ñù‚â•0‚àû from coeFn) coe_fn_injective rfl
    (fun _ _ => rfl) fun _ _ => rfl
#align measure_theory.outer_measure.add_comm_monoid MeasureTheory.OuterMeasure.addCommMonoid

/-- `coe_fn` as an `add_monoid_hom`. -/
@[simps]
def coeFnAddMonoidHom : OuterMeasure Œ± ‚Üí+ Set Œ± ‚Üí ‚Ñù‚â•0‚àû :=
  ‚ü®coeFn, coe_zero, coe_add‚ü©
#align
  measure_theory.outer_measure.coe_fn_add_monoid_hom MeasureTheory.OuterMeasure.coeFnAddMonoidHom

instance [Monoid R] [DistribMulAction R ‚Ñù‚â•0‚àû] [IsScalarTower R ‚Ñù‚â•0‚àû ‚Ñù‚â•0‚àû] :
    DistribMulAction R (OuterMeasure Œ±) :=
  Injective.distribMulAction coeFnAddMonoidHom coe_fn_injective coe_smul

instance [Semiring R] [Module R ‚Ñù‚â•0‚àû] [IsScalarTower R ‚Ñù‚â•0‚àû ‚Ñù‚â•0‚àû] : Module R (OuterMeasure Œ±) :=
  Injective.module R coeFnAddMonoidHom coe_fn_injective coe_smul

instance : Bot (OuterMeasure Œ±) :=
  ‚ü®0‚ü©

@[simp]
theorem coe_bot : (‚ä• : OuterMeasure Œ±) = 0 :=
  rfl
#align measure_theory.outer_measure.coe_bot MeasureTheory.OuterMeasure.coe_bot

instance OuterMeasure.partialOrder :
    PartialOrder (OuterMeasure
        Œ±) where 
  le m‚ÇÅ m‚ÇÇ := ‚àÄ s, m‚ÇÅ s ‚â§ m‚ÇÇ s
  le_refl a s := le_rfl
  le_trans a b c hab hbc s := le_trans (hab s) (hbc s)
  le_antisymm a b hab hba := ext fun s => le_antisymm (hab s) (hba s)
#align
  measure_theory.outer_measure.outer_measure.partial_order MeasureTheory.OuterMeasure.OuterMeasure.partialOrder

instance OuterMeasure.orderBot : OrderBot (OuterMeasure Œ±) :=
  { OuterMeasure.hasBot with
    bot_le := fun a s => by simp only [coe_zero, Pi.zero_apply, coe_bot, zero_le] }
#align
  measure_theory.outer_measure.outer_measure.order_bot MeasureTheory.OuterMeasure.OuterMeasure.orderBot

theorem univ_eq_zero_iff (m : OuterMeasure Œ±) : m univ = 0 ‚Üî m = 0 :=
  ‚ü®fun h => bot_unique fun s => (m.mono' <| subset_univ s).trans_eq h, fun h => h.symm ‚ñ∏ rfl‚ü©
#align measure_theory.outer_measure.univ_eq_zero_iff MeasureTheory.OuterMeasure.univ_eq_zero_iff

section Supremum

instance : HasSup (OuterMeasure Œ±) :=
  ‚ü®fun ms =>
    { measureOf := fun s => ‚®Ü m ‚àà ms, (m : OuterMeasure Œ±) s
      Empty := nonpos_iff_eq_zero.1 <| supr‚ÇÇ_le fun m h => le_of_eq m.Empty
      mono := fun s‚ÇÅ s‚ÇÇ hs => supr‚ÇÇ_mono fun m hm => m.mono hs
      Union_nat := fun f =>
        supr‚ÇÇ_le fun m hm =>
          calc
            m (‚ãÉ i, f i) ‚â§ ‚àë' i : ‚Ñï, m (f i) := m.Union_nat _
            _ ‚â§ ‚àë' i, ‚®Ü m ‚àà ms, (m : OuterMeasure Œ±) (f i) :=
              Ennreal.tsum_le_tsum fun i => le_supr‚ÇÇ m hm
             }‚ü©

instance : CompleteLattice (OuterMeasure Œ±) :=
  { OuterMeasure.orderBot,
    completeLatticeOfSup (OuterMeasure Œ±) fun ms =>
      ‚ü®fun m hm s => le_supr‚ÇÇ m hm, fun m hm s => supr‚ÇÇ_le fun m' hm' => hm hm' s‚ü© with }

@[simp]
theorem Sup_apply (ms : Set (OuterMeasure Œ±)) (s : Set Œ±) :
    (sup ms) s = ‚®Ü m ‚àà ms, (m : OuterMeasure Œ±) s :=
  rfl
#align measure_theory.outer_measure.Sup_apply MeasureTheory.OuterMeasure.Sup_apply

@[simp]
theorem supr_apply {Œπ} (f : Œπ ‚Üí OuterMeasure Œ±) (s : Set Œ±) : (‚®Ü i : Œπ, f i) s = ‚®Ü i, f i s := by
  rw [supr, Sup_apply, supr_range, supr]
#align measure_theory.outer_measure.supr_apply MeasureTheory.OuterMeasure.supr_apply

@[norm_cast]
theorem coe_supr {Œπ} (f : Œπ ‚Üí OuterMeasure Œ±) : ‚áë(‚®Ü i, f i) = ‚®Ü i, f i :=
  funext fun s => by rw [supr_apply, _root_.supr_apply]
#align measure_theory.outer_measure.coe_supr MeasureTheory.OuterMeasure.coe_supr

@[simp]
theorem sup_apply (m‚ÇÅ m‚ÇÇ : OuterMeasure Œ±) (s : Set Œ±) : (m‚ÇÅ ‚äî m‚ÇÇ) s = m‚ÇÅ s ‚äî m‚ÇÇ s := by
  have := supr_apply (fun b => cond b m‚ÇÅ m‚ÇÇ) s <;> rwa [supr_bool_eq, supr_bool_eq] at this
#align measure_theory.outer_measure.sup_apply MeasureTheory.OuterMeasure.sup_apply

theorem smul_supr [HasSmul R ‚Ñù‚â•0‚àû] [IsScalarTower R ‚Ñù‚â•0‚àû ‚Ñù‚â•0‚àû] {Œπ} (f : Œπ ‚Üí OuterMeasure Œ±)
    (c : R) : (c ‚Ä¢ ‚®Ü i, f i) = ‚®Ü i, c ‚Ä¢ f i :=
  ext fun s => by
    simp only [smul_apply, supr_apply, ‚Üê smul_one_mul c (f _ _), ‚Üê smul_one_mul c (supr _),
      Ennreal.mul_supr]
#align measure_theory.outer_measure.smul_supr MeasureTheory.OuterMeasure.smul_supr

end Supremum

@[mono]
theorem mono'' {m‚ÇÅ m‚ÇÇ : OuterMeasure Œ±} {s‚ÇÅ s‚ÇÇ : Set Œ±} (hm : m‚ÇÅ ‚â§ m‚ÇÇ) (hs : s‚ÇÅ ‚äÜ s‚ÇÇ) :
    m‚ÇÅ s‚ÇÅ ‚â§ m‚ÇÇ s‚ÇÇ :=
  (hm s‚ÇÅ).trans (m‚ÇÇ.mono hs)
#align measure_theory.outer_measure.mono'' MeasureTheory.OuterMeasure.mono''

/-- The pushforward of `m` along `f`. The outer measure on `s` is defined to be `m (f ‚Åª¬π' s)`. -/
def map {Œ≤} (f : Œ± ‚Üí Œ≤) :
    OuterMeasure Œ± ‚Üí‚Çó[‚Ñù‚â•0‚àû]
      OuterMeasure
        Œ≤ where 
  toFun m :=
    { measureOf := fun s => m (f ‚Åª¬π' s)
      Empty := m.Empty
      mono := fun s t h => m.mono (preimage_mono h)
      Union_nat := fun s => by rw [preimage_Union] <;> exact m.Union_nat fun i => f ‚Åª¬π' s i }
  map_add' m‚ÇÅ m‚ÇÇ := coe_fn_injective rfl
  map_smul' c m := coe_fn_injective rfl
#align measure_theory.outer_measure.map MeasureTheory.OuterMeasure.map

@[simp]
theorem map_apply {Œ≤} (f : Œ± ‚Üí Œ≤) (m : OuterMeasure Œ±) (s : Set Œ≤) : map f m s = m (f ‚Åª¬π' s) :=
  rfl
#align measure_theory.outer_measure.map_apply MeasureTheory.OuterMeasure.map_apply

@[simp]
theorem map_id (m : OuterMeasure Œ±) : map id m = m :=
  ext fun s => rfl
#align measure_theory.outer_measure.map_id MeasureTheory.OuterMeasure.map_id

@[simp]
theorem map_map {Œ≤ Œ≥} (f : Œ± ‚Üí Œ≤) (g : Œ≤ ‚Üí Œ≥) (m : OuterMeasure Œ±) :
    map g (map f m) = map (g ‚àò f) m :=
  ext fun s => rfl
#align measure_theory.outer_measure.map_map MeasureTheory.OuterMeasure.map_map

@[mono]
theorem map_mono {Œ≤} (f : Œ± ‚Üí Œ≤) : Monotone (map f) := fun m m' h s => h _
#align measure_theory.outer_measure.map_mono MeasureTheory.OuterMeasure.map_mono

@[simp]
theorem map_sup {Œ≤} (f : Œ± ‚Üí Œ≤) (m m' : OuterMeasure Œ±) : map f (m ‚äî m') = map f m ‚äî map f m' :=
  ext fun s => by simp only [map_apply, sup_apply]
#align measure_theory.outer_measure.map_sup MeasureTheory.OuterMeasure.map_sup

@[simp]
theorem map_supr {Œ≤ Œπ} (f : Œ± ‚Üí Œ≤) (m : Œπ ‚Üí OuterMeasure Œ±) : map f (‚®Ü i, m i) = ‚®Ü i, map f (m i) :=
  ext fun s => by simp only [map_apply, supr_apply]
#align measure_theory.outer_measure.map_supr MeasureTheory.OuterMeasure.map_supr

instance : Functor OuterMeasure where map Œ± Œ≤ f := map f

instance : IsLawfulFunctor OuterMeasure where 
  id_map Œ± := map_id
  comp_map Œ± Œ≤ Œ≥ f g m := (map_map f g m).symm

/-- The dirac outer measure. -/
def dirac (a : Œ±) :
    OuterMeasure Œ± where 
  measureOf s := indicator s (fun _ => 1) a
  Empty := by simp
  mono s t h := indicator_le_indicator_of_subset h (fun _ => zero_le _) a
  Union_nat s :=
    if hs : a ‚àà ‚ãÉ n, s n then
      let ‚ü®i, hi‚ü© := mem_Union.1 hs
      calc
        indicator (‚ãÉ n, s n) (fun _ => (1 : ‚Ñù‚â•0‚àû)) a = 1 := indicator_of_mem hs _
        _ = indicator (s i) (fun _ => 1) a := (indicator_of_mem hi _).symm
        _ ‚â§ ‚àë' n, indicator (s n) (fun _ => 1) a := Ennreal.le_tsum _
        
    else by simp only [indicator_of_not_mem hs, zero_le]
#align measure_theory.outer_measure.dirac MeasureTheory.OuterMeasure.dirac

@[simp]
theorem dirac_apply (a : Œ±) (s : Set Œ±) : dirac a s = indicator s (fun _ => 1) a :=
  rfl
#align measure_theory.outer_measure.dirac_apply MeasureTheory.OuterMeasure.dirac_apply

/-- The sum of an (arbitrary) collection of outer measures. -/
def sum {Œπ} (f : Œπ ‚Üí OuterMeasure Œ±) :
    OuterMeasure Œ± where 
  measureOf s := ‚àë' i, f i s
  Empty := by simp
  mono s t h := Ennreal.tsum_le_tsum fun i => (f i).mono' h
  Union_nat s := by rw [Ennreal.tsum_comm] <;> exact Ennreal.tsum_le_tsum fun i => (f i).Union_nat _
#align measure_theory.outer_measure.sum MeasureTheory.OuterMeasure.sum

@[simp]
theorem sum_apply {Œπ} (f : Œπ ‚Üí OuterMeasure Œ±) (s : Set Œ±) : sum f s = ‚àë' i, f i s :=
  rfl
#align measure_theory.outer_measure.sum_apply MeasureTheory.OuterMeasure.sum_apply

theorem smul_dirac_apply (a : ‚Ñù‚â•0‚àû) (b : Œ±) (s : Set Œ±) :
    (a ‚Ä¢ dirac b) s = indicator s (fun _ => a) b := by
  simp only [smul_apply, smul_eq_mul, dirac_apply, ‚Üê indicator_mul_right _ fun _ => a, mul_one]
#align measure_theory.outer_measure.smul_dirac_apply MeasureTheory.OuterMeasure.smul_dirac_apply

/-- Pullback of an `outer_measure`: `comap f Œº s = Œº (f '' s)`. -/
def comap {Œ≤} (f : Œ± ‚Üí Œ≤) :
    OuterMeasure Œ≤ ‚Üí‚Çó[‚Ñù‚â•0‚àû]
      OuterMeasure
        Œ± where 
  toFun m :=
    { measureOf := fun s => m (f '' s)
      Empty := by simp
      mono := fun s t h => m.mono <| image_subset f h
      Union_nat := fun s => by 
        rw [image_Union]
        apply m.Union_nat }
  map_add' m‚ÇÅ m‚ÇÇ := rfl
  map_smul' c m := rfl
#align measure_theory.outer_measure.comap MeasureTheory.OuterMeasure.comap

@[simp]
theorem comap_apply {Œ≤} (f : Œ± ‚Üí Œ≤) (m : OuterMeasure Œ≤) (s : Set Œ±) : comap f m s = m (f '' s) :=
  rfl
#align measure_theory.outer_measure.comap_apply MeasureTheory.OuterMeasure.comap_apply

@[mono]
theorem comap_mono {Œ≤} (f : Œ± ‚Üí Œ≤) : Monotone (comap f) := fun m m' h s => h _
#align measure_theory.outer_measure.comap_mono MeasureTheory.OuterMeasure.comap_mono

@[simp]
theorem comap_supr {Œ≤ Œπ} (f : Œ± ‚Üí Œ≤) (m : Œπ ‚Üí OuterMeasure Œ≤) :
    comap f (‚®Ü i, m i) = ‚®Ü i, comap f (m i) :=
  ext fun s => by simp only [comap_apply, supr_apply]
#align measure_theory.outer_measure.comap_supr MeasureTheory.OuterMeasure.comap_supr

/-- Restrict an `outer_measure` to a set. -/
def restrict (s : Set Œ±) : OuterMeasure Œ± ‚Üí‚Çó[‚Ñù‚â•0‚àû] OuterMeasure Œ± :=
  (map coe).comp (comap (coe : s ‚Üí Œ±))
#align measure_theory.outer_measure.restrict MeasureTheory.OuterMeasure.restrict

@[simp]
theorem restrict_apply (s t : Set Œ±) (m : OuterMeasure Œ±) : restrict s m t = m (t ‚à© s) := by
  simp [restrict]
#align measure_theory.outer_measure.restrict_apply MeasureTheory.OuterMeasure.restrict_apply

@[mono]
theorem restrict_mono {s t : Set Œ±} (h : s ‚äÜ t) {m m' : OuterMeasure Œ±} (hm : m ‚â§ m') :
    restrict s m ‚â§ restrict t m' := fun u => by
  simp only [restrict_apply]
  exact (hm _).trans (m'.mono <| inter_subset_inter_right _ h)
#align measure_theory.outer_measure.restrict_mono MeasureTheory.OuterMeasure.restrict_mono

@[simp]
theorem restrict_univ (m : OuterMeasure Œ±) : restrict univ m = m :=
  ext fun s => by simp
#align measure_theory.outer_measure.restrict_univ MeasureTheory.OuterMeasure.restrict_univ

@[simp]
theorem restrict_empty (m : OuterMeasure Œ±) : restrict ‚àÖ m = 0 :=
  ext fun s => by simp
#align measure_theory.outer_measure.restrict_empty MeasureTheory.OuterMeasure.restrict_empty

@[simp]
theorem restrict_supr {Œπ} (s : Set Œ±) (m : Œπ ‚Üí OuterMeasure Œ±) :
    restrict s (‚®Ü i, m i) = ‚®Ü i, restrict s (m i) := by simp [restrict]
#align measure_theory.outer_measure.restrict_supr MeasureTheory.OuterMeasure.restrict_supr

theorem map_comap {Œ≤} (f : Œ± ‚Üí Œ≤) (m : OuterMeasure Œ≤) : map f (comap f m) = restrict (range f) m :=
  ext fun s => congr_arg m <| by simp only [image_preimage_eq_inter_range, Subtype.range_coe]
#align measure_theory.outer_measure.map_comap MeasureTheory.OuterMeasure.map_comap

theorem map_comap_le {Œ≤} (f : Œ± ‚Üí Œ≤) (m : OuterMeasure Œ≤) : map f (comap f m) ‚â§ m := fun s =>
  m.mono <| image_preimage_subset _ _
#align measure_theory.outer_measure.map_comap_le MeasureTheory.OuterMeasure.map_comap_le

theorem restrict_le_self (m : OuterMeasure Œ±) (s : Set Œ±) : restrict s m ‚â§ m :=
  map_comap_le _ _
#align measure_theory.outer_measure.restrict_le_self MeasureTheory.OuterMeasure.restrict_le_self

@[simp]
theorem map_le_restrict_range {Œ≤} {ma : OuterMeasure Œ±} {mb : OuterMeasure Œ≤} {f : Œ± ‚Üí Œ≤} :
    map f ma ‚â§ restrict (range f) mb ‚Üî map f ma ‚â§ mb :=
  ‚ü®fun h => h.trans (restrict_le_self _ _), fun h s => by simpa using h (s ‚à© range f)‚ü©
#align
  measure_theory.outer_measure.map_le_restrict_range MeasureTheory.OuterMeasure.map_le_restrict_range

theorem map_comap_of_surjective {Œ≤} {f : Œ± ‚Üí Œ≤} (hf : Surjective f) (m : OuterMeasure Œ≤) :
    map f (comap f m) = m :=
  ext fun s => by rw [map_apply, comap_apply, hf.image_preimage]
#align
  measure_theory.outer_measure.map_comap_of_surjective MeasureTheory.OuterMeasure.map_comap_of_surjective

theorem le_comap_map {Œ≤} (f : Œ± ‚Üí Œ≤) (m : OuterMeasure Œ±) : m ‚â§ comap f (map f m) := fun s =>
  m.mono <| subset_preimage_image _ _
#align measure_theory.outer_measure.le_comap_map MeasureTheory.OuterMeasure.le_comap_map

theorem comap_map {Œ≤} {f : Œ± ‚Üí Œ≤} (hf : Injective f) (m : OuterMeasure Œ±) : comap f (map f m) = m :=
  ext fun s => by rw [comap_apply, map_apply, hf.preimage_image]
#align measure_theory.outer_measure.comap_map MeasureTheory.OuterMeasure.comap_map

@[simp]
theorem top_apply {s : Set Œ±} (h : s.Nonempty) : (‚ä§ : OuterMeasure Œ±) s = ‚àû :=
  let ‚ü®a, as‚ü© := h
  top_unique <| le_trans (by simp [smul_dirac_apply, as]) (le_supr‚ÇÇ (‚àû ‚Ä¢ dirac a) trivial)
#align measure_theory.outer_measure.top_apply MeasureTheory.OuterMeasure.top_apply

theorem top_apply' (s : Set Œ±) : (‚ä§ : OuterMeasure Œ±) s = ‚®Ö h : s = ‚àÖ, 0 :=
  s.eq_empty_or_nonempty.elim (fun h => by simp [h]) fun h => by simp [h, h.ne_empty]
#align measure_theory.outer_measure.top_apply' MeasureTheory.OuterMeasure.top_apply'

@[simp]
theorem comap_top (f : Œ± ‚Üí Œ≤) : comap f ‚ä§ = ‚ä§ :=
  ext_nonempty fun s hs => by rw [comap_apply, top_apply hs, top_apply (hs.image _)]
#align measure_theory.outer_measure.comap_top MeasureTheory.OuterMeasure.comap_top

theorem map_top (f : Œ± ‚Üí Œ≤) : map f ‚ä§ = restrict (range f) ‚ä§ :=
  ext fun s => by
    rw [map_apply, restrict_apply, ‚Üê image_preimage_eq_inter_range, top_apply', top_apply',
      Set.image_eq_empty]
#align measure_theory.outer_measure.map_top MeasureTheory.OuterMeasure.map_top

theorem map_top_of_surjective (f : Œ± ‚Üí Œ≤) (hf : Surjective f) : map f ‚ä§ = ‚ä§ := by
  rw [map_top, hf.range_eq, restrict_univ]
#align
  measure_theory.outer_measure.map_top_of_surjective MeasureTheory.OuterMeasure.map_top_of_surjective

end Basic

section OfFunction

/- ./././Mathport/Syntax/Translate/Basic.lean:334:40: warning: unsupported option eqn_compiler.zeta -/
set_option eqn_compiler.zeta true

variable {Œ± : Type _} (m : Set Œ± ‚Üí ‚Ñù‚â•0‚àû) (m_empty : m ‚àÖ = 0)

include m_empty

/-- Given any function `m` assigning measures to sets satisying `m ‚àÖ = 0`, there is
  a unique maximal outer measure `Œº` satisfying `Œº s ‚â§ m s` for all `s : set Œ±`. -/
protected def ofFunction : OuterMeasure Œ± :=
  let Œº s := ‚®Ö (f : ‚Ñï ‚Üí Set Œ±) (h : s ‚äÜ ‚ãÉ i, f i), ‚àë' i, m (f i)
  { measureOf := Œº
    Empty :=
      le_antisymm
        ((infi_le_of_le fun _ => ‚àÖ) <| infi_le_of_le (empty_subset _) <| by simp [m_empty])
        (zero_le _)
    mono := fun s‚ÇÅ s‚ÇÇ hs => infi_mono fun f => infi_mono' fun hb => ‚ü®hs.trans hb, le_rfl‚ü©
    Union_nat := fun s =>
      Ennreal.le_of_forall_pos_le_add <| by
        intro Œµ hŒµ(hb : (‚àë' i, Œº (s i)) < ‚àû)
        rcases Ennreal.exists_pos_sum_of_countable (Ennreal.coe_pos.2 hŒµ).ne' ‚Ñï with ‚ü®Œµ', hŒµ', hl‚ü©
        refine' le_trans _ (add_le_add_left (le_of_lt hl) _)
        rw [‚Üê Ennreal.tsum_add]
        choose f hf using
          show ‚àÄ i, ‚àÉ f : ‚Ñï ‚Üí Set Œ±, (s i ‚äÜ ‚ãÉ i, f i) ‚àß (‚àë' i, m (f i)) < Œº (s i) + Œµ' i by
            intro
            have : Œº (s i) < Œº (s i) + Œµ' i :=
              Ennreal.lt_add_right (ne_top_of_le_ne_top hb.ne <| Ennreal.le_tsum _)
                (by simpa using (hŒµ' i).ne')
            simpa [Œº, infi_lt_iff]
        refine' le_trans _ (Ennreal.tsum_le_tsum fun i => le_of_lt (hf i).2)
        rw [‚Üê Ennreal.tsum_prod, ‚Üê nat.mkpair_equiv.symm.tsum_eq]
        swap; ¬∑ infer_instance
        refine' infi_le_of_le _ (infi_le _ _)
        exact
          Union_subset fun i =>
            subset.trans (hf i).1 <|
              Union_subset fun j =>
                subset.trans (by simp) <| subset_Union _ <| Nat.mkpairEquiv (i, j) }
#align measure_theory.outer_measure.of_function MeasureTheory.OuterMeasure.ofFunction

theorem of_function_apply (s : Set Œ±) :
    OuterMeasure.ofFunction m m_empty s = ‚®Ö (t : ‚Ñï ‚Üí Set Œ±) (h : s ‚äÜ union t), ‚àë' n, m (t n) :=
  rfl
#align measure_theory.outer_measure.of_function_apply MeasureTheory.OuterMeasure.of_function_apply

variable {m m_empty}

theorem of_function_le (s : Set Œ±) : OuterMeasure.ofFunction m m_empty s ‚â§ m s :=
  let f : ‚Ñï ‚Üí Set Œ± := fun i => Nat.casesOn i s fun _ => ‚àÖ
  infi_le_of_le f <|
    infi_le_of_le (subset_Union f 0) <|
      le_of_eq <| tsum_eq_single 0 <| by rintro (_ | i) <;> simp [f, m_empty]
#align measure_theory.outer_measure.of_function_le MeasureTheory.OuterMeasure.of_function_le

theorem of_function_eq (s : Set Œ±) (m_mono : ‚àÄ ‚¶Ét : Set Œ±‚¶Ñ, s ‚äÜ t ‚Üí m s ‚â§ m t)
    (m_subadd : ‚àÄ s : ‚Ñï ‚Üí Set Œ±, m (‚ãÉ i, s i) ‚â§ ‚àë' i, m (s i)) :
    OuterMeasure.ofFunction m m_empty s = m s :=
  le_antisymm (of_function_le s) <|
    le_infi fun f => le_infi fun hf => le_trans (m_mono hf) (m_subadd f)
#align measure_theory.outer_measure.of_function_eq MeasureTheory.OuterMeasure.of_function_eq

theorem le_of_function {Œº : OuterMeasure Œ±} :
    Œº ‚â§ OuterMeasure.ofFunction m m_empty ‚Üî ‚àÄ s, Œº s ‚â§ m s :=
  ‚ü®fun H s => le_trans (H s) (of_function_le s), fun H s =>
    le_infi fun f =>
      le_infi fun hs =>
        le_trans (Œº.mono hs) <| le_trans (Œº.union f) <| Ennreal.tsum_le_tsum fun i => H _‚ü©
#align measure_theory.outer_measure.le_of_function MeasureTheory.OuterMeasure.le_of_function

theorem is_greatest_of_function :
    IsGreatest { Œº : OuterMeasure Œ± | ‚àÄ s, Œº s ‚â§ m s } (OuterMeasure.ofFunction m m_empty) :=
  ‚ü®fun s => of_function_le _, fun Œº => le_of_function.2‚ü©
#align
  measure_theory.outer_measure.is_greatest_of_function MeasureTheory.OuterMeasure.is_greatest_of_function

theorem of_function_eq_Sup : OuterMeasure.ofFunction m m_empty = sup { Œº | ‚àÄ s, Œº s ‚â§ m s } :=
  (@is_greatest_of_function Œ± m m_empty).IsLub.Sup_eq.symm
#align measure_theory.outer_measure.of_function_eq_Sup MeasureTheory.OuterMeasure.of_function_eq_Sup

/- ./././Mathport/Syntax/Translate/Basic.lean:632:2: warning: expanding binder collection (u ¬´expr ‚äÜ ¬ª ¬´expr ‚à™ ¬ª(s, t)) -/
/-- If `m u = ‚àû` for any set `u` that has nonempty intersection both with `s` and `t`, then
`Œº (s ‚à™ t) = Œº s + Œº t`, where `Œº = measure_theory.outer_measure.of_function m m_empty`.

E.g., if `Œ±` is an (e)metric space and `m u = ‚àû` on any set of diameter `‚â• r`, then this lemma
implies that `Œº (s ‚à™ t) = Œº s + Œº t` on any two sets such that `r ‚â§ edist x y` for all `x ‚àà s`
and `y ‚àà t`.  -/
theorem of_function_union_of_top_of_nonempty_inter {s t : Set Œ±}
    (h : ‚àÄ u, (s ‚à© u).Nonempty ‚Üí (t ‚à© u).Nonempty ‚Üí m u = ‚àû) :
    OuterMeasure.ofFunction m m_empty (s ‚à™ t) =
      OuterMeasure.ofFunction m m_empty s + OuterMeasure.ofFunction m m_empty t :=
  by 
  refine' le_antisymm (outer_measure.union _ _ _) (le_infi fun f => le_infi fun hf => _)
  set Œº := outer_measure.of_function m m_empty
  rcases em (‚àÉ i, (s ‚à© f i).Nonempty ‚àß (t ‚à© f i).Nonempty) with (‚ü®i, hs, ht‚ü© | he)
  ¬∑
    calc
      Œº s + Œº t ‚â§ ‚àû := le_top
      _ = m (f i) := (h (f i) hs ht).symm
      _ ‚â§ ‚àë' i, m (f i) := Ennreal.le_tsum i
      
  set I := fun s => { i : ‚Ñï | (s ‚à© f i).Nonempty }
  have hd : Disjoint (I s) (I t) := disjoint_iff_inf_le.mpr fun i hi => he ‚ü®i, hi‚ü©
  have hI : ‚àÄ (u) (_ : u ‚äÜ s ‚à™ t), Œº u ‚â§ ‚àë' i : I u, Œº (f i) := fun u hu =>
    calc
      Œº u ‚â§ Œº (‚ãÉ i : I u, f i) :=
        Œº.mono fun x hx =>
          let ‚ü®i, hi‚ü© := mem_Union.1 (hf (hu hx))
          mem_Union.2 ‚ü®‚ü®i, ‚ü®x, hx, hi‚ü©‚ü©, hi‚ü©
      _ ‚â§ ‚àë' i : I u, Œº (f i) := Œº.Union _
      
  calc
    Œº s + Œº t ‚â§ (‚àë' i : I s, Œº (f i)) + ‚àë' i : I t, Œº (f i) :=
      add_le_add (hI _ <| subset_union_left _ _) (hI _ <| subset_union_right _ _)
    _ = ‚àë' i : I s ‚à™ I t, Œº (f i) :=
      (@tsum_union_disjoint _ _ _ _ _ (fun i => Œº (f i)) _ _ _ hd Ennreal.summable
          Ennreal.summable).symm
    _ ‚â§ ‚àë' i, Œº (f i) :=
      tsum_le_tsum_of_inj coe Subtype.coe_injective (fun _ _ => zero_le _) (fun _ => le_rfl)
        Ennreal.summable Ennreal.summable
    _ ‚â§ ‚àë' i, m (f i) := Ennreal.tsum_le_tsum fun i => of_function_le _
    
#align
  measure_theory.outer_measure.of_function_union_of_top_of_nonempty_inter MeasureTheory.OuterMeasure.of_function_union_of_top_of_nonempty_inter

theorem comap_of_function {Œ≤} (f : Œ≤ ‚Üí Œ±) (h : Monotone m ‚à® Surjective f) :
    comap f (OuterMeasure.ofFunction m m_empty) =
      OuterMeasure.ofFunction (fun s => m (f '' s)) (by rwa [Set.image_empty]) :=
  by 
  refine' le_antisymm (le_of_function.2 fun s => _) fun s => _
  ¬∑ rw [comap_apply]
    apply of_function_le
  ¬∑ rw [comap_apply, of_function_apply, of_function_apply]
    refine' infi_mono' fun t => ‚ü®fun k => f ‚Åª¬π' t k, _‚ü©
    refine' infi_mono' fun ht => _
    rw [Set.image_subset_iff, preimage_Union] at ht
    refine' ‚ü®ht, Ennreal.tsum_le_tsum fun n => _‚ü©
    cases h
    exacts[h (image_preimage_subset _ _), (congr_arg m (h.image_preimage (t n))).le]
#align measure_theory.outer_measure.comap_of_function MeasureTheory.OuterMeasure.comap_of_function

theorem map_of_function_le {Œ≤} (f : Œ± ‚Üí Œ≤) :
    map f (OuterMeasure.ofFunction m m_empty) ‚â§
      OuterMeasure.ofFunction (fun s => m (f ‚Åª¬π' s)) m_empty :=
  le_of_function.2 fun s => by 
    rw [map_apply]
    apply of_function_le
#align measure_theory.outer_measure.map_of_function_le MeasureTheory.OuterMeasure.map_of_function_le

theorem map_of_function {Œ≤} {f : Œ± ‚Üí Œ≤} (hf : Injective f) :
    map f (OuterMeasure.ofFunction m m_empty) =
      OuterMeasure.ofFunction (fun s => m (f ‚Åª¬π' s)) m_empty :=
  by 
  refine' (map_of_function_le _).antisymm fun s => _
  simp only [of_function_apply, map_apply, le_infi_iff]
  intro t ht
  refine' infi_le_of_le (fun n => range f·∂ú ‚à™ f '' t n) (infi_le_of_le _ _)
  ¬∑ rw [‚Üê union_Union, ‚Üê inter_subset, ‚Üê image_preimage_eq_inter_range, ‚Üê image_Union]
    exact image_subset _ ht
  ¬∑ refine' Ennreal.tsum_le_tsum fun n => le_of_eq _
    simp [hf.preimage_image]
#align measure_theory.outer_measure.map_of_function MeasureTheory.OuterMeasure.map_of_function

theorem restrict_of_function (s : Set Œ±) (hm : Monotone m) :
    restrict s (OuterMeasure.ofFunction m m_empty) =
      OuterMeasure.ofFunction (fun t => m (t ‚à© s)) (by rwa [Set.empty_inter]) :=
  by
  simp only [restrict, LinearMap.comp_apply, comap_of_function _ (Or.inl hm),
    map_of_function Subtype.coe_injective, Subtype.image_preimage_coe]
#align
  measure_theory.outer_measure.restrict_of_function MeasureTheory.OuterMeasure.restrict_of_function

theorem smul_of_function {c : ‚Ñù‚â•0‚àû} (hc : c ‚â† ‚àû) :
    c ‚Ä¢ OuterMeasure.ofFunction m m_empty = OuterMeasure.ofFunction (c ‚Ä¢ m) (by simp [m_empty]) :=
  by 
  ext1 s
  haveI : Nonempty { t : ‚Ñï ‚Üí Set Œ± // s ‚äÜ ‚ãÉ i, t i } := ‚ü®‚ü®fun _ => s, subset_Union (fun _ => s) 0‚ü©‚ü©
  simp only [smul_apply, of_function_apply, Ennreal.tsum_mul_left, Pi.smul_apply, smul_eq_mul,
    infi_subtype', Ennreal.infi_mul_left fun h => (hc h).elim]
#align measure_theory.outer_measure.smul_of_function MeasureTheory.OuterMeasure.smul_of_function

end OfFunction

section BoundedBy

variable {Œ± : Type _} (m : Set Œ± ‚Üí ‚Ñù‚â•0‚àû)

/-- Given any function `m` assigning measures to sets, there is a unique maximal outer measure `Œº`
  satisfying `Œº s ‚â§ m s` for all `s : set Œ±`. This is the same as `outer_measure.of_function`,
  except that it doesn't require `m ‚àÖ = 0`. -/
def boundedBy : OuterMeasure Œ± :=
  OuterMeasure.ofFunction (fun s => ‚®Ü h : s.Nonempty, m s) (by simp [not_nonempty_empty])
#align measure_theory.outer_measure.bounded_by MeasureTheory.OuterMeasure.boundedBy

variable {m}

theorem bounded_by_le (s : Set Œ±) : boundedBy m s ‚â§ m s :=
  (of_function_le _).trans supr_const_le
#align measure_theory.outer_measure.bounded_by_le MeasureTheory.OuterMeasure.bounded_by_le

theorem bounded_by_eq_of_function (m_empty : m ‚àÖ = 0) (s : Set Œ±) :
    boundedBy m s = OuterMeasure.ofFunction m m_empty s := by
  have : (fun s : Set Œ± => ‚®Ü h : s.Nonempty, m s) = m := by
    ext1 t
    cases' t.eq_empty_or_nonempty with h h <;> simp [h, not_nonempty_empty, m_empty]
  simp [bounded_by, this]
#align
  measure_theory.outer_measure.bounded_by_eq_of_function MeasureTheory.OuterMeasure.bounded_by_eq_of_function

theorem bounded_by_apply (s : Set Œ±) :
    boundedBy m s = ‚®Ö (t : ‚Ñï ‚Üí Set Œ±) (h : s ‚äÜ union t), ‚àë' n, ‚®Ü h : (t n).Nonempty, m (t n) := by
  simp [bounded_by, of_function_apply]
#align measure_theory.outer_measure.bounded_by_apply MeasureTheory.OuterMeasure.bounded_by_apply

theorem bounded_by_eq (s : Set Œ±) (m_empty : m ‚àÖ = 0) (m_mono : ‚àÄ ‚¶Ét : Set Œ±‚¶Ñ, s ‚äÜ t ‚Üí m s ‚â§ m t)
    (m_subadd : ‚àÄ s : ‚Ñï ‚Üí Set Œ±, m (‚ãÉ i, s i) ‚â§ ‚àë' i, m (s i)) : boundedBy m s = m s := by
  rw [bounded_by_eq_of_function m_empty, of_function_eq s m_mono m_subadd]
#align measure_theory.outer_measure.bounded_by_eq MeasureTheory.OuterMeasure.bounded_by_eq

@[simp]
theorem bounded_by_eq_self (m : OuterMeasure Œ±) : boundedBy m = m :=
  ext fun s => bounded_by_eq _ m.empty' (fun t ht => m.mono' ht) m.union
#align measure_theory.outer_measure.bounded_by_eq_self MeasureTheory.OuterMeasure.bounded_by_eq_self

theorem le_bounded_by {Œº : OuterMeasure Œ±} : Œº ‚â§ boundedBy m ‚Üî ‚àÄ s, Œº s ‚â§ m s := by
  rw [bounded_by, le_of_function, forall_congr']; intro s
  cases' s.eq_empty_or_nonempty with h h <;> simp [h, not_nonempty_empty]
#align measure_theory.outer_measure.le_bounded_by MeasureTheory.OuterMeasure.le_bounded_by

theorem le_bounded_by' {Œº : OuterMeasure Œ±} :
    Œº ‚â§ boundedBy m ‚Üî ‚àÄ s : Set Œ±, s.Nonempty ‚Üí Œº s ‚â§ m s := by
  rw [le_bounded_by, forall_congr']
  intro s
  cases' s.eq_empty_or_nonempty with h h <;> simp [h]
#align measure_theory.outer_measure.le_bounded_by' MeasureTheory.OuterMeasure.le_bounded_by'

theorem smul_bounded_by {c : ‚Ñù‚â•0‚àû} (hc : c ‚â† ‚àû) : c ‚Ä¢ boundedBy m = boundedBy (c ‚Ä¢ m) := by
  simp only [bounded_by, smul_of_function hc]
  congr 1 with s : 1
  rcases s.eq_empty_or_nonempty with (rfl | hs) <;> simp [*]
#align measure_theory.outer_measure.smul_bounded_by MeasureTheory.OuterMeasure.smul_bounded_by

theorem comap_bounded_by {Œ≤} (f : Œ≤ ‚Üí Œ±)
    (h : (Monotone fun s : { s : Set Œ± // s.Nonempty } => m s) ‚à® Surjective f) :
    comap f (boundedBy m) = boundedBy fun s => m (f '' s) := by
  refine' (comap_of_function _ _).trans _
  ¬∑ refine' h.imp (fun H s t hst => supr_le fun hs => _) id
    have ht : t.nonempty := hs.mono hst
    exact (@H ‚ü®s, hs‚ü© ‚ü®t, ht‚ü© hst).trans (le_supr (fun h : t.nonempty => m t) ht)
  ¬∑ dsimp only [bounded_by]
    congr with s : 1
    rw [nonempty_image_iff]
#align measure_theory.outer_measure.comap_bounded_by MeasureTheory.OuterMeasure.comap_bounded_by

/-- If `m u = ‚àû` for any set `u` that has nonempty intersection both with `s` and `t`, then
`Œº (s ‚à™ t) = Œº s + Œº t`, where `Œº = measure_theory.outer_measure.bounded_by m`.

E.g., if `Œ±` is an (e)metric space and `m u = ‚àû` on any set of diameter `‚â• r`, then this lemma
implies that `Œº (s ‚à™ t) = Œº s + Œº t` on any two sets such that `r ‚â§ edist x y` for all `x ‚àà s`
and `y ‚àà t`.  -/
theorem bounded_by_union_of_top_of_nonempty_inter {s t : Set Œ±}
    (h : ‚àÄ u, (s ‚à© u).Nonempty ‚Üí (t ‚à© u).Nonempty ‚Üí m u = ‚àû) :
    boundedBy m (s ‚à™ t) = boundedBy m s + boundedBy m t :=
  of_function_union_of_top_of_nonempty_inter fun u hs ht =>
    top_unique <| (h u hs ht).ge.trans <| le_supr (fun h => m u) (hs.mono <| inter_subset_right s u)
#align
  measure_theory.outer_measure.bounded_by_union_of_top_of_nonempty_inter MeasureTheory.OuterMeasure.bounded_by_union_of_top_of_nonempty_inter

end BoundedBy

section CaratheodoryMeasurable

universe u

parameter {Œ± : Type u}(m : OuterMeasure Œ±)

include m

attribute [local simp] Set.inter_comm Set.inter_left_comm Set.inter_assoc

variable {s s‚ÇÅ s‚ÇÇ : Set Œ±}

/-- A set `s` is Carath√©odory-measurable for an outer measure `m` if for all sets `t` we have
  `m t = m (t ‚à© s) + m (t \ s)`. -/
def IsCaratheodory (s : Set Œ±) : Prop :=
  ‚àÄ t, m t = m (t ‚à© s) + m (t \ s)
#align measure_theory.outer_measure.is_caratheodory MeasureTheory.OuterMeasure.IsCaratheodory

theorem is_caratheodory_iff_le' {s : Set Œ±} :
    is_caratheodory s ‚Üî ‚àÄ t, m (t ‚à© s) + m (t \ s) ‚â§ m t :=
  forall_congr' fun t => le_antisymm_iff.trans <| and_iff_right <| le_inter_add_diff _
#align
  measure_theory.outer_measure.is_caratheodory_iff_le' MeasureTheory.OuterMeasure.is_caratheodory_iff_le'

@[simp]
theorem isCaratheodoryEmpty : is_caratheodory ‚àÖ := by simp [is_caratheodory, m.empty, diff_empty]
#align
  measure_theory.outer_measure.is_caratheodory_empty MeasureTheory.OuterMeasure.isCaratheodoryEmpty

theorem isCaratheodoryCompl : is_caratheodory s‚ÇÅ ‚Üí is_caratheodory (s‚ÇÅ·∂ú) := by
  simp [is_caratheodory, diff_eq, add_comm]
#align
  measure_theory.outer_measure.is_caratheodory_compl MeasureTheory.OuterMeasure.isCaratheodoryCompl

@[simp]
theorem is_caratheodory_compl_iff : is_caratheodory (s·∂ú) ‚Üî is_caratheodory s :=
  ‚ü®fun h => by simpa using is_caratheodory_compl m h, is_caratheodory_compl‚ü©
#align
  measure_theory.outer_measure.is_caratheodory_compl_iff MeasureTheory.OuterMeasure.is_caratheodory_compl_iff

theorem isCaratheodoryUnion (h‚ÇÅ : is_caratheodory s‚ÇÅ) (h‚ÇÇ : is_caratheodory s‚ÇÇ) :
    is_caratheodory (s‚ÇÅ ‚à™ s‚ÇÇ) := fun t => by
  rw [h‚ÇÅ t, h‚ÇÇ (t ‚à© s‚ÇÅ), h‚ÇÇ (t \ s‚ÇÅ), h‚ÇÅ (t ‚à© (s‚ÇÅ ‚à™ s‚ÇÇ)), inter_diff_assoc _ _ s‚ÇÅ,
    Set.inter_assoc _ _ s‚ÇÅ, inter_eq_self_of_subset_right (Set.subset_union_left _ _),
    union_diff_left, h‚ÇÇ (t ‚à© s‚ÇÅ)]
  simp [diff_eq, add_assoc]
#align
  measure_theory.outer_measure.is_caratheodory_union MeasureTheory.OuterMeasure.isCaratheodoryUnion

theorem measure_inter_union (h : s‚ÇÅ ‚à© s‚ÇÇ ‚äÜ ‚àÖ) (h‚ÇÅ : is_caratheodory s‚ÇÅ) {t : Set Œ±} :
    m (t ‚à© (s‚ÇÅ ‚à™ s‚ÇÇ)) = m (t ‚à© s‚ÇÅ) + m (t ‚à© s‚ÇÇ) := by
  rw [h‚ÇÅ, Set.inter_assoc, Set.union_inter_cancel_left, inter_diff_assoc, union_diff_cancel_left h]
#align
  measure_theory.outer_measure.measure_inter_union MeasureTheory.OuterMeasure.measure_inter_union

theorem isCaratheodoryUnionLt {s : ‚Ñï ‚Üí Set Œ±} :
    ‚àÄ {n : ‚Ñï}, (‚àÄ i < n, is_caratheodory (s i)) ‚Üí is_caratheodory (‚ãÉ i < n, s i)
  | 0, h => by simp [Nat.not_lt_zero]
  | n + 1, h => by
    rw [bUnion_lt_succ] <;>
      exact
        is_caratheodory_union m
          (is_caratheodory_Union_lt fun i hi => h i <| lt_of_lt_of_le hi <| Nat.le_succ _)
          (h n (le_refl (n + 1)))
#align
  measure_theory.outer_measure.is_caratheodory_Union_lt MeasureTheory.OuterMeasure.isCaratheodoryUnionLt

theorem isCaratheodoryInter (h‚ÇÅ : is_caratheodory s‚ÇÅ) (h‚ÇÇ : is_caratheodory s‚ÇÇ) :
    is_caratheodory (s‚ÇÅ ‚à© s‚ÇÇ) := by
  rw [‚Üê is_caratheodory_compl_iff, Set.compl_inter]
  exact is_caratheodory_union _ (is_caratheodory_compl _ h‚ÇÅ) (is_caratheodory_compl _ h‚ÇÇ)
#align
  measure_theory.outer_measure.is_caratheodory_inter MeasureTheory.OuterMeasure.isCaratheodoryInter

theorem is_caratheodory_sum {s : ‚Ñï ‚Üí Set Œ±} (h : ‚àÄ i, is_caratheodory (s i))
    (hd : Pairwise (Disjoint on s)) {t : Set Œ±} :
    ‚àÄ {n}, (‚àë i in Finset.range n, m (t ‚à© s i)) = m (t ‚à© ‚ãÉ i < n, s i)
  | 0 => by simp [Nat.not_lt_zero, m.empty]
  | Nat.succ n => by
    rw [bUnion_lt_succ, Finset.sum_range_succ, Set.union_comm, is_caratheodory_sum,
      m.measure_inter_union _ (h n), add_comm]
    intro a
    simpa using fun (h‚ÇÅ : a ‚àà s n) i (hi : i < n) h‚ÇÇ => (hd (ne_of_gt hi)).le_bot ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©
#align
  measure_theory.outer_measure.is_caratheodory_sum MeasureTheory.OuterMeasure.is_caratheodory_sum

theorem isCaratheodoryUnionNat {s : ‚Ñï ‚Üí Set Œ±} (h : ‚àÄ i, is_caratheodory (s i))
    (hd : Pairwise (Disjoint on s)) : is_caratheodory (‚ãÉ i, s i) :=
  is_caratheodory_iff_le'.2 fun t => by
    have hp : m (t ‚à© ‚ãÉ i, s i) ‚â§ ‚®Ü n, m (t ‚à© ‚ãÉ i < n, s i) := by
      convert m.Union fun i => t ‚à© s i
      ¬∑ rw [inter_Union]
      ¬∑ simp [Ennreal.tsum_eq_supr_nat, is_caratheodory_sum m h hd]
    refine' le_trans (add_le_add_right hp _) _
    rw [Ennreal.supr_add]
    refine'
      supr_le fun n =>
        le_trans (add_le_add_left _ _) (ge_of_eq (is_caratheodory_Union_lt m (fun i _ => h i) _))
    refine' m.mono (diff_subset_diff_right _)
    exact Union‚ÇÇ_subset fun i _ => subset_Union _ i
#align
  measure_theory.outer_measure.is_caratheodory_Union_nat MeasureTheory.OuterMeasure.isCaratheodoryUnionNat

theorem f_Union {s : ‚Ñï ‚Üí Set Œ±} (h : ‚àÄ i, is_caratheodory (s i)) (hd : Pairwise (Disjoint on s)) :
    m (‚ãÉ i, s i) = ‚àë' i, m (s i) := by
  refine' le_antisymm (m.Union_nat s) _
  rw [Ennreal.tsum_eq_supr_nat]
  refine' supr_le fun n => _
  have := @is_caratheodory_sum _ m _ h hd univ n
  simp at this; simp [this]
  exact m.mono (Union‚ÇÇ_subset fun i _ => subset_Union _ i)
#align measure_theory.outer_measure.f_Union MeasureTheory.OuterMeasure.f_Union

/-- The Carath√©odory-measurable sets for an outer measure `m` form a Dynkin system.  -/
def caratheodoryDynkin :
    MeasurableSpace.DynkinSystem Œ± where 
  Has := is_caratheodory
  hasEmpty := is_caratheodory_empty
  HasCompl s := is_caratheodory_compl
  hasUnionNat f hf hn := is_caratheodory_Union_nat hn hf
#align
  measure_theory.outer_measure.caratheodory_dynkin MeasureTheory.OuterMeasure.caratheodoryDynkin

/-- Given an outer measure `Œº`, the Carath√©odory-measurable space is
  defined such that `s` is measurable if `‚àÄt, Œº t = Œº (t ‚à© s) + Œº (t \ s)`. -/
protected def caratheodory : MeasurableSpace Œ± :=
  caratheodory_dynkin.toMeasurableSpace fun s‚ÇÅ s‚ÇÇ => is_caratheodory_inter
#align measure_theory.outer_measure.caratheodory MeasureTheory.OuterMeasure.caratheodory

theorem is_caratheodory_iff {s : Set Œ±} :
    measurable_set[caratheodory] s ‚Üî ‚àÄ t, m t = m (t ‚à© s) + m (t \ s) :=
  Iff.rfl
#align
  measure_theory.outer_measure.is_caratheodory_iff MeasureTheory.OuterMeasure.is_caratheodory_iff

theorem is_caratheodory_iff_le {s : Set Œ±} :
    measurable_set[caratheodory] s ‚Üî ‚àÄ t, m (t ‚à© s) + m (t \ s) ‚â§ m t :=
  is_caratheodory_iff_le'
#align
  measure_theory.outer_measure.is_caratheodory_iff_le MeasureTheory.OuterMeasure.is_caratheodory_iff_le

protected theorem Union_eq_of_caratheodory {s : ‚Ñï ‚Üí Set Œ±}
    (h : ‚àÄ i, measurable_set[caratheodory] (s i)) (hd : Pairwise (Disjoint on s)) :
    m (‚ãÉ i, s i) = ‚àë' i, m (s i) :=
  f_Union h hd
#align
  measure_theory.outer_measure.Union_eq_of_caratheodory MeasureTheory.OuterMeasure.Union_eq_of_caratheodory

end CaratheodoryMeasurable

variable {Œ± : Type _}

theorem ofFunctionCaratheodory {m : Set Œ± ‚Üí ‚Ñù‚â•0‚àû} {s : Set Œ±} {h‚ÇÄ : m ‚àÖ = 0}
    (hs : ‚àÄ t, m (t ‚à© s) + m (t \ s) ‚â§ m t) :
    measurable_set[(OuterMeasure.ofFunction m h‚ÇÄ).caratheodory] s := by
  apply (is_caratheodory_iff_le _).mpr
  refine' fun t => le_infi fun f => le_infi fun hf => _
  refine'
    le_trans
      (add_le_add ((infi_le_of_le fun i => f i ‚à© s) <| infi_le _ _)
        ((infi_le_of_le fun i => f i \ s) <| infi_le _ _))
      _
  ¬∑ rw [‚Üê Union_inter]
    exact inter_subset_inter_left _ hf
  ¬∑ rw [‚Üê Union_diff]
    exact diff_subset_diff_left hf
  ¬∑ rw [‚Üê Ennreal.tsum_add]
    exact Ennreal.tsum_le_tsum fun i => hs _
#align
  measure_theory.outer_measure.of_function_caratheodory MeasureTheory.OuterMeasure.ofFunctionCaratheodory

theorem boundedByCaratheodory {m : Set Œ± ‚Üí ‚Ñù‚â•0‚àû} {s : Set Œ±}
    (hs : ‚àÄ t, m (t ‚à© s) + m (t \ s) ‚â§ m t) : measurable_set[(boundedBy m).caratheodory] s := by
  apply of_function_caratheodory; intro t
  cases' t.eq_empty_or_nonempty with h h
  ¬∑ simp [h, not_nonempty_empty]
  ¬∑ convert le_trans _ (hs t)
    ¬∑ simp [h]
    exact add_le_add supr_const_le supr_const_le
#align
  measure_theory.outer_measure.bounded_by_caratheodory MeasureTheory.OuterMeasure.boundedByCaratheodory

@[simp]
theorem zero_caratheodory : (0 : OuterMeasure Œ±).caratheodory = ‚ä§ :=
  top_unique fun s _ t => (add_zero _).symm
#align measure_theory.outer_measure.zero_caratheodory MeasureTheory.OuterMeasure.zero_caratheodory

theorem top_caratheodory : (‚ä§ : OuterMeasure Œ±).caratheodory = ‚ä§ :=
  top_unique fun s hs =>
    (is_caratheodory_iff_le _).2 fun t =>
      t.eq_empty_or_nonempty.elim (fun ht => by simp [ht]) fun ht => by
        simp only [ht, top_apply, le_top]
#align measure_theory.outer_measure.top_caratheodory MeasureTheory.OuterMeasure.top_caratheodory

theorem le_add_caratheodory (m‚ÇÅ m‚ÇÇ : OuterMeasure Œ±) :
    m‚ÇÅ.caratheodory ‚äì m‚ÇÇ.caratheodory ‚â§ (m‚ÇÅ + m‚ÇÇ : OuterMeasure Œ±).caratheodory :=
  fun s ‚ü®hs‚ÇÅ, hs‚ÇÇ‚ü© t => by simp [hs‚ÇÅ t, hs‚ÇÇ t, add_left_comm, add_assoc]
#align
  measure_theory.outer_measure.le_add_caratheodory MeasureTheory.OuterMeasure.le_add_caratheodory

theorem le_sum_caratheodory {Œπ} (m : Œπ ‚Üí OuterMeasure Œ±) :
    (‚®Ö i, (m i).caratheodory) ‚â§ (sum m).caratheodory := fun s h t => by
  simp [fun i => MeasurableSpace.measurable_set_infi.1 h i t, Ennreal.tsum_add]
#align
  measure_theory.outer_measure.le_sum_caratheodory MeasureTheory.OuterMeasure.le_sum_caratheodory

theorem le_smul_caratheodory (a : ‚Ñù‚â•0‚àû) (m : OuterMeasure Œ±) :
    m.caratheodory ‚â§ (a ‚Ä¢ m).caratheodory := fun s h t => by simp [h t, mul_add]
#align
  measure_theory.outer_measure.le_smul_caratheodory MeasureTheory.OuterMeasure.le_smul_caratheodory

@[simp]
theorem dirac_caratheodory (a : Œ±) : (dirac a).caratheodory = ‚ä§ :=
  top_unique fun s _ t => by 
    by_cases ht : a ‚àà t; swap; ¬∑ simp [ht]
    by_cases hs : a ‚àà s <;> simp [*]
#align measure_theory.outer_measure.dirac_caratheodory MeasureTheory.OuterMeasure.dirac_caratheodory

section InfGen

/-- Given a set of outer measures, we define a new function that on a set `s` is defined to be the
  infimum of `Œº(s)` for the outer measures `Œº` in the collection. We ensure that this
  function is defined to be `0` on `‚àÖ`, even if the collection of outer measures is empty.
  The outer measure generated by this function is the infimum of the given outer measures. -/
def infGen (m : Set (OuterMeasure Œ±)) (s : Set Œ±) : ‚Ñù‚â•0‚àû :=
  ‚®Ö (Œº : OuterMeasure Œ±) (h : Œº ‚àà m), Œº s
#align measure_theory.outer_measure.Inf_gen MeasureTheory.OuterMeasure.infGen

theorem Inf_gen_def (m : Set (OuterMeasure Œ±)) (t : Set Œ±) :
    infGen m t = ‚®Ö (Œº : OuterMeasure Œ±) (h : Œº ‚àà m), Œº t :=
  rfl
#align measure_theory.outer_measure.Inf_gen_def MeasureTheory.OuterMeasure.Inf_gen_def

theorem Inf_eq_bounded_by_Inf_gen (m : Set (OuterMeasure Œ±)) :
    inf m = OuterMeasure.boundedBy (infGen m) := by
  refine' le_antisymm _ _
  ¬∑ refine' le_bounded_by.2 fun s => le_infi‚ÇÇ fun Œº hŒº => _
    exact (show Inf m ‚â§ Œº from Inf_le hŒº) s
  ¬∑ refine' le_Inf _
    intro Œº hŒº t
    refine' le_trans (bounded_by_le t) (infi‚ÇÇ_le Œº hŒº)
#align
  measure_theory.outer_measure.Inf_eq_bounded_by_Inf_gen MeasureTheory.OuterMeasure.Inf_eq_bounded_by_Inf_gen

theorem supr_Inf_gen_nonempty {m : Set (OuterMeasure Œ±)} (h : m.Nonempty) (t : Set Œ±) :
    (‚®Ü h : t.Nonempty, infGen m t) = ‚®Ö (Œº : OuterMeasure Œ±) (h : Œº ‚àà m), Œº t := by
  rcases t.eq_empty_or_nonempty with (rfl | ht)
  ¬∑ rcases h with ‚ü®Œº, hŒº‚ü©
    rw [eq_false not_nonempty_empty, supr_false, eq_comm]
    simp_rw [empty']
    apply bot_unique
    refine' infi_le_of_le Œº (infi_le _ hŒº)
  ¬∑ simp [ht, Inf_gen_def]
#align
  measure_theory.outer_measure.supr_Inf_gen_nonempty MeasureTheory.OuterMeasure.supr_Inf_gen_nonempty

/-- The value of the Infimum of a nonempty set of outer measures on a set is not simply
the minimum value of a measure on that set: it is the infimum sum of measures of countable set of
sets that covers that set, where a different measure can be used for each set in the cover. -/
theorem Inf_apply {m : Set (OuterMeasure Œ±)} {s : Set Œ±} (h : m.Nonempty) :
    inf m s =
      ‚®Ö (t : ‚Ñï ‚Üí Set Œ±) (h2 : s ‚äÜ union t), ‚àë' n, ‚®Ö (Œº : OuterMeasure Œ±) (h3 : Œº ‚àà m), Œº (t n) :=
  by simp_rw [Inf_eq_bounded_by_Inf_gen, bounded_by_apply, supr_Inf_gen_nonempty h]
#align measure_theory.outer_measure.Inf_apply MeasureTheory.OuterMeasure.Inf_apply

/-- The value of the Infimum of a set of outer measures on a nonempty set is not simply
the minimum value of a measure on that set: it is the infimum sum of measures of countable set of
sets that covers that set, where a different measure can be used for each set in the cover. -/
theorem Inf_apply' {m : Set (OuterMeasure Œ±)} {s : Set Œ±} (h : s.Nonempty) :
    inf m s =
      ‚®Ö (t : ‚Ñï ‚Üí Set Œ±) (h2 : s ‚äÜ union t), ‚àë' n, ‚®Ö (Œº : OuterMeasure Œ±) (h3 : Œº ‚àà m), Œº (t n) :=
  m.eq_empty_or_nonempty.elim (fun hm => by simp [hm, h]) Inf_apply
#align measure_theory.outer_measure.Inf_apply' MeasureTheory.OuterMeasure.Inf_apply'

/-- The value of the Infimum of a nonempty family of outer measures on a set is not simply
the minimum value of a measure on that set: it is the infimum sum of measures of countable set of
sets that covers that set, where a different measure can be used for each set in the cover. -/
theorem infi_apply {Œπ} [Nonempty Œπ] (m : Œπ ‚Üí OuterMeasure Œ±) (s : Set Œ±) :
    (‚®Ö i, m i) s = ‚®Ö (t : ‚Ñï ‚Üí Set Œ±) (h2 : s ‚äÜ union t), ‚àë' n, ‚®Ö i, m i (t n) := by
  rw [infi, Inf_apply (range_nonempty m)]
  simp only [infi_range]
#align measure_theory.outer_measure.infi_apply MeasureTheory.OuterMeasure.infi_apply

/-- The value of the Infimum of a family of outer measures on a nonempty set is not simply
the minimum value of a measure on that set: it is the infimum sum of measures of countable set of
sets that covers that set, where a different measure can be used for each set in the cover. -/
theorem infi_apply' {Œπ} (m : Œπ ‚Üí OuterMeasure Œ±) {s : Set Œ±} (hs : s.Nonempty) :
    (‚®Ö i, m i) s = ‚®Ö (t : ‚Ñï ‚Üí Set Œ±) (h2 : s ‚äÜ union t), ‚àë' n, ‚®Ö i, m i (t n) := by
  rw [infi, Inf_apply' hs]
  simp only [infi_range]
#align measure_theory.outer_measure.infi_apply' MeasureTheory.OuterMeasure.infi_apply'

/-- The value of the Infimum of a nonempty family of outer measures on a set is not simply
the minimum value of a measure on that set: it is the infimum sum of measures of countable set of
sets that covers that set, where a different measure can be used for each set in the cover. -/
theorem binfi_apply {Œπ} {I : Set Œπ} (hI : I.Nonempty) (m : Œπ ‚Üí OuterMeasure Œ±) (s : Set Œ±) :
    (‚®Ö i ‚àà I, m i) s = ‚®Ö (t : ‚Ñï ‚Üí Set Œ±) (h2 : s ‚äÜ union t), ‚àë' n, ‚®Ö i ‚àà I, m i (t n) := by
  haveI := hI.to_subtype
  simp only [‚Üê infi_subtype'', infi_apply]
#align measure_theory.outer_measure.binfi_apply MeasureTheory.OuterMeasure.binfi_apply

/-- The value of the Infimum of a nonempty family of outer measures on a set is not simply
the minimum value of a measure on that set: it is the infimum sum of measures of countable set of
sets that covers that set, where a different measure can be used for each set in the cover. -/
theorem binfi_apply' {Œπ} (I : Set Œπ) (m : Œπ ‚Üí OuterMeasure Œ±) {s : Set Œ±} (hs : s.Nonempty) :
    (‚®Ö i ‚àà I, m i) s = ‚®Ö (t : ‚Ñï ‚Üí Set Œ±) (h2 : s ‚äÜ union t), ‚àë' n, ‚®Ö i ‚àà I, m i (t n) := by
  simp only [‚Üê infi_subtype'', infi_apply' _ hs]
#align measure_theory.outer_measure.binfi_apply' MeasureTheory.OuterMeasure.binfi_apply'

theorem map_infi_le {Œπ Œ≤} (f : Œ± ‚Üí Œ≤) (m : Œπ ‚Üí OuterMeasure Œ±) :
    map f (‚®Ö i, m i) ‚â§ ‚®Ö i, map f (m i) :=
  (map_mono f).map_infi_le
#align measure_theory.outer_measure.map_infi_le MeasureTheory.OuterMeasure.map_infi_le

theorem comap_infi {Œπ Œ≤} (f : Œ± ‚Üí Œ≤) (m : Œπ ‚Üí OuterMeasure Œ≤) :
    comap f (‚®Ö i, m i) = ‚®Ö i, comap f (m i) := by
  refine' ext_nonempty fun s hs => _
  refine' ((comap_mono f).map_infi_le s).antisymm _
  simp only [comap_apply, infi_apply' _ hs, infi_apply' _ (hs.image _), le_infi_iff,
    Set.image_subset_iff, preimage_Union]
  refine' fun t ht => infi_le_of_le _ (infi_le_of_le ht <| Ennreal.tsum_le_tsum fun k => _)
  exact infi_mono fun i => (m i).mono (image_preimage_subset _ _)
#align measure_theory.outer_measure.comap_infi MeasureTheory.OuterMeasure.comap_infi

theorem map_infi {Œπ Œ≤} {f : Œ± ‚Üí Œ≤} (hf : Injective f) (m : Œπ ‚Üí OuterMeasure Œ±) :
    map f (‚®Ö i, m i) = restrict (range f) (‚®Ö i, map f (m i)) := by
  refine' Eq.trans _ (map_comap _ _)
  simp only [comap_infi, comap_map hf]
#align measure_theory.outer_measure.map_infi MeasureTheory.OuterMeasure.map_infi

theorem map_infi_comap {Œπ Œ≤} [Nonempty Œπ] {f : Œ± ‚Üí Œ≤} (m : Œπ ‚Üí OuterMeasure Œ≤) :
    map f (‚®Ö i, comap f (m i)) = ‚®Ö i, map f (comap f (m i)) := by
  refine' (map_infi_le _ _).antisymm fun s => _
  simp only [map_apply, comap_apply, infi_apply, le_infi_iff]
  refine' fun t ht => infi_le_of_le (fun n => f '' t n ‚à™ range f·∂ú) (infi_le_of_le _ _)
  ¬∑ rw [‚Üê Union_union, Set.union_comm, ‚Üê inter_subset, ‚Üê image_Union, ‚Üê
      image_preimage_eq_inter_range]
    exact image_subset _ ht
  ¬∑ refine' Ennreal.tsum_le_tsum fun n => infi_mono fun i => (m i).mono _
    simp
#align measure_theory.outer_measure.map_infi_comap MeasureTheory.OuterMeasure.map_infi_comap

theorem map_binfi_comap {Œπ Œ≤} {I : Set Œπ} (hI : I.Nonempty) {f : Œ± ‚Üí Œ≤} (m : Œπ ‚Üí OuterMeasure Œ≤) :
    map f (‚®Ö i ‚àà I, comap f (m i)) = ‚®Ö i ‚àà I, map f (comap f (m i)) := by
  haveI := hI.to_subtype
  rw [‚Üê infi_subtype'', ‚Üê infi_subtype'']
  exact map_infi_comap _
#align measure_theory.outer_measure.map_binfi_comap MeasureTheory.OuterMeasure.map_binfi_comap

theorem restrict_infi_restrict {Œπ} (s : Set Œ±) (m : Œπ ‚Üí OuterMeasure Œ±) :
    restrict s (‚®Ö i, restrict s (m i)) = restrict s (‚®Ö i, m i) :=
  calc
    restrict s (‚®Ö i, restrict s (m i)) = restrict (range (coe : s ‚Üí Œ±)) (‚®Ö i, restrict s (m i)) :=
      by rw [Subtype.range_coe]
    _ = map (coe : s ‚Üí Œ±) (‚®Ö i, comap coe (m i)) := (map_infi Subtype.coe_injective _).symm
    _ = restrict s (‚®Ö i, m i) := congr_arg (map coe) (comap_infi _ _).symm
    
#align
  measure_theory.outer_measure.restrict_infi_restrict MeasureTheory.OuterMeasure.restrict_infi_restrict

theorem restrict_infi {Œπ} [Nonempty Œπ] (s : Set Œ±) (m : Œπ ‚Üí OuterMeasure Œ±) :
    restrict s (‚®Ö i, m i) = ‚®Ö i, restrict s (m i) :=
  (congr_arg (map coe) (comap_infi _ _)).trans (map_infi_comap _)
#align measure_theory.outer_measure.restrict_infi MeasureTheory.OuterMeasure.restrict_infi

theorem restrict_binfi {Œπ} {I : Set Œπ} (hI : I.Nonempty) (s : Set Œ±) (m : Œπ ‚Üí OuterMeasure Œ±) :
    restrict s (‚®Ö i ‚àà I, m i) = ‚®Ö i ‚àà I, restrict s (m i) := by
  haveI := hI.to_subtype
  rw [‚Üê infi_subtype'', ‚Üê infi_subtype'']
  exact restrict_infi _ _
#align measure_theory.outer_measure.restrict_binfi MeasureTheory.OuterMeasure.restrict_binfi

/-- This proves that Inf and restrict commute for outer measures, so long as the set of
outer measures is nonempty. -/
theorem restrict_Inf_eq_Inf_restrict (m : Set (OuterMeasure Œ±)) {s : Set Œ±} (hm : m.Nonempty) :
    restrict s (inf m) = inf (restrict s '' m) := by
  simp only [Inf_eq_infi, restrict_binfi, hm, infi_image]
#align
  measure_theory.outer_measure.restrict_Inf_eq_Inf_restrict MeasureTheory.OuterMeasure.restrict_Inf_eq_Inf_restrict

end InfGen

end OuterMeasure

open OuterMeasure

/-! ### Induced Outer Measure

  We can extend a function defined on a subset of `set Œ±` to an outer measure.
  The underlying function is called `extend`, and the measure it induces is called
  `induced_outer_measure`.

  Some lemmas below are proven twice, once in the general case, and one where the function `m`
  is only defined on measurable sets (i.e. when `P = measurable_set`). In the latter cases, we can
  remove some hypotheses in the statement. The general version has the same name, but with a prime
  at the end. -/


section Extend

variable {Œ± : Type _} {P : Œ± ‚Üí Prop}

variable (m : ‚àÄ s : Œ±, P s ‚Üí ‚Ñù‚â•0‚àû)

/-- We can trivially extend a function defined on a subclass of objects (with codomain `‚Ñù‚â•0‚àû`)
  to all objects by defining it to be `‚àû` on the objects not in the class. -/
def extend (s : Œ±) : ‚Ñù‚â•0‚àû :=
  ‚®Ö h : P s, m s h
#align measure_theory.extend MeasureTheory.extend

theorem extend_eq {s : Œ±} (h : P s) : extend m s = m s h := by simp [extend, h]
#align measure_theory.extend_eq MeasureTheory.extend_eq

theorem extend_eq_top {s : Œ±} (h : ¬¨P s) : extend m s = ‚àû := by simp [extend, h]
#align measure_theory.extend_eq_top MeasureTheory.extend_eq_top

theorem le_extend {s : Œ±} (h : P s) : m s h ‚â§ extend m s := by
  simp only [extend, le_infi_iff]
  intro
  rfl
#align measure_theory.le_extend MeasureTheory.le_extend

-- TODO: why this is a bad `congr` lemma?
theorem extend_congr {Œ≤ : Type _} {Pb : Œ≤ ‚Üí Prop} {mb : ‚àÄ s : Œ≤, Pb s ‚Üí ‚Ñù‚â•0‚àû} {sa : Œ±} {sb : Œ≤}
    (hP : P sa ‚Üî Pb sb) (hm : ‚àÄ (ha : P sa) (hb : Pb sb), m sa ha = mb sb hb) :
    extend m sa = extend mb sb :=
  infi_congr_Prop hP fun h => hm _ _
#align measure_theory.extend_congr MeasureTheory.extend_congr

end Extend

section ExtendSet

variable {Œ± : Type _} {P : Set Œ± ‚Üí Prop}

variable {m : ‚àÄ s : Set Œ±, P s ‚Üí ‚Ñù‚â•0‚àû}

variable (P0 : P ‚àÖ) (m0 : m ‚àÖ P0 = 0)

variable (PU : ‚àÄ ‚¶Éf : ‚Ñï ‚Üí Set Œ±‚¶Ñ (hm : ‚àÄ i, P (f i)), P (‚ãÉ i, f i))

variable
  (mU :
    ‚àÄ ‚¶Éf : ‚Ñï ‚Üí Set Œ±‚¶Ñ (hm : ‚àÄ i, P (f i)),
      Pairwise (Disjoint on f) ‚Üí m (‚ãÉ i, f i) (PU hm) = ‚àë' i, m (f i) (hm i))

variable (msU : ‚àÄ ‚¶Éf : ‚Ñï ‚Üí Set Œ±‚¶Ñ (hm : ‚àÄ i, P (f i)), m (‚ãÉ i, f i) (PU hm) ‚â§ ‚àë' i, m (f i) (hm i))

variable (m_mono : ‚àÄ ‚¶És‚ÇÅ s‚ÇÇ : Set Œ±‚¶Ñ (hs‚ÇÅ : P s‚ÇÅ) (hs‚ÇÇ : P s‚ÇÇ), s‚ÇÅ ‚äÜ s‚ÇÇ ‚Üí m s‚ÇÅ hs‚ÇÅ ‚â§ m s‚ÇÇ hs‚ÇÇ)

theorem extend_empty : extend m ‚àÖ = 0 :=
  (extend_eq _ P0).trans m0
#align measure_theory.extend_empty MeasureTheory.extend_empty

theorem extend_Union_nat {f : ‚Ñï ‚Üí Set Œ±} (hm : ‚àÄ i, P (f i))
    (mU : m (‚ãÉ i, f i) (PU hm) = ‚àë' i, m (f i) (hm i)) :
    extend m (‚ãÉ i, f i) = ‚àë' i, extend m (f i) :=
  (extend_eq _ _).trans <|
    mU.trans <| by 
      congr with i
      rw [extend_eq]
#align measure_theory.extend_Union_nat MeasureTheory.extend_Union_nat

section Subadditive

include PU msU

theorem extend_Union_le_tsum_nat' (s : ‚Ñï ‚Üí Set Œ±) : extend m (‚ãÉ i, s i) ‚â§ ‚àë' i, extend m (s i) := by
  by_cases h : ‚àÄ i, P (s i)
  ¬∑ rw [extend_eq _ (PU h), congr_arg tsum _]
    ¬∑ apply msU h
    funext i
    apply extend_eq _ (h i)
  ¬∑ cases' not_forall.1 h with i hi
    exact le_trans (le_infi fun h => hi.elim h) (Ennreal.le_tsum i)
#align measure_theory.extend_Union_le_tsum_nat' MeasureTheory.extend_Union_le_tsum_nat'

end Subadditive

section Mono

include m_mono

theorem extend_mono' ‚¶És‚ÇÅ s‚ÇÇ : Set Œ±‚¶Ñ (h‚ÇÅ : P s‚ÇÅ) (hs : s‚ÇÅ ‚äÜ s‚ÇÇ) : extend m s‚ÇÅ ‚â§ extend m s‚ÇÇ := by
  refine' le_infi _
  intro h‚ÇÇ
  rw [extend_eq m h‚ÇÅ]
  exact m_mono h‚ÇÅ h‚ÇÇ hs
#align measure_theory.extend_mono' MeasureTheory.extend_mono'

end Mono

section Unions

include P0 m0 PU mU

theorem extend_Union {Œ≤} [Countable Œ≤] {f : Œ≤ ‚Üí Set Œ±} (hd : Pairwise (Disjoint on f))
    (hm : ‚àÄ i, P (f i)) : extend m (‚ãÉ i, f i) = ‚àë' i, extend m (f i) := by
  cases nonempty_encodable Œ≤
  rw [‚Üê Encodable.Union_decode‚ÇÇ, ‚Üê tsum_Union_decode‚ÇÇ]
  ¬∑
    exact
      extend_Union_nat PU (fun n => Encodable.Union_decode‚ÇÇ_cases P0 hm)
        (mU _ (Encodable.Union_decode‚ÇÇ_disjoint_on hd))
  ¬∑ exact extend_empty P0 m0
#align measure_theory.extend_Union MeasureTheory.extend_Union

theorem extend_union {s‚ÇÅ s‚ÇÇ : Set Œ±} (hd : Disjoint s‚ÇÅ s‚ÇÇ) (h‚ÇÅ : P s‚ÇÅ) (h‚ÇÇ : P s‚ÇÇ) :
    extend m (s‚ÇÅ ‚à™ s‚ÇÇ) = extend m s‚ÇÅ + extend m s‚ÇÇ := by
  rw [union_eq_Union,
    extend_Union P0 m0 PU mU (pairwise_disjoint_on_bool.2 hd) (Bool.forall_bool.2 ‚ü®h‚ÇÇ, h‚ÇÅ‚ü©),
    tsum_fintype]
  simp
#align measure_theory.extend_union MeasureTheory.extend_union

end Unions

variable (m)

/-- Given an arbitrary function on a subset of sets, we can define the outer measure corresponding
  to it (this is the unique maximal outer measure that is at most `m` on the domain of `m`). -/
def inducedOuterMeasure : OuterMeasure Œ± :=
  OuterMeasure.ofFunction (extend m) (extend_empty P0 m0)
#align measure_theory.induced_outer_measure MeasureTheory.inducedOuterMeasure

variable {m P0 m0}

theorem le_induced_outer_measure {Œº : OuterMeasure Œ±} :
    Œº ‚â§ inducedOuterMeasure m P0 m0 ‚Üî ‚àÄ (s) (hs : P s), Œº s ‚â§ m s hs :=
  le_of_function.trans <| forall_congr' fun s => le_infi_iff
#align measure_theory.le_induced_outer_measure MeasureTheory.le_induced_outer_measure

/-- If `P u` is `false` for any set `u` that has nonempty intersection both with `s` and `t`, then
`Œº (s ‚à™ t) = Œº s + Œº t`, where `Œº = induced_outer_measure m P0 m0`.

E.g., if `Œ±` is an (e)metric space and `P u = diam u < r`, then this lemma implies that
`Œº (s ‚à™ t) = Œº s + Œº t` on any two sets such that `r ‚â§ edist x y` for all `x ‚àà s` and `y ‚àà t`. -/
theorem induced_outer_measure_union_of_false_of_nonempty_inter {s t : Set Œ±}
    (h : ‚àÄ u, (s ‚à© u).Nonempty ‚Üí (t ‚à© u).Nonempty ‚Üí ¬¨P u) :
    inducedOuterMeasure m P0 m0 (s ‚à™ t) =
      inducedOuterMeasure m P0 m0 s + inducedOuterMeasure m P0 m0 t :=
  of_function_union_of_top_of_nonempty_inter fun u hsu htu => @infi_of_empty _ _ _ ‚ü®h u hsu htu‚ü© _
#align
  measure_theory.induced_outer_measure_union_of_false_of_nonempty_inter MeasureTheory.induced_outer_measure_union_of_false_of_nonempty_inter

include msU m_mono

theorem induced_outer_measure_eq_extend' {s : Set Œ±} (hs : P s) :
    inducedOuterMeasure m P0 m0 s = extend m s :=
  of_function_eq s (fun t => extend_mono' m_mono hs) (extend_Union_le_tsum_nat' PU msU)
#align
  measure_theory.induced_outer_measure_eq_extend' MeasureTheory.induced_outer_measure_eq_extend'

theorem induced_outer_measure_eq' {s : Set Œ±} (hs : P s) : inducedOuterMeasure m P0 m0 s = m s hs :=
  (induced_outer_measure_eq_extend' PU msU m_mono hs).trans <| extend_eq _ _
#align measure_theory.induced_outer_measure_eq' MeasureTheory.induced_outer_measure_eq'

theorem induced_outer_measure_eq_infi (s : Set Œ±) :
    inducedOuterMeasure m P0 m0 s = ‚®Ö (t : Set Œ±) (ht : P t) (h : s ‚äÜ t), m t ht := by
  apply le_antisymm
  ¬∑ simp only [le_infi_iff]
    intro t ht hs
    refine' le_trans (mono' _ hs) _
    exact le_of_eq (induced_outer_measure_eq' _ msU m_mono _)
  ¬∑ refine' le_infi _
    intro f
    refine' le_infi _
    intro hf
    refine' le_trans _ (extend_Union_le_tsum_nat' _ msU _)
    refine' le_infi _
    intro h2f
    refine' infi_le_of_le _ (infi_le_of_le h2f <| infi_le _ hf)
#align measure_theory.induced_outer_measure_eq_infi MeasureTheory.induced_outer_measure_eq_infi

theorem induced_outer_measure_preimage (f : Œ± ‚âÉ Œ±) (Pm : ‚àÄ s : Set Œ±, P (f ‚Åª¬π' s) ‚Üî P s)
    (mm : ‚àÄ (s : Set Œ±) (hs : P s), m (f ‚Åª¬π' s) ((Pm _).mpr hs) = m s hs) {A : Set Œ±} :
    inducedOuterMeasure m P0 m0 (f ‚Åª¬π' A) = inducedOuterMeasure m P0 m0 A := by
  simp only [induced_outer_measure_eq_infi _ msU m_mono]; symm
  refine' f.injective.preimage_surjective.infi_congr (preimage f) fun s => _
  refine' infi_congr_Prop (Pm s) _; intro hs
  refine' infi_congr_Prop f.surjective.preimage_subset_preimage_iff _
  intro h2s; exact mm s hs
#align measure_theory.induced_outer_measure_preimage MeasureTheory.induced_outer_measure_preimage

theorem induced_outer_measure_exists_set {s : Set Œ±} (hs : inducedOuterMeasure m P0 m0 s ‚â† ‚àû)
    {Œµ : ‚Ñù‚â•0‚àû} (hŒµ : Œµ ‚â† 0) :
    ‚àÉ (t : Set Œ±)(ht : P t),
      s ‚äÜ t ‚àß inducedOuterMeasure m P0 m0 t ‚â§ inducedOuterMeasure m P0 m0 s + Œµ :=
  by 
  have := Ennreal.lt_add_right hs hŒµ
  conv at this => 
    lhs
    rw [induced_outer_measure_eq_infi _ msU m_mono]
  simp only [infi_lt_iff] at this
  rcases this with ‚ü®t, h1t, h2t, h3t‚ü©
  exact
    ‚ü®t, h1t, h2t, le_trans (le_of_eq <| induced_outer_measure_eq' _ msU m_mono h1t) (le_of_lt h3t)‚ü©
#align
  measure_theory.induced_outer_measure_exists_set MeasureTheory.induced_outer_measure_exists_set

/-- To test whether `s` is Carath√©odory-measurable we only need to check the sets `t` for which
  `P t` holds. See `of_function_caratheodory` for another way to show the Carath√©odory-measurability
  of `s`.
-/
theorem induced_outer_measure_caratheodory (s : Set Œ±) :
    measurable_set[(inducedOuterMeasure m P0 m0).caratheodory] s ‚Üî
      ‚àÄ t : Set Œ±,
        P t ‚Üí
          inducedOuterMeasure m P0 m0 (t ‚à© s) + inducedOuterMeasure m P0 m0 (t \ s) ‚â§
            inducedOuterMeasure m P0 m0 t :=
  by 
  rw [is_caratheodory_iff_le]
  constructor
  ¬∑ intro h t ht
    exact h t
  ¬∑ intro h u
    conv_rhs => rw [induced_outer_measure_eq_infi _ msU m_mono]
    refine' le_infi _
    intro t
    refine' le_infi _
    intro ht
    refine' le_infi _
    intro h2t
    refine' le_trans _ (le_trans (h t ht) <| le_of_eq <| induced_outer_measure_eq' _ msU m_mono ht)
    refine'
      add_le_add (mono' _ <| Set.inter_subset_inter_left _ h2t)
        (mono' _ <| diff_subset_diff_left h2t)
#align
  measure_theory.induced_outer_measure_caratheodory MeasureTheory.induced_outer_measure_caratheodory

end ExtendSet

/-! If `P` is `measurable_set` for some measurable space, then we can remove some hypotheses of the
  above lemmas. -/


section MeasurableSpace

variable {Œ± : Type _} [MeasurableSpace Œ±]

variable {m : ‚àÄ s : Set Œ±, MeasurableSet s ‚Üí ‚Ñù‚â•0‚àû}

variable (m0 : m ‚àÖ MeasurableSet.empty = 0)

variable
  (mU :
    ‚àÄ ‚¶Éf : ‚Ñï ‚Üí Set Œ±‚¶Ñ (hm : ‚àÄ i, MeasurableSet (f i)),
      Pairwise (Disjoint on f) ‚Üí m (‚ãÉ i, f i) (MeasurableSet.union hm) = ‚àë' i, m (f i) (hm i))

include m0 mU

theorem extend_mono {s‚ÇÅ s‚ÇÇ : Set Œ±} (h‚ÇÅ : MeasurableSet s‚ÇÅ) (hs : s‚ÇÅ ‚äÜ s‚ÇÇ) :
    extend m s‚ÇÅ ‚â§ extend m s‚ÇÇ := by 
  refine' le_infi _; intro h‚ÇÇ
  have := extend_union MeasurableSet.empty m0 MeasurableSet.union mU disjoint_diff h‚ÇÅ (h‚ÇÇ.diff h‚ÇÅ)
  rw [union_diff_cancel hs] at this
  rw [‚Üê extend_eq m]
  exact le_iff_exists_add.2 ‚ü®_, this‚ü©
#align measure_theory.extend_mono MeasureTheory.extend_mono

theorem extend_Union_le_tsum_nat : ‚àÄ s : ‚Ñï ‚Üí Set Œ±, extend m (‚ãÉ i, s i) ‚â§ ‚àë' i, extend m (s i) := by
  refine' extend_Union_le_tsum_nat' MeasurableSet.union _; intro f h
  simp (config := { singlePass := true }) [Union_disjointed.symm]
  rw [mU (MeasurableSet.disjointed h) (disjoint_disjointed _)]
  refine' Ennreal.tsum_le_tsum fun i => _
  rw [‚Üê extend_eq m, ‚Üê extend_eq m]
  exact extend_mono m0 mU (MeasurableSet.disjointed h _) (disjointed_le f _)
#align measure_theory.extend_Union_le_tsum_nat MeasureTheory.extend_Union_le_tsum_nat

theorem induced_outer_measure_eq_extend {s : Set Œ±} (hs : MeasurableSet s) :
    inducedOuterMeasure m MeasurableSet.empty m0 s = extend m s :=
  of_function_eq s (fun t => extend_mono m0 mU hs) (extend_Union_le_tsum_nat m0 mU)
#align measure_theory.induced_outer_measure_eq_extend MeasureTheory.induced_outer_measure_eq_extend

theorem induced_outer_measure_eq {s : Set Œ±} (hs : MeasurableSet s) :
    inducedOuterMeasure m MeasurableSet.empty m0 s = m s hs :=
  (induced_outer_measure_eq_extend m0 mU hs).trans <| extend_eq _ _
#align measure_theory.induced_outer_measure_eq MeasureTheory.induced_outer_measure_eq

end MeasurableSpace

namespace OuterMeasure

variable {Œ± : Type _} [MeasurableSpace Œ±] (m : OuterMeasure Œ±)

/-- Given an outer measure `m` we can forget its value on non-measurable sets, and then consider
  `m.trim`, the unique maximal outer measure less than that function. -/
def trim : OuterMeasure Œ± :=
  inducedOuterMeasure (fun s _ => m s) MeasurableSet.empty m.Empty
#align measure_theory.outer_measure.trim MeasureTheory.OuterMeasure.trim

theorem le_trim : m ‚â§ m.trim :=
  le_of_function.mpr fun s => le_infi fun _ => le_rfl
#align measure_theory.outer_measure.le_trim MeasureTheory.OuterMeasure.le_trim

theorem trim_eq {s : Set Œ±} (hs : MeasurableSet s) : m.trim s = m s :=
  induced_outer_measure_eq' MeasurableSet.union (fun f hf => m.Union_nat f)
    (fun _ _ _ _ h => m.mono h) hs
#align measure_theory.outer_measure.trim_eq MeasureTheory.OuterMeasure.trim_eq

theorem trim_congr {m‚ÇÅ m‚ÇÇ : OuterMeasure Œ±} (H : ‚àÄ {s : Set Œ±}, MeasurableSet s ‚Üí m‚ÇÅ s = m‚ÇÇ s) :
    m‚ÇÅ.trim = m‚ÇÇ.trim := by 
  unfold trim
  congr
  funext s hs
  exact H hs
#align measure_theory.outer_measure.trim_congr MeasureTheory.OuterMeasure.trim_congr

@[mono]
theorem trim_mono : Monotone (trim : OuterMeasure Œ± ‚Üí OuterMeasure Œ±) := fun m‚ÇÅ m‚ÇÇ H s =>
  infi‚ÇÇ_mono fun f hs => Ennreal.tsum_le_tsum fun b => infi_mono fun hf => H _
#align measure_theory.outer_measure.trim_mono MeasureTheory.OuterMeasure.trim_mono

theorem le_trim_iff {m‚ÇÅ m‚ÇÇ : OuterMeasure Œ±} : m‚ÇÅ ‚â§ m‚ÇÇ.trim ‚Üî ‚àÄ s, MeasurableSet s ‚Üí m‚ÇÅ s ‚â§ m‚ÇÇ s :=
  le_of_function.trans <| forall_congr' fun s => le_infi_iff
#align measure_theory.outer_measure.le_trim_iff MeasureTheory.OuterMeasure.le_trim_iff

theorem trim_le_trim_iff {m‚ÇÅ m‚ÇÇ : OuterMeasure Œ±} :
    m‚ÇÅ.trim ‚â§ m‚ÇÇ.trim ‚Üî ‚àÄ s, MeasurableSet s ‚Üí m‚ÇÅ s ‚â§ m‚ÇÇ s :=
  le_trim_iff.trans <| forall‚ÇÇ_congr fun s hs => by rw [trim_eq _ hs]
#align measure_theory.outer_measure.trim_le_trim_iff MeasureTheory.OuterMeasure.trim_le_trim_iff

theorem trim_eq_trim_iff {m‚ÇÅ m‚ÇÇ : OuterMeasure Œ±} :
    m‚ÇÅ.trim = m‚ÇÇ.trim ‚Üî ‚àÄ s, MeasurableSet s ‚Üí m‚ÇÅ s = m‚ÇÇ s := by
  simp only [le_antisymm_iff, trim_le_trim_iff, forall_and]
#align measure_theory.outer_measure.trim_eq_trim_iff MeasureTheory.OuterMeasure.trim_eq_trim_iff

theorem trim_eq_infi (s : Set Œ±) : m.trim s = ‚®Ö (t) (st : s ‚äÜ t) (ht : MeasurableSet t), m t := by
  simp (config := { singlePass := true }) only [infi_comm]
  exact
    induced_outer_measure_eq_infi MeasurableSet.union (fun f _ => m.Union_nat f)
      (fun _ _ _ _ h => m.mono h) s
#align measure_theory.outer_measure.trim_eq_infi MeasureTheory.OuterMeasure.trim_eq_infi

theorem trim_eq_infi' (s : Set Œ±) : m.trim s = ‚®Ö t : { t // s ‚äÜ t ‚àß MeasurableSet t }, m t := by
  simp [infi_subtype, infi_and, trim_eq_infi]
#align measure_theory.outer_measure.trim_eq_infi' MeasureTheory.OuterMeasure.trim_eq_infi'

theorem trim_trim (m : OuterMeasure Œ±) : m.trim.trim = m.trim :=
  trim_eq_trim_iff.2 fun s => m.trim_eq
#align measure_theory.outer_measure.trim_trim MeasureTheory.OuterMeasure.trim_trim

@[simp]
theorem trim_zero : (0 : OuterMeasure Œ±).trim = 0 :=
  ext fun s =>
    le_antisymm
      (le_trans ((trim 0).mono (subset_univ s)) <| le_of_eq <| trim_eq _ MeasurableSet.univ)
      (zero_le _)
#align measure_theory.outer_measure.trim_zero MeasureTheory.OuterMeasure.trim_zero

theorem trim_sum_ge {Œπ} (m : Œπ ‚Üí OuterMeasure Œ±) : (sum fun i => (m i).trim) ‚â§ (sum m).trim :=
  fun s => by
  simp [trim_eq_infi] <;>
    exact fun t st ht =>
      Ennreal.tsum_le_tsum fun i => infi_le_of_le t <| infi_le_of_le st <| infi_le _ ht
#align measure_theory.outer_measure.trim_sum_ge MeasureTheory.OuterMeasure.trim_sum_ge

theorem exists_measurable_superset_eq_trim (m : OuterMeasure Œ±) (s : Set Œ±) :
    ‚àÉ t, s ‚äÜ t ‚àß MeasurableSet t ‚àß m t = m.trim s := by
  simp only [trim_eq_infi]; set ms := ‚®Ö (t : Set Œ±) (st : s ‚äÜ t) (ht : MeasurableSet t), m t
  by_cases hs : ms = ‚àû
  ¬∑ simp only [hs]
    simp only [infi_eq_top] at hs
    exact ‚ü®univ, subset_univ s, MeasurableSet.univ, hs _ (subset_univ s) MeasurableSet.univ‚ü©
  ¬∑ have : ‚àÄ r > ms, ‚àÉ t, s ‚äÜ t ‚àß MeasurableSet t ‚àß m t < r := by
      intro r hs
      simpa [infi_lt_iff] using hs
    have : ‚àÄ n : ‚Ñï, ‚àÉ t, s ‚äÜ t ‚àß MeasurableSet t ‚àß m t < ms + n‚Åª¬π := by
      intro n
      refine' this _ (Ennreal.lt_add_right hs _)
      simp
    choose t hsub hm hm'
    refine' ‚ü®‚ãÇ n, t n, subset_Inter hsub, MeasurableSet.inter hm, _‚ü©
    have : tendsto (fun n : ‚Ñï => ms + n‚Åª¬π) at_top (ùìù (ms + 0)) :=
      tendsto_const_nhds.add Ennreal.tendsto_inv_nat_nhds_zero
    rw [add_zero] at this
    refine' le_antisymm ((ge_of_tendsto' this) fun n => _) _
    ¬∑ exact le_trans (m.mono' <| Inter_subset t n) (hm' n).le
    ¬∑ refine' infi_le_of_le (‚ãÇ n, t n) _
      refine' infi_le_of_le (subset_Inter hsub) _
      refine' infi_le _ (MeasurableSet.inter hm)
#align
  measure_theory.outer_measure.exists_measurable_superset_eq_trim MeasureTheory.OuterMeasure.exists_measurable_superset_eq_trim

theorem exists_measurable_superset_of_trim_eq_zero {m : OuterMeasure Œ±} {s : Set Œ±}
    (h : m.trim s = 0) : ‚àÉ t, s ‚äÜ t ‚àß MeasurableSet t ‚àß m t = 0 := by
  rcases exists_measurable_superset_eq_trim m s with ‚ü®t, hst, ht, hm‚ü©
  exact ‚ü®t, hst, ht, h ‚ñ∏ hm‚ü©
#align
  measure_theory.outer_measure.exists_measurable_superset_of_trim_eq_zero MeasureTheory.OuterMeasure.exists_measurable_superset_of_trim_eq_zero

/-- If `Œº i` is a countable family of outer measures, then for every set `s` there exists
a measurable set `t ‚äá s` such that `Œº i t = (Œº i).trim s` for all `i`. -/
theorem exists_measurable_superset_forall_eq_trim {Œπ} [Countable Œπ] (Œº : Œπ ‚Üí OuterMeasure Œ±)
    (s : Set Œ±) : ‚àÉ t, s ‚äÜ t ‚àß MeasurableSet t ‚àß ‚àÄ i, Œº i t = (Œº i).trim s := by
  choose t hst ht hŒºt using fun i => (Œº i).exists_measurable_superset_eq_trim s
  replace hst := subset_Inter hst
  replace ht := MeasurableSet.inter ht
  refine' ‚ü®‚ãÇ i, t i, hst, ht, fun i => le_antisymm _ _‚ü©
  exacts[hŒºt i ‚ñ∏ (Œº i).mono (Inter_subset _ _), (mono' _ hst).trans_eq ((Œº i).trim_eq ht)]
#align
  measure_theory.outer_measure.exists_measurable_superset_forall_eq_trim MeasureTheory.OuterMeasure.exists_measurable_superset_forall_eq_trim

/-- If `m‚ÇÅ s = op (m‚ÇÇ s) (m‚ÇÉ s)` for all `s`, then the same is true for `m‚ÇÅ.trim`, `m‚ÇÇ.trim`,
and `m‚ÇÉ s`. -/
theorem trim_binop {m‚ÇÅ m‚ÇÇ m‚ÇÉ : OuterMeasure Œ±} {op : ‚Ñù‚â•0‚àû ‚Üí ‚Ñù‚â•0‚àû ‚Üí ‚Ñù‚â•0‚àû}
    (h : ‚àÄ s, m‚ÇÅ s = op (m‚ÇÇ s) (m‚ÇÉ s)) (s : Set Œ±) : m‚ÇÅ.trim s = op (m‚ÇÇ.trim s) (m‚ÇÉ.trim s) := by
  rcases exists_measurable_superset_forall_eq_trim ![m‚ÇÅ, m‚ÇÇ, m‚ÇÉ] s with ‚ü®t, hst, ht, htm‚ü©
  simp only [Fin.forall_fin_succ, Matrix.cons_val_zero, Matrix.cons_val_succ] at htm
  rw [‚Üê htm.1, ‚Üê htm.2.1, ‚Üê htm.2.2.1, h]
#align measure_theory.outer_measure.trim_binop MeasureTheory.OuterMeasure.trim_binop

/-- If `m‚ÇÅ s = op (m‚ÇÇ s)` for all `s`, then the same is true for `m‚ÇÅ.trim` and `m‚ÇÇ.trim`. -/
theorem trim_op {m‚ÇÅ m‚ÇÇ : OuterMeasure Œ±} {op : ‚Ñù‚â•0‚àû ‚Üí ‚Ñù‚â•0‚àû} (h : ‚àÄ s, m‚ÇÅ s = op (m‚ÇÇ s))
    (s : Set Œ±) : m‚ÇÅ.trim s = op (m‚ÇÇ.trim s) :=
  @trim_binop Œ± _ m‚ÇÅ m‚ÇÇ 0 (fun a b => op a) h s
#align measure_theory.outer_measure.trim_op MeasureTheory.OuterMeasure.trim_op

/-- `trim` is additive. -/
theorem trim_add (m‚ÇÅ m‚ÇÇ : OuterMeasure Œ±) : (m‚ÇÅ + m‚ÇÇ).trim = m‚ÇÅ.trim + m‚ÇÇ.trim :=
  ext <| trim_binop (add_apply m‚ÇÅ m‚ÇÇ)
#align measure_theory.outer_measure.trim_add MeasureTheory.OuterMeasure.trim_add

/-- `trim` respects scalar multiplication. -/
theorem trim_smul {R : Type _} [HasSmul R ‚Ñù‚â•0‚àû] [IsScalarTower R ‚Ñù‚â•0‚àû ‚Ñù‚â•0‚àû] (c : R)
    (m : OuterMeasure Œ±) : (c ‚Ä¢ m).trim = c ‚Ä¢ m.trim :=
  ext <| trim_op (smul_apply c m)
#align measure_theory.outer_measure.trim_smul MeasureTheory.OuterMeasure.trim_smul

/-- `trim` sends the supremum of two outer measures to the supremum of the trimmed measures. -/
theorem trim_sup (m‚ÇÅ m‚ÇÇ : OuterMeasure Œ±) : (m‚ÇÅ ‚äî m‚ÇÇ).trim = m‚ÇÅ.trim ‚äî m‚ÇÇ.trim :=
  ext fun s => (trim_binop (sup_apply m‚ÇÅ m‚ÇÇ) s).trans (sup_apply _ _ _).symm
#align measure_theory.outer_measure.trim_sup MeasureTheory.OuterMeasure.trim_sup

/-- `trim` sends the supremum of a countable family of outer measures to the supremum
of the trimmed measures. -/
theorem trim_supr {Œπ} [Countable Œπ] (Œº : Œπ ‚Üí OuterMeasure Œ±) : trim (‚®Ü i, Œº i) = ‚®Ü i, trim (Œº i) :=
  by 
  simp_rw [‚Üê @supr_plift_down _ Œπ]
  ext1 s
  haveI : Countable (Option <| PLift Œπ) := @Option.countable (PLift Œπ) _
  obtain ‚ü®t, hst, ht, hŒºt‚ü© :=
    exists_measurable_superset_forall_eq_trim
      (Option.elim' (‚®Ü i, Œº (PLift.down i)) (Œº ‚àò PLift.down)) s
  simp only [Option.forall, Option.elim'] at hŒºt
  simp only [supr_apply, ‚Üê hŒºt.1, ‚Üê hŒºt.2]
#align measure_theory.outer_measure.trim_supr MeasureTheory.OuterMeasure.trim_supr

/-- The trimmed property of a measure Œº states that `Œº.to_outer_measure.trim = Œº.to_outer_measure`.
This theorem shows that a restricted trimmed outer measure is a trimmed outer measure. -/
theorem restrict_trim {Œº : OuterMeasure Œ±} {s : Set Œ±} (hs : MeasurableSet s) :
    (restrict s Œº).trim = restrict s Œº.trim := by
  refine' le_antisymm (fun t => _) (le_trim_iff.2 fun t ht => _)
  ¬∑ rw [restrict_apply]
    rcases Œº.exists_measurable_superset_eq_trim (t ‚à© s) with ‚ü®t', htt', ht', hŒºt'‚ü©
    rw [‚Üê hŒºt']
    rw [inter_subset] at htt'
    refine' (mono' _ htt').trans _
    rw [trim_eq _ (hs.compl.union ht'), restrict_apply, union_inter_distrib_right, compl_inter_self,
      Set.empty_union]
    exact Œº.mono' (inter_subset_left _ _)
  ¬∑ rw [restrict_apply, trim_eq _ (ht.inter hs), restrict_apply]
    exact le_rfl
#align measure_theory.outer_measure.restrict_trim MeasureTheory.OuterMeasure.restrict_trim

end OuterMeasure

end MeasureTheory

