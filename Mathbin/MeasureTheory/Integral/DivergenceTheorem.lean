/-
Copyright (c) 2021 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov

! This file was ported from Lean 3 source module measure_theory.integral.divergence_theorem
! leanprover-community/mathlib commit 6afc9b06856ad973f6a2619e3e8a0a8d537a58f2
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Analysis.BoxIntegral.DivergenceTheorem
import Mathbin.Analysis.BoxIntegral.Integrability
import Mathbin.MeasureTheory.Integral.IntervalIntegral

/-!
# Divergence theorem for Bochner integral

In this file we prove the Divergence theorem for Bochner integral on a box in
`ℝⁿ⁺¹ = fin (n + 1) → ℝ`. More precisely, we prove the following theorem.

Let `E` be a complete normed space. If `f : ℝⁿ⁺¹ → Eⁿ⁺¹` is
continuous on a rectangular box `[a, b] : set ℝⁿ⁺¹`, `a ≤ b`, differentiable on its interior with
derivative `f' : ℝⁿ⁺¹ → ℝⁿ⁺¹ →L[ℝ] Eⁿ⁺¹`, and the divergence `λ x, ∑ i, f' x eᵢ i` is integrable on
`[a, b]`, where `eᵢ = pi.single i 1` is the `i`-th basis vector, then its integral is equal to the
sum of integrals of `f` over the faces of `[a, b]`, taken with appropriate signs. Moreover, the same
is true if the function is not differentiable at countably many points of the interior of `[a, b]`.

Once we prove the general theorem, we deduce corollaries for functions `ℝ → E` and pairs of
functions `(ℝ × ℝ) → E`.

## Notations

We use the following local notation to make the statement more readable. Note that the documentation
website shows the actual terms, not those abbreviated using local notations.

* `ℝⁿ`, `ℝⁿ⁺¹`, `Eⁿ⁺¹`: `fin n → ℝ`, `fin (n + 1) → ℝ`, `fin (n + 1) → E`;
* `face i`: the `i`-th face of the box `[a, b]` as a closed segment in `ℝⁿ`, namely `[a ∘
  fin.succ_above i, b ∘ fin.succ_above i]`;
* `e i` : `i`-th basis vector `pi.single i 1`;
* `front_face i`, `back_face i`: embeddings `ℝⁿ → ℝⁿ⁺¹` corresponding to the front face
  `{x | x i = b i}` and back face `{x | x i = a i}` of the box `[a, b]`, respectively.
  They are given by `fin.insert_nth i (b i)` and `fin.insert_nth i (a i)`.

## TODO

* Add a version that assumes existence and integrability of partial derivatives.

## Tags

divergence theorem, Bochner integral
-/


open Set Finset TopologicalSpace Function BoxIntegral MeasureTheory Filter

open BigOperators Classical TopologicalSpace Interval

universe u

namespace MeasureTheory

variable {E : Type u} [NormedAddCommGroup E] [NormedSpace ℝ E] [CompleteSpace E]

section

variable {n : ℕ}

-- mathport name: «exprℝⁿ»
local notation "ℝⁿ" => Fin n → ℝ

-- mathport name: «exprℝⁿ⁺¹»
local notation "ℝⁿ⁺¹" => Fin (n + 1) → ℝ

-- mathport name: «exprEⁿ⁺¹»
local notation "Eⁿ⁺¹" => Fin (n + 1) → E

-- mathport name: «expre »
local notation "e " i => Pi.single i 1

section

/-!
### Divergence theorem for functions on `ℝⁿ⁺¹ = fin (n + 1) → ℝ`.

In this section we use the divergence theorem for a Henstock-Kurzweil-like integral
`box_integral.has_integral_GP_divergence_of_forall_has_deriv_within_at` to prove the divergence
theorem for Bochner integral. The divergence theorem for Bochner integral
`measure_theory.integral_divergence_of_has_fderiv_within_at_off_countable` assumes that the function
itself is continuous on a closed box, differentiable at all but countably many points of its
interior, and the divergence is integrable on the box.

This statement differs from `box_integral.has_integral_GP_divergence_of_forall_has_deriv_within_at`
in several aspects.

* We use Bochner integral instead of a Henstock-Kurzweil integral. This modification is done in
  `measure_theory.integral_divergence_of_has_fderiv_within_at_off_countable_aux₁`. As a side effect
  of this change, we need to assume that the divergence is integrable.

* We don't assume differentiability on the boundary of the box. This modification is done in
  `measure_theory.integral_divergence_of_has_fderiv_within_at_off_countable_aux₂`. To prove it, we
  choose an increasing sequence of smaller boxes that cover the interior of the original box, then
  apply the previous lemma to these smaller boxes and take the limit of both sides of the equation.

* We assume `a ≤ b` instead of `∀ i, a i < b i`. This is the last step of the proof, and it is done
  in the main theorem `measure_theory.integral_divergence_of_has_fderiv_within_at_off_countable`.
-/


/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "An auxiliary lemma for\n`measure_theory.integral_divergence_of_has_fderiv_within_at_off_countable`. This is exactly\n`box_integral.has_integral_GP_divergence_of_forall_has_deriv_within_at` reformulated for the\nBochner integral. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `integral_divergence_of_has_fderiv_within_at_off_countable_aux₁ [])
      (Command.declSig
       [(Term.explicitBinder
         "("
         [`I]
         [":" (Term.app `Box [(Term.app `Fin [(«term_+_» `n "+" (num "1"))])])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`f]
         [":"
          (Term.arrow
           (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")
           "→"
           (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termEⁿ⁺¹» "Eⁿ⁺¹"))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`f']
         [":"
          (Term.arrow
           (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")
           "→"
           (Topology.Algebra.Module.Basic.«term_→L[_]_»
            (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")
            " →L["
            (Data.Real.Basic.termℝ "ℝ")
            "] "
            (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termEⁿ⁺¹» "Eⁿ⁺¹")))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`s]
         [":"
          (Term.app
           `Set
           [(MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")])]
         []
         ")")
        (Term.explicitBinder "(" [`hs] [":" (Term.proj `s "." `Countable)] [] ")")
        (Term.explicitBinder
         "("
         [`Hc]
         [":" (Term.app `ContinuousOn [`f (Term.proj `I "." `IccCat)])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`Hd]
         [":"
          (Std.ExtendedBinder.«term∀__,_»
           "∀"
           (Lean.binderIdent `x)
           («binderTerm∈_» "∈" («term_\_» (Term.proj `I "." `IccCat) "\\" `s))
           ","
           (Term.app `HasFderivWithinAt [`f (Term.app `f' [`x]) (Term.proj `I "." `IccCat) `x]))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`Hi]
         [":"
          (Term.app
           `IntegrableOn
           [(Term.fun
             "fun"
             (Term.basicFun
              [`x]
              []
              "=>"
              (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
               "∑"
               (Std.ExtendedBinder.extBinders
                (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
               ", "
               (Term.app
                `f'
                [`x (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i) `i]))))
            (Term.proj `I "." `IccCat)])]
         []
         ")")]
       (Term.typeSpec
        ":"
        («term_=_»
         (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
          "∫"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
          " in "
          (Term.proj `I "." `IccCat)
          ", "
          (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
           "∑"
           (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
           ", "
           (Term.app
            `f'
            [`x (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i) `i])))
         "="
         (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
          "∑"
          (Std.ExtendedBinder.extBinders
           (Std.ExtendedBinder.extBinder
            (Lean.binderIdent `i)
            [(group ":" (Term.app `Fin [(«term_+_» `n "+" (num "1"))]))]))
          ", "
          («term_-_»
           (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
            "∫"
            (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
            " in "
            (Term.proj (Term.app (Term.proj `I "." `face) [`i]) "." `IccCat)
            ", "
            (Term.app
             `f
             [(Term.app
               (Term.proj `i "." `insertNth)
               [(Term.app (Term.proj `I "." `upper) [`i]) `x])
              `i]))
           "-"
           (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
            "∫"
            (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
            " in "
            (Term.proj (Term.app (Term.proj `I "." `face) [`i]) "." `IccCat)
            ", "
            (Term.app
             `f
             [(Term.app
               (Term.proj `i "." `insertNth)
               [(Term.app (Term.proj `I "." `lower) [`i]) `x])
              `i])))))))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.simp
            "simp"
            []
            []
            ["only"]
            ["["
             [(Tactic.simpLemma
               []
               [(patternIgnore (token.«← » "←"))]
               (Term.app
                `set_integral_congr_set_ae
                [(Term.app `box.coe_ae_eq_Icc [(Term.hole "_")])]))]
             "]"]
            [])
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`A []]
              []
              ":="
              (Term.app
               (Term.proj (Term.app `Hi.mono_set [`box.coe_subset_Icc]) "." `hasBoxIntegral)
               [(Order.BoundedOrder.«term⊥» "⊥") `rfl]))))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`B []]
              []
              ":="
              (Term.app
               `has_integral_GP_divergence_of_forall_has_deriv_within_at
               [`I
                `f
                `f'
                («term_∩_» `s "∩" `I.Icc)
                (Term.app
                 `hs.mono
                 [(Term.app `inter_subset_left [(Term.hole "_") (Term.hole "_")])])
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [`x `hx]
                  []
                  "=>"
                  (Term.app `Hc [(Term.hole "_") (Term.proj `hx "." (fieldIdx "2"))])))
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [`x `hx]
                  []
                  "=>"
                  (Term.app
                   `Hd
                   [(Term.hole "_")
                    (Term.anonymousCtor
                     "⟨"
                     [(Term.proj `hx "." (fieldIdx "1"))
                      ","
                      (Term.fun
                       "fun"
                       (Term.basicFun
                        [`h]
                        []
                        "=>"
                        (Term.app
                         (Term.proj `hx "." (fieldIdx "2"))
                         [(Term.anonymousCtor
                           "⟨"
                           [`h "," (Term.proj `hx "." (fieldIdx "1"))]
                           "⟩")])))]
                     "⟩")])))]))))
           []
           (Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `continuous_on_pi)] "]")
            [(Tactic.location "at" (Tactic.locationHyp [`Hc] []))])
           []
           (Tactic.refine'
            "refine'"
            (Term.app
             (Term.proj (Term.app `A.unique [`B]) "." `trans)
             [(Term.app
               (Term.app `sum_congr [`rfl])
               [(Term.fun "fun" (Term.basicFun [`i `hi] [] "=>" (Term.hole "_")))])]))
           []
           (Tactic.refine'
            "refine'"
            (Term.app `congr_arg₂ [`Sub.sub (Term.hole "_") (Term.hole "_")]))
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                []
                ":="
                (Term.app
                 `box.continuous_on_face_Icc
                 [(Term.app `Hc [`i])
                  (Term.app
                   (Term.proj `Set.right_mem_Icc "." (fieldIdx "2"))
                   [(Term.app `I.lower_le_upper [`i])])]))))
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                []
                ":="
                (Term.app
                 (Term.proj
                  (Term.app
                   `this.integrable_on_compact
                   [(Term.app `box.is_compact_Icc [(Term.hole "_")])])
                  "."
                  `monoSet)
                 [`box.coe_subset_Icc]))))
             []
             (Tactic.exact
              "exact"
              (Term.proj
               (Term.app `this.has_box_integral [(Order.BoundedOrder.«term⊥» "⊥") `rfl])
               "."
               `integral_eq))
             []
             (Tactic.tacticInfer_instance "infer_instance")])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                []
                ":="
                (Term.app
                 `box.continuous_on_face_Icc
                 [(Term.app `Hc [`i])
                  (Term.app
                   (Term.proj `Set.left_mem_Icc "." (fieldIdx "2"))
                   [(Term.app `I.lower_le_upper [`i])])]))))
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                []
                ":="
                (Term.app
                 (Term.proj
                  (Term.app
                   `this.integrable_on_compact
                   [(Term.app `box.is_compact_Icc [(Term.hole "_")])])
                  "."
                  `monoSet)
                 [`box.coe_subset_Icc]))))
             []
             (Tactic.exact
              "exact"
              (Term.proj
               (Term.app `this.has_box_integral [(Order.BoundedOrder.«term⊥» "⊥") `rfl])
               "."
               `integral_eq))
             []
             (Tactic.tacticInfer_instance "infer_instance")])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.simp
           "simp"
           []
           []
           ["only"]
           ["["
            [(Tactic.simpLemma
              []
              [(patternIgnore (token.«← » "←"))]
              (Term.app
               `set_integral_congr_set_ae
               [(Term.app `box.coe_ae_eq_Icc [(Term.hole "_")])]))]
            "]"]
           [])
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`A []]
             []
             ":="
             (Term.app
              (Term.proj (Term.app `Hi.mono_set [`box.coe_subset_Icc]) "." `hasBoxIntegral)
              [(Order.BoundedOrder.«term⊥» "⊥") `rfl]))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`B []]
             []
             ":="
             (Term.app
              `has_integral_GP_divergence_of_forall_has_deriv_within_at
              [`I
               `f
               `f'
               («term_∩_» `s "∩" `I.Icc)
               (Term.app `hs.mono [(Term.app `inter_subset_left [(Term.hole "_") (Term.hole "_")])])
               (Term.fun
                "fun"
                (Term.basicFun
                 [`x `hx]
                 []
                 "=>"
                 (Term.app `Hc [(Term.hole "_") (Term.proj `hx "." (fieldIdx "2"))])))
               (Term.fun
                "fun"
                (Term.basicFun
                 [`x `hx]
                 []
                 "=>"
                 (Term.app
                  `Hd
                  [(Term.hole "_")
                   (Term.anonymousCtor
                    "⟨"
                    [(Term.proj `hx "." (fieldIdx "1"))
                     ","
                     (Term.fun
                      "fun"
                      (Term.basicFun
                       [`h]
                       []
                       "=>"
                       (Term.app
                        (Term.proj `hx "." (fieldIdx "2"))
                        [(Term.anonymousCtor
                          "⟨"
                          [`h "," (Term.proj `hx "." (fieldIdx "1"))]
                          "⟩")])))]
                    "⟩")])))]))))
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `continuous_on_pi)] "]")
           [(Tactic.location "at" (Tactic.locationHyp [`Hc] []))])
          []
          (Tactic.refine'
           "refine'"
           (Term.app
            (Term.proj (Term.app `A.unique [`B]) "." `trans)
            [(Term.app
              (Term.app `sum_congr [`rfl])
              [(Term.fun "fun" (Term.basicFun [`i `hi] [] "=>" (Term.hole "_")))])]))
          []
          (Tactic.refine'
           "refine'"
           (Term.app `congr_arg₂ [`Sub.sub (Term.hole "_") (Term.hole "_")]))
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               []
               ":="
               (Term.app
                `box.continuous_on_face_Icc
                [(Term.app `Hc [`i])
                 (Term.app
                  (Term.proj `Set.right_mem_Icc "." (fieldIdx "2"))
                  [(Term.app `I.lower_le_upper [`i])])]))))
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               []
               ":="
               (Term.app
                (Term.proj
                 (Term.app
                  `this.integrable_on_compact
                  [(Term.app `box.is_compact_Icc [(Term.hole "_")])])
                 "."
                 `monoSet)
                [`box.coe_subset_Icc]))))
            []
            (Tactic.exact
             "exact"
             (Term.proj
              (Term.app `this.has_box_integral [(Order.BoundedOrder.«term⊥» "⊥") `rfl])
              "."
              `integral_eq))
            []
            (Tactic.tacticInfer_instance "infer_instance")])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               []
               ":="
               (Term.app
                `box.continuous_on_face_Icc
                [(Term.app `Hc [`i])
                 (Term.app
                  (Term.proj `Set.left_mem_Icc "." (fieldIdx "2"))
                  [(Term.app `I.lower_le_upper [`i])])]))))
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               []
               ":="
               (Term.app
                (Term.proj
                 (Term.app
                  `this.integrable_on_compact
                  [(Term.app `box.is_compact_Icc [(Term.hole "_")])])
                 "."
                 `monoSet)
                [`box.coe_subset_Icc]))))
            []
            (Tactic.exact
             "exact"
             (Term.proj
              (Term.app `this.has_box_integral [(Order.BoundedOrder.«term⊥» "⊥") `rfl])
              "."
              `integral_eq))
            []
            (Tactic.tacticInfer_instance "infer_instance")])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           []
           ":="
           (Term.app
            `box.continuous_on_face_Icc
            [(Term.app `Hc [`i])
             (Term.app
              (Term.proj `Set.left_mem_Icc "." (fieldIdx "2"))
              [(Term.app `I.lower_le_upper [`i])])]))))
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           []
           ":="
           (Term.app
            (Term.proj
             (Term.app
              `this.integrable_on_compact
              [(Term.app `box.is_compact_Icc [(Term.hole "_")])])
             "."
             `monoSet)
            [`box.coe_subset_Icc]))))
        []
        (Tactic.exact
         "exact"
         (Term.proj
          (Term.app `this.has_box_integral [(Order.BoundedOrder.«term⊥» "⊥") `rfl])
          "."
          `integral_eq))
        []
        (Tactic.tacticInfer_instance "infer_instance")])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticInfer_instance "infer_instance")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.proj
        (Term.app `this.has_box_integral [(Order.BoundedOrder.«term⊥» "⊥") `rfl])
        "."
        `integral_eq))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj
       (Term.app `this.has_box_integral [(Order.BoundedOrder.«term⊥» "⊥") `rfl])
       "."
       `integral_eq)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `this.has_box_integral [(Order.BoundedOrder.«term⊥» "⊥") `rfl])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `rfl
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Order.BoundedOrder.«term⊥»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Order.BoundedOrder.«term⊥»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Order.BoundedOrder.«term⊥» "⊥")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `this.has_box_integral
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `this.has_box_integral [(Order.BoundedOrder.«term⊥» "⊥") `rfl])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         []
         ":="
         (Term.app
          (Term.proj
           (Term.app `this.integrable_on_compact [(Term.app `box.is_compact_Icc [(Term.hole "_")])])
           "."
           `monoSet)
          [`box.coe_subset_Icc]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj
        (Term.app `this.integrable_on_compact [(Term.app `box.is_compact_Icc [(Term.hole "_")])])
        "."
        `monoSet)
       [`box.coe_subset_Icc])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `box.coe_subset_Icc
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       (Term.app `this.integrable_on_compact [(Term.app `box.is_compact_Icc [(Term.hole "_")])])
       "."
       `monoSet)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `this.integrable_on_compact [(Term.app `box.is_compact_Icc [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `box.is_compact_Icc [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `box.is_compact_Icc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `box.is_compact_Icc [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `this.integrable_on_compact
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `this.integrable_on_compact
      [(Term.paren "(" (Term.app `box.is_compact_Icc [(Term.hole "_")]) ")")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         []
         ":="
         (Term.app
          `box.continuous_on_face_Icc
          [(Term.app `Hc [`i])
           (Term.app
            (Term.proj `Set.left_mem_Icc "." (fieldIdx "2"))
            [(Term.app `I.lower_le_upper [`i])])]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `box.continuous_on_face_Icc
       [(Term.app `Hc [`i])
        (Term.app
         (Term.proj `Set.left_mem_Icc "." (fieldIdx "2"))
         [(Term.app `I.lower_le_upper [`i])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `Set.left_mem_Icc "." (fieldIdx "2"))
       [(Term.app `I.lower_le_upper [`i])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `I.lower_le_upper [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `I.lower_le_upper
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `I.lower_le_upper [`i]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `Set.left_mem_Icc "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `Set.left_mem_Icc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj `Set.left_mem_Icc "." (fieldIdx "2"))
      [(Term.paren "(" (Term.app `I.lower_le_upper [`i]) ")")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `Hc [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Hc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `Hc [`i]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `box.continuous_on_face_Icc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           []
           ":="
           (Term.app
            `box.continuous_on_face_Icc
            [(Term.app `Hc [`i])
             (Term.app
              (Term.proj `Set.right_mem_Icc "." (fieldIdx "2"))
              [(Term.app `I.lower_le_upper [`i])])]))))
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           []
           ":="
           (Term.app
            (Term.proj
             (Term.app
              `this.integrable_on_compact
              [(Term.app `box.is_compact_Icc [(Term.hole "_")])])
             "."
             `monoSet)
            [`box.coe_subset_Icc]))))
        []
        (Tactic.exact
         "exact"
         (Term.proj
          (Term.app `this.has_box_integral [(Order.BoundedOrder.«term⊥» "⊥") `rfl])
          "."
          `integral_eq))
        []
        (Tactic.tacticInfer_instance "infer_instance")])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticInfer_instance "infer_instance")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.proj
        (Term.app `this.has_box_integral [(Order.BoundedOrder.«term⊥» "⊥") `rfl])
        "."
        `integral_eq))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj
       (Term.app `this.has_box_integral [(Order.BoundedOrder.«term⊥» "⊥") `rfl])
       "."
       `integral_eq)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `this.has_box_integral [(Order.BoundedOrder.«term⊥» "⊥") `rfl])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `rfl
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Order.BoundedOrder.«term⊥»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Order.BoundedOrder.«term⊥»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Order.BoundedOrder.«term⊥» "⊥")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `this.has_box_integral
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `this.has_box_integral [(Order.BoundedOrder.«term⊥» "⊥") `rfl])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         []
         ":="
         (Term.app
          (Term.proj
           (Term.app `this.integrable_on_compact [(Term.app `box.is_compact_Icc [(Term.hole "_")])])
           "."
           `monoSet)
          [`box.coe_subset_Icc]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj
        (Term.app `this.integrable_on_compact [(Term.app `box.is_compact_Icc [(Term.hole "_")])])
        "."
        `monoSet)
       [`box.coe_subset_Icc])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `box.coe_subset_Icc
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       (Term.app `this.integrable_on_compact [(Term.app `box.is_compact_Icc [(Term.hole "_")])])
       "."
       `monoSet)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `this.integrable_on_compact [(Term.app `box.is_compact_Icc [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `box.is_compact_Icc [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `box.is_compact_Icc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `box.is_compact_Icc [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `this.integrable_on_compact
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `this.integrable_on_compact
      [(Term.paren "(" (Term.app `box.is_compact_Icc [(Term.hole "_")]) ")")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         []
         ":="
         (Term.app
          `box.continuous_on_face_Icc
          [(Term.app `Hc [`i])
           (Term.app
            (Term.proj `Set.right_mem_Icc "." (fieldIdx "2"))
            [(Term.app `I.lower_le_upper [`i])])]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `box.continuous_on_face_Icc
       [(Term.app `Hc [`i])
        (Term.app
         (Term.proj `Set.right_mem_Icc "." (fieldIdx "2"))
         [(Term.app `I.lower_le_upper [`i])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `Set.right_mem_Icc "." (fieldIdx "2"))
       [(Term.app `I.lower_le_upper [`i])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `I.lower_le_upper [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `I.lower_le_upper
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `I.lower_le_upper [`i]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `Set.right_mem_Icc "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `Set.right_mem_Icc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj `Set.right_mem_Icc "." (fieldIdx "2"))
      [(Term.paren "(" (Term.app `I.lower_le_upper [`i]) ")")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `Hc [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Hc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `Hc [`i]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `box.continuous_on_face_Icc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine' "refine'" (Term.app `congr_arg₂ [`Sub.sub (Term.hole "_") (Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `congr_arg₂ [`Sub.sub (Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `Sub.sub
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `congr_arg₂
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        (Term.proj (Term.app `A.unique [`B]) "." `trans)
        [(Term.app
          (Term.app `sum_congr [`rfl])
          [(Term.fun "fun" (Term.basicFun [`i `hi] [] "=>" (Term.hole "_")))])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `A.unique [`B]) "." `trans)
       [(Term.app
         (Term.app `sum_congr [`rfl])
         [(Term.fun "fun" (Term.basicFun [`i `hi] [] "=>" (Term.hole "_")))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.app `sum_congr [`rfl])
       [(Term.fun "fun" (Term.basicFun [`i `hi] [] "=>" (Term.hole "_")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [`i `hi] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.app `sum_congr [`rfl])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `rfl
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `sum_congr
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1022, (some 1023,
     term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `sum_congr [`rfl]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.paren "(" (Term.app `sum_congr [`rfl]) ")")
      [(Term.fun "fun" (Term.basicFun [`i `hi] [] "=>" (Term.hole "_")))])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `A.unique [`B]) "." `trans)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `A.unique [`B])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `B
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `A.unique
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `A.unique [`B]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `continuous_on_pi)] "]")
       [(Tactic.location "at" (Tactic.locationHyp [`Hc] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Hc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `continuous_on_pi
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`B []]
         []
         ":="
         (Term.app
          `has_integral_GP_divergence_of_forall_has_deriv_within_at
          [`I
           `f
           `f'
           («term_∩_» `s "∩" `I.Icc)
           (Term.app `hs.mono [(Term.app `inter_subset_left [(Term.hole "_") (Term.hole "_")])])
           (Term.fun
            "fun"
            (Term.basicFun
             [`x `hx]
             []
             "=>"
             (Term.app `Hc [(Term.hole "_") (Term.proj `hx "." (fieldIdx "2"))])))
           (Term.fun
            "fun"
            (Term.basicFun
             [`x `hx]
             []
             "=>"
             (Term.app
              `Hd
              [(Term.hole "_")
               (Term.anonymousCtor
                "⟨"
                [(Term.proj `hx "." (fieldIdx "1"))
                 ","
                 (Term.fun
                  "fun"
                  (Term.basicFun
                   [`h]
                   []
                   "=>"
                   (Term.app
                    (Term.proj `hx "." (fieldIdx "2"))
                    [(Term.anonymousCtor "⟨" [`h "," (Term.proj `hx "." (fieldIdx "1"))] "⟩")])))]
                "⟩")])))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `has_integral_GP_divergence_of_forall_has_deriv_within_at
       [`I
        `f
        `f'
        («term_∩_» `s "∩" `I.Icc)
        (Term.app `hs.mono [(Term.app `inter_subset_left [(Term.hole "_") (Term.hole "_")])])
        (Term.fun
         "fun"
         (Term.basicFun
          [`x `hx]
          []
          "=>"
          (Term.app `Hc [(Term.hole "_") (Term.proj `hx "." (fieldIdx "2"))])))
        (Term.fun
         "fun"
         (Term.basicFun
          [`x `hx]
          []
          "=>"
          (Term.app
           `Hd
           [(Term.hole "_")
            (Term.anonymousCtor
             "⟨"
             [(Term.proj `hx "." (fieldIdx "1"))
              ","
              (Term.fun
               "fun"
               (Term.basicFun
                [`h]
                []
                "=>"
                (Term.app
                 (Term.proj `hx "." (fieldIdx "2"))
                 [(Term.anonymousCtor "⟨" [`h "," (Term.proj `hx "." (fieldIdx "1"))] "⟩")])))]
             "⟩")])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x `hx]
        []
        "=>"
        (Term.app
         `Hd
         [(Term.hole "_")
          (Term.anonymousCtor
           "⟨"
           [(Term.proj `hx "." (fieldIdx "1"))
            ","
            (Term.fun
             "fun"
             (Term.basicFun
              [`h]
              []
              "=>"
              (Term.app
               (Term.proj `hx "." (fieldIdx "2"))
               [(Term.anonymousCtor "⟨" [`h "," (Term.proj `hx "." (fieldIdx "1"))] "⟩")])))]
           "⟩")])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Hd
       [(Term.hole "_")
        (Term.anonymousCtor
         "⟨"
         [(Term.proj `hx "." (fieldIdx "1"))
          ","
          (Term.fun
           "fun"
           (Term.basicFun
            [`h]
            []
            "=>"
            (Term.app
             (Term.proj `hx "." (fieldIdx "2"))
             [(Term.anonymousCtor "⟨" [`h "," (Term.proj `hx "." (fieldIdx "1"))] "⟩")])))]
         "⟩")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "⟨"
       [(Term.proj `hx "." (fieldIdx "1"))
        ","
        (Term.fun
         "fun"
         (Term.basicFun
          [`h]
          []
          "=>"
          (Term.app
           (Term.proj `hx "." (fieldIdx "2"))
           [(Term.anonymousCtor "⟨" [`h "," (Term.proj `hx "." (fieldIdx "1"))] "⟩")])))]
       "⟩")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`h]
        []
        "=>"
        (Term.app
         (Term.proj `hx "." (fieldIdx "2"))
         [(Term.anonymousCtor "⟨" [`h "," (Term.proj `hx "." (fieldIdx "1"))] "⟩")])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `hx "." (fieldIdx "2"))
       [(Term.anonymousCtor "⟨" [`h "," (Term.proj `hx "." (fieldIdx "1"))] "⟩")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor "⟨" [`h "," (Term.proj `hx "." (fieldIdx "1"))] "⟩")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `hx "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `hx "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `hx "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Hd
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x `hx]
        []
        "=>"
        (Term.app `Hc [(Term.hole "_") (Term.proj `hx "." (fieldIdx "2"))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Hc [(Term.hole "_") (Term.proj `hx "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `hx "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Hc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`x `hx]
       []
       "=>"
       (Term.app `Hc [(Term.hole "_") (Term.proj `hx "." (fieldIdx "2"))])))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `hs.mono [(Term.app `inter_subset_left [(Term.hole "_") (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `inter_subset_left [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `inter_subset_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `inter_subset_left [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hs.mono
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `hs.mono
      [(Term.paren "(" (Term.app `inter_subset_left [(Term.hole "_") (Term.hole "_")]) ")")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_∩_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_∩_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      («term_∩_» `s "∩" `I.Icc)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `I.Icc
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `s
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 71, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_∩_» `s "∩" `I.Icc) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `f'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `I
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `has_integral_GP_divergence_of_forall_has_deriv_within_at
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`A []]
         []
         ":="
         (Term.app
          (Term.proj (Term.app `Hi.mono_set [`box.coe_subset_Icc]) "." `hasBoxIntegral)
          [(Order.BoundedOrder.«term⊥» "⊥") `rfl]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `Hi.mono_set [`box.coe_subset_Icc]) "." `hasBoxIntegral)
       [(Order.BoundedOrder.«term⊥» "⊥") `rfl])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `rfl
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Order.BoundedOrder.«term⊥»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Order.BoundedOrder.«term⊥»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Order.BoundedOrder.«term⊥» "⊥")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `Hi.mono_set [`box.coe_subset_Icc]) "." `hasBoxIntegral)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `Hi.mono_set [`box.coe_subset_Icc])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `box.coe_subset_Icc
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Hi.mono_set
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `Hi.mono_set [`box.coe_subset_Icc])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       ["only"]
       ["["
        [(Tactic.simpLemma
          []
          [(patternIgnore (token.«← » "←"))]
          (Term.app `set_integral_congr_set_ae [(Term.app `box.coe_ae_eq_Icc [(Term.hole "_")])]))]
        "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `set_integral_congr_set_ae [(Term.app `box.coe_ae_eq_Icc [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `box.coe_ae_eq_Icc [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `box.coe_ae_eq_Icc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `box.coe_ae_eq_Icc [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `set_integral_congr_set_ae
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      («term_=_»
       (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
        "∫"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
        " in "
        (Term.proj `I "." `IccCat)
        ", "
        (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
         "∑"
         (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
         ", "
         (Term.app
          `f'
          [`x (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i) `i])))
       "="
       (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
        "∑"
        (Std.ExtendedBinder.extBinders
         (Std.ExtendedBinder.extBinder
          (Lean.binderIdent `i)
          [(group ":" (Term.app `Fin [(«term_+_» `n "+" (num "1"))]))]))
        ", "
        («term_-_»
         (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
          "∫"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
          " in "
          (Term.proj (Term.app (Term.proj `I "." `face) [`i]) "." `IccCat)
          ", "
          (Term.app
           `f
           [(Term.app (Term.proj `i "." `insertNth) [(Term.app (Term.proj `I "." `upper) [`i]) `x])
            `i]))
         "-"
         (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
          "∫"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
          " in "
          (Term.proj (Term.app (Term.proj `I "." `face) [`i]) "." `IccCat)
          ", "
          (Term.app
           `f
           [(Term.app (Term.proj `i "." `insertNth) [(Term.app (Term.proj `I "." `lower) [`i]) `x])
            `i])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
       "∑"
       (Std.ExtendedBinder.extBinders
        (Std.ExtendedBinder.extBinder
         (Lean.binderIdent `i)
         [(group ":" (Term.app `Fin [(«term_+_» `n "+" (num "1"))]))]))
       ", "
       («term_-_»
        (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
         "∫"
         (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
         " in "
         (Term.proj (Term.app (Term.proj `I "." `face) [`i]) "." `IccCat)
         ", "
         (Term.app
          `f
          [(Term.app (Term.proj `i "." `insertNth) [(Term.app (Term.proj `I "." `upper) [`i]) `x])
           `i]))
        "-"
        (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
         "∫"
         (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
         " in "
         (Term.proj (Term.app (Term.proj `I "." `face) [`i]) "." `IccCat)
         ", "
         (Term.app
          `f
          [(Term.app (Term.proj `i "." `insertNth) [(Term.app (Term.proj `I "." `lower) [`i]) `x])
           `i]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_-_»
       (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
        "∫"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
        " in "
        (Term.proj (Term.app (Term.proj `I "." `face) [`i]) "." `IccCat)
        ", "
        (Term.app
         `f
         [(Term.app (Term.proj `i "." `insertNth) [(Term.app (Term.proj `I "." `upper) [`i]) `x])
          `i]))
       "-"
       (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
        "∫"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
        " in "
        (Term.proj (Term.app (Term.proj `I "." `face) [`i]) "." `IccCat)
        ", "
        (Term.app
         `f
         [(Term.app (Term.proj `i "." `insertNth) [(Term.app (Term.proj `I "." `lower) [`i]) `x])
          `i])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
       "∫"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
       " in "
       (Term.proj (Term.app (Term.proj `I "." `face) [`i]) "." `IccCat)
       ", "
       (Term.app
        `f
        [(Term.app (Term.proj `i "." `insertNth) [(Term.app (Term.proj `I "." `lower) [`i]) `x])
         `i]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `f
       [(Term.app (Term.proj `i "." `insertNth) [(Term.app (Term.proj `I "." `lower) [`i]) `x]) `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj `i "." `insertNth) [(Term.app (Term.proj `I "." `lower) [`i]) `x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj `I "." `lower) [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `I "." `lower)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `I
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj `I "." `lower) [`i])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `i "." `insertNth)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj `i "." `insertNth)
      [(Term.paren "(" (Term.app (Term.proj `I "." `lower) [`i]) ")") `x])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app (Term.proj `I "." `face) [`i]) "." `IccCat)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj `I "." `face) [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `I "." `face)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `I
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj `I "." `face) [`i])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
       "∫"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
       " in "
       (Term.proj (Term.app (Term.proj `I "." `face) [`i]) "." `IccCat)
       ", "
       (Term.app
        `f
        [(Term.app (Term.proj `i "." `insertNth) [(Term.app (Term.proj `I "." `upper) [`i]) `x])
         `i]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `f
       [(Term.app (Term.proj `i "." `insertNth) [(Term.app (Term.proj `I "." `upper) [`i]) `x]) `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj `i "." `insertNth) [(Term.app (Term.proj `I "." `upper) [`i]) `x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj `I "." `upper) [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `I "." `upper)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `I
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj `I "." `upper) [`i])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `i "." `insertNth)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj `i "." `insertNth)
      [(Term.paren "(" (Term.app (Term.proj `I "." `upper) [`i]) ")") `x])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app (Term.proj `I "." `face) [`i]) "." `IccCat)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj `I "." `face) [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `I "." `face)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `I
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj `I "." `face) [`i])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1022, (some 0, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
      "∫"
      (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
      " in "
      (Term.proj (Term.paren "(" (Term.app (Term.proj `I "." `face) [`i]) ")") "." `IccCat)
      ", "
      (Term.app
       `f
       [(Term.paren
         "("
         (Term.app
          (Term.proj `i "." `insertNth)
          [(Term.paren "(" (Term.app (Term.proj `I "." `upper) [`i]) ")") `x])
         ")")
        `i]))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Fin [(«term_+_» `n "+" (num "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `n "+" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `n
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_+_» `n "+" (num "1")) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Fin
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
       "∫"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
       " in "
       (Term.proj `I "." `IccCat)
       ", "
       (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
        "∑"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
        ", "
        (Term.app
         `f'
         [`x (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i) `i])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
       "∑"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
       ", "
       (Term.app
        `f'
        [`x (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i) `i]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f' [`x (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i) `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_', expected 'MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_._@.MeasureTheory.Integral.DivergenceTheorem._hyg.129'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    An auxiliary lemma for
    `measure_theory.integral_divergence_of_has_fderiv_within_at_off_countable`. This is exactly
    `box_integral.has_integral_GP_divergence_of_forall_has_deriv_within_at` reformulated for the
    Bochner integral. -/
  theorem
    integral_divergence_of_has_fderiv_within_at_off_countable_aux₁
    ( I : Box Fin n + 1 )
        ( f : ℝⁿ⁺¹ → Eⁿ⁺¹ )
        ( f' : ℝⁿ⁺¹ → ℝⁿ⁺¹ →L[ ℝ ] Eⁿ⁺¹ )
        ( s : Set ℝⁿ⁺¹ )
        ( hs : s . Countable )
        ( Hc : ContinuousOn f I . IccCat )
        ( Hd : ∀ x ∈ I . IccCat \ s , HasFderivWithinAt f f' x I . IccCat x )
        ( Hi : IntegrableOn fun x => ∑ i , f' x e i i I . IccCat )
      :
        ∫ x in I . IccCat , ∑ i , f' x e i i
          =
          ∑
            i : Fin n + 1
            ,
            ∫ x in I . face i . IccCat , f i . insertNth I . upper i x i
              -
              ∫ x in I . face i . IccCat , f i . insertNth I . lower i x i
    :=
      by
        simp only [ ← set_integral_congr_set_ae box.coe_ae_eq_Icc _ ]
          have A := Hi.mono_set box.coe_subset_Icc . hasBoxIntegral ⊥ rfl
          have
            B
              :=
              has_integral_GP_divergence_of_forall_has_deriv_within_at
                I
                  f
                  f'
                  s ∩ I.Icc
                  hs.mono inter_subset_left _ _
                  fun x hx => Hc _ hx . 2
                  fun x hx => Hd _ ⟨ hx . 1 , fun h => hx . 2 ⟨ h , hx . 1 ⟩ ⟩
          rw [ continuous_on_pi ] at Hc
          refine' A.unique B . trans sum_congr rfl fun i hi => _
          refine' congr_arg₂ Sub.sub _ _
          ·
            have := box.continuous_on_face_Icc Hc i Set.right_mem_Icc . 2 I.lower_le_upper i
              have := this.integrable_on_compact box.is_compact_Icc _ . monoSet box.coe_subset_Icc
              exact this.has_box_integral ⊥ rfl . integral_eq
              infer_instance
          ·
            have := box.continuous_on_face_Icc Hc i Set.left_mem_Icc . 2 I.lower_le_upper i
              have := this.integrable_on_compact box.is_compact_Icc _ . monoSet box.coe_subset_Icc
              exact this.has_box_integral ⊥ rfl . integral_eq
              infer_instance
#align
  measure_theory.integral_divergence_of_has_fderiv_within_at_off_countable_aux₁ MeasureTheory.integral_divergence_of_has_fderiv_within_at_off_countable_aux₁

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "An auxiliary lemma for\n`measure_theory.integral_divergence_of_has_fderiv_within_at_off_countable`. Compared to the previous\nlemma, here we drop the assumption of differentiability on the boundary of the box. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `integral_divergence_of_has_fderiv_within_at_off_countable_aux₂ [])
      (Command.declSig
       [(Term.explicitBinder
         "("
         [`I]
         [":" (Term.app `Box [(Term.app `Fin [(«term_+_» `n "+" (num "1"))])])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`f]
         [":"
          (Term.arrow
           (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")
           "→"
           (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termEⁿ⁺¹» "Eⁿ⁺¹"))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`f']
         [":"
          (Term.arrow
           (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")
           "→"
           (Topology.Algebra.Module.Basic.«term_→L[_]_»
            (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")
            " →L["
            (Data.Real.Basic.termℝ "ℝ")
            "] "
            (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termEⁿ⁺¹» "Eⁿ⁺¹")))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`s]
         [":"
          (Term.app
           `Set
           [(MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")])]
         []
         ")")
        (Term.explicitBinder "(" [`hs] [":" (Term.proj `s "." `Countable)] [] ")")
        (Term.explicitBinder
         "("
         [`Hc]
         [":" (Term.app `ContinuousOn [`f (Term.proj `I "." `IccCat)])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`Hd]
         [":"
          (Std.ExtendedBinder.«term∀__,_»
           "∀"
           (Lean.binderIdent `x)
           («binderTerm∈_» "∈" («term_\_» (Term.proj `I "." `IooCat) "\\" `s))
           ","
           (Term.app `HasFderivAt [`f (Term.app `f' [`x]) `x]))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`Hi]
         [":"
          (Term.app
           `IntegrableOn
           [(Term.fun
             "fun"
             (Term.basicFun
              [`x]
              []
              "=>"
              (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
               "∑"
               (Std.ExtendedBinder.extBinders
                (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
               ", "
               (Term.app
                `f'
                [`x (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i) `i]))))
            (Term.proj `I "." `IccCat)])]
         []
         ")")]
       (Term.typeSpec
        ":"
        («term_=_»
         (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
          "∫"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
          " in "
          (Term.proj `I "." `IccCat)
          ", "
          (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
           "∑"
           (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
           ", "
           (Term.app
            `f'
            [`x (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i) `i])))
         "="
         (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
          "∑"
          (Std.ExtendedBinder.extBinders
           (Std.ExtendedBinder.extBinder
            (Lean.binderIdent `i)
            [(group ":" (Term.app `Fin [(«term_+_» `n "+" (num "1"))]))]))
          ", "
          («term_-_»
           (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
            "∫"
            (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
            " in "
            (Term.proj (Term.app (Term.proj `I "." `face) [`i]) "." `IccCat)
            ", "
            (Term.app
             `f
             [(Term.app
               (Term.proj `i "." `insertNth)
               [(Term.app (Term.proj `I "." `upper) [`i]) `x])
              `i]))
           "-"
           (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
            "∫"
            (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
            " in "
            (Term.proj (Term.app (Term.proj `I "." `face) [`i]) "." `IccCat)
            ", "
            (Term.app
             `f
             [(Term.app
               (Term.proj `i "." `insertNth)
               [(Term.app (Term.proj `I "." `lower) [`i]) `x])
              `i])))))))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Std.Tactic.rcases
            "rcases"
            [(Tactic.casesTarget [] `I.exists_seq_mono_tendsto)]
            ["with"
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed
               [(Std.Tactic.RCases.rcasesPat.tuple
                 "⟨"
                 [(Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `J)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hJ_sub)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hJl)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hJu)])
                   [])]
                 "⟩")])
              [])])
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`hJ_sub' []]
              [(Term.typeSpec
                ":"
                (Term.forall
                 "∀"
                 [`k]
                 []
                 ","
                 («term_⊆_» (Term.proj (Term.app `J [`k]) "." `IccCat) "⊆" `I.Icc)))]
              ":="
              (Term.fun
               "fun"
               (Term.basicFun
                [`k]
                []
                "=>"
                (Term.app (Term.proj (Term.app `hJ_sub [`k]) "." `trans) [`I.Ioo_subset_Icc]))))))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`hJ_le []]
              [(Term.typeSpec
                ":"
                (Term.forall "∀" [`k] [] "," («term_≤_» (Term.app `J [`k]) "≤" `I)))]
              ":="
              (Term.fun
               "fun"
               (Term.basicFun
                [`k]
                []
                "=>"
                (Term.app
                 (Term.proj `box.le_iff_Icc "." (fieldIdx "2"))
                 [(Term.app `hJ_sub' [`k])]))))))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`HcJ []]
              [(Term.typeSpec
                ":"
                (Term.forall
                 "∀"
                 [`k]
                 []
                 ","
                 (Term.app `ContinuousOn [`f (Term.proj (Term.app `J [`k]) "." `IccCat)])))]
              ":="
              (Term.fun
               "fun"
               (Term.basicFun [`k] [] "=>" (Term.app `Hc.mono [(Term.app `hJ_sub' [`k])]))))))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`HdJ []]
              [(Term.typeSpec
                ":"
                (Term.forall
                 "∀"
                 [(Term.explicitBinder "(" [`k] [] [] ")")]
                 []
                 ","
                 (Std.ExtendedBinder.«term∀__,_»
                  "∀"
                  (Lean.binderIdent `x)
                  («binderTerm∈_»
                   "∈"
                   («term_\_» (Term.proj (Term.app `J [`k]) "." `IccCat) "\\" `s))
                  ","
                  (Term.app
                   `HasFderivWithinAt
                   [`f (Term.app `f' [`x]) (Term.proj (Term.app `J [`k]) "." `IccCat) `x]))))]
              ":="
              (Term.fun
               "fun"
               (Term.basicFun
                [`k `x `hx]
                []
                "=>"
                (Term.proj
                 (Term.app
                  `Hd
                  [`x
                   (Term.anonymousCtor
                    "⟨"
                    [(Term.app `hJ_sub [`k (Term.proj `hx "." (fieldIdx "1"))])
                     ","
                     (Term.proj `hx "." (fieldIdx "2"))]
                    "⟩")])
                 "."
                 `HasFderivWithinAt))))))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`HiJ []]
              [(Term.typeSpec
                ":"
                (Term.forall
                 "∀"
                 [`k]
                 []
                 ","
                 (Term.app
                  `integrable_on
                  [(Term.fun
                    "fun"
                    (Term.basicFun
                     [`x]
                     []
                     "=>"
                     (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
                      "∑"
                      (Std.ExtendedBinder.extBinders
                       (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
                      ", "
                      (Term.app
                       `f'
                       [`x
                        (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i)
                        `i]))))
                   (Term.proj (Term.app `J [`k]) "." `IccCat)])))]
              ":="
              (Term.fun
               "fun"
               (Term.basicFun [`k] [] "=>" (Term.app `Hi.mono_set [(Term.app `hJ_sub' [`k])]))))))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`HJ_eq []]
              []
              ":="
              (Term.fun
               "fun"
               (Term.basicFun
                [`k]
                []
                "=>"
                (Term.app
                 `integral_divergence_of_has_fderiv_within_at_off_countable_aux₁
                 [(Term.app `J [`k])
                  `f
                  `f'
                  `s
                  `hs
                  (Term.app `HcJ [`k])
                  (Term.app `HdJ [`k])
                  (Term.app `HiJ [`k])]))))))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`hI_tendsto []]
              [(Term.typeSpec
                ":"
                (Term.app
                 `tendsto
                 [(Term.fun
                   "fun"
                   (Term.basicFun
                    [`k]
                    []
                    "=>"
                    (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                     "∫"
                     (Std.ExtendedBinder.extBinders
                      (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                     " in "
                     (Term.proj (Term.app `J [`k]) "." `IccCat)
                     ", "
                     (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
                      "∑"
                      (Std.ExtendedBinder.extBinders
                       (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
                      ", "
                      (Term.app
                       `f'
                       [`x
                        (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i)
                        `i])))))
                  `at_top
                  (Term.app
                   (TopologicalSpace.Topology.Basic.nhds "𝓝")
                   [(MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                     "∫"
                     (Std.ExtendedBinder.extBinders
                      (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                     " in "
                     `I.Icc
                     ", "
                     (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
                      "∑"
                      (Std.ExtendedBinder.extBinders
                       (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
                      ", "
                      (Term.app
                       `f'
                       [`x
                        (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i)
                        `i])))])]))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.simp
                   "simp"
                   []
                   []
                   ["only"]
                   ["["
                    [(Tactic.simpLemma [] [] `integrable_on)
                     ","
                     (Tactic.simpLemma
                      []
                      [(patternIgnore (token.«← » "←"))]
                      (Term.app
                       `measure.restrict_congr_set
                       [(Term.app `box.Ioo_ae_eq_Icc [(Term.hole "_")])]))]
                    "]"]
                   [(Tactic.location
                     "at"
                     (Tactic.locationHyp [`Hi] [(patternIgnore (token.«⊢» "⊢"))]))])
                  []
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule
                      [(patternIgnore (token.«← » "←"))]
                      (Term.app `box.Union_Ioo_of_tendsto [`J.monotone `hJl `hJu]))]
                    "]")
                   [(Tactic.location
                     "at"
                     (Tactic.locationHyp [`Hi] [(patternIgnore (token.«⊢» "⊢"))]))])
                  []
                  (Tactic.exact
                   "exact"
                   (Term.app
                    `tendsto_set_integral_of_monotone
                    [(Term.fun
                      "fun"
                      (Term.basicFun
                       [`k]
                       []
                       "=>"
                       (Term.proj (Term.app `J [`k]) "." `measurable_set_Ioo)))
                     (Term.proj (Term.app `box.Ioo.comp [`J]) "." `Monotone)
                     `Hi]))]))))))
           []
           (Tactic.refine'
            "refine'"
            (Term.app
             `tendsto_nhds_unique_of_eventually_eq
             [`hI_tendsto (Term.hole "_") (Term.app `eventually_of_forall [`HJ_eq])]))
           []
           (Tactic.clear "clear" [`hI_tendsto])
           []
           (Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `tendsto_pi_nhds)] "]")
            [(Tactic.location "at" (Tactic.locationHyp [`hJl `hJu] []))])
           []
           (Tactic.tacticSuffices_
            "suffices"
            (Term.sufficesDecl
             []
             (Term.forall
              "∀"
              [(Term.explicitBinder
                "("
                [`i]
                [":" (Term.app `Fin [(«term_+_» `n "+" (num "1"))])]
                []
                ")")
               (Term.explicitBinder
                "("
                [`c]
                [":" (Term.arrow (termℕ "ℕ") "→" (Data.Real.Basic.termℝ "ℝ"))]
                []
                ")")
               (Term.explicitBinder "(" [`d] [] [] ")")]
              []
              ","
              (Term.arrow
               (Term.forall
                "∀"
                [`k]
                []
                ","
                («term_∈_»
                 (Term.app `c [`k])
                 "∈"
                 (Term.app `Icc [(Term.app `I.lower [`i]) (Term.app `I.upper [`i])])))
               "→"
               (Term.arrow
                (Term.app
                 `tendsto
                 [`c `at_top (Term.app (TopologicalSpace.Topology.Basic.nhds "𝓝") [`d])])
                "→"
                (Term.app
                 `tendsto
                 [(Term.fun
                   "fun"
                   (Term.basicFun
                    [`k]
                    []
                    "=>"
                    (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                     "∫"
                     (Std.ExtendedBinder.extBinders
                      (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                     " in "
                     (Term.proj
                      (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
                      "."
                      `IccCat)
                     ", "
                     (Term.app
                      `f
                      [(Term.app (Term.proj `i "." `insertNth) [(Term.app `c [`k]) `x]) `i]))))
                  `at_top
                  («term_<|_»
                   (TopologicalSpace.Topology.Basic.nhds "𝓝")
                   "<|"
                   (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                    "∫"
                    (Std.ExtendedBinder.extBinders
                     (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                    " in "
                    (Term.proj (Term.app `I.face [`i]) "." `IccCat)
                    ", "
                    (Term.app `f [(Term.app (Term.proj `i "." `insertNth) [`d `x]) `i])))]))))
             (Term.byTactic'
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `box.Icc_eq_pi)] "]")
                  [(Tactic.location "at" (Tactic.locationHyp [`hJ_sub'] []))])
                 []
                 (Tactic.refine'
                  "refine'"
                  (Term.app
                   `tendsto_finset_sum
                   [(Term.hole "_")
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [`i `hi]
                      []
                      "=>"
                      (Term.app
                       (Term.proj
                        (Term.app
                         `this
                         [(Term.hole "_")
                          (Term.hole "_")
                          (Term.hole "_")
                          (Term.hole "_")
                          (Term.app `hJu [(Term.hole "_")])])
                        "."
                        `sub)
                       [(Term.app
                         `this
                         [(Term.hole "_")
                          (Term.hole "_")
                          (Term.hole "_")
                          (Term.hole "_")
                          (Term.app `hJl [(Term.hole "_")])])])))]))
                 []
                 (Std.Tactic.exacts
                  "exacts"
                  "["
                  [(Term.fun
                    "fun"
                    (Term.basicFun
                     [`k]
                     []
                     "=>"
                     (Term.app
                      `hJ_sub'
                      [`k
                       (Term.proj (Term.app `J [`k]) "." `upper_mem_Icc)
                       (Term.hole "_")
                       `trivial])))
                   ","
                   (Term.fun
                    "fun"
                    (Term.basicFun
                     [`k]
                     []
                     "=>"
                     (Term.app
                      `hJ_sub'
                      [`k
                       (Term.proj (Term.app `J [`k]) "." `lower_mem_Icc)
                       (Term.hole "_")
                       `trivial])))]
                  "]")])))))
           []
           (Tactic.intro "intro" [`i `c `d `hc `hcd])
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`hd []]
              [(Term.typeSpec
                ":"
                («term_∈_»
                 `d
                 "∈"
                 (Term.app `Icc [(Term.app `I.lower [`i]) (Term.app `I.upper [`i])])))]
              ":="
              (Term.app
               `is_closed_Icc.mem_of_tendsto
               [`hcd (Term.app `eventually_of_forall [`hc])]))))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`Hic []]
              [(Term.typeSpec
                ":"
                (Term.forall
                 "∀"
                 [`k]
                 []
                 ","
                 (Term.app
                  `integrable_on
                  [(Term.fun
                    "fun"
                    (Term.basicFun
                     [`x]
                     []
                     "=>"
                     (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x]) `i])))
                   (Term.proj (Term.app `I.face [`i]) "." `IccCat)])))]
              ":="
              (Term.fun
               "fun"
               (Term.basicFun
                [`k]
                []
                "=>"
                (Term.proj
                 (Term.app
                  `box.continuous_on_face_Icc
                  [(Term.app
                    (Term.proj (Term.app `continuous_apply [`i]) "." `comp_continuous_on)
                    [`Hc])
                   (Term.app `hc [`k])])
                 "."
                 `integrableOnIcc))))))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`Hid []]
              [(Term.typeSpec
                ":"
                (Term.app
                 `integrable_on
                 [(Term.fun
                   "fun"
                   (Term.basicFun [`x] [] "=>" (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])))
                  (Term.proj (Term.app `I.face [`i]) "." `IccCat)]))]
              ":="
              (Term.proj
               (Term.app
                `box.continuous_on_face_Icc
                [(Term.app
                  (Term.proj (Term.app `continuous_apply [`i]) "." `comp_continuous_on)
                  [`Hc])
                 `hd])
               "."
               `integrableOnIcc))))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`H []]
              [(Term.typeSpec
                ":"
                (Term.app
                 `tendsto
                 [(Term.fun
                   "fun"
                   (Term.basicFun
                    [`k]
                    []
                    "=>"
                    (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                     "∫"
                     (Std.ExtendedBinder.extBinders
                      (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                     " in "
                     (Term.proj
                      (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
                      "."
                      `IccCat)
                     ", "
                     (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i]))))
                  `at_top
                  («term_<|_»
                   (TopologicalSpace.Topology.Basic.nhds "𝓝")
                   "<|"
                   (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                    "∫"
                    (Std.ExtendedBinder.extBinders
                     (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                    " in "
                    (Term.proj (Term.app `I.face [`i]) "." `IccCat)
                    ", "
                    (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])))]))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`hIoo []]
                     [(Term.typeSpec
                       ":"
                       («term_=_»
                        (Set.Data.Set.Lattice.«term⋃_,_»
                         "⋃"
                         (Std.ExtendedBinder.extBinders
                          (Std.ExtendedBinder.extBinder (Lean.binderIdent `k) []))
                         ", "
                         (Term.proj
                          (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
                          "."
                          `IooCat))
                        "="
                        (Term.proj (Term.app `I.face [`i]) "." `IooCat)))]
                     ":="
                     (Term.app
                      `box.Union_Ioo_of_tendsto
                      [(Term.app
                        (Term.proj (Term.app `box.monotone_face [`i]) "." `comp)
                        [`J.monotone])
                       (Term.app
                        (Term.proj `tendsto_pi_nhds "." (fieldIdx "2"))
                        [(Term.fun
                          "fun"
                          (Term.basicFun
                           [(Term.hole "_")]
                           []
                           "=>"
                           (Term.app `hJl [(Term.hole "_")])))])
                       (Term.app
                        (Term.proj `tendsto_pi_nhds "." (fieldIdx "2"))
                        [(Term.fun
                          "fun"
                          (Term.basicFun
                           [(Term.hole "_")]
                           []
                           "=>"
                           (Term.app `hJu [(Term.hole "_")])))])]))))
                  []
                  (Tactic.simp
                   "simp"
                   []
                   []
                   ["only"]
                   ["["
                    [(Tactic.simpLemma [] [] `integrable_on)
                     ","
                     (Tactic.simpLemma
                      []
                      [(patternIgnore (token.«← » "←"))]
                      (Term.app
                       `measure.restrict_congr_set
                       [(Term.app `box.Ioo_ae_eq_Icc [(Term.hole "_")])]))
                     ","
                     (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `hIoo)]
                    "]"]
                   [(Tactic.location
                     "at"
                     (Tactic.locationHyp [`Hid] [(patternIgnore (token.«⊢» "⊢"))]))])
                  []
                  (Tactic.exact
                   "exact"
                   (Term.app
                    `tendsto_set_integral_of_monotone
                    [(Term.fun
                      "fun"
                      (Term.basicFun
                       [`k]
                       []
                       "=>"
                       (Term.proj
                        (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
                        "."
                        `measurable_set_Ioo)))
                     (Term.app
                      `box.Ioo.monotone.comp
                      [(Term.app
                        (Term.proj (Term.app `box.monotone_face [`i]) "." `comp)
                        [`J.monotone])])
                     `Hid]))]))))))
           []
           (Tactic.refine'
            "refine'"
            (Term.app
             `H.congr_dist
             [(Term.app
               (Term.proj `metric.nhds_basis_closed_ball.tendsto_right_iff "." (fieldIdx "2"))
               [(Term.fun "fun" (Term.basicFun [`ε `εpos] [] "=>" (Term.hole "_")))])]))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`hvol_pos []]
              [(Term.typeSpec
                ":"
                (Term.forall
                 "∀"
                 [`J]
                 [(Term.typeSpec ":" (Term.app `box [(Term.app `Fin [`n])]))]
                 ","
                 («term_<_»
                  (num "0")
                  "<"
                  (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
                   "∏"
                   (Std.ExtendedBinder.extBinders
                    (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
                   ", "
                   («term_-_»
                    (Term.app (Term.proj `J "." `upper) [`j])
                    "-"
                    (Term.app (Term.proj `J "." `lower) [`j]))))))]
              ":="
              (Term.fun
               "fun"
               (Term.basicFun
                [`J]
                []
                "=>"
                (Term.app
                 `prod_pos
                 [(Term.fun
                   "fun"
                   (Term.basicFun
                    [`j `hj]
                    []
                    "=>"
                    («term_<|_»
                     (Term.proj `sub_pos "." (fieldIdx "2"))
                     "<|"
                     (Term.app (Term.proj `J "." `lower_lt_upper) [(Term.hole "_")]))))]))))))
           []
           (Std.Tactic.rcases
            "rcases"
            [(Tactic.casesTarget
              []
              (Term.app
               (Term.proj `Metric.uniform_continuous_on_iff_le "." (fieldIdx "1"))
               [(Term.app `I.is_compact_Icc.uniform_continuous_on_of_continuous [`Hc])
                («term_/_»
                 `ε
                 "/"
                 (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
                  "∏"
                  (Std.ExtendedBinder.extBinders
                   (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
                  ", "
                  («term_-_»
                   (Term.app (Term.proj (Term.app `I.face [`i]) "." `upper) [`j])
                   "-"
                   (Term.app (Term.proj (Term.app `I.face [`i]) "." `lower) [`j]))))
                (Term.app `div_pos [`εpos (Term.app `hvol_pos [(Term.app `I.face [`i])])])]))]
            ["with"
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed
               [(Std.Tactic.RCases.rcasesPat.tuple
                 "⟨"
                 [(Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `δ)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `δpos)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hδ)])
                   [])]
                 "⟩")])
              [])])
           []
           (Tactic.refine'
            "refine'"
            (Term.app
             (Term.proj
              (Term.app `hcd.eventually [(Term.app `Metric.ball_mem_nhds [(Term.hole "_") `δpos])])
              "."
              `mono)
             [(Term.fun "fun" (Term.basicFun [`k `hk] [] "=>" (Term.hole "_")))]))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`Hsub []]
              [(Term.typeSpec
                ":"
                («term_⊆_»
                 (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)
                 "⊆"
                 (Term.proj (Term.app `I.face [`i]) "." `IccCat)))]
              ":="
              (Term.app
               (Term.proj `box.le_iff_Icc "." (fieldIdx "1"))
               [(Term.app `box.face_mono [(Term.app `hJ_le [(Term.hole "_")]) `i])]))))
           []
           (Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq
             "["
             [(Tactic.rwRule [] `mem_closed_ball_zero_iff)
              ","
              (Tactic.rwRule [] `Real.norm_eq_abs)
              ","
              (Tactic.rwRule [] (Term.app `abs_of_nonneg [`dist_nonneg]))
              ","
              (Tactic.rwRule [] `dist_eq_norm)
              ","
              (Tactic.rwRule
               [(patternIgnore (token.«← » "←"))]
               (Term.app
                `integral_sub
                [(Term.app `Hid.mono_set [`Hsub])
                 (Term.app (Term.proj (Term.app `Hic [(Term.hole "_")]) "." `monoSet) [`Hsub])]))]
             "]")
            [])
           []
           (calcTactic
            "calc"
            (calcStep
             («term_≤_»
              (Analysis.Normed.Group.Basic.«term‖_‖»
               "‖"
               (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                "∫"
                (Std.ExtendedBinder.extBinders
                 (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                " in "
                (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)
                ", "
                («term_-_»
                 (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])
                 "-"
                 (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x]) `i])))
               "‖")
              "≤"
              («term_*_»
               («term_/_»
                `ε
                "/"
                (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
                 "∏"
                 (Std.ExtendedBinder.extBinders
                  (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
                 ", "
                 («term_-_»
                  (Term.app (Term.proj (Term.app `I.face [`i]) "." `upper) [`j])
                  "-"
                  (Term.app (Term.proj (Term.app `I.face [`i]) "." `lower) [`j]))))
               "*"
               (Term.proj
                (Term.app
                 `volume
                 [(Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)])
                "."
                `toReal)))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.refine'
                  "refine'"
                  (Term.app
                   `norm_set_integral_le_of_norm_le_const'
                   [(Term.app
                     (Term.proj
                      (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
                      "."
                      `measure_Icc_lt_top)
                     [(Term.hole "_")])
                    (Term.proj
                     (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
                     "."
                     `measurable_set_Icc)
                    (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))]))
                 []
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `dist_eq_norm)]
                   "]")
                  [])
                 []
                 (calcTactic
                  "calc"
                  (calcStep
                   («term_≤_»
                    (Term.app
                     `dist
                     [(Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])
                      (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x]) `i])])
                    "≤"
                    (Term.app
                     `dist
                     [(Term.app `f [(Term.app `i.insert_nth [`d `x])])
                      (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x])])]))
                   ":="
                   (Term.app
                    `dist_le_pi_dist
                    [(Term.app `f [(Term.app `i.insert_nth [`d `x])])
                     (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x])])
                     `i]))
                  [(calcStep
                    («term_≤_»
                     (Term.hole "_")
                     "≤"
                     («term_/_»
                      `ε
                      "/"
                      (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
                       "∏"
                       (Std.ExtendedBinder.extBinders
                        (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
                       ", "
                       («term_-_»
                        (Term.app (Term.proj (Term.app `I.face [`i]) "." `upper) [`j])
                        "-"
                        (Term.app (Term.proj (Term.app `I.face [`i]) "." `lower) [`j])))))
                    ":="
                    (Term.app
                     `hδ
                     [(Term.hole "_")
                      («term_<|_»
                       (Term.app `I.maps_to_insert_nth_face_Icc [`hd])
                       "<|"
                       (Term.app `Hsub [`hx]))
                      (Term.hole "_")
                      («term_<|_»
                       (Term.app `I.maps_to_insert_nth_face_Icc [(Term.app `hc [(Term.hole "_")])])
                       "<|"
                       (Term.app `Hsub [`hx]))
                      (Term.hole "_")]))])
                 []
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule [] `Fin.dist_insert_nth_insert_nth)
                    ","
                    (Tactic.rwRule [] `dist_self)
                    ","
                    (Tactic.rwRule [] `dist_comm)]
                   "]")
                  [])
                 []
                 (Tactic.exact "exact" (Term.app `max_le [`hk.le `δpos.lt.le]))]))))
            [(calcStep
              («term_≤_» (Term.hole "_") "≤" `ε)
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule [] `box.Icc_def)
                     ","
                     (Tactic.rwRule
                      []
                      (Term.app
                       `Real.volume_Icc_pi_to_real
                       [(Term.proj
                         (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
                         "."
                         `lower_le_upper)]))
                     ","
                     (Tactic.rwRule
                      [(patternIgnore (token.«← » "←"))]
                      (Term.app `le_div_iff [(Term.app `hvol_pos [(Term.hole "_")])]))]
                    "]")
                   [])
                  []
                  (Tactic.refine'
                   "refine'"
                   (Term.app
                    `div_le_div_of_le_left
                    [`εpos.le
                     (Term.app `hvol_pos [(Term.hole "_")])
                     (Term.app
                      `prod_le_prod
                      [(Term.fun "fun" (Term.basicFun [`j `hj] [] "=>" (Term.hole "_")))
                       (Term.fun "fun" (Term.basicFun [`j `hj] [] "=>" (Term.hole "_")))])]))
                  []
                  (Std.Tactic.exacts
                   "exacts"
                   "["
                   [(Term.app
                     (Term.proj `sub_nonneg "." (fieldIdx "2"))
                     [(Term.app `box.lower_le_upper [(Term.hole "_") (Term.hole "_")])])
                    ","
                    (Term.app
                     `sub_le_sub
                     [(Term.app
                       (Term.proj
                        (Term.app
                         `hJ_sub'
                         [(Term.hole "_")
                          (Term.proj (Term.app `J [(Term.hole "_")]) "." `upper_mem_Icc)])
                        "."
                        (fieldIdx "2"))
                       [(Term.hole "_")])
                      (Term.app
                       (Term.proj
                        (Term.app
                         `hJ_sub'
                         [(Term.hole "_")
                          (Term.proj (Term.app `J [(Term.hole "_")]) "." `lower_mem_Icc)])
                        "."
                        (fieldIdx "1"))
                       [(Term.hole "_")])])]
                   "]")]))))])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Std.Tactic.rcases
           "rcases"
           [(Tactic.casesTarget [] `I.exists_seq_mono_tendsto)]
           ["with"
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "⟨"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `J)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hJ_sub)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hJl)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hJu)])
                  [])]
                "⟩")])
             [])])
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hJ_sub' []]
             [(Term.typeSpec
               ":"
               (Term.forall
                "∀"
                [`k]
                []
                ","
                («term_⊆_» (Term.proj (Term.app `J [`k]) "." `IccCat) "⊆" `I.Icc)))]
             ":="
             (Term.fun
              "fun"
              (Term.basicFun
               [`k]
               []
               "=>"
               (Term.app (Term.proj (Term.app `hJ_sub [`k]) "." `trans) [`I.Ioo_subset_Icc]))))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hJ_le []]
             [(Term.typeSpec
               ":"
               (Term.forall "∀" [`k] [] "," («term_≤_» (Term.app `J [`k]) "≤" `I)))]
             ":="
             (Term.fun
              "fun"
              (Term.basicFun
               [`k]
               []
               "=>"
               (Term.app
                (Term.proj `box.le_iff_Icc "." (fieldIdx "2"))
                [(Term.app `hJ_sub' [`k])]))))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`HcJ []]
             [(Term.typeSpec
               ":"
               (Term.forall
                "∀"
                [`k]
                []
                ","
                (Term.app `ContinuousOn [`f (Term.proj (Term.app `J [`k]) "." `IccCat)])))]
             ":="
             (Term.fun
              "fun"
              (Term.basicFun [`k] [] "=>" (Term.app `Hc.mono [(Term.app `hJ_sub' [`k])]))))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`HdJ []]
             [(Term.typeSpec
               ":"
               (Term.forall
                "∀"
                [(Term.explicitBinder "(" [`k] [] [] ")")]
                []
                ","
                (Std.ExtendedBinder.«term∀__,_»
                 "∀"
                 (Lean.binderIdent `x)
                 («binderTerm∈_» "∈" («term_\_» (Term.proj (Term.app `J [`k]) "." `IccCat) "\\" `s))
                 ","
                 (Term.app
                  `HasFderivWithinAt
                  [`f (Term.app `f' [`x]) (Term.proj (Term.app `J [`k]) "." `IccCat) `x]))))]
             ":="
             (Term.fun
              "fun"
              (Term.basicFun
               [`k `x `hx]
               []
               "=>"
               (Term.proj
                (Term.app
                 `Hd
                 [`x
                  (Term.anonymousCtor
                   "⟨"
                   [(Term.app `hJ_sub [`k (Term.proj `hx "." (fieldIdx "1"))])
                    ","
                    (Term.proj `hx "." (fieldIdx "2"))]
                   "⟩")])
                "."
                `HasFderivWithinAt))))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`HiJ []]
             [(Term.typeSpec
               ":"
               (Term.forall
                "∀"
                [`k]
                []
                ","
                (Term.app
                 `integrable_on
                 [(Term.fun
                   "fun"
                   (Term.basicFun
                    [`x]
                    []
                    "=>"
                    (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
                     "∑"
                     (Std.ExtendedBinder.extBinders
                      (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
                     ", "
                     (Term.app
                      `f'
                      [`x
                       (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i)
                       `i]))))
                  (Term.proj (Term.app `J [`k]) "." `IccCat)])))]
             ":="
             (Term.fun
              "fun"
              (Term.basicFun [`k] [] "=>" (Term.app `Hi.mono_set [(Term.app `hJ_sub' [`k])]))))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`HJ_eq []]
             []
             ":="
             (Term.fun
              "fun"
              (Term.basicFun
               [`k]
               []
               "=>"
               (Term.app
                `integral_divergence_of_has_fderiv_within_at_off_countable_aux₁
                [(Term.app `J [`k])
                 `f
                 `f'
                 `s
                 `hs
                 (Term.app `HcJ [`k])
                 (Term.app `HdJ [`k])
                 (Term.app `HiJ [`k])]))))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hI_tendsto []]
             [(Term.typeSpec
               ":"
               (Term.app
                `tendsto
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [`k]
                   []
                   "=>"
                   (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                    "∫"
                    (Std.ExtendedBinder.extBinders
                     (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                    " in "
                    (Term.proj (Term.app `J [`k]) "." `IccCat)
                    ", "
                    (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
                     "∑"
                     (Std.ExtendedBinder.extBinders
                      (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
                     ", "
                     (Term.app
                      `f'
                      [`x
                       (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i)
                       `i])))))
                 `at_top
                 (Term.app
                  (TopologicalSpace.Topology.Basic.nhds "𝓝")
                  [(MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                    "∫"
                    (Std.ExtendedBinder.extBinders
                     (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                    " in "
                    `I.Icc
                    ", "
                    (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
                     "∑"
                     (Std.ExtendedBinder.extBinders
                      (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
                     ", "
                     (Term.app
                      `f'
                      [`x
                       (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i)
                       `i])))])]))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.simp
                  "simp"
                  []
                  []
                  ["only"]
                  ["["
                   [(Tactic.simpLemma [] [] `integrable_on)
                    ","
                    (Tactic.simpLemma
                     []
                     [(patternIgnore (token.«← » "←"))]
                     (Term.app
                      `measure.restrict_congr_set
                      [(Term.app `box.Ioo_ae_eq_Icc [(Term.hole "_")])]))]
                   "]"]
                  [(Tactic.location
                    "at"
                    (Tactic.locationHyp [`Hi] [(patternIgnore (token.«⊢» "⊢"))]))])
                 []
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule
                     [(patternIgnore (token.«← » "←"))]
                     (Term.app `box.Union_Ioo_of_tendsto [`J.monotone `hJl `hJu]))]
                   "]")
                  [(Tactic.location
                    "at"
                    (Tactic.locationHyp [`Hi] [(patternIgnore (token.«⊢» "⊢"))]))])
                 []
                 (Tactic.exact
                  "exact"
                  (Term.app
                   `tendsto_set_integral_of_monotone
                   [(Term.fun
                     "fun"
                     (Term.basicFun
                      [`k]
                      []
                      "=>"
                      (Term.proj (Term.app `J [`k]) "." `measurable_set_Ioo)))
                    (Term.proj (Term.app `box.Ioo.comp [`J]) "." `Monotone)
                    `Hi]))]))))))
          []
          (Tactic.refine'
           "refine'"
           (Term.app
            `tendsto_nhds_unique_of_eventually_eq
            [`hI_tendsto (Term.hole "_") (Term.app `eventually_of_forall [`HJ_eq])]))
          []
          (Tactic.clear "clear" [`hI_tendsto])
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `tendsto_pi_nhds)] "]")
           [(Tactic.location "at" (Tactic.locationHyp [`hJl `hJu] []))])
          []
          (Tactic.tacticSuffices_
           "suffices"
           (Term.sufficesDecl
            []
            (Term.forall
             "∀"
             [(Term.explicitBinder
               "("
               [`i]
               [":" (Term.app `Fin [(«term_+_» `n "+" (num "1"))])]
               []
               ")")
              (Term.explicitBinder
               "("
               [`c]
               [":" (Term.arrow (termℕ "ℕ") "→" (Data.Real.Basic.termℝ "ℝ"))]
               []
               ")")
              (Term.explicitBinder "(" [`d] [] [] ")")]
             []
             ","
             (Term.arrow
              (Term.forall
               "∀"
               [`k]
               []
               ","
               («term_∈_»
                (Term.app `c [`k])
                "∈"
                (Term.app `Icc [(Term.app `I.lower [`i]) (Term.app `I.upper [`i])])))
              "→"
              (Term.arrow
               (Term.app
                `tendsto
                [`c `at_top (Term.app (TopologicalSpace.Topology.Basic.nhds "𝓝") [`d])])
               "→"
               (Term.app
                `tendsto
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [`k]
                   []
                   "=>"
                   (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                    "∫"
                    (Std.ExtendedBinder.extBinders
                     (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                    " in "
                    (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)
                    ", "
                    (Term.app
                     `f
                     [(Term.app (Term.proj `i "." `insertNth) [(Term.app `c [`k]) `x]) `i]))))
                 `at_top
                 («term_<|_»
                  (TopologicalSpace.Topology.Basic.nhds "𝓝")
                  "<|"
                  (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                   "∫"
                   (Std.ExtendedBinder.extBinders
                    (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                   " in "
                   (Term.proj (Term.app `I.face [`i]) "." `IccCat)
                   ", "
                   (Term.app `f [(Term.app (Term.proj `i "." `insertNth) [`d `x]) `i])))]))))
            (Term.byTactic'
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `box.Icc_eq_pi)] "]")
                 [(Tactic.location "at" (Tactic.locationHyp [`hJ_sub'] []))])
                []
                (Tactic.refine'
                 "refine'"
                 (Term.app
                  `tendsto_finset_sum
                  [(Term.hole "_")
                   (Term.fun
                    "fun"
                    (Term.basicFun
                     [`i `hi]
                     []
                     "=>"
                     (Term.app
                      (Term.proj
                       (Term.app
                        `this
                        [(Term.hole "_")
                         (Term.hole "_")
                         (Term.hole "_")
                         (Term.hole "_")
                         (Term.app `hJu [(Term.hole "_")])])
                       "."
                       `sub)
                      [(Term.app
                        `this
                        [(Term.hole "_")
                         (Term.hole "_")
                         (Term.hole "_")
                         (Term.hole "_")
                         (Term.app `hJl [(Term.hole "_")])])])))]))
                []
                (Std.Tactic.exacts
                 "exacts"
                 "["
                 [(Term.fun
                   "fun"
                   (Term.basicFun
                    [`k]
                    []
                    "=>"
                    (Term.app
                     `hJ_sub'
                     [`k
                      (Term.proj (Term.app `J [`k]) "." `upper_mem_Icc)
                      (Term.hole "_")
                      `trivial])))
                  ","
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [`k]
                    []
                    "=>"
                    (Term.app
                     `hJ_sub'
                     [`k
                      (Term.proj (Term.app `J [`k]) "." `lower_mem_Icc)
                      (Term.hole "_")
                      `trivial])))]
                 "]")])))))
          []
          (Tactic.intro "intro" [`i `c `d `hc `hcd])
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hd []]
             [(Term.typeSpec
               ":"
               («term_∈_»
                `d
                "∈"
                (Term.app `Icc [(Term.app `I.lower [`i]) (Term.app `I.upper [`i])])))]
             ":="
             (Term.app
              `is_closed_Icc.mem_of_tendsto
              [`hcd (Term.app `eventually_of_forall [`hc])]))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`Hic []]
             [(Term.typeSpec
               ":"
               (Term.forall
                "∀"
                [`k]
                []
                ","
                (Term.app
                 `integrable_on
                 [(Term.fun
                   "fun"
                   (Term.basicFun
                    [`x]
                    []
                    "=>"
                    (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x]) `i])))
                  (Term.proj (Term.app `I.face [`i]) "." `IccCat)])))]
             ":="
             (Term.fun
              "fun"
              (Term.basicFun
               [`k]
               []
               "=>"
               (Term.proj
                (Term.app
                 `box.continuous_on_face_Icc
                 [(Term.app
                   (Term.proj (Term.app `continuous_apply [`i]) "." `comp_continuous_on)
                   [`Hc])
                  (Term.app `hc [`k])])
                "."
                `integrableOnIcc))))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`Hid []]
             [(Term.typeSpec
               ":"
               (Term.app
                `integrable_on
                [(Term.fun
                  "fun"
                  (Term.basicFun [`x] [] "=>" (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])))
                 (Term.proj (Term.app `I.face [`i]) "." `IccCat)]))]
             ":="
             (Term.proj
              (Term.app
               `box.continuous_on_face_Icc
               [(Term.app
                 (Term.proj (Term.app `continuous_apply [`i]) "." `comp_continuous_on)
                 [`Hc])
                `hd])
              "."
              `integrableOnIcc))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`H []]
             [(Term.typeSpec
               ":"
               (Term.app
                `tendsto
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [`k]
                   []
                   "=>"
                   (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                    "∫"
                    (Std.ExtendedBinder.extBinders
                     (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                    " in "
                    (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)
                    ", "
                    (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i]))))
                 `at_top
                 («term_<|_»
                  (TopologicalSpace.Topology.Basic.nhds "𝓝")
                  "<|"
                  (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                   "∫"
                   (Std.ExtendedBinder.extBinders
                    (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                   " in "
                   (Term.proj (Term.app `I.face [`i]) "." `IccCat)
                   ", "
                   (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])))]))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`hIoo []]
                    [(Term.typeSpec
                      ":"
                      («term_=_»
                       (Set.Data.Set.Lattice.«term⋃_,_»
                        "⋃"
                        (Std.ExtendedBinder.extBinders
                         (Std.ExtendedBinder.extBinder (Lean.binderIdent `k) []))
                        ", "
                        (Term.proj
                         (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
                         "."
                         `IooCat))
                       "="
                       (Term.proj (Term.app `I.face [`i]) "." `IooCat)))]
                    ":="
                    (Term.app
                     `box.Union_Ioo_of_tendsto
                     [(Term.app
                       (Term.proj (Term.app `box.monotone_face [`i]) "." `comp)
                       [`J.monotone])
                      (Term.app
                       (Term.proj `tendsto_pi_nhds "." (fieldIdx "2"))
                       [(Term.fun
                         "fun"
                         (Term.basicFun
                          [(Term.hole "_")]
                          []
                          "=>"
                          (Term.app `hJl [(Term.hole "_")])))])
                      (Term.app
                       (Term.proj `tendsto_pi_nhds "." (fieldIdx "2"))
                       [(Term.fun
                         "fun"
                         (Term.basicFun
                          [(Term.hole "_")]
                          []
                          "=>"
                          (Term.app `hJu [(Term.hole "_")])))])]))))
                 []
                 (Tactic.simp
                  "simp"
                  []
                  []
                  ["only"]
                  ["["
                   [(Tactic.simpLemma [] [] `integrable_on)
                    ","
                    (Tactic.simpLemma
                     []
                     [(patternIgnore (token.«← » "←"))]
                     (Term.app
                      `measure.restrict_congr_set
                      [(Term.app `box.Ioo_ae_eq_Icc [(Term.hole "_")])]))
                    ","
                    (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `hIoo)]
                   "]"]
                  [(Tactic.location
                    "at"
                    (Tactic.locationHyp [`Hid] [(patternIgnore (token.«⊢» "⊢"))]))])
                 []
                 (Tactic.exact
                  "exact"
                  (Term.app
                   `tendsto_set_integral_of_monotone
                   [(Term.fun
                     "fun"
                     (Term.basicFun
                      [`k]
                      []
                      "=>"
                      (Term.proj
                       (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
                       "."
                       `measurable_set_Ioo)))
                    (Term.app
                     `box.Ioo.monotone.comp
                     [(Term.app
                       (Term.proj (Term.app `box.monotone_face [`i]) "." `comp)
                       [`J.monotone])])
                    `Hid]))]))))))
          []
          (Tactic.refine'
           "refine'"
           (Term.app
            `H.congr_dist
            [(Term.app
              (Term.proj `metric.nhds_basis_closed_ball.tendsto_right_iff "." (fieldIdx "2"))
              [(Term.fun "fun" (Term.basicFun [`ε `εpos] [] "=>" (Term.hole "_")))])]))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hvol_pos []]
             [(Term.typeSpec
               ":"
               (Term.forall
                "∀"
                [`J]
                [(Term.typeSpec ":" (Term.app `box [(Term.app `Fin [`n])]))]
                ","
                («term_<_»
                 (num "0")
                 "<"
                 (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
                  "∏"
                  (Std.ExtendedBinder.extBinders
                   (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
                  ", "
                  («term_-_»
                   (Term.app (Term.proj `J "." `upper) [`j])
                   "-"
                   (Term.app (Term.proj `J "." `lower) [`j]))))))]
             ":="
             (Term.fun
              "fun"
              (Term.basicFun
               [`J]
               []
               "=>"
               (Term.app
                `prod_pos
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [`j `hj]
                   []
                   "=>"
                   («term_<|_»
                    (Term.proj `sub_pos "." (fieldIdx "2"))
                    "<|"
                    (Term.app (Term.proj `J "." `lower_lt_upper) [(Term.hole "_")]))))]))))))
          []
          (Std.Tactic.rcases
           "rcases"
           [(Tactic.casesTarget
             []
             (Term.app
              (Term.proj `Metric.uniform_continuous_on_iff_le "." (fieldIdx "1"))
              [(Term.app `I.is_compact_Icc.uniform_continuous_on_of_continuous [`Hc])
               («term_/_»
                `ε
                "/"
                (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
                 "∏"
                 (Std.ExtendedBinder.extBinders
                  (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
                 ", "
                 («term_-_»
                  (Term.app (Term.proj (Term.app `I.face [`i]) "." `upper) [`j])
                  "-"
                  (Term.app (Term.proj (Term.app `I.face [`i]) "." `lower) [`j]))))
               (Term.app `div_pos [`εpos (Term.app `hvol_pos [(Term.app `I.face [`i])])])]))]
           ["with"
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "⟨"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `δ)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `δpos)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hδ)])
                  [])]
                "⟩")])
             [])])
          []
          (Tactic.refine'
           "refine'"
           (Term.app
            (Term.proj
             (Term.app `hcd.eventually [(Term.app `Metric.ball_mem_nhds [(Term.hole "_") `δpos])])
             "."
             `mono)
            [(Term.fun "fun" (Term.basicFun [`k `hk] [] "=>" (Term.hole "_")))]))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`Hsub []]
             [(Term.typeSpec
               ":"
               («term_⊆_»
                (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)
                "⊆"
                (Term.proj (Term.app `I.face [`i]) "." `IccCat)))]
             ":="
             (Term.app
              (Term.proj `box.le_iff_Icc "." (fieldIdx "1"))
              [(Term.app `box.face_mono [(Term.app `hJ_le [(Term.hole "_")]) `i])]))))
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `mem_closed_ball_zero_iff)
             ","
             (Tactic.rwRule [] `Real.norm_eq_abs)
             ","
             (Tactic.rwRule [] (Term.app `abs_of_nonneg [`dist_nonneg]))
             ","
             (Tactic.rwRule [] `dist_eq_norm)
             ","
             (Tactic.rwRule
              [(patternIgnore (token.«← » "←"))]
              (Term.app
               `integral_sub
               [(Term.app `Hid.mono_set [`Hsub])
                (Term.app (Term.proj (Term.app `Hic [(Term.hole "_")]) "." `monoSet) [`Hsub])]))]
            "]")
           [])
          []
          (calcTactic
           "calc"
           (calcStep
            («term_≤_»
             (Analysis.Normed.Group.Basic.«term‖_‖»
              "‖"
              (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
               "∫"
               (Std.ExtendedBinder.extBinders
                (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
               " in "
               (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)
               ", "
               («term_-_»
                (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])
                "-"
                (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x]) `i])))
              "‖")
             "≤"
             («term_*_»
              («term_/_»
               `ε
               "/"
               (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
                "∏"
                (Std.ExtendedBinder.extBinders
                 (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
                ", "
                («term_-_»
                 (Term.app (Term.proj (Term.app `I.face [`i]) "." `upper) [`j])
                 "-"
                 (Term.app (Term.proj (Term.app `I.face [`i]) "." `lower) [`j]))))
              "*"
              (Term.proj
               (Term.app
                `volume
                [(Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)])
               "."
               `toReal)))
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(Tactic.refine'
                 "refine'"
                 (Term.app
                  `norm_set_integral_le_of_norm_le_const'
                  [(Term.app
                    (Term.proj
                     (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
                     "."
                     `measure_Icc_lt_top)
                    [(Term.hole "_")])
                   (Term.proj
                    (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
                    "."
                    `measurable_set_Icc)
                   (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))]))
                []
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `dist_eq_norm)]
                  "]")
                 [])
                []
                (calcTactic
                 "calc"
                 (calcStep
                  («term_≤_»
                   (Term.app
                    `dist
                    [(Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])
                     (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x]) `i])])
                   "≤"
                   (Term.app
                    `dist
                    [(Term.app `f [(Term.app `i.insert_nth [`d `x])])
                     (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x])])]))
                  ":="
                  (Term.app
                   `dist_le_pi_dist
                   [(Term.app `f [(Term.app `i.insert_nth [`d `x])])
                    (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x])])
                    `i]))
                 [(calcStep
                   («term_≤_»
                    (Term.hole "_")
                    "≤"
                    («term_/_»
                     `ε
                     "/"
                     (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
                      "∏"
                      (Std.ExtendedBinder.extBinders
                       (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
                      ", "
                      («term_-_»
                       (Term.app (Term.proj (Term.app `I.face [`i]) "." `upper) [`j])
                       "-"
                       (Term.app (Term.proj (Term.app `I.face [`i]) "." `lower) [`j])))))
                   ":="
                   (Term.app
                    `hδ
                    [(Term.hole "_")
                     («term_<|_»
                      (Term.app `I.maps_to_insert_nth_face_Icc [`hd])
                      "<|"
                      (Term.app `Hsub [`hx]))
                     (Term.hole "_")
                     («term_<|_»
                      (Term.app `I.maps_to_insert_nth_face_Icc [(Term.app `hc [(Term.hole "_")])])
                      "<|"
                      (Term.app `Hsub [`hx]))
                     (Term.hole "_")]))])
                []
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule [] `Fin.dist_insert_nth_insert_nth)
                   ","
                   (Tactic.rwRule [] `dist_self)
                   ","
                   (Tactic.rwRule [] `dist_comm)]
                  "]")
                 [])
                []
                (Tactic.exact "exact" (Term.app `max_le [`hk.le `δpos.lt.le]))]))))
           [(calcStep
             («term_≤_» (Term.hole "_") "≤" `ε)
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule [] `box.Icc_def)
                    ","
                    (Tactic.rwRule
                     []
                     (Term.app
                      `Real.volume_Icc_pi_to_real
                      [(Term.proj
                        (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
                        "."
                        `lower_le_upper)]))
                    ","
                    (Tactic.rwRule
                     [(patternIgnore (token.«← » "←"))]
                     (Term.app `le_div_iff [(Term.app `hvol_pos [(Term.hole "_")])]))]
                   "]")
                  [])
                 []
                 (Tactic.refine'
                  "refine'"
                  (Term.app
                   `div_le_div_of_le_left
                   [`εpos.le
                    (Term.app `hvol_pos [(Term.hole "_")])
                    (Term.app
                     `prod_le_prod
                     [(Term.fun "fun" (Term.basicFun [`j `hj] [] "=>" (Term.hole "_")))
                      (Term.fun "fun" (Term.basicFun [`j `hj] [] "=>" (Term.hole "_")))])]))
                 []
                 (Std.Tactic.exacts
                  "exacts"
                  "["
                  [(Term.app
                    (Term.proj `sub_nonneg "." (fieldIdx "2"))
                    [(Term.app `box.lower_le_upper [(Term.hole "_") (Term.hole "_")])])
                   ","
                   (Term.app
                    `sub_le_sub
                    [(Term.app
                      (Term.proj
                       (Term.app
                        `hJ_sub'
                        [(Term.hole "_")
                         (Term.proj (Term.app `J [(Term.hole "_")]) "." `upper_mem_Icc)])
                       "."
                       (fieldIdx "2"))
                      [(Term.hole "_")])
                     (Term.app
                      (Term.proj
                       (Term.app
                        `hJ_sub'
                        [(Term.hole "_")
                         (Term.proj (Term.app `J [(Term.hole "_")]) "." `lower_mem_Icc)])
                       "."
                       (fieldIdx "1"))
                      [(Term.hole "_")])])]
                  "]")]))))])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (calcTactic
       "calc"
       (calcStep
        («term_≤_»
         (Analysis.Normed.Group.Basic.«term‖_‖»
          "‖"
          (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
           "∫"
           (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
           " in "
           (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)
           ", "
           («term_-_»
            (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])
            "-"
            (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x]) `i])))
          "‖")
         "≤"
         («term_*_»
          («term_/_»
           `ε
           "/"
           (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
            "∏"
            (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
            ", "
            («term_-_»
             (Term.app (Term.proj (Term.app `I.face [`i]) "." `upper) [`j])
             "-"
             (Term.app (Term.proj (Term.app `I.face [`i]) "." `lower) [`j]))))
          "*"
          (Term.proj
           (Term.app
            `volume
            [(Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)])
           "."
           `toReal)))
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(Tactic.refine'
             "refine'"
             (Term.app
              `norm_set_integral_le_of_norm_le_const'
              [(Term.app
                (Term.proj
                 (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
                 "."
                 `measure_Icc_lt_top)
                [(Term.hole "_")])
               (Term.proj
                (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
                "."
                `measurable_set_Icc)
               (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))]))
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `dist_eq_norm)]
              "]")
             [])
            []
            (calcTactic
             "calc"
             (calcStep
              («term_≤_»
               (Term.app
                `dist
                [(Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])
                 (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x]) `i])])
               "≤"
               (Term.app
                `dist
                [(Term.app `f [(Term.app `i.insert_nth [`d `x])])
                 (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x])])]))
              ":="
              (Term.app
               `dist_le_pi_dist
               [(Term.app `f [(Term.app `i.insert_nth [`d `x])])
                (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x])])
                `i]))
             [(calcStep
               («term_≤_»
                (Term.hole "_")
                "≤"
                («term_/_»
                 `ε
                 "/"
                 (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
                  "∏"
                  (Std.ExtendedBinder.extBinders
                   (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
                  ", "
                  («term_-_»
                   (Term.app (Term.proj (Term.app `I.face [`i]) "." `upper) [`j])
                   "-"
                   (Term.app (Term.proj (Term.app `I.face [`i]) "." `lower) [`j])))))
               ":="
               (Term.app
                `hδ
                [(Term.hole "_")
                 («term_<|_»
                  (Term.app `I.maps_to_insert_nth_face_Icc [`hd])
                  "<|"
                  (Term.app `Hsub [`hx]))
                 (Term.hole "_")
                 («term_<|_»
                  (Term.app `I.maps_to_insert_nth_face_Icc [(Term.app `hc [(Term.hole "_")])])
                  "<|"
                  (Term.app `Hsub [`hx]))
                 (Term.hole "_")]))])
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `Fin.dist_insert_nth_insert_nth)
               ","
               (Tactic.rwRule [] `dist_self)
               ","
               (Tactic.rwRule [] `dist_comm)]
              "]")
             [])
            []
            (Tactic.exact "exact" (Term.app `max_le [`hk.le `δpos.lt.le]))]))))
       [(calcStep
         («term_≤_» (Term.hole "_") "≤" `ε)
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `box.Icc_def)
                ","
                (Tactic.rwRule
                 []
                 (Term.app
                  `Real.volume_Icc_pi_to_real
                  [(Term.proj
                    (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
                    "."
                    `lower_le_upper)]))
                ","
                (Tactic.rwRule
                 [(patternIgnore (token.«← » "←"))]
                 (Term.app `le_div_iff [(Term.app `hvol_pos [(Term.hole "_")])]))]
               "]")
              [])
             []
             (Tactic.refine'
              "refine'"
              (Term.app
               `div_le_div_of_le_left
               [`εpos.le
                (Term.app `hvol_pos [(Term.hole "_")])
                (Term.app
                 `prod_le_prod
                 [(Term.fun "fun" (Term.basicFun [`j `hj] [] "=>" (Term.hole "_")))
                  (Term.fun "fun" (Term.basicFun [`j `hj] [] "=>" (Term.hole "_")))])]))
             []
             (Std.Tactic.exacts
              "exacts"
              "["
              [(Term.app
                (Term.proj `sub_nonneg "." (fieldIdx "2"))
                [(Term.app `box.lower_le_upper [(Term.hole "_") (Term.hole "_")])])
               ","
               (Term.app
                `sub_le_sub
                [(Term.app
                  (Term.proj
                   (Term.app
                    `hJ_sub'
                    [(Term.hole "_")
                     (Term.proj (Term.app `J [(Term.hole "_")]) "." `upper_mem_Icc)])
                   "."
                   (fieldIdx "2"))
                  [(Term.hole "_")])
                 (Term.app
                  (Term.proj
                   (Term.app
                    `hJ_sub'
                    [(Term.hole "_")
                     (Term.proj (Term.app `J [(Term.hole "_")]) "." `lower_mem_Icc)])
                   "."
                   (fieldIdx "1"))
                  [(Term.hole "_")])])]
              "]")]))))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `box.Icc_def)
             ","
             (Tactic.rwRule
              []
              (Term.app
               `Real.volume_Icc_pi_to_real
               [(Term.proj
                 (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
                 "."
                 `lower_le_upper)]))
             ","
             (Tactic.rwRule
              [(patternIgnore (token.«← » "←"))]
              (Term.app `le_div_iff [(Term.app `hvol_pos [(Term.hole "_")])]))]
            "]")
           [])
          []
          (Tactic.refine'
           "refine'"
           (Term.app
            `div_le_div_of_le_left
            [`εpos.le
             (Term.app `hvol_pos [(Term.hole "_")])
             (Term.app
              `prod_le_prod
              [(Term.fun "fun" (Term.basicFun [`j `hj] [] "=>" (Term.hole "_")))
               (Term.fun "fun" (Term.basicFun [`j `hj] [] "=>" (Term.hole "_")))])]))
          []
          (Std.Tactic.exacts
           "exacts"
           "["
           [(Term.app
             (Term.proj `sub_nonneg "." (fieldIdx "2"))
             [(Term.app `box.lower_le_upper [(Term.hole "_") (Term.hole "_")])])
            ","
            (Term.app
             `sub_le_sub
             [(Term.app
               (Term.proj
                (Term.app
                 `hJ_sub'
                 [(Term.hole "_") (Term.proj (Term.app `J [(Term.hole "_")]) "." `upper_mem_Icc)])
                "."
                (fieldIdx "2"))
               [(Term.hole "_")])
              (Term.app
               (Term.proj
                (Term.app
                 `hJ_sub'
                 [(Term.hole "_") (Term.proj (Term.app `J [(Term.hole "_")]) "." `lower_mem_Icc)])
                "."
                (fieldIdx "1"))
               [(Term.hole "_")])])]
           "]")])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.exacts
       "exacts"
       "["
       [(Term.app
         (Term.proj `sub_nonneg "." (fieldIdx "2"))
         [(Term.app `box.lower_le_upper [(Term.hole "_") (Term.hole "_")])])
        ","
        (Term.app
         `sub_le_sub
         [(Term.app
           (Term.proj
            (Term.app
             `hJ_sub'
             [(Term.hole "_") (Term.proj (Term.app `J [(Term.hole "_")]) "." `upper_mem_Icc)])
            "."
            (fieldIdx "2"))
           [(Term.hole "_")])
          (Term.app
           (Term.proj
            (Term.app
             `hJ_sub'
             [(Term.hole "_") (Term.proj (Term.app `J [(Term.hole "_")]) "." `lower_mem_Icc)])
            "."
            (fieldIdx "1"))
           [(Term.hole "_")])])]
       "]")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `sub_le_sub
       [(Term.app
         (Term.proj
          (Term.app
           `hJ_sub'
           [(Term.hole "_") (Term.proj (Term.app `J [(Term.hole "_")]) "." `upper_mem_Icc)])
          "."
          (fieldIdx "2"))
         [(Term.hole "_")])
        (Term.app
         (Term.proj
          (Term.app
           `hJ_sub'
           [(Term.hole "_") (Term.proj (Term.app `J [(Term.hole "_")]) "." `lower_mem_Icc)])
          "."
          (fieldIdx "1"))
         [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj
        (Term.app
         `hJ_sub'
         [(Term.hole "_") (Term.proj (Term.app `J [(Term.hole "_")]) "." `lower_mem_Icc)])
        "."
        (fieldIdx "1"))
       [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       (Term.app
        `hJ_sub'
        [(Term.hole "_") (Term.proj (Term.app `J [(Term.hole "_")]) "." `lower_mem_Icc)])
       "."
       (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `hJ_sub'
       [(Term.hole "_") (Term.proj (Term.app `J [(Term.hole "_")]) "." `lower_mem_Icc)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `J [(Term.hole "_")]) "." `lower_mem_Icc)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `J [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `J
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `J [(Term.hole "_")]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hJ_sub'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `hJ_sub'
      [(Term.hole "_")
       (Term.proj (Term.paren "(" (Term.app `J [(Term.hole "_")]) ")") "." `lower_mem_Icc)])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj
       (Term.paren
        "("
        (Term.app
         `hJ_sub'
         [(Term.hole "_")
          (Term.proj (Term.paren "(" (Term.app `J [(Term.hole "_")]) ")") "." `lower_mem_Icc)])
        ")")
       "."
       (fieldIdx "1"))
      [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       (Term.proj
        (Term.app
         `hJ_sub'
         [(Term.hole "_") (Term.proj (Term.app `J [(Term.hole "_")]) "." `upper_mem_Icc)])
        "."
        (fieldIdx "2"))
       [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       (Term.app
        `hJ_sub'
        [(Term.hole "_") (Term.proj (Term.app `J [(Term.hole "_")]) "." `upper_mem_Icc)])
       "."
       (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `hJ_sub'
       [(Term.hole "_") (Term.proj (Term.app `J [(Term.hole "_")]) "." `upper_mem_Icc)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `J [(Term.hole "_")]) "." `upper_mem_Icc)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `J [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `J
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `J [(Term.hole "_")]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hJ_sub'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `hJ_sub'
      [(Term.hole "_")
       (Term.proj (Term.paren "(" (Term.app `J [(Term.hole "_")]) ")") "." `upper_mem_Icc)])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj
       (Term.paren
        "("
        (Term.app
         `hJ_sub'
         [(Term.hole "_")
          (Term.proj (Term.paren "(" (Term.app `J [(Term.hole "_")]) ")") "." `upper_mem_Icc)])
        ")")
       "."
       (fieldIdx "2"))
      [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `sub_le_sub
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `sub_nonneg "." (fieldIdx "2"))
       [(Term.app `box.lower_le_upper [(Term.hole "_") (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `box.lower_le_upper [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `box.lower_le_upper
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `box.lower_le_upper [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `sub_nonneg "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `sub_nonneg
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `div_le_div_of_le_left
        [`εpos.le
         (Term.app `hvol_pos [(Term.hole "_")])
         (Term.app
          `prod_le_prod
          [(Term.fun "fun" (Term.basicFun [`j `hj] [] "=>" (Term.hole "_")))
           (Term.fun "fun" (Term.basicFun [`j `hj] [] "=>" (Term.hole "_")))])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `div_le_div_of_le_left
       [`εpos.le
        (Term.app `hvol_pos [(Term.hole "_")])
        (Term.app
         `prod_le_prod
         [(Term.fun "fun" (Term.basicFun [`j `hj] [] "=>" (Term.hole "_")))
          (Term.fun "fun" (Term.basicFun [`j `hj] [] "=>" (Term.hole "_")))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `prod_le_prod
       [(Term.fun "fun" (Term.basicFun [`j `hj] [] "=>" (Term.hole "_")))
        (Term.fun "fun" (Term.basicFun [`j `hj] [] "=>" (Term.hole "_")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [`j `hj] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hj
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `j
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.fun "fun" (Term.basicFun [`j `hj] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hj
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `j
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun "fun" (Term.basicFun [`j `hj] [] "=>" (Term.hole "_")))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `prod_le_prod
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `prod_le_prod
      [(Term.paren "(" (Term.fun "fun" (Term.basicFun [`j `hj] [] "=>" (Term.hole "_"))) ")")
       (Term.fun "fun" (Term.basicFun [`j `hj] [] "=>" (Term.hole "_")))])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `hvol_pos [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hvol_pos
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `hvol_pos [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `εpos.le
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `div_le_div_of_le_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `box.Icc_def)
         ","
         (Tactic.rwRule
          []
          (Term.app
           `Real.volume_Icc_pi_to_real
           [(Term.proj
             (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
             "."
             `lower_le_upper)]))
         ","
         (Tactic.rwRule
          [(patternIgnore (token.«← » "←"))]
          (Term.app `le_div_iff [(Term.app `hvol_pos [(Term.hole "_")])]))]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_div_iff [(Term.app `hvol_pos [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hvol_pos [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hvol_pos
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `hvol_pos [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_div_iff
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Real.volume_Icc_pi_to_real
       [(Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `lower_le_upper)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `lower_le_upper)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `J [`k]) "." `face)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `J [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `J
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `J [`k]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj (Term.paren "(" (Term.app `J [`k]) ")") "." `face) [`i])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Real.volume_Icc_pi_to_real
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `box.Icc_def
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» (Term.hole "_") "≤" `ε)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `ε
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.refine'
           "refine'"
           (Term.app
            `norm_set_integral_le_of_norm_le_const'
            [(Term.app
              (Term.proj
               (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
               "."
               `measure_Icc_lt_top)
              [(Term.hole "_")])
             (Term.proj
              (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
              "."
              `measurable_set_Icc)
             (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))]))
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `dist_eq_norm)]
            "]")
           [])
          []
          (calcTactic
           "calc"
           (calcStep
            («term_≤_»
             (Term.app
              `dist
              [(Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])
               (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x]) `i])])
             "≤"
             (Term.app
              `dist
              [(Term.app `f [(Term.app `i.insert_nth [`d `x])])
               (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x])])]))
            ":="
            (Term.app
             `dist_le_pi_dist
             [(Term.app `f [(Term.app `i.insert_nth [`d `x])])
              (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x])])
              `i]))
           [(calcStep
             («term_≤_»
              (Term.hole "_")
              "≤"
              («term_/_»
               `ε
               "/"
               (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
                "∏"
                (Std.ExtendedBinder.extBinders
                 (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
                ", "
                («term_-_»
                 (Term.app (Term.proj (Term.app `I.face [`i]) "." `upper) [`j])
                 "-"
                 (Term.app (Term.proj (Term.app `I.face [`i]) "." `lower) [`j])))))
             ":="
             (Term.app
              `hδ
              [(Term.hole "_")
               («term_<|_»
                (Term.app `I.maps_to_insert_nth_face_Icc [`hd])
                "<|"
                (Term.app `Hsub [`hx]))
               (Term.hole "_")
               («term_<|_»
                (Term.app `I.maps_to_insert_nth_face_Icc [(Term.app `hc [(Term.hole "_")])])
                "<|"
                (Term.app `Hsub [`hx]))
               (Term.hole "_")]))])
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `Fin.dist_insert_nth_insert_nth)
             ","
             (Tactic.rwRule [] `dist_self)
             ","
             (Tactic.rwRule [] `dist_comm)]
            "]")
           [])
          []
          (Tactic.exact "exact" (Term.app `max_le [`hk.le `δpos.lt.le]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `max_le [`hk.le `δpos.lt.le]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `max_le [`hk.le `δpos.lt.le])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `δpos.lt.le
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hk.le
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `max_le
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `Fin.dist_insert_nth_insert_nth)
         ","
         (Tactic.rwRule [] `dist_self)
         ","
         (Tactic.rwRule [] `dist_comm)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `dist_comm
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `dist_self
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Fin.dist_insert_nth_insert_nth
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (calcTactic
       "calc"
       (calcStep
        («term_≤_»
         (Term.app
          `dist
          [(Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])
           (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x]) `i])])
         "≤"
         (Term.app
          `dist
          [(Term.app `f [(Term.app `i.insert_nth [`d `x])])
           (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x])])]))
        ":="
        (Term.app
         `dist_le_pi_dist
         [(Term.app `f [(Term.app `i.insert_nth [`d `x])])
          (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x])])
          `i]))
       [(calcStep
         («term_≤_»
          (Term.hole "_")
          "≤"
          («term_/_»
           `ε
           "/"
           (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
            "∏"
            (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
            ", "
            («term_-_»
             (Term.app (Term.proj (Term.app `I.face [`i]) "." `upper) [`j])
             "-"
             (Term.app (Term.proj (Term.app `I.face [`i]) "." `lower) [`j])))))
         ":="
         (Term.app
          `hδ
          [(Term.hole "_")
           («term_<|_» (Term.app `I.maps_to_insert_nth_face_Icc [`hd]) "<|" (Term.app `Hsub [`hx]))
           (Term.hole "_")
           («term_<|_»
            (Term.app `I.maps_to_insert_nth_face_Icc [(Term.app `hc [(Term.hole "_")])])
            "<|"
            (Term.app `Hsub [`hx]))
           (Term.hole "_")]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `hδ
       [(Term.hole "_")
        («term_<|_» (Term.app `I.maps_to_insert_nth_face_Icc [`hd]) "<|" (Term.app `Hsub [`hx]))
        (Term.hole "_")
        («term_<|_»
         (Term.app `I.maps_to_insert_nth_face_Icc [(Term.app `hc [(Term.hole "_")])])
         "<|"
         (Term.app `Hsub [`hx]))
        (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      («term_<|_»
       (Term.app `I.maps_to_insert_nth_face_Icc [(Term.app `hc [(Term.hole "_")])])
       "<|"
       (Term.app `Hsub [`hx]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Hsub [`hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Hsub
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.app `I.maps_to_insert_nth_face_Icc [(Term.app `hc [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hc [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `hc [(Term.hole "_")]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `I.maps_to_insert_nth_face_Icc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 10, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_<|_»
      (Term.app
       `I.maps_to_insert_nth_face_Icc
       [(Term.paren "(" (Term.app `hc [(Term.hole "_")]) ")")])
      "<|"
      (Term.app `Hsub [`hx]))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      («term_<|_» (Term.app `I.maps_to_insert_nth_face_Icc [`hd]) "<|" (Term.app `Hsub [`hx]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Hsub [`hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Hsub
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.app `I.maps_to_insert_nth_face_Icc [`hd])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hd
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `I.maps_to_insert_nth_face_Icc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 10, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_<|_» (Term.app `I.maps_to_insert_nth_face_Icc [`hd]) "<|" (Term.app `Hsub [`hx]))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hδ
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_»
       (Term.hole "_")
       "≤"
       («term_/_»
        `ε
        "/"
        (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
         "∏"
         (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
         ", "
         («term_-_»
          (Term.app (Term.proj (Term.app `I.face [`i]) "." `upper) [`j])
          "-"
          (Term.app (Term.proj (Term.app `I.face [`i]) "." `lower) [`j])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_/_»
       `ε
       "/"
       (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
        "∏"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
        ", "
        («term_-_»
         (Term.app (Term.proj (Term.app `I.face [`i]) "." `upper) [`j])
         "-"
         (Term.app (Term.proj (Term.app `I.face [`i]) "." `lower) [`j]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
       "∏"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
       ", "
       («term_-_»
        (Term.app (Term.proj (Term.app `I.face [`i]) "." `upper) [`j])
        "-"
        (Term.app (Term.proj (Term.app `I.face [`i]) "." `lower) [`j])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_-_»
       (Term.app (Term.proj (Term.app `I.face [`i]) "." `upper) [`j])
       "-"
       (Term.app (Term.proj (Term.app `I.face [`i]) "." `lower) [`j]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj (Term.app `I.face [`i]) "." `lower) [`j])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `j
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `I.face [`i]) "." `lower)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `I.face [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `I.face
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `I.face [`i]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (Term.app (Term.proj (Term.app `I.face [`i]) "." `upper) [`j])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `j
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `I.face [`i]) "." `upper)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `I.face [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `I.face
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `I.face [`i]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1022, (some 1023, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `ε
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
      (Term.app
       `dist_le_pi_dist
       [(Term.app `f [(Term.app `i.insert_nth [`d `x])])
        (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x])])
        `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `i.insert_nth [(Term.app `c [`k]) `x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `c [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `c
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `c [`k]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `i.insert_nth
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `i.insert_nth [(Term.paren "(" (Term.app `c [`k]) ")") `x])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `f
      [(Term.paren "(" (Term.app `i.insert_nth [(Term.paren "(" (Term.app `c [`k]) ")") `x]) ")")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `f [(Term.app `i.insert_nth [`d `x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `i.insert_nth [`d `x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `d
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `i.insert_nth
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `i.insert_nth [`d `x]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `f [(Term.paren "(" (Term.app `i.insert_nth [`d `x]) ")")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `dist_le_pi_dist
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_»
       (Term.app
        `dist
        [(Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])
         (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x]) `i])])
       "≤"
       (Term.app
        `dist
        [(Term.app `f [(Term.app `i.insert_nth [`d `x])])
         (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x])])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `dist
       [(Term.app `f [(Term.app `i.insert_nth [`d `x])])
        (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `i.insert_nth [(Term.app `c [`k]) `x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `c [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `c
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `c [`k]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `i.insert_nth
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `i.insert_nth [(Term.paren "(" (Term.app `c [`k]) ")") `x])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `f
      [(Term.paren "(" (Term.app `i.insert_nth [(Term.paren "(" (Term.app `c [`k]) ")") `x]) ")")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `f [(Term.app `i.insert_nth [`d `x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `i.insert_nth [`d `x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `d
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `i.insert_nth
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `i.insert_nth [`d `x]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `f [(Term.paren "(" (Term.app `i.insert_nth [`d `x]) ")")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `dist
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app
       `dist
       [(Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])
        (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x]) `i])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x]) `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `i.insert_nth [(Term.app `c [`k]) `x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `c [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `c
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `c [`k]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `i.insert_nth
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `i.insert_nth [(Term.paren "(" (Term.app `c [`k]) ")") `x])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `f
      [(Term.paren "(" (Term.app `i.insert_nth [(Term.paren "(" (Term.app `c [`k]) ")") `x]) ")")
       `i])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `i.insert_nth [`d `x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `d
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `i.insert_nth
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `i.insert_nth [`d `x]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `f [(Term.paren "(" (Term.app `i.insert_nth [`d `x]) ")") `i])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `dist
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `dist_eq_norm)] "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `dist_eq_norm
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `norm_set_integral_le_of_norm_le_const'
        [(Term.app
          (Term.proj
           (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
           "."
           `measure_Icc_lt_top)
          [(Term.hole "_")])
         (Term.proj
          (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
          "."
          `measurable_set_Icc)
         (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `norm_set_integral_le_of_norm_le_const'
       [(Term.app
         (Term.proj
          (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
          "."
          `measure_Icc_lt_top)
         [(Term.hole "_")])
        (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `measurable_set_Icc)
        (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `measurable_set_Icc)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `J [`k]) "." `face)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `J [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `J
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `J [`k]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj (Term.paren "(" (Term.app `J [`k]) ")") "." `face) [`i])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `measure_Icc_lt_top)
       [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `measure_Icc_lt_top)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `J [`k]) "." `face)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `J [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `J
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `J [`k]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj (Term.paren "(" (Term.app `J [`k]) ")") "." `face) [`i])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj
       (Term.paren
        "("
        (Term.app (Term.proj (Term.paren "(" (Term.app `J [`k]) ")") "." `face) [`i])
        ")")
       "."
       `measure_Icc_lt_top)
      [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `norm_set_integral_le_of_norm_le_const'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_»
       (Analysis.Normed.Group.Basic.«term‖_‖»
        "‖"
        (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
         "∫"
         (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
         " in "
         (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)
         ", "
         («term_-_»
          (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])
          "-"
          (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x]) `i])))
        "‖")
       "≤"
       («term_*_»
        («term_/_»
         `ε
         "/"
         (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
          "∏"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
          ", "
          («term_-_»
           (Term.app (Term.proj (Term.app `I.face [`i]) "." `upper) [`j])
           "-"
           (Term.app (Term.proj (Term.app `I.face [`i]) "." `lower) [`j]))))
        "*"
        (Term.proj
         (Term.app
          `volume
          [(Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)])
         "."
         `toReal)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_»
       («term_/_»
        `ε
        "/"
        (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
         "∏"
         (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
         ", "
         («term_-_»
          (Term.app (Term.proj (Term.app `I.face [`i]) "." `upper) [`j])
          "-"
          (Term.app (Term.proj (Term.app `I.face [`i]) "." `lower) [`j]))))
       "*"
       (Term.proj
        (Term.app
         `volume
         [(Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)])
        "."
        `toReal))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj
       (Term.app
        `volume
        [(Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)])
       "."
       `toReal)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `volume
       [(Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `J [`k]) "." `face)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `J [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `J
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `J [`k]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj (Term.paren "(" (Term.app `J [`k]) ")") "." `face) [`i])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `volume
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `volume
      [(Term.proj
        (Term.paren
         "("
         (Term.app (Term.proj (Term.paren "(" (Term.app `J [`k]) ")") "." `face) [`i])
         ")")
        "."
        `IccCat)])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      («term_/_»
       `ε
       "/"
       (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
        "∏"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
        ", "
        («term_-_»
         (Term.app (Term.proj (Term.app `I.face [`i]) "." `upper) [`j])
         "-"
         (Term.app (Term.proj (Term.app `I.face [`i]) "." `lower) [`j]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
       "∏"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
       ", "
       («term_-_»
        (Term.app (Term.proj (Term.app `I.face [`i]) "." `upper) [`j])
        "-"
        (Term.app (Term.proj (Term.app `I.face [`i]) "." `lower) [`j])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_-_»
       (Term.app (Term.proj (Term.app `I.face [`i]) "." `upper) [`j])
       "-"
       (Term.app (Term.proj (Term.app `I.face [`i]) "." `lower) [`j]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj (Term.app `I.face [`i]) "." `lower) [`j])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `j
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `I.face [`i]) "." `lower)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `I.face [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `I.face
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `I.face [`i]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (Term.app (Term.proj (Term.app `I.face [`i]) "." `upper) [`j])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `j
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `I.face [`i]) "." `upper)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `I.face [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `I.face
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `I.face [`i]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1022, (some 1023, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `ε
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 70, (some 0, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_/_»
      `ε
      "/"
      (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
       "∏"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
       ", "
       («term_-_»
        (Term.app (Term.proj (Term.paren "(" (Term.app `I.face [`i]) ")") "." `upper) [`j])
        "-"
        (Term.app (Term.proj (Term.paren "(" (Term.app `I.face [`i]) ")") "." `lower) [`j]))))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Analysis.Normed.Group.Basic.«term‖_‖»
       "‖"
       (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
        "∫"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
        " in "
        (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)
        ", "
        («term_-_»
         (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])
         "-"
         (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x]) `i])))
       "‖")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
       "∫"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
       " in "
       (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)
       ", "
       («term_-_»
        (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])
        "-"
        (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x]) `i])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_-_»
       (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])
       "-"
       (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x]) `i]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x]) `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `i.insert_nth [(Term.app `c [`k]) `x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `c [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `c
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `c [`k]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `i.insert_nth
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `i.insert_nth [(Term.paren "(" (Term.app `c [`k]) ")") `x])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `i.insert_nth [`d `x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `d
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `i.insert_nth
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `i.insert_nth [`d `x]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1022, (some 1023, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `J [`k]) "." `face)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `J [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `J
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `J [`k]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj (Term.paren "(" (Term.app `J [`k]) ")") "." `face) [`i])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `mem_closed_ball_zero_iff)
         ","
         (Tactic.rwRule [] `Real.norm_eq_abs)
         ","
         (Tactic.rwRule [] (Term.app `abs_of_nonneg [`dist_nonneg]))
         ","
         (Tactic.rwRule [] `dist_eq_norm)
         ","
         (Tactic.rwRule
          [(patternIgnore (token.«← » "←"))]
          (Term.app
           `integral_sub
           [(Term.app `Hid.mono_set [`Hsub])
            (Term.app (Term.proj (Term.app `Hic [(Term.hole "_")]) "." `monoSet) [`Hsub])]))]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `integral_sub
       [(Term.app `Hid.mono_set [`Hsub])
        (Term.app (Term.proj (Term.app `Hic [(Term.hole "_")]) "." `monoSet) [`Hsub])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj (Term.app `Hic [(Term.hole "_")]) "." `monoSet) [`Hsub])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Hsub
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `Hic [(Term.hole "_")]) "." `monoSet)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `Hic [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Hic
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `Hic [(Term.hole "_")]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj (Term.paren "(" (Term.app `Hic [(Term.hole "_")]) ")") "." `monoSet)
      [`Hsub])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `Hid.mono_set [`Hsub])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Hsub
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Hid.mono_set
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `Hid.mono_set [`Hsub]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `integral_sub
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `dist_eq_norm
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `abs_of_nonneg [`dist_nonneg])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `dist_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `abs_of_nonneg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Real.norm_eq_abs
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mem_closed_ball_zero_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`Hsub []]
         [(Term.typeSpec
           ":"
           («term_⊆_»
            (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)
            "⊆"
            (Term.proj (Term.app `I.face [`i]) "." `IccCat)))]
         ":="
         (Term.app
          (Term.proj `box.le_iff_Icc "." (fieldIdx "1"))
          [(Term.app `box.face_mono [(Term.app `hJ_le [(Term.hole "_")]) `i])]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `box.le_iff_Icc "." (fieldIdx "1"))
       [(Term.app `box.face_mono [(Term.app `hJ_le [(Term.hole "_")]) `i])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `box.face_mono [(Term.app `hJ_le [(Term.hole "_")]) `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `hJ_le [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hJ_le
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `hJ_le [(Term.hole "_")]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `box.face_mono
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `box.face_mono [(Term.paren "(" (Term.app `hJ_le [(Term.hole "_")]) ")") `i])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `box.le_iff_Icc "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `box.le_iff_Icc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_⊆_»
       (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)
       "⊆"
       (Term.proj (Term.app `I.face [`i]) "." `IccCat))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `I.face [`i]) "." `IccCat)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `I.face [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `I.face
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `I.face [`i]) ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `J [`k]) "." `face)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `J [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `J
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `J [`k]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj (Term.paren "(" (Term.app `J [`k]) ")") "." `face) [`i])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        (Term.proj
         (Term.app `hcd.eventually [(Term.app `Metric.ball_mem_nhds [(Term.hole "_") `δpos])])
         "."
         `mono)
        [(Term.fun "fun" (Term.basicFun [`k `hk] [] "=>" (Term.hole "_")))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj
        (Term.app `hcd.eventually [(Term.app `Metric.ball_mem_nhds [(Term.hole "_") `δpos])])
        "."
        `mono)
       [(Term.fun "fun" (Term.basicFun [`k `hk] [] "=>" (Term.hole "_")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [`k `hk] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hk
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       (Term.app `hcd.eventually [(Term.app `Metric.ball_mem_nhds [(Term.hole "_") `δpos])])
       "."
       `mono)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `hcd.eventually [(Term.app `Metric.ball_mem_nhds [(Term.hole "_") `δpos])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Metric.ball_mem_nhds [(Term.hole "_") `δpos])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `δpos
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Metric.ball_mem_nhds
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `Metric.ball_mem_nhds [(Term.hole "_") `δpos])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hcd.eventually
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `hcd.eventually
      [(Term.paren "(" (Term.app `Metric.ball_mem_nhds [(Term.hole "_") `δpos]) ")")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rcases
       "rcases"
       [(Tactic.casesTarget
         []
         (Term.app
          (Term.proj `Metric.uniform_continuous_on_iff_le "." (fieldIdx "1"))
          [(Term.app `I.is_compact_Icc.uniform_continuous_on_of_continuous [`Hc])
           («term_/_»
            `ε
            "/"
            (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
             "∏"
             (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
             ", "
             («term_-_»
              (Term.app (Term.proj (Term.app `I.face [`i]) "." `upper) [`j])
              "-"
              (Term.app (Term.proj (Term.app `I.face [`i]) "." `lower) [`j]))))
           (Term.app `div_pos [`εpos (Term.app `hvol_pos [(Term.app `I.face [`i])])])]))]
       ["with"
        (Std.Tactic.RCases.rcasesPatLo
         (Std.Tactic.RCases.rcasesPatMed
          [(Std.Tactic.RCases.rcasesPat.tuple
            "⟨"
            [(Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `δ)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `δpos)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hδ)])
              [])]
            "⟩")])
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `Metric.uniform_continuous_on_iff_le "." (fieldIdx "1"))
       [(Term.app `I.is_compact_Icc.uniform_continuous_on_of_continuous [`Hc])
        («term_/_»
         `ε
         "/"
         (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
          "∏"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
          ", "
          («term_-_»
           (Term.app (Term.proj (Term.app `I.face [`i]) "." `upper) [`j])
           "-"
           (Term.app (Term.proj (Term.app `I.face [`i]) "." `lower) [`j]))))
        (Term.app `div_pos [`εpos (Term.app `hvol_pos [(Term.app `I.face [`i])])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `div_pos [`εpos (Term.app `hvol_pos [(Term.app `I.face [`i])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hvol_pos [(Term.app `I.face [`i])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `I.face [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `I.face
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `I.face [`i]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hvol_pos
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `hvol_pos [(Term.paren "(" (Term.app `I.face [`i]) ")")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `εpos
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `div_pos
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `div_pos
      [`εpos
       (Term.paren "(" (Term.app `hvol_pos [(Term.paren "(" (Term.app `I.face [`i]) ")")]) ")")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_/_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      («term_/_»
       `ε
       "/"
       (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
        "∏"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
        ", "
        («term_-_»
         (Term.app (Term.proj (Term.app `I.face [`i]) "." `upper) [`j])
         "-"
         (Term.app (Term.proj (Term.app `I.face [`i]) "." `lower) [`j]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
       "∏"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
       ", "
       («term_-_»
        (Term.app (Term.proj (Term.app `I.face [`i]) "." `upper) [`j])
        "-"
        (Term.app (Term.proj (Term.app `I.face [`i]) "." `lower) [`j])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_-_»
       (Term.app (Term.proj (Term.app `I.face [`i]) "." `upper) [`j])
       "-"
       (Term.app (Term.proj (Term.app `I.face [`i]) "." `lower) [`j]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj (Term.app `I.face [`i]) "." `lower) [`j])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `j
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `I.face [`i]) "." `lower)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `I.face [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `I.face
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `I.face [`i]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (Term.app (Term.proj (Term.app `I.face [`i]) "." `upper) [`j])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `j
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `I.face [`i]) "." `upper)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `I.face [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `I.face
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `I.face [`i]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1022, (some 1023, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `ε
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 70, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_/_»
      `ε
      "/"
      (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
       "∏"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
       ", "
       («term_-_»
        (Term.app (Term.proj (Term.paren "(" (Term.app `I.face [`i]) ")") "." `upper) [`j])
        "-"
        (Term.app (Term.proj (Term.paren "(" (Term.app `I.face [`i]) ")") "." `lower) [`j]))))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `I.is_compact_Icc.uniform_continuous_on_of_continuous [`Hc])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Hc
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `I.is_compact_Icc.uniform_continuous_on_of_continuous
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `I.is_compact_Icc.uniform_continuous_on_of_continuous [`Hc])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `Metric.uniform_continuous_on_iff_le "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `Metric.uniform_continuous_on_iff_le
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hvol_pos []]
         [(Term.typeSpec
           ":"
           (Term.forall
            "∀"
            [`J]
            [(Term.typeSpec ":" (Term.app `box [(Term.app `Fin [`n])]))]
            ","
            («term_<_»
             (num "0")
             "<"
             (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
              "∏"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
              ", "
              («term_-_»
               (Term.app (Term.proj `J "." `upper) [`j])
               "-"
               (Term.app (Term.proj `J "." `lower) [`j]))))))]
         ":="
         (Term.fun
          "fun"
          (Term.basicFun
           [`J]
           []
           "=>"
           (Term.app
            `prod_pos
            [(Term.fun
              "fun"
              (Term.basicFun
               [`j `hj]
               []
               "=>"
               («term_<|_»
                (Term.proj `sub_pos "." (fieldIdx "2"))
                "<|"
                (Term.app (Term.proj `J "." `lower_lt_upper) [(Term.hole "_")]))))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`J]
        []
        "=>"
        (Term.app
         `prod_pos
         [(Term.fun
           "fun"
           (Term.basicFun
            [`j `hj]
            []
            "=>"
            («term_<|_»
             (Term.proj `sub_pos "." (fieldIdx "2"))
             "<|"
             (Term.app (Term.proj `J "." `lower_lt_upper) [(Term.hole "_")]))))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `prod_pos
       [(Term.fun
         "fun"
         (Term.basicFun
          [`j `hj]
          []
          "=>"
          («term_<|_»
           (Term.proj `sub_pos "." (fieldIdx "2"))
           "<|"
           (Term.app (Term.proj `J "." `lower_lt_upper) [(Term.hole "_")]))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`j `hj]
        []
        "=>"
        («term_<|_»
         (Term.proj `sub_pos "." (fieldIdx "2"))
         "<|"
         (Term.app (Term.proj `J "." `lower_lt_upper) [(Term.hole "_")]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_»
       (Term.proj `sub_pos "." (fieldIdx "2"))
       "<|"
       (Term.app (Term.proj `J "." `lower_lt_upper) [(Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `J "." `lower_lt_upper) [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `J "." `lower_lt_upper)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `J
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `sub_pos "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `sub_pos
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hj
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `j
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `prod_pos
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `J
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`J]
       [(Term.typeSpec ":" (Term.app `box [(Term.app `Fin [`n])]))]
       ","
       («term_<_»
        (num "0")
        "<"
        (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
         "∏"
         (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
         ", "
         («term_-_»
          (Term.app (Term.proj `J "." `upper) [`j])
          "-"
          (Term.app (Term.proj `J "." `lower) [`j])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<_»
       (num "0")
       "<"
       (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
        "∏"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
        ", "
        («term_-_»
         (Term.app (Term.proj `J "." `upper) [`j])
         "-"
         (Term.app (Term.proj `J "." `lower) [`j]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (BigOperators.Algebra.BigOperators.Basic.finset.prod_univ
       "∏"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) []))
       ", "
       («term_-_»
        (Term.app (Term.proj `J "." `upper) [`j])
        "-"
        (Term.app (Term.proj `J "." `lower) [`j])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_-_»
       (Term.app (Term.proj `J "." `upper) [`j])
       "-"
       (Term.app (Term.proj `J "." `lower) [`j]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `J "." `lower) [`j])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `j
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `J "." `lower)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `J
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (Term.app (Term.proj `J "." `upper) [`j])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `j
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `J "." `upper)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `J
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1022, (some 1023, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `box [(Term.app `Fin [`n])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Fin [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Fin
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `Fin [`n]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `box
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `H.congr_dist
        [(Term.app
          (Term.proj `metric.nhds_basis_closed_ball.tendsto_right_iff "." (fieldIdx "2"))
          [(Term.fun "fun" (Term.basicFun [`ε `εpos] [] "=>" (Term.hole "_")))])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `H.congr_dist
       [(Term.app
         (Term.proj `metric.nhds_basis_closed_ball.tendsto_right_iff "." (fieldIdx "2"))
         [(Term.fun "fun" (Term.basicFun [`ε `εpos] [] "=>" (Term.hole "_")))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `metric.nhds_basis_closed_ball.tendsto_right_iff "." (fieldIdx "2"))
       [(Term.fun "fun" (Term.basicFun [`ε `εpos] [] "=>" (Term.hole "_")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [`ε `εpos] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `εpos
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `ε
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `metric.nhds_basis_closed_ball.tendsto_right_iff "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `metric.nhds_basis_closed_ball.tendsto_right_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj `metric.nhds_basis_closed_ball.tendsto_right_iff "." (fieldIdx "2"))
      [(Term.fun "fun" (Term.basicFun [`ε `εpos] [] "=>" (Term.hole "_")))])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `H.congr_dist
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`H []]
         [(Term.typeSpec
           ":"
           (Term.app
            `tendsto
            [(Term.fun
              "fun"
              (Term.basicFun
               [`k]
               []
               "=>"
               (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                "∫"
                (Std.ExtendedBinder.extBinders
                 (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                " in "
                (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)
                ", "
                (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i]))))
             `at_top
             («term_<|_»
              (TopologicalSpace.Topology.Basic.nhds "𝓝")
              "<|"
              (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
               "∫"
               (Std.ExtendedBinder.extBinders
                (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
               " in "
               (Term.proj (Term.app `I.face [`i]) "." `IccCat)
               ", "
               (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])))]))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`hIoo []]
                [(Term.typeSpec
                  ":"
                  («term_=_»
                   (Set.Data.Set.Lattice.«term⋃_,_»
                    "⋃"
                    (Std.ExtendedBinder.extBinders
                     (Std.ExtendedBinder.extBinder (Lean.binderIdent `k) []))
                    ", "
                    (Term.proj
                     (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
                     "."
                     `IooCat))
                   "="
                   (Term.proj (Term.app `I.face [`i]) "." `IooCat)))]
                ":="
                (Term.app
                 `box.Union_Ioo_of_tendsto
                 [(Term.app (Term.proj (Term.app `box.monotone_face [`i]) "." `comp) [`J.monotone])
                  (Term.app
                   (Term.proj `tendsto_pi_nhds "." (fieldIdx "2"))
                   [(Term.fun
                     "fun"
                     (Term.basicFun [(Term.hole "_")] [] "=>" (Term.app `hJl [(Term.hole "_")])))])
                  (Term.app
                   (Term.proj `tendsto_pi_nhds "." (fieldIdx "2"))
                   [(Term.fun
                     "fun"
                     (Term.basicFun
                      [(Term.hole "_")]
                      []
                      "=>"
                      (Term.app `hJu [(Term.hole "_")])))])]))))
             []
             (Tactic.simp
              "simp"
              []
              []
              ["only"]
              ["["
               [(Tactic.simpLemma [] [] `integrable_on)
                ","
                (Tactic.simpLemma
                 []
                 [(patternIgnore (token.«← » "←"))]
                 (Term.app
                  `measure.restrict_congr_set
                  [(Term.app `box.Ioo_ae_eq_Icc [(Term.hole "_")])]))
                ","
                (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `hIoo)]
               "]"]
              [(Tactic.location
                "at"
                (Tactic.locationHyp [`Hid] [(patternIgnore (token.«⊢» "⊢"))]))])
             []
             (Tactic.exact
              "exact"
              (Term.app
               `tendsto_set_integral_of_monotone
               [(Term.fun
                 "fun"
                 (Term.basicFun
                  [`k]
                  []
                  "=>"
                  (Term.proj
                   (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
                   "."
                   `measurable_set_Ioo)))
                (Term.app
                 `box.Ioo.monotone.comp
                 [(Term.app
                   (Term.proj (Term.app `box.monotone_face [`i]) "." `comp)
                   [`J.monotone])])
                `Hid]))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hIoo []]
             [(Term.typeSpec
               ":"
               («term_=_»
                (Set.Data.Set.Lattice.«term⋃_,_»
                 "⋃"
                 (Std.ExtendedBinder.extBinders
                  (Std.ExtendedBinder.extBinder (Lean.binderIdent `k) []))
                 ", "
                 (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IooCat))
                "="
                (Term.proj (Term.app `I.face [`i]) "." `IooCat)))]
             ":="
             (Term.app
              `box.Union_Ioo_of_tendsto
              [(Term.app (Term.proj (Term.app `box.monotone_face [`i]) "." `comp) [`J.monotone])
               (Term.app
                (Term.proj `tendsto_pi_nhds "." (fieldIdx "2"))
                [(Term.fun
                  "fun"
                  (Term.basicFun [(Term.hole "_")] [] "=>" (Term.app `hJl [(Term.hole "_")])))])
               (Term.app
                (Term.proj `tendsto_pi_nhds "." (fieldIdx "2"))
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [(Term.hole "_")]
                   []
                   "=>"
                   (Term.app `hJu [(Term.hole "_")])))])]))))
          []
          (Tactic.simp
           "simp"
           []
           []
           ["only"]
           ["["
            [(Tactic.simpLemma [] [] `integrable_on)
             ","
             (Tactic.simpLemma
              []
              [(patternIgnore (token.«← » "←"))]
              (Term.app
               `measure.restrict_congr_set
               [(Term.app `box.Ioo_ae_eq_Icc [(Term.hole "_")])]))
             ","
             (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `hIoo)]
            "]"]
           [(Tactic.location "at" (Tactic.locationHyp [`Hid] [(patternIgnore (token.«⊢» "⊢"))]))])
          []
          (Tactic.exact
           "exact"
           (Term.app
            `tendsto_set_integral_of_monotone
            [(Term.fun
              "fun"
              (Term.basicFun
               [`k]
               []
               "=>"
               (Term.proj
                (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
                "."
                `measurable_set_Ioo)))
             (Term.app
              `box.Ioo.monotone.comp
              [(Term.app (Term.proj (Term.app `box.monotone_face [`i]) "." `comp) [`J.monotone])])
             `Hid]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `tendsto_set_integral_of_monotone
        [(Term.fun
          "fun"
          (Term.basicFun
           [`k]
           []
           "=>"
           (Term.proj
            (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
            "."
            `measurable_set_Ioo)))
         (Term.app
          `box.Ioo.monotone.comp
          [(Term.app (Term.proj (Term.app `box.monotone_face [`i]) "." `comp) [`J.monotone])])
         `Hid]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `tendsto_set_integral_of_monotone
       [(Term.fun
         "fun"
         (Term.basicFun
          [`k]
          []
          "=>"
          (Term.proj
           (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
           "."
           `measurable_set_Ioo)))
        (Term.app
         `box.Ioo.monotone.comp
         [(Term.app (Term.proj (Term.app `box.monotone_face [`i]) "." `comp) [`J.monotone])])
        `Hid])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Hid
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `box.Ioo.monotone.comp
       [(Term.app (Term.proj (Term.app `box.monotone_face [`i]) "." `comp) [`J.monotone])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj (Term.app `box.monotone_face [`i]) "." `comp) [`J.monotone])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `J.monotone
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `box.monotone_face [`i]) "." `comp)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `box.monotone_face [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `box.monotone_face
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `box.monotone_face [`i]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj (Term.paren "(" (Term.app `box.monotone_face [`i]) ")") "." `comp)
      [`J.monotone])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `box.Ioo.monotone.comp
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `box.Ioo.monotone.comp
      [(Term.paren
        "("
        (Term.app
         (Term.proj (Term.paren "(" (Term.app `box.monotone_face [`i]) ")") "." `comp)
         [`J.monotone])
        ")")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`k]
        []
        "=>"
        (Term.proj
         (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
         "."
         `measurable_set_Ioo)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `measurable_set_Ioo)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `J [`k]) "." `face)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `J [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `J
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `J [`k]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj (Term.paren "(" (Term.app `J [`k]) ")") "." `face) [`i])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`k]
       []
       "=>"
       (Term.proj
        (Term.paren
         "("
         (Term.app (Term.proj (Term.paren "(" (Term.app `J [`k]) ")") "." `face) [`i])
         ")")
        "."
        `measurable_set_Ioo)))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `tendsto_set_integral_of_monotone
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       ["only"]
       ["["
        [(Tactic.simpLemma [] [] `integrable_on)
         ","
         (Tactic.simpLemma
          []
          [(patternIgnore (token.«← » "←"))]
          (Term.app `measure.restrict_congr_set [(Term.app `box.Ioo_ae_eq_Icc [(Term.hole "_")])]))
         ","
         (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `hIoo)]
        "]"]
       [(Tactic.location "at" (Tactic.locationHyp [`Hid] [(patternIgnore (token.«⊢» "⊢"))]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Hid
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hIoo
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `measure.restrict_congr_set [(Term.app `box.Ioo_ae_eq_Icc [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `box.Ioo_ae_eq_Icc [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `box.Ioo_ae_eq_Icc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `box.Ioo_ae_eq_Icc [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `measure.restrict_congr_set
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `integrable_on
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hIoo []]
         [(Term.typeSpec
           ":"
           («term_=_»
            (Set.Data.Set.Lattice.«term⋃_,_»
             "⋃"
             (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `k) []))
             ", "
             (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IooCat))
            "="
            (Term.proj (Term.app `I.face [`i]) "." `IooCat)))]
         ":="
         (Term.app
          `box.Union_Ioo_of_tendsto
          [(Term.app (Term.proj (Term.app `box.monotone_face [`i]) "." `comp) [`J.monotone])
           (Term.app
            (Term.proj `tendsto_pi_nhds "." (fieldIdx "2"))
            [(Term.fun
              "fun"
              (Term.basicFun [(Term.hole "_")] [] "=>" (Term.app `hJl [(Term.hole "_")])))])
           (Term.app
            (Term.proj `tendsto_pi_nhds "." (fieldIdx "2"))
            [(Term.fun
              "fun"
              (Term.basicFun [(Term.hole "_")] [] "=>" (Term.app `hJu [(Term.hole "_")])))])]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `box.Union_Ioo_of_tendsto
       [(Term.app (Term.proj (Term.app `box.monotone_face [`i]) "." `comp) [`J.monotone])
        (Term.app
         (Term.proj `tendsto_pi_nhds "." (fieldIdx "2"))
         [(Term.fun
           "fun"
           (Term.basicFun [(Term.hole "_")] [] "=>" (Term.app `hJl [(Term.hole "_")])))])
        (Term.app
         (Term.proj `tendsto_pi_nhds "." (fieldIdx "2"))
         [(Term.fun
           "fun"
           (Term.basicFun [(Term.hole "_")] [] "=>" (Term.app `hJu [(Term.hole "_")])))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `tendsto_pi_nhds "." (fieldIdx "2"))
       [(Term.fun
         "fun"
         (Term.basicFun [(Term.hole "_")] [] "=>" (Term.app `hJu [(Term.hole "_")])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" (Term.app `hJu [(Term.hole "_")])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hJu [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hJu
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `tendsto_pi_nhds "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `tendsto_pi_nhds
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj `tendsto_pi_nhds "." (fieldIdx "2"))
      [(Term.fun
        "fun"
        (Term.basicFun [(Term.hole "_")] [] "=>" (Term.app `hJu [(Term.hole "_")])))])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       (Term.proj `tendsto_pi_nhds "." (fieldIdx "2"))
       [(Term.fun
         "fun"
         (Term.basicFun [(Term.hole "_")] [] "=>" (Term.app `hJl [(Term.hole "_")])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" (Term.app `hJl [(Term.hole "_")])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hJl [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hJl
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `tendsto_pi_nhds "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `tendsto_pi_nhds
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj `tendsto_pi_nhds "." (fieldIdx "2"))
      [(Term.fun
        "fun"
        (Term.basicFun [(Term.hole "_")] [] "=>" (Term.app `hJl [(Term.hole "_")])))])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj (Term.app `box.monotone_face [`i]) "." `comp) [`J.monotone])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `J.monotone
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `box.monotone_face [`i]) "." `comp)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `box.monotone_face [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `box.monotone_face
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `box.monotone_face [`i]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj (Term.paren "(" (Term.app `box.monotone_face [`i]) ")") "." `comp)
      [`J.monotone])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `box.Union_Ioo_of_tendsto
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_»
       (Set.Data.Set.Lattice.«term⋃_,_»
        "⋃"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `k) []))
        ", "
        (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IooCat))
       "="
       (Term.proj (Term.app `I.face [`i]) "." `IooCat))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `I.face [`i]) "." `IooCat)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `I.face [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `I.face
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `I.face [`i]) ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Set.Data.Set.Lattice.«term⋃_,_»
       "⋃"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `k) []))
       ", "
       (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IooCat))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IooCat)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `J [`k]) "." `face)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `J [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `J
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `J [`k]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj (Term.paren "(" (Term.app `J [`k]) ")") "." `face) [`i])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Set.Data.Set.Lattice.«term⋃_,_»
      "⋃"
      (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `k) []))
      ", "
      (Term.proj
       (Term.paren
        "("
        (Term.app (Term.proj (Term.paren "(" (Term.app `J [`k]) ")") "." `face) [`i])
        ")")
       "."
       `IooCat))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `tendsto
       [(Term.fun
         "fun"
         (Term.basicFun
          [`k]
          []
          "=>"
          (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
           "∫"
           (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
           " in "
           (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)
           ", "
           (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i]))))
        `at_top
        («term_<|_»
         (TopologicalSpace.Topology.Basic.nhds "𝓝")
         "<|"
         (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
          "∫"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
          " in "
          (Term.proj (Term.app `I.face [`i]) "." `IccCat)
          ", "
          (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_»
       (TopologicalSpace.Topology.Basic.nhds "𝓝")
       "<|"
       (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
        "∫"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
        " in "
        (Term.proj (Term.app `I.face [`i]) "." `IccCat)
        ", "
        (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
       "∫"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
       " in "
       (Term.proj (Term.app `I.face [`i]) "." `IccCat)
       ", "
       (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `i.insert_nth [`d `x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `d
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `i.insert_nth
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `i.insert_nth [`d `x]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `I.face [`i]) "." `IccCat)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `I.face [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `I.face
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `I.face [`i]) ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (TopologicalSpace.Topology.Basic.nhds "𝓝")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_<|_»
      (TopologicalSpace.Topology.Basic.nhds "𝓝")
      "<|"
      (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
       "∫"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
       " in "
       (Term.proj (Term.paren "(" (Term.app `I.face [`i]) ")") "." `IccCat)
       ", "
       (Term.app `f [(Term.paren "(" (Term.app `i.insert_nth [`d `x]) ")") `i])))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `at_top
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`k]
        []
        "=>"
        (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
         "∫"
         (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
         " in "
         (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)
         ", "
         (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
       "∫"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
       " in "
       (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)
       ", "
       (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `i.insert_nth [`d `x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `d
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `i.insert_nth
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `i.insert_nth [`d `x]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `J [`k]) "." `face)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `J [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `J
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `J [`k]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj (Term.paren "(" (Term.app `J [`k]) ")") "." `face) [`i])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`k]
       []
       "=>"
       (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
        "∫"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
        " in "
        (Term.proj
         (Term.paren
          "("
          (Term.app (Term.proj (Term.paren "(" (Term.app `J [`k]) ")") "." `face) [`i])
          ")")
         "."
         `IccCat)
        ", "
        (Term.app `f [(Term.paren "(" (Term.app `i.insert_nth [`d `x]) ")") `i]))))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `tendsto
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`Hid []]
         [(Term.typeSpec
           ":"
           (Term.app
            `integrable_on
            [(Term.fun
              "fun"
              (Term.basicFun [`x] [] "=>" (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])))
             (Term.proj (Term.app `I.face [`i]) "." `IccCat)]))]
         ":="
         (Term.proj
          (Term.app
           `box.continuous_on_face_Icc
           [(Term.app (Term.proj (Term.app `continuous_apply [`i]) "." `comp_continuous_on) [`Hc])
            `hd])
          "."
          `integrableOnIcc))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj
       (Term.app
        `box.continuous_on_face_Icc
        [(Term.app (Term.proj (Term.app `continuous_apply [`i]) "." `comp_continuous_on) [`Hc])
         `hd])
       "."
       `integrableOnIcc)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `box.continuous_on_face_Icc
       [(Term.app (Term.proj (Term.app `continuous_apply [`i]) "." `comp_continuous_on) [`Hc]) `hd])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hd
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj (Term.app `continuous_apply [`i]) "." `comp_continuous_on) [`Hc])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Hc
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `continuous_apply [`i]) "." `comp_continuous_on)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `continuous_apply [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `continuous_apply
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `continuous_apply [`i]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj (Term.paren "(" (Term.app `continuous_apply [`i]) ")") "." `comp_continuous_on)
      [`Hc])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `box.continuous_on_face_Icc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `box.continuous_on_face_Icc
      [(Term.paren
        "("
        (Term.app
         (Term.proj (Term.paren "(" (Term.app `continuous_apply [`i]) ")") "." `comp_continuous_on)
         [`Hc])
        ")")
       `hd])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `integrable_on
       [(Term.fun
         "fun"
         (Term.basicFun [`x] [] "=>" (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])))
        (Term.proj (Term.app `I.face [`i]) "." `IccCat)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `I.face [`i]) "." `IccCat)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `I.face [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `I.face
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `I.face [`i]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun [`x] [] "=>" (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [(Term.app `i.insert_nth [`d `x]) `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `i.insert_nth [`d `x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `d
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `i.insert_nth
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `i.insert_nth [`d `x]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`x]
       []
       "=>"
       (Term.app `f [(Term.paren "(" (Term.app `i.insert_nth [`d `x]) ")") `i])))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `integrable_on
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`Hic []]
         [(Term.typeSpec
           ":"
           (Term.forall
            "∀"
            [`k]
            []
            ","
            (Term.app
             `integrable_on
             [(Term.fun
               "fun"
               (Term.basicFun
                [`x]
                []
                "=>"
                (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x]) `i])))
              (Term.proj (Term.app `I.face [`i]) "." `IccCat)])))]
         ":="
         (Term.fun
          "fun"
          (Term.basicFun
           [`k]
           []
           "=>"
           (Term.proj
            (Term.app
             `box.continuous_on_face_Icc
             [(Term.app (Term.proj (Term.app `continuous_apply [`i]) "." `comp_continuous_on) [`Hc])
              (Term.app `hc [`k])])
            "."
            `integrableOnIcc))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`k]
        []
        "=>"
        (Term.proj
         (Term.app
          `box.continuous_on_face_Icc
          [(Term.app (Term.proj (Term.app `continuous_apply [`i]) "." `comp_continuous_on) [`Hc])
           (Term.app `hc [`k])])
         "."
         `integrableOnIcc)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj
       (Term.app
        `box.continuous_on_face_Icc
        [(Term.app (Term.proj (Term.app `continuous_apply [`i]) "." `comp_continuous_on) [`Hc])
         (Term.app `hc [`k])])
       "."
       `integrableOnIcc)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `box.continuous_on_face_Icc
       [(Term.app (Term.proj (Term.app `continuous_apply [`i]) "." `comp_continuous_on) [`Hc])
        (Term.app `hc [`k])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hc [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `hc [`k]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj (Term.app `continuous_apply [`i]) "." `comp_continuous_on) [`Hc])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Hc
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `continuous_apply [`i]) "." `comp_continuous_on)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `continuous_apply [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `continuous_apply
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `continuous_apply [`i]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj (Term.paren "(" (Term.app `continuous_apply [`i]) ")") "." `comp_continuous_on)
      [`Hc])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `box.continuous_on_face_Icc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `box.continuous_on_face_Icc
      [(Term.paren
        "("
        (Term.app
         (Term.proj (Term.paren "(" (Term.app `continuous_apply [`i]) ")") "." `comp_continuous_on)
         [`Hc])
        ")")
       (Term.paren "(" (Term.app `hc [`k]) ")")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`k]
       []
       ","
       (Term.app
        `integrable_on
        [(Term.fun
          "fun"
          (Term.basicFun
           [`x]
           []
           "=>"
           (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x]) `i])))
         (Term.proj (Term.app `I.face [`i]) "." `IccCat)]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `integrable_on
       [(Term.fun
         "fun"
         (Term.basicFun
          [`x]
          []
          "=>"
          (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x]) `i])))
        (Term.proj (Term.app `I.face [`i]) "." `IccCat)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `I.face [`i]) "." `IccCat)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `I.face [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `I.face
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `I.face [`i]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x]
        []
        "=>"
        (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x]) `i])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [(Term.app `i.insert_nth [(Term.app `c [`k]) `x]) `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `i.insert_nth [(Term.app `c [`k]) `x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `c [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `c
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `c [`k]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `i.insert_nth
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `i.insert_nth [(Term.paren "(" (Term.app `c [`k]) ")") `x])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`x]
       []
       "=>"
       (Term.app
        `f
        [(Term.paren "(" (Term.app `i.insert_nth [(Term.paren "(" (Term.app `c [`k]) ")") `x]) ")")
         `i])))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `integrable_on
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hd []]
         [(Term.typeSpec
           ":"
           («term_∈_» `d "∈" (Term.app `Icc [(Term.app `I.lower [`i]) (Term.app `I.upper [`i])])))]
         ":="
         (Term.app `is_closed_Icc.mem_of_tendsto [`hcd (Term.app `eventually_of_forall [`hc])]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `is_closed_Icc.mem_of_tendsto [`hcd (Term.app `eventually_of_forall [`hc])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `eventually_of_forall [`hc])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hc
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `eventually_of_forall
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `eventually_of_forall [`hc])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hcd
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `is_closed_Icc.mem_of_tendsto
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_∈_» `d "∈" (Term.app `Icc [(Term.app `I.lower [`i]) (Term.app `I.upper [`i])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Icc [(Term.app `I.lower [`i]) (Term.app `I.upper [`i])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `I.upper [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `I.upper
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `I.upper [`i]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `I.lower [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `I.lower
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `I.lower [`i]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Icc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `d
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`i `c `d `hc `hcd])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hcd
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `d
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `c
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticSuffices_
       "suffices"
       (Term.sufficesDecl
        []
        (Term.forall
         "∀"
         [(Term.explicitBinder "(" [`i] [":" (Term.app `Fin [(«term_+_» `n "+" (num "1"))])] [] ")")
          (Term.explicitBinder
           "("
           [`c]
           [":" (Term.arrow (termℕ "ℕ") "→" (Data.Real.Basic.termℝ "ℝ"))]
           []
           ")")
          (Term.explicitBinder "(" [`d] [] [] ")")]
         []
         ","
         (Term.arrow
          (Term.forall
           "∀"
           [`k]
           []
           ","
           («term_∈_»
            (Term.app `c [`k])
            "∈"
            (Term.app `Icc [(Term.app `I.lower [`i]) (Term.app `I.upper [`i])])))
          "→"
          (Term.arrow
           (Term.app
            `tendsto
            [`c `at_top (Term.app (TopologicalSpace.Topology.Basic.nhds "𝓝") [`d])])
           "→"
           (Term.app
            `tendsto
            [(Term.fun
              "fun"
              (Term.basicFun
               [`k]
               []
               "=>"
               (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                "∫"
                (Std.ExtendedBinder.extBinders
                 (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                " in "
                (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)
                ", "
                (Term.app
                 `f
                 [(Term.app (Term.proj `i "." `insertNth) [(Term.app `c [`k]) `x]) `i]))))
             `at_top
             («term_<|_»
              (TopologicalSpace.Topology.Basic.nhds "𝓝")
              "<|"
              (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
               "∫"
               (Std.ExtendedBinder.extBinders
                (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
               " in "
               (Term.proj (Term.app `I.face [`i]) "." `IccCat)
               ", "
               (Term.app `f [(Term.app (Term.proj `i "." `insertNth) [`d `x]) `i])))]))))
        (Term.byTactic'
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `box.Icc_eq_pi)] "]")
             [(Tactic.location "at" (Tactic.locationHyp [`hJ_sub'] []))])
            []
            (Tactic.refine'
             "refine'"
             (Term.app
              `tendsto_finset_sum
              [(Term.hole "_")
               (Term.fun
                "fun"
                (Term.basicFun
                 [`i `hi]
                 []
                 "=>"
                 (Term.app
                  (Term.proj
                   (Term.app
                    `this
                    [(Term.hole "_")
                     (Term.hole "_")
                     (Term.hole "_")
                     (Term.hole "_")
                     (Term.app `hJu [(Term.hole "_")])])
                   "."
                   `sub)
                  [(Term.app
                    `this
                    [(Term.hole "_")
                     (Term.hole "_")
                     (Term.hole "_")
                     (Term.hole "_")
                     (Term.app `hJl [(Term.hole "_")])])])))]))
            []
            (Std.Tactic.exacts
             "exacts"
             "["
             [(Term.fun
               "fun"
               (Term.basicFun
                [`k]
                []
                "=>"
                (Term.app
                 `hJ_sub'
                 [`k (Term.proj (Term.app `J [`k]) "." `upper_mem_Icc) (Term.hole "_") `trivial])))
              ","
              (Term.fun
               "fun"
               (Term.basicFun
                [`k]
                []
                "=>"
                (Term.app
                 `hJ_sub'
                 [`k (Term.proj (Term.app `J [`k]) "." `lower_mem_Icc) (Term.hole "_") `trivial])))]
             "]")])))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic'', expected 'Lean.Parser.Term.fromTerm'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.exacts
       "exacts"
       "["
       [(Term.fun
         "fun"
         (Term.basicFun
          [`k]
          []
          "=>"
          (Term.app
           `hJ_sub'
           [`k (Term.proj (Term.app `J [`k]) "." `upper_mem_Icc) (Term.hole "_") `trivial])))
        ","
        (Term.fun
         "fun"
         (Term.basicFun
          [`k]
          []
          "=>"
          (Term.app
           `hJ_sub'
           [`k (Term.proj (Term.app `J [`k]) "." `lower_mem_Icc) (Term.hole "_") `trivial])))]
       "]")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`k]
        []
        "=>"
        (Term.app
         `hJ_sub'
         [`k (Term.proj (Term.app `J [`k]) "." `lower_mem_Icc) (Term.hole "_") `trivial])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `hJ_sub'
       [`k (Term.proj (Term.app `J [`k]) "." `lower_mem_Icc) (Term.hole "_") `trivial])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `trivial
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.proj (Term.app `J [`k]) "." `lower_mem_Icc)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `J [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `J
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `J [`k]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hJ_sub'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`k]
        []
        "=>"
        (Term.app
         `hJ_sub'
         [`k (Term.proj (Term.app `J [`k]) "." `upper_mem_Icc) (Term.hole "_") `trivial])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `hJ_sub'
       [`k (Term.proj (Term.app `J [`k]) "." `upper_mem_Icc) (Term.hole "_") `trivial])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `trivial
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.proj (Term.app `J [`k]) "." `upper_mem_Icc)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `J [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `J
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `J [`k]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hJ_sub'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `tendsto_finset_sum
        [(Term.hole "_")
         (Term.fun
          "fun"
          (Term.basicFun
           [`i `hi]
           []
           "=>"
           (Term.app
            (Term.proj
             (Term.app
              `this
              [(Term.hole "_")
               (Term.hole "_")
               (Term.hole "_")
               (Term.hole "_")
               (Term.app `hJu [(Term.hole "_")])])
             "."
             `sub)
            [(Term.app
              `this
              [(Term.hole "_")
               (Term.hole "_")
               (Term.hole "_")
               (Term.hole "_")
               (Term.app `hJl [(Term.hole "_")])])])))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `tendsto_finset_sum
       [(Term.hole "_")
        (Term.fun
         "fun"
         (Term.basicFun
          [`i `hi]
          []
          "=>"
          (Term.app
           (Term.proj
            (Term.app
             `this
             [(Term.hole "_")
              (Term.hole "_")
              (Term.hole "_")
              (Term.hole "_")
              (Term.app `hJu [(Term.hole "_")])])
            "."
            `sub)
           [(Term.app
             `this
             [(Term.hole "_")
              (Term.hole "_")
              (Term.hole "_")
              (Term.hole "_")
              (Term.app `hJl [(Term.hole "_")])])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`i `hi]
        []
        "=>"
        (Term.app
         (Term.proj
          (Term.app
           `this
           [(Term.hole "_")
            (Term.hole "_")
            (Term.hole "_")
            (Term.hole "_")
            (Term.app `hJu [(Term.hole "_")])])
          "."
          `sub)
         [(Term.app
           `this
           [(Term.hole "_")
            (Term.hole "_")
            (Term.hole "_")
            (Term.hole "_")
            (Term.app `hJl [(Term.hole "_")])])])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj
        (Term.app
         `this
         [(Term.hole "_")
          (Term.hole "_")
          (Term.hole "_")
          (Term.hole "_")
          (Term.app `hJu [(Term.hole "_")])])
        "."
        `sub)
       [(Term.app
         `this
         [(Term.hole "_")
          (Term.hole "_")
          (Term.hole "_")
          (Term.hole "_")
          (Term.app `hJl [(Term.hole "_")])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `this
       [(Term.hole "_")
        (Term.hole "_")
        (Term.hole "_")
        (Term.hole "_")
        (Term.app `hJl [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hJl [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hJl
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `hJl [(Term.hole "_")]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `this
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `this
      [(Term.hole "_")
       (Term.hole "_")
       (Term.hole "_")
       (Term.hole "_")
       (Term.paren "(" (Term.app `hJl [(Term.hole "_")]) ")")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       (Term.app
        `this
        [(Term.hole "_")
         (Term.hole "_")
         (Term.hole "_")
         (Term.hole "_")
         (Term.app `hJu [(Term.hole "_")])])
       "."
       `sub)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `this
       [(Term.hole "_")
        (Term.hole "_")
        (Term.hole "_")
        (Term.hole "_")
        (Term.app `hJu [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hJu [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hJu
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `hJu [(Term.hole "_")]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `this
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `this
      [(Term.hole "_")
       (Term.hole "_")
       (Term.hole "_")
       (Term.hole "_")
       (Term.paren "(" (Term.app `hJu [(Term.hole "_")]) ")")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `tendsto_finset_sum
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `box.Icc_eq_pi)] "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hJ_sub'] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hJ_sub'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `box.Icc_eq_pi
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (Term.forall
       "∀"
       [(Term.explicitBinder "(" [`i] [":" (Term.app `Fin [(«term_+_» `n "+" (num "1"))])] [] ")")
        (Term.explicitBinder
         "("
         [`c]
         [":" (Term.arrow (termℕ "ℕ") "→" (Data.Real.Basic.termℝ "ℝ"))]
         []
         ")")
        (Term.explicitBinder "(" [`d] [] [] ")")]
       []
       ","
       (Term.arrow
        (Term.forall
         "∀"
         [`k]
         []
         ","
         («term_∈_»
          (Term.app `c [`k])
          "∈"
          (Term.app `Icc [(Term.app `I.lower [`i]) (Term.app `I.upper [`i])])))
        "→"
        (Term.arrow
         (Term.app `tendsto [`c `at_top (Term.app (TopologicalSpace.Topology.Basic.nhds "𝓝") [`d])])
         "→"
         (Term.app
          `tendsto
          [(Term.fun
            "fun"
            (Term.basicFun
             [`k]
             []
             "=>"
             (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
              "∫"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
              " in "
              (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)
              ", "
              (Term.app `f [(Term.app (Term.proj `i "." `insertNth) [(Term.app `c [`k]) `x]) `i]))))
           `at_top
           («term_<|_»
            (TopologicalSpace.Topology.Basic.nhds "𝓝")
            "<|"
            (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
             "∫"
             (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
             " in "
             (Term.proj (Term.app `I.face [`i]) "." `IccCat)
             ", "
             (Term.app `f [(Term.app (Term.proj `i "." `insertNth) [`d `x]) `i])))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       (Term.forall
        "∀"
        [`k]
        []
        ","
        («term_∈_»
         (Term.app `c [`k])
         "∈"
         (Term.app `Icc [(Term.app `I.lower [`i]) (Term.app `I.upper [`i])])))
       "→"
       (Term.arrow
        (Term.app `tendsto [`c `at_top (Term.app (TopologicalSpace.Topology.Basic.nhds "𝓝") [`d])])
        "→"
        (Term.app
         `tendsto
         [(Term.fun
           "fun"
           (Term.basicFun
            [`k]
            []
            "=>"
            (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
             "∫"
             (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
             " in "
             (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)
             ", "
             (Term.app `f [(Term.app (Term.proj `i "." `insertNth) [(Term.app `c [`k]) `x]) `i]))))
          `at_top
          («term_<|_»
           (TopologicalSpace.Topology.Basic.nhds "𝓝")
           "<|"
           (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
            "∫"
            (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
            " in "
            (Term.proj (Term.app `I.face [`i]) "." `IccCat)
            ", "
            (Term.app `f [(Term.app (Term.proj `i "." `insertNth) [`d `x]) `i])))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       (Term.app `tendsto [`c `at_top (Term.app (TopologicalSpace.Topology.Basic.nhds "𝓝") [`d])])
       "→"
       (Term.app
        `tendsto
        [(Term.fun
          "fun"
          (Term.basicFun
           [`k]
           []
           "=>"
           (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
            "∫"
            (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
            " in "
            (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)
            ", "
            (Term.app `f [(Term.app (Term.proj `i "." `insertNth) [(Term.app `c [`k]) `x]) `i]))))
         `at_top
         («term_<|_»
          (TopologicalSpace.Topology.Basic.nhds "𝓝")
          "<|"
          (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
           "∫"
           (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
           " in "
           (Term.proj (Term.app `I.face [`i]) "." `IccCat)
           ", "
           (Term.app `f [(Term.app (Term.proj `i "." `insertNth) [`d `x]) `i])))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `tendsto
       [(Term.fun
         "fun"
         (Term.basicFun
          [`k]
          []
          "=>"
          (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
           "∫"
           (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
           " in "
           (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)
           ", "
           (Term.app `f [(Term.app (Term.proj `i "." `insertNth) [(Term.app `c [`k]) `x]) `i]))))
        `at_top
        («term_<|_»
         (TopologicalSpace.Topology.Basic.nhds "𝓝")
         "<|"
         (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
          "∫"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
          " in "
          (Term.proj (Term.app `I.face [`i]) "." `IccCat)
          ", "
          (Term.app `f [(Term.app (Term.proj `i "." `insertNth) [`d `x]) `i])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_»
       (TopologicalSpace.Topology.Basic.nhds "𝓝")
       "<|"
       (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
        "∫"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
        " in "
        (Term.proj (Term.app `I.face [`i]) "." `IccCat)
        ", "
        (Term.app `f [(Term.app (Term.proj `i "." `insertNth) [`d `x]) `i])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
       "∫"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
       " in "
       (Term.proj (Term.app `I.face [`i]) "." `IccCat)
       ", "
       (Term.app `f [(Term.app (Term.proj `i "." `insertNth) [`d `x]) `i]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [(Term.app (Term.proj `i "." `insertNth) [`d `x]) `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj `i "." `insertNth) [`d `x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `d
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `i "." `insertNth)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj `i "." `insertNth) [`d `x])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `I.face [`i]) "." `IccCat)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `I.face [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `I.face
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `I.face [`i]) ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (TopologicalSpace.Topology.Basic.nhds "𝓝")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_<|_»
      (TopologicalSpace.Topology.Basic.nhds "𝓝")
      "<|"
      (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
       "∫"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
       " in "
       (Term.proj (Term.paren "(" (Term.app `I.face [`i]) ")") "." `IccCat)
       ", "
       (Term.app `f [(Term.paren "(" (Term.app (Term.proj `i "." `insertNth) [`d `x]) ")") `i])))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `at_top
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`k]
        []
        "=>"
        (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
         "∫"
         (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
         " in "
         (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)
         ", "
         (Term.app `f [(Term.app (Term.proj `i "." `insertNth) [(Term.app `c [`k]) `x]) `i]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
       "∫"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
       " in "
       (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)
       ", "
       (Term.app `f [(Term.app (Term.proj `i "." `insertNth) [(Term.app `c [`k]) `x]) `i]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [(Term.app (Term.proj `i "." `insertNth) [(Term.app `c [`k]) `x]) `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj `i "." `insertNth) [(Term.app `c [`k]) `x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `c [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `c
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `c [`k]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `i "." `insertNth)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj `i "." `insertNth) [(Term.paren "(" (Term.app `c [`k]) ")") `x])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i]) "." `IccCat)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj (Term.app `J [`k]) "." `face) [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `J [`k]) "." `face)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `J [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `J
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `J [`k]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj (Term.paren "(" (Term.app `J [`k]) ")") "." `face) [`i])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`k]
       []
       "=>"
       (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
        "∫"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
        " in "
        (Term.proj
         (Term.paren
          "("
          (Term.app (Term.proj (Term.paren "(" (Term.app `J [`k]) ")") "." `face) [`i])
          ")")
         "."
         `IccCat)
        ", "
        (Term.app
         `f
         [(Term.paren
           "("
           (Term.app (Term.proj `i "." `insertNth) [(Term.paren "(" (Term.app `c [`k]) ")") `x])
           ")")
          `i]))))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `tendsto
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      (Term.app `tendsto [`c `at_top (Term.app (TopologicalSpace.Topology.Basic.nhds "𝓝") [`d])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (TopologicalSpace.Topology.Basic.nhds "𝓝") [`d])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `d
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (TopologicalSpace.Topology.Basic.nhds "𝓝")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (TopologicalSpace.Topology.Basic.nhds "𝓝") [`d])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `at_top
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `c
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `tendsto
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      (Term.forall
       "∀"
       [`k]
       []
       ","
       («term_∈_»
        (Term.app `c [`k])
        "∈"
        (Term.app `Icc [(Term.app `I.lower [`i]) (Term.app `I.upper [`i])])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_∈_»
       (Term.app `c [`k])
       "∈"
       (Term.app `Icc [(Term.app `I.lower [`i]) (Term.app `I.upper [`i])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Icc [(Term.app `I.lower [`i]) (Term.app `I.upper [`i])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `I.upper [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `I.upper
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `I.upper [`i]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `I.lower [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `I.lower
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `I.lower [`i]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Icc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `c [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `c
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.forall
      "∀"
      [`k]
      []
      ","
      («term_∈_»
       (Term.app `c [`k])
       "∈"
       (Term.app
        `Icc
        [(Term.paren "(" (Term.app `I.lower [`i]) ")")
         (Term.paren "(" (Term.app `I.upper [`i]) ")")])))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow (termℕ "ℕ") "→" (Data.Real.Basic.termℝ "ℝ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 25 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      (termℕ "ℕ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Fin [(«term_+_» `n "+" (num "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `n "+" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `n
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_+_» `n "+" (num "1")) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Fin
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `tendsto_pi_nhds)] "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hJl `hJu] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hJu
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hJl
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `tendsto_pi_nhds
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.clear "clear" [`hI_tendsto])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hI_tendsto
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `tendsto_nhds_unique_of_eventually_eq
        [`hI_tendsto (Term.hole "_") (Term.app `eventually_of_forall [`HJ_eq])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `tendsto_nhds_unique_of_eventually_eq
       [`hI_tendsto (Term.hole "_") (Term.app `eventually_of_forall [`HJ_eq])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `eventually_of_forall [`HJ_eq])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `HJ_eq
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `eventually_of_forall
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `eventually_of_forall [`HJ_eq])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `hI_tendsto
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `tendsto_nhds_unique_of_eventually_eq
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hI_tendsto []]
         [(Term.typeSpec
           ":"
           (Term.app
            `tendsto
            [(Term.fun
              "fun"
              (Term.basicFun
               [`k]
               []
               "=>"
               (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                "∫"
                (Std.ExtendedBinder.extBinders
                 (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                " in "
                (Term.proj (Term.app `J [`k]) "." `IccCat)
                ", "
                (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
                 "∑"
                 (Std.ExtendedBinder.extBinders
                  (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
                 ", "
                 (Term.app
                  `f'
                  [`x
                   (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i)
                   `i])))))
             `at_top
             (Term.app
              (TopologicalSpace.Topology.Basic.nhds "𝓝")
              [(MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                "∫"
                (Std.ExtendedBinder.extBinders
                 (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                " in "
                `I.Icc
                ", "
                (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
                 "∑"
                 (Std.ExtendedBinder.extBinders
                  (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
                 ", "
                 (Term.app
                  `f'
                  [`x
                   (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i)
                   `i])))])]))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.simp
              "simp"
              []
              []
              ["only"]
              ["["
               [(Tactic.simpLemma [] [] `integrable_on)
                ","
                (Tactic.simpLemma
                 []
                 [(patternIgnore (token.«← » "←"))]
                 (Term.app
                  `measure.restrict_congr_set
                  [(Term.app `box.Ioo_ae_eq_Icc [(Term.hole "_")])]))]
               "]"]
              [(Tactic.location "at" (Tactic.locationHyp [`Hi] [(patternIgnore (token.«⊢» "⊢"))]))])
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule
                 [(patternIgnore (token.«← » "←"))]
                 (Term.app `box.Union_Ioo_of_tendsto [`J.monotone `hJl `hJu]))]
               "]")
              [(Tactic.location "at" (Tactic.locationHyp [`Hi] [(patternIgnore (token.«⊢» "⊢"))]))])
             []
             (Tactic.exact
              "exact"
              (Term.app
               `tendsto_set_integral_of_monotone
               [(Term.fun
                 "fun"
                 (Term.basicFun
                  [`k]
                  []
                  "=>"
                  (Term.proj (Term.app `J [`k]) "." `measurable_set_Ioo)))
                (Term.proj (Term.app `box.Ioo.comp [`J]) "." `Monotone)
                `Hi]))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.simp
           "simp"
           []
           []
           ["only"]
           ["["
            [(Tactic.simpLemma [] [] `integrable_on)
             ","
             (Tactic.simpLemma
              []
              [(patternIgnore (token.«← » "←"))]
              (Term.app
               `measure.restrict_congr_set
               [(Term.app `box.Ioo_ae_eq_Icc [(Term.hole "_")])]))]
            "]"]
           [(Tactic.location "at" (Tactic.locationHyp [`Hi] [(patternIgnore (token.«⊢» "⊢"))]))])
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule
              [(patternIgnore (token.«← » "←"))]
              (Term.app `box.Union_Ioo_of_tendsto [`J.monotone `hJl `hJu]))]
            "]")
           [(Tactic.location "at" (Tactic.locationHyp [`Hi] [(patternIgnore (token.«⊢» "⊢"))]))])
          []
          (Tactic.exact
           "exact"
           (Term.app
            `tendsto_set_integral_of_monotone
            [(Term.fun
              "fun"
              (Term.basicFun [`k] [] "=>" (Term.proj (Term.app `J [`k]) "." `measurable_set_Ioo)))
             (Term.proj (Term.app `box.Ioo.comp [`J]) "." `Monotone)
             `Hi]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `tendsto_set_integral_of_monotone
        [(Term.fun
          "fun"
          (Term.basicFun [`k] [] "=>" (Term.proj (Term.app `J [`k]) "." `measurable_set_Ioo)))
         (Term.proj (Term.app `box.Ioo.comp [`J]) "." `Monotone)
         `Hi]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `tendsto_set_integral_of_monotone
       [(Term.fun
         "fun"
         (Term.basicFun [`k] [] "=>" (Term.proj (Term.app `J [`k]) "." `measurable_set_Ioo)))
        (Term.proj (Term.app `box.Ioo.comp [`J]) "." `Monotone)
        `Hi])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Hi
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj (Term.app `box.Ioo.comp [`J]) "." `Monotone)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `box.Ioo.comp [`J])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `J
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `box.Ioo.comp
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `box.Ioo.comp [`J]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun [`k] [] "=>" (Term.proj (Term.app `J [`k]) "." `measurable_set_Ioo)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `J [`k]) "." `measurable_set_Ioo)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `J [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `J
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `J [`k]) ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`k]
       []
       "=>"
       (Term.proj (Term.paren "(" (Term.app `J [`k]) ")") "." `measurable_set_Ioo)))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `tendsto_set_integral_of_monotone
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule
          [(patternIgnore (token.«← » "←"))]
          (Term.app `box.Union_Ioo_of_tendsto [`J.monotone `hJl `hJu]))]
        "]")
       [(Tactic.location "at" (Tactic.locationHyp [`Hi] [(patternIgnore (token.«⊢» "⊢"))]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Hi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `box.Union_Ioo_of_tendsto [`J.monotone `hJl `hJu])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hJu
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hJl
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `J.monotone
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `box.Union_Ioo_of_tendsto
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       ["only"]
       ["["
        [(Tactic.simpLemma [] [] `integrable_on)
         ","
         (Tactic.simpLemma
          []
          [(patternIgnore (token.«← » "←"))]
          (Term.app `measure.restrict_congr_set [(Term.app `box.Ioo_ae_eq_Icc [(Term.hole "_")])]))]
        "]"]
       [(Tactic.location "at" (Tactic.locationHyp [`Hi] [(patternIgnore (token.«⊢» "⊢"))]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Hi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `measure.restrict_congr_set [(Term.app `box.Ioo_ae_eq_Icc [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `box.Ioo_ae_eq_Icc [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `box.Ioo_ae_eq_Icc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `box.Ioo_ae_eq_Icc [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `measure.restrict_congr_set
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `integrable_on
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `tendsto
       [(Term.fun
         "fun"
         (Term.basicFun
          [`k]
          []
          "=>"
          (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
           "∫"
           (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
           " in "
           (Term.proj (Term.app `J [`k]) "." `IccCat)
           ", "
           (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
            "∑"
            (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
            ", "
            (Term.app
             `f'
             [`x (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i) `i])))))
        `at_top
        (Term.app
         (TopologicalSpace.Topology.Basic.nhds "𝓝")
         [(MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
           "∫"
           (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
           " in "
           `I.Icc
           ", "
           (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
            "∑"
            (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
            ", "
            (Term.app
             `f'
             [`x (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i) `i])))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (TopologicalSpace.Topology.Basic.nhds "𝓝")
       [(MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
         "∫"
         (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
         " in "
         `I.Icc
         ", "
         (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
          "∑"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
          ", "
          (Term.app
           `f'
           [`x (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i) `i])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
       "∫"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
       " in "
       `I.Icc
       ", "
       (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
        "∑"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
        ", "
        (Term.app
         `f'
         [`x (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i) `i])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
       "∑"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
       ", "
       (Term.app
        `f'
        [`x (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i) `i]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f' [`x (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i) `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_', expected 'MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_._@.MeasureTheory.Integral.DivergenceTheorem._hyg.129'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    An auxiliary lemma for
    `measure_theory.integral_divergence_of_has_fderiv_within_at_off_countable`. Compared to the previous
    lemma, here we drop the assumption of differentiability on the boundary of the box. -/
  theorem
    integral_divergence_of_has_fderiv_within_at_off_countable_aux₂
    ( I : Box Fin n + 1 )
        ( f : ℝⁿ⁺¹ → Eⁿ⁺¹ )
        ( f' : ℝⁿ⁺¹ → ℝⁿ⁺¹ →L[ ℝ ] Eⁿ⁺¹ )
        ( s : Set ℝⁿ⁺¹ )
        ( hs : s . Countable )
        ( Hc : ContinuousOn f I . IccCat )
        ( Hd : ∀ x ∈ I . IooCat \ s , HasFderivAt f f' x x )
        ( Hi : IntegrableOn fun x => ∑ i , f' x e i i I . IccCat )
      :
        ∫ x in I . IccCat , ∑ i , f' x e i i
          =
          ∑
            i : Fin n + 1
            ,
            ∫ x in I . face i . IccCat , f i . insertNth I . upper i x i
              -
              ∫ x in I . face i . IccCat , f i . insertNth I . lower i x i
    :=
      by
        rcases I.exists_seq_mono_tendsto with ⟨ J , hJ_sub , hJl , hJu ⟩
          have hJ_sub' : ∀ k , J k . IccCat ⊆ I.Icc := fun k => hJ_sub k . trans I.Ioo_subset_Icc
          have hJ_le : ∀ k , J k ≤ I := fun k => box.le_iff_Icc . 2 hJ_sub' k
          have HcJ : ∀ k , ContinuousOn f J k . IccCat := fun k => Hc.mono hJ_sub' k
          have
            HdJ
              : ∀ ( k ) , ∀ x ∈ J k . IccCat \ s , HasFderivWithinAt f f' x J k . IccCat x
              :=
              fun k x hx => Hd x ⟨ hJ_sub k hx . 1 , hx . 2 ⟩ . HasFderivWithinAt
          have
            HiJ
              : ∀ k , integrable_on fun x => ∑ i , f' x e i i J k . IccCat
              :=
              fun k => Hi.mono_set hJ_sub' k
          have
            HJ_eq
              :=
              fun
                k
                  =>
                  integral_divergence_of_has_fderiv_within_at_off_countable_aux₁
                    J k f f' s hs HcJ k HdJ k HiJ k
          have
            hI_tendsto
              :
                tendsto
                  fun k => ∫ x in J k . IccCat , ∑ i , f' x e i i
                    at_top
                    𝓝 ∫ x in I.Icc , ∑ i , f' x e i i
              :=
              by
                simp
                    only
                    [ integrable_on , ← measure.restrict_congr_set box.Ioo_ae_eq_Icc _ ]
                    at Hi ⊢
                  rw [ ← box.Union_Ioo_of_tendsto J.monotone hJl hJu ] at Hi ⊢
                  exact
                    tendsto_set_integral_of_monotone
                      fun k => J k . measurable_set_Ioo box.Ioo.comp J . Monotone Hi
          refine' tendsto_nhds_unique_of_eventually_eq hI_tendsto _ eventually_of_forall HJ_eq
          clear hI_tendsto
          rw [ tendsto_pi_nhds ] at hJl hJu
          suffices
            ∀
                ( i : Fin n + 1 ) ( c : ℕ → ℝ ) ( d )
                ,
                ∀ k , c k ∈ Icc I.lower i I.upper i
                  →
                  tendsto c at_top 𝓝 d
                    →
                    tendsto
                      fun k => ∫ x in J k . face i . IccCat , f i . insertNth c k x i
                        at_top
                        𝓝 <| ∫ x in I.face i . IccCat , f i . insertNth d x i
              by
                rw [ box.Icc_eq_pi ] at hJ_sub'
                  refine'
                    tendsto_finset_sum _ fun i hi => this _ _ _ _ hJu _ . sub this _ _ _ _ hJl _
                  exacts
                    [
                    fun k => hJ_sub' k J k . upper_mem_Icc _ trivial
                      ,
                      fun k => hJ_sub' k J k . lower_mem_Icc _ trivial
                    ]
          intro i c d hc hcd
          have
            hd
              : d ∈ Icc I.lower i I.upper i
              :=
              is_closed_Icc.mem_of_tendsto hcd eventually_of_forall hc
          have
            Hic
              : ∀ k , integrable_on fun x => f i.insert_nth c k x i I.face i . IccCat
              :=
              fun
                k
                  =>
                  box.continuous_on_face_Icc continuous_apply i . comp_continuous_on Hc hc k
                    .
                    integrableOnIcc
          have
            Hid
              : integrable_on fun x => f i.insert_nth d x i I.face i . IccCat
              :=
              box.continuous_on_face_Icc continuous_apply i . comp_continuous_on Hc hd
                .
                integrableOnIcc
          have
            H
              :
                tendsto
                  fun k => ∫ x in J k . face i . IccCat , f i.insert_nth d x i
                    at_top
                    𝓝 <| ∫ x in I.face i . IccCat , f i.insert_nth d x i
              :=
              by
                have
                    hIoo
                      : ⋃ k , J k . face i . IooCat = I.face i . IooCat
                      :=
                      box.Union_Ioo_of_tendsto
                        box.monotone_face i . comp J.monotone
                          tendsto_pi_nhds . 2 fun _ => hJl _
                          tendsto_pi_nhds . 2 fun _ => hJu _
                  simp
                    only
                    [ integrable_on , ← measure.restrict_congr_set box.Ioo_ae_eq_Icc _ , ← hIoo ]
                    at Hid ⊢
                  exact
                    tendsto_set_integral_of_monotone
                      fun k => J k . face i . measurable_set_Ioo
                        box.Ioo.monotone.comp box.monotone_face i . comp J.monotone
                        Hid
          refine' H.congr_dist metric.nhds_basis_closed_ball.tendsto_right_iff . 2 fun ε εpos => _
          have
            hvol_pos
              : ∀ J : box Fin n , 0 < ∏ j , J . upper j - J . lower j
              :=
              fun J => prod_pos fun j hj => sub_pos . 2 <| J . lower_lt_upper _
          rcases
            Metric.uniform_continuous_on_iff_le . 1
              I.is_compact_Icc.uniform_continuous_on_of_continuous Hc
                ε / ∏ j , I.face i . upper j - I.face i . lower j
                div_pos εpos hvol_pos I.face i
            with ⟨ δ , δpos , hδ ⟩
          refine' hcd.eventually Metric.ball_mem_nhds _ δpos . mono fun k hk => _
          have
            Hsub
              : J k . face i . IccCat ⊆ I.face i . IccCat
              :=
              box.le_iff_Icc . 1 box.face_mono hJ_le _ i
          rw
            [
              mem_closed_ball_zero_iff
                ,
                Real.norm_eq_abs
                ,
                abs_of_nonneg dist_nonneg
                ,
                dist_eq_norm
                ,
                ← integral_sub Hid.mono_set Hsub Hic _ . monoSet Hsub
              ]
          calc
            ‖ ∫ x in J k . face i . IccCat , f i.insert_nth d x i - f i.insert_nth c k x i ‖
                ≤
                ε / ∏ j , I.face i . upper j - I.face i . lower j
                  *
                  volume J k . face i . IccCat . toReal
              :=
              by
                refine'
                    norm_set_integral_le_of_norm_le_const'
                      J k . face i . measure_Icc_lt_top _
                        J k . face i . measurable_set_Icc
                        fun x hx => _
                  rw [ ← dist_eq_norm ]
                  calc
                    dist f i.insert_nth d x i f i.insert_nth c k x i
                        ≤
                        dist f i.insert_nth d x f i.insert_nth c k x
                      :=
                      dist_le_pi_dist f i.insert_nth d x f i.insert_nth c k x i
                    _ ≤ ε / ∏ j , I.face i . upper j - I.face i . lower j
                      :=
                      hδ
                        _
                          I.maps_to_insert_nth_face_Icc hd <| Hsub hx
                          _
                          I.maps_to_insert_nth_face_Icc hc _ <| Hsub hx
                          _
                  rw [ Fin.dist_insert_nth_insert_nth , dist_self , dist_comm ]
                  exact max_le hk.le δpos.lt.le
            _ ≤ ε
              :=
              by
                rw
                    [
                      box.Icc_def
                        ,
                        Real.volume_Icc_pi_to_real J k . face i . lower_le_upper
                        ,
                        ← le_div_iff hvol_pos _
                      ]
                  refine'
                    div_le_div_of_le_left
                      εpos.le hvol_pos _ prod_le_prod fun j hj => _ fun j hj => _
                  exacts
                    [
                    sub_nonneg . 2 box.lower_le_upper _ _
                      ,
                      sub_le_sub
                        hJ_sub' _ J _ . upper_mem_Icc . 2 _ hJ_sub' _ J _ . lower_mem_Icc . 1 _
                    ]
#align
  measure_theory.integral_divergence_of_has_fderiv_within_at_off_countable_aux₂ MeasureTheory.integral_divergence_of_has_fderiv_within_at_off_countable_aux₂

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.variable
     "variable"
     [(Term.explicitBinder
       "("
       [`a `b]
       [":" (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")]
       []
       ")")])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹»', expected 'MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termℝⁿ⁺¹._@.MeasureTheory.Integral.DivergenceTheorem._hyg.51'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'-/-- failed to format: format: uncaught backtrack exception
variable ( a b : ℝⁿ⁺¹ )

-- mathport name: «exprface »
local notation "face " i => Set.Icc (a ∘ Fin.succAbove i) (b ∘ Fin.succAbove i)

-- mathport name: «exprfront_face »
local notation "front_face " i:2000 => Fin.insertNth i (b i)

-- mathport name: «exprback_face »
local notation "back_face " i:2000 => Fin.insertNth i (a i)

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "**Divergence theorem** for Bochner integral. If `f : ℝⁿ⁺¹ → Eⁿ⁺¹` is continuous on a rectangular\nbox `[a, b] : set ℝⁿ⁺¹`, `a ≤ b`, is differentiable on its interior with derivative\n`f' : ℝⁿ⁺¹ → ℝⁿ⁺¹ →L[ℝ] Eⁿ⁺¹` and the divergence `λ x, ∑ i, f' x eᵢ i` is integrable on `[a, b]`,\nwhere `eᵢ = pi.single i 1` is the `i`-th basis vector, then its integral is equal to the sum of\nintegrals of `f` over the faces of `[a, b]`, taken with appropriat signs.\n\nMoreover, the same is true if the function is not differentiable at countably many\npoints of the interior of `[a, b]`.\n\nWe represent both faces `x i = a i` and `x i = b i` as the box\n`face i = [a ∘ fin.succ_above i, b ∘ fin.succ_above i]` in `ℝⁿ`, where\n`fin.succ_above : fin n ↪o fin (n + 1)` is the order embedding with range `{i}ᶜ`. The restrictions\nof `f : ℝⁿ⁺¹ → Eⁿ⁺¹` to these faces are given by `f ∘ back_face i` and `f ∘ front_face i`, where\n`back_face i = fin.insert_nth i (a i)` and `front_face i = fin.insert_nth i (b i)` are embeddings\n`ℝⁿ → ℝⁿ⁺¹` that take `y : ℝⁿ` and insert `a i` (resp., `b i`) as `i`-th coordinate. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `integral_divergence_of_has_fderiv_within_at_off_countable [])
      (Command.declSig
       [(Term.explicitBinder "(" [`hle] [":" («term_≤_» `a "≤" `b)] [] ")")
        (Term.explicitBinder
         "("
         [`f]
         [":"
          (Term.arrow
           (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")
           "→"
           (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termEⁿ⁺¹» "Eⁿ⁺¹"))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`f']
         [":"
          (Term.arrow
           (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")
           "→"
           (Topology.Algebra.Module.Basic.«term_→L[_]_»
            (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")
            " →L["
            (Data.Real.Basic.termℝ "ℝ")
            "] "
            (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termEⁿ⁺¹» "Eⁿ⁺¹")))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`s]
         [":"
          (Term.app
           `Set
           [(MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")])]
         []
         ")")
        (Term.explicitBinder "(" [`hs] [":" (Term.proj `s "." `Countable)] [] ")")
        (Term.explicitBinder
         "("
         [`Hc]
         [":" (Term.app `ContinuousOn [`f (Term.app `icc [`a `b])])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`Hd]
         [":"
          (Std.ExtendedBinder.«term∀__,_»
           "∀"
           (Lean.binderIdent `x)
           («binderTerm∈_»
            "∈"
            («term_\_»
             (Term.app
              `Set.pi
              [`univ
               (Term.fun
                "fun"
                (Term.basicFun
                 [`i]
                 []
                 "=>"
                 (Term.app `ioo [(Term.app `a [`i]) (Term.app `b [`i])])))])
             "\\"
             `s))
           ","
           (Term.app `HasFderivAt [`f (Term.app `f' [`x]) `x]))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`Hi]
         [":"
          (Term.app
           `IntegrableOn
           [(Term.fun
             "fun"
             (Term.basicFun
              [`x]
              []
              "=>"
              (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
               "∑"
               (Std.ExtendedBinder.extBinders
                (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
               ", "
               (Term.app
                `f'
                [`x (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i) `i]))))
            (Term.app `icc [`a `b])])]
         []
         ")")]
       (Term.typeSpec
        ":"
        («term_=_»
         (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
          "∫"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
          " in "
          (Term.app `icc [`a `b])
          ", "
          (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
           "∑"
           (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
           ", "
           (Term.app
            `f'
            [`x (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i) `i])))
         "="
         (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
          "∑"
          (Std.ExtendedBinder.extBinders
           (Std.ExtendedBinder.extBinder
            (Lean.binderIdent `i)
            [(group ":" (Term.app `Fin [(«term_+_» `n "+" (num "1"))]))]))
          ", "
          («term_-_»
           (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
            "∫"
            (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
            " in "
            (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termface_ "face " `i)
            ", "
            (Term.app
             `f
             [(Term.app
               (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termfront_face_
                "front_face "
                `i)
               [`x])
              `i]))
           "-"
           (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
            "∫"
            (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
            " in "
            (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termface_ "face " `i)
            ", "
            (Term.app
             `f
             [(Term.app
               (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termback_face_
                "back_face "
                `i)
               [`x])
              `i])))))))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Std.Tactic.rcases
            "rcases"
            [(Tactic.casesTarget
              []
              (Term.app
               `em
               [(«term∃_,_»
                 "∃"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                 ","
                 («term_=_» (Term.app `a [`i]) "=" (Term.app `b [`i])))]))]
            ["with"
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed
               [(Std.Tactic.RCases.rcasesPat.paren
                 "("
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed
                   [(Std.Tactic.RCases.rcasesPat.tuple
                     "⟨"
                     [(Std.Tactic.RCases.rcasesPatLo
                       (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `i)])
                       [])
                      ","
                      (Std.Tactic.RCases.rcasesPatLo
                       (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hi)])
                       [])]
                     "⟩")
                    "|"
                    (Std.Tactic.RCases.rcasesPat.one `hne)])
                  [])
                 ")")])
              [])])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.simp
              "simp"
              []
              []
              ["only"]
              ["["
               [(Tactic.simpLemma [] [] `volume_pi)
                ","
                (Tactic.simpLemma
                 []
                 [(patternIgnore (token.«← » "←"))]
                 (Term.app `set_integral_congr_set_ae [`measure.univ_pi_Ioc_ae_eq_Icc]))]
               "]"]
              [])
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`hi' []]
                [(Term.typeSpec
                  ":"
                  («term_=_»
                   (Term.app `Ioc [(Term.app `a [`i]) (Term.app `b [`i])])
                   "="
                   («term∅» "∅")))]
                ":="
                (Term.app `Ioc_eq_empty [`hi.not_lt]))))
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                [(Term.typeSpec
                  ":"
                  («term_=_»
                   (Term.app
                    `pi
                    [`Set.univ
                     (Term.fun
                      "fun"
                      (Term.basicFun
                       [`j]
                       []
                       "=>"
                       (Term.app `Ioc [(Term.app `a [`j]) (Term.app `b [`j])])))])
                   "="
                   («term∅» "∅")))]
                ":="
                (Term.app `univ_pi_eq_empty [`hi']))))
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `this)
                ","
                (Tactic.rwRule [] `integral_empty)
                ","
                (Tactic.rwRule [] `sum_eq_zero)]
               "]")
              [])
             []
             (Std.Tactic.rintro
              "rintro"
              [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `j))
               (Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.clear "-"))]
              [])
             []
             (Std.Tactic.rcases
              "rcases"
              [(Tactic.casesTarget [] (Term.app `eq_or_ne [`i `j]))]
              ["with"
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed
                 [(Std.Tactic.RCases.rcasesPat.paren
                   "("
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed
                     [(Std.Tactic.RCases.rcasesPat.one `rfl)
                      "|"
                      (Std.Tactic.RCases.rcasesPat.one `hne)])
                    [])
                   ")")])
                [])])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.simp "simp" [] [] [] ["[" [(Tactic.simpLemma [] [] `hi)] "]"] [])])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Std.Tactic.rcases
                "rcases"
                [(Tactic.casesTarget [] (Term.app `Fin.exists_succ_above_eq [`hne]))]
                ["with"
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed
                   [(Std.Tactic.RCases.rcasesPat.tuple
                     "⟨"
                     [(Std.Tactic.RCases.rcasesPatLo
                       (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `i)])
                       [])
                      ","
                      (Std.Tactic.RCases.rcasesPatLo
                       (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                       [])]
                     "⟩")])
                  [])])
               []
               (Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  []
                  [(Term.typeSpec
                    ":"
                    («term_=_»
                     (Term.app
                      `pi
                      [`Set.univ
                       (Term.fun
                        "fun"
                        (Term.basicFun
                         [`k]
                         [(Term.typeSpec ":" (Term.app `Fin [`n]))]
                         "=>"
                         (Term.app
                          `Ioc
                          [(«term_<|_» `a "<|" (Term.app `j.succ_above [`k]))
                           («term_<|_» `b "<|" (Term.app `j.succ_above [`k]))])))])
                     "="
                     («term∅» "∅")))]
                  ":="
                  (Term.app `univ_pi_eq_empty [`hi']))))
               []
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] `this)
                  ","
                  (Tactic.rwRule [] `integral_empty)
                  ","
                  (Tactic.rwRule [] `integral_empty)
                  ","
                  (Tactic.rwRule [] `sub_self)]
                 "]")
                [])])])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`hlt []]
                [(Term.typeSpec
                  ":"
                  (Term.forall
                   "∀"
                   [`i]
                   []
                   ","
                   («term_<_» (Term.app `a [`i]) "<" (Term.app `b [`i]))))]
                ":="
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [`i]
                  []
                  "=>"
                  (Term.app
                   (Term.proj (Term.app `hle [`i]) "." `lt_of_ne)
                   [(Term.fun
                     "fun"
                     (Term.basicFun
                      [`hi]
                      []
                      "=>"
                      (Term.app `hne [(Term.anonymousCtor "⟨" [`i "," `hi] "⟩")])))]))))))
             []
             (convert
              "convert"
              []
              (Term.app
               `integral_divergence_of_has_fderiv_within_at_off_countable_aux₂
               [(Term.anonymousCtor "⟨" [`a "," `b "," `hlt] "⟩") `f `f' `s `hs `Hc `Hd `Hi])
              [])])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Std.Tactic.rcases
           "rcases"
           [(Tactic.casesTarget
             []
             (Term.app
              `em
              [(«term∃_,_»
                "∃"
                (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                ","
                («term_=_» (Term.app `a [`i]) "=" (Term.app `b [`i])))]))]
           ["with"
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.paren
                "("
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed
                  [(Std.Tactic.RCases.rcasesPat.tuple
                    "⟨"
                    [(Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `i)])
                      [])
                     ","
                     (Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hi)])
                      [])]
                    "⟩")
                   "|"
                   (Std.Tactic.RCases.rcasesPat.one `hne)])
                 [])
                ")")])
             [])])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.simp
             "simp"
             []
             []
             ["only"]
             ["["
              [(Tactic.simpLemma [] [] `volume_pi)
               ","
               (Tactic.simpLemma
                []
                [(patternIgnore (token.«← » "←"))]
                (Term.app `set_integral_congr_set_ae [`measure.univ_pi_Ioc_ae_eq_Icc]))]
              "]"]
             [])
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`hi' []]
               [(Term.typeSpec
                 ":"
                 («term_=_»
                  (Term.app `Ioc [(Term.app `a [`i]) (Term.app `b [`i])])
                  "="
                  («term∅» "∅")))]
               ":="
               (Term.app `Ioc_eq_empty [`hi.not_lt]))))
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec
                 ":"
                 («term_=_»
                  (Term.app
                   `pi
                   [`Set.univ
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [`j]
                      []
                      "=>"
                      (Term.app `Ioc [(Term.app `a [`j]) (Term.app `b [`j])])))])
                  "="
                  («term∅» "∅")))]
               ":="
               (Term.app `univ_pi_eq_empty [`hi']))))
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `this)
               ","
               (Tactic.rwRule [] `integral_empty)
               ","
               (Tactic.rwRule [] `sum_eq_zero)]
              "]")
             [])
            []
            (Std.Tactic.rintro
             "rintro"
             [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `j))
              (Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.clear "-"))]
             [])
            []
            (Std.Tactic.rcases
             "rcases"
             [(Tactic.casesTarget [] (Term.app `eq_or_ne [`i `j]))]
             ["with"
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed
                [(Std.Tactic.RCases.rcasesPat.paren
                  "("
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed
                    [(Std.Tactic.RCases.rcasesPat.one `rfl)
                     "|"
                     (Std.Tactic.RCases.rcasesPat.one `hne)])
                   [])
                  ")")])
               [])])
            []
            (tactic__
             (cdotTk (patternIgnore (token.«· » "·")))
             [(Tactic.simp "simp" [] [] [] ["[" [(Tactic.simpLemma [] [] `hi)] "]"] [])])
            []
            (tactic__
             (cdotTk (patternIgnore (token.«· » "·")))
             [(Std.Tactic.rcases
               "rcases"
               [(Tactic.casesTarget [] (Term.app `Fin.exists_succ_above_eq [`hne]))]
               ["with"
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed
                  [(Std.Tactic.RCases.rcasesPat.tuple
                    "⟨"
                    [(Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `i)])
                      [])
                     ","
                     (Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                      [])]
                    "⟩")])
                 [])])
              []
              (Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 []
                 [(Term.typeSpec
                   ":"
                   («term_=_»
                    (Term.app
                     `pi
                     [`Set.univ
                      (Term.fun
                       "fun"
                       (Term.basicFun
                        [`k]
                        [(Term.typeSpec ":" (Term.app `Fin [`n]))]
                        "=>"
                        (Term.app
                         `Ioc
                         [(«term_<|_» `a "<|" (Term.app `j.succ_above [`k]))
                          («term_<|_» `b "<|" (Term.app `j.succ_above [`k]))])))])
                    "="
                    («term∅» "∅")))]
                 ":="
                 (Term.app `univ_pi_eq_empty [`hi']))))
              []
              (Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule [] `this)
                 ","
                 (Tactic.rwRule [] `integral_empty)
                 ","
                 (Tactic.rwRule [] `integral_empty)
                 ","
                 (Tactic.rwRule [] `sub_self)]
                "]")
               [])])])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`hlt []]
               [(Term.typeSpec
                 ":"
                 (Term.forall
                  "∀"
                  [`i]
                  []
                  ","
                  («term_<_» (Term.app `a [`i]) "<" (Term.app `b [`i]))))]
               ":="
               (Term.fun
                "fun"
                (Term.basicFun
                 [`i]
                 []
                 "=>"
                 (Term.app
                  (Term.proj (Term.app `hle [`i]) "." `lt_of_ne)
                  [(Term.fun
                    "fun"
                    (Term.basicFun
                     [`hi]
                     []
                     "=>"
                     (Term.app `hne [(Term.anonymousCtor "⟨" [`i "," `hi] "⟩")])))]))))))
            []
            (convert
             "convert"
             []
             (Term.app
              `integral_divergence_of_has_fderiv_within_at_off_countable_aux₂
              [(Term.anonymousCtor "⟨" [`a "," `b "," `hlt] "⟩") `f `f' `s `hs `Hc `Hd `Hi])
             [])])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hlt []]
           [(Term.typeSpec
             ":"
             (Term.forall "∀" [`i] [] "," («term_<_» (Term.app `a [`i]) "<" (Term.app `b [`i]))))]
           ":="
           (Term.fun
            "fun"
            (Term.basicFun
             [`i]
             []
             "=>"
             (Term.app
              (Term.proj (Term.app `hle [`i]) "." `lt_of_ne)
              [(Term.fun
                "fun"
                (Term.basicFun
                 [`hi]
                 []
                 "=>"
                 (Term.app `hne [(Term.anonymousCtor "⟨" [`i "," `hi] "⟩")])))]))))))
        []
        (convert
         "convert"
         []
         (Term.app
          `integral_divergence_of_has_fderiv_within_at_off_countable_aux₂
          [(Term.anonymousCtor "⟨" [`a "," `b "," `hlt] "⟩") `f `f' `s `hs `Hc `Hd `Hi])
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (convert
       "convert"
       []
       (Term.app
        `integral_divergence_of_has_fderiv_within_at_off_countable_aux₂
        [(Term.anonymousCtor "⟨" [`a "," `b "," `hlt] "⟩") `f `f' `s `hs `Hc `Hd `Hi])
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `integral_divergence_of_has_fderiv_within_at_off_countable_aux₂
       [(Term.anonymousCtor "⟨" [`a "," `b "," `hlt] "⟩") `f `f' `s `hs `Hc `Hd `Hi])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Hi
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `Hd
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `Hc
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hs
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `s
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `f'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.anonymousCtor "⟨" [`a "," `b "," `hlt] "⟩")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hlt
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `a
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `integral_divergence_of_has_fderiv_within_at_off_countable_aux₂
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hlt []]
         [(Term.typeSpec
           ":"
           (Term.forall "∀" [`i] [] "," («term_<_» (Term.app `a [`i]) "<" (Term.app `b [`i]))))]
         ":="
         (Term.fun
          "fun"
          (Term.basicFun
           [`i]
           []
           "=>"
           (Term.app
            (Term.proj (Term.app `hle [`i]) "." `lt_of_ne)
            [(Term.fun
              "fun"
              (Term.basicFun
               [`hi]
               []
               "=>"
               (Term.app `hne [(Term.anonymousCtor "⟨" [`i "," `hi] "⟩")])))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`i]
        []
        "=>"
        (Term.app
         (Term.proj (Term.app `hle [`i]) "." `lt_of_ne)
         [(Term.fun
           "fun"
           (Term.basicFun
            [`hi]
            []
            "=>"
            (Term.app `hne [(Term.anonymousCtor "⟨" [`i "," `hi] "⟩")])))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `hle [`i]) "." `lt_of_ne)
       [(Term.fun
         "fun"
         (Term.basicFun
          [`hi]
          []
          "=>"
          (Term.app `hne [(Term.anonymousCtor "⟨" [`i "," `hi] "⟩")])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun [`hi] [] "=>" (Term.app `hne [(Term.anonymousCtor "⟨" [`i "," `hi] "⟩")])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hne [(Term.anonymousCtor "⟨" [`i "," `hi] "⟩")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor "⟨" [`i "," `hi] "⟩")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hi
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hne
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `hle [`i]) "." `lt_of_ne)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `hle [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hle
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `hle [`i]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall "∀" [`i] [] "," («term_<_» (Term.app `a [`i]) "<" (Term.app `b [`i])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<_» (Term.app `a [`i]) "<" (Term.app `b [`i]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `b [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `b
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `a [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.simp
         "simp"
         []
         []
         ["only"]
         ["["
          [(Tactic.simpLemma [] [] `volume_pi)
           ","
           (Tactic.simpLemma
            []
            [(patternIgnore (token.«← » "←"))]
            (Term.app `set_integral_congr_set_ae [`measure.univ_pi_Ioc_ae_eq_Icc]))]
          "]"]
         [])
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hi' []]
           [(Term.typeSpec
             ":"
             («term_=_» (Term.app `Ioc [(Term.app `a [`i]) (Term.app `b [`i])]) "=" («term∅» "∅")))]
           ":="
           (Term.app `Ioc_eq_empty [`hi.not_lt]))))
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec
             ":"
             («term_=_»
              (Term.app
               `pi
               [`Set.univ
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [`j]
                  []
                  "=>"
                  (Term.app `Ioc [(Term.app `a [`j]) (Term.app `b [`j])])))])
              "="
              («term∅» "∅")))]
           ":="
           (Term.app `univ_pi_eq_empty [`hi']))))
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `this)
           ","
           (Tactic.rwRule [] `integral_empty)
           ","
           (Tactic.rwRule [] `sum_eq_zero)]
          "]")
         [])
        []
        (Std.Tactic.rintro
         "rintro"
         [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `j))
          (Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.clear "-"))]
         [])
        []
        (Std.Tactic.rcases
         "rcases"
         [(Tactic.casesTarget [] (Term.app `eq_or_ne [`i `j]))]
         ["with"
          (Std.Tactic.RCases.rcasesPatLo
           (Std.Tactic.RCases.rcasesPatMed
            [(Std.Tactic.RCases.rcasesPat.paren
              "("
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed
                [(Std.Tactic.RCases.rcasesPat.one `rfl) "|" (Std.Tactic.RCases.rcasesPat.one `hne)])
               [])
              ")")])
           [])])
        []
        (tactic__
         (cdotTk (patternIgnore (token.«· » "·")))
         [(Tactic.simp "simp" [] [] [] ["[" [(Tactic.simpLemma [] [] `hi)] "]"] [])])
        []
        (tactic__
         (cdotTk (patternIgnore (token.«· » "·")))
         [(Std.Tactic.rcases
           "rcases"
           [(Tactic.casesTarget [] (Term.app `Fin.exists_succ_above_eq [`hne]))]
           ["with"
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "⟨"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `i)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                  [])]
                "⟩")])
             [])])
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               («term_=_»
                (Term.app
                 `pi
                 [`Set.univ
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [`k]
                    [(Term.typeSpec ":" (Term.app `Fin [`n]))]
                    "=>"
                    (Term.app
                     `Ioc
                     [(«term_<|_» `a "<|" (Term.app `j.succ_above [`k]))
                      («term_<|_» `b "<|" (Term.app `j.succ_above [`k]))])))])
                "="
                («term∅» "∅")))]
             ":="
             (Term.app `univ_pi_eq_empty [`hi']))))
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `this)
             ","
             (Tactic.rwRule [] `integral_empty)
             ","
             (Tactic.rwRule [] `integral_empty)
             ","
             (Tactic.rwRule [] `sub_self)]
            "]")
           [])])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Std.Tactic.rcases
         "rcases"
         [(Tactic.casesTarget [] (Term.app `Fin.exists_succ_above_eq [`hne]))]
         ["with"
          (Std.Tactic.RCases.rcasesPatLo
           (Std.Tactic.RCases.rcasesPatMed
            [(Std.Tactic.RCases.rcasesPat.tuple
              "⟨"
              [(Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `i)])
                [])
               ","
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                [])]
              "⟩")])
           [])])
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec
             ":"
             («term_=_»
              (Term.app
               `pi
               [`Set.univ
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [`k]
                  [(Term.typeSpec ":" (Term.app `Fin [`n]))]
                  "=>"
                  (Term.app
                   `Ioc
                   [(«term_<|_» `a "<|" (Term.app `j.succ_above [`k]))
                    («term_<|_» `b "<|" (Term.app `j.succ_above [`k]))])))])
              "="
              («term∅» "∅")))]
           ":="
           (Term.app `univ_pi_eq_empty [`hi']))))
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `this)
           ","
           (Tactic.rwRule [] `integral_empty)
           ","
           (Tactic.rwRule [] `integral_empty)
           ","
           (Tactic.rwRule [] `sub_self)]
          "]")
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `this)
         ","
         (Tactic.rwRule [] `integral_empty)
         ","
         (Tactic.rwRule [] `integral_empty)
         ","
         (Tactic.rwRule [] `sub_self)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `sub_self
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `integral_empty
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `integral_empty
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `this
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           («term_=_»
            (Term.app
             `pi
             [`Set.univ
              (Term.fun
               "fun"
               (Term.basicFun
                [`k]
                [(Term.typeSpec ":" (Term.app `Fin [`n]))]
                "=>"
                (Term.app
                 `Ioc
                 [(«term_<|_» `a "<|" (Term.app `j.succ_above [`k]))
                  («term_<|_» `b "<|" (Term.app `j.succ_above [`k]))])))])
            "="
            («term∅» "∅")))]
         ":="
         (Term.app `univ_pi_eq_empty [`hi']))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `univ_pi_eq_empty [`hi'])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hi'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `univ_pi_eq_empty
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_»
       (Term.app
        `pi
        [`Set.univ
         (Term.fun
          "fun"
          (Term.basicFun
           [`k]
           [(Term.typeSpec ":" (Term.app `Fin [`n]))]
           "=>"
           (Term.app
            `Ioc
            [(«term_<|_» `a "<|" (Term.app `j.succ_above [`k]))
             («term_<|_» `b "<|" (Term.app `j.succ_above [`k]))])))])
       "="
       («term∅» "∅"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term∅» "∅")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app
       `pi
       [`Set.univ
        (Term.fun
         "fun"
         (Term.basicFun
          [`k]
          [(Term.typeSpec ":" (Term.app `Fin [`n]))]
          "=>"
          (Term.app
           `Ioc
           [(«term_<|_» `a "<|" (Term.app `j.succ_above [`k]))
            («term_<|_» `b "<|" (Term.app `j.succ_above [`k]))])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`k]
        [(Term.typeSpec ":" (Term.app `Fin [`n]))]
        "=>"
        (Term.app
         `Ioc
         [(«term_<|_» `a "<|" (Term.app `j.succ_above [`k]))
          («term_<|_» `b "<|" (Term.app `j.succ_above [`k]))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Ioc
       [(«term_<|_» `a "<|" (Term.app `j.succ_above [`k]))
        («term_<|_» `b "<|" (Term.app `j.succ_above [`k]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_» `b "<|" (Term.app `j.succ_above [`k]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `j.succ_above [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `j.succ_above
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      `b
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_<|_» `b "<|" (Term.app `j.succ_above [`k]))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      («term_<|_» `a "<|" (Term.app `j.succ_above [`k]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `j.succ_above [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `j.succ_above
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 10, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_<|_» `a "<|" (Term.app `j.succ_above [`k]))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ioc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Fin [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Fin
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `Set.univ
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `pi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `pi
      [`Set.univ
       (Term.fun
        "fun"
        (Term.basicFun
         [`k]
         [(Term.typeSpec ":" (Term.app `Fin [`n]))]
         "=>"
         (Term.app
          `Ioc
          [(Term.paren "(" («term_<|_» `a "<|" (Term.app `j.succ_above [`k])) ")")
           (Term.paren "(" («term_<|_» `b "<|" (Term.app `j.succ_above [`k])) ")")])))])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rcases
       "rcases"
       [(Tactic.casesTarget [] (Term.app `Fin.exists_succ_above_eq [`hne]))]
       ["with"
        (Std.Tactic.RCases.rcasesPatLo
         (Std.Tactic.RCases.rcasesPatMed
          [(Std.Tactic.RCases.rcasesPat.tuple
            "⟨"
            [(Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `i)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
              [])]
            "⟩")])
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Fin.exists_succ_above_eq [`hne])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hne
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Fin.exists_succ_above_eq
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.simp "simp" [] [] [] ["[" [(Tactic.simpLemma [] [] `hi)] "]"] [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp "simp" [] [] [] ["[" [(Tactic.simpLemma [] [] `hi)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hi
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rcases
       "rcases"
       [(Tactic.casesTarget [] (Term.app `eq_or_ne [`i `j]))]
       ["with"
        (Std.Tactic.RCases.rcasesPatLo
         (Std.Tactic.RCases.rcasesPatMed
          [(Std.Tactic.RCases.rcasesPat.paren
            "("
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.one `rfl) "|" (Std.Tactic.RCases.rcasesPat.one `hne)])
             [])
            ")")])
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `eq_or_ne [`i `j])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `j
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `eq_or_ne
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rintro
       "rintro"
       [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `j))
        (Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.clear "-"))]
       [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `this)
         ","
         (Tactic.rwRule [] `integral_empty)
         ","
         (Tactic.rwRule [] `sum_eq_zero)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `sum_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `integral_empty
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `this
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           («term_=_»
            (Term.app
             `pi
             [`Set.univ
              (Term.fun
               "fun"
               (Term.basicFun
                [`j]
                []
                "=>"
                (Term.app `Ioc [(Term.app `a [`j]) (Term.app `b [`j])])))])
            "="
            («term∅» "∅")))]
         ":="
         (Term.app `univ_pi_eq_empty [`hi']))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `univ_pi_eq_empty [`hi'])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hi'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `univ_pi_eq_empty
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_»
       (Term.app
        `pi
        [`Set.univ
         (Term.fun
          "fun"
          (Term.basicFun [`j] [] "=>" (Term.app `Ioc [(Term.app `a [`j]) (Term.app `b [`j])])))])
       "="
       («term∅» "∅"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term∅» "∅")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app
       `pi
       [`Set.univ
        (Term.fun
         "fun"
         (Term.basicFun [`j] [] "=>" (Term.app `Ioc [(Term.app `a [`j]) (Term.app `b [`j])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun [`j] [] "=>" (Term.app `Ioc [(Term.app `a [`j]) (Term.app `b [`j])])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Ioc [(Term.app `a [`j]) (Term.app `b [`j])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `b [`j])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `j
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `b
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `b [`j]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `a [`j])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `j
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `a [`j]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ioc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `j
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `Set.univ
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `pi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `pi
      [`Set.univ
       (Term.fun
        "fun"
        (Term.basicFun
         [`j]
         []
         "=>"
         (Term.app
          `Ioc
          [(Term.paren "(" (Term.app `a [`j]) ")") (Term.paren "(" (Term.app `b [`j]) ")")])))])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hi' []]
         [(Term.typeSpec
           ":"
           («term_=_» (Term.app `Ioc [(Term.app `a [`i]) (Term.app `b [`i])]) "=" («term∅» "∅")))]
         ":="
         (Term.app `Ioc_eq_empty [`hi.not_lt]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Ioc_eq_empty [`hi.not_lt])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hi.not_lt
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ioc_eq_empty
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `Ioc [(Term.app `a [`i]) (Term.app `b [`i])]) "=" («term∅» "∅"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term∅» "∅")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `Ioc [(Term.app `a [`i]) (Term.app `b [`i])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `b [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `b
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `b [`i]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `a [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `a [`i]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ioc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       ["only"]
       ["["
        [(Tactic.simpLemma [] [] `volume_pi)
         ","
         (Tactic.simpLemma
          []
          [(patternIgnore (token.«← » "←"))]
          (Term.app `set_integral_congr_set_ae [`measure.univ_pi_Ioc_ae_eq_Icc]))]
        "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `set_integral_congr_set_ae [`measure.univ_pi_Ioc_ae_eq_Icc])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `measure.univ_pi_Ioc_ae_eq_Icc
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `set_integral_congr_set_ae
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `volume_pi
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rcases
       "rcases"
       [(Tactic.casesTarget
         []
         (Term.app
          `em
          [(«term∃_,_»
            "∃"
            (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
            ","
            («term_=_» (Term.app `a [`i]) "=" (Term.app `b [`i])))]))]
       ["with"
        (Std.Tactic.RCases.rcasesPatLo
         (Std.Tactic.RCases.rcasesPatMed
          [(Std.Tactic.RCases.rcasesPat.paren
            "("
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "⟨"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `i)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hi)])
                  [])]
                "⟩")
               "|"
               (Std.Tactic.RCases.rcasesPat.one `hne)])
             [])
            ")")])
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `em
       [(«term∃_,_»
         "∃"
         (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
         ","
         («term_=_» (Term.app `a [`i]) "=" (Term.app `b [`i])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term∃_,_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term∃_,_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term∃_,_»
       "∃"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
       ","
       («term_=_» (Term.app `a [`i]) "=" (Term.app `b [`i])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `a [`i]) "=" (Term.app `b [`i]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `b [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `b
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `a [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'Lean.bracketedExplicitBinders'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term∃_,_»
      "∃"
      (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
      ","
      («term_=_» (Term.app `a [`i]) "=" (Term.app `b [`i])))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `em
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      («term_=_»
       (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
        "∫"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
        " in "
        (Term.app `icc [`a `b])
        ", "
        (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
         "∑"
         (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
         ", "
         (Term.app
          `f'
          [`x (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i) `i])))
       "="
       (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
        "∑"
        (Std.ExtendedBinder.extBinders
         (Std.ExtendedBinder.extBinder
          (Lean.binderIdent `i)
          [(group ":" (Term.app `Fin [(«term_+_» `n "+" (num "1"))]))]))
        ", "
        («term_-_»
         (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
          "∫"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
          " in "
          (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termface_ "face " `i)
          ", "
          (Term.app
           `f
           [(Term.app
             (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termfront_face_
              "front_face "
              `i)
             [`x])
            `i]))
         "-"
         (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
          "∫"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
          " in "
          (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termface_ "face " `i)
          ", "
          (Term.app
           `f
           [(Term.app
             (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termback_face_ "back_face " `i)
             [`x])
            `i])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
       "∑"
       (Std.ExtendedBinder.extBinders
        (Std.ExtendedBinder.extBinder
         (Lean.binderIdent `i)
         [(group ":" (Term.app `Fin [(«term_+_» `n "+" (num "1"))]))]))
       ", "
       («term_-_»
        (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
         "∫"
         (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
         " in "
         (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termface_ "face " `i)
         ", "
         (Term.app
          `f
          [(Term.app
            (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termfront_face_
             "front_face "
             `i)
            [`x])
           `i]))
        "-"
        (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
         "∫"
         (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
         " in "
         (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termface_ "face " `i)
         ", "
         (Term.app
          `f
          [(Term.app
            (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termback_face_ "back_face " `i)
            [`x])
           `i]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_-_»
       (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
        "∫"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
        " in "
        (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termface_ "face " `i)
        ", "
        (Term.app
         `f
         [(Term.app
           (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termfront_face_ "front_face " `i)
           [`x])
          `i]))
       "-"
       (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
        "∫"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
        " in "
        (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termface_ "face " `i)
        ", "
        (Term.app
         `f
         [(Term.app
           (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termback_face_ "back_face " `i)
           [`x])
          `i])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
       "∫"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
       " in "
       (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termface_ "face " `i)
       ", "
       (Term.app
        `f
        [(Term.app
          (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termback_face_ "back_face " `i)
          [`x])
         `i]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `f
       [(Term.app
         (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termback_face_ "back_face " `i)
         [`x])
        `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termback_face_ "back_face " `i)
       [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termback_face_ "back_face " `i)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termback_face_', expected 'MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termback_face_._@.MeasureTheory.Integral.DivergenceTheorem._hyg.782'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    **Divergence theorem** for Bochner integral. If `f : ℝⁿ⁺¹ → Eⁿ⁺¹` is continuous on a rectangular
    box `[a, b] : set ℝⁿ⁺¹`, `a ≤ b`, is differentiable on its interior with derivative
    `f' : ℝⁿ⁺¹ → ℝⁿ⁺¹ →L[ℝ] Eⁿ⁺¹` and the divergence `λ x, ∑ i, f' x eᵢ i` is integrable on `[a, b]`,
    where `eᵢ = pi.single i 1` is the `i`-th basis vector, then its integral is equal to the sum of
    integrals of `f` over the faces of `[a, b]`, taken with appropriat signs.
    
    Moreover, the same is true if the function is not differentiable at countably many
    points of the interior of `[a, b]`.
    
    We represent both faces `x i = a i` and `x i = b i` as the box
    `face i = [a ∘ fin.succ_above i, b ∘ fin.succ_above i]` in `ℝⁿ`, where
    `fin.succ_above : fin n ↪o fin (n + 1)` is the order embedding with range `{i}ᶜ`. The restrictions
    of `f : ℝⁿ⁺¹ → Eⁿ⁺¹` to these faces are given by `f ∘ back_face i` and `f ∘ front_face i`, where
    `back_face i = fin.insert_nth i (a i)` and `front_face i = fin.insert_nth i (b i)` are embeddings
    `ℝⁿ → ℝⁿ⁺¹` that take `y : ℝⁿ` and insert `a i` (resp., `b i`) as `i`-th coordinate. -/
  theorem
    integral_divergence_of_has_fderiv_within_at_off_countable
    ( hle : a ≤ b )
        ( f : ℝⁿ⁺¹ → Eⁿ⁺¹ )
        ( f' : ℝⁿ⁺¹ → ℝⁿ⁺¹ →L[ ℝ ] Eⁿ⁺¹ )
        ( s : Set ℝⁿ⁺¹ )
        ( hs : s . Countable )
        ( Hc : ContinuousOn f icc a b )
        ( Hd : ∀ x ∈ Set.pi univ fun i => ioo a i b i \ s , HasFderivAt f f' x x )
        ( Hi : IntegrableOn fun x => ∑ i , f' x e i i icc a b )
      :
        ∫ x in icc a b , ∑ i , f' x e i i
          =
          ∑ i : Fin n + 1 , ∫ x in face i , f front_face i x i - ∫ x in face i , f back_face i x i
    :=
      by
        rcases em ∃ i , a i = b i with ( ⟨ i , hi ⟩ | hne )
          ·
            simp only [ volume_pi , ← set_integral_congr_set_ae measure.univ_pi_Ioc_ae_eq_Icc ]
              have hi' : Ioc a i b i = ∅ := Ioc_eq_empty hi.not_lt
              have : pi Set.univ fun j => Ioc a j b j = ∅ := univ_pi_eq_empty hi'
              rw [ this , integral_empty , sum_eq_zero ]
              rintro j -
              rcases eq_or_ne i j with ( rfl | hne )
              · simp [ hi ]
              ·
                rcases Fin.exists_succ_above_eq hne with ⟨ i , rfl ⟩
                  have
                    : pi Set.univ fun k : Fin n => Ioc a <| j.succ_above k b <| j.succ_above k = ∅
                      :=
                      univ_pi_eq_empty hi'
                  rw [ this , integral_empty , integral_empty , sub_self ]
          ·
            have hlt : ∀ i , a i < b i := fun i => hle i . lt_of_ne fun hi => hne ⟨ i , hi ⟩
              convert
                integral_divergence_of_has_fderiv_within_at_off_countable_aux₂
                  ⟨ a , b , hlt ⟩ f f' s hs Hc Hd Hi
#align
  measure_theory.integral_divergence_of_has_fderiv_within_at_off_countable MeasureTheory.integral_divergence_of_has_fderiv_within_at_off_countable

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "**Divergence theorem** for a family of functions `f : fin (n + 1) → ℝⁿ⁺¹ → E`. See also\n`measure_theory.integral_divergence_of_has_fderiv_within_at_off_countable'` for a version formulated\nin terms of a vector-valued function `f : ℝⁿ⁺¹ → Eⁿ⁺¹`. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `integral_divergence_of_has_fderiv_within_at_off_countable' [])
      (Command.declSig
       [(Term.explicitBinder "(" [`hle] [":" («term_≤_» `a "≤" `b)] [] ")")
        (Term.explicitBinder
         "("
         [`f]
         [":"
          (Term.arrow
           (Term.app `Fin [(«term_+_» `n "+" (num "1"))])
           "→"
           (Term.arrow
            (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")
            "→"
            `E))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`f']
         [":"
          (Term.arrow
           (Term.app `Fin [(«term_+_» `n "+" (num "1"))])
           "→"
           (Term.arrow
            (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")
            "→"
            (Topology.Algebra.Module.Basic.«term_→L[_]_»
             (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")
             " →L["
             (Data.Real.Basic.termℝ "ℝ")
             "] "
             `E)))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`s]
         [":"
          (Term.app
           `Set
           [(MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")])]
         []
         ")")
        (Term.explicitBinder "(" [`hs] [":" (Term.proj `s "." `Countable)] [] ")")
        (Term.explicitBinder
         "("
         [`Hc]
         [":"
          (Term.forall
           "∀"
           [`i]
           []
           ","
           (Term.app `ContinuousOn [(Term.app `f [`i]) (Term.app `icc [`a `b])]))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`Hd]
         [":"
          (Std.ExtendedBinder.«term∀__,_»
           "∀"
           (Lean.binderIdent `x)
           («binderTerm∈_»
            "∈"
            («term_\_»
             (Term.app
              `pi
              [`Set.univ
               (Term.fun
                "fun"
                (Term.basicFun
                 [`i]
                 []
                 "=>"
                 (Term.app `ioo [(Term.app `a [`i]) (Term.app `b [`i])])))])
             "\\"
             `s))
           ","
           (Term.forall
            "∀"
            [(Term.explicitBinder "(" [`i] [] [] ")")]
            []
            ","
            (Term.app `HasFderivAt [(Term.app `f [`i]) (Term.app `f' [`i `x]) `x])))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`Hi]
         [":"
          (Term.app
           `IntegrableOn
           [(Term.fun
             "fun"
             (Term.basicFun
              [`x]
              []
              "=>"
              (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
               "∑"
               (Std.ExtendedBinder.extBinders
                (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
               ", "
               (Term.app
                `f'
                [`i `x (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i)]))))
            (Term.app `icc [`a `b])])]
         []
         ")")]
       (Term.typeSpec
        ":"
        («term_=_»
         (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
          "∫"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
          " in "
          (Term.app `icc [`a `b])
          ", "
          (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
           "∑"
           (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
           ", "
           (Term.app
            `f'
            [`i `x (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i)])))
         "="
         (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
          "∑"
          (Std.ExtendedBinder.extBinders
           (Std.ExtendedBinder.extBinder
            (Lean.binderIdent `i)
            [(group ":" (Term.app `Fin [(«term_+_» `n "+" (num "1"))]))]))
          ", "
          («term_-_»
           (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
            "∫"
            (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
            " in "
            (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termface_ "face " `i)
            ", "
            (Term.app
             `f
             [`i
              (Term.app
               (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termfront_face_
                "front_face "
                `i)
               [`x])]))
           "-"
           (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
            "∫"
            (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
            " in "
            (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termface_ "face " `i)
            ", "
            (Term.app
             `f
             [`i
              (Term.app
               (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termback_face_
                "back_face "
                `i)
               [`x])])))))))
      (Command.declValSimple
       ":="
       (Term.app
        `integral_divergence_of_has_fderiv_within_at_off_countable
        [`a
         `b
         `hle
         (Term.fun "fun" (Term.basicFun [`x `i] [] "=>" (Term.app `f [`i `x])))
         (Term.fun
          "fun"
          (Term.basicFun
           [`x]
           []
           "=>"
           (Term.app
            `ContinuousLinearMap.pi
            [(Term.fun "fun" (Term.basicFun [`i] [] "=>" (Term.app `f' [`i `x])))])))
         `s
         `hs
         (Term.app (Term.proj `continuous_on_pi "." (fieldIdx "2")) [`Hc])
         (Term.fun
          "fun"
          (Term.basicFun
           [`x `hx]
           []
           "=>"
           (Term.app (Term.proj `has_fderiv_at_pi "." (fieldIdx "2")) [(Term.app `Hd [`x `hx])])))
         `Hi])
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `integral_divergence_of_has_fderiv_within_at_off_countable
       [`a
        `b
        `hle
        (Term.fun "fun" (Term.basicFun [`x `i] [] "=>" (Term.app `f [`i `x])))
        (Term.fun
         "fun"
         (Term.basicFun
          [`x]
          []
          "=>"
          (Term.app
           `ContinuousLinearMap.pi
           [(Term.fun "fun" (Term.basicFun [`i] [] "=>" (Term.app `f' [`i `x])))])))
        `s
        `hs
        (Term.app (Term.proj `continuous_on_pi "." (fieldIdx "2")) [`Hc])
        (Term.fun
         "fun"
         (Term.basicFun
          [`x `hx]
          []
          "=>"
          (Term.app (Term.proj `has_fderiv_at_pi "." (fieldIdx "2")) [(Term.app `Hd [`x `hx])])))
        `Hi])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Hi
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x `hx]
        []
        "=>"
        (Term.app (Term.proj `has_fderiv_at_pi "." (fieldIdx "2")) [(Term.app `Hd [`x `hx])])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `has_fderiv_at_pi "." (fieldIdx "2")) [(Term.app `Hd [`x `hx])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Hd [`x `hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Hd
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `Hd [`x `hx]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `has_fderiv_at_pi "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `has_fderiv_at_pi
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`x `hx]
       []
       "=>"
       (Term.app
        (Term.proj `has_fderiv_at_pi "." (fieldIdx "2"))
        [(Term.paren "(" (Term.app `Hd [`x `hx]) ")")])))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj `continuous_on_pi "." (fieldIdx "2")) [`Hc])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Hc
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `continuous_on_pi "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `continuous_on_pi
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj `continuous_on_pi "." (fieldIdx "2")) [`Hc])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hs
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `s
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x]
        []
        "=>"
        (Term.app
         `ContinuousLinearMap.pi
         [(Term.fun "fun" (Term.basicFun [`i] [] "=>" (Term.app `f' [`i `x])))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `ContinuousLinearMap.pi
       [(Term.fun "fun" (Term.basicFun [`i] [] "=>" (Term.app `f' [`i `x])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [`i] [] "=>" (Term.app `f' [`i `x])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f' [`i `x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `ContinuousLinearMap.pi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`x]
       []
       "=>"
       (Term.app
        `ContinuousLinearMap.pi
        [(Term.fun "fun" (Term.basicFun [`i] [] "=>" (Term.app `f' [`i `x])))])))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun "fun" (Term.basicFun [`x `i] [] "=>" (Term.app `f [`i `x])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`i `x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun "fun" (Term.basicFun [`x `i] [] "=>" (Term.app `f [`i `x])))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hle
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `b
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `integral_divergence_of_has_fderiv_within_at_off_countable
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      («term_=_»
       (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
        "∫"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
        " in "
        (Term.app `icc [`a `b])
        ", "
        (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
         "∑"
         (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
         ", "
         (Term.app
          `f'
          [`i `x (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i)])))
       "="
       (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
        "∑"
        (Std.ExtendedBinder.extBinders
         (Std.ExtendedBinder.extBinder
          (Lean.binderIdent `i)
          [(group ":" (Term.app `Fin [(«term_+_» `n "+" (num "1"))]))]))
        ", "
        («term_-_»
         (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
          "∫"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
          " in "
          (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termface_ "face " `i)
          ", "
          (Term.app
           `f
           [`i
            (Term.app
             (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termfront_face_
              "front_face "
              `i)
             [`x])]))
         "-"
         (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
          "∫"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
          " in "
          (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termface_ "face " `i)
          ", "
          (Term.app
           `f
           [`i
            (Term.app
             (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termback_face_ "back_face " `i)
             [`x])])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
       "∑"
       (Std.ExtendedBinder.extBinders
        (Std.ExtendedBinder.extBinder
         (Lean.binderIdent `i)
         [(group ":" (Term.app `Fin [(«term_+_» `n "+" (num "1"))]))]))
       ", "
       («term_-_»
        (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
         "∫"
         (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
         " in "
         (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termface_ "face " `i)
         ", "
         (Term.app
          `f
          [`i
           (Term.app
            (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termfront_face_
             "front_face "
             `i)
            [`x])]))
        "-"
        (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
         "∫"
         (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
         " in "
         (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termface_ "face " `i)
         ", "
         (Term.app
          `f
          [`i
           (Term.app
            (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termback_face_ "back_face " `i)
            [`x])]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_-_»
       (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
        "∫"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
        " in "
        (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termface_ "face " `i)
        ", "
        (Term.app
         `f
         [`i
          (Term.app
           (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termfront_face_ "front_face " `i)
           [`x])]))
       "-"
       (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
        "∫"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
        " in "
        (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termface_ "face " `i)
        ", "
        (Term.app
         `f
         [`i
          (Term.app
           (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termback_face_ "back_face " `i)
           [`x])])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
       "∫"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
       " in "
       (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termface_ "face " `i)
       ", "
       (Term.app
        `f
        [`i
         (Term.app
          (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termback_face_ "back_face " `i)
          [`x])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `f
       [`i
        (Term.app
         (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termback_face_ "back_face " `i)
         [`x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termback_face_ "back_face " `i)
       [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termback_face_ "back_face " `i)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termback_face_', expected 'MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termback_face_._@.MeasureTheory.Integral.DivergenceTheorem._hyg.782'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    **Divergence theorem** for a family of functions `f : fin (n + 1) → ℝⁿ⁺¹ → E`. See also
    `measure_theory.integral_divergence_of_has_fderiv_within_at_off_countable'` for a version formulated
    in terms of a vector-valued function `f : ℝⁿ⁺¹ → Eⁿ⁺¹`. -/
  theorem
    integral_divergence_of_has_fderiv_within_at_off_countable'
    ( hle : a ≤ b )
        ( f : Fin n + 1 → ℝⁿ⁺¹ → E )
        ( f' : Fin n + 1 → ℝⁿ⁺¹ → ℝⁿ⁺¹ →L[ ℝ ] E )
        ( s : Set ℝⁿ⁺¹ )
        ( hs : s . Countable )
        ( Hc : ∀ i , ContinuousOn f i icc a b )
        ( Hd : ∀ x ∈ pi Set.univ fun i => ioo a i b i \ s , ∀ ( i ) , HasFderivAt f i f' i x x )
        ( Hi : IntegrableOn fun x => ∑ i , f' i x e i icc a b )
      :
        ∫ x in icc a b , ∑ i , f' i x e i
          =
          ∑ i : Fin n + 1 , ∫ x in face i , f i front_face i x - ∫ x in face i , f i back_face i x
    :=
      integral_divergence_of_has_fderiv_within_at_off_countable
        a
          b
          hle
          fun x i => f i x
          fun x => ContinuousLinearMap.pi fun i => f' i x
          s
          hs
          continuous_on_pi . 2 Hc
          fun x hx => has_fderiv_at_pi . 2 Hd x hx
          Hi
#align
  measure_theory.integral_divergence_of_has_fderiv_within_at_off_countable' MeasureTheory.integral_divergence_of_has_fderiv_within_at_off_countable'

end

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "An auxiliary lemma that is used to specialize the general divergence theorem to spaces that do\nnot have the form `fin n → ℝ`. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `integral_divergence_of_has_fderiv_within_at_off_countable_of_equiv [])
      (Command.declSig
       [(Term.implicitBinder "{" [`F] [":" (Term.type "Type" [(Level.hole "_")])] "}")
        (Term.instBinder "[" [] (Term.app `NormedAddCommGroup [`F]) "]")
        (Term.instBinder "[" [] (Term.app `NormedSpace [(Data.Real.Basic.termℝ "ℝ") `F]) "]")
        (Term.instBinder "[" [] (Term.app `PartialOrder [`F]) "]")
        (Term.instBinder "[" [] (Term.app `MeasureSpace [`F]) "]")
        (Term.instBinder "[" [] (Term.app `BorelSpace [`F]) "]")
        (Term.explicitBinder
         "("
         [`eL]
         [":"
          (Topology.Algebra.Module.Basic.«term_≃L[_]_»
           `F
           " ≃L["
           (Data.Real.Basic.termℝ "ℝ")
           "] "
           (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹"))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`he_ord]
         [":"
          (Term.forall
           "∀"
           [`x `y]
           []
           ","
           («term_↔_»
            («term_≤_» (Term.app `eL [`x]) "≤" (Term.app `eL [`y]))
            "↔"
            («term_≤_» `x "≤" `y)))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`he_vol]
         [":" (Term.app `MeasurePreserving [`eL `volume `volume])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`f]
         [":"
          (Term.arrow (Term.app `Fin [(«term_+_» `n "+" (num "1"))]) "→" (Term.arrow `F "→" `E))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`f']
         [":"
          (Term.arrow
           (Term.app `Fin [(«term_+_» `n "+" (num "1"))])
           "→"
           (Term.arrow
            `F
            "→"
            (Topology.Algebra.Module.Basic.«term_→L[_]_»
             `F
             " →L["
             (Data.Real.Basic.termℝ "ℝ")
             "] "
             `E)))]
         []
         ")")
        (Term.explicitBinder "(" [`s] [":" (Term.app `Set [`F])] [] ")")
        (Term.explicitBinder "(" [`hs] [":" (Term.proj `s "." `Countable)] [] ")")
        (Term.explicitBinder "(" [`a `b] [":" `F] [] ")")
        (Term.explicitBinder "(" [`hle] [":" («term_≤_» `a "≤" `b)] [] ")")
        (Term.explicitBinder
         "("
         [`Hc]
         [":"
          (Term.forall
           "∀"
           [`i]
           []
           ","
           (Term.app `ContinuousOn [(Term.app `f [`i]) (Term.app `icc [`a `b])]))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`Hd]
         [":"
          (Std.ExtendedBinder.«term∀__,_»
           "∀"
           (Lean.binderIdent `x)
           («binderTerm∈_» "∈" («term_\_» (Term.app `interior [(Term.app `icc [`a `b])]) "\\" `s))
           ","
           (Term.forall
            "∀"
            [(Term.explicitBinder "(" [`i] [] [] ")")]
            []
            ","
            (Term.app `HasFderivAt [(Term.app `f [`i]) (Term.app `f' [`i `x]) `x])))]
         []
         ")")
        (Term.explicitBinder "(" [`DF] [":" (Term.arrow `F "→" `E)] [] ")")
        (Term.explicitBinder
         "("
         [`hDF]
         [":"
          (Term.forall
           "∀"
           [`x]
           []
           ","
           («term_=_»
            (Term.app `DF [`x])
            "="
            (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
             "∑"
             (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
             ", "
             (Term.app
              `f'
              [`i
               `x
               («term_<|_»
                (Term.proj `eL "." `symm)
                "<|"
                (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i))]))))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`Hi]
         [":" (Term.app `IntegrableOn [`DF (Term.app `icc [`a `b])])]
         []
         ")")]
       (Term.typeSpec
        ":"
        («term_=_»
         (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
          "∫"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
          " in "
          (Term.app `icc [`a `b])
          ", "
          (Term.app `DF [`x]))
         "="
         (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
          "∑"
          (Std.ExtendedBinder.extBinders
           (Std.ExtendedBinder.extBinder
            (Lean.binderIdent `i)
            [(group ":" (Term.app `Fin [(«term_+_» `n "+" (num "1"))]))]))
          ", "
          («term_-_»
           (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
            "∫"
            (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
            " in "
            (Term.app
             `icc
             [(«term_∘_» (Term.app `eL [`a]) "∘" (Term.proj `i "." `succAbove))
              («term_∘_» (Term.app `eL [`b]) "∘" (Term.proj `i "." `succAbove))])
            ", "
            (Term.app
             `f
             [`i
              («term_<|_»
               (Term.proj `eL "." `symm)
               "<|"
               (Term.app (Term.proj `i "." `insertNth) [(Term.app `eL [`b `i]) `x]))]))
           "-"
           (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
            "∫"
            (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
            " in "
            (Term.app
             `icc
             [(«term_∘_» (Term.app `eL [`a]) "∘" (Term.proj `i "." `succAbove))
              («term_∘_» (Term.app `eL [`b]) "∘" (Term.proj `i "." `succAbove))])
            ", "
            (Term.app
             `f
             [`i
              («term_<|_»
               (Term.proj `eL "." `symm)
               "<|"
               (Term.app (Term.proj `i "." `insertNth) [(Term.app `eL [`a `i]) `x]))])))))))
      (Command.declValSimple
       ":="
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`he_emb []]
          [(Term.typeSpec ":" (Term.app `MeasurableEmbedding [`eL]))]
          ":="
          (Term.proj
           (Term.proj (Term.proj `eL "." `toHomeomorph) "." `toMeasurableEquiv)
           "."
           `MeasurableEmbedding)))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hIcc []]
           [(Term.typeSpec
             ":"
             («term_=_»
              (Set.Data.Set.Image.«term_⁻¹'_»
               `eL
               " ⁻¹' "
               (Term.app `icc [(Term.app `eL [`a]) (Term.app `eL [`b])]))
              "="
              (Term.app `icc [`a `b])))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Std.Tactic.Ext.tacticExt1___
                "ext1"
                [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `x))])
               []
               (Tactic.simp
                "simp"
                []
                []
                ["only"]
                ["["
                 [(Tactic.simpLemma [] [] `Set.mem_preimage)
                  ","
                  (Tactic.simpLemma [] [] `Set.mem_Icc)
                  ","
                  (Tactic.simpLemma [] [] `he_ord)]
                 "]"]
                [])])))))
         []
         (Term.have
          "have"
          (Term.haveDecl
           (Term.haveIdDecl
            [`hIcc' []]
            [(Term.typeSpec
              ":"
              («term_=_»
               (Term.app `icc [(Term.app `eL [`a]) (Term.app `eL [`b])])
               "="
               (Set.Data.Set.Image.«term_⁻¹'_»
                (Term.proj `eL "." `symm)
                " ⁻¹' "
                (Term.app `icc [`a `b]))))]
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hIcc)
                   ","
                   (Tactic.rwRule [] `eL.symm_preimage_preimage)]
                  "]")
                 [])])))))
          []
          (calc
           "calc"
           (calcStep
            («term_=_»
             (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
              "∫"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
              " in "
              (Term.app `icc [`a `b])
              ", "
              (Term.app `DF [`x]))
             "="
             (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
              "∫"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
              " in "
              (Term.app `icc [`a `b])
              ", "
              (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
               "∑"
               (Std.ExtendedBinder.extBinders
                (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
               ", "
               (Term.app
                `f'
                [`i
                 `x
                 («term_<|_»
                  (Term.proj `eL "." `symm)
                  "<|"
                  (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i))]))))
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(Tactic.simp
                 "simp"
                 []
                 []
                 ["only"]
                 ["[" [(Tactic.simpLemma [] [] `hDF)] "]"]
                 [])]))))
           [(calcStep
             («term_=_»
              (Term.hole "_")
              "="
              (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
               "∫"
               (Std.ExtendedBinder.extBinders
                (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
               " in "
               (Term.app `icc [(Term.app `eL [`a]) (Term.app `eL [`b])])
               ", "
               (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
                "∑"
                (Std.ExtendedBinder.extBinders
                 (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
                ", "
                (Term.app
                 `f'
                 [`i
                  (Term.app (Term.proj `eL "." `symm) [`x])
                  («term_<|_»
                   (Term.proj `eL "." `symm)
                   "<|"
                   (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i))]))))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule
                     [(patternIgnore (token.«← » "←"))]
                     (Term.app `he_vol.set_integral_preimage_emb [`he_emb]))]
                   "]")
                  [])
                 []
                 (Tactic.simp
                  "simp"
                  []
                  []
                  ["only"]
                  ["["
                   [(Tactic.simpLemma [] [] `hIcc)
                    ","
                    (Tactic.simpLemma [] [] `eL.symm_apply_apply)]
                   "]"]
                  [])]))))
            (calcStep
             («term_=_»
              (Term.hole "_")
              "="
              (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
               "∑"
               (Std.ExtendedBinder.extBinders
                (Std.ExtendedBinder.extBinder
                 (Lean.binderIdent `i)
                 [(group ":" (Term.app `Fin [(«term_+_» `n "+" (num "1"))]))]))
               ", "
               («term_-_»
                (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                 "∫"
                 (Std.ExtendedBinder.extBinders
                  (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                 " in "
                 (Term.app
                  `icc
                  [(«term_∘_» (Term.app `eL [`a]) "∘" (Term.proj `i "." `succAbove))
                   («term_∘_» (Term.app `eL [`b]) "∘" (Term.proj `i "." `succAbove))])
                 ", "
                 (Term.app
                  `f
                  [`i
                   («term_<|_»
                    (Term.proj `eL "." `symm)
                    "<|"
                    (Term.app (Term.proj `i "." `insertNth) [(Term.app `eL [`b `i]) `x]))]))
                "-"
                (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                 "∫"
                 (Std.ExtendedBinder.extBinders
                  (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                 " in "
                 (Term.app
                  `icc
                  [(«term_∘_» (Term.app `eL [`a]) "∘" (Term.proj `i "." `succAbove))
                   («term_∘_» (Term.app `eL [`b]) "∘" (Term.proj `i "." `succAbove))])
                 ", "
                 (Term.app
                  `f
                  [`i
                   («term_<|_»
                    (Term.proj `eL "." `symm)
                    "<|"
                    (Term.app (Term.proj `i "." `insertNth) [(Term.app `eL [`a `i]) `x]))])))))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(convert
                  "convert"
                  []
                  (Term.app
                   `integral_divergence_of_has_fderiv_within_at_off_countable'
                   [(Term.app `eL [`a])
                    (Term.app `eL [`b])
                    (Term.app
                     (Term.proj
                      (Term.app `he_ord [(Term.hole "_") (Term.hole "_")])
                      "."
                      (fieldIdx "2"))
                     [`hle])
                    (Term.fun
                     "fun"
                     (Term.basicFun [`i `x] [] "=>" (Term.app `f [`i (Term.app `eL.symm [`x])])))
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [`i `x]
                      []
                      "=>"
                      (ContinuousLinearMap.Topology.Algebra.Module.Basic.«term_∘L_»
                       (Term.app `f' [`i (Term.app `eL.symm [`x])])
                       " ∘L "
                       (Term.typeAscription
                        "("
                        `eL.symm
                        ":"
                        [(Topology.Algebra.Module.Basic.«term_→L[_]_»
                          (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")
                          " →L["
                          (Data.Real.Basic.termℝ "ℝ")
                          "] "
                          `F)]
                        ")"))))
                    (Set.Data.Set.Image.«term_⁻¹'_» `eL.symm " ⁻¹' " `s)
                    (Term.app `hs.preimage [`eL.symm.injective])
                    (Term.hole "_")
                    (Term.hole "_")
                    (Term.hole "_")])
                  [])
                 []
                 (tactic__
                  (cdotTk (patternIgnore (token.«· » "·")))
                  [(Tactic.exact
                    "exact"
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [`i]
                      []
                      "=>"
                      (Term.app
                       (Term.proj (Term.app `Hc [`i]) "." `comp)
                       [`eL.symm.continuous_on `hIcc'.subset]))))])
                 []
                 (tactic__
                  (cdotTk (patternIgnore (token.«· » "·")))
                  [(Tactic.refine'
                    "refine'"
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [`x `hx `i]
                      []
                      "=>"
                      (Term.app
                       (Term.proj
                        (Term.app
                         `Hd
                         [(Term.app `eL.symm [`x])
                          (Term.anonymousCtor
                           "⟨"
                           [(Term.hole "_") "," (Term.proj `hx "." (fieldIdx "2"))]
                           "⟩")
                          `i])
                        "."
                        `comp)
                       [`x `eL.symm.has_fderiv_at]))))
                   []
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hIcc)]
                     "]")
                    [])
                   []
                   (Tactic.refine'
                    "refine'"
                    (Term.app
                     `preimage_interior_subset_interior_preimage
                     [`eL.continuous (Term.hole "_")]))
                   []
                   (Std.Tactic.Simpa.simpa
                    "simpa"
                    []
                    []
                    (Std.Tactic.Simpa.simpaArgsRest
                     []
                     []
                     ["only"]
                     [(Tactic.simpArgs
                       "["
                       [(Tactic.simpLemma [] [] `Set.mem_preimage)
                        ","
                        (Tactic.simpLemma [] [] `eL.apply_symm_apply)
                        ","
                        (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `pi_univ_Icc)
                        ","
                        (Tactic.simpLemma [] [] (Term.app `interior_pi_set [`finite_univ]))
                        ","
                        (Tactic.simpLemma [] [] `interior_Icc)]
                       "]")]
                     ["using" (Term.proj `hx "." (fieldIdx "1"))]))])
                 []
                 (tactic__
                  (cdotTk (patternIgnore (token.«· » "·")))
                  [(Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule
                       [(patternIgnore (token.«← » "←"))]
                       (Term.app `he_vol.integrable_on_comp_preimage [`he_emb]))
                      ","
                      (Tactic.rwRule [] `hIcc)]
                     "]")
                    [])
                   []
                   (Tactic.simp
                    "simp"
                    []
                    []
                    []
                    ["["
                     [(Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `hDF)
                      ","
                      (Tactic.simpLemma
                       []
                       []
                       (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
                      ","
                      (Tactic.simpLemma [] [] `Hi)]
                     "]"]
                    [])])]))))]))))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`he_emb []]
         [(Term.typeSpec ":" (Term.app `MeasurableEmbedding [`eL]))]
         ":="
         (Term.proj
          (Term.proj (Term.proj `eL "." `toHomeomorph) "." `toMeasurableEquiv)
          "."
          `MeasurableEmbedding)))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`hIcc []]
          [(Term.typeSpec
            ":"
            («term_=_»
             (Set.Data.Set.Image.«term_⁻¹'_»
              `eL
              " ⁻¹' "
              (Term.app `icc [(Term.app `eL [`a]) (Term.app `eL [`b])]))
             "="
             (Term.app `icc [`a `b])))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(Std.Tactic.Ext.tacticExt1___
               "ext1"
               [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `x))])
              []
              (Tactic.simp
               "simp"
               []
               []
               ["only"]
               ["["
                [(Tactic.simpLemma [] [] `Set.mem_preimage)
                 ","
                 (Tactic.simpLemma [] [] `Set.mem_Icc)
                 ","
                 (Tactic.simpLemma [] [] `he_ord)]
                "]"]
               [])])))))
        []
        (Term.have
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hIcc' []]
           [(Term.typeSpec
             ":"
             («term_=_»
              (Term.app `icc [(Term.app `eL [`a]) (Term.app `eL [`b])])
              "="
              (Set.Data.Set.Image.«term_⁻¹'_»
               (Term.proj `eL "." `symm)
               " ⁻¹' "
               (Term.app `icc [`a `b]))))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hIcc)
                  ","
                  (Tactic.rwRule [] `eL.symm_preimage_preimage)]
                 "]")
                [])])))))
         []
         (calc
          "calc"
          (calcStep
           («term_=_»
            (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
             "∫"
             (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
             " in "
             (Term.app `icc [`a `b])
             ", "
             (Term.app `DF [`x]))
            "="
            (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
             "∫"
             (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
             " in "
             (Term.app `icc [`a `b])
             ", "
             (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
              "∑"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
              ", "
              (Term.app
               `f'
               [`i
                `x
                («term_<|_»
                 (Term.proj `eL "." `symm)
                 "<|"
                 (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i))]))))
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `hDF)] "]"] [])]))))
          [(calcStep
            («term_=_»
             (Term.hole "_")
             "="
             (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
              "∫"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
              " in "
              (Term.app `icc [(Term.app `eL [`a]) (Term.app `eL [`b])])
              ", "
              (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
               "∑"
               (Std.ExtendedBinder.extBinders
                (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
               ", "
               (Term.app
                `f'
                [`i
                 (Term.app (Term.proj `eL "." `symm) [`x])
                 («term_<|_»
                  (Term.proj `eL "." `symm)
                  "<|"
                  (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i))]))))
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule
                    [(patternIgnore (token.«← » "←"))]
                    (Term.app `he_vol.set_integral_preimage_emb [`he_emb]))]
                  "]")
                 [])
                []
                (Tactic.simp
                 "simp"
                 []
                 []
                 ["only"]
                 ["["
                  [(Tactic.simpLemma [] [] `hIcc) "," (Tactic.simpLemma [] [] `eL.symm_apply_apply)]
                  "]"]
                 [])]))))
           (calcStep
            («term_=_»
             (Term.hole "_")
             "="
             (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
              "∑"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder
                (Lean.binderIdent `i)
                [(group ":" (Term.app `Fin [(«term_+_» `n "+" (num "1"))]))]))
              ", "
              («term_-_»
               (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                "∫"
                (Std.ExtendedBinder.extBinders
                 (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                " in "
                (Term.app
                 `icc
                 [(«term_∘_» (Term.app `eL [`a]) "∘" (Term.proj `i "." `succAbove))
                  («term_∘_» (Term.app `eL [`b]) "∘" (Term.proj `i "." `succAbove))])
                ", "
                (Term.app
                 `f
                 [`i
                  («term_<|_»
                   (Term.proj `eL "." `symm)
                   "<|"
                   (Term.app (Term.proj `i "." `insertNth) [(Term.app `eL [`b `i]) `x]))]))
               "-"
               (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                "∫"
                (Std.ExtendedBinder.extBinders
                 (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                " in "
                (Term.app
                 `icc
                 [(«term_∘_» (Term.app `eL [`a]) "∘" (Term.proj `i "." `succAbove))
                  («term_∘_» (Term.app `eL [`b]) "∘" (Term.proj `i "." `succAbove))])
                ", "
                (Term.app
                 `f
                 [`i
                  («term_<|_»
                   (Term.proj `eL "." `symm)
                   "<|"
                   (Term.app (Term.proj `i "." `insertNth) [(Term.app `eL [`a `i]) `x]))])))))
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(convert
                 "convert"
                 []
                 (Term.app
                  `integral_divergence_of_has_fderiv_within_at_off_countable'
                  [(Term.app `eL [`a])
                   (Term.app `eL [`b])
                   (Term.app
                    (Term.proj
                     (Term.app `he_ord [(Term.hole "_") (Term.hole "_")])
                     "."
                     (fieldIdx "2"))
                    [`hle])
                   (Term.fun
                    "fun"
                    (Term.basicFun [`i `x] [] "=>" (Term.app `f [`i (Term.app `eL.symm [`x])])))
                   (Term.fun
                    "fun"
                    (Term.basicFun
                     [`i `x]
                     []
                     "=>"
                     (ContinuousLinearMap.Topology.Algebra.Module.Basic.«term_∘L_»
                      (Term.app `f' [`i (Term.app `eL.symm [`x])])
                      " ∘L "
                      (Term.typeAscription
                       "("
                       `eL.symm
                       ":"
                       [(Topology.Algebra.Module.Basic.«term_→L[_]_»
                         (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")
                         " →L["
                         (Data.Real.Basic.termℝ "ℝ")
                         "] "
                         `F)]
                       ")"))))
                   (Set.Data.Set.Image.«term_⁻¹'_» `eL.symm " ⁻¹' " `s)
                   (Term.app `hs.preimage [`eL.symm.injective])
                   (Term.hole "_")
                   (Term.hole "_")
                   (Term.hole "_")])
                 [])
                []
                (tactic__
                 (cdotTk (patternIgnore (token.«· » "·")))
                 [(Tactic.exact
                   "exact"
                   (Term.fun
                    "fun"
                    (Term.basicFun
                     [`i]
                     []
                     "=>"
                     (Term.app
                      (Term.proj (Term.app `Hc [`i]) "." `comp)
                      [`eL.symm.continuous_on `hIcc'.subset]))))])
                []
                (tactic__
                 (cdotTk (patternIgnore (token.«· » "·")))
                 [(Tactic.refine'
                   "refine'"
                   (Term.fun
                    "fun"
                    (Term.basicFun
                     [`x `hx `i]
                     []
                     "=>"
                     (Term.app
                      (Term.proj
                       (Term.app
                        `Hd
                        [(Term.app `eL.symm [`x])
                         (Term.anonymousCtor
                          "⟨"
                          [(Term.hole "_") "," (Term.proj `hx "." (fieldIdx "2"))]
                          "⟩")
                         `i])
                       "."
                       `comp)
                      [`x `eL.symm.has_fderiv_at]))))
                  []
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hIcc)]
                    "]")
                   [])
                  []
                  (Tactic.refine'
                   "refine'"
                   (Term.app
                    `preimage_interior_subset_interior_preimage
                    [`eL.continuous (Term.hole "_")]))
                  []
                  (Std.Tactic.Simpa.simpa
                   "simpa"
                   []
                   []
                   (Std.Tactic.Simpa.simpaArgsRest
                    []
                    []
                    ["only"]
                    [(Tactic.simpArgs
                      "["
                      [(Tactic.simpLemma [] [] `Set.mem_preimage)
                       ","
                       (Tactic.simpLemma [] [] `eL.apply_symm_apply)
                       ","
                       (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `pi_univ_Icc)
                       ","
                       (Tactic.simpLemma [] [] (Term.app `interior_pi_set [`finite_univ]))
                       ","
                       (Tactic.simpLemma [] [] `interior_Icc)]
                      "]")]
                    ["using" (Term.proj `hx "." (fieldIdx "1"))]))])
                []
                (tactic__
                 (cdotTk (patternIgnore (token.«· » "·")))
                 [(Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule
                      [(patternIgnore (token.«← » "←"))]
                      (Term.app `he_vol.integrable_on_comp_preimage [`he_emb]))
                     ","
                     (Tactic.rwRule [] `hIcc)]
                    "]")
                   [])
                  []
                  (Tactic.simp
                   "simp"
                   []
                   []
                   []
                   ["["
                    [(Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `hDF)
                     ","
                     (Tactic.simpLemma
                      []
                      []
                      (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
                     ","
                     (Tactic.simpLemma [] [] `Hi)]
                    "]"]
                   [])])]))))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hIcc []]
         [(Term.typeSpec
           ":"
           («term_=_»
            (Set.Data.Set.Image.«term_⁻¹'_»
             `eL
             " ⁻¹' "
             (Term.app `icc [(Term.app `eL [`a]) (Term.app `eL [`b])]))
            "="
            (Term.app `icc [`a `b])))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Std.Tactic.Ext.tacticExt1___
              "ext1"
              [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `x))])
             []
             (Tactic.simp
              "simp"
              []
              []
              ["only"]
              ["["
               [(Tactic.simpLemma [] [] `Set.mem_preimage)
                ","
                (Tactic.simpLemma [] [] `Set.mem_Icc)
                ","
                (Tactic.simpLemma [] [] `he_ord)]
               "]"]
              [])])))))
       []
       (Term.have
        "have"
        (Term.haveDecl
         (Term.haveIdDecl
          [`hIcc' []]
          [(Term.typeSpec
            ":"
            («term_=_»
             (Term.app `icc [(Term.app `eL [`a]) (Term.app `eL [`b])])
             "="
             (Set.Data.Set.Image.«term_⁻¹'_»
              (Term.proj `eL "." `symm)
              " ⁻¹' "
              (Term.app `icc [`a `b]))))]
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hIcc)
                 ","
                 (Tactic.rwRule [] `eL.symm_preimage_preimage)]
                "]")
               [])])))))
        []
        (calc
         "calc"
         (calcStep
          («term_=_»
           (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
            "∫"
            (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
            " in "
            (Term.app `icc [`a `b])
            ", "
            (Term.app `DF [`x]))
           "="
           (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
            "∫"
            (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
            " in "
            (Term.app `icc [`a `b])
            ", "
            (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
             "∑"
             (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
             ", "
             (Term.app
              `f'
              [`i
               `x
               («term_<|_»
                (Term.proj `eL "." `symm)
                "<|"
                (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i))]))))
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `hDF)] "]"] [])]))))
         [(calcStep
           («term_=_»
            (Term.hole "_")
            "="
            (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
             "∫"
             (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
             " in "
             (Term.app `icc [(Term.app `eL [`a]) (Term.app `eL [`b])])
             ", "
             (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
              "∑"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
              ", "
              (Term.app
               `f'
               [`i
                (Term.app (Term.proj `eL "." `symm) [`x])
                («term_<|_»
                 (Term.proj `eL "." `symm)
                 "<|"
                 (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i))]))))
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule
                   [(patternIgnore (token.«← » "←"))]
                   (Term.app `he_vol.set_integral_preimage_emb [`he_emb]))]
                 "]")
                [])
               []
               (Tactic.simp
                "simp"
                []
                []
                ["only"]
                ["["
                 [(Tactic.simpLemma [] [] `hIcc) "," (Tactic.simpLemma [] [] `eL.symm_apply_apply)]
                 "]"]
                [])]))))
          (calcStep
           («term_=_»
            (Term.hole "_")
            "="
            (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
             "∑"
             (Std.ExtendedBinder.extBinders
              (Std.ExtendedBinder.extBinder
               (Lean.binderIdent `i)
               [(group ":" (Term.app `Fin [(«term_+_» `n "+" (num "1"))]))]))
             ", "
             («term_-_»
              (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
               "∫"
               (Std.ExtendedBinder.extBinders
                (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
               " in "
               (Term.app
                `icc
                [(«term_∘_» (Term.app `eL [`a]) "∘" (Term.proj `i "." `succAbove))
                 («term_∘_» (Term.app `eL [`b]) "∘" (Term.proj `i "." `succAbove))])
               ", "
               (Term.app
                `f
                [`i
                 («term_<|_»
                  (Term.proj `eL "." `symm)
                  "<|"
                  (Term.app (Term.proj `i "." `insertNth) [(Term.app `eL [`b `i]) `x]))]))
              "-"
              (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
               "∫"
               (Std.ExtendedBinder.extBinders
                (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
               " in "
               (Term.app
                `icc
                [(«term_∘_» (Term.app `eL [`a]) "∘" (Term.proj `i "." `succAbove))
                 («term_∘_» (Term.app `eL [`b]) "∘" (Term.proj `i "." `succAbove))])
               ", "
               (Term.app
                `f
                [`i
                 («term_<|_»
                  (Term.proj `eL "." `symm)
                  "<|"
                  (Term.app (Term.proj `i "." `insertNth) [(Term.app `eL [`a `i]) `x]))])))))
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(convert
                "convert"
                []
                (Term.app
                 `integral_divergence_of_has_fderiv_within_at_off_countable'
                 [(Term.app `eL [`a])
                  (Term.app `eL [`b])
                  (Term.app
                   (Term.proj
                    (Term.app `he_ord [(Term.hole "_") (Term.hole "_")])
                    "."
                    (fieldIdx "2"))
                   [`hle])
                  (Term.fun
                   "fun"
                   (Term.basicFun [`i `x] [] "=>" (Term.app `f [`i (Term.app `eL.symm [`x])])))
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [`i `x]
                    []
                    "=>"
                    (ContinuousLinearMap.Topology.Algebra.Module.Basic.«term_∘L_»
                     (Term.app `f' [`i (Term.app `eL.symm [`x])])
                     " ∘L "
                     (Term.typeAscription
                      "("
                      `eL.symm
                      ":"
                      [(Topology.Algebra.Module.Basic.«term_→L[_]_»
                        (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")
                        " →L["
                        (Data.Real.Basic.termℝ "ℝ")
                        "] "
                        `F)]
                      ")"))))
                  (Set.Data.Set.Image.«term_⁻¹'_» `eL.symm " ⁻¹' " `s)
                  (Term.app `hs.preimage [`eL.symm.injective])
                  (Term.hole "_")
                  (Term.hole "_")
                  (Term.hole "_")])
                [])
               []
               (tactic__
                (cdotTk (patternIgnore (token.«· » "·")))
                [(Tactic.exact
                  "exact"
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [`i]
                    []
                    "=>"
                    (Term.app
                     (Term.proj (Term.app `Hc [`i]) "." `comp)
                     [`eL.symm.continuous_on `hIcc'.subset]))))])
               []
               (tactic__
                (cdotTk (patternIgnore (token.«· » "·")))
                [(Tactic.refine'
                  "refine'"
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [`x `hx `i]
                    []
                    "=>"
                    (Term.app
                     (Term.proj
                      (Term.app
                       `Hd
                       [(Term.app `eL.symm [`x])
                        (Term.anonymousCtor
                         "⟨"
                         [(Term.hole "_") "," (Term.proj `hx "." (fieldIdx "2"))]
                         "⟩")
                        `i])
                      "."
                      `comp)
                     [`x `eL.symm.has_fderiv_at]))))
                 []
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hIcc)]
                   "]")
                  [])
                 []
                 (Tactic.refine'
                  "refine'"
                  (Term.app
                   `preimage_interior_subset_interior_preimage
                   [`eL.continuous (Term.hole "_")]))
                 []
                 (Std.Tactic.Simpa.simpa
                  "simpa"
                  []
                  []
                  (Std.Tactic.Simpa.simpaArgsRest
                   []
                   []
                   ["only"]
                   [(Tactic.simpArgs
                     "["
                     [(Tactic.simpLemma [] [] `Set.mem_preimage)
                      ","
                      (Tactic.simpLemma [] [] `eL.apply_symm_apply)
                      ","
                      (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `pi_univ_Icc)
                      ","
                      (Tactic.simpLemma [] [] (Term.app `interior_pi_set [`finite_univ]))
                      ","
                      (Tactic.simpLemma [] [] `interior_Icc)]
                     "]")]
                   ["using" (Term.proj `hx "." (fieldIdx "1"))]))])
               []
               (tactic__
                (cdotTk (patternIgnore (token.«· » "·")))
                [(Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule
                     [(patternIgnore (token.«← » "←"))]
                     (Term.app `he_vol.integrable_on_comp_preimage [`he_emb]))
                    ","
                    (Tactic.rwRule [] `hIcc)]
                   "]")
                  [])
                 []
                 (Tactic.simp
                  "simp"
                  []
                  []
                  []
                  ["["
                   [(Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `hDF)
                    ","
                    (Tactic.simpLemma
                     []
                     []
                     (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
                    ","
                    (Tactic.simpLemma [] [] `Hi)]
                   "]"]
                  [])])]))))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.have
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hIcc' []]
         [(Term.typeSpec
           ":"
           («term_=_»
            (Term.app `icc [(Term.app `eL [`a]) (Term.app `eL [`b])])
            "="
            (Set.Data.Set.Image.«term_⁻¹'_»
             (Term.proj `eL "." `symm)
             " ⁻¹' "
             (Term.app `icc [`a `b]))))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hIcc)
                ","
                (Tactic.rwRule [] `eL.symm_preimage_preimage)]
               "]")
              [])])))))
       []
       (calc
        "calc"
        (calcStep
         («term_=_»
          (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
           "∫"
           (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
           " in "
           (Term.app `icc [`a `b])
           ", "
           (Term.app `DF [`x]))
          "="
          (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
           "∫"
           (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
           " in "
           (Term.app `icc [`a `b])
           ", "
           (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
            "∑"
            (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
            ", "
            (Term.app
             `f'
             [`i
              `x
              («term_<|_»
               (Term.proj `eL "." `symm)
               "<|"
               (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i))]))))
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `hDF)] "]"] [])]))))
        [(calcStep
          («term_=_»
           (Term.hole "_")
           "="
           (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
            "∫"
            (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
            " in "
            (Term.app `icc [(Term.app `eL [`a]) (Term.app `eL [`b])])
            ", "
            (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
             "∑"
             (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
             ", "
             (Term.app
              `f'
              [`i
               (Term.app (Term.proj `eL "." `symm) [`x])
               («term_<|_»
                (Term.proj `eL "." `symm)
                "<|"
                (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i))]))))
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule
                  [(patternIgnore (token.«← » "←"))]
                  (Term.app `he_vol.set_integral_preimage_emb [`he_emb]))]
                "]")
               [])
              []
              (Tactic.simp
               "simp"
               []
               []
               ["only"]
               ["["
                [(Tactic.simpLemma [] [] `hIcc) "," (Tactic.simpLemma [] [] `eL.symm_apply_apply)]
                "]"]
               [])]))))
         (calcStep
          («term_=_»
           (Term.hole "_")
           "="
           (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
            "∑"
            (Std.ExtendedBinder.extBinders
             (Std.ExtendedBinder.extBinder
              (Lean.binderIdent `i)
              [(group ":" (Term.app `Fin [(«term_+_» `n "+" (num "1"))]))]))
            ", "
            («term_-_»
             (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
              "∫"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
              " in "
              (Term.app
               `icc
               [(«term_∘_» (Term.app `eL [`a]) "∘" (Term.proj `i "." `succAbove))
                («term_∘_» (Term.app `eL [`b]) "∘" (Term.proj `i "." `succAbove))])
              ", "
              (Term.app
               `f
               [`i
                («term_<|_»
                 (Term.proj `eL "." `symm)
                 "<|"
                 (Term.app (Term.proj `i "." `insertNth) [(Term.app `eL [`b `i]) `x]))]))
             "-"
             (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
              "∫"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
              " in "
              (Term.app
               `icc
               [(«term_∘_» (Term.app `eL [`a]) "∘" (Term.proj `i "." `succAbove))
                («term_∘_» (Term.app `eL [`b]) "∘" (Term.proj `i "." `succAbove))])
              ", "
              (Term.app
               `f
               [`i
                («term_<|_»
                 (Term.proj `eL "." `symm)
                 "<|"
                 (Term.app (Term.proj `i "." `insertNth) [(Term.app `eL [`a `i]) `x]))])))))
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(convert
               "convert"
               []
               (Term.app
                `integral_divergence_of_has_fderiv_within_at_off_countable'
                [(Term.app `eL [`a])
                 (Term.app `eL [`b])
                 (Term.app
                  (Term.proj
                   (Term.app `he_ord [(Term.hole "_") (Term.hole "_")])
                   "."
                   (fieldIdx "2"))
                  [`hle])
                 (Term.fun
                  "fun"
                  (Term.basicFun [`i `x] [] "=>" (Term.app `f [`i (Term.app `eL.symm [`x])])))
                 (Term.fun
                  "fun"
                  (Term.basicFun
                   [`i `x]
                   []
                   "=>"
                   (ContinuousLinearMap.Topology.Algebra.Module.Basic.«term_∘L_»
                    (Term.app `f' [`i (Term.app `eL.symm [`x])])
                    " ∘L "
                    (Term.typeAscription
                     "("
                     `eL.symm
                     ":"
                     [(Topology.Algebra.Module.Basic.«term_→L[_]_»
                       (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")
                       " →L["
                       (Data.Real.Basic.termℝ "ℝ")
                       "] "
                       `F)]
                     ")"))))
                 (Set.Data.Set.Image.«term_⁻¹'_» `eL.symm " ⁻¹' " `s)
                 (Term.app `hs.preimage [`eL.symm.injective])
                 (Term.hole "_")
                 (Term.hole "_")
                 (Term.hole "_")])
               [])
              []
              (tactic__
               (cdotTk (patternIgnore (token.«· » "·")))
               [(Tactic.exact
                 "exact"
                 (Term.fun
                  "fun"
                  (Term.basicFun
                   [`i]
                   []
                   "=>"
                   (Term.app
                    (Term.proj (Term.app `Hc [`i]) "." `comp)
                    [`eL.symm.continuous_on `hIcc'.subset]))))])
              []
              (tactic__
               (cdotTk (patternIgnore (token.«· » "·")))
               [(Tactic.refine'
                 "refine'"
                 (Term.fun
                  "fun"
                  (Term.basicFun
                   [`x `hx `i]
                   []
                   "=>"
                   (Term.app
                    (Term.proj
                     (Term.app
                      `Hd
                      [(Term.app `eL.symm [`x])
                       (Term.anonymousCtor
                        "⟨"
                        [(Term.hole "_") "," (Term.proj `hx "." (fieldIdx "2"))]
                        "⟩")
                       `i])
                     "."
                     `comp)
                    [`x `eL.symm.has_fderiv_at]))))
                []
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hIcc)]
                  "]")
                 [])
                []
                (Tactic.refine'
                 "refine'"
                 (Term.app
                  `preimage_interior_subset_interior_preimage
                  [`eL.continuous (Term.hole "_")]))
                []
                (Std.Tactic.Simpa.simpa
                 "simpa"
                 []
                 []
                 (Std.Tactic.Simpa.simpaArgsRest
                  []
                  []
                  ["only"]
                  [(Tactic.simpArgs
                    "["
                    [(Tactic.simpLemma [] [] `Set.mem_preimage)
                     ","
                     (Tactic.simpLemma [] [] `eL.apply_symm_apply)
                     ","
                     (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `pi_univ_Icc)
                     ","
                     (Tactic.simpLemma [] [] (Term.app `interior_pi_set [`finite_univ]))
                     ","
                     (Tactic.simpLemma [] [] `interior_Icc)]
                    "]")]
                  ["using" (Term.proj `hx "." (fieldIdx "1"))]))])
              []
              (tactic__
               (cdotTk (patternIgnore (token.«· » "·")))
               [(Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule
                    [(patternIgnore (token.«← » "←"))]
                    (Term.app `he_vol.integrable_on_comp_preimage [`he_emb]))
                   ","
                   (Tactic.rwRule [] `hIcc)]
                  "]")
                 [])
                []
                (Tactic.simp
                 "simp"
                 []
                 []
                 []
                 ["["
                  [(Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `hDF)
                   ","
                   (Tactic.simpLemma
                    []
                    []
                    (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
                   ","
                   (Tactic.simpLemma [] [] `Hi)]
                  "]"]
                 [])])]))))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (calc
       "calc"
       (calcStep
        («term_=_»
         (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
          "∫"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
          " in "
          (Term.app `icc [`a `b])
          ", "
          (Term.app `DF [`x]))
         "="
         (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
          "∫"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
          " in "
          (Term.app `icc [`a `b])
          ", "
          (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
           "∑"
           (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
           ", "
           (Term.app
            `f'
            [`i
             `x
             («term_<|_»
              (Term.proj `eL "." `symm)
              "<|"
              (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i))]))))
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `hDF)] "]"] [])]))))
       [(calcStep
         («term_=_»
          (Term.hole "_")
          "="
          (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
           "∫"
           (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
           " in "
           (Term.app `icc [(Term.app `eL [`a]) (Term.app `eL [`b])])
           ", "
           (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
            "∑"
            (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
            ", "
            (Term.app
             `f'
             [`i
              (Term.app (Term.proj `eL "." `symm) [`x])
              («term_<|_»
               (Term.proj `eL "." `symm)
               "<|"
               (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.terme_ "e " `i))]))))
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule
                 [(patternIgnore (token.«← » "←"))]
                 (Term.app `he_vol.set_integral_preimage_emb [`he_emb]))]
               "]")
              [])
             []
             (Tactic.simp
              "simp"
              []
              []
              ["only"]
              ["["
               [(Tactic.simpLemma [] [] `hIcc) "," (Tactic.simpLemma [] [] `eL.symm_apply_apply)]
               "]"]
              [])]))))
        (calcStep
         («term_=_»
          (Term.hole "_")
          "="
          (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
           "∑"
           (Std.ExtendedBinder.extBinders
            (Std.ExtendedBinder.extBinder
             (Lean.binderIdent `i)
             [(group ":" (Term.app `Fin [(«term_+_» `n "+" (num "1"))]))]))
           ", "
           («term_-_»
            (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
             "∫"
             (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
             " in "
             (Term.app
              `icc
              [(«term_∘_» (Term.app `eL [`a]) "∘" (Term.proj `i "." `succAbove))
               («term_∘_» (Term.app `eL [`b]) "∘" (Term.proj `i "." `succAbove))])
             ", "
             (Term.app
              `f
              [`i
               («term_<|_»
                (Term.proj `eL "." `symm)
                "<|"
                (Term.app (Term.proj `i "." `insertNth) [(Term.app `eL [`b `i]) `x]))]))
            "-"
            (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
             "∫"
             (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
             " in "
             (Term.app
              `icc
              [(«term_∘_» (Term.app `eL [`a]) "∘" (Term.proj `i "." `succAbove))
               («term_∘_» (Term.app `eL [`b]) "∘" (Term.proj `i "." `succAbove))])
             ", "
             (Term.app
              `f
              [`i
               («term_<|_»
                (Term.proj `eL "." `symm)
                "<|"
                (Term.app (Term.proj `i "." `insertNth) [(Term.app `eL [`a `i]) `x]))])))))
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(convert
              "convert"
              []
              (Term.app
               `integral_divergence_of_has_fderiv_within_at_off_countable'
               [(Term.app `eL [`a])
                (Term.app `eL [`b])
                (Term.app
                 (Term.proj (Term.app `he_ord [(Term.hole "_") (Term.hole "_")]) "." (fieldIdx "2"))
                 [`hle])
                (Term.fun
                 "fun"
                 (Term.basicFun [`i `x] [] "=>" (Term.app `f [`i (Term.app `eL.symm [`x])])))
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [`i `x]
                  []
                  "=>"
                  (ContinuousLinearMap.Topology.Algebra.Module.Basic.«term_∘L_»
                   (Term.app `f' [`i (Term.app `eL.symm [`x])])
                   " ∘L "
                   (Term.typeAscription
                    "("
                    `eL.symm
                    ":"
                    [(Topology.Algebra.Module.Basic.«term_→L[_]_»
                      (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")
                      " →L["
                      (Data.Real.Basic.termℝ "ℝ")
                      "] "
                      `F)]
                    ")"))))
                (Set.Data.Set.Image.«term_⁻¹'_» `eL.symm " ⁻¹' " `s)
                (Term.app `hs.preimage [`eL.symm.injective])
                (Term.hole "_")
                (Term.hole "_")
                (Term.hole "_")])
              [])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.exact
                "exact"
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [`i]
                  []
                  "=>"
                  (Term.app
                   (Term.proj (Term.app `Hc [`i]) "." `comp)
                   [`eL.symm.continuous_on `hIcc'.subset]))))])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.refine'
                "refine'"
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [`x `hx `i]
                  []
                  "=>"
                  (Term.app
                   (Term.proj
                    (Term.app
                     `Hd
                     [(Term.app `eL.symm [`x])
                      (Term.anonymousCtor
                       "⟨"
                       [(Term.hole "_") "," (Term.proj `hx "." (fieldIdx "2"))]
                       "⟩")
                      `i])
                    "."
                    `comp)
                   [`x `eL.symm.has_fderiv_at]))))
               []
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hIcc)]
                 "]")
                [])
               []
               (Tactic.refine'
                "refine'"
                (Term.app
                 `preimage_interior_subset_interior_preimage
                 [`eL.continuous (Term.hole "_")]))
               []
               (Std.Tactic.Simpa.simpa
                "simpa"
                []
                []
                (Std.Tactic.Simpa.simpaArgsRest
                 []
                 []
                 ["only"]
                 [(Tactic.simpArgs
                   "["
                   [(Tactic.simpLemma [] [] `Set.mem_preimage)
                    ","
                    (Tactic.simpLemma [] [] `eL.apply_symm_apply)
                    ","
                    (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `pi_univ_Icc)
                    ","
                    (Tactic.simpLemma [] [] (Term.app `interior_pi_set [`finite_univ]))
                    ","
                    (Tactic.simpLemma [] [] `interior_Icc)]
                   "]")]
                 ["using" (Term.proj `hx "." (fieldIdx "1"))]))])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule
                   [(patternIgnore (token.«← » "←"))]
                   (Term.app `he_vol.integrable_on_comp_preimage [`he_emb]))
                  ","
                  (Tactic.rwRule [] `hIcc)]
                 "]")
                [])
               []
               (Tactic.simp
                "simp"
                []
                []
                []
                ["["
                 [(Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `hDF)
                  ","
                  (Tactic.simpLemma
                   []
                   []
                   (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
                  ","
                  (Tactic.simpLemma [] [] `Hi)]
                 "]"]
                [])])]))))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(convert
           "convert"
           []
           (Term.app
            `integral_divergence_of_has_fderiv_within_at_off_countable'
            [(Term.app `eL [`a])
             (Term.app `eL [`b])
             (Term.app
              (Term.proj (Term.app `he_ord [(Term.hole "_") (Term.hole "_")]) "." (fieldIdx "2"))
              [`hle])
             (Term.fun
              "fun"
              (Term.basicFun [`i `x] [] "=>" (Term.app `f [`i (Term.app `eL.symm [`x])])))
             (Term.fun
              "fun"
              (Term.basicFun
               [`i `x]
               []
               "=>"
               (ContinuousLinearMap.Topology.Algebra.Module.Basic.«term_∘L_»
                (Term.app `f' [`i (Term.app `eL.symm [`x])])
                " ∘L "
                (Term.typeAscription
                 "("
                 `eL.symm
                 ":"
                 [(Topology.Algebra.Module.Basic.«term_→L[_]_»
                   (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")
                   " →L["
                   (Data.Real.Basic.termℝ "ℝ")
                   "] "
                   `F)]
                 ")"))))
             (Set.Data.Set.Image.«term_⁻¹'_» `eL.symm " ⁻¹' " `s)
             (Term.app `hs.preimage [`eL.symm.injective])
             (Term.hole "_")
             (Term.hole "_")
             (Term.hole "_")])
           [])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.exact
             "exact"
             (Term.fun
              "fun"
              (Term.basicFun
               [`i]
               []
               "=>"
               (Term.app
                (Term.proj (Term.app `Hc [`i]) "." `comp)
                [`eL.symm.continuous_on `hIcc'.subset]))))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.refine'
             "refine'"
             (Term.fun
              "fun"
              (Term.basicFun
               [`x `hx `i]
               []
               "=>"
               (Term.app
                (Term.proj
                 (Term.app
                  `Hd
                  [(Term.app `eL.symm [`x])
                   (Term.anonymousCtor
                    "⟨"
                    [(Term.hole "_") "," (Term.proj `hx "." (fieldIdx "2"))]
                    "⟩")
                   `i])
                 "."
                 `comp)
                [`x `eL.symm.has_fderiv_at]))))
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq "[" [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hIcc)] "]")
             [])
            []
            (Tactic.refine'
             "refine'"
             (Term.app
              `preimage_interior_subset_interior_preimage
              [`eL.continuous (Term.hole "_")]))
            []
            (Std.Tactic.Simpa.simpa
             "simpa"
             []
             []
             (Std.Tactic.Simpa.simpaArgsRest
              []
              []
              ["only"]
              [(Tactic.simpArgs
                "["
                [(Tactic.simpLemma [] [] `Set.mem_preimage)
                 ","
                 (Tactic.simpLemma [] [] `eL.apply_symm_apply)
                 ","
                 (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `pi_univ_Icc)
                 ","
                 (Tactic.simpLemma [] [] (Term.app `interior_pi_set [`finite_univ]))
                 ","
                 (Tactic.simpLemma [] [] `interior_Icc)]
                "]")]
              ["using" (Term.proj `hx "." (fieldIdx "1"))]))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule
                [(patternIgnore (token.«← » "←"))]
                (Term.app `he_vol.integrable_on_comp_preimage [`he_emb]))
               ","
               (Tactic.rwRule [] `hIcc)]
              "]")
             [])
            []
            (Tactic.simp
             "simp"
             []
             []
             []
             ["["
              [(Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `hDF)
               ","
               (Tactic.simpLemma
                []
                []
                (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
               ","
               (Tactic.simpLemma [] [] `Hi)]
              "]"]
             [])])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule
            [(patternIgnore (token.«← » "←"))]
            (Term.app `he_vol.integrable_on_comp_preimage [`he_emb]))
           ","
           (Tactic.rwRule [] `hIcc)]
          "]")
         [])
        []
        (Tactic.simp
         "simp"
         []
         []
         []
         ["["
          [(Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `hDF)
           ","
           (Tactic.simpLemma
            []
            []
            (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
           ","
           (Tactic.simpLemma [] [] `Hi)]
          "]"]
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       []
       ["["
        [(Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `hDF)
         ","
         (Tactic.simpLemma
          []
          []
          (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")"))
         ","
         (Tactic.simpLemma [] [] `Hi)]
        "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Hi
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.paren "(" («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·")) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_∘_» (Term.cdot "·") "∘" (Term.cdot "·"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.cdot "·")
[PrettyPrinter.parenthesize] ...precedences are 90 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 90, term))
      (Term.cdot "·")
[PrettyPrinter.parenthesize] ...precedences are 91 >? 1024, (none, [anonymous]) <=? (some 90, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 90, (some 90, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hDF
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule
          [(patternIgnore (token.«← » "←"))]
          (Term.app `he_vol.integrable_on_comp_preimage [`he_emb]))
         ","
         (Tactic.rwRule [] `hIcc)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hIcc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `he_vol.integrable_on_comp_preimage [`he_emb])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `he_emb
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `he_vol.integrable_on_comp_preimage
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.refine'
         "refine'"
         (Term.fun
          "fun"
          (Term.basicFun
           [`x `hx `i]
           []
           "=>"
           (Term.app
            (Term.proj
             (Term.app
              `Hd
              [(Term.app `eL.symm [`x])
               (Term.anonymousCtor "⟨" [(Term.hole "_") "," (Term.proj `hx "." (fieldIdx "2"))] "⟩")
               `i])
             "."
             `comp)
            [`x `eL.symm.has_fderiv_at]))))
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hIcc)] "]")
         [])
        []
        (Tactic.refine'
         "refine'"
         (Term.app `preimage_interior_subset_interior_preimage [`eL.continuous (Term.hole "_")]))
        []
        (Std.Tactic.Simpa.simpa
         "simpa"
         []
         []
         (Std.Tactic.Simpa.simpaArgsRest
          []
          []
          ["only"]
          [(Tactic.simpArgs
            "["
            [(Tactic.simpLemma [] [] `Set.mem_preimage)
             ","
             (Tactic.simpLemma [] [] `eL.apply_symm_apply)
             ","
             (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `pi_univ_Icc)
             ","
             (Tactic.simpLemma [] [] (Term.app `interior_pi_set [`finite_univ]))
             ","
             (Tactic.simpLemma [] [] `interior_Icc)]
            "]")]
          ["using" (Term.proj `hx "." (fieldIdx "1"))]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Simpa.simpa
       "simpa"
       []
       []
       (Std.Tactic.Simpa.simpaArgsRest
        []
        []
        ["only"]
        [(Tactic.simpArgs
          "["
          [(Tactic.simpLemma [] [] `Set.mem_preimage)
           ","
           (Tactic.simpLemma [] [] `eL.apply_symm_apply)
           ","
           (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `pi_univ_Icc)
           ","
           (Tactic.simpLemma [] [] (Term.app `interior_pi_set [`finite_univ]))
           ","
           (Tactic.simpLemma [] [] `interior_Icc)]
          "]")]
        ["using" (Term.proj `hx "." (fieldIdx "1"))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `hx "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `interior_Icc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `interior_pi_set [`finite_univ])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `finite_univ
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `interior_pi_set
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `pi_univ_Icc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eL.apply_symm_apply
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Set.mem_preimage
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app `preimage_interior_subset_interior_preimage [`eL.continuous (Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `preimage_interior_subset_interior_preimage [`eL.continuous (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `eL.continuous
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `preimage_interior_subset_interior_preimage
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hIcc)] "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hIcc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.fun
        "fun"
        (Term.basicFun
         [`x `hx `i]
         []
         "=>"
         (Term.app
          (Term.proj
           (Term.app
            `Hd
            [(Term.app `eL.symm [`x])
             (Term.anonymousCtor "⟨" [(Term.hole "_") "," (Term.proj `hx "." (fieldIdx "2"))] "⟩")
             `i])
           "."
           `comp)
          [`x `eL.symm.has_fderiv_at]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x `hx `i]
        []
        "=>"
        (Term.app
         (Term.proj
          (Term.app
           `Hd
           [(Term.app `eL.symm [`x])
            (Term.anonymousCtor "⟨" [(Term.hole "_") "," (Term.proj `hx "." (fieldIdx "2"))] "⟩")
            `i])
          "."
          `comp)
         [`x `eL.symm.has_fderiv_at])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj
        (Term.app
         `Hd
         [(Term.app `eL.symm [`x])
          (Term.anonymousCtor "⟨" [(Term.hole "_") "," (Term.proj `hx "." (fieldIdx "2"))] "⟩")
          `i])
        "."
        `comp)
       [`x `eL.symm.has_fderiv_at])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eL.symm.has_fderiv_at
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       (Term.app
        `Hd
        [(Term.app `eL.symm [`x])
         (Term.anonymousCtor "⟨" [(Term.hole "_") "," (Term.proj `hx "." (fieldIdx "2"))] "⟩")
         `i])
       "."
       `comp)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `Hd
       [(Term.app `eL.symm [`x])
        (Term.anonymousCtor "⟨" [(Term.hole "_") "," (Term.proj `hx "." (fieldIdx "2"))] "⟩")
        `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.anonymousCtor "⟨" [(Term.hole "_") "," (Term.proj `hx "." (fieldIdx "2"))] "⟩")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `hx "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.app `eL.symm [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `eL.symm
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `eL.symm [`x]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Hd
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `Hd
      [(Term.paren "(" (Term.app `eL.symm [`x]) ")")
       (Term.anonymousCtor "⟨" [(Term.hole "_") "," (Term.proj `hx "." (fieldIdx "2"))] "⟩")
       `i])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.exact
         "exact"
         (Term.fun
          "fun"
          (Term.basicFun
           [`i]
           []
           "=>"
           (Term.app
            (Term.proj (Term.app `Hc [`i]) "." `comp)
            [`eL.symm.continuous_on `hIcc'.subset]))))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.fun
        "fun"
        (Term.basicFun
         [`i]
         []
         "=>"
         (Term.app
          (Term.proj (Term.app `Hc [`i]) "." `comp)
          [`eL.symm.continuous_on `hIcc'.subset]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`i]
        []
        "=>"
        (Term.app
         (Term.proj (Term.app `Hc [`i]) "." `comp)
         [`eL.symm.continuous_on `hIcc'.subset])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj (Term.app `Hc [`i]) "." `comp) [`eL.symm.continuous_on `hIcc'.subset])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hIcc'.subset
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `eL.symm.continuous_on
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `Hc [`i]) "." `comp)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `Hc [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Hc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `Hc [`i]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (convert
       "convert"
       []
       (Term.app
        `integral_divergence_of_has_fderiv_within_at_off_countable'
        [(Term.app `eL [`a])
         (Term.app `eL [`b])
         (Term.app
          (Term.proj (Term.app `he_ord [(Term.hole "_") (Term.hole "_")]) "." (fieldIdx "2"))
          [`hle])
         (Term.fun
          "fun"
          (Term.basicFun [`i `x] [] "=>" (Term.app `f [`i (Term.app `eL.symm [`x])])))
         (Term.fun
          "fun"
          (Term.basicFun
           [`i `x]
           []
           "=>"
           (ContinuousLinearMap.Topology.Algebra.Module.Basic.«term_∘L_»
            (Term.app `f' [`i (Term.app `eL.symm [`x])])
            " ∘L "
            (Term.typeAscription
             "("
             `eL.symm
             ":"
             [(Topology.Algebra.Module.Basic.«term_→L[_]_»
               (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")
               " →L["
               (Data.Real.Basic.termℝ "ℝ")
               "] "
               `F)]
             ")"))))
         (Set.Data.Set.Image.«term_⁻¹'_» `eL.symm " ⁻¹' " `s)
         (Term.app `hs.preimage [`eL.symm.injective])
         (Term.hole "_")
         (Term.hole "_")
         (Term.hole "_")])
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `integral_divergence_of_has_fderiv_within_at_off_countable'
       [(Term.app `eL [`a])
        (Term.app `eL [`b])
        (Term.app
         (Term.proj (Term.app `he_ord [(Term.hole "_") (Term.hole "_")]) "." (fieldIdx "2"))
         [`hle])
        (Term.fun "fun" (Term.basicFun [`i `x] [] "=>" (Term.app `f [`i (Term.app `eL.symm [`x])])))
        (Term.fun
         "fun"
         (Term.basicFun
          [`i `x]
          []
          "=>"
          (ContinuousLinearMap.Topology.Algebra.Module.Basic.«term_∘L_»
           (Term.app `f' [`i (Term.app `eL.symm [`x])])
           " ∘L "
           (Term.typeAscription
            "("
            `eL.symm
            ":"
            [(Topology.Algebra.Module.Basic.«term_→L[_]_»
              (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")
              " →L["
              (Data.Real.Basic.termℝ "ℝ")
              "] "
              `F)]
            ")"))))
        (Set.Data.Set.Image.«term_⁻¹'_» `eL.symm " ⁻¹' " `s)
        (Term.app `hs.preimage [`eL.symm.injective])
        (Term.hole "_")
        (Term.hole "_")
        (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.app `hs.preimage [`eL.symm.injective])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eL.symm.injective
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hs.preimage
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `hs.preimage [`eL.symm.injective])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Image.«term_⁻¹'_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Set.Data.Set.Image.«term_⁻¹'_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Set.Data.Set.Image.«term_⁻¹'_» `eL.symm " ⁻¹' " `s)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `s
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `eL.symm
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 80, (some 81, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Set.Data.Set.Image.«term_⁻¹'_» `eL.symm " ⁻¹' " `s)
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`i `x]
        []
        "=>"
        (ContinuousLinearMap.Topology.Algebra.Module.Basic.«term_∘L_»
         (Term.app `f' [`i (Term.app `eL.symm [`x])])
         " ∘L "
         (Term.typeAscription
          "("
          `eL.symm
          ":"
          [(Topology.Algebra.Module.Basic.«term_→L[_]_»
            (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")
            " →L["
            (Data.Real.Basic.termℝ "ℝ")
            "] "
            `F)]
          ")"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (ContinuousLinearMap.Topology.Algebra.Module.Basic.«term_∘L_»
       (Term.app `f' [`i (Term.app `eL.symm [`x])])
       " ∘L "
       (Term.typeAscription
        "("
        `eL.symm
        ":"
        [(Topology.Algebra.Module.Basic.«term_→L[_]_»
          (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")
          " →L["
          (Data.Real.Basic.termℝ "ℝ")
          "] "
          `F)]
        ")"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.typeAscription
       "("
       `eL.symm
       ":"
       [(Topology.Algebra.Module.Basic.«term_→L[_]_»
         (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")
         " →L["
         (Data.Real.Basic.termℝ "ℝ")
         "] "
         `F)]
       ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Topology.Algebra.Module.Basic.«term_→L[_]_»
       (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")
       " →L["
       (Data.Real.Basic.termℝ "ℝ")
       "] "
       `F)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `F
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹» "ℝⁿ⁺¹")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝⁿ⁺¹»', expected 'MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termℝⁿ⁺¹._@.MeasureTheory.Integral.DivergenceTheorem._hyg.51'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.basicFun', expected 'Lean.Parser.Term.matchAlts'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    An auxiliary lemma that is used to specialize the general divergence theorem to spaces that do
    not have the form `fin n → ℝ`. -/
  theorem
    integral_divergence_of_has_fderiv_within_at_off_countable_of_equiv
    { F : Type _ }
        [ NormedAddCommGroup F ]
        [ NormedSpace ℝ F ]
        [ PartialOrder F ]
        [ MeasureSpace F ]
        [ BorelSpace F ]
        ( eL : F ≃L[ ℝ ] ℝⁿ⁺¹ )
        ( he_ord : ∀ x y , eL x ≤ eL y ↔ x ≤ y )
        ( he_vol : MeasurePreserving eL volume volume )
        ( f : Fin n + 1 → F → E )
        ( f' : Fin n + 1 → F → F →L[ ℝ ] E )
        ( s : Set F )
        ( hs : s . Countable )
        ( a b : F )
        ( hle : a ≤ b )
        ( Hc : ∀ i , ContinuousOn f i icc a b )
        ( Hd : ∀ x ∈ interior icc a b \ s , ∀ ( i ) , HasFderivAt f i f' i x x )
        ( DF : F → E )
        ( hDF : ∀ x , DF x = ∑ i , f' i x eL . symm <| e i )
        ( Hi : IntegrableOn DF icc a b )
      :
        ∫ x in icc a b , DF x
          =
          ∑
            i : Fin n + 1
            ,
            ∫
                x
                in
                icc eL a ∘ i . succAbove eL b ∘ i . succAbove
                ,
                f i eL . symm <| i . insertNth eL b i x
              -
              ∫
                x
                in
                icc eL a ∘ i . succAbove eL b ∘ i . succAbove
                ,
                f i eL . symm <| i . insertNth eL a i x
    :=
      have
        he_emb
          : MeasurableEmbedding eL
          :=
          eL . toHomeomorph . toMeasurableEquiv . MeasurableEmbedding
        have
          hIcc
            : eL ⁻¹' icc eL a eL b = icc a b
            :=
            by ext1 x simp only [ Set.mem_preimage , Set.mem_Icc , he_ord ]
          have
            hIcc'
              : icc eL a eL b = eL . symm ⁻¹' icc a b
              :=
              by rw [ ← hIcc , eL.symm_preimage_preimage ]
            calc
              ∫ x in icc a b , DF x = ∫ x in icc a b , ∑ i , f' i x eL . symm <| e i
                :=
                by simp only [ hDF ]
              _ = ∫ x in icc eL a eL b , ∑ i , f' i eL . symm x eL . symm <| e i
                  :=
                  by
                    rw [ ← he_vol.set_integral_preimage_emb he_emb ]
                      simp only [ hIcc , eL.symm_apply_apply ]
                _
                    =
                    ∑
                      i : Fin n + 1
                      ,
                      ∫
                          x
                          in
                          icc eL a ∘ i . succAbove eL b ∘ i . succAbove
                          ,
                          f i eL . symm <| i . insertNth eL b i x
                        -
                        ∫
                          x
                          in
                          icc eL a ∘ i . succAbove eL b ∘ i . succAbove
                          ,
                          f i eL . symm <| i . insertNth eL a i x
                  :=
                  by
                    convert
                        integral_divergence_of_has_fderiv_within_at_off_countable'
                          eL a
                            eL b
                            he_ord _ _ . 2 hle
                            fun i x => f i eL.symm x
                            fun i x => f' i eL.symm x ∘L ( eL.symm : ℝⁿ⁺¹ →L[ ℝ ] F )
                            eL.symm ⁻¹' s
                            hs.preimage eL.symm.injective
                            _
                            _
                            _
                      · exact fun i => Hc i . comp eL.symm.continuous_on hIcc'.subset
                      ·
                        refine'
                            fun
                              x hx i => Hd eL.symm x ⟨ _ , hx . 2 ⟩ i . comp x eL.symm.has_fderiv_at
                          rw [ ← hIcc ]
                          refine' preimage_interior_subset_interior_preimage eL.continuous _
                          simpa
                            only
                              [
                                Set.mem_preimage
                                  ,
                                  eL.apply_symm_apply
                                  ,
                                  ← pi_univ_Icc
                                  ,
                                  interior_pi_set finite_univ
                                  ,
                                  interior_Icc
                                ]
                              using hx . 1
                      ·
                        rw [ ← he_vol.integrable_on_comp_preimage he_emb , hIcc ]
                          simp [ ← hDF , ( · ∘ · ) , Hi ]
#align
  measure_theory.integral_divergence_of_has_fderiv_within_at_off_countable_of_equiv MeasureTheory.integral_divergence_of_has_fderiv_within_at_off_countable_of_equiv

end

open Interval

open ContinuousLinearMap (smul_right)

-- mathport name: «exprℝ¹»
local notation "ℝ¹" => Fin 1 → ℝ

-- mathport name: «exprℝ²»
local notation "ℝ²" => Fin 2 → ℝ

-- mathport name: «exprE¹»
local notation "E¹" => Fin 1 → E

-- mathport name: «exprE²»
local notation "E²" => Fin 2 → E

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "**Fundamental theorem of calculus, part 2**. This version assumes that `f` is continuous on the\ninterval and is differentiable off a countable set `s`.\n\nSee also\n\n* `interval_integral.integral_eq_sub_of_has_deriv_right_of_le` for a version that only assumes right\ndifferentiability of `f`;\n\n* `measure_theory.integral_eq_of_has_deriv_within_at_off_countable` for a version that works both\n  for `a ≤ b` and `b ≤ a` at the expense of using unordered intervals instead of `set.Icc`. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `integral_eq_of_has_deriv_within_at_off_countable_of_le [])
      (Command.declSig
       [(Term.explicitBinder
         "("
         [`f `f']
         [":" (Term.arrow (Data.Real.Basic.termℝ "ℝ") "→" `E)]
         []
         ")")
        (Term.implicitBinder "{" [`a `b] [":" (Data.Real.Basic.termℝ "ℝ")] "}")
        (Term.explicitBinder "(" [`hle] [":" («term_≤_» `a "≤" `b)] [] ")")
        (Term.implicitBinder "{" [`s] [":" (Term.app `Set [(Data.Real.Basic.termℝ "ℝ")])] "}")
        (Term.explicitBinder "(" [`hs] [":" (Term.proj `s "." `Countable)] [] ")")
        (Term.explicitBinder
         "("
         [`Hc]
         [":" (Term.app `ContinuousOn [`f (Term.app `icc [`a `b])])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`Hd]
         [":"
          (Std.ExtendedBinder.«term∀__,_»
           "∀"
           (Lean.binderIdent `x)
           («binderTerm∈_» "∈" («term_\_» (Term.app `ioo [`a `b]) "\\" `s))
           ","
           (Term.app `HasDerivAt [`f (Term.app `f' [`x]) `x]))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`Hi]
         [":" (Term.app `IntervalIntegrable [`f' `volume `a `b])]
         []
         ")")]
       (Term.typeSpec
        ":"
        («term_=_»
         (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
          "∫"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
          " in "
          `a
          ".."
          `b
          ", "
          (Term.app `f' [`x]))
         "="
         («term_-_» (Term.app `f [`b]) "-" (Term.app `f [`a])))))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Mathlib.Tactic.set
            "set"
            []
            (Mathlib.Tactic.setArgsRest
             `e
             [":"
              (Topology.Algebra.Module.Basic.«term_≃L[_]_»
               (Data.Real.Basic.termℝ "ℝ")
               " ≃L["
               (Data.Real.Basic.termℝ "ℝ")
               "] "
               (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝ¹» "ℝ¹"))]
             ":="
             (Term.proj
              (Term.app
               `ContinuousLinearEquiv.funUnique
               [(Term.app `Fin [(num "1")])
                (Data.Real.Basic.termℝ "ℝ")
                (Data.Real.Basic.termℝ "ℝ")])
              "."
              `symm)
             []))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`e_symm []]
              [(Term.typeSpec
                ":"
                (Term.forall
                 "∀"
                 [`x]
                 []
                 ","
                 («term_=_» (Term.app `e.symm [`x]) "=" (Term.app `x [(num "0")]))))]
              ":="
              (Term.fun "fun" (Term.basicFun [`x] [] "=>" `rfl)))))
           []
           (Mathlib.Tactic.set
            "set"
            []
            (Mathlib.Tactic.setArgsRest
             `F'
             [":"
              (Term.arrow
               (Data.Real.Basic.termℝ "ℝ")
               "→"
               (Topology.Algebra.Module.Basic.«term_→L[_]_»
                (Data.Real.Basic.termℝ "ℝ")
                " →L["
                (Data.Real.Basic.termℝ "ℝ")
                "] "
                `E))]
             ":="
             (Term.fun
              "fun"
              (Term.basicFun
               [`x]
               []
               "=>"
               (Term.app
                `smul_right
                [(Term.typeAscription
                  "("
                  (num "1")
                  ":"
                  [(Topology.Algebra.Module.Basic.«term_→L[_]_»
                    (Data.Real.Basic.termℝ "ℝ")
                    " →L["
                    (Data.Real.Basic.termℝ "ℝ")
                    "] "
                    (Data.Real.Basic.termℝ "ℝ"))]
                  ")")
                 (Term.app `f' [`x])])))
             []))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`hF' []]
              [(Term.typeSpec
                ":"
                (Term.forall
                 "∀"
                 [`x `y]
                 []
                 ","
                 («term_=_»
                  (Term.app `F' [`x `y])
                  "="
                  (Algebra.Group.Defs.«term_•_» `y " • " (Term.app `f' [`x])))))]
              ":="
              (Term.fun "fun" (Term.basicFun [`x `y] [] "=>" `rfl)))))
           []
           (calcTactic
            "calc"
            (calcStep
             («term_=_»
              (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
               "∫"
               (Std.ExtendedBinder.extBinders
                (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
               " in "
               `a
               ".."
               `b
               ", "
               (Term.app `f' [`x]))
              "="
              (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
               "∫"
               (Std.ExtendedBinder.extBinders
                (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
               " in "
               (Term.app `Icc [`a `b])
               ", "
               (Term.app `f' [`x])))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.simp
                  "simp"
                  []
                  []
                  ["only"]
                  ["["
                   [(Tactic.simpLemma [] [] (Term.app `intervalIntegral.integral_of_le [`hle]))
                    ","
                    (Tactic.simpLemma [] [] (Term.app `set_integral_congr_set_ae [`Ioc_ae_eq_Icc]))]
                   "]"]
                  [])]))))
            [(calcStep
              («term_=_»
               (Term.hole "_")
               "="
               (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
                "∑"
                (Std.ExtendedBinder.extBinders
                 (Std.ExtendedBinder.extBinder
                  (Lean.binderIdent `i)
                  [(group ":" (Term.app `Fin [(num "1")]))]))
                ", "
                («term_-_»
                 (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                  "∫"
                  (Std.ExtendedBinder.extBinders
                   (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                  " in "
                  (Term.app
                   `Icc
                   [(«term_∘_» (Term.app `e [`a]) "∘" (Term.proj `i "." `succAbove))
                    («term_∘_» (Term.app `e [`b]) "∘" (Term.proj `i "." `succAbove))])
                  ", "
                  (Term.app
                   `f
                   [(«term_<|_»
                     `e.symm
                     "<|"
                     (Term.app (Term.proj `i "." `insertNth) [(Term.app `e [`b `i]) `x]))]))
                 "-"
                 (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                  "∫"
                  (Std.ExtendedBinder.extBinders
                   (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                  " in "
                  (Term.app
                   `Icc
                   [(«term_∘_» (Term.app `e [`a]) "∘" (Term.proj `i "." `succAbove))
                    («term_∘_» (Term.app `e [`b]) "∘" (Term.proj `i "." `succAbove))])
                  ", "
                  (Term.app
                   `f
                   [(«term_<|_»
                     `e.symm
                     "<|"
                     (Term.app (Term.proj `i "." `insertNth) [(Term.app `e [`a `i]) `x]))])))))
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.simp
                   "simp"
                   []
                   []
                   ["only"]
                   ["["
                    [(Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `interior_Icc)]
                    "]"]
                   [(Tactic.location "at" (Tactic.locationHyp [`Hd] []))])
                  []
                  (Tactic.refine'
                   "refine'"
                   (Term.app
                    `integral_divergence_of_has_fderiv_within_at_off_countable_of_equiv
                    [`e
                     (Term.hole "_")
                     (Term.hole "_")
                     (Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `f))
                     (Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `F'))
                     `s
                     `hs
                     `a
                     `b
                     `hle
                     (Term.fun "fun" (Term.basicFun [`i] [] "=>" `Hc))
                     (Term.fun "fun" (Term.basicFun [`x `hx `i] [] "=>" (Term.app `Hd [`x `hx])))
                     (Term.hole "_")
                     (Term.hole "_")
                     (Term.hole "_")]))
                  []
                  (tactic__
                   (cdotTk (patternIgnore (token.«· » "·")))
                   [(Tactic.exact
                     "exact"
                     (Term.fun
                      "fun"
                      (Term.basicFun
                       [`x `y]
                       []
                       "=>"
                       (Term.proj
                        (Term.proj
                         (Term.app
                          `OrderIso.funUnique
                          [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
                         "."
                         `symm)
                        "."
                        `le_iff_le))))])
                  []
                  (tactic__
                   (cdotTk (patternIgnore (token.«· » "·")))
                   [(Tactic.exact
                     "exact"
                     (Term.app
                      (Term.proj
                       (Term.app
                        `volume_preserving_fun_unique
                        [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
                       "."
                       `symm)
                      [(Term.hole "_")]))])
                  []
                  (tactic__
                   (cdotTk (patternIgnore (token.«· » "·")))
                   [(Tactic.intro "intro" [`x])
                    []
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule [] `Fin.sum_univ_one)
                       ","
                       (Tactic.rwRule [] `hF')
                       ","
                       (Tactic.rwRule [] `e_symm)
                       ","
                       (Tactic.rwRule [] `Pi.single_eq_same)
                       ","
                       (Tactic.rwRule [] `one_smul)]
                      "]")
                     [])])
                  []
                  (tactic__
                   (cdotTk (patternIgnore (token.«· » "·")))
                   [(Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule
                        []
                        (Term.app `interval_integrable_iff_integrable_Ioc_of_le [`hle]))]
                      "]")
                     [(Tactic.location "at" (Tactic.locationHyp [`Hi] []))])
                    []
                    (Tactic.exact "exact" (Term.app `Hi.congr_set_ae [`Ioc_ae_eq_Icc.symm]))])]))))
             (calcStep
              («term_=_» (Term.hole "_") "=" («term_-_» (Term.app `f [`b]) "-" (Term.app `f [`a])))
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.simp
                   "simp"
                   []
                   []
                   ["only"]
                   ["["
                    [(Tactic.simpLemma [] [] `Fin.sum_univ_one)
                     ","
                     (Tactic.simpLemma [] [] `e_symm)]
                    "]"]
                   [])
                  []
                  (Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     []
                     [(Term.typeSpec
                       ":"
                       (Term.forall
                        "∀"
                        [`c]
                        [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
                        ","
                        («term_=_»
                         (Term.app `const [(Term.app `Fin [(num "0")]) `c])
                         "="
                         `isEmptyElim)))]
                     ":="
                     (Term.fun
                      "fun"
                      (Term.basicFun
                       [`c]
                       []
                       "=>"
                       (Term.app `Subsingleton.elim [(Term.hole "_") (Term.hole "_")]))))))
                  []
                  (Tactic.simp
                   "simp"
                   []
                   []
                   []
                   ["["
                    [(Tactic.simpLemma [] [] `this)
                     ","
                     (Tactic.simpLemma [] [] `volume_pi)
                     ","
                     (Tactic.simpLemma
                      []
                      []
                      (Term.app
                       `measure.pi_of_empty
                       [(Term.fun
                         "fun"
                         (Term.basicFun
                          [(Term.hole "_")]
                          [(Term.typeSpec ":" (Term.app `Fin [(num "0")]))]
                          "=>"
                          `volume))]))]
                    "]"]
                   [])]))))])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Mathlib.Tactic.set
           "set"
           []
           (Mathlib.Tactic.setArgsRest
            `e
            [":"
             (Topology.Algebra.Module.Basic.«term_≃L[_]_»
              (Data.Real.Basic.termℝ "ℝ")
              " ≃L["
              (Data.Real.Basic.termℝ "ℝ")
              "] "
              (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝ¹» "ℝ¹"))]
            ":="
            (Term.proj
             (Term.app
              `ContinuousLinearEquiv.funUnique
              [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ") (Data.Real.Basic.termℝ "ℝ")])
             "."
             `symm)
            []))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`e_symm []]
             [(Term.typeSpec
               ":"
               (Term.forall
                "∀"
                [`x]
                []
                ","
                («term_=_» (Term.app `e.symm [`x]) "=" (Term.app `x [(num "0")]))))]
             ":="
             (Term.fun "fun" (Term.basicFun [`x] [] "=>" `rfl)))))
          []
          (Mathlib.Tactic.set
           "set"
           []
           (Mathlib.Tactic.setArgsRest
            `F'
            [":"
             (Term.arrow
              (Data.Real.Basic.termℝ "ℝ")
              "→"
              (Topology.Algebra.Module.Basic.«term_→L[_]_»
               (Data.Real.Basic.termℝ "ℝ")
               " →L["
               (Data.Real.Basic.termℝ "ℝ")
               "] "
               `E))]
            ":="
            (Term.fun
             "fun"
             (Term.basicFun
              [`x]
              []
              "=>"
              (Term.app
               `smul_right
               [(Term.typeAscription
                 "("
                 (num "1")
                 ":"
                 [(Topology.Algebra.Module.Basic.«term_→L[_]_»
                   (Data.Real.Basic.termℝ "ℝ")
                   " →L["
                   (Data.Real.Basic.termℝ "ℝ")
                   "] "
                   (Data.Real.Basic.termℝ "ℝ"))]
                 ")")
                (Term.app `f' [`x])])))
            []))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hF' []]
             [(Term.typeSpec
               ":"
               (Term.forall
                "∀"
                [`x `y]
                []
                ","
                («term_=_»
                 (Term.app `F' [`x `y])
                 "="
                 (Algebra.Group.Defs.«term_•_» `y " • " (Term.app `f' [`x])))))]
             ":="
             (Term.fun "fun" (Term.basicFun [`x `y] [] "=>" `rfl)))))
          []
          (calcTactic
           "calc"
           (calcStep
            («term_=_»
             (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
              "∫"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
              " in "
              `a
              ".."
              `b
              ", "
              (Term.app `f' [`x]))
             "="
             (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
              "∫"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
              " in "
              (Term.app `Icc [`a `b])
              ", "
              (Term.app `f' [`x])))
            ":="
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(Tactic.simp
                 "simp"
                 []
                 []
                 ["only"]
                 ["["
                  [(Tactic.simpLemma [] [] (Term.app `intervalIntegral.integral_of_le [`hle]))
                   ","
                   (Tactic.simpLemma [] [] (Term.app `set_integral_congr_set_ae [`Ioc_ae_eq_Icc]))]
                  "]"]
                 [])]))))
           [(calcStep
             («term_=_»
              (Term.hole "_")
              "="
              (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
               "∑"
               (Std.ExtendedBinder.extBinders
                (Std.ExtendedBinder.extBinder
                 (Lean.binderIdent `i)
                 [(group ":" (Term.app `Fin [(num "1")]))]))
               ", "
               («term_-_»
                (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                 "∫"
                 (Std.ExtendedBinder.extBinders
                  (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                 " in "
                 (Term.app
                  `Icc
                  [(«term_∘_» (Term.app `e [`a]) "∘" (Term.proj `i "." `succAbove))
                   («term_∘_» (Term.app `e [`b]) "∘" (Term.proj `i "." `succAbove))])
                 ", "
                 (Term.app
                  `f
                  [(«term_<|_»
                    `e.symm
                    "<|"
                    (Term.app (Term.proj `i "." `insertNth) [(Term.app `e [`b `i]) `x]))]))
                "-"
                (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                 "∫"
                 (Std.ExtendedBinder.extBinders
                  (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                 " in "
                 (Term.app
                  `Icc
                  [(«term_∘_» (Term.app `e [`a]) "∘" (Term.proj `i "." `succAbove))
                   («term_∘_» (Term.app `e [`b]) "∘" (Term.proj `i "." `succAbove))])
                 ", "
                 (Term.app
                  `f
                  [(«term_<|_»
                    `e.symm
                    "<|"
                    (Term.app (Term.proj `i "." `insertNth) [(Term.app `e [`a `i]) `x]))])))))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.simp
                  "simp"
                  []
                  []
                  ["only"]
                  ["[" [(Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `interior_Icc)] "]"]
                  [(Tactic.location "at" (Tactic.locationHyp [`Hd] []))])
                 []
                 (Tactic.refine'
                  "refine'"
                  (Term.app
                   `integral_divergence_of_has_fderiv_within_at_off_countable_of_equiv
                   [`e
                    (Term.hole "_")
                    (Term.hole "_")
                    (Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `f))
                    (Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `F'))
                    `s
                    `hs
                    `a
                    `b
                    `hle
                    (Term.fun "fun" (Term.basicFun [`i] [] "=>" `Hc))
                    (Term.fun "fun" (Term.basicFun [`x `hx `i] [] "=>" (Term.app `Hd [`x `hx])))
                    (Term.hole "_")
                    (Term.hole "_")
                    (Term.hole "_")]))
                 []
                 (tactic__
                  (cdotTk (patternIgnore (token.«· » "·")))
                  [(Tactic.exact
                    "exact"
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [`x `y]
                      []
                      "=>"
                      (Term.proj
                       (Term.proj
                        (Term.app
                         `OrderIso.funUnique
                         [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
                        "."
                        `symm)
                       "."
                       `le_iff_le))))])
                 []
                 (tactic__
                  (cdotTk (patternIgnore (token.«· » "·")))
                  [(Tactic.exact
                    "exact"
                    (Term.app
                     (Term.proj
                      (Term.app
                       `volume_preserving_fun_unique
                       [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
                      "."
                      `symm)
                     [(Term.hole "_")]))])
                 []
                 (tactic__
                  (cdotTk (patternIgnore (token.«· » "·")))
                  [(Tactic.intro "intro" [`x])
                   []
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule [] `Fin.sum_univ_one)
                      ","
                      (Tactic.rwRule [] `hF')
                      ","
                      (Tactic.rwRule [] `e_symm)
                      ","
                      (Tactic.rwRule [] `Pi.single_eq_same)
                      ","
                      (Tactic.rwRule [] `one_smul)]
                     "]")
                    [])])
                 []
                 (tactic__
                  (cdotTk (patternIgnore (token.«· » "·")))
                  [(Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule
                       []
                       (Term.app `interval_integrable_iff_integrable_Ioc_of_le [`hle]))]
                     "]")
                    [(Tactic.location "at" (Tactic.locationHyp [`Hi] []))])
                   []
                   (Tactic.exact "exact" (Term.app `Hi.congr_set_ae [`Ioc_ae_eq_Icc.symm]))])]))))
            (calcStep
             («term_=_» (Term.hole "_") "=" («term_-_» (Term.app `f [`b]) "-" (Term.app `f [`a])))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.simp
                  "simp"
                  []
                  []
                  ["only"]
                  ["["
                   [(Tactic.simpLemma [] [] `Fin.sum_univ_one) "," (Tactic.simpLemma [] [] `e_symm)]
                   "]"]
                  [])
                 []
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    []
                    [(Term.typeSpec
                      ":"
                      (Term.forall
                       "∀"
                       [`c]
                       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
                       ","
                       («term_=_»
                        (Term.app `const [(Term.app `Fin [(num "0")]) `c])
                        "="
                        `isEmptyElim)))]
                    ":="
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [`c]
                      []
                      "=>"
                      (Term.app `Subsingleton.elim [(Term.hole "_") (Term.hole "_")]))))))
                 []
                 (Tactic.simp
                  "simp"
                  []
                  []
                  []
                  ["["
                   [(Tactic.simpLemma [] [] `this)
                    ","
                    (Tactic.simpLemma [] [] `volume_pi)
                    ","
                    (Tactic.simpLemma
                     []
                     []
                     (Term.app
                      `measure.pi_of_empty
                      [(Term.fun
                        "fun"
                        (Term.basicFun
                         [(Term.hole "_")]
                         [(Term.typeSpec ":" (Term.app `Fin [(num "0")]))]
                         "=>"
                         `volume))]))]
                   "]"]
                  [])]))))])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (calcTactic
       "calc"
       (calcStep
        («term_=_»
         (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
          "∫"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
          " in "
          `a
          ".."
          `b
          ", "
          (Term.app `f' [`x]))
         "="
         (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
          "∫"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
          " in "
          (Term.app `Icc [`a `b])
          ", "
          (Term.app `f' [`x])))
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(Tactic.simp
             "simp"
             []
             []
             ["only"]
             ["["
              [(Tactic.simpLemma [] [] (Term.app `intervalIntegral.integral_of_le [`hle]))
               ","
               (Tactic.simpLemma [] [] (Term.app `set_integral_congr_set_ae [`Ioc_ae_eq_Icc]))]
              "]"]
             [])]))))
       [(calcStep
         («term_=_»
          (Term.hole "_")
          "="
          (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
           "∑"
           (Std.ExtendedBinder.extBinders
            (Std.ExtendedBinder.extBinder
             (Lean.binderIdent `i)
             [(group ":" (Term.app `Fin [(num "1")]))]))
           ", "
           («term_-_»
            (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
             "∫"
             (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
             " in "
             (Term.app
              `Icc
              [(«term_∘_» (Term.app `e [`a]) "∘" (Term.proj `i "." `succAbove))
               («term_∘_» (Term.app `e [`b]) "∘" (Term.proj `i "." `succAbove))])
             ", "
             (Term.app
              `f
              [(«term_<|_»
                `e.symm
                "<|"
                (Term.app (Term.proj `i "." `insertNth) [(Term.app `e [`b `i]) `x]))]))
            "-"
            (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
             "∫"
             (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
             " in "
             (Term.app
              `Icc
              [(«term_∘_» (Term.app `e [`a]) "∘" (Term.proj `i "." `succAbove))
               («term_∘_» (Term.app `e [`b]) "∘" (Term.proj `i "." `succAbove))])
             ", "
             (Term.app
              `f
              [(«term_<|_»
                `e.symm
                "<|"
                (Term.app (Term.proj `i "." `insertNth) [(Term.app `e [`a `i]) `x]))])))))
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.simp
              "simp"
              []
              []
              ["only"]
              ["[" [(Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `interior_Icc)] "]"]
              [(Tactic.location "at" (Tactic.locationHyp [`Hd] []))])
             []
             (Tactic.refine'
              "refine'"
              (Term.app
               `integral_divergence_of_has_fderiv_within_at_off_countable_of_equiv
               [`e
                (Term.hole "_")
                (Term.hole "_")
                (Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `f))
                (Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `F'))
                `s
                `hs
                `a
                `b
                `hle
                (Term.fun "fun" (Term.basicFun [`i] [] "=>" `Hc))
                (Term.fun "fun" (Term.basicFun [`x `hx `i] [] "=>" (Term.app `Hd [`x `hx])))
                (Term.hole "_")
                (Term.hole "_")
                (Term.hole "_")]))
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.exact
                "exact"
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [`x `y]
                  []
                  "=>"
                  (Term.proj
                   (Term.proj
                    (Term.app
                     `OrderIso.funUnique
                     [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
                    "."
                    `symm)
                   "."
                   `le_iff_le))))])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.exact
                "exact"
                (Term.app
                 (Term.proj
                  (Term.app
                   `volume_preserving_fun_unique
                   [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
                  "."
                  `symm)
                 [(Term.hole "_")]))])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.intro "intro" [`x])
               []
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] `Fin.sum_univ_one)
                  ","
                  (Tactic.rwRule [] `hF')
                  ","
                  (Tactic.rwRule [] `e_symm)
                  ","
                  (Tactic.rwRule [] `Pi.single_eq_same)
                  ","
                  (Tactic.rwRule [] `one_smul)]
                 "]")
                [])])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule
                   []
                   (Term.app `interval_integrable_iff_integrable_Ioc_of_le [`hle]))]
                 "]")
                [(Tactic.location "at" (Tactic.locationHyp [`Hi] []))])
               []
               (Tactic.exact "exact" (Term.app `Hi.congr_set_ae [`Ioc_ae_eq_Icc.symm]))])]))))
        (calcStep
         («term_=_» (Term.hole "_") "=" («term_-_» (Term.app `f [`b]) "-" (Term.app `f [`a])))
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.simp
              "simp"
              []
              []
              ["only"]
              ["["
               [(Tactic.simpLemma [] [] `Fin.sum_univ_one) "," (Tactic.simpLemma [] [] `e_symm)]
               "]"]
              [])
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                [(Term.typeSpec
                  ":"
                  (Term.forall
                   "∀"
                   [`c]
                   [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
                   ","
                   («term_=_»
                    (Term.app `const [(Term.app `Fin [(num "0")]) `c])
                    "="
                    `isEmptyElim)))]
                ":="
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [`c]
                  []
                  "=>"
                  (Term.app `Subsingleton.elim [(Term.hole "_") (Term.hole "_")]))))))
             []
             (Tactic.simp
              "simp"
              []
              []
              []
              ["["
               [(Tactic.simpLemma [] [] `this)
                ","
                (Tactic.simpLemma [] [] `volume_pi)
                ","
                (Tactic.simpLemma
                 []
                 []
                 (Term.app
                  `measure.pi_of_empty
                  [(Term.fun
                    "fun"
                    (Term.basicFun
                     [(Term.hole "_")]
                     [(Term.typeSpec ":" (Term.app `Fin [(num "0")]))]
                     "=>"
                     `volume))]))]
               "]"]
              [])]))))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.simp
           "simp"
           []
           []
           ["only"]
           ["["
            [(Tactic.simpLemma [] [] `Fin.sum_univ_one) "," (Tactic.simpLemma [] [] `e_symm)]
            "]"]
           [])
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               (Term.forall
                "∀"
                [`c]
                [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
                ","
                («term_=_» (Term.app `const [(Term.app `Fin [(num "0")]) `c]) "=" `isEmptyElim)))]
             ":="
             (Term.fun
              "fun"
              (Term.basicFun
               [`c]
               []
               "=>"
               (Term.app `Subsingleton.elim [(Term.hole "_") (Term.hole "_")]))))))
          []
          (Tactic.simp
           "simp"
           []
           []
           []
           ["["
            [(Tactic.simpLemma [] [] `this)
             ","
             (Tactic.simpLemma [] [] `volume_pi)
             ","
             (Tactic.simpLemma
              []
              []
              (Term.app
               `measure.pi_of_empty
               [(Term.fun
                 "fun"
                 (Term.basicFun
                  [(Term.hole "_")]
                  [(Term.typeSpec ":" (Term.app `Fin [(num "0")]))]
                  "=>"
                  `volume))]))]
            "]"]
           [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       []
       ["["
        [(Tactic.simpLemma [] [] `this)
         ","
         (Tactic.simpLemma [] [] `volume_pi)
         ","
         (Tactic.simpLemma
          []
          []
          (Term.app
           `measure.pi_of_empty
           [(Term.fun
             "fun"
             (Term.basicFun
              [(Term.hole "_")]
              [(Term.typeSpec ":" (Term.app `Fin [(num "0")]))]
              "=>"
              `volume))]))]
        "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `measure.pi_of_empty
       [(Term.fun
         "fun"
         (Term.basicFun
          [(Term.hole "_")]
          [(Term.typeSpec ":" (Term.app `Fin [(num "0")]))]
          "=>"
          `volume))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [(Term.hole "_")]
        [(Term.typeSpec ":" (Term.app `Fin [(num "0")]))]
        "=>"
        `volume))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `volume
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Fin [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Fin
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `measure.pi_of_empty
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `volume_pi
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `this
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           (Term.forall
            "∀"
            [`c]
            [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
            ","
            («term_=_» (Term.app `const [(Term.app `Fin [(num "0")]) `c]) "=" `isEmptyElim)))]
         ":="
         (Term.fun
          "fun"
          (Term.basicFun
           [`c]
           []
           "=>"
           (Term.app `Subsingleton.elim [(Term.hole "_") (Term.hole "_")]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun [`c] [] "=>" (Term.app `Subsingleton.elim [(Term.hole "_") (Term.hole "_")])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Subsingleton.elim [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Subsingleton.elim
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `c
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`c]
       [(Term.typeSpec ":" (Data.Real.Basic.termℝ "ℝ"))]
       ","
       («term_=_» (Term.app `const [(Term.app `Fin [(num "0")]) `c]) "=" `isEmptyElim))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `const [(Term.app `Fin [(num "0")]) `c]) "=" `isEmptyElim)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `isEmptyElim
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `const [(Term.app `Fin [(num "0")]) `c])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `c
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `Fin [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Fin
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `Fin [(num "0")]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `const
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       ["only"]
       ["[" [(Tactic.simpLemma [] [] `Fin.sum_univ_one) "," (Tactic.simpLemma [] [] `e_symm)] "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `e_symm
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Fin.sum_univ_one
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.hole "_") "=" («term_-_» (Term.app `f [`b]) "-" (Term.app `f [`a])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_-_» (Term.app `f [`b]) "-" (Term.app `f [`a]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`a])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `a
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (Term.app `f [`b])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1022, (some 1023, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.simp
           "simp"
           []
           []
           ["only"]
           ["[" [(Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `interior_Icc)] "]"]
           [(Tactic.location "at" (Tactic.locationHyp [`Hd] []))])
          []
          (Tactic.refine'
           "refine'"
           (Term.app
            `integral_divergence_of_has_fderiv_within_at_off_countable_of_equiv
            [`e
             (Term.hole "_")
             (Term.hole "_")
             (Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `f))
             (Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `F'))
             `s
             `hs
             `a
             `b
             `hle
             (Term.fun "fun" (Term.basicFun [`i] [] "=>" `Hc))
             (Term.fun "fun" (Term.basicFun [`x `hx `i] [] "=>" (Term.app `Hd [`x `hx])))
             (Term.hole "_")
             (Term.hole "_")
             (Term.hole "_")]))
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.exact
             "exact"
             (Term.fun
              "fun"
              (Term.basicFun
               [`x `y]
               []
               "=>"
               (Term.proj
                (Term.proj
                 (Term.app
                  `OrderIso.funUnique
                  [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
                 "."
                 `symm)
                "."
                `le_iff_le))))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.exact
             "exact"
             (Term.app
              (Term.proj
               (Term.app
                `volume_preserving_fun_unique
                [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
               "."
               `symm)
              [(Term.hole "_")]))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.intro "intro" [`x])
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `Fin.sum_univ_one)
               ","
               (Tactic.rwRule [] `hF')
               ","
               (Tactic.rwRule [] `e_symm)
               ","
               (Tactic.rwRule [] `Pi.single_eq_same)
               ","
               (Tactic.rwRule [] `one_smul)]
              "]")
             [])])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] (Term.app `interval_integrable_iff_integrable_Ioc_of_le [`hle]))]
              "]")
             [(Tactic.location "at" (Tactic.locationHyp [`Hi] []))])
            []
            (Tactic.exact "exact" (Term.app `Hi.congr_set_ae [`Ioc_ae_eq_Icc.symm]))])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] (Term.app `interval_integrable_iff_integrable_Ioc_of_le [`hle]))]
          "]")
         [(Tactic.location "at" (Tactic.locationHyp [`Hi] []))])
        []
        (Tactic.exact "exact" (Term.app `Hi.congr_set_ae [`Ioc_ae_eq_Icc.symm]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `Hi.congr_set_ae [`Ioc_ae_eq_Icc.symm]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Hi.congr_set_ae [`Ioc_ae_eq_Icc.symm])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Ioc_ae_eq_Icc.symm
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Hi.congr_set_ae
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] (Term.app `interval_integrable_iff_integrable_Ioc_of_le [`hle]))]
        "]")
       [(Tactic.location "at" (Tactic.locationHyp [`Hi] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Hi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `interval_integrable_iff_integrable_Ioc_of_le [`hle])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hle
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `interval_integrable_iff_integrable_Ioc_of_le
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.intro "intro" [`x])
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `Fin.sum_univ_one)
           ","
           (Tactic.rwRule [] `hF')
           ","
           (Tactic.rwRule [] `e_symm)
           ","
           (Tactic.rwRule [] `Pi.single_eq_same)
           ","
           (Tactic.rwRule [] `one_smul)]
          "]")
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `Fin.sum_univ_one)
         ","
         (Tactic.rwRule [] `hF')
         ","
         (Tactic.rwRule [] `e_symm)
         ","
         (Tactic.rwRule [] `Pi.single_eq_same)
         ","
         (Tactic.rwRule [] `one_smul)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `one_smul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Pi.single_eq_same
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `e_symm
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hF'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Fin.sum_univ_one
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`x])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.exact
         "exact"
         (Term.app
          (Term.proj
           (Term.app
            `volume_preserving_fun_unique
            [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
           "."
           `symm)
          [(Term.hole "_")]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        (Term.proj
         (Term.app
          `volume_preserving_fun_unique
          [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
         "."
         `symm)
        [(Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj
        (Term.app
         `volume_preserving_fun_unique
         [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
        "."
        `symm)
       [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       (Term.app
        `volume_preserving_fun_unique
        [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
       "."
       `symm)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `volume_preserving_fun_unique
       [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.app `Fin [(num "1")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Fin
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `Fin [(num "1")]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `volume_preserving_fun_unique
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `volume_preserving_fun_unique
      [(Term.paren "(" (Term.app `Fin [(num "1")]) ")") (Data.Real.Basic.termℝ "ℝ")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.exact
         "exact"
         (Term.fun
          "fun"
          (Term.basicFun
           [`x `y]
           []
           "=>"
           (Term.proj
            (Term.proj
             (Term.app
              `OrderIso.funUnique
              [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
             "."
             `symm)
            "."
            `le_iff_le))))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.fun
        "fun"
        (Term.basicFun
         [`x `y]
         []
         "=>"
         (Term.proj
          (Term.proj
           (Term.app `OrderIso.funUnique [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
           "."
           `symm)
          "."
          `le_iff_le))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x `y]
        []
        "=>"
        (Term.proj
         (Term.proj
          (Term.app `OrderIso.funUnique [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
          "."
          `symm)
         "."
         `le_iff_le)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj
       (Term.proj
        (Term.app `OrderIso.funUnique [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
        "."
        `symm)
       "."
       `le_iff_le)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj
       (Term.app `OrderIso.funUnique [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
       "."
       `symm)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `OrderIso.funUnique [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.app `Fin [(num "1")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Fin
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `Fin [(num "1")]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `OrderIso.funUnique
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `OrderIso.funUnique
      [(Term.paren "(" (Term.app `Fin [(num "1")]) ")") (Data.Real.Basic.termℝ "ℝ")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `y
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `integral_divergence_of_has_fderiv_within_at_off_countable_of_equiv
        [`e
         (Term.hole "_")
         (Term.hole "_")
         (Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `f))
         (Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `F'))
         `s
         `hs
         `a
         `b
         `hle
         (Term.fun "fun" (Term.basicFun [`i] [] "=>" `Hc))
         (Term.fun "fun" (Term.basicFun [`x `hx `i] [] "=>" (Term.app `Hd [`x `hx])))
         (Term.hole "_")
         (Term.hole "_")
         (Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `integral_divergence_of_has_fderiv_within_at_off_countable_of_equiv
       [`e
        (Term.hole "_")
        (Term.hole "_")
        (Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `f))
        (Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `F'))
        `s
        `hs
        `a
        `b
        `hle
        (Term.fun "fun" (Term.basicFun [`i] [] "=>" `Hc))
        (Term.fun "fun" (Term.basicFun [`x `hx `i] [] "=>" (Term.app `Hd [`x `hx])))
        (Term.hole "_")
        (Term.hole "_")
        (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.fun "fun" (Term.basicFun [`x `hx `i] [] "=>" (Term.app `Hd [`x `hx])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Hd [`x `hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Hd
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun "fun" (Term.basicFun [`x `hx `i] [] "=>" (Term.app `Hd [`x `hx])))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun "fun" (Term.basicFun [`i] [] "=>" `Hc))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Hc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun "fun" (Term.basicFun [`i] [] "=>" `Hc))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hle
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `b
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hs
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `s
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `F'))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `F'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `F'))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `f))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `f
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `f))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `e
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `integral_divergence_of_has_fderiv_within_at_off_countable_of_equiv
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       ["only"]
       ["[" [(Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `interior_Icc)] "]"]
       [(Tactic.location "at" (Tactic.locationHyp [`Hd] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Hd
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `interior_Icc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_»
       (Term.hole "_")
       "="
       (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
        "∑"
        (Std.ExtendedBinder.extBinders
         (Std.ExtendedBinder.extBinder
          (Lean.binderIdent `i)
          [(group ":" (Term.app `Fin [(num "1")]))]))
        ", "
        («term_-_»
         (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
          "∫"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
          " in "
          (Term.app
           `Icc
           [(«term_∘_» (Term.app `e [`a]) "∘" (Term.proj `i "." `succAbove))
            («term_∘_» (Term.app `e [`b]) "∘" (Term.proj `i "." `succAbove))])
          ", "
          (Term.app
           `f
           [(«term_<|_»
             `e.symm
             "<|"
             (Term.app (Term.proj `i "." `insertNth) [(Term.app `e [`b `i]) `x]))]))
         "-"
         (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
          "∫"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
          " in "
          (Term.app
           `Icc
           [(«term_∘_» (Term.app `e [`a]) "∘" (Term.proj `i "." `succAbove))
            («term_∘_» (Term.app `e [`b]) "∘" (Term.proj `i "." `succAbove))])
          ", "
          (Term.app
           `f
           [(«term_<|_»
             `e.symm
             "<|"
             (Term.app (Term.proj `i "." `insertNth) [(Term.app `e [`a `i]) `x]))])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
       "∑"
       (Std.ExtendedBinder.extBinders
        (Std.ExtendedBinder.extBinder
         (Lean.binderIdent `i)
         [(group ":" (Term.app `Fin [(num "1")]))]))
       ", "
       («term_-_»
        (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
         "∫"
         (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
         " in "
         (Term.app
          `Icc
          [(«term_∘_» (Term.app `e [`a]) "∘" (Term.proj `i "." `succAbove))
           («term_∘_» (Term.app `e [`b]) "∘" (Term.proj `i "." `succAbove))])
         ", "
         (Term.app
          `f
          [(«term_<|_»
            `e.symm
            "<|"
            (Term.app (Term.proj `i "." `insertNth) [(Term.app `e [`b `i]) `x]))]))
        "-"
        (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
         "∫"
         (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
         " in "
         (Term.app
          `Icc
          [(«term_∘_» (Term.app `e [`a]) "∘" (Term.proj `i "." `succAbove))
           («term_∘_» (Term.app `e [`b]) "∘" (Term.proj `i "." `succAbove))])
         ", "
         (Term.app
          `f
          [(«term_<|_»
            `e.symm
            "<|"
            (Term.app (Term.proj `i "." `insertNth) [(Term.app `e [`a `i]) `x]))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_-_»
       (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
        "∫"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
        " in "
        (Term.app
         `Icc
         [(«term_∘_» (Term.app `e [`a]) "∘" (Term.proj `i "." `succAbove))
          («term_∘_» (Term.app `e [`b]) "∘" (Term.proj `i "." `succAbove))])
        ", "
        (Term.app
         `f
         [(«term_<|_»
           `e.symm
           "<|"
           (Term.app (Term.proj `i "." `insertNth) [(Term.app `e [`b `i]) `x]))]))
       "-"
       (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
        "∫"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
        " in "
        (Term.app
         `Icc
         [(«term_∘_» (Term.app `e [`a]) "∘" (Term.proj `i "." `succAbove))
          («term_∘_» (Term.app `e [`b]) "∘" (Term.proj `i "." `succAbove))])
        ", "
        (Term.app
         `f
         [(«term_<|_»
           `e.symm
           "<|"
           (Term.app (Term.proj `i "." `insertNth) [(Term.app `e [`a `i]) `x]))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
       "∫"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
       " in "
       (Term.app
        `Icc
        [(«term_∘_» (Term.app `e [`a]) "∘" (Term.proj `i "." `succAbove))
         («term_∘_» (Term.app `e [`b]) "∘" (Term.proj `i "." `succAbove))])
       ", "
       (Term.app
        `f
        [(«term_<|_»
          `e.symm
          "<|"
          (Term.app (Term.proj `i "." `insertNth) [(Term.app `e [`a `i]) `x]))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `f
       [(«term_<|_»
         `e.symm
         "<|"
         (Term.app (Term.proj `i "." `insertNth) [(Term.app `e [`a `i]) `x]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_» `e.symm "<|" (Term.app (Term.proj `i "." `insertNth) [(Term.app `e [`a `i]) `x]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `i "." `insertNth) [(Term.app `e [`a `i]) `x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `e [`a `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `e
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `e [`a `i]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `i "." `insertNth)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      `e.symm
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_<|_»
      `e.symm
      "<|"
      (Term.app (Term.proj `i "." `insertNth) [(Term.paren "(" (Term.app `e [`a `i]) ")") `x]))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Icc
       [(«term_∘_» (Term.app `e [`a]) "∘" (Term.proj `i "." `succAbove))
        («term_∘_» (Term.app `e [`b]) "∘" (Term.proj `i "." `succAbove))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_∘_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_∘_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_∘_» (Term.app `e [`b]) "∘" (Term.proj `i "." `succAbove))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `i "." `succAbove)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 90 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 90, term))
      (Term.app `e [`b])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `e
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 91 >? 1022, (some 1023, term) <=? (some 90, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 90, (some 90, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_∘_» (Term.app `e [`b]) "∘" (Term.proj `i "." `succAbove))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_∘_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_∘_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      («term_∘_» (Term.app `e [`a]) "∘" (Term.proj `i "." `succAbove))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `i "." `succAbove)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 90 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 90, term))
      (Term.app `e [`a])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `a
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `e
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 91 >? 1022, (some 1023, term) <=? (some 90, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 90, (some 90, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_∘_» (Term.app `e [`a]) "∘" (Term.proj `i "." `succAbove))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Icc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
       "∫"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
       " in "
       (Term.app
        `Icc
        [(«term_∘_» (Term.app `e [`a]) "∘" (Term.proj `i "." `succAbove))
         («term_∘_» (Term.app `e [`b]) "∘" (Term.proj `i "." `succAbove))])
       ", "
       (Term.app
        `f
        [(«term_<|_»
          `e.symm
          "<|"
          (Term.app (Term.proj `i "." `insertNth) [(Term.app `e [`b `i]) `x]))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `f
       [(«term_<|_»
         `e.symm
         "<|"
         (Term.app (Term.proj `i "." `insertNth) [(Term.app `e [`b `i]) `x]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_» `e.symm "<|" (Term.app (Term.proj `i "." `insertNth) [(Term.app `e [`b `i]) `x]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `i "." `insertNth) [(Term.app `e [`b `i]) `x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `e [`b `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `b
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `e
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `e [`b `i]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `i "." `insertNth)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      `e.symm
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_<|_»
      `e.symm
      "<|"
      (Term.app (Term.proj `i "." `insertNth) [(Term.paren "(" (Term.app `e [`b `i]) ")") `x]))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Icc
       [(«term_∘_» (Term.app `e [`a]) "∘" (Term.proj `i "." `succAbove))
        («term_∘_» (Term.app `e [`b]) "∘" (Term.proj `i "." `succAbove))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_∘_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_∘_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_∘_» (Term.app `e [`b]) "∘" (Term.proj `i "." `succAbove))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `i "." `succAbove)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 90 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 90, term))
      (Term.app `e [`b])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `e
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 91 >? 1022, (some 1023, term) <=? (some 90, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 90, (some 90, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_∘_» (Term.app `e [`b]) "∘" (Term.proj `i "." `succAbove))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_∘_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_∘_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      («term_∘_» (Term.app `e [`a]) "∘" (Term.proj `i "." `succAbove))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `i "." `succAbove)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 90 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 90, term))
      (Term.app `e [`a])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `a
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `e
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 91 >? 1022, (some 1023, term) <=? (some 90, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 90, (some 90, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_∘_» (Term.app `e [`a]) "∘" (Term.proj `i "." `succAbove))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Icc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1022, (some 0, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
      "∫"
      (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
      " in "
      (Term.app
       `Icc
       [(Term.paren "(" («term_∘_» (Term.app `e [`a]) "∘" (Term.proj `i "." `succAbove)) ")")
        (Term.paren "(" («term_∘_» (Term.app `e [`b]) "∘" (Term.proj `i "." `succAbove)) ")")])
      ", "
      (Term.app
       `f
       [(Term.paren
         "("
         («term_<|_»
          `e.symm
          "<|"
          (Term.app (Term.proj `i "." `insertNth) [(Term.paren "(" (Term.app `e [`b `i]) ")") `x]))
         ")")]))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Fin [(num "1")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Fin
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.simp
           "simp"
           []
           []
           ["only"]
           ["["
            [(Tactic.simpLemma [] [] (Term.app `intervalIntegral.integral_of_le [`hle]))
             ","
             (Tactic.simpLemma [] [] (Term.app `set_integral_congr_set_ae [`Ioc_ae_eq_Icc]))]
            "]"]
           [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       ["only"]
       ["["
        [(Tactic.simpLemma [] [] (Term.app `intervalIntegral.integral_of_le [`hle]))
         ","
         (Tactic.simpLemma [] [] (Term.app `set_integral_congr_set_ae [`Ioc_ae_eq_Icc]))]
        "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `set_integral_congr_set_ae [`Ioc_ae_eq_Icc])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Ioc_ae_eq_Icc
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `set_integral_congr_set_ae
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `intervalIntegral.integral_of_le [`hle])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hle
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `intervalIntegral.integral_of_le
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_»
       (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
        "∫"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
        " in "
        `a
        ".."
        `b
        ", "
        (Term.app `f' [`x]))
       "="
       (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
        "∫"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
        " in "
        (Term.app `Icc [`a `b])
        ", "
        (Term.app `f' [`x])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
       "∫"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
       " in "
       (Term.app `Icc [`a `b])
       ", "
       (Term.app `f' [`x]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f' [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Icc [`a `b])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Icc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
       "∫"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
       " in "
       `a
       ".."
       `b
       ", "
       (Term.app `f' [`x]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f' [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `a
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
      "∫"
      (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
      " in "
      `a
      ".."
      `b
      ", "
      (Term.app `f' [`x]))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hF' []]
         [(Term.typeSpec
           ":"
           (Term.forall
            "∀"
            [`x `y]
            []
            ","
            («term_=_»
             (Term.app `F' [`x `y])
             "="
             (Algebra.Group.Defs.«term_•_» `y " • " (Term.app `f' [`x])))))]
         ":="
         (Term.fun "fun" (Term.basicFun [`x `y] [] "=>" `rfl)))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [`x `y] [] "=>" `rfl))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `rfl
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `y
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`x `y]
       []
       ","
       («term_=_»
        (Term.app `F' [`x `y])
        "="
        (Algebra.Group.Defs.«term_•_» `y " • " (Term.app `f' [`x]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_»
       (Term.app `F' [`x `y])
       "="
       (Algebra.Group.Defs.«term_•_» `y " • " (Term.app `f' [`x])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Algebra.Group.Defs.«term_•_» `y " • " (Term.app `f' [`x]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f' [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      `y
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `F' [`x `y])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `y
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `F'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.set
       "set"
       []
       (Mathlib.Tactic.setArgsRest
        `F'
        [":"
         (Term.arrow
          (Data.Real.Basic.termℝ "ℝ")
          "→"
          (Topology.Algebra.Module.Basic.«term_→L[_]_»
           (Data.Real.Basic.termℝ "ℝ")
           " →L["
           (Data.Real.Basic.termℝ "ℝ")
           "] "
           `E))]
        ":="
        (Term.fun
         "fun"
         (Term.basicFun
          [`x]
          []
          "=>"
          (Term.app
           `smul_right
           [(Term.typeAscription
             "("
             (num "1")
             ":"
             [(Topology.Algebra.Module.Basic.«term_→L[_]_»
               (Data.Real.Basic.termℝ "ℝ")
               " →L["
               (Data.Real.Basic.termℝ "ℝ")
               "] "
               (Data.Real.Basic.termℝ "ℝ"))]
             ")")
            (Term.app `f' [`x])])))
        []))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x]
        []
        "=>"
        (Term.app
         `smul_right
         [(Term.typeAscription
           "("
           (num "1")
           ":"
           [(Topology.Algebra.Module.Basic.«term_→L[_]_»
             (Data.Real.Basic.termℝ "ℝ")
             " →L["
             (Data.Real.Basic.termℝ "ℝ")
             "] "
             (Data.Real.Basic.termℝ "ℝ"))]
           ")")
          (Term.app `f' [`x])])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `smul_right
       [(Term.typeAscription
         "("
         (num "1")
         ":"
         [(Topology.Algebra.Module.Basic.«term_→L[_]_»
           (Data.Real.Basic.termℝ "ℝ")
           " →L["
           (Data.Real.Basic.termℝ "ℝ")
           "] "
           (Data.Real.Basic.termℝ "ℝ"))]
         ")")
        (Term.app `f' [`x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f' [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `f' [`x]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.typeAscription
       "("
       (num "1")
       ":"
       [(Topology.Algebra.Module.Basic.«term_→L[_]_»
         (Data.Real.Basic.termℝ "ℝ")
         " →L["
         (Data.Real.Basic.termℝ "ℝ")
         "] "
         (Data.Real.Basic.termℝ "ℝ"))]
       ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Topology.Algebra.Module.Basic.«term_→L[_]_»
       (Data.Real.Basic.termℝ "ℝ")
       " →L["
       (Data.Real.Basic.termℝ "ℝ")
       "] "
       (Data.Real.Basic.termℝ "ℝ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `smul_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       (Data.Real.Basic.termℝ "ℝ")
       "→"
       (Topology.Algebra.Module.Basic.«term_→L[_]_»
        (Data.Real.Basic.termℝ "ℝ")
        " →L["
        (Data.Real.Basic.termℝ "ℝ")
        "] "
        `E))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Topology.Algebra.Module.Basic.«term_→L[_]_»
       (Data.Real.Basic.termℝ "ℝ")
       " →L["
       (Data.Real.Basic.termℝ "ℝ")
       "] "
       `E)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `E
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 25, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`e_symm []]
         [(Term.typeSpec
           ":"
           (Term.forall
            "∀"
            [`x]
            []
            ","
            («term_=_» (Term.app `e.symm [`x]) "=" (Term.app `x [(num "0")]))))]
         ":="
         (Term.fun "fun" (Term.basicFun [`x] [] "=>" `rfl)))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [`x] [] "=>" `rfl))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `rfl
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [`x]
       []
       ","
       («term_=_» (Term.app `e.symm [`x]) "=" (Term.app `x [(num "0")])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `e.symm [`x]) "=" (Term.app `x [(num "0")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `x [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `e.symm [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `e.symm
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.set
       "set"
       []
       (Mathlib.Tactic.setArgsRest
        `e
        [":"
         (Topology.Algebra.Module.Basic.«term_≃L[_]_»
          (Data.Real.Basic.termℝ "ℝ")
          " ≃L["
          (Data.Real.Basic.termℝ "ℝ")
          "] "
          (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝ¹» "ℝ¹"))]
        ":="
        (Term.proj
         (Term.app
          `ContinuousLinearEquiv.funUnique
          [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ") (Data.Real.Basic.termℝ "ℝ")])
         "."
         `symm)
        []))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj
       (Term.app
        `ContinuousLinearEquiv.funUnique
        [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ") (Data.Real.Basic.termℝ "ℝ")])
       "."
       `symm)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `ContinuousLinearEquiv.funUnique
       [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ") (Data.Real.Basic.termℝ "ℝ")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.app `Fin [(num "1")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Fin
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `Fin [(num "1")]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `ContinuousLinearEquiv.funUnique
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `ContinuousLinearEquiv.funUnique
      [(Term.paren "(" (Term.app `Fin [(num "1")]) ")")
       (Data.Real.Basic.termℝ "ℝ")
       (Data.Real.Basic.termℝ "ℝ")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Topology.Algebra.Module.Basic.«term_≃L[_]_»
       (Data.Real.Basic.termℝ "ℝ")
       " ≃L["
       (Data.Real.Basic.termℝ "ℝ")
       "] "
       (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝ¹» "ℝ¹"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝ¹» "ℝ¹")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝ¹»', expected 'MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termℝ¹._@.MeasureTheory.Integral.DivergenceTheorem._hyg.829'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    **Fundamental theorem of calculus, part 2**. This version assumes that `f` is continuous on the
    interval and is differentiable off a countable set `s`.
    
    See also
    
    * `interval_integral.integral_eq_sub_of_has_deriv_right_of_le` for a version that only assumes right
    differentiability of `f`;
    
    * `measure_theory.integral_eq_of_has_deriv_within_at_off_countable` for a version that works both
      for `a ≤ b` and `b ≤ a` at the expense of using unordered intervals instead of `set.Icc`. -/
  theorem
    integral_eq_of_has_deriv_within_at_off_countable_of_le
    ( f f' : ℝ → E )
        { a b : ℝ }
        ( hle : a ≤ b )
        { s : Set ℝ }
        ( hs : s . Countable )
        ( Hc : ContinuousOn f icc a b )
        ( Hd : ∀ x ∈ ioo a b \ s , HasDerivAt f f' x x )
        ( Hi : IntervalIntegrable f' volume a b )
      : ∫ x in a .. b , f' x = f b - f a
    :=
      by
        set e : ℝ ≃L[ ℝ ] ℝ¹ := ContinuousLinearEquiv.funUnique Fin 1 ℝ ℝ . symm
          have e_symm : ∀ x , e.symm x = x 0 := fun x => rfl
          set F' : ℝ → ℝ →L[ ℝ ] E := fun x => smul_right ( 1 : ℝ →L[ ℝ ] ℝ ) f' x
          have hF' : ∀ x y , F' x y = y • f' x := fun x y => rfl
          calc
            ∫ x in a .. b , f' x = ∫ x in Icc a b , f' x
              :=
              by
                simp
                  only
                  [ intervalIntegral.integral_of_le hle , set_integral_congr_set_ae Ioc_ae_eq_Icc ]
            _
                  =
                  ∑
                    i : Fin 1
                    ,
                    ∫
                        x
                        in
                        Icc e a ∘ i . succAbove e b ∘ i . succAbove
                        ,
                        f e.symm <| i . insertNth e b i x
                      -
                      ∫
                        x
                        in
                        Icc e a ∘ i . succAbove e b ∘ i . succAbove
                        ,
                        f e.symm <| i . insertNth e a i x
                :=
                by
                  simp only [ ← interior_Icc ] at Hd
                    refine'
                      integral_divergence_of_has_fderiv_within_at_off_countable_of_equiv
                        e
                          _
                          _
                          fun _ => f
                          fun _ => F'
                          s
                          hs
                          a
                          b
                          hle
                          fun i => Hc
                          fun x hx i => Hd x hx
                          _
                          _
                          _
                    · exact fun x y => OrderIso.funUnique Fin 1 ℝ . symm . le_iff_le
                    · exact volume_preserving_fun_unique Fin 1 ℝ . symm _
                    · intro x rw [ Fin.sum_univ_one , hF' , e_symm , Pi.single_eq_same , one_smul ]
                    ·
                      rw [ interval_integrable_iff_integrable_Ioc_of_le hle ] at Hi
                        exact Hi.congr_set_ae Ioc_ae_eq_Icc.symm
              _ = f b - f a
                :=
                by
                  simp only [ Fin.sum_univ_one , e_symm ]
                    have : ∀ c : ℝ , const Fin 0 c = isEmptyElim := fun c => Subsingleton.elim _ _
                    simp [ this , volume_pi , measure.pi_of_empty fun _ : Fin 0 => volume ]
#align
  measure_theory.integral_eq_of_has_deriv_within_at_off_countable_of_le MeasureTheory.integral_eq_of_has_deriv_within_at_off_countable_of_le

/-- **Fundamental theorem of calculus, part 2**. This version assumes that `f` is continuous on the
interval and is differentiable off a countable set `s`.

See also `measure_theory.interval_integral.integral_eq_sub_of_has_deriv_right` for a version that
only assumes right differentiability of `f`.
-/
theorem integral_eq_of_has_deriv_within_at_off_countable (f f' : ℝ → E) {a b : ℝ} {s : Set ℝ}
    (hs : s.Countable) (Hc : ContinuousOn f [a, b])
    (Hd : ∀ x ∈ ioo (min a b) (max a b) \ s, HasDerivAt f (f' x) x)
    (Hi : IntervalIntegrable f' volume a b) : (∫ x in a..b, f' x) = f b - f a :=
  by
  cases' le_total a b with hab hab
  · simp only [interval_of_le hab, min_eq_left hab, max_eq_right hab] at *
    exact integral_eq_of_has_deriv_within_at_off_countable_of_le f f' hab hs Hc Hd Hi
  · simp only [interval_of_ge hab, min_eq_right hab, max_eq_left hab] at *
    rw [intervalIntegral.integral_symm, neg_eq_iff_neg_eq, neg_sub, eq_comm]
    exact integral_eq_of_has_deriv_within_at_off_countable_of_le f f' hab hs Hc Hd Hi.symm
#align
  measure_theory.integral_eq_of_has_deriv_within_at_off_countable MeasureTheory.integral_eq_of_has_deriv_within_at_off_countable

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "**Divergence theorem** for functions on the plane along rectangles. It is formulated in terms of\ntwo functions `f g : ℝ × ℝ → E` and an integral over `Icc a b = [a.1, b.1] × [a.2, b.2]`, where\n`a b : ℝ × ℝ`, `a ≤ b`. When thinking of `f` and `g` as the two coordinates of a single function\n`F : ℝ × ℝ → E × E` and when `E = ℝ`, this is the usual statement that the integral of the\ndivergence of `F` inside the rectangle equals the integral of the normal derivative of `F` along the\nboundary.\n\nSee also `measure_theory.integral2_divergence_prod_of_has_fderiv_within_at_off_countable` for a\nversion that does not assume `a ≤ b` and uses iterated interval integral instead of the integral\nover `Icc a b`. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `integral_divergence_prod_Icc_of_has_fderiv_within_at_off_countable_of_le [])
      (Command.declSig
       [(Term.explicitBinder
         "("
         [`f `g]
         [":"
          (Term.arrow
           («term_×_» (Data.Real.Basic.termℝ "ℝ") "×" (Data.Real.Basic.termℝ "ℝ"))
           "→"
           `E)]
         []
         ")")
        (Term.explicitBinder
         "("
         [`f' `g']
         [":"
          (Term.arrow
           («term_×_» (Data.Real.Basic.termℝ "ℝ") "×" (Data.Real.Basic.termℝ "ℝ"))
           "→"
           (Topology.Algebra.Module.Basic.«term_→L[_]_»
            («term_×_» (Data.Real.Basic.termℝ "ℝ") "×" (Data.Real.Basic.termℝ "ℝ"))
            " →L["
            (Data.Real.Basic.termℝ "ℝ")
            "] "
            `E))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`a `b]
         [":" («term_×_» (Data.Real.Basic.termℝ "ℝ") "×" (Data.Real.Basic.termℝ "ℝ"))]
         []
         ")")
        (Term.explicitBinder "(" [`hle] [":" («term_≤_» `a "≤" `b)] [] ")")
        (Term.explicitBinder
         "("
         [`s]
         [":"
          (Term.app `Set [(«term_×_» (Data.Real.Basic.termℝ "ℝ") "×" (Data.Real.Basic.termℝ "ℝ"))])]
         []
         ")")
        (Term.explicitBinder "(" [`hs] [":" (Term.proj `s "." `Countable)] [] ")")
        (Term.explicitBinder
         "("
         [`Hcf]
         [":" (Term.app `ContinuousOn [`f (Term.app `icc [`a `b])])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`Hcg]
         [":" (Term.app `ContinuousOn [`g (Term.app `icc [`a `b])])]
         []
         ")")
        (Term.explicitBinder
         "("
         [`Hdf]
         [":"
          (Std.ExtendedBinder.«term∀__,_»
           "∀"
           (Lean.binderIdent `x)
           («binderTerm∈_»
            "∈"
            («term_\_»
             (LowerSet.Order.UpperLower.lower_set.prod
              (Term.app `ioo [(Term.proj `a "." (fieldIdx "1")) (Term.proj `b "." (fieldIdx "1"))])
              " ×ˢ "
              (Term.app `ioo [(Term.proj `a "." (fieldIdx "2")) (Term.proj `b "." (fieldIdx "2"))]))
             "\\"
             `s))
           ","
           (Term.app `HasFderivAt [`f (Term.app `f' [`x]) `x]))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`Hdg]
         [":"
          (Std.ExtendedBinder.«term∀__,_»
           "∀"
           (Lean.binderIdent `x)
           («binderTerm∈_»
            "∈"
            («term_\_»
             (LowerSet.Order.UpperLower.lower_set.prod
              (Term.app `ioo [(Term.proj `a "." (fieldIdx "1")) (Term.proj `b "." (fieldIdx "1"))])
              " ×ˢ "
              (Term.app `ioo [(Term.proj `a "." (fieldIdx "2")) (Term.proj `b "." (fieldIdx "2"))]))
             "\\"
             `s))
           ","
           (Term.app `HasFderivAt [`g (Term.app `g' [`x]) `x]))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`Hi]
         [":"
          (Term.app
           `IntegrableOn
           [(Term.fun
             "fun"
             (Term.basicFun
              [`x]
              []
              "=>"
              («term_+_»
               (Term.app `f' [`x (Term.tuple "(" [(num "1") "," [(num "0")]] ")")])
               "+"
               (Term.app `g' [`x (Term.tuple "(" [(num "0") "," [(num "1")]] ")")]))))
            (Term.app `icc [`a `b])])]
         []
         ")")]
       (Term.typeSpec
        ":"
        («term_=_»
         (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
          "∫"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
          " in "
          (Term.app `icc [`a `b])
          ", "
          («term_+_»
           (Term.app `f' [`x (Term.tuple "(" [(num "1") "," [(num "0")]] ")")])
           "+"
           (Term.app `g' [`x (Term.tuple "(" [(num "0") "," [(num "1")]] ")")])))
         "="
         («term_-_»
          («term_+_»
           («term_-_»
            (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
             "∫"
             (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
             " in "
             (Term.proj `a "." (fieldIdx "1"))
             ".."
             (Term.proj `b "." (fieldIdx "1"))
             ", "
             (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `b "." (fieldIdx "2"))]] ")")]))
            "-"
            (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
             "∫"
             (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
             " in "
             (Term.proj `a "." (fieldIdx "1"))
             ".."
             (Term.proj `b "." (fieldIdx "1"))
             ", "
             (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `a "." (fieldIdx "2"))]] ")")])))
           "+"
           (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
            "∫"
            (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `y) []))
            " in "
            (Term.proj `a "." (fieldIdx "2"))
            ".."
            (Term.proj `b "." (fieldIdx "2"))
            ", "
            (Term.app `f [(Term.tuple "(" [(Term.proj `b "." (fieldIdx "1")) "," [`y]] ")")])))
          "-"
          (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
           "∫"
           (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `y) []))
           " in "
           (Term.proj `a "." (fieldIdx "2"))
           ".."
           (Term.proj `b "." (fieldIdx "2"))
           ", "
           (Term.app `f [(Term.tuple "(" [(Term.proj `a "." (fieldIdx "1")) "," [`y]] ")")]))))))
      (Command.declValSimple
       ":="
       (Term.let
        "let"
        (Term.letDecl
         (Term.letIdDecl
          `e
          []
          [(Term.typeSpec
            ":"
            (Topology.Algebra.Module.Basic.«term_≃L[_]_»
             («term_×_» (Data.Real.Basic.termℝ "ℝ") "×" (Data.Real.Basic.termℝ "ℝ"))
             " ≃L["
             (Data.Real.Basic.termℝ "ℝ")
             "] "
             (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝ²» "ℝ²")))]
          ":="
          (Term.proj
           (Term.app
            `ContinuousLinearEquiv.finTwoArrow
            [(Data.Real.Basic.termℝ "ℝ") (Data.Real.Basic.termℝ "ℝ")])
           "."
           `symm)))
        []
        (calc
         "calc"
         (calcStep
          («term_=_»
           (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
            "∫"
            (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
            " in "
            (Term.app `icc [`a `b])
            ", "
            («term_+_»
             (Term.app `f' [`x (Term.tuple "(" [(num "1") "," [(num "0")]] ")")])
             "+"
             (Term.app `g' [`x (Term.tuple "(" [(num "0") "," [(num "1")]] ")")])))
           "="
           (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
            "∑"
            (Std.ExtendedBinder.extBinders
             (Std.ExtendedBinder.extBinder
              (Lean.binderIdent `i)
              [(group ":" (Term.app `Fin [(num "2")]))]))
            ", "
            («term_-_»
             (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
              "∫"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
              " in "
              (Term.app
               `icc
               [(«term_∘_» (Term.app `e [`a]) "∘" (Term.proj `i "." `succAbove))
                («term_∘_» (Term.app `e [`b]) "∘" (Term.proj `i "." `succAbove))])
              ", "
              (Term.app
               (Matrix.Data.Fin.VecNotation.«term![_,» "![" [`f "," `g] "]")
               [`i
                («term_<|_»
                 (Term.proj `e "." `symm)
                 "<|"
                 (Term.app (Term.proj `i "." `insertNth) [(Term.app `e [`b `i]) `x]))]))
             "-"
             (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
              "∫"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
              " in "
              (Term.app
               `icc
               [(«term_∘_» (Term.app `e [`a]) "∘" (Term.proj `i "." `succAbove))
                («term_∘_» (Term.app `e [`b]) "∘" (Term.proj `i "." `succAbove))])
              ", "
              (Term.app
               (Matrix.Data.Fin.VecNotation.«term![_,» "![" [`f "," `g] "]")
               [`i
                («term_<|_»
                 (Term.proj `e "." `symm)
                 "<|"
                 (Term.app (Term.proj `i "." `insertNth) [(Term.app `e [`a `i]) `x]))])))))
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(Tactic.refine'
               "refine'"
               (Term.app
                `integral_divergence_of_has_fderiv_within_at_off_countable_of_equiv
                [`e
                 (Term.hole "_")
                 (Term.hole "_")
                 (Matrix.Data.Fin.VecNotation.«term![_,» "![" [`f "," `g] "]")
                 (Matrix.Data.Fin.VecNotation.«term![_,» "![" [`f' "," `g'] "]")
                 `s
                 `hs
                 `a
                 `b
                 `hle
                 (Term.hole "_")
                 (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
                 (Term.hole "_")
                 (Term.hole "_")
                 `Hi]))
              []
              (tactic__
               (cdotTk (patternIgnore (token.«· » "·")))
               [(Tactic.exact
                 "exact"
                 (Term.fun
                  "fun"
                  (Term.basicFun
                   [`x `y]
                   []
                   "=>"
                   (Term.proj
                    (Term.proj
                     (Term.app `OrderIso.finTwoArrowIso [(Data.Real.Basic.termℝ "ℝ")])
                     "."
                     `symm)
                    "."
                    `le_iff_le))))])
              []
              (tactic__
               (cdotTk (patternIgnore (token.«· » "·")))
               [(Tactic.exact
                 "exact"
                 (Term.app
                  (Term.proj
                   (Term.app `volume_preserving_fin_two_arrow [(Data.Real.Basic.termℝ "ℝ")])
                   "."
                   `symm)
                  [(Term.hole "_")]))])
              []
              (tactic__
               (cdotTk (patternIgnore (token.«· » "·")))
               [(Tactic.exact
                 "exact"
                 (Term.app
                  (Term.proj `Fin.forall_fin_two "." (fieldIdx "2"))
                  [(Term.anonymousCtor "⟨" [`Hcf "," `Hcg] "⟩")]))])
              []
              (tactic__
               (cdotTk (patternIgnore (token.«· » "·")))
               [(Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule [] `Icc_prod_eq)
                   ","
                   (Tactic.rwRule [] `interior_prod_eq)
                   ","
                   (Tactic.rwRule [] `interior_Icc)
                   ","
                   (Tactic.rwRule [] `interior_Icc)]
                  "]")
                 [(Tactic.location "at" (Tactic.locationHyp [`hx] []))])
                []
                (Tactic.exact
                 "exact"
                 (Term.app
                  (Term.proj `Fin.forall_fin_two "." (fieldIdx "2"))
                  [(Term.anonymousCtor
                    "⟨"
                    [(Term.app `Hdf [`x `hx]) "," (Term.app `Hdg [`x `hx])]
                    "⟩")]))])
              []
              (tactic__
               (cdotTk (patternIgnore (token.«· » "·")))
               [(Tactic.intro "intro" [`x])
                []
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `Fin.sum_univ_two)] "]")
                 [])
                []
                (Tactic.simp "simp" [] [] [] [] [])])]))))
         [(calcStep
           («term_=_»
            (Term.hole "_")
            "="
            («term_+_»
             («term_-_»
              (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
               "∫"
               (Std.ExtendedBinder.extBinders
                (Std.ExtendedBinder.extBinder (Lean.binderIdent `y) []))
               " in "
               (Term.app `icc [(Term.proj `a "." (fieldIdx "2")) (Term.proj `b "." (fieldIdx "2"))])
               ", "
               (Term.app `f [(Term.tuple "(" [(Term.proj `b "." (fieldIdx "1")) "," [`y]] ")")]))
              "-"
              (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
               "∫"
               (Std.ExtendedBinder.extBinders
                (Std.ExtendedBinder.extBinder (Lean.binderIdent `y) []))
               " in "
               (Term.app `icc [(Term.proj `a "." (fieldIdx "2")) (Term.proj `b "." (fieldIdx "2"))])
               ", "
               (Term.app `f [(Term.tuple "(" [(Term.proj `a "." (fieldIdx "1")) "," [`y]] ")")])))
             "+"
             («term_-_»
              (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
               "∫"
               (Std.ExtendedBinder.extBinders
                (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
               " in "
               (Term.app `icc [(Term.proj `a "." (fieldIdx "1")) (Term.proj `b "." (fieldIdx "1"))])
               ", "
               (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `b "." (fieldIdx "2"))]] ")")]))
              "-"
              (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
               "∫"
               (Std.ExtendedBinder.extBinders
                (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
               " in "
               (Term.app `icc [(Term.proj `a "." (fieldIdx "1")) (Term.proj `b "." (fieldIdx "1"))])
               ", "
               (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `a "." (fieldIdx "2"))]] ")")])))))
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  []
                  [(Term.typeSpec
                    ":"
                    (Term.forall
                     "∀"
                     [(Term.explicitBinder
                       "("
                       [`a `b]
                       [":" (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝ¹» "ℝ¹")]
                       []
                       ")")
                      (Term.explicitBinder
                       "("
                       [`f]
                       [":"
                        (Term.arrow
                         (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝ¹» "ℝ¹")
                         "→"
                         `E)]
                       []
                       ")")]
                     []
                     ","
                     («term_=_»
                      (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                       "∫"
                       (Std.ExtendedBinder.extBinders
                        (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                       " in "
                       (Term.app `Icc [`a `b])
                       ", "
                       (Term.app `f [`x]))
                      "="
                      (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                       "∫"
                       (Std.ExtendedBinder.extBinders
                        (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                       " in "
                       (Term.app `Icc [(Term.app `a [(num "0")]) (Term.app `b [(num "0")])])
                       ", "
                       (Term.app
                        `f
                        [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `x))])))))]
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(Tactic.intro "intro" [`a `b `f])
                      []
                      (convert
                       "convert"
                       []
                       (Term.proj
                        (Term.app
                         (Term.proj
                          (Term.app
                           (Term.proj
                            (Term.app
                             `volume_preserving_fun_unique
                             [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
                            "."
                            `symm)
                           [(Term.hole "_")])
                          "."
                          `set_integral_preimage_emb)
                         [(Term.app `MeasurableEquiv.measurable_embedding [(Term.hole "_")])
                          (Term.hole "_")
                          (Term.hole "_")])
                        "."
                        `symm)
                       [])
                      []
                      (Tactic.exact
                       "exact"
                       (Term.proj
                        (Term.app
                         (Term.proj
                          (Term.proj
                           (Term.app
                            `OrderIso.funUnique
                            [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
                           "."
                           `symm)
                          "."
                          `preimage_Icc)
                         [`a `b])
                        "."
                        `symm))]))))))
               []
               (Tactic.simp
                "simp"
                []
                []
                ["only"]
                ["["
                 [(Tactic.simpLemma [] [] `Fin.sum_univ_two) "," (Tactic.simpLemma [] [] `this)]
                 "]"]
                [])
               []
               (Tactic.tacticRfl "rfl")]))))
          (calcStep
           («term_=_»
            (Term.hole "_")
            "="
            («term_-_»
             («term_+_»
              («term_-_»
               (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
                "∫"
                (Std.ExtendedBinder.extBinders
                 (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                " in "
                (Term.proj `a "." (fieldIdx "1"))
                ".."
                (Term.proj `b "." (fieldIdx "1"))
                ", "
                (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `b "." (fieldIdx "2"))]] ")")]))
               "-"
               (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
                "∫"
                (Std.ExtendedBinder.extBinders
                 (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                " in "
                (Term.proj `a "." (fieldIdx "1"))
                ".."
                (Term.proj `b "." (fieldIdx "1"))
                ", "
                (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `a "." (fieldIdx "2"))]] ")")])))
              "+"
              (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
               "∫"
               (Std.ExtendedBinder.extBinders
                (Std.ExtendedBinder.extBinder (Lean.binderIdent `y) []))
               " in "
               (Term.proj `a "." (fieldIdx "2"))
               ".."
               (Term.proj `b "." (fieldIdx "2"))
               ", "
               (Term.app `f [(Term.tuple "(" [(Term.proj `b "." (fieldIdx "1")) "," [`y]] ")")])))
             "-"
             (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
              "∫"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder (Lean.binderIdent `y) []))
              " in "
              (Term.proj `a "." (fieldIdx "2"))
              ".."
              (Term.proj `b "." (fieldIdx "2"))
              ", "
              (Term.app `f [(Term.tuple "(" [(Term.proj `a "." (fieldIdx "1")) "," [`y]] ")")]))))
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.simp
                "simp"
                []
                []
                ["only"]
                ["["
                 [(Tactic.simpLemma
                   []
                   []
                   (Term.app
                    `intervalIntegral.integral_of_le
                    [(Term.proj `hle "." (fieldIdx "1"))]))
                  ","
                  (Tactic.simpLemma
                   []
                   []
                   (Term.app
                    `intervalIntegral.integral_of_le
                    [(Term.proj `hle "." (fieldIdx "2"))]))
                  ","
                  (Tactic.simpLemma [] [] (Term.app `set_integral_congr_set_ae [`Ioc_ae_eq_Icc]))]
                 "]"]
                [])
               []
               (Tactic.abel "abel" [] [])]))))]))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.let
       "let"
       (Term.letDecl
        (Term.letIdDecl
         `e
         []
         [(Term.typeSpec
           ":"
           (Topology.Algebra.Module.Basic.«term_≃L[_]_»
            («term_×_» (Data.Real.Basic.termℝ "ℝ") "×" (Data.Real.Basic.termℝ "ℝ"))
            " ≃L["
            (Data.Real.Basic.termℝ "ℝ")
            "] "
            (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝ²» "ℝ²")))]
         ":="
         (Term.proj
          (Term.app
           `ContinuousLinearEquiv.finTwoArrow
           [(Data.Real.Basic.termℝ "ℝ") (Data.Real.Basic.termℝ "ℝ")])
          "."
          `symm)))
       []
       (calc
        "calc"
        (calcStep
         («term_=_»
          (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
           "∫"
           (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
           " in "
           (Term.app `icc [`a `b])
           ", "
           («term_+_»
            (Term.app `f' [`x (Term.tuple "(" [(num "1") "," [(num "0")]] ")")])
            "+"
            (Term.app `g' [`x (Term.tuple "(" [(num "0") "," [(num "1")]] ")")])))
          "="
          (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
           "∑"
           (Std.ExtendedBinder.extBinders
            (Std.ExtendedBinder.extBinder
             (Lean.binderIdent `i)
             [(group ":" (Term.app `Fin [(num "2")]))]))
           ", "
           («term_-_»
            (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
             "∫"
             (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
             " in "
             (Term.app
              `icc
              [(«term_∘_» (Term.app `e [`a]) "∘" (Term.proj `i "." `succAbove))
               («term_∘_» (Term.app `e [`b]) "∘" (Term.proj `i "." `succAbove))])
             ", "
             (Term.app
              (Matrix.Data.Fin.VecNotation.«term![_,» "![" [`f "," `g] "]")
              [`i
               («term_<|_»
                (Term.proj `e "." `symm)
                "<|"
                (Term.app (Term.proj `i "." `insertNth) [(Term.app `e [`b `i]) `x]))]))
            "-"
            (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
             "∫"
             (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
             " in "
             (Term.app
              `icc
              [(«term_∘_» (Term.app `e [`a]) "∘" (Term.proj `i "." `succAbove))
               («term_∘_» (Term.app `e [`b]) "∘" (Term.proj `i "." `succAbove))])
             ", "
             (Term.app
              (Matrix.Data.Fin.VecNotation.«term![_,» "![" [`f "," `g] "]")
              [`i
               («term_<|_»
                (Term.proj `e "." `symm)
                "<|"
                (Term.app (Term.proj `i "." `insertNth) [(Term.app `e [`a `i]) `x]))])))))
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.refine'
              "refine'"
              (Term.app
               `integral_divergence_of_has_fderiv_within_at_off_countable_of_equiv
               [`e
                (Term.hole "_")
                (Term.hole "_")
                (Matrix.Data.Fin.VecNotation.«term![_,» "![" [`f "," `g] "]")
                (Matrix.Data.Fin.VecNotation.«term![_,» "![" [`f' "," `g'] "]")
                `s
                `hs
                `a
                `b
                `hle
                (Term.hole "_")
                (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
                (Term.hole "_")
                (Term.hole "_")
                `Hi]))
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.exact
                "exact"
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [`x `y]
                  []
                  "=>"
                  (Term.proj
                   (Term.proj
                    (Term.app `OrderIso.finTwoArrowIso [(Data.Real.Basic.termℝ "ℝ")])
                    "."
                    `symm)
                   "."
                   `le_iff_le))))])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.exact
                "exact"
                (Term.app
                 (Term.proj
                  (Term.app `volume_preserving_fin_two_arrow [(Data.Real.Basic.termℝ "ℝ")])
                  "."
                  `symm)
                 [(Term.hole "_")]))])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.exact
                "exact"
                (Term.app
                 (Term.proj `Fin.forall_fin_two "." (fieldIdx "2"))
                 [(Term.anonymousCtor "⟨" [`Hcf "," `Hcg] "⟩")]))])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] `Icc_prod_eq)
                  ","
                  (Tactic.rwRule [] `interior_prod_eq)
                  ","
                  (Tactic.rwRule [] `interior_Icc)
                  ","
                  (Tactic.rwRule [] `interior_Icc)]
                 "]")
                [(Tactic.location "at" (Tactic.locationHyp [`hx] []))])
               []
               (Tactic.exact
                "exact"
                (Term.app
                 (Term.proj `Fin.forall_fin_two "." (fieldIdx "2"))
                 [(Term.anonymousCtor
                   "⟨"
                   [(Term.app `Hdf [`x `hx]) "," (Term.app `Hdg [`x `hx])]
                   "⟩")]))])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.intro "intro" [`x])
               []
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `Fin.sum_univ_two)] "]")
                [])
               []
               (Tactic.simp "simp" [] [] [] [] [])])]))))
        [(calcStep
          («term_=_»
           (Term.hole "_")
           "="
           («term_+_»
            («term_-_»
             (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
              "∫"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder (Lean.binderIdent `y) []))
              " in "
              (Term.app `icc [(Term.proj `a "." (fieldIdx "2")) (Term.proj `b "." (fieldIdx "2"))])
              ", "
              (Term.app `f [(Term.tuple "(" [(Term.proj `b "." (fieldIdx "1")) "," [`y]] ")")]))
             "-"
             (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
              "∫"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder (Lean.binderIdent `y) []))
              " in "
              (Term.app `icc [(Term.proj `a "." (fieldIdx "2")) (Term.proj `b "." (fieldIdx "2"))])
              ", "
              (Term.app `f [(Term.tuple "(" [(Term.proj `a "." (fieldIdx "1")) "," [`y]] ")")])))
            "+"
            («term_-_»
             (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
              "∫"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
              " in "
              (Term.app `icc [(Term.proj `a "." (fieldIdx "1")) (Term.proj `b "." (fieldIdx "1"))])
              ", "
              (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `b "." (fieldIdx "2"))]] ")")]))
             "-"
             (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
              "∫"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
              " in "
              (Term.app `icc [(Term.proj `a "." (fieldIdx "1")) (Term.proj `b "." (fieldIdx "1"))])
              ", "
              (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `a "." (fieldIdx "2"))]] ")")])))))
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 []
                 [(Term.typeSpec
                   ":"
                   (Term.forall
                    "∀"
                    [(Term.explicitBinder
                      "("
                      [`a `b]
                      [":" (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝ¹» "ℝ¹")]
                      []
                      ")")
                     (Term.explicitBinder
                      "("
                      [`f]
                      [":"
                       (Term.arrow
                        (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝ¹» "ℝ¹")
                        "→"
                        `E)]
                      []
                      ")")]
                    []
                    ","
                    («term_=_»
                     (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                      "∫"
                      (Std.ExtendedBinder.extBinders
                       (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                      " in "
                      (Term.app `Icc [`a `b])
                      ", "
                      (Term.app `f [`x]))
                     "="
                     (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                      "∫"
                      (Std.ExtendedBinder.extBinders
                       (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                      " in "
                      (Term.app `Icc [(Term.app `a [(num "0")]) (Term.app `b [(num "0")])])
                      ", "
                      (Term.app
                       `f
                       [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `x))])))))]
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(Tactic.intro "intro" [`a `b `f])
                     []
                     (convert
                      "convert"
                      []
                      (Term.proj
                       (Term.app
                        (Term.proj
                         (Term.app
                          (Term.proj
                           (Term.app
                            `volume_preserving_fun_unique
                            [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
                           "."
                           `symm)
                          [(Term.hole "_")])
                         "."
                         `set_integral_preimage_emb)
                        [(Term.app `MeasurableEquiv.measurable_embedding [(Term.hole "_")])
                         (Term.hole "_")
                         (Term.hole "_")])
                       "."
                       `symm)
                      [])
                     []
                     (Tactic.exact
                      "exact"
                      (Term.proj
                       (Term.app
                        (Term.proj
                         (Term.proj
                          (Term.app
                           `OrderIso.funUnique
                           [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
                          "."
                          `symm)
                         "."
                         `preimage_Icc)
                        [`a `b])
                       "."
                       `symm))]))))))
              []
              (Tactic.simp
               "simp"
               []
               []
               ["only"]
               ["["
                [(Tactic.simpLemma [] [] `Fin.sum_univ_two) "," (Tactic.simpLemma [] [] `this)]
                "]"]
               [])
              []
              (Tactic.tacticRfl "rfl")]))))
         (calcStep
          («term_=_»
           (Term.hole "_")
           "="
           («term_-_»
            («term_+_»
             («term_-_»
              (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
               "∫"
               (Std.ExtendedBinder.extBinders
                (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
               " in "
               (Term.proj `a "." (fieldIdx "1"))
               ".."
               (Term.proj `b "." (fieldIdx "1"))
               ", "
               (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `b "." (fieldIdx "2"))]] ")")]))
              "-"
              (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
               "∫"
               (Std.ExtendedBinder.extBinders
                (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
               " in "
               (Term.proj `a "." (fieldIdx "1"))
               ".."
               (Term.proj `b "." (fieldIdx "1"))
               ", "
               (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `a "." (fieldIdx "2"))]] ")")])))
             "+"
             (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
              "∫"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder (Lean.binderIdent `y) []))
              " in "
              (Term.proj `a "." (fieldIdx "2"))
              ".."
              (Term.proj `b "." (fieldIdx "2"))
              ", "
              (Term.app `f [(Term.tuple "(" [(Term.proj `b "." (fieldIdx "1")) "," [`y]] ")")])))
            "-"
            (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
             "∫"
             (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `y) []))
             " in "
             (Term.proj `a "." (fieldIdx "2"))
             ".."
             (Term.proj `b "." (fieldIdx "2"))
             ", "
             (Term.app `f [(Term.tuple "(" [(Term.proj `a "." (fieldIdx "1")) "," [`y]] ")")]))))
          ":="
          (Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(Tactic.simp
               "simp"
               []
               []
               ["only"]
               ["["
                [(Tactic.simpLemma
                  []
                  []
                  (Term.app `intervalIntegral.integral_of_le [(Term.proj `hle "." (fieldIdx "1"))]))
                 ","
                 (Tactic.simpLemma
                  []
                  []
                  (Term.app `intervalIntegral.integral_of_le [(Term.proj `hle "." (fieldIdx "2"))]))
                 ","
                 (Tactic.simpLemma [] [] (Term.app `set_integral_congr_set_ae [`Ioc_ae_eq_Icc]))]
                "]"]
               [])
              []
              (Tactic.abel "abel" [] [])]))))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (calc
       "calc"
       (calcStep
        («term_=_»
         (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
          "∫"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
          " in "
          (Term.app `icc [`a `b])
          ", "
          («term_+_»
           (Term.app `f' [`x (Term.tuple "(" [(num "1") "," [(num "0")]] ")")])
           "+"
           (Term.app `g' [`x (Term.tuple "(" [(num "0") "," [(num "1")]] ")")])))
         "="
         (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
          "∑"
          (Std.ExtendedBinder.extBinders
           (Std.ExtendedBinder.extBinder
            (Lean.binderIdent `i)
            [(group ":" (Term.app `Fin [(num "2")]))]))
          ", "
          («term_-_»
           (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
            "∫"
            (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
            " in "
            (Term.app
             `icc
             [(«term_∘_» (Term.app `e [`a]) "∘" (Term.proj `i "." `succAbove))
              («term_∘_» (Term.app `e [`b]) "∘" (Term.proj `i "." `succAbove))])
            ", "
            (Term.app
             (Matrix.Data.Fin.VecNotation.«term![_,» "![" [`f "," `g] "]")
             [`i
              («term_<|_»
               (Term.proj `e "." `symm)
               "<|"
               (Term.app (Term.proj `i "." `insertNth) [(Term.app `e [`b `i]) `x]))]))
           "-"
           (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
            "∫"
            (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
            " in "
            (Term.app
             `icc
             [(«term_∘_» (Term.app `e [`a]) "∘" (Term.proj `i "." `succAbove))
              («term_∘_» (Term.app `e [`b]) "∘" (Term.proj `i "." `succAbove))])
            ", "
            (Term.app
             (Matrix.Data.Fin.VecNotation.«term![_,» "![" [`f "," `g] "]")
             [`i
              («term_<|_»
               (Term.proj `e "." `symm)
               "<|"
               (Term.app (Term.proj `i "." `insertNth) [(Term.app `e [`a `i]) `x]))])))))
        ":="
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(Tactic.refine'
             "refine'"
             (Term.app
              `integral_divergence_of_has_fderiv_within_at_off_countable_of_equiv
              [`e
               (Term.hole "_")
               (Term.hole "_")
               (Matrix.Data.Fin.VecNotation.«term![_,» "![" [`f "," `g] "]")
               (Matrix.Data.Fin.VecNotation.«term![_,» "![" [`f' "," `g'] "]")
               `s
               `hs
               `a
               `b
               `hle
               (Term.hole "_")
               (Term.fun "fun" (Term.basicFun [`x `hx] [] "=>" (Term.hole "_")))
               (Term.hole "_")
               (Term.hole "_")
               `Hi]))
            []
            (tactic__
             (cdotTk (patternIgnore (token.«· » "·")))
             [(Tactic.exact
               "exact"
               (Term.fun
                "fun"
                (Term.basicFun
                 [`x `y]
                 []
                 "=>"
                 (Term.proj
                  (Term.proj
                   (Term.app `OrderIso.finTwoArrowIso [(Data.Real.Basic.termℝ "ℝ")])
                   "."
                   `symm)
                  "."
                  `le_iff_le))))])
            []
            (tactic__
             (cdotTk (patternIgnore (token.«· » "·")))
             [(Tactic.exact
               "exact"
               (Term.app
                (Term.proj
                 (Term.app `volume_preserving_fin_two_arrow [(Data.Real.Basic.termℝ "ℝ")])
                 "."
                 `symm)
                [(Term.hole "_")]))])
            []
            (tactic__
             (cdotTk (patternIgnore (token.«· » "·")))
             [(Tactic.exact
               "exact"
               (Term.app
                (Term.proj `Fin.forall_fin_two "." (fieldIdx "2"))
                [(Term.anonymousCtor "⟨" [`Hcf "," `Hcg] "⟩")]))])
            []
            (tactic__
             (cdotTk (patternIgnore (token.«· » "·")))
             [(Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule [] `Icc_prod_eq)
                 ","
                 (Tactic.rwRule [] `interior_prod_eq)
                 ","
                 (Tactic.rwRule [] `interior_Icc)
                 ","
                 (Tactic.rwRule [] `interior_Icc)]
                "]")
               [(Tactic.location "at" (Tactic.locationHyp [`hx] []))])
              []
              (Tactic.exact
               "exact"
               (Term.app
                (Term.proj `Fin.forall_fin_two "." (fieldIdx "2"))
                [(Term.anonymousCtor
                  "⟨"
                  [(Term.app `Hdf [`x `hx]) "," (Term.app `Hdg [`x `hx])]
                  "⟩")]))])
            []
            (tactic__
             (cdotTk (patternIgnore (token.«· » "·")))
             [(Tactic.intro "intro" [`x])
              []
              (Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `Fin.sum_univ_two)] "]")
               [])
              []
              (Tactic.simp "simp" [] [] [] [] [])])]))))
       [(calcStep
         («term_=_»
          (Term.hole "_")
          "="
          («term_+_»
           («term_-_»
            (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
             "∫"
             (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `y) []))
             " in "
             (Term.app `icc [(Term.proj `a "." (fieldIdx "2")) (Term.proj `b "." (fieldIdx "2"))])
             ", "
             (Term.app `f [(Term.tuple "(" [(Term.proj `b "." (fieldIdx "1")) "," [`y]] ")")]))
            "-"
            (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
             "∫"
             (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `y) []))
             " in "
             (Term.app `icc [(Term.proj `a "." (fieldIdx "2")) (Term.proj `b "." (fieldIdx "2"))])
             ", "
             (Term.app `f [(Term.tuple "(" [(Term.proj `a "." (fieldIdx "1")) "," [`y]] ")")])))
           "+"
           («term_-_»
            (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
             "∫"
             (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
             " in "
             (Term.app `icc [(Term.proj `a "." (fieldIdx "1")) (Term.proj `b "." (fieldIdx "1"))])
             ", "
             (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `b "." (fieldIdx "2"))]] ")")]))
            "-"
            (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
             "∫"
             (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
             " in "
             (Term.app `icc [(Term.proj `a "." (fieldIdx "1")) (Term.proj `b "." (fieldIdx "1"))])
             ", "
             (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `a "." (fieldIdx "2"))]] ")")])))))
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                [(Term.typeSpec
                  ":"
                  (Term.forall
                   "∀"
                   [(Term.explicitBinder
                     "("
                     [`a `b]
                     [":" (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝ¹» "ℝ¹")]
                     []
                     ")")
                    (Term.explicitBinder
                     "("
                     [`f]
                     [":"
                      (Term.arrow
                       (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝ¹» "ℝ¹")
                       "→"
                       `E)]
                     []
                     ")")]
                   []
                   ","
                   («term_=_»
                    (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                     "∫"
                     (Std.ExtendedBinder.extBinders
                      (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                     " in "
                     (Term.app `Icc [`a `b])
                     ", "
                     (Term.app `f [`x]))
                    "="
                    (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                     "∫"
                     (Std.ExtendedBinder.extBinders
                      (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                     " in "
                     (Term.app `Icc [(Term.app `a [(num "0")]) (Term.app `b [(num "0")])])
                     ", "
                     (Term.app
                      `f
                      [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `x))])))))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Tactic.intro "intro" [`a `b `f])
                    []
                    (convert
                     "convert"
                     []
                     (Term.proj
                      (Term.app
                       (Term.proj
                        (Term.app
                         (Term.proj
                          (Term.app
                           `volume_preserving_fun_unique
                           [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
                          "."
                          `symm)
                         [(Term.hole "_")])
                        "."
                        `set_integral_preimage_emb)
                       [(Term.app `MeasurableEquiv.measurable_embedding [(Term.hole "_")])
                        (Term.hole "_")
                        (Term.hole "_")])
                      "."
                      `symm)
                     [])
                    []
                    (Tactic.exact
                     "exact"
                     (Term.proj
                      (Term.app
                       (Term.proj
                        (Term.proj
                         (Term.app
                          `OrderIso.funUnique
                          [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
                         "."
                         `symm)
                        "."
                        `preimage_Icc)
                       [`a `b])
                      "."
                      `symm))]))))))
             []
             (Tactic.simp
              "simp"
              []
              []
              ["only"]
              ["["
               [(Tactic.simpLemma [] [] `Fin.sum_univ_two) "," (Tactic.simpLemma [] [] `this)]
               "]"]
              [])
             []
             (Tactic.tacticRfl "rfl")]))))
        (calcStep
         («term_=_»
          (Term.hole "_")
          "="
          («term_-_»
           («term_+_»
            («term_-_»
             (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
              "∫"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
              " in "
              (Term.proj `a "." (fieldIdx "1"))
              ".."
              (Term.proj `b "." (fieldIdx "1"))
              ", "
              (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `b "." (fieldIdx "2"))]] ")")]))
             "-"
             (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
              "∫"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
              " in "
              (Term.proj `a "." (fieldIdx "1"))
              ".."
              (Term.proj `b "." (fieldIdx "1"))
              ", "
              (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `a "." (fieldIdx "2"))]] ")")])))
            "+"
            (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
             "∫"
             (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `y) []))
             " in "
             (Term.proj `a "." (fieldIdx "2"))
             ".."
             (Term.proj `b "." (fieldIdx "2"))
             ", "
             (Term.app `f [(Term.tuple "(" [(Term.proj `b "." (fieldIdx "1")) "," [`y]] ")")])))
           "-"
           (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
            "∫"
            (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `y) []))
            " in "
            (Term.proj `a "." (fieldIdx "2"))
            ".."
            (Term.proj `b "." (fieldIdx "2"))
            ", "
            (Term.app `f [(Term.tuple "(" [(Term.proj `a "." (fieldIdx "1")) "," [`y]] ")")]))))
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.simp
              "simp"
              []
              []
              ["only"]
              ["["
               [(Tactic.simpLemma
                 []
                 []
                 (Term.app `intervalIntegral.integral_of_le [(Term.proj `hle "." (fieldIdx "1"))]))
                ","
                (Tactic.simpLemma
                 []
                 []
                 (Term.app `intervalIntegral.integral_of_le [(Term.proj `hle "." (fieldIdx "2"))]))
                ","
                (Tactic.simpLemma [] [] (Term.app `set_integral_congr_set_ae [`Ioc_ae_eq_Icc]))]
               "]"]
              [])
             []
             (Tactic.abel "abel" [] [])]))))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.simp
           "simp"
           []
           []
           ["only"]
           ["["
            [(Tactic.simpLemma
              []
              []
              (Term.app `intervalIntegral.integral_of_le [(Term.proj `hle "." (fieldIdx "1"))]))
             ","
             (Tactic.simpLemma
              []
              []
              (Term.app `intervalIntegral.integral_of_le [(Term.proj `hle "." (fieldIdx "2"))]))
             ","
             (Tactic.simpLemma [] [] (Term.app `set_integral_congr_set_ae [`Ioc_ae_eq_Icc]))]
            "]"]
           [])
          []
          (Tactic.abel "abel" [] [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.abel "abel" [] [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       ["only"]
       ["["
        [(Tactic.simpLemma
          []
          []
          (Term.app `intervalIntegral.integral_of_le [(Term.proj `hle "." (fieldIdx "1"))]))
         ","
         (Tactic.simpLemma
          []
          []
          (Term.app `intervalIntegral.integral_of_le [(Term.proj `hle "." (fieldIdx "2"))]))
         ","
         (Tactic.simpLemma [] [] (Term.app `set_integral_congr_set_ae [`Ioc_ae_eq_Icc]))]
        "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `set_integral_congr_set_ae [`Ioc_ae_eq_Icc])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Ioc_ae_eq_Icc
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `set_integral_congr_set_ae
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `intervalIntegral.integral_of_le [(Term.proj `hle "." (fieldIdx "2"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `hle "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hle
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `intervalIntegral.integral_of_le
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `intervalIntegral.integral_of_le [(Term.proj `hle "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `hle "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hle
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `intervalIntegral.integral_of_le
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_»
       (Term.hole "_")
       "="
       («term_-_»
        («term_+_»
         («term_-_»
          (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
           "∫"
           (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
           " in "
           (Term.proj `a "." (fieldIdx "1"))
           ".."
           (Term.proj `b "." (fieldIdx "1"))
           ", "
           (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `b "." (fieldIdx "2"))]] ")")]))
          "-"
          (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
           "∫"
           (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
           " in "
           (Term.proj `a "." (fieldIdx "1"))
           ".."
           (Term.proj `b "." (fieldIdx "1"))
           ", "
           (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `a "." (fieldIdx "2"))]] ")")])))
         "+"
         (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
          "∫"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `y) []))
          " in "
          (Term.proj `a "." (fieldIdx "2"))
          ".."
          (Term.proj `b "." (fieldIdx "2"))
          ", "
          (Term.app `f [(Term.tuple "(" [(Term.proj `b "." (fieldIdx "1")) "," [`y]] ")")])))
        "-"
        (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
         "∫"
         (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `y) []))
         " in "
         (Term.proj `a "." (fieldIdx "2"))
         ".."
         (Term.proj `b "." (fieldIdx "2"))
         ", "
         (Term.app `f [(Term.tuple "(" [(Term.proj `a "." (fieldIdx "1")) "," [`y]] ")")]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_-_»
       («term_+_»
        («term_-_»
         (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
          "∫"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
          " in "
          (Term.proj `a "." (fieldIdx "1"))
          ".."
          (Term.proj `b "." (fieldIdx "1"))
          ", "
          (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `b "." (fieldIdx "2"))]] ")")]))
         "-"
         (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
          "∫"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
          " in "
          (Term.proj `a "." (fieldIdx "1"))
          ".."
          (Term.proj `b "." (fieldIdx "1"))
          ", "
          (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `a "." (fieldIdx "2"))]] ")")])))
        "+"
        (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
         "∫"
         (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `y) []))
         " in "
         (Term.proj `a "." (fieldIdx "2"))
         ".."
         (Term.proj `b "." (fieldIdx "2"))
         ", "
         (Term.app `f [(Term.tuple "(" [(Term.proj `b "." (fieldIdx "1")) "," [`y]] ")")])))
       "-"
       (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
        "∫"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `y) []))
        " in "
        (Term.proj `a "." (fieldIdx "2"))
        ".."
        (Term.proj `b "." (fieldIdx "2"))
        ", "
        (Term.app `f [(Term.tuple "(" [(Term.proj `a "." (fieldIdx "1")) "," [`y]] ")")])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
       "∫"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `y) []))
       " in "
       (Term.proj `a "." (fieldIdx "2"))
       ".."
       (Term.proj `b "." (fieldIdx "2"))
       ", "
       (Term.app `f [(Term.tuple "(" [(Term.proj `a "." (fieldIdx "1")) "," [`y]] ")")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [(Term.tuple "(" [(Term.proj `a "." (fieldIdx "1")) "," [`y]] ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tuple', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tuple', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.tuple "(" [(Term.proj `a "." (fieldIdx "1")) "," [`y]] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `y
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `a "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `b "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `b
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `a "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      («term_+_»
       («term_-_»
        (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
         "∫"
         (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
         " in "
         (Term.proj `a "." (fieldIdx "1"))
         ".."
         (Term.proj `b "." (fieldIdx "1"))
         ", "
         (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `b "." (fieldIdx "2"))]] ")")]))
        "-"
        (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
         "∫"
         (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
         " in "
         (Term.proj `a "." (fieldIdx "1"))
         ".."
         (Term.proj `b "." (fieldIdx "1"))
         ", "
         (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `a "." (fieldIdx "2"))]] ")")])))
       "+"
       (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
        "∫"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `y) []))
        " in "
        (Term.proj `a "." (fieldIdx "2"))
        ".."
        (Term.proj `b "." (fieldIdx "2"))
        ", "
        (Term.app `f [(Term.tuple "(" [(Term.proj `b "." (fieldIdx "1")) "," [`y]] ")")])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
       "∫"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `y) []))
       " in "
       (Term.proj `a "." (fieldIdx "2"))
       ".."
       (Term.proj `b "." (fieldIdx "2"))
       ", "
       (Term.app `f [(Term.tuple "(" [(Term.proj `b "." (fieldIdx "1")) "," [`y]] ")")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [(Term.tuple "(" [(Term.proj `b "." (fieldIdx "1")) "," [`y]] ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tuple', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tuple', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.tuple "(" [(Term.proj `b "." (fieldIdx "1")) "," [`y]] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `y
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `b "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `b
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `b "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `b
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `a "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      («term_-_»
       (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
        "∫"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
        " in "
        (Term.proj `a "." (fieldIdx "1"))
        ".."
        (Term.proj `b "." (fieldIdx "1"))
        ", "
        (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `b "." (fieldIdx "2"))]] ")")]))
       "-"
       (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
        "∫"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
        " in "
        (Term.proj `a "." (fieldIdx "1"))
        ".."
        (Term.proj `b "." (fieldIdx "1"))
        ", "
        (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `a "." (fieldIdx "2"))]] ")")])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
       "∫"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
       " in "
       (Term.proj `a "." (fieldIdx "1"))
       ".."
       (Term.proj `b "." (fieldIdx "1"))
       ", "
       (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `a "." (fieldIdx "2"))]] ")")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `a "." (fieldIdx "2"))]] ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tuple', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tuple', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.tuple "(" [`x "," [(Term.proj `a "." (fieldIdx "2"))]] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `a "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `g
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `b "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `b
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `a "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
       "∫"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
       " in "
       (Term.proj `a "." (fieldIdx "1"))
       ".."
       (Term.proj `b "." (fieldIdx "1"))
       ", "
       (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `b "." (fieldIdx "2"))]] ")")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `b "." (fieldIdx "2"))]] ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tuple', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.tuple', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.tuple "(" [`x "," [(Term.proj `b "." (fieldIdx "2"))]] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `b "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `b
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `g
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `b "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `b
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `a "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1022, (some 0, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
      "∫"
      (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
      " in "
      (Term.proj `a "." (fieldIdx "1"))
      ".."
      (Term.proj `b "." (fieldIdx "1"))
      ", "
      (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `b "." (fieldIdx "2"))]] ")")]))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 65 >? 65, (some 0, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_-_»
      (Term.paren
       "("
       (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
        "∫"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
        " in "
        (Term.proj `a "." (fieldIdx "1"))
        ".."
        (Term.proj `b "." (fieldIdx "1"))
        ", "
        (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `b "." (fieldIdx "2"))]] ")")]))
       ")")
      "-"
      (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
       "∫"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
       " in "
       (Term.proj `a "." (fieldIdx "1"))
       ".."
       (Term.proj `b "." (fieldIdx "1"))
       ", "
       (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `a "." (fieldIdx "2"))]] ")")])))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 65 >? 65, (some 0, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_+_»
      (Term.paren
       "("
       («term_-_»
        (Term.paren
         "("
         (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
          "∫"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
          " in "
          (Term.proj `a "." (fieldIdx "1"))
          ".."
          (Term.proj `b "." (fieldIdx "1"))
          ", "
          (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `b "." (fieldIdx "2"))]] ")")]))
         ")")
        "-"
        (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
         "∫"
         (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
         " in "
         (Term.proj `a "." (fieldIdx "1"))
         ".."
         (Term.proj `b "." (fieldIdx "1"))
         ", "
         (Term.app `g [(Term.tuple "(" [`x "," [(Term.proj `a "." (fieldIdx "2"))]] ")")])))
       ")")
      "+"
      (MeasureTheory.Integral.IntervalIntegral.«term∫_in_.._,_»
       "∫"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `y) []))
       " in "
       (Term.proj `a "." (fieldIdx "2"))
       ".."
       (Term.proj `b "." (fieldIdx "2"))
       ", "
       (Term.app `f [(Term.tuple "(" [(Term.proj `b "." (fieldIdx "1")) "," [`y]] ")")])))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               (Term.forall
                "∀"
                [(Term.explicitBinder
                  "("
                  [`a `b]
                  [":" (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝ¹» "ℝ¹")]
                  []
                  ")")
                 (Term.explicitBinder
                  "("
                  [`f]
                  [":"
                   (Term.arrow
                    (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝ¹» "ℝ¹")
                    "→"
                    `E)]
                  []
                  ")")]
                []
                ","
                («term_=_»
                 (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                  "∫"
                  (Std.ExtendedBinder.extBinders
                   (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                  " in "
                  (Term.app `Icc [`a `b])
                  ", "
                  (Term.app `f [`x]))
                 "="
                 (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
                  "∫"
                  (Std.ExtendedBinder.extBinders
                   (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
                  " in "
                  (Term.app `Icc [(Term.app `a [(num "0")]) (Term.app `b [(num "0")])])
                  ", "
                  (Term.app `f [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `x))])))))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.intro "intro" [`a `b `f])
                 []
                 (convert
                  "convert"
                  []
                  (Term.proj
                   (Term.app
                    (Term.proj
                     (Term.app
                      (Term.proj
                       (Term.app
                        `volume_preserving_fun_unique
                        [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
                       "."
                       `symm)
                      [(Term.hole "_")])
                     "."
                     `set_integral_preimage_emb)
                    [(Term.app `MeasurableEquiv.measurable_embedding [(Term.hole "_")])
                     (Term.hole "_")
                     (Term.hole "_")])
                   "."
                   `symm)
                  [])
                 []
                 (Tactic.exact
                  "exact"
                  (Term.proj
                   (Term.app
                    (Term.proj
                     (Term.proj
                      (Term.app
                       `OrderIso.funUnique
                       [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
                      "."
                      `symm)
                     "."
                     `preimage_Icc)
                    [`a `b])
                   "."
                   `symm))]))))))
          []
          (Tactic.simp
           "simp"
           []
           []
           ["only"]
           ["[" [(Tactic.simpLemma [] [] `Fin.sum_univ_two) "," (Tactic.simpLemma [] [] `this)] "]"]
           [])
          []
          (Tactic.tacticRfl "rfl")])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticRfl "rfl")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       ["only"]
       ["[" [(Tactic.simpLemma [] [] `Fin.sum_univ_two) "," (Tactic.simpLemma [] [] `this)] "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `this
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Fin.sum_univ_two
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           (Term.forall
            "∀"
            [(Term.explicitBinder
              "("
              [`a `b]
              [":" (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝ¹» "ℝ¹")]
              []
              ")")
             (Term.explicitBinder
              "("
              [`f]
              [":"
               (Term.arrow
                (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝ¹» "ℝ¹")
                "→"
                `E)]
              []
              ")")]
            []
            ","
            («term_=_»
             (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
              "∫"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
              " in "
              (Term.app `Icc [`a `b])
              ", "
              (Term.app `f [`x]))
             "="
             (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
              "∫"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
              " in "
              (Term.app `Icc [(Term.app `a [(num "0")]) (Term.app `b [(num "0")])])
              ", "
              (Term.app `f [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `x))])))))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.intro "intro" [`a `b `f])
             []
             (convert
              "convert"
              []
              (Term.proj
               (Term.app
                (Term.proj
                 (Term.app
                  (Term.proj
                   (Term.app
                    `volume_preserving_fun_unique
                    [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
                   "."
                   `symm)
                  [(Term.hole "_")])
                 "."
                 `set_integral_preimage_emb)
                [(Term.app `MeasurableEquiv.measurable_embedding [(Term.hole "_")])
                 (Term.hole "_")
                 (Term.hole "_")])
               "."
               `symm)
              [])
             []
             (Tactic.exact
              "exact"
              (Term.proj
               (Term.app
                (Term.proj
                 (Term.proj
                  (Term.app
                   `OrderIso.funUnique
                   [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
                  "."
                  `symm)
                 "."
                 `preimage_Icc)
                [`a `b])
               "."
               `symm))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.intro "intro" [`a `b `f])
          []
          (convert
           "convert"
           []
           (Term.proj
            (Term.app
             (Term.proj
              (Term.app
               (Term.proj
                (Term.app
                 `volume_preserving_fun_unique
                 [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
                "."
                `symm)
               [(Term.hole "_")])
              "."
              `set_integral_preimage_emb)
             [(Term.app `MeasurableEquiv.measurable_embedding [(Term.hole "_")])
              (Term.hole "_")
              (Term.hole "_")])
            "."
            `symm)
           [])
          []
          (Tactic.exact
           "exact"
           (Term.proj
            (Term.app
             (Term.proj
              (Term.proj
               (Term.app
                `OrderIso.funUnique
                [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
               "."
               `symm)
              "."
              `preimage_Icc)
             [`a `b])
            "."
            `symm))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.proj
        (Term.app
         (Term.proj
          (Term.proj
           (Term.app `OrderIso.funUnique [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
           "."
           `symm)
          "."
          `preimage_Icc)
         [`a `b])
        "."
        `symm))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj
       (Term.app
        (Term.proj
         (Term.proj
          (Term.app `OrderIso.funUnique [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
          "."
          `symm)
         "."
         `preimage_Icc)
        [`a `b])
       "."
       `symm)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       (Term.proj
        (Term.proj
         (Term.app `OrderIso.funUnique [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
         "."
         `symm)
        "."
        `preimage_Icc)
       [`a `b])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       (Term.proj
        (Term.app `OrderIso.funUnique [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
        "."
        `symm)
       "."
       `preimage_Icc)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj
       (Term.app `OrderIso.funUnique [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
       "."
       `symm)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `OrderIso.funUnique [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.app `Fin [(num "1")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Fin
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `Fin [(num "1")]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `OrderIso.funUnique
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `OrderIso.funUnique
      [(Term.paren "(" (Term.app `Fin [(num "1")]) ")") (Data.Real.Basic.termℝ "ℝ")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj
       (Term.proj
        (Term.paren
         "("
         (Term.app
          `OrderIso.funUnique
          [(Term.paren "(" (Term.app `Fin [(num "1")]) ")") (Data.Real.Basic.termℝ "ℝ")])
         ")")
        "."
        `symm)
       "."
       `preimage_Icc)
      [`a `b])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (convert
       "convert"
       []
       (Term.proj
        (Term.app
         (Term.proj
          (Term.app
           (Term.proj
            (Term.app
             `volume_preserving_fun_unique
             [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
            "."
            `symm)
           [(Term.hole "_")])
          "."
          `set_integral_preimage_emb)
         [(Term.app `MeasurableEquiv.measurable_embedding [(Term.hole "_")])
          (Term.hole "_")
          (Term.hole "_")])
        "."
        `symm)
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj
       (Term.app
        (Term.proj
         (Term.app
          (Term.proj
           (Term.app
            `volume_preserving_fun_unique
            [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
           "."
           `symm)
          [(Term.hole "_")])
         "."
         `set_integral_preimage_emb)
        [(Term.app `MeasurableEquiv.measurable_embedding [(Term.hole "_")])
         (Term.hole "_")
         (Term.hole "_")])
       "."
       `symm)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       (Term.proj
        (Term.app
         (Term.proj
          (Term.app
           `volume_preserving_fun_unique
           [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
          "."
          `symm)
         [(Term.hole "_")])
        "."
        `set_integral_preimage_emb)
       [(Term.app `MeasurableEquiv.measurable_embedding [(Term.hole "_")])
        (Term.hole "_")
        (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.app `MeasurableEquiv.measurable_embedding [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `MeasurableEquiv.measurable_embedding
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `MeasurableEquiv.measurable_embedding [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       (Term.app
        (Term.proj
         (Term.app
          `volume_preserving_fun_unique
          [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
         "."
         `symm)
        [(Term.hole "_")])
       "."
       `set_integral_preimage_emb)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       (Term.proj
        (Term.app
         `volume_preserving_fun_unique
         [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
        "."
        `symm)
       [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       (Term.app
        `volume_preserving_fun_unique
        [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
       "."
       `symm)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `volume_preserving_fun_unique
       [(Term.app `Fin [(num "1")]) (Data.Real.Basic.termℝ "ℝ")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Data.Real.Basic.termℝ', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Data.Real.Basic.termℝ "ℝ")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.app `Fin [(num "1")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Fin
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `Fin [(num "1")]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `volume_preserving_fun_unique
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `volume_preserving_fun_unique
      [(Term.paren "(" (Term.app `Fin [(num "1")]) ")") (Data.Real.Basic.termℝ "ℝ")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj
       (Term.paren
        "("
        (Term.app
         `volume_preserving_fun_unique
         [(Term.paren "(" (Term.app `Fin [(num "1")]) ")") (Data.Real.Basic.termℝ "ℝ")])
        ")")
       "."
       `symm)
      [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj
       (Term.paren
        "("
        (Term.app
         (Term.proj
          (Term.paren
           "("
           (Term.app
            `volume_preserving_fun_unique
            [(Term.paren "(" (Term.app `Fin [(num "1")]) ")") (Data.Real.Basic.termℝ "ℝ")])
           ")")
          "."
          `symm)
         [(Term.hole "_")])
        ")")
       "."
       `set_integral_preimage_emb)
      [(Term.paren "(" (Term.app `MeasurableEquiv.measurable_embedding [(Term.hole "_")]) ")")
       (Term.hole "_")
       (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`a `b `f])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `b
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "∀"
       [(Term.explicitBinder
         "("
         [`a `b]
         [":" (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝ¹» "ℝ¹")]
         []
         ")")
        (Term.explicitBinder
         "("
         [`f]
         [":"
          (Term.arrow
           (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝ¹» "ℝ¹")
           "→"
           `E)]
         []
         ")")]
       []
       ","
       («term_=_»
        (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
         "∫"
         (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
         " in "
         (Term.app `Icc [`a `b])
         ", "
         (Term.app `f [`x]))
        "="
        (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
         "∫"
         (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
         " in "
         (Term.app `Icc [(Term.app `a [(num "0")]) (Term.app `b [(num "0")])])
         ", "
         (Term.app `f [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `x))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_»
       (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
        "∫"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
        " in "
        (Term.app `Icc [`a `b])
        ", "
        (Term.app `f [`x]))
       "="
       (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
        "∫"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
        " in "
        (Term.app `Icc [(Term.app `a [(num "0")]) (Term.app `b [(num "0")])])
        ", "
        (Term.app `f [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `x))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
       "∫"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
       " in "
       (Term.app `Icc [(Term.app `a [(num "0")]) (Term.app `b [(num "0")])])
       ", "
       (Term.app `f [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `x))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [(Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `x))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [(Term.hole "_")] [] "=>" `x))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Icc [(Term.app `a [(num "0")]) (Term.app `b [(num "0")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `b [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `b
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `b [(num "0")]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `a [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `a [(num "0")]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Icc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
       "∫"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
       " in "
       (Term.app `Icc [`a `b])
       ", "
       (Term.app `f [`x]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Icc [`a `b])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `b
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `a
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Icc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (MeasureTheory.MeasureTheory.Integral.Bochner.«term∫_in_,_»
      "∫"
      (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) []))
      " in "
      (Term.app `Icc [`a `b])
      ", "
      (Term.app `f [`x]))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝ¹» "ℝ¹") "→" `E)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `E
[PrettyPrinter.parenthesize] ...precedences are 25 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      (MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝ¹» "ℝ¹")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.«termℝ¹»', expected 'MeasureTheory.MeasureTheory.Integral.DivergenceTheorem.termℝ¹._@.MeasureTheory.Integral.DivergenceTheorem._hyg.829'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.letPatDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.haveIdDecl', expected 'Lean.Parser.Term.haveEqnsDecl'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    **Divergence theorem** for functions on the plane along rectangles. It is formulated in terms of
    two functions `f g : ℝ × ℝ → E` and an integral over `Icc a b = [a.1, b.1] × [a.2, b.2]`, where
    `a b : ℝ × ℝ`, `a ≤ b`. When thinking of `f` and `g` as the two coordinates of a single function
    `F : ℝ × ℝ → E × E` and when `E = ℝ`, this is the usual statement that the integral of the
    divergence of `F` inside the rectangle equals the integral of the normal derivative of `F` along the
    boundary.
    
    See also `measure_theory.integral2_divergence_prod_of_has_fderiv_within_at_off_countable` for a
    version that does not assume `a ≤ b` and uses iterated interval integral instead of the integral
    over `Icc a b`. -/
  theorem
    integral_divergence_prod_Icc_of_has_fderiv_within_at_off_countable_of_le
    ( f g : ℝ × ℝ → E )
        ( f' g' : ℝ × ℝ → ℝ × ℝ →L[ ℝ ] E )
        ( a b : ℝ × ℝ )
        ( hle : a ≤ b )
        ( s : Set ℝ × ℝ )
        ( hs : s . Countable )
        ( Hcf : ContinuousOn f icc a b )
        ( Hcg : ContinuousOn g icc a b )
        ( Hdf : ∀ x ∈ ioo a . 1 b . 1 ×ˢ ioo a . 2 b . 2 \ s , HasFderivAt f f' x x )
        ( Hdg : ∀ x ∈ ioo a . 1 b . 1 ×ˢ ioo a . 2 b . 2 \ s , HasFderivAt g g' x x )
        ( Hi : IntegrableOn fun x => f' x ( 1 , 0 ) + g' x ( 0 , 1 ) icc a b )
      :
        ∫ x in icc a b , f' x ( 1 , 0 ) + g' x ( 0 , 1 )
          =
          ∫ x in a . 1 .. b . 1 , g ( x , b . 2 ) - ∫ x in a . 1 .. b . 1 , g ( x , a . 2 )
              +
              ∫ y in a . 2 .. b . 2 , f ( b . 1 , y )
            -
            ∫ y in a . 2 .. b . 2 , f ( a . 1 , y )
    :=
      let
        e : ℝ × ℝ ≃L[ ℝ ] ℝ² := ContinuousLinearEquiv.finTwoArrow ℝ ℝ . symm
        calc
          ∫ x in icc a b , f' x ( 1 , 0 ) + g' x ( 0 , 1 )
              =
              ∑
                i : Fin 2
                ,
                ∫
                    x
                    in
                    icc e a ∘ i . succAbove e b ∘ i . succAbove
                    ,
                    ![ f , g ] i e . symm <| i . insertNth e b i x
                  -
                  ∫
                    x
                    in
                    icc e a ∘ i . succAbove e b ∘ i . succAbove
                    ,
                    ![ f , g ] i e . symm <| i . insertNth e a i x
            :=
            by
              refine'
                  integral_divergence_of_has_fderiv_within_at_off_countable_of_equiv
                    e _ _ ![ f , g ] ![ f' , g' ] s hs a b hle _ fun x hx => _ _ _ Hi
                · exact fun x y => OrderIso.finTwoArrowIso ℝ . symm . le_iff_le
                · exact volume_preserving_fin_two_arrow ℝ . symm _
                · exact Fin.forall_fin_two . 2 ⟨ Hcf , Hcg ⟩
                ·
                  rw [ Icc_prod_eq , interior_prod_eq , interior_Icc , interior_Icc ] at hx
                    exact Fin.forall_fin_two . 2 ⟨ Hdf x hx , Hdg x hx ⟩
                · intro x rw [ Fin.sum_univ_two ] simp
          _
                =
                ∫ y in icc a . 2 b . 2 , f ( b . 1 , y ) - ∫ y in icc a . 2 b . 2 , f ( a . 1 , y )
                  +
                  ∫ x in icc a . 1 b . 1 , g ( x , b . 2 )
                    -
                    ∫ x in icc a . 1 b . 1 , g ( x , a . 2 )
              :=
              by
                have
                    :
                        ∀
                          ( a b : ℝ¹ ) ( f : ℝ¹ → E )
                          ,
                          ∫ x in Icc a b , f x = ∫ x in Icc a 0 b 0 , f fun _ => x
                      :=
                      by
                        intro a b f
                          convert
                            volume_preserving_fun_unique Fin 1 ℝ . symm _
                                  .
                                  set_integral_preimage_emb
                                MeasurableEquiv.measurable_embedding _ _ _
                              .
                              symm
                          exact OrderIso.funUnique Fin 1 ℝ . symm . preimage_Icc a b . symm
                  simp only [ Fin.sum_univ_two , this ]
                  rfl
            _
                =
                ∫ x in a . 1 .. b . 1 , g ( x , b . 2 ) - ∫ x in a . 1 .. b . 1 , g ( x , a . 2 )
                    +
                    ∫ y in a . 2 .. b . 2 , f ( b . 1 , y )
                  -
                  ∫ y in a . 2 .. b . 2 , f ( a . 1 , y )
              :=
              by
                simp
                    only
                    [
                      intervalIntegral.integral_of_le hle . 1
                        ,
                        intervalIntegral.integral_of_le hle . 2
                        ,
                        set_integral_congr_set_ae Ioc_ae_eq_Icc
                      ]
                  abel
#align
  measure_theory.integral_divergence_prod_Icc_of_has_fderiv_within_at_off_countable_of_le MeasureTheory.integral_divergence_prod_Icc_of_has_fderiv_within_at_off_countable_of_le

/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
/-- **Divergence theorem** for functions on the plane. It is formulated in terms of two functions
`f g : ℝ × ℝ → E` and iterated integral `∫ x in a₁..b₁, ∫ y in a₂..b₂, _`, where
`a₁ a₂ b₁ b₂ : ℝ`. When thinking of `f` and `g` as the two coordinates of a single function
`F : ℝ × ℝ → E × E` and when `E = ℝ`, this is the usual statement that the integral of the
divergence of `F` inside the rectangle with vertices `(aᵢ, bⱼ)`, `i, j =1,2`, equals the integral of
the normal derivative of `F` along the boundary.

See also `measure_theory.integral_divergence_prod_Icc_of_has_fderiv_within_at_off_countable_of_le`
for a version that uses an integral over `Icc a b`, where `a b : ℝ × ℝ`, `a ≤ b`. -/
theorem integral2_divergence_prod_of_has_fderiv_within_at_off_countable (f g : ℝ × ℝ → E)
    (f' g' : ℝ × ℝ → ℝ × ℝ →L[ℝ] E) (a₁ a₂ b₁ b₂ : ℝ) (s : Set (ℝ × ℝ)) (hs : s.Countable)
    (Hcf : ContinuousOn f ([a₁, b₁] ×ˢ [a₂, b₂])) (Hcg : ContinuousOn g ([a₁, b₁] ×ˢ [a₂, b₂]))
    (Hdf :
      ∀ x ∈ ioo (min a₁ b₁) (max a₁ b₁) ×ˢ ioo (min a₂ b₂) (max a₂ b₂) \ s, HasFderivAt f (f' x) x)
    (Hdg :
      ∀ x ∈ ioo (min a₁ b₁) (max a₁ b₁) ×ˢ ioo (min a₂ b₂) (max a₂ b₂) \ s, HasFderivAt g (g' x) x)
    (Hi : IntegrableOn (fun x => f' x (1, 0) + g' x (0, 1)) ([a₁, b₁] ×ˢ [a₂, b₂])) :
    (∫ x in a₁..b₁, ∫ y in a₂..b₂, f' (x, y) (1, 0) + g' (x, y) (0, 1)) =
      (((∫ x in a₁..b₁, g (x, b₂)) - ∫ x in a₁..b₁, g (x, a₂)) + ∫ y in a₂..b₂, f (b₁, y)) -
        ∫ y in a₂..b₂, f (a₁, y) :=
  by
  wlog (discharger := tactic.skip) h₁ : a₁ ≤ b₁ := le_total a₁ b₁ using a₁ b₁, b₁ a₁
  wlog (discharger := tactic.skip) h₂ : a₂ ≤ b₂ := le_total a₂ b₂ using a₂ b₂, b₂ a₂
  · simp only [interval_of_le h₁, interval_of_le h₂, min_eq_left, max_eq_right, h₁, h₂] at
      Hcf Hcg Hdf Hdg Hi
    calc
      (∫ x in a₁..b₁, ∫ y in a₂..b₂, f' (x, y) (1, 0) + g' (x, y) (0, 1)) =
          ∫ x in Icc a₁ b₁, ∫ y in Icc a₂ b₂, f' (x, y) (1, 0) + g' (x, y) (0, 1) :=
        by
        simp only [intervalIntegral.integral_of_le, h₁, h₂, set_integral_congr_set_ae Ioc_ae_eq_Icc]
      _ = ∫ x in Icc a₁ b₁ ×ˢ Icc a₂ b₂, f' x (1, 0) + g' x (0, 1) := (set_integral_prod _ Hi).symm
      _ =
          (((∫ x in a₁..b₁, g (x, b₂)) - ∫ x in a₁..b₁, g (x, a₂)) + ∫ y in a₂..b₂, f (b₁, y)) -
            ∫ y in a₂..b₂, f (a₁, y) :=
        by
        rw [Icc_prod_Icc] at *
        apply
            integral_divergence_prod_Icc_of_has_fderiv_within_at_off_countable_of_le f g f' g'
              (a₁, a₂) (b₁, b₂) ⟨h₁, h₂⟩ s <;>
          assumption
      
  · rw [interval_swap b₂ a₂, min_comm b₂ a₂, max_comm b₂ a₂] at this
    intro Hcf Hcg Hdf Hdg Hi
    simp only [intervalIntegral.integral_symm b₂ a₂, intervalIntegral.integral_neg]
    refine' (congr_arg Neg.neg (this Hcf Hcg Hdf Hdg Hi)).trans _
    abel
  · rw [interval_swap b₁ a₁, min_comm b₁ a₁, max_comm b₁ a₁] at this
    intro Hcf Hcg Hdf Hdg Hi
    simp only [intervalIntegral.integral_symm b₁ a₁]
    refine' (congr_arg Neg.neg (this Hcf Hcg Hdf Hdg Hi)).trans _
    abel
#align
  measure_theory.integral2_divergence_prod_of_has_fderiv_within_at_off_countable MeasureTheory.integral2_divergence_prod_of_has_fderiv_within_at_off_countable

end MeasureTheory

