/-
Copyright (c) 2022 S√©bastien Gou√´zel. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: S√©bastien Gou√´zel, Violeta Hern√°ndez Palacios

! This file was ported from Lean 3 source module measure_theory.card_measurable_space
! leanprover-community/mathlib commit 18a5306c091183ac90884daa9373fa3b178e8607
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.MeasureTheory.MeasurableSpaceDef
import Mathbin.SetTheory.Cardinal.Cofinality
import Mathbin.SetTheory.Cardinal.Continuum

/-!
# Cardinal of sigma-algebras

If a sigma-algebra is generated by a set of sets `s`, then the cardinality of the sigma-algebra is
bounded by `(max (#s) 2) ^ ‚Ñµ‚ÇÄ`. This is stated in `measurable_space.cardinal_generate_measurable_le`
and `measurable_space.cardinal_measurable_set_le`.

In particular, if `#s ‚â§ ùî†`, then the generated sigma-algebra has cardinality at most `ùî†`, see
`measurable_space.cardinal_measurable_set_le_continuum`.

For the proof, we rely on an explicit inductive construction of the sigma-algebra generated by
`s` (instead of the inductive predicate `generate_measurable`). This transfinite inductive
construction is parameterized by an ordinal `< œâ‚ÇÅ`, and the cardinality bound is preserved along
each step of the construction. We show in `measurable_space.generate_measurable_eq_rec` that this
indeed generates this sigma-algebra.
-/


universe u

variable {Œ± : Type u}

open Cardinal

open Cardinal Set

-- mathport name: exprœâ‚ÇÅ
local notation "œâ‚ÇÅ" => (aleph 1 : Cardinal.{u}).ord.out.Œ±

namespace MeasurableSpace

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "Transfinite induction construction of the sigma-algebra generated by a set of sets `s`. At each\nstep, we add all elements of `s`, the empty set, the complements of already constructed sets, and\ncountable unions of already constructed sets. We index this construction by an ordinal `< œâ‚ÇÅ`, as\nthis will be enough to generate all sets in the sigma-algebra.\n\nThis construction is very similar to that of the Borel hierarchy. -/")]
      []
      []
      []
      []
      [])
     (Command.def
      "def"
      (Command.declId `generateMeasurableRec [])
      (Command.optDeclSig
       [(Term.explicitBinder "(" [`s] [":" (Term.app `Set [(Term.app `Set [`Œ±])])] [] ")")]
       [(Term.typeSpec
         ":"
         (Term.arrow
          (MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ "œâ‚ÇÅ")
          "‚Üí"
          (Term.app `Set [(Term.app `Set [`Œ±])])))])
      (Command.declValEqns
       (Term.matchAltsWhereDecls
        (Term.matchAlts
         [(Term.matchAlt
           "|"
           [[`i]]
           "=>"
           (Term.let
            "let"
            (Term.letDecl
             (Term.letIdDecl
              `S
              []
              []
              ":="
              (Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª
               "‚ãÉ"
               (Std.ExtendedBinder.extBinders
                (Std.ExtendedBinder.extBinder
                 (Lean.binderIdent `j)
                 [(group ":" (Term.app `Iio [`i]))]))
               ", "
               (Term.app `generate_measurable_rec [(Term.proj `j "." (fieldIdx "1"))]))))
            []
            (¬´term_‚à™_¬ª
             (¬´term_‚à™_¬ª
              (¬´term_‚à™_¬ª `s "‚à™" (¬´term{_}¬ª "{" [(¬´term‚àÖ¬ª "‚àÖ")] "}"))
              "‚à™"
              (Set.Data.Set.Image.term_''_ `compl " '' " `S))
             "‚à™"
             (Term.app
              `Set.range
              [(Term.fun
                "fun"
                (Term.basicFun
                 [`f]
                 [(Term.typeSpec ":" (Term.arrow (term‚Ñï "‚Ñï") "‚Üí" `S))]
                 "=>"
                 (Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª
                  "‚ãÉ"
                  (Std.ExtendedBinder.extBinders
                   (Std.ExtendedBinder.extBinder (Lean.binderIdent `n) []))
                  ", "
                  (Term.proj (Term.app `f [`n]) "." (fieldIdx "1")))))]))))])
        []))
      []
      []
      [(Command.decreasingBy
        "decreasing_by"
        (Command.terminationHint1
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(Tactic.exact "exact" (Term.proj `j "." (fieldIdx "2")))]))))]))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.terminationHint1', expected 'Lean.Parser.Command.terminationHintMany'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.proj `j "." (fieldIdx "2")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `j "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `j
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValEqns', expected 'Lean.Parser.Command.declValSimple'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.let
       "let"
       (Term.letDecl
        (Term.letIdDecl
         `S
         []
         []
         ":="
         (Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª
          "‚ãÉ"
          (Std.ExtendedBinder.extBinders
           (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) [(group ":" (Term.app `Iio [`i]))]))
          ", "
          (Term.app `generate_measurable_rec [(Term.proj `j "." (fieldIdx "1"))]))))
       []
       (¬´term_‚à™_¬ª
        (¬´term_‚à™_¬ª
         (¬´term_‚à™_¬ª `s "‚à™" (¬´term{_}¬ª "{" [(¬´term‚àÖ¬ª "‚àÖ")] "}"))
         "‚à™"
         (Set.Data.Set.Image.term_''_ `compl " '' " `S))
        "‚à™"
        (Term.app
         `Set.range
         [(Term.fun
           "fun"
           (Term.basicFun
            [`f]
            [(Term.typeSpec ":" (Term.arrow (term‚Ñï "‚Ñï") "‚Üí" `S))]
            "=>"
            (Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª
             "‚ãÉ"
             (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `n) []))
             ", "
             (Term.proj (Term.app `f [`n]) "." (fieldIdx "1")))))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚à™_¬ª
       (¬´term_‚à™_¬ª
        (¬´term_‚à™_¬ª `s "‚à™" (¬´term{_}¬ª "{" [(¬´term‚àÖ¬ª "‚àÖ")] "}"))
        "‚à™"
        (Set.Data.Set.Image.term_''_ `compl " '' " `S))
       "‚à™"
       (Term.app
        `Set.range
        [(Term.fun
          "fun"
          (Term.basicFun
           [`f]
           [(Term.typeSpec ":" (Term.arrow (term‚Ñï "‚Ñï") "‚Üí" `S))]
           "=>"
           (Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª
            "‚ãÉ"
            (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `n) []))
            ", "
            (Term.proj (Term.app `f [`n]) "." (fieldIdx "1")))))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Set.range
       [(Term.fun
         "fun"
         (Term.basicFun
          [`f]
          [(Term.typeSpec ":" (Term.arrow (term‚Ñï "‚Ñï") "‚Üí" `S))]
          "=>"
          (Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª
           "‚ãÉ"
           (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `n) []))
           ", "
           (Term.proj (Term.app `f [`n]) "." (fieldIdx "1")))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`f]
        [(Term.typeSpec ":" (Term.arrow (term‚Ñï "‚Ñï") "‚Üí" `S))]
        "=>"
        (Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª
         "‚ãÉ"
         (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `n) []))
         ", "
         (Term.proj (Term.app `f [`n]) "." (fieldIdx "1")))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª
       "‚ãÉ"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `n) []))
       ", "
       (Term.proj (Term.app `f [`n]) "." (fieldIdx "1")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `f [`n]) "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `f [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `f [`n]) ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow (term‚Ñï "‚Ñï") "‚Üí" `S)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `S
[PrettyPrinter.parenthesize] ...precedences are 25 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      (term‚Ñï "‚Ñï")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Set.range
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_‚à™_¬ª
       (¬´term_‚à™_¬ª `s "‚à™" (¬´term{_}¬ª "{" [(¬´term‚àÖ¬ª "‚àÖ")] "}"))
       "‚à™"
       (Set.Data.Set.Image.term_''_ `compl " '' " `S))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Set.Data.Set.Image.term_''_ `compl " '' " `S)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `S
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `compl
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 80, (some 81, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (¬´term_‚à™_¬ª `s "‚à™" (¬´term{_}¬ª "{" [(¬´term‚àÖ¬ª "‚àÖ")] "}"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term{_}¬ª "{" [(¬´term‚àÖ¬ª "‚àÖ")] "}")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term‚àÖ¬ª "‚àÖ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `s
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 65, (some 66, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 65, (some 66, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª
       "‚ãÉ"
       (Std.ExtendedBinder.extBinders
        (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) [(group ":" (Term.app `Iio [`i]))]))
       ", "
       (Term.app `generate_measurable_rec [(Term.proj `j "." (fieldIdx "1"))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `generate_measurable_rec [(Term.proj `j "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `j
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `generate_measurable_rec
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Iio [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Iio
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (Term.arrow
       (MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ "œâ‚ÇÅ")
       "‚Üí"
       (Term.app `Set [(Term.app `Set [`Œ±])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Set [(Term.app `Set [`Œ±])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Set [`Œ±])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Œ±
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Set
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `Set [`Œ±]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Set
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      (MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ "œâ‚ÇÅ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ', expected 'MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ._@.MeasureTheory.CardMeasurableSpace._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.theorem'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.def', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    Transfinite induction construction of the sigma-algebra generated by a set of sets `s`. At each
    step, we add all elements of `s`, the empty set, the complements of already constructed sets, and
    countable unions of already constructed sets. We index this construction by an ordinal `< œâ‚ÇÅ`, as
    this will be enough to generate all sets in the sigma-algebra.
    
    This construction is very similar to that of the Borel hierarchy. -/
  def
    generateMeasurableRec
    ( s : Set Set Œ± ) : œâ‚ÇÅ ‚Üí Set Set Œ±
    |
      i
      =>
      let
        S := ‚ãÉ j : Iio i , generate_measurable_rec j . 1
        s ‚à™ { ‚àÖ } ‚à™ compl '' S ‚à™ Set.range fun f : ‚Ñï ‚Üí S => ‚ãÉ n , f n . 1
    decreasing_by exact j . 2
#align measurable_space.generate_measurable_rec MeasurableSpace.generateMeasurableRec

/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[["[", expr subset_union_of_subset_left, "]"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error -/
/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers [] [] [] [] [] [])
     (Command.theorem
      "theorem"
      (Command.declId `self_subset_generate_measurable_rec [])
      (Command.declSig
       [(Term.explicitBinder "(" [`s] [":" (Term.app `Set [(Term.app `Set [`Œ±])])] [] ")")
        (Term.explicitBinder "(" [`i] [":" (MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ "œâ‚ÇÅ")] [] ")")]
       (Term.typeSpec ":" (¬´term_‚äÜ_¬ª `s "‚äÜ" (Term.app `generateMeasurableRec [`s `i]))))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.unfold "unfold" [`generate_measurable_rec] [])
           []
           (choice
            (Tactic.trace
             "trace"
             (str
              "\"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\\\"[\\\", expr subset_union_of_subset_left, \\\"]\\\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error\""))
            (Tactic.traceMessage
             "trace"
             (str
              "\"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\\\"[\\\", expr subset_union_of_subset_left, \\\"]\\\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error\"")))
           []
           (Tactic.exact "exact" `subset_rfl)])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.unfold "unfold" [`generate_measurable_rec] [])
          []
          (choice
           (Tactic.trace
            "trace"
            (str
             "\"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\\\"[\\\", expr subset_union_of_subset_left, \\\"]\\\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error\""))
           (Tactic.traceMessage
            "trace"
            (str
             "\"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\\\"[\\\", expr subset_union_of_subset_left, \\\"]\\\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error\"")))
          []
          (Tactic.exact "exact" `subset_rfl)])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" `subset_rfl)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `subset_rfl
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (choice
       (Tactic.trace
        "trace"
        (str
         "\"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\\\"[\\\", expr subset_union_of_subset_left, \\\"]\\\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error\""))
       (Tactic.traceMessage
        "trace"
        (str
         "\"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\\\"[\\\", expr subset_union_of_subset_left, \\\"]\\\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error\"")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
      (str
       "\"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\\\"[\\\", expr subset_union_of_subset_left, \\\"]\\\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error\"")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (some 1022, tactic)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.unfold "unfold" [`generate_measurable_rec] [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (¬´term_‚äÜ_¬ª `s "‚äÜ" (Term.app `generateMeasurableRec [`s `i]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `generateMeasurableRec [`s `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `s
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `generateMeasurableRec
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `s
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ "œâ‚ÇÅ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ', expected 'MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ._@.MeasureTheory.CardMeasurableSpace._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  self_subset_generate_measurable_rec
  ( s : Set Set Œ± ) ( i : œâ‚ÇÅ ) : s ‚äÜ generateMeasurableRec s i
  :=
    by
      unfold generate_measurable_rec
        trace
            "./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\"[\", expr subset_union_of_subset_left, \"]\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error"
          trace
            "./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\"[\", expr subset_union_of_subset_left, \"]\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error"
        exact subset_rfl
#align
  measurable_space.self_subset_generate_measurable_rec MeasurableSpace.self_subset_generate_measurable_rec

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers [] [] [] [] [] [])
     (Command.theorem
      "theorem"
      (Command.declId `empty_mem_generate_measurable_rec [])
      (Command.declSig
       [(Term.explicitBinder "(" [`s] [":" (Term.app `Set [(Term.app `Set [`Œ±])])] [] ")")
        (Term.explicitBinder "(" [`i] [":" (MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ "œâ‚ÇÅ")] [] ")")]
       (Term.typeSpec ":" (¬´term_‚àà_¬ª (¬´term‚àÖ¬ª "‚àÖ") "‚àà" (Term.app `generateMeasurableRec [`s `i]))))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.unfold "unfold" [`generate_measurable_rec] [])
           []
           (Tactic.exact
            "exact"
            (Term.app
             `mem_union_left
             [(Term.hole "_")
              (Term.app
               `mem_union_left
               [(Term.hole "_")
                (Term.app
                 `mem_union_right
                 [(Term.hole "_") (Term.app `mem_singleton [(¬´term‚àÖ¬ª "‚àÖ")])])])]))])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.unfold "unfold" [`generate_measurable_rec] [])
          []
          (Tactic.exact
           "exact"
           (Term.app
            `mem_union_left
            [(Term.hole "_")
             (Term.app
              `mem_union_left
              [(Term.hole "_")
               (Term.app
                `mem_union_right
                [(Term.hole "_") (Term.app `mem_singleton [(¬´term‚àÖ¬ª "‚àÖ")])])])]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `mem_union_left
        [(Term.hole "_")
         (Term.app
          `mem_union_left
          [(Term.hole "_")
           (Term.app
            `mem_union_right
            [(Term.hole "_") (Term.app `mem_singleton [(¬´term‚àÖ¬ª "‚àÖ")])])])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `mem_union_left
       [(Term.hole "_")
        (Term.app
         `mem_union_left
         [(Term.hole "_")
          (Term.app
           `mem_union_right
           [(Term.hole "_") (Term.app `mem_singleton [(¬´term‚àÖ¬ª "‚àÖ")])])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `mem_union_left
       [(Term.hole "_")
        (Term.app `mem_union_right [(Term.hole "_") (Term.app `mem_singleton [(¬´term‚àÖ¬ª "‚àÖ")])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `mem_union_right [(Term.hole "_") (Term.app `mem_singleton [(¬´term‚àÖ¬ª "‚àÖ")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `mem_singleton [(¬´term‚àÖ¬ª "‚àÖ")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term‚àÖ¬ª', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '¬´term‚àÖ¬ª', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term‚àÖ¬ª "‚àÖ")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mem_singleton
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `mem_singleton [(¬´term‚àÖ¬ª "‚àÖ")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mem_union_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `mem_union_right
      [(Term.hole "_") (Term.paren "(" (Term.app `mem_singleton [(¬´term‚àÖ¬ª "‚àÖ")]) ")")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mem_union_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `mem_union_left
      [(Term.hole "_")
       (Term.paren
        "("
        (Term.app
         `mem_union_right
         [(Term.hole "_") (Term.paren "(" (Term.app `mem_singleton [(¬´term‚àÖ¬ª "‚àÖ")]) ")")])
        ")")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mem_union_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.unfold "unfold" [`generate_measurable_rec] [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (¬´term_‚àà_¬ª (¬´term‚àÖ¬ª "‚àÖ") "‚àà" (Term.app `generateMeasurableRec [`s `i]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `generateMeasurableRec [`s `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `s
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `generateMeasurableRec
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (¬´term‚àÖ¬ª "‚àÖ")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ "œâ‚ÇÅ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ', expected 'MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ._@.MeasureTheory.CardMeasurableSpace._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  empty_mem_generate_measurable_rec
  ( s : Set Set Œ± ) ( i : œâ‚ÇÅ ) : ‚àÖ ‚àà generateMeasurableRec s i
  :=
    by
      unfold generate_measurable_rec
        exact mem_union_left _ mem_union_left _ mem_union_right _ mem_singleton ‚àÖ
#align
  measurable_space.empty_mem_generate_measurable_rec MeasurableSpace.empty_mem_generate_measurable_rec

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers [] [] [] [] [] [])
     (Command.theorem
      "theorem"
      (Command.declId `compl_mem_generate_measurable_rec [])
      (Command.declSig
       [(Term.implicitBinder "{" [`s] [":" (Term.app `Set [(Term.app `Set [`Œ±])])] "}")
        (Term.implicitBinder "{" [`i `j] [":" (MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ "œâ‚ÇÅ")] "}")
        (Term.explicitBinder "(" [`h] [":" (¬´term_<_¬ª `j "<" `i)] [] ")")
        (Term.implicitBinder "{" [`t] [":" (Term.app `Set [`Œ±])] "}")
        (Term.explicitBinder
         "("
         [`ht]
         [":" (¬´term_‚àà_¬ª `t "‚àà" (Term.app `generateMeasurableRec [`s `j]))]
         []
         ")")]
       (Term.typeSpec
        ":"
        (¬´term_‚àà_¬ª (Order.Basic.¬´term_·∂ú¬ª `t "·∂ú") "‚àà" (Term.app `generateMeasurableRec [`s `i]))))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.unfold "unfold" [`generate_measurable_rec] [])
           []
           (Tactic.exact
            "exact"
            (Term.app
             `mem_union_left
             [(Term.hole "_")
              (Term.app
               `mem_union_right
               [(Term.hole "_")
                (Term.anonymousCtor
                 "‚ü®"
                 [`t
                  ","
                  (Term.app
                   (Term.proj `mem_Union "." (fieldIdx "2"))
                   [(Term.anonymousCtor
                     "‚ü®"
                     [(Term.anonymousCtor "‚ü®" [`j "," `h] "‚ü©") "," `ht]
                     "‚ü©")])
                  ","
                  `rfl]
                 "‚ü©")])]))])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.unfold "unfold" [`generate_measurable_rec] [])
          []
          (Tactic.exact
           "exact"
           (Term.app
            `mem_union_left
            [(Term.hole "_")
             (Term.app
              `mem_union_right
              [(Term.hole "_")
               (Term.anonymousCtor
                "‚ü®"
                [`t
                 ","
                 (Term.app
                  (Term.proj `mem_Union "." (fieldIdx "2"))
                  [(Term.anonymousCtor "‚ü®" [(Term.anonymousCtor "‚ü®" [`j "," `h] "‚ü©") "," `ht] "‚ü©")])
                 ","
                 `rfl]
                "‚ü©")])]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `mem_union_left
        [(Term.hole "_")
         (Term.app
          `mem_union_right
          [(Term.hole "_")
           (Term.anonymousCtor
            "‚ü®"
            [`t
             ","
             (Term.app
              (Term.proj `mem_Union "." (fieldIdx "2"))
              [(Term.anonymousCtor "‚ü®" [(Term.anonymousCtor "‚ü®" [`j "," `h] "‚ü©") "," `ht] "‚ü©")])
             ","
             `rfl]
            "‚ü©")])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `mem_union_left
       [(Term.hole "_")
        (Term.app
         `mem_union_right
         [(Term.hole "_")
          (Term.anonymousCtor
           "‚ü®"
           [`t
            ","
            (Term.app
             (Term.proj `mem_Union "." (fieldIdx "2"))
             [(Term.anonymousCtor "‚ü®" [(Term.anonymousCtor "‚ü®" [`j "," `h] "‚ü©") "," `ht] "‚ü©")])
            ","
            `rfl]
           "‚ü©")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `mem_union_right
       [(Term.hole "_")
        (Term.anonymousCtor
         "‚ü®"
         [`t
          ","
          (Term.app
           (Term.proj `mem_Union "." (fieldIdx "2"))
           [(Term.anonymousCtor "‚ü®" [(Term.anonymousCtor "‚ü®" [`j "," `h] "‚ü©") "," `ht] "‚ü©")])
          ","
          `rfl]
         "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "‚ü®"
       [`t
        ","
        (Term.app
         (Term.proj `mem_Union "." (fieldIdx "2"))
         [(Term.anonymousCtor "‚ü®" [(Term.anonymousCtor "‚ü®" [`j "," `h] "‚ü©") "," `ht] "‚ü©")])
        ","
        `rfl]
       "‚ü©")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `rfl
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `mem_Union "." (fieldIdx "2"))
       [(Term.anonymousCtor "‚ü®" [(Term.anonymousCtor "‚ü®" [`j "," `h] "‚ü©") "," `ht] "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor "‚ü®" [(Term.anonymousCtor "‚ü®" [`j "," `h] "‚ü©") "," `ht] "‚ü©")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `ht
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor "‚ü®" [`j "," `h] "‚ü©")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `j
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `mem_Union "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `mem_Union
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `t
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mem_union_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `mem_union_right
      [(Term.hole "_")
       (Term.anonymousCtor
        "‚ü®"
        [`t
         ","
         (Term.app
          (Term.proj `mem_Union "." (fieldIdx "2"))
          [(Term.anonymousCtor "‚ü®" [(Term.anonymousCtor "‚ü®" [`j "," `h] "‚ü©") "," `ht] "‚ü©")])
         ","
         `rfl]
        "‚ü©")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mem_union_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.unfold "unfold" [`generate_measurable_rec] [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (¬´term_‚àà_¬ª (Order.Basic.¬´term_·∂ú¬ª `t "·∂ú") "‚àà" (Term.app `generateMeasurableRec [`s `i]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `generateMeasurableRec [`s `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `s
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `generateMeasurableRec
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Order.Basic.¬´term_·∂ú¬ª `t "·∂ú")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 999, term))
      `t
[PrettyPrinter.parenthesize] ...precedences are 999 >? 1024, (none,
     [anonymous]) <=? (some 999, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 999, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚àà_¬ª `t "‚àà" (Term.app `generateMeasurableRec [`s `j]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `generateMeasurableRec [`s `j])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `j
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `s
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `generateMeasurableRec
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `t
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.implicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.implicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.implicitBinder', expected 'Lean.Parser.Term.explicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.implicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Set [`Œ±])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Œ±
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Set
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_<_¬ª `j "<" `i)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `j
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.implicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.implicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.implicitBinder', expected 'Lean.Parser.Term.explicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.implicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ "œâ‚ÇÅ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ', expected 'MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ._@.MeasureTheory.CardMeasurableSpace._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.implicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  compl_mem_generate_measurable_rec
  { s : Set Set Œ± } { i j : œâ‚ÇÅ } ( h : j < i ) { t : Set Œ± } ( ht : t ‚àà generateMeasurableRec s j )
    : t ·∂ú ‚àà generateMeasurableRec s i
  :=
    by
      unfold generate_measurable_rec
        exact mem_union_left _ mem_union_right _ ‚ü® t , mem_Union . 2 ‚ü® ‚ü® j , h ‚ü© , ht ‚ü© , rfl ‚ü©
#align
  measurable_space.compl_mem_generate_measurable_rec MeasurableSpace.compl_mem_generate_measurable_rec

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers [] [] [] [] [] [])
     (Command.theorem
      "theorem"
      (Command.declId `Union_mem_generate_measurable_rec [])
      (Command.declSig
       [(Term.implicitBinder "{" [`s] [":" (Term.app `Set [(Term.app `Set [`Œ±])])] "}")
        (Term.implicitBinder "{" [`i] [":" (MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ "œâ‚ÇÅ")] "}")
        (Term.implicitBinder "{" [`f] [":" (Term.arrow (term‚Ñï "‚Ñï") "‚Üí" (Term.app `Set [`Œ±]))] "}")
        (Term.explicitBinder
         "("
         [`hf]
         [":"
          (Term.forall
           "‚àÄ"
           [`n]
           []
           ","
           (Std.ExtendedBinder.¬´term‚àÉ__,_¬ª
            "‚àÉ"
            (Lean.binderIdent `j)
            (Std.ExtendedBinder.¬´binderTerm<_¬ª "<" `i)
            ","
            (¬´term_‚àà_¬ª (Term.app `f [`n]) "‚àà" (Term.app `generateMeasurableRec [`s `j]))))]
         []
         ")")]
       (Term.typeSpec
        ":"
        (¬´term_‚àà_¬ª
         (Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª
          "‚ãÉ"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `n) []))
          ", "
          (Term.app `f [`n]))
         "‚àà"
         (Term.app `generateMeasurableRec [`s `i]))))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.unfold "unfold" [`generate_measurable_rec] [])
           []
           (Tactic.exact
            "exact"
            (Term.app
             `mem_union_right
             [(Term.hole "_")
              (Term.anonymousCtor
               "‚ü®"
               [(Term.fun
                 "fun"
                 (Term.basicFun
                  [`n]
                  []
                  "=>"
                  (Term.anonymousCtor
                   "‚ü®"
                   [(Term.app `f [`n])
                    ","
                    (Term.let
                     "let"
                     (Term.letDecl
                      (Term.letPatDecl
                       (Term.anonymousCtor "‚ü®" [`j "," `hj "," `hf] "‚ü©")
                       []
                       []
                       ":="
                       (Term.app `hf [`n])))
                     []
                     (Term.app
                      (Term.proj `mem_Union "." (fieldIdx "2"))
                      [(Term.anonymousCtor
                        "‚ü®"
                        [(Term.anonymousCtor "‚ü®" [`j "," `hj] "‚ü©") "," `hf]
                        "‚ü©")]))]
                   "‚ü©")))
                ","
                `rfl]
               "‚ü©")]))])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.unfold "unfold" [`generate_measurable_rec] [])
          []
          (Tactic.exact
           "exact"
           (Term.app
            `mem_union_right
            [(Term.hole "_")
             (Term.anonymousCtor
              "‚ü®"
              [(Term.fun
                "fun"
                (Term.basicFun
                 [`n]
                 []
                 "=>"
                 (Term.anonymousCtor
                  "‚ü®"
                  [(Term.app `f [`n])
                   ","
                   (Term.let
                    "let"
                    (Term.letDecl
                     (Term.letPatDecl
                      (Term.anonymousCtor "‚ü®" [`j "," `hj "," `hf] "‚ü©")
                      []
                      []
                      ":="
                      (Term.app `hf [`n])))
                    []
                    (Term.app
                     (Term.proj `mem_Union "." (fieldIdx "2"))
                     [(Term.anonymousCtor
                       "‚ü®"
                       [(Term.anonymousCtor "‚ü®" [`j "," `hj] "‚ü©") "," `hf]
                       "‚ü©")]))]
                  "‚ü©")))
               ","
               `rfl]
              "‚ü©")]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `mem_union_right
        [(Term.hole "_")
         (Term.anonymousCtor
          "‚ü®"
          [(Term.fun
            "fun"
            (Term.basicFun
             [`n]
             []
             "=>"
             (Term.anonymousCtor
              "‚ü®"
              [(Term.app `f [`n])
               ","
               (Term.let
                "let"
                (Term.letDecl
                 (Term.letPatDecl
                  (Term.anonymousCtor "‚ü®" [`j "," `hj "," `hf] "‚ü©")
                  []
                  []
                  ":="
                  (Term.app `hf [`n])))
                []
                (Term.app
                 (Term.proj `mem_Union "." (fieldIdx "2"))
                 [(Term.anonymousCtor
                   "‚ü®"
                   [(Term.anonymousCtor "‚ü®" [`j "," `hj] "‚ü©") "," `hf]
                   "‚ü©")]))]
              "‚ü©")))
           ","
           `rfl]
          "‚ü©")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `mem_union_right
       [(Term.hole "_")
        (Term.anonymousCtor
         "‚ü®"
         [(Term.fun
           "fun"
           (Term.basicFun
            [`n]
            []
            "=>"
            (Term.anonymousCtor
             "‚ü®"
             [(Term.app `f [`n])
              ","
              (Term.let
               "let"
               (Term.letDecl
                (Term.letPatDecl
                 (Term.anonymousCtor "‚ü®" [`j "," `hj "," `hf] "‚ü©")
                 []
                 []
                 ":="
                 (Term.app `hf [`n])))
               []
               (Term.app
                (Term.proj `mem_Union "." (fieldIdx "2"))
                [(Term.anonymousCtor
                  "‚ü®"
                  [(Term.anonymousCtor "‚ü®" [`j "," `hj] "‚ü©") "," `hf]
                  "‚ü©")]))]
             "‚ü©")))
          ","
          `rfl]
         "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "‚ü®"
       [(Term.fun
         "fun"
         (Term.basicFun
          [`n]
          []
          "=>"
          (Term.anonymousCtor
           "‚ü®"
           [(Term.app `f [`n])
            ","
            (Term.let
             "let"
             (Term.letDecl
              (Term.letPatDecl
               (Term.anonymousCtor "‚ü®" [`j "," `hj "," `hf] "‚ü©")
               []
               []
               ":="
               (Term.app `hf [`n])))
             []
             (Term.app
              (Term.proj `mem_Union "." (fieldIdx "2"))
              [(Term.anonymousCtor "‚ü®" [(Term.anonymousCtor "‚ü®" [`j "," `hj] "‚ü©") "," `hf] "‚ü©")]))]
           "‚ü©")))
        ","
        `rfl]
       "‚ü©")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `rfl
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`n]
        []
        "=>"
        (Term.anonymousCtor
         "‚ü®"
         [(Term.app `f [`n])
          ","
          (Term.let
           "let"
           (Term.letDecl
            (Term.letPatDecl
             (Term.anonymousCtor "‚ü®" [`j "," `hj "," `hf] "‚ü©")
             []
             []
             ":="
             (Term.app `hf [`n])))
           []
           (Term.app
            (Term.proj `mem_Union "." (fieldIdx "2"))
            [(Term.anonymousCtor "‚ü®" [(Term.anonymousCtor "‚ü®" [`j "," `hj] "‚ü©") "," `hf] "‚ü©")]))]
         "‚ü©")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "‚ü®"
       [(Term.app `f [`n])
        ","
        (Term.let
         "let"
         (Term.letDecl
          (Term.letPatDecl
           (Term.anonymousCtor "‚ü®" [`j "," `hj "," `hf] "‚ü©")
           []
           []
           ":="
           (Term.app `hf [`n])))
         []
         (Term.app
          (Term.proj `mem_Union "." (fieldIdx "2"))
          [(Term.anonymousCtor "‚ü®" [(Term.anonymousCtor "‚ü®" [`j "," `hj] "‚ü©") "," `hf] "‚ü©")]))]
       "‚ü©")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.let
       "let"
       (Term.letDecl
        (Term.letPatDecl
         (Term.anonymousCtor "‚ü®" [`j "," `hj "," `hf] "‚ü©")
         []
         []
         ":="
         (Term.app `hf [`n])))
       []
       (Term.app
        (Term.proj `mem_Union "." (fieldIdx "2"))
        [(Term.anonymousCtor "‚ü®" [(Term.anonymousCtor "‚ü®" [`j "," `hj] "‚ü©") "," `hf] "‚ü©")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `mem_Union "." (fieldIdx "2"))
       [(Term.anonymousCtor "‚ü®" [(Term.anonymousCtor "‚ü®" [`j "," `hj] "‚ü©") "," `hf] "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor "‚ü®" [(Term.anonymousCtor "‚ü®" [`j "," `hj] "‚ü©") "," `hf] "‚ü©")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hf
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor "‚ü®" [`j "," `hj] "‚ü©")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hj
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `j
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `mem_Union "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `mem_Union
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.letPatDecl', expected 'Lean.Parser.Term.letIdDecl'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hf [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hf
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor "‚ü®" [`j "," `hj "," `hf] "‚ü©")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hf
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hj
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `j
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mem_union_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.unfold "unfold" [`generate_measurable_rec] [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (¬´term_‚àà_¬ª
       (Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª
        "‚ãÉ"
        (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `n) []))
        ", "
        (Term.app `f [`n]))
       "‚àà"
       (Term.app `generateMeasurableRec [`s `i]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `generateMeasurableRec [`s `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `s
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `generateMeasurableRec
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª
       "‚ãÉ"
       (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `n) []))
       ", "
       (Term.app `f [`n]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª
      "‚ãÉ"
      (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `n) []))
      ", "
      (Term.app `f [`n]))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "‚àÄ"
       [`n]
       []
       ","
       (Std.ExtendedBinder.¬´term‚àÉ__,_¬ª
        "‚àÉ"
        (Lean.binderIdent `j)
        (Std.ExtendedBinder.¬´binderTerm<_¬ª "<" `i)
        ","
        (¬´term_‚àà_¬ª (Term.app `f [`n]) "‚àà" (Term.app `generateMeasurableRec [`s `j]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.¬´term‚àÉ__,_¬ª
       "‚àÉ"
       (Lean.binderIdent `j)
       (Std.ExtendedBinder.¬´binderTerm<_¬ª "<" `i)
       ","
       (¬´term_‚àà_¬ª (Term.app `f [`n]) "‚àà" (Term.app `generateMeasurableRec [`s `j])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚àà_¬ª (Term.app `f [`n]) "‚àà" (Term.app `generateMeasurableRec [`s `j]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `generateMeasurableRec [`s `j])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `j
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `s
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `generateMeasurableRec
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `f [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.implicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.implicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.implicitBinder', expected 'Lean.Parser.Term.explicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.implicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow (term‚Ñï "‚Ñï") "‚Üí" (Term.app `Set [`Œ±]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Set [`Œ±])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Œ±
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Set
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 25 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      (term‚Ñï "‚Ñï")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 25, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.implicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.implicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.implicitBinder', expected 'Lean.Parser.Term.explicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.implicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ "œâ‚ÇÅ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ', expected 'MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ._@.MeasureTheory.CardMeasurableSpace._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.implicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  Union_mem_generate_measurable_rec
  { s : Set Set Œ± }
      { i : œâ‚ÇÅ }
      { f : ‚Ñï ‚Üí Set Œ± }
      ( hf : ‚àÄ n , ‚àÉ j < i , f n ‚àà generateMeasurableRec s j )
    : ‚ãÉ n , f n ‚àà generateMeasurableRec s i
  :=
    by
      unfold generate_measurable_rec
        exact
          mem_union_right
            _
              ‚ü®
                fun n => ‚ü® f n , let ‚ü® j , hj , hf ‚ü© := hf n mem_Union . 2 ‚ü® ‚ü® j , hj ‚ü© , hf ‚ü© ‚ü©
                  ,
                  rfl
                ‚ü©
#align
  measurable_space.Union_mem_generate_measurable_rec MeasurableSpace.Union_mem_generate_measurable_rec

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers [] [] [] [] [] [])
     (Command.theorem
      "theorem"
      (Command.declId `generate_measurable_rec_subset [])
      (Command.declSig
       [(Term.explicitBinder "(" [`s] [":" (Term.app `Set [(Term.app `Set [`Œ±])])] [] ")")
        (Term.implicitBinder "{" [`i `j] [":" (MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ "œâ‚ÇÅ")] "}")
        (Term.explicitBinder "(" [`h] [":" (¬´term_‚â§_¬ª `i "‚â§" `j)] [] ")")]
       (Term.typeSpec
        ":"
        (¬´term_‚äÜ_¬ª
         (Term.app `generateMeasurableRec [`s `i])
         "‚äÜ"
         (Term.app `generateMeasurableRec [`s `j]))))
      (Command.declValSimple
       ":="
       (Term.fun
        "fun"
        (Term.basicFun
         [`x `hx]
         []
         "=>"
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Std.Tactic.rcases
              "rcases"
              [(Tactic.casesTarget [] (Term.app `eq_or_lt_of_le [`h]))]
              ["with"
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed
                 [(Std.Tactic.RCases.rcasesPat.paren
                   "("
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed
                     [(Std.Tactic.RCases.rcasesPat.one `rfl)
                      "|"
                      (Std.Tactic.RCases.rcasesPat.one `h)])
                    [])
                   ")")])
                [])])
             []
             (tactic__ (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑"))) [(Tactic.exact "exact" `hx)])
             []
             (tactic__
              (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
              [(convert
                "convert"
                []
                (Term.app
                 `Union_mem_generate_measurable_rec
                 [(Term.fun
                   "fun"
                   (Term.basicFun [`n] [] "=>" (Term.anonymousCtor "‚ü®" [`i "," `h "," `hx] "‚ü©")))])
                [])
               []
               (Tactic.exact "exact" (Term.proj (Term.app `Union_const [`x]) "." `symm))])])))))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x `hx]
        []
        "=>"
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(Std.Tactic.rcases
             "rcases"
             [(Tactic.casesTarget [] (Term.app `eq_or_lt_of_le [`h]))]
             ["with"
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed
                [(Std.Tactic.RCases.rcasesPat.paren
                  "("
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed
                    [(Std.Tactic.RCases.rcasesPat.one `rfl)
                     "|"
                     (Std.Tactic.RCases.rcasesPat.one `h)])
                   [])
                  ")")])
               [])])
            []
            (tactic__ (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑"))) [(Tactic.exact "exact" `hx)])
            []
            (tactic__
             (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
             [(convert
               "convert"
               []
               (Term.app
                `Union_mem_generate_measurable_rec
                [(Term.fun
                  "fun"
                  (Term.basicFun [`n] [] "=>" (Term.anonymousCtor "‚ü®" [`i "," `h "," `hx] "‚ü©")))])
               [])
              []
              (Tactic.exact "exact" (Term.proj (Term.app `Union_const [`x]) "." `symm))])])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Std.Tactic.rcases
           "rcases"
           [(Tactic.casesTarget [] (Term.app `eq_or_lt_of_le [`h]))]
           ["with"
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.paren
                "("
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed
                  [(Std.Tactic.RCases.rcasesPat.one `rfl) "|" (Std.Tactic.RCases.rcasesPat.one `h)])
                 [])
                ")")])
             [])])
          []
          (tactic__ (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑"))) [(Tactic.exact "exact" `hx)])
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(convert
             "convert"
             []
             (Term.app
              `Union_mem_generate_measurable_rec
              [(Term.fun
                "fun"
                (Term.basicFun [`n] [] "=>" (Term.anonymousCtor "‚ü®" [`i "," `h "," `hx] "‚ü©")))])
             [])
            []
            (Tactic.exact "exact" (Term.proj (Term.app `Union_const [`x]) "." `symm))])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(convert
         "convert"
         []
         (Term.app
          `Union_mem_generate_measurable_rec
          [(Term.fun
            "fun"
            (Term.basicFun [`n] [] "=>" (Term.anonymousCtor "‚ü®" [`i "," `h "," `hx] "‚ü©")))])
         [])
        []
        (Tactic.exact "exact" (Term.proj (Term.app `Union_const [`x]) "." `symm))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.proj (Term.app `Union_const [`x]) "." `symm))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `Union_const [`x]) "." `symm)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `Union_const [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Union_const
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `Union_const [`x]) ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (convert
       "convert"
       []
       (Term.app
        `Union_mem_generate_measurable_rec
        [(Term.fun
          "fun"
          (Term.basicFun [`n] [] "=>" (Term.anonymousCtor "‚ü®" [`i "," `h "," `hx] "‚ü©")))])
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Union_mem_generate_measurable_rec
       [(Term.fun
         "fun"
         (Term.basicFun [`n] [] "=>" (Term.anonymousCtor "‚ü®" [`i "," `h "," `hx] "‚ü©")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [`n] [] "=>" (Term.anonymousCtor "‚ü®" [`i "," `h "," `hx] "‚ü©")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor "‚ü®" [`i "," `h "," `hx] "‚ü©")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Union_mem_generate_measurable_rec
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__ (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑"))) [(Tactic.exact "exact" `hx)])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" `hx)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rcases
       "rcases"
       [(Tactic.casesTarget [] (Term.app `eq_or_lt_of_le [`h]))]
       ["with"
        (Std.Tactic.RCases.rcasesPatLo
         (Std.Tactic.RCases.rcasesPatMed
          [(Std.Tactic.RCases.rcasesPat.paren
            "("
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.one `rfl) "|" (Std.Tactic.RCases.rcasesPat.one `h)])
             [])
            ")")])
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `eq_or_lt_of_le [`h])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `eq_or_lt_of_le
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (¬´term_‚äÜ_¬ª
       (Term.app `generateMeasurableRec [`s `i])
       "‚äÜ"
       (Term.app `generateMeasurableRec [`s `j]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `generateMeasurableRec [`s `j])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `j
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `s
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `generateMeasurableRec
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `generateMeasurableRec [`s `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `s
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `generateMeasurableRec
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚â§_¬ª `i "‚â§" `j)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `j
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.implicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.implicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.implicitBinder', expected 'Lean.Parser.Term.explicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.implicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ "œâ‚ÇÅ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ', expected 'MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ._@.MeasureTheory.CardMeasurableSpace._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.implicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  generate_measurable_rec_subset
  ( s : Set Set Œ± ) { i j : œâ‚ÇÅ } ( h : i ‚â§ j )
    : generateMeasurableRec s i ‚äÜ generateMeasurableRec s j
  :=
    fun
      x hx
        =>
        by
          rcases eq_or_lt_of_le h with ( rfl | h )
            ¬∑ exact hx
            ¬∑
              convert Union_mem_generate_measurable_rec fun n => ‚ü® i , h , hx ‚ü©
                exact Union_const x . symm
#align
  measurable_space.generate_measurable_rec_subset MeasurableSpace.generate_measurable_rec_subset

/- ./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[["[", expr (mk_union_le _ _).trans, ",", expr add_le_of_le C, ",", expr mk_image_le.trans, "]"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error -/
/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "At each step of the inductive construction, the cardinality bound `‚â§ (max (#s) 2) ^ ‚Ñµ‚ÇÄ` holds.\n-/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `cardinal_generate_measurable_rec_le [])
      (Command.declSig
       [(Term.explicitBinder "(" [`s] [":" (Term.app `Set [(Term.app `Set [`Œ±])])] [] ")")
        (Term.explicitBinder "(" [`i] [":" (MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ "œâ‚ÇÅ")] [] ")")]
       (Term.typeSpec
        ":"
        (¬´term_‚â§_¬ª
         (Cardinal.SetTheory.Cardinal.Basic.cardinal.mk
          "#"
          (Term.app `generateMeasurableRec [`s `i]))
         "‚â§"
         (¬´term_^_¬ª
          (Term.app `max [(Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s) (num "2")])
          "^"
          (Term.explicitUniv `aleph_0 ".{" [`u] "}")))))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.apply
            "apply"
            (Term.app
             (Term.proj
              (Term.proj
               (Term.proj
                (Term.proj (Term.proj (Term.app `aleph [(num "1")]) "." `ord) "." `out)
                "."
                `wo)
               "."
               `wf)
              "."
              `induction)
             [`i]))
           []
           (Tactic.intro "intro" [`i `IH])
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl [`A []] [] ":=" (Term.app `aleph_0_le_aleph [(num "1")]))))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`B []]
              [(Term.typeSpec
                ":"
                (¬´term_‚â§_¬ª
                 (Term.app `aleph [(num "1")])
                 "‚â§"
                 (¬´term_^_¬ª
                  (Term.app `max [(Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s) (num "2")])
                  "^"
                  (Term.explicitUniv `aleph_0 ".{" [`u] "}"))))]
              ":="
              (Term.app
               `aleph_one_le_continuum.trans
               [(Term.app
                 `power_le_power_right
                 [(Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])])]))))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`C []]
              [(Term.typeSpec
                ":"
                (¬´term_‚â§_¬ª
                 (Cardinal.SetTheory.Cardinal.Basic.cardinal.aleph_0 "‚Ñµ‚ÇÄ")
                 "‚â§"
                 (¬´term_^_¬ª
                  (Term.app `max [(Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s) (num "2")])
                  "^"
                  (Term.explicitUniv `aleph_0 ".{" [`u] "}"))))]
              ":="
              (Term.app `A.trans [`B]))))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`J []]
              [(Term.typeSpec
                ":"
                (¬´term_‚â§_¬ª
                 (Cardinal.SetTheory.Cardinal.Basic.cardinal.mk
                  "#"
                  (Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª
                   "‚ãÉ"
                   (Std.ExtendedBinder.extBinders
                    (Std.ExtendedBinder.extBinder
                     (Lean.binderIdent `j)
                     [(group ":" (Term.app `Iio [`i]))]))
                   ", "
                   (Term.app `generate_measurable_rec [`s (Term.proj `j "." (fieldIdx "1"))])))
                 "‚â§"
                 (¬´term_^_¬ª
                  (Term.app `max [(Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s) (num "2")])
                  "^"
                  (Term.explicitUniv `aleph_0 ".{" [`u] "}"))))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.apply
                   "apply"
                   (Term.proj (Term.app `mk_Union_le [(Term.hole "_")]) "." `trans))
                  []
                  (Tactic.tacticHave_
                   "have"
                   (Term.haveDecl
                    (Term.haveIdDecl
                     [`D []]
                     [(Term.typeSpec
                       ":"
                       (¬´term_‚â§_¬ª
                        (Order.CompleteLattice.¬´term‚®Ü_,_¬ª
                         "‚®Ü"
                         (Std.ExtendedBinder.extBinders
                          (Std.ExtendedBinder.extBinder
                           (Lean.binderIdent `j)
                           [(group ":" (Term.app `Iio [`i]))]))
                         ", "
                         (Cardinal.SetTheory.Cardinal.Basic.cardinal.mk
                          "#"
                          (Term.app `generate_measurable_rec [`s `j])))
                        "‚â§"
                        (Term.hole "_")))]
                     ":="
                     (Term.app
                      `csup·µ¢_le'
                      [(Term.fun
                        "fun"
                        (Term.basicFun
                         [(Term.anonymousCtor "‚ü®" [`j "," `hj] "‚ü©")]
                         []
                         "=>"
                         (Term.app `IH [`j `hj])))]))))
                  []
                  (Tactic.apply
                   "apply"
                   (Term.proj
                    (Term.app
                     `mul_le_mul'
                     [(Term.app
                       (Term.proj (Term.app `mk_subtype_le [(Term.hole "_")]) "." `trans)
                       [(Term.proj
                         (Term.proj (Term.app `aleph [(num "1")]) "." `mk_ord_out)
                         "."
                         `le)])
                      `D])
                    "."
                    `trans))
                  []
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `mul_eq_max [`A `C]))] "]")
                   [])
                  []
                  (Tactic.exact "exact" (Term.app `max_le [`B `le_rfl]))]))))))
           []
           (Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `generate_measurable_rec)] "]")
            [])
           []
           (choice
            (Tactic.trace
             "trace"
             (str
              "\"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\\\"[\\\", expr (mk_union_le _ _).trans, \\\",\\\", expr add_le_of_le C, \\\",\\\", expr mk_image_le.trans, \\\"]\\\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error\""))
            (Tactic.traceMessage
             "trace"
             (str
              "\"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\\\"[\\\", expr (mk_union_le _ _).trans, \\\",\\\", expr add_le_of_le C, \\\",\\\", expr mk_image_le.trans, \\\"]\\\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error\"")))
           []
           (tactic__
            (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
            [(Tactic.exact
              "exact"
              (Term.app
               (Term.proj (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")]) "." `trans)
               [(Term.app `self_le_power [(Term.hole "_") `one_lt_aleph_0.le])]))])
           []
           (tactic__
            (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
            [(Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mk_singleton)] "]") [])
             []
             (Tactic.exact "exact" (Term.app `one_lt_aleph_0.le.trans [`C]))])
           []
           (tactic__
            (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
            [(Tactic.apply "apply" `mk_range_le.trans)
             []
             (Tactic.simp
              "simp"
              []
              []
              ["only"]
              ["["
               [(Tactic.simpLemma [] [] `mk_pi)
                ","
                (Tactic.simpLemma [] [] `Subtype.val_eq_coe)
                ","
                (Tactic.simpLemma [] [] `prod_const)
                ","
                (Tactic.simpLemma [] [] `lift_uzero)
                ","
                (Tactic.simpLemma [] [] `mk_denumerable)
                ","
                (Tactic.simpLemma [] [] `lift_aleph_0)]
               "]"]
              [])
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                []
                ":="
                (Term.app
                 (Term.explicit "@" `power_le_power_right)
                 [(Term.hole "_")
                  (Term.hole "_")
                  (Cardinal.SetTheory.Cardinal.Basic.cardinal.aleph_0 "‚Ñµ‚ÇÄ")
                  `J]))))
             []
             (Std.Tactic.tacticRwa__
              "rwa"
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `power_mul)
                ","
                (Tactic.rwRule [] `aleph_0_mul_aleph_0)]
               "]")
              [(Tactic.location "at" (Tactic.locationHyp [`this] []))])])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.apply
           "apply"
           (Term.app
            (Term.proj
             (Term.proj
              (Term.proj
               (Term.proj (Term.proj (Term.app `aleph [(num "1")]) "." `ord) "." `out)
               "."
               `wo)
              "."
              `wf)
             "."
             `induction)
            [`i]))
          []
          (Tactic.intro "intro" [`i `IH])
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl [`A []] [] ":=" (Term.app `aleph_0_le_aleph [(num "1")]))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`B []]
             [(Term.typeSpec
               ":"
               (¬´term_‚â§_¬ª
                (Term.app `aleph [(num "1")])
                "‚â§"
                (¬´term_^_¬ª
                 (Term.app `max [(Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s) (num "2")])
                 "^"
                 (Term.explicitUniv `aleph_0 ".{" [`u] "}"))))]
             ":="
             (Term.app
              `aleph_one_le_continuum.trans
              [(Term.app
                `power_le_power_right
                [(Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])])]))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`C []]
             [(Term.typeSpec
               ":"
               (¬´term_‚â§_¬ª
                (Cardinal.SetTheory.Cardinal.Basic.cardinal.aleph_0 "‚Ñµ‚ÇÄ")
                "‚â§"
                (¬´term_^_¬ª
                 (Term.app `max [(Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s) (num "2")])
                 "^"
                 (Term.explicitUniv `aleph_0 ".{" [`u] "}"))))]
             ":="
             (Term.app `A.trans [`B]))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`J []]
             [(Term.typeSpec
               ":"
               (¬´term_‚â§_¬ª
                (Cardinal.SetTheory.Cardinal.Basic.cardinal.mk
                 "#"
                 (Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª
                  "‚ãÉ"
                  (Std.ExtendedBinder.extBinders
                   (Std.ExtendedBinder.extBinder
                    (Lean.binderIdent `j)
                    [(group ":" (Term.app `Iio [`i]))]))
                  ", "
                  (Term.app `generate_measurable_rec [`s (Term.proj `j "." (fieldIdx "1"))])))
                "‚â§"
                (¬´term_^_¬ª
                 (Term.app `max [(Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s) (num "2")])
                 "^"
                 (Term.explicitUniv `aleph_0 ".{" [`u] "}"))))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.apply
                  "apply"
                  (Term.proj (Term.app `mk_Union_le [(Term.hole "_")]) "." `trans))
                 []
                 (Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`D []]
                    [(Term.typeSpec
                      ":"
                      (¬´term_‚â§_¬ª
                       (Order.CompleteLattice.¬´term‚®Ü_,_¬ª
                        "‚®Ü"
                        (Std.ExtendedBinder.extBinders
                         (Std.ExtendedBinder.extBinder
                          (Lean.binderIdent `j)
                          [(group ":" (Term.app `Iio [`i]))]))
                        ", "
                        (Cardinal.SetTheory.Cardinal.Basic.cardinal.mk
                         "#"
                         (Term.app `generate_measurable_rec [`s `j])))
                       "‚â§"
                       (Term.hole "_")))]
                    ":="
                    (Term.app
                     `csup·µ¢_le'
                     [(Term.fun
                       "fun"
                       (Term.basicFun
                        [(Term.anonymousCtor "‚ü®" [`j "," `hj] "‚ü©")]
                        []
                        "=>"
                        (Term.app `IH [`j `hj])))]))))
                 []
                 (Tactic.apply
                  "apply"
                  (Term.proj
                   (Term.app
                    `mul_le_mul'
                    [(Term.app
                      (Term.proj (Term.app `mk_subtype_le [(Term.hole "_")]) "." `trans)
                      [(Term.proj
                        (Term.proj (Term.app `aleph [(num "1")]) "." `mk_ord_out)
                        "."
                        `le)])
                     `D])
                   "."
                   `trans))
                 []
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `mul_eq_max [`A `C]))] "]")
                  [])
                 []
                 (Tactic.exact "exact" (Term.app `max_le [`B `le_rfl]))]))))))
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `generate_measurable_rec)] "]")
           [])
          []
          (choice
           (Tactic.trace
            "trace"
            (str
             "\"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\\\"[\\\", expr (mk_union_le _ _).trans, \\\",\\\", expr add_le_of_le C, \\\",\\\", expr mk_image_le.trans, \\\"]\\\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error\""))
           (Tactic.traceMessage
            "trace"
            (str
             "\"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\\\"[\\\", expr (mk_union_le _ _).trans, \\\",\\\", expr add_le_of_le C, \\\",\\\", expr mk_image_le.trans, \\\"]\\\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error\"")))
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(Tactic.exact
             "exact"
             (Term.app
              (Term.proj (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")]) "." `trans)
              [(Term.app `self_le_power [(Term.hole "_") `one_lt_aleph_0.le])]))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mk_singleton)] "]") [])
            []
            (Tactic.exact "exact" (Term.app `one_lt_aleph_0.le.trans [`C]))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(Tactic.apply "apply" `mk_range_le.trans)
            []
            (Tactic.simp
             "simp"
             []
             []
             ["only"]
             ["["
              [(Tactic.simpLemma [] [] `mk_pi)
               ","
               (Tactic.simpLemma [] [] `Subtype.val_eq_coe)
               ","
               (Tactic.simpLemma [] [] `prod_const)
               ","
               (Tactic.simpLemma [] [] `lift_uzero)
               ","
               (Tactic.simpLemma [] [] `mk_denumerable)
               ","
               (Tactic.simpLemma [] [] `lift_aleph_0)]
              "]"]
             [])
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               []
               ":="
               (Term.app
                (Term.explicit "@" `power_le_power_right)
                [(Term.hole "_")
                 (Term.hole "_")
                 (Cardinal.SetTheory.Cardinal.Basic.cardinal.aleph_0 "‚Ñµ‚ÇÄ")
                 `J]))))
            []
            (Std.Tactic.tacticRwa__
             "rwa"
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `power_mul)
               ","
               (Tactic.rwRule [] `aleph_0_mul_aleph_0)]
              "]")
             [(Tactic.location "at" (Tactic.locationHyp [`this] []))])])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Tactic.apply "apply" `mk_range_le.trans)
        []
        (Tactic.simp
         "simp"
         []
         []
         ["only"]
         ["["
          [(Tactic.simpLemma [] [] `mk_pi)
           ","
           (Tactic.simpLemma [] [] `Subtype.val_eq_coe)
           ","
           (Tactic.simpLemma [] [] `prod_const)
           ","
           (Tactic.simpLemma [] [] `lift_uzero)
           ","
           (Tactic.simpLemma [] [] `mk_denumerable)
           ","
           (Tactic.simpLemma [] [] `lift_aleph_0)]
          "]"]
         [])
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           []
           ":="
           (Term.app
            (Term.explicit "@" `power_le_power_right)
            [(Term.hole "_")
             (Term.hole "_")
             (Cardinal.SetTheory.Cardinal.Basic.cardinal.aleph_0 "‚Ñµ‚ÇÄ")
             `J]))))
        []
        (Std.Tactic.tacticRwa__
         "rwa"
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `power_mul)
           ","
           (Tactic.rwRule [] `aleph_0_mul_aleph_0)]
          "]")
         [(Tactic.location "at" (Tactic.locationHyp [`this] []))])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.tacticRwa__
       "rwa"
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))] `power_mul)
         ","
         (Tactic.rwRule [] `aleph_0_mul_aleph_0)]
        "]")
       [(Tactic.location "at" (Tactic.locationHyp [`this] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `this
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `aleph_0_mul_aleph_0
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `power_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         []
         ":="
         (Term.app
          (Term.explicit "@" `power_le_power_right)
          [(Term.hole "_")
           (Term.hole "_")
           (Cardinal.SetTheory.Cardinal.Basic.cardinal.aleph_0 "‚Ñµ‚ÇÄ")
           `J]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.explicit "@" `power_le_power_right)
       [(Term.hole "_")
        (Term.hole "_")
        (Cardinal.SetTheory.Cardinal.Basic.cardinal.aleph_0 "‚Ñµ‚ÇÄ")
        `J])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `J
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Cardinal.SetTheory.Cardinal.Basic.cardinal.aleph_0', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Cardinal.SetTheory.Cardinal.Basic.cardinal.aleph_0', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Cardinal.SetTheory.Cardinal.Basic.cardinal.aleph_0 "‚Ñµ‚ÇÄ")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.explicit "@" `power_le_power_right)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `power_le_power_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (some 1024,
     term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       ["only"]
       ["["
        [(Tactic.simpLemma [] [] `mk_pi)
         ","
         (Tactic.simpLemma [] [] `Subtype.val_eq_coe)
         ","
         (Tactic.simpLemma [] [] `prod_const)
         ","
         (Tactic.simpLemma [] [] `lift_uzero)
         ","
         (Tactic.simpLemma [] [] `mk_denumerable)
         ","
         (Tactic.simpLemma [] [] `lift_aleph_0)]
        "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `lift_aleph_0
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mk_denumerable
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `lift_uzero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `prod_const
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Subtype.val_eq_coe
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mk_pi
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.apply "apply" `mk_range_le.trans)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mk_range_le.trans
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mk_singleton)] "]") [])
        []
        (Tactic.exact "exact" (Term.app `one_lt_aleph_0.le.trans [`C]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `one_lt_aleph_0.le.trans [`C]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `one_lt_aleph_0.le.trans [`C])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `one_lt_aleph_0.le.trans
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `mk_singleton)] "]") [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mk_singleton
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Tactic.exact
         "exact"
         (Term.app
          (Term.proj (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")]) "." `trans)
          [(Term.app `self_le_power [(Term.hole "_") `one_lt_aleph_0.le])]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        (Term.proj (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")]) "." `trans)
        [(Term.app `self_le_power [(Term.hole "_") `one_lt_aleph_0.le])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")]) "." `trans)
       [(Term.app `self_le_power [(Term.hole "_") `one_lt_aleph_0.le])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `self_le_power [(Term.hole "_") `one_lt_aleph_0.le])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `one_lt_aleph_0.le
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `self_le_power
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `self_le_power [(Term.hole "_") `one_lt_aleph_0.le])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")]) "." `trans)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_max_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `le_max_left [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (choice
       (Tactic.trace
        "trace"
        (str
         "\"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\\\"[\\\", expr (mk_union_le _ _).trans, \\\",\\\", expr add_le_of_le C, \\\",\\\", expr mk_image_le.trans, \\\"]\\\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error\""))
       (Tactic.traceMessage
        "trace"
        (str
         "\"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\\\"[\\\", expr (mk_union_le _ _).trans, \\\",\\\", expr add_le_of_le C, \\\",\\\", expr mk_image_le.trans, \\\"]\\\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error\"")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, tactic))
      (str
       "\"./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\\\"[\\\", expr (mk_union_le _ _).trans, \\\",\\\", expr add_le_of_le C, \\\",\\\", expr mk_image_le.trans, \\\"]\\\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error\"")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (some 1022, tactic)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `generate_measurable_rec)] "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `generate_measurable_rec
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`J []]
         [(Term.typeSpec
           ":"
           (¬´term_‚â§_¬ª
            (Cardinal.SetTheory.Cardinal.Basic.cardinal.mk
             "#"
             (Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª
              "‚ãÉ"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder
                (Lean.binderIdent `j)
                [(group ":" (Term.app `Iio [`i]))]))
              ", "
              (Term.app `generate_measurable_rec [`s (Term.proj `j "." (fieldIdx "1"))])))
            "‚â§"
            (¬´term_^_¬ª
             (Term.app `max [(Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s) (num "2")])
             "^"
             (Term.explicitUniv `aleph_0 ".{" [`u] "}"))))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.apply "apply" (Term.proj (Term.app `mk_Union_le [(Term.hole "_")]) "." `trans))
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`D []]
                [(Term.typeSpec
                  ":"
                  (¬´term_‚â§_¬ª
                   (Order.CompleteLattice.¬´term‚®Ü_,_¬ª
                    "‚®Ü"
                    (Std.ExtendedBinder.extBinders
                     (Std.ExtendedBinder.extBinder
                      (Lean.binderIdent `j)
                      [(group ":" (Term.app `Iio [`i]))]))
                    ", "
                    (Cardinal.SetTheory.Cardinal.Basic.cardinal.mk
                     "#"
                     (Term.app `generate_measurable_rec [`s `j])))
                   "‚â§"
                   (Term.hole "_")))]
                ":="
                (Term.app
                 `csup·µ¢_le'
                 [(Term.fun
                   "fun"
                   (Term.basicFun
                    [(Term.anonymousCtor "‚ü®" [`j "," `hj] "‚ü©")]
                    []
                    "=>"
                    (Term.app `IH [`j `hj])))]))))
             []
             (Tactic.apply
              "apply"
              (Term.proj
               (Term.app
                `mul_le_mul'
                [(Term.app
                  (Term.proj (Term.app `mk_subtype_le [(Term.hole "_")]) "." `trans)
                  [(Term.proj (Term.proj (Term.app `aleph [(num "1")]) "." `mk_ord_out) "." `le)])
                 `D])
               "."
               `trans))
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `mul_eq_max [`A `C]))] "]")
              [])
             []
             (Tactic.exact "exact" (Term.app `max_le [`B `le_rfl]))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.apply "apply" (Term.proj (Term.app `mk_Union_le [(Term.hole "_")]) "." `trans))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`D []]
             [(Term.typeSpec
               ":"
               (¬´term_‚â§_¬ª
                (Order.CompleteLattice.¬´term‚®Ü_,_¬ª
                 "‚®Ü"
                 (Std.ExtendedBinder.extBinders
                  (Std.ExtendedBinder.extBinder
                   (Lean.binderIdent `j)
                   [(group ":" (Term.app `Iio [`i]))]))
                 ", "
                 (Cardinal.SetTheory.Cardinal.Basic.cardinal.mk
                  "#"
                  (Term.app `generate_measurable_rec [`s `j])))
                "‚â§"
                (Term.hole "_")))]
             ":="
             (Term.app
              `csup·µ¢_le'
              [(Term.fun
                "fun"
                (Term.basicFun
                 [(Term.anonymousCtor "‚ü®" [`j "," `hj] "‚ü©")]
                 []
                 "=>"
                 (Term.app `IH [`j `hj])))]))))
          []
          (Tactic.apply
           "apply"
           (Term.proj
            (Term.app
             `mul_le_mul'
             [(Term.app
               (Term.proj (Term.app `mk_subtype_le [(Term.hole "_")]) "." `trans)
               [(Term.proj (Term.proj (Term.app `aleph [(num "1")]) "." `mk_ord_out) "." `le)])
              `D])
            "."
            `trans))
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `mul_eq_max [`A `C]))] "]")
           [])
          []
          (Tactic.exact "exact" (Term.app `max_le [`B `le_rfl]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `max_le [`B `le_rfl]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `max_le [`B `le_rfl])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `le_rfl
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `B
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `max_le
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `mul_eq_max [`A `C]))] "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `mul_eq_max [`A `C])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `A
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_eq_max
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.apply
       "apply"
       (Term.proj
        (Term.app
         `mul_le_mul'
         [(Term.app
           (Term.proj (Term.app `mk_subtype_le [(Term.hole "_")]) "." `trans)
           [(Term.proj (Term.proj (Term.app `aleph [(num "1")]) "." `mk_ord_out) "." `le)])
          `D])
        "."
        `trans))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj
       (Term.app
        `mul_le_mul'
        [(Term.app
          (Term.proj (Term.app `mk_subtype_le [(Term.hole "_")]) "." `trans)
          [(Term.proj (Term.proj (Term.app `aleph [(num "1")]) "." `mk_ord_out) "." `le)])
         `D])
       "."
       `trans)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `mul_le_mul'
       [(Term.app
         (Term.proj (Term.app `mk_subtype_le [(Term.hole "_")]) "." `trans)
         [(Term.proj (Term.proj (Term.app `aleph [(num "1")]) "." `mk_ord_out) "." `le)])
        `D])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `D
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       (Term.proj (Term.app `mk_subtype_le [(Term.hole "_")]) "." `trans)
       [(Term.proj (Term.proj (Term.app `aleph [(num "1")]) "." `mk_ord_out) "." `le)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.proj (Term.app `aleph [(num "1")]) "." `mk_ord_out) "." `le)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj (Term.app `aleph [(num "1")]) "." `mk_ord_out)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `aleph [(num "1")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `aleph
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `aleph [(num "1")]) ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `mk_subtype_le [(Term.hole "_")]) "." `trans)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `mk_subtype_le [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mk_subtype_le
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `mk_subtype_le [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj (Term.paren "(" (Term.app `mk_subtype_le [(Term.hole "_")]) ")") "." `trans)
      [(Term.proj
        (Term.proj (Term.paren "(" (Term.app `aleph [(num "1")]) ")") "." `mk_ord_out)
        "."
        `le)])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_le_mul'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `mul_le_mul'
      [(Term.paren
        "("
        (Term.app
         (Term.proj (Term.paren "(" (Term.app `mk_subtype_le [(Term.hole "_")]) ")") "." `trans)
         [(Term.proj
           (Term.proj (Term.paren "(" (Term.app `aleph [(num "1")]) ")") "." `mk_ord_out)
           "."
           `le)])
        ")")
       `D])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`D []]
         [(Term.typeSpec
           ":"
           (¬´term_‚â§_¬ª
            (Order.CompleteLattice.¬´term‚®Ü_,_¬ª
             "‚®Ü"
             (Std.ExtendedBinder.extBinders
              (Std.ExtendedBinder.extBinder
               (Lean.binderIdent `j)
               [(group ":" (Term.app `Iio [`i]))]))
             ", "
             (Cardinal.SetTheory.Cardinal.Basic.cardinal.mk
              "#"
              (Term.app `generate_measurable_rec [`s `j])))
            "‚â§"
            (Term.hole "_")))]
         ":="
         (Term.app
          `csup·µ¢_le'
          [(Term.fun
            "fun"
            (Term.basicFun
             [(Term.anonymousCtor "‚ü®" [`j "," `hj] "‚ü©")]
             []
             "=>"
             (Term.app `IH [`j `hj])))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `csup·µ¢_le'
       [(Term.fun
         "fun"
         (Term.basicFun
          [(Term.anonymousCtor "‚ü®" [`j "," `hj] "‚ü©")]
          []
          "=>"
          (Term.app `IH [`j `hj])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun [(Term.anonymousCtor "‚ü®" [`j "," `hj] "‚ü©")] [] "=>" (Term.app `IH [`j `hj])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `IH [`j `hj])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hj
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `j
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `IH
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor "‚ü®" [`j "," `hj] "‚ü©")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hj
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `j
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `csup·µ¢_le'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚â§_¬ª
       (Order.CompleteLattice.¬´term‚®Ü_,_¬ª
        "‚®Ü"
        (Std.ExtendedBinder.extBinders
         (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) [(group ":" (Term.app `Iio [`i]))]))
        ", "
        (Cardinal.SetTheory.Cardinal.Basic.cardinal.mk
         "#"
         (Term.app `generate_measurable_rec [`s `j])))
       "‚â§"
       (Term.hole "_"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Order.CompleteLattice.¬´term‚®Ü_,_¬ª
       "‚®Ü"
       (Std.ExtendedBinder.extBinders
        (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) [(group ":" (Term.app `Iio [`i]))]))
       ", "
       (Cardinal.SetTheory.Cardinal.Basic.cardinal.mk
        "#"
        (Term.app `generate_measurable_rec [`s `j])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Cardinal.SetTheory.Cardinal.Basic.cardinal.mk
       "#"
       (Term.app `generate_measurable_rec [`s `j]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `generate_measurable_rec [`s `j])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `j
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `s
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `generate_measurable_rec
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 0, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Iio [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Iio
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 0, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Order.CompleteLattice.¬´term‚®Ü_,_¬ª
      "‚®Ü"
      (Std.ExtendedBinder.extBinders
       (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) [(group ":" (Term.app `Iio [`i]))]))
      ", "
      (Cardinal.SetTheory.Cardinal.Basic.cardinal.mk
       "#"
       (Term.app `generate_measurable_rec [`s `j])))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.apply "apply" (Term.proj (Term.app `mk_Union_le [(Term.hole "_")]) "." `trans))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `mk_Union_le [(Term.hole "_")]) "." `trans)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `mk_Union_le [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mk_Union_le
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `mk_Union_le [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚â§_¬ª
       (Cardinal.SetTheory.Cardinal.Basic.cardinal.mk
        "#"
        (Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª
         "‚ãÉ"
         (Std.ExtendedBinder.extBinders
          (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) [(group ":" (Term.app `Iio [`i]))]))
         ", "
         (Term.app `generate_measurable_rec [`s (Term.proj `j "." (fieldIdx "1"))])))
       "‚â§"
       (¬´term_^_¬ª
        (Term.app `max [(Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s) (num "2")])
        "^"
        (Term.explicitUniv `aleph_0 ".{" [`u] "}")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_^_¬ª
       (Term.app `max [(Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s) (num "2")])
       "^"
       (Term.explicitUniv `aleph_0 ".{" [`u] "}"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.explicitUniv `aleph_0 ".{" [`u] "}")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `u
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `aleph_0
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Term.app `max [(Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s) (num "2")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Cardinal.SetTheory.Cardinal.Basic.cardinal.mk', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Cardinal.SetTheory.Cardinal.Basic.cardinal.mk', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `s
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 0, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s)
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `max
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Cardinal.SetTheory.Cardinal.Basic.cardinal.mk
       "#"
       (Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª
        "‚ãÉ"
        (Std.ExtendedBinder.extBinders
         (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) [(group ":" (Term.app `Iio [`i]))]))
        ", "
        (Term.app `generate_measurable_rec [`s (Term.proj `j "." (fieldIdx "1"))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª
       "‚ãÉ"
       (Std.ExtendedBinder.extBinders
        (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) [(group ":" (Term.app `Iio [`i]))]))
       ", "
       (Term.app `generate_measurable_rec [`s (Term.proj `j "." (fieldIdx "1"))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `generate_measurable_rec [`s (Term.proj `j "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `j "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `j
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `s
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `generate_measurable_rec
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Iio [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Iio
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 0, (some 0, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Cardinal.SetTheory.Cardinal.Basic.cardinal.mk
      "#"
      (Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª
       "‚ãÉ"
       (Std.ExtendedBinder.extBinders
        (Std.ExtendedBinder.extBinder (Lean.binderIdent `j) [(group ":" (Term.app `Iio [`i]))]))
       ", "
       (Term.app `generate_measurable_rec [`s (Term.proj `j "." (fieldIdx "1"))])))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`C []]
         [(Term.typeSpec
           ":"
           (¬´term_‚â§_¬ª
            (Cardinal.SetTheory.Cardinal.Basic.cardinal.aleph_0 "‚Ñµ‚ÇÄ")
            "‚â§"
            (¬´term_^_¬ª
             (Term.app `max [(Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s) (num "2")])
             "^"
             (Term.explicitUniv `aleph_0 ".{" [`u] "}"))))]
         ":="
         (Term.app `A.trans [`B]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `A.trans [`B])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `B
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `A.trans
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚â§_¬ª
       (Cardinal.SetTheory.Cardinal.Basic.cardinal.aleph_0 "‚Ñµ‚ÇÄ")
       "‚â§"
       (¬´term_^_¬ª
        (Term.app `max [(Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s) (num "2")])
        "^"
        (Term.explicitUniv `aleph_0 ".{" [`u] "}")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_^_¬ª
       (Term.app `max [(Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s) (num "2")])
       "^"
       (Term.explicitUniv `aleph_0 ".{" [`u] "}"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.explicitUniv `aleph_0 ".{" [`u] "}")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `u
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `aleph_0
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Term.app `max [(Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s) (num "2")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Cardinal.SetTheory.Cardinal.Basic.cardinal.mk', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Cardinal.SetTheory.Cardinal.Basic.cardinal.mk', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `s
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 0, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s)
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `max
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Cardinal.SetTheory.Cardinal.Basic.cardinal.aleph_0 "‚Ñµ‚ÇÄ")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`B []]
         [(Term.typeSpec
           ":"
           (¬´term_‚â§_¬ª
            (Term.app `aleph [(num "1")])
            "‚â§"
            (¬´term_^_¬ª
             (Term.app `max [(Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s) (num "2")])
             "^"
             (Term.explicitUniv `aleph_0 ".{" [`u] "}"))))]
         ":="
         (Term.app
          `aleph_one_le_continuum.trans
          [(Term.app
            `power_le_power_right
            [(Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])])]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `aleph_one_le_continuum.trans
       [(Term.app
         `power_le_power_right
         [(Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `power_le_power_right [(Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_max_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `power_le_power_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `power_le_power_right
      [(Term.paren "(" (Term.app `le_max_right [(Term.hole "_") (Term.hole "_")]) ")")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `aleph_one_le_continuum.trans
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚â§_¬ª
       (Term.app `aleph [(num "1")])
       "‚â§"
       (¬´term_^_¬ª
        (Term.app `max [(Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s) (num "2")])
        "^"
        (Term.explicitUniv `aleph_0 ".{" [`u] "}")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_^_¬ª
       (Term.app `max [(Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s) (num "2")])
       "^"
       (Term.explicitUniv `aleph_0 ".{" [`u] "}"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.explicitUniv `aleph_0 ".{" [`u] "}")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `u
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `aleph_0
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Term.app `max [(Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s) (num "2")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Cardinal.SetTheory.Cardinal.Basic.cardinal.mk', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Cardinal.SetTheory.Cardinal.Basic.cardinal.mk', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `s
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 0, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s)
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `max
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `aleph [(num "1")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `aleph
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl (Term.haveIdDecl [`A []] [] ":=" (Term.app `aleph_0_le_aleph [(num "1")]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `aleph_0_le_aleph [(num "1")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `aleph_0_le_aleph
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`i `IH])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `IH
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.apply
       "apply"
       (Term.app
        (Term.proj
         (Term.proj
          (Term.proj
           (Term.proj (Term.proj (Term.app `aleph [(num "1")]) "." `ord) "." `out)
           "."
           `wo)
          "."
          `wf)
         "."
         `induction)
        [`i]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj
        (Term.proj
         (Term.proj (Term.proj (Term.proj (Term.app `aleph [(num "1")]) "." `ord) "." `out) "." `wo)
         "."
         `wf)
        "."
        `induction)
       [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       (Term.proj
        (Term.proj (Term.proj (Term.proj (Term.app `aleph [(num "1")]) "." `ord) "." `out) "." `wo)
        "."
        `wf)
       "."
       `induction)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj
       (Term.proj (Term.proj (Term.proj (Term.app `aleph [(num "1")]) "." `ord) "." `out) "." `wo)
       "."
       `wf)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj (Term.proj (Term.proj (Term.app `aleph [(num "1")]) "." `ord) "." `out) "." `wo)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj (Term.proj (Term.app `aleph [(num "1")]) "." `ord) "." `out)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj (Term.app `aleph [(num "1")]) "." `ord)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `aleph [(num "1")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `aleph
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `aleph [(num "1")]) ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (¬´term_‚â§_¬ª
       (Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" (Term.app `generateMeasurableRec [`s `i]))
       "‚â§"
       (¬´term_^_¬ª
        (Term.app `max [(Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s) (num "2")])
        "^"
        (Term.explicitUniv `aleph_0 ".{" [`u] "}")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_^_¬ª
       (Term.app `max [(Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s) (num "2")])
       "^"
       (Term.explicitUniv `aleph_0 ".{" [`u] "}"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.explicitUniv `aleph_0 ".{" [`u] "}")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `u
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `aleph_0
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Term.app `max [(Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s) (num "2")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Cardinal.SetTheory.Cardinal.Basic.cardinal.mk', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Cardinal.SetTheory.Cardinal.Basic.cardinal.mk', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `s
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 0, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" `s)
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `max
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" (Term.app `generateMeasurableRec [`s `i]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `generateMeasurableRec [`s `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `s
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `generateMeasurableRec
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 0, (some 0, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Cardinal.SetTheory.Cardinal.Basic.cardinal.mk "#" (Term.app `generateMeasurableRec [`s `i]))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ "œâ‚ÇÅ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ', expected 'MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ._@.MeasureTheory.CardMeasurableSpace._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    At each step of the inductive construction, the cardinality bound `‚â§ (max (#s) 2) ^ ‚Ñµ‚ÇÄ` holds.
    -/
  theorem
    cardinal_generate_measurable_rec_le
    ( s : Set Set Œ± ) ( i : œâ‚ÇÅ ) : # generateMeasurableRec s i ‚â§ max # s 2 ^ aleph_0 .{ u }
    :=
      by
        apply aleph 1 . ord . out . wo . wf . induction i
          intro i IH
          have A := aleph_0_le_aleph 1
          have
            B
              : aleph 1 ‚â§ max # s 2 ^ aleph_0 .{ u }
              :=
              aleph_one_le_continuum.trans power_le_power_right le_max_right _ _
          have C : ‚Ñµ‚ÇÄ ‚â§ max # s 2 ^ aleph_0 .{ u } := A.trans B
          have
            J
              : # ‚ãÉ j : Iio i , generate_measurable_rec s j . 1 ‚â§ max # s 2 ^ aleph_0 .{ u }
              :=
              by
                apply mk_Union_le _ . trans
                  have
                    D
                      : ‚®Ü j : Iio i , # generate_measurable_rec s j ‚â§ _
                      :=
                      csup·µ¢_le' fun ‚ü® j , hj ‚ü© => IH j hj
                  apply mul_le_mul' mk_subtype_le _ . trans aleph 1 . mk_ord_out . le D . trans
                  rw [ mul_eq_max A C ]
                  exact max_le B le_rfl
          rw [ generate_measurable_rec ]
          trace
              "./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\"[\", expr (mk_union_le _ _).trans, \",\", expr add_le_of_le C, \",\", expr mk_image_le.trans, \"]\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error"
            trace
              "./././Mathport/Syntax/Translate/Tactic/Builtin.lean:75:38: in apply_rules #[[\"[\", expr (mk_union_le _ _).trans, \",\", expr add_le_of_le C, \",\", expr mk_image_le.trans, \"]\"], []]: ./././Mathport/Syntax/Translate/Basic.lean:349:22: unsupported: parse error"
          ¬∑ exact le_max_left _ _ . trans self_le_power _ one_lt_aleph_0.le
          ¬∑ rw [ mk_singleton ] exact one_lt_aleph_0.le.trans C
          ¬∑
            apply mk_range_le.trans
              simp
                only
                [
                  mk_pi
                    ,
                    Subtype.val_eq_coe
                    ,
                    prod_const
                    ,
                    lift_uzero
                    ,
                    mk_denumerable
                    ,
                    lift_aleph_0
                  ]
              have := @ power_le_power_right _ _ ‚Ñµ‚ÇÄ J
              rwa [ ‚Üê power_mul , aleph_0_mul_aleph_0 ] at this
#align
  measurable_space.cardinal_generate_measurable_rec_le MeasurableSpace.cardinal_generate_measurable_rec_le

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "`generate_measurable_rec s` generates precisely the smallest sigma-algebra containing `s`. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `generate_measurable_eq_rec [])
      (Command.declSig
       [(Term.explicitBinder "(" [`s] [":" (Term.app `Set [(Term.app `Set [`Œ±])])] [] ")")]
       (Term.typeSpec
        ":"
        (¬´term_=_¬ª
         (Set.¬´term{_|_}¬ª
          "{"
          (Std.ExtendedBinder.extBinder (Lean.binderIdent `t) [])
          "|"
          (Term.app `GenerateMeasurable [`s `t])
          "}")
         "="
         (Set.Data.Set.Lattice.¬´term‚ãÉ_,_¬ª
          "‚ãÉ"
          (Std.ExtendedBinder.extBinders (Std.ExtendedBinder.extBinder (Lean.binderIdent `i) []))
          ", "
          (Term.app `generateMeasurableRec [`s `i])))))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Std.Tactic.Ext.¬´tacticExt___:_¬ª
            "ext"
            [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `t))]
            [])
           ";"
           (Tactic.refine'
            "refine'"
            (Term.anonymousCtor
             "‚ü®"
             [(Term.fun "fun" (Term.basicFun [`ht] [] "=>" (Term.hole "_")))
              ","
              (Term.fun "fun" (Term.basicFun [`ht] [] "=>" (Term.hole "_")))]
             "‚ü©"))
           []
           (tactic__
            (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
            [(Lean.Elab.Tactic.inhabit "inhabit" [] (MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ "œâ‚ÇÅ"))
             []
             (Tactic.induction'
              "induction'"
              [(Tactic.casesTarget [] `ht)]
              []
              ["with"
               [(Lean.binderIdent `u)
                (Lean.binderIdent `hu)
                (Lean.binderIdent `u)
                (Lean.binderIdent `hu)
                (Lean.binderIdent `IH)
                (Lean.binderIdent `f)
                (Lean.binderIdent `hf)
                (Lean.binderIdent `IH)]]
              [])
             []
             (tactic__
              (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
              [(Tactic.exact
                "exact"
                (Term.app
                 (Term.proj `mem_Union "." (fieldIdx "2"))
                 [(Term.anonymousCtor
                   "‚ü®"
                   [`default
                    ","
                    (Term.app `self_subset_generate_measurable_rec [`s (Term.hole "_") `hu])]
                   "‚ü©")]))])
             []
             (tactic__
              (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
              [(Tactic.exact
                "exact"
                (Term.app
                 (Term.proj `mem_Union "." (fieldIdx "2"))
                 [(Term.anonymousCtor
                   "‚ü®"
                   [`default "," (Term.app `empty_mem_generate_measurable_rec [`s (Term.hole "_")])]
                   "‚ü©")]))])
             []
             (tactic__
              (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
              [(Std.Tactic.rcases
                "rcases"
                [(Tactic.casesTarget [] (Term.app (Term.proj `mem_Union "." (fieldIdx "1")) [`IH]))]
                ["with"
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed
                   [(Std.Tactic.RCases.rcasesPat.tuple
                     "‚ü®"
                     [(Std.Tactic.RCases.rcasesPatLo
                       (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `i)])
                       [])
                      ","
                      (Std.Tactic.RCases.rcasesPatLo
                       (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hi)])
                       [])]
                     "‚ü©")])
                  [])])
               []
               (Std.Tactic.obtain
                "obtain"
                [(Std.Tactic.RCases.rcasesPatMed
                  [(Std.Tactic.RCases.rcasesPat.tuple
                    "‚ü®"
                    [(Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `j)])
                      [])
                     ","
                     (Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hj)])
                      [])]
                    "‚ü©")])]
                []
                [":=" [(Term.app `exists_gt [`i])]])
               []
               (Tactic.exact
                "exact"
                (Term.app
                 (Term.proj `mem_Union "." (fieldIdx "2"))
                 [(Term.anonymousCtor
                   "‚ü®"
                   [`j "," (Term.app `compl_mem_generate_measurable_rec [`hj `hi])]
                   "‚ü©")]))])
             []
             (tactic__
              (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
              [(Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  []
                  [(Term.typeSpec
                    ":"
                    (Term.forall
                     "‚àÄ"
                     [`n]
                     []
                     ","
                     (¬´term‚àÉ_,_¬ª
                      "‚àÉ"
                      (Lean.explicitBinders
                       (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                      ","
                      (¬´term_‚àà_¬ª
                       (Term.app `f [`n])
                       "‚àà"
                       (Term.app `generate_measurable_rec [`s `i])))))]
                  ":="
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [`n]
                    []
                    "=>"
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(Std.Tactic.Simpa.simpa
                         "simpa"
                         []
                         []
                         (Std.Tactic.Simpa.simpaArgsRest
                          []
                          []
                          []
                          []
                          ["using" (Term.app `IH [`n])]))]))))))))
               []
               (Mathlib.Tactic.Choose.choose
                "choose"
                []
                [(Lean.binderIdent `I) (Lean.binderIdent `hI)]
                ["using" `this])
               []
               (Tactic.refine'
                "refine'"
                (Term.app
                 (Term.proj `mem_Union "." (fieldIdx "2"))
                 [(Term.anonymousCtor
                   "‚ü®"
                   [(Term.app
                     `Ordinal.enum
                     [(Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")
                      (Term.app
                       `Ordinal.lsub
                       [(Term.fun
                         "fun"
                         (Term.basicFun
                          [`n]
                          []
                          "=>"
                          (Term.app
                           (Term.explicitUniv `Ordinal.typein ".{" [`u] "}")
                           [(Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")
                            (Term.app `I [`n])])))])
                      (Term.hole "_")])
                    ","
                    (Term.app
                     `Union_mem_generate_measurable_rec
                     [(Term.fun
                       "fun"
                       (Term.basicFun
                        [`n]
                        []
                        "=>"
                        (Term.anonymousCtor
                         "‚ü®"
                         [(Term.app `I [`n]) "," (Term.hole "_") "," (Term.app `hI [`n])]
                         "‚ü©")))])]
                   "‚ü©")]))
               []
               (tactic__
                (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
                [(Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `Ordinal.type_lt)] "]")
                  [])
                 []
                 (Tactic.refine'
                  "refine'"
                  (Term.app
                   `Ordinal.lsub_lt_ord_lift
                   [(Term.hole "_")
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [`i]
                      []
                      "=>"
                      (Term.app `Ordinal.typein_lt_self [(Term.hole "_")])))]))
                 []
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule [] `mk_denumerable)
                    ","
                    (Tactic.rwRule [] `lift_aleph_0)
                    ","
                    (Tactic.rwRule [] `is_regular_aleph_one.cof_eq)]
                   "]")
                  [])
                 []
                 (Tactic.exact "exact" `aleph_0_lt_aleph_one)])
               []
               (tactic__
                (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
                [(Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule
                     [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))]
                     (Term.app
                      `Ordinal.typein_lt_typein
                      [(Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")]))
                    ","
                    (Tactic.rwRule [] `Ordinal.typein_enum)]
                   "]")
                  [])
                 []
                 (Tactic.apply
                  "apply"
                  (Term.app
                   `Ordinal.lt_lsub
                   [(Term.fun
                     "fun"
                     (Term.basicFun
                      [`n]
                      [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
                      "=>"
                      (Term.hole "_")))]))])])])
           []
           (tactic__
            (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
            [(Std.Tactic.rcases
              "rcases"
              [(Tactic.casesTarget [] `ht)]
              ["with"
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed
                 [(Std.Tactic.RCases.rcasesPat.tuple
                   "‚ü®"
                   [(Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `t)])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed
                      [(Std.Tactic.RCases.rcasesPat.tuple
                        "‚ü®"
                        [(Std.Tactic.RCases.rcasesPatLo
                          (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `i)])
                          [])
                         ","
                         (Std.Tactic.RCases.rcasesPatLo
                          (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                          [])]
                        "‚ü©")])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hx)])
                     [])]
                   "‚ü©")])
                [])])
             []
             (Tactic.revert "revert" [`t])
             []
             (Tactic.apply
              "apply"
              (Term.app
               (Term.proj
                (Term.proj
                 (Term.proj
                  (Term.proj (Term.proj (Term.app `aleph [(num "1")]) "." `ord) "." `out)
                  "."
                  `wo)
                 "."
                 `wf)
                "."
                `induction)
               [`i]))
             []
             (Tactic.intro "intro" [`j `H `t `ht])
             []
             (Tactic.unfold
              "unfold"
              [`generate_measurable_rec]
              [(Tactic.location "at" (Tactic.locationHyp [`ht] []))])
             []
             (Std.Tactic.rcases
              "rcases"
              [(Tactic.casesTarget [] `ht)]
              ["with"
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed
                 [(Std.Tactic.RCases.rcasesPat.paren
                   "("
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed
                     [(Std.Tactic.RCases.rcasesPat.paren
                       "("
                       (Std.Tactic.RCases.rcasesPatLo
                        (Std.Tactic.RCases.rcasesPatMed
                         [(Std.Tactic.RCases.rcasesPat.paren
                           "("
                           (Std.Tactic.RCases.rcasesPatLo
                            (Std.Tactic.RCases.rcasesPatMed
                             [(Std.Tactic.RCases.rcasesPat.one `h)
                              "|"
                              (Std.Tactic.RCases.rcasesPat.one `h)])
                            [])
                           ")")
                          "|"
                          (Std.Tactic.RCases.rcasesPat.tuple
                           "‚ü®"
                           [(Std.Tactic.RCases.rcasesPatLo
                             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `u)])
                             [])
                            ","
                            (Std.Tactic.RCases.rcasesPatLo
                             (Std.Tactic.RCases.rcasesPatMed
                              [(Std.Tactic.RCases.rcasesPat.tuple
                                "‚ü®"
                                [(Std.Tactic.RCases.rcasesPatLo
                                  (Std.Tactic.RCases.rcasesPatMed
                                   [(Std.Tactic.RCases.rcasesPat.clear "-")])
                                  [])
                                 ","
                                 (Std.Tactic.RCases.rcasesPatLo
                                  (Std.Tactic.RCases.rcasesPatMed
                                   [(Std.Tactic.RCases.rcasesPat.tuple
                                     "‚ü®"
                                     [(Std.Tactic.RCases.rcasesPatLo
                                       (Std.Tactic.RCases.rcasesPatMed
                                        [(Std.Tactic.RCases.rcasesPat.tuple
                                          "‚ü®"
                                          [(Std.Tactic.RCases.rcasesPatLo
                                            (Std.Tactic.RCases.rcasesPatMed
                                             [(Std.Tactic.RCases.rcasesPat.one `k)])
                                            [])
                                           ","
                                           (Std.Tactic.RCases.rcasesPatLo
                                            (Std.Tactic.RCases.rcasesPatMed
                                             [(Std.Tactic.RCases.rcasesPat.one `hk)])
                                            [])]
                                          "‚ü©")])
                                       [])
                                      ","
                                      (Std.Tactic.RCases.rcasesPatLo
                                       (Std.Tactic.RCases.rcasesPatMed
                                        [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                                       [])]
                                     "‚ü©")])
                                  [])
                                 ","
                                 (Std.Tactic.RCases.rcasesPatLo
                                  (Std.Tactic.RCases.rcasesPatMed
                                   [(Std.Tactic.RCases.rcasesPat.one `hu)])
                                  [])]
                                "‚ü©")])
                             [])
                            ","
                            (Std.Tactic.RCases.rcasesPatLo
                             (Std.Tactic.RCases.rcasesPatMed
                              [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                             [])]
                           "‚ü©")])
                        [])
                       ")")
                      "|"
                      (Std.Tactic.RCases.rcasesPat.tuple
                       "‚ü®"
                       [(Std.Tactic.RCases.rcasesPatLo
                         (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `f)])
                         [])
                        ","
                        (Std.Tactic.RCases.rcasesPatLo
                         (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                         [])]
                       "‚ü©")])
                    [])
                   ")")])
                [])])
             []
             (tactic__
              (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
              [(Tactic.exact "exact" (Term.app `generate_measurable.basic [`t `h]))])
             []
             (tactic__
              (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
              [(convert "convert" [] `generate_measurable.empty [])])
             []
             (tactic__
              (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
              [(Tactic.exact
                "exact"
                (Term.app `generate_measurable.compl [`u (Term.app `H [`k `hk `u `hu])]))])
             []
             (tactic__
              (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
              [(Tactic.apply
                "apply"
                (Term.app
                 `generate_measurable.union
                 [(Term.hole "_") (Term.fun "fun" (Term.basicFun [`n] [] "=>" (Term.hole "_")))]))
               []
               (Std.Tactic.obtain
                "obtain"
                [(Std.Tactic.RCases.rcasesPatMed
                  [(Std.Tactic.RCases.rcasesPat.tuple
                    "‚ü®"
                    [(Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.clear "-")])
                      [])
                     ","
                     (Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed
                       [(Std.Tactic.RCases.rcasesPat.tuple
                         "‚ü®"
                         [(Std.Tactic.RCases.rcasesPatLo
                           (Std.Tactic.RCases.rcasesPatMed
                            [(Std.Tactic.RCases.rcasesPat.tuple
                              "‚ü®"
                              [(Std.Tactic.RCases.rcasesPatLo
                                (Std.Tactic.RCases.rcasesPatMed
                                 [(Std.Tactic.RCases.rcasesPat.one `k)])
                                [])
                               ","
                               (Std.Tactic.RCases.rcasesPatLo
                                (Std.Tactic.RCases.rcasesPatMed
                                 [(Std.Tactic.RCases.rcasesPat.one `hk)])
                                [])]
                              "‚ü©")])
                           [])
                          ","
                          (Std.Tactic.RCases.rcasesPatLo
                           (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                           [])]
                         "‚ü©")])
                      [])
                     ","
                     (Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hf)])
                      [])]
                    "‚ü©")])]
                []
                [":=" [(Term.proj (Term.app `f [`n]) "." `Prop)]])
               []
               (Tactic.exact "exact" (Term.app `H [`k `hk (Term.hole "_") `hf]))])])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Std.Tactic.Ext.¬´tacticExt___:_¬ª
           "ext"
           [(Std.Tactic.RCases.rintroPat.one (Std.Tactic.RCases.rcasesPat.one `t))]
           [])
          ";"
          (Tactic.refine'
           "refine'"
           (Term.anonymousCtor
            "‚ü®"
            [(Term.fun "fun" (Term.basicFun [`ht] [] "=>" (Term.hole "_")))
             ","
             (Term.fun "fun" (Term.basicFun [`ht] [] "=>" (Term.hole "_")))]
            "‚ü©"))
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(Lean.Elab.Tactic.inhabit "inhabit" [] (MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ "œâ‚ÇÅ"))
            []
            (Tactic.induction'
             "induction'"
             [(Tactic.casesTarget [] `ht)]
             []
             ["with"
              [(Lean.binderIdent `u)
               (Lean.binderIdent `hu)
               (Lean.binderIdent `u)
               (Lean.binderIdent `hu)
               (Lean.binderIdent `IH)
               (Lean.binderIdent `f)
               (Lean.binderIdent `hf)
               (Lean.binderIdent `IH)]]
             [])
            []
            (tactic__
             (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
             [(Tactic.exact
               "exact"
               (Term.app
                (Term.proj `mem_Union "." (fieldIdx "2"))
                [(Term.anonymousCtor
                  "‚ü®"
                  [`default
                   ","
                   (Term.app `self_subset_generate_measurable_rec [`s (Term.hole "_") `hu])]
                  "‚ü©")]))])
            []
            (tactic__
             (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
             [(Tactic.exact
               "exact"
               (Term.app
                (Term.proj `mem_Union "." (fieldIdx "2"))
                [(Term.anonymousCtor
                  "‚ü®"
                  [`default "," (Term.app `empty_mem_generate_measurable_rec [`s (Term.hole "_")])]
                  "‚ü©")]))])
            []
            (tactic__
             (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
             [(Std.Tactic.rcases
               "rcases"
               [(Tactic.casesTarget [] (Term.app (Term.proj `mem_Union "." (fieldIdx "1")) [`IH]))]
               ["with"
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed
                  [(Std.Tactic.RCases.rcasesPat.tuple
                    "‚ü®"
                    [(Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `i)])
                      [])
                     ","
                     (Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hi)])
                      [])]
                    "‚ü©")])
                 [])])
              []
              (Std.Tactic.obtain
               "obtain"
               [(Std.Tactic.RCases.rcasesPatMed
                 [(Std.Tactic.RCases.rcasesPat.tuple
                   "‚ü®"
                   [(Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `j)])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hj)])
                     [])]
                   "‚ü©")])]
               []
               [":=" [(Term.app `exists_gt [`i])]])
              []
              (Tactic.exact
               "exact"
               (Term.app
                (Term.proj `mem_Union "." (fieldIdx "2"))
                [(Term.anonymousCtor
                  "‚ü®"
                  [`j "," (Term.app `compl_mem_generate_measurable_rec [`hj `hi])]
                  "‚ü©")]))])
            []
            (tactic__
             (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
             [(Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 []
                 [(Term.typeSpec
                   ":"
                   (Term.forall
                    "‚àÄ"
                    [`n]
                    []
                    ","
                    (¬´term‚àÉ_,_¬ª
                     "‚àÉ"
                     (Lean.explicitBinders
                      (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                     ","
                     (¬´term_‚àà_¬ª
                      (Term.app `f [`n])
                      "‚àà"
                      (Term.app `generate_measurable_rec [`s `i])))))]
                 ":="
                 (Term.fun
                  "fun"
                  (Term.basicFun
                   [`n]
                   []
                   "=>"
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(Std.Tactic.Simpa.simpa
                        "simpa"
                        []
                        []
                        (Std.Tactic.Simpa.simpaArgsRest
                         []
                         []
                         []
                         []
                         ["using" (Term.app `IH [`n])]))]))))))))
              []
              (Mathlib.Tactic.Choose.choose
               "choose"
               []
               [(Lean.binderIdent `I) (Lean.binderIdent `hI)]
               ["using" `this])
              []
              (Tactic.refine'
               "refine'"
               (Term.app
                (Term.proj `mem_Union "." (fieldIdx "2"))
                [(Term.anonymousCtor
                  "‚ü®"
                  [(Term.app
                    `Ordinal.enum
                    [(Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")
                     (Term.app
                      `Ordinal.lsub
                      [(Term.fun
                        "fun"
                        (Term.basicFun
                         [`n]
                         []
                         "=>"
                         (Term.app
                          (Term.explicitUniv `Ordinal.typein ".{" [`u] "}")
                          [(Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")
                           (Term.app `I [`n])])))])
                     (Term.hole "_")])
                   ","
                   (Term.app
                    `Union_mem_generate_measurable_rec
                    [(Term.fun
                      "fun"
                      (Term.basicFun
                       [`n]
                       []
                       "=>"
                       (Term.anonymousCtor
                        "‚ü®"
                        [(Term.app `I [`n]) "," (Term.hole "_") "," (Term.app `hI [`n])]
                        "‚ü©")))])]
                  "‚ü©")]))
              []
              (tactic__
               (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
               [(Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `Ordinal.type_lt)] "]")
                 [])
                []
                (Tactic.refine'
                 "refine'"
                 (Term.app
                  `Ordinal.lsub_lt_ord_lift
                  [(Term.hole "_")
                   (Term.fun
                    "fun"
                    (Term.basicFun
                     [`i]
                     []
                     "=>"
                     (Term.app `Ordinal.typein_lt_self [(Term.hole "_")])))]))
                []
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule [] `mk_denumerable)
                   ","
                   (Tactic.rwRule [] `lift_aleph_0)
                   ","
                   (Tactic.rwRule [] `is_regular_aleph_one.cof_eq)]
                  "]")
                 [])
                []
                (Tactic.exact "exact" `aleph_0_lt_aleph_one)])
              []
              (tactic__
               (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
               [(Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule
                    [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))]
                    (Term.app
                     `Ordinal.typein_lt_typein
                     [(Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")]))
                   ","
                   (Tactic.rwRule [] `Ordinal.typein_enum)]
                  "]")
                 [])
                []
                (Tactic.apply
                 "apply"
                 (Term.app
                  `Ordinal.lt_lsub
                  [(Term.fun
                    "fun"
                    (Term.basicFun
                     [`n]
                     [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
                     "=>"
                     (Term.hole "_")))]))])])])
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(Std.Tactic.rcases
             "rcases"
             [(Tactic.casesTarget [] `ht)]
             ["with"
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed
                [(Std.Tactic.RCases.rcasesPat.tuple
                  "‚ü®"
                  [(Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `t)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed
                     [(Std.Tactic.RCases.rcasesPat.tuple
                       "‚ü®"
                       [(Std.Tactic.RCases.rcasesPatLo
                         (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `i)])
                         [])
                        ","
                        (Std.Tactic.RCases.rcasesPatLo
                         (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                         [])]
                       "‚ü©")])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hx)])
                    [])]
                  "‚ü©")])
               [])])
            []
            (Tactic.revert "revert" [`t])
            []
            (Tactic.apply
             "apply"
             (Term.app
              (Term.proj
               (Term.proj
                (Term.proj
                 (Term.proj (Term.proj (Term.app `aleph [(num "1")]) "." `ord) "." `out)
                 "."
                 `wo)
                "."
                `wf)
               "."
               `induction)
              [`i]))
            []
            (Tactic.intro "intro" [`j `H `t `ht])
            []
            (Tactic.unfold
             "unfold"
             [`generate_measurable_rec]
             [(Tactic.location "at" (Tactic.locationHyp [`ht] []))])
            []
            (Std.Tactic.rcases
             "rcases"
             [(Tactic.casesTarget [] `ht)]
             ["with"
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed
                [(Std.Tactic.RCases.rcasesPat.paren
                  "("
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed
                    [(Std.Tactic.RCases.rcasesPat.paren
                      "("
                      (Std.Tactic.RCases.rcasesPatLo
                       (Std.Tactic.RCases.rcasesPatMed
                        [(Std.Tactic.RCases.rcasesPat.paren
                          "("
                          (Std.Tactic.RCases.rcasesPatLo
                           (Std.Tactic.RCases.rcasesPatMed
                            [(Std.Tactic.RCases.rcasesPat.one `h)
                             "|"
                             (Std.Tactic.RCases.rcasesPat.one `h)])
                           [])
                          ")")
                         "|"
                         (Std.Tactic.RCases.rcasesPat.tuple
                          "‚ü®"
                          [(Std.Tactic.RCases.rcasesPatLo
                            (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `u)])
                            [])
                           ","
                           (Std.Tactic.RCases.rcasesPatLo
                            (Std.Tactic.RCases.rcasesPatMed
                             [(Std.Tactic.RCases.rcasesPat.tuple
                               "‚ü®"
                               [(Std.Tactic.RCases.rcasesPatLo
                                 (Std.Tactic.RCases.rcasesPatMed
                                  [(Std.Tactic.RCases.rcasesPat.clear "-")])
                                 [])
                                ","
                                (Std.Tactic.RCases.rcasesPatLo
                                 (Std.Tactic.RCases.rcasesPatMed
                                  [(Std.Tactic.RCases.rcasesPat.tuple
                                    "‚ü®"
                                    [(Std.Tactic.RCases.rcasesPatLo
                                      (Std.Tactic.RCases.rcasesPatMed
                                       [(Std.Tactic.RCases.rcasesPat.tuple
                                         "‚ü®"
                                         [(Std.Tactic.RCases.rcasesPatLo
                                           (Std.Tactic.RCases.rcasesPatMed
                                            [(Std.Tactic.RCases.rcasesPat.one `k)])
                                           [])
                                          ","
                                          (Std.Tactic.RCases.rcasesPatLo
                                           (Std.Tactic.RCases.rcasesPatMed
                                            [(Std.Tactic.RCases.rcasesPat.one `hk)])
                                           [])]
                                         "‚ü©")])
                                      [])
                                     ","
                                     (Std.Tactic.RCases.rcasesPatLo
                                      (Std.Tactic.RCases.rcasesPatMed
                                       [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                                      [])]
                                    "‚ü©")])
                                 [])
                                ","
                                (Std.Tactic.RCases.rcasesPatLo
                                 (Std.Tactic.RCases.rcasesPatMed
                                  [(Std.Tactic.RCases.rcasesPat.one `hu)])
                                 [])]
                               "‚ü©")])
                            [])
                           ","
                           (Std.Tactic.RCases.rcasesPatLo
                            (Std.Tactic.RCases.rcasesPatMed
                             [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                            [])]
                          "‚ü©")])
                       [])
                      ")")
                     "|"
                     (Std.Tactic.RCases.rcasesPat.tuple
                      "‚ü®"
                      [(Std.Tactic.RCases.rcasesPatLo
                        (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `f)])
                        [])
                       ","
                       (Std.Tactic.RCases.rcasesPatLo
                        (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                        [])]
                      "‚ü©")])
                   [])
                  ")")])
               [])])
            []
            (tactic__
             (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
             [(Tactic.exact "exact" (Term.app `generate_measurable.basic [`t `h]))])
            []
            (tactic__
             (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
             [(convert "convert" [] `generate_measurable.empty [])])
            []
            (tactic__
             (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
             [(Tactic.exact
               "exact"
               (Term.app `generate_measurable.compl [`u (Term.app `H [`k `hk `u `hu])]))])
            []
            (tactic__
             (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
             [(Tactic.apply
               "apply"
               (Term.app
                `generate_measurable.union
                [(Term.hole "_") (Term.fun "fun" (Term.basicFun [`n] [] "=>" (Term.hole "_")))]))
              []
              (Std.Tactic.obtain
               "obtain"
               [(Std.Tactic.RCases.rcasesPatMed
                 [(Std.Tactic.RCases.rcasesPat.tuple
                   "‚ü®"
                   [(Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.clear "-")])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed
                      [(Std.Tactic.RCases.rcasesPat.tuple
                        "‚ü®"
                        [(Std.Tactic.RCases.rcasesPatLo
                          (Std.Tactic.RCases.rcasesPatMed
                           [(Std.Tactic.RCases.rcasesPat.tuple
                             "‚ü®"
                             [(Std.Tactic.RCases.rcasesPatLo
                               (Std.Tactic.RCases.rcasesPatMed
                                [(Std.Tactic.RCases.rcasesPat.one `k)])
                               [])
                              ","
                              (Std.Tactic.RCases.rcasesPatLo
                               (Std.Tactic.RCases.rcasesPatMed
                                [(Std.Tactic.RCases.rcasesPat.one `hk)])
                               [])]
                             "‚ü©")])
                          [])
                         ","
                         (Std.Tactic.RCases.rcasesPatLo
                          (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                          [])]
                        "‚ü©")])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hf)])
                     [])]
                   "‚ü©")])]
               []
               [":=" [(Term.proj (Term.app `f [`n]) "." `Prop)]])
              []
              (Tactic.exact "exact" (Term.app `H [`k `hk (Term.hole "_") `hf]))])])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Std.Tactic.rcases
         "rcases"
         [(Tactic.casesTarget [] `ht)]
         ["with"
          (Std.Tactic.RCases.rcasesPatLo
           (Std.Tactic.RCases.rcasesPatMed
            [(Std.Tactic.RCases.rcasesPat.tuple
              "‚ü®"
              [(Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `t)])
                [])
               ","
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed
                 [(Std.Tactic.RCases.rcasesPat.tuple
                   "‚ü®"
                   [(Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `i)])
                     [])
                    ","
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                     [])]
                   "‚ü©")])
                [])
               ","
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hx)])
                [])]
              "‚ü©")])
           [])])
        []
        (Tactic.revert "revert" [`t])
        []
        (Tactic.apply
         "apply"
         (Term.app
          (Term.proj
           (Term.proj
            (Term.proj
             (Term.proj (Term.proj (Term.app `aleph [(num "1")]) "." `ord) "." `out)
             "."
             `wo)
            "."
            `wf)
           "."
           `induction)
          [`i]))
        []
        (Tactic.intro "intro" [`j `H `t `ht])
        []
        (Tactic.unfold
         "unfold"
         [`generate_measurable_rec]
         [(Tactic.location "at" (Tactic.locationHyp [`ht] []))])
        []
        (Std.Tactic.rcases
         "rcases"
         [(Tactic.casesTarget [] `ht)]
         ["with"
          (Std.Tactic.RCases.rcasesPatLo
           (Std.Tactic.RCases.rcasesPatMed
            [(Std.Tactic.RCases.rcasesPat.paren
              "("
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed
                [(Std.Tactic.RCases.rcasesPat.paren
                  "("
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed
                    [(Std.Tactic.RCases.rcasesPat.paren
                      "("
                      (Std.Tactic.RCases.rcasesPatLo
                       (Std.Tactic.RCases.rcasesPatMed
                        [(Std.Tactic.RCases.rcasesPat.one `h)
                         "|"
                         (Std.Tactic.RCases.rcasesPat.one `h)])
                       [])
                      ")")
                     "|"
                     (Std.Tactic.RCases.rcasesPat.tuple
                      "‚ü®"
                      [(Std.Tactic.RCases.rcasesPatLo
                        (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `u)])
                        [])
                       ","
                       (Std.Tactic.RCases.rcasesPatLo
                        (Std.Tactic.RCases.rcasesPatMed
                         [(Std.Tactic.RCases.rcasesPat.tuple
                           "‚ü®"
                           [(Std.Tactic.RCases.rcasesPatLo
                             (Std.Tactic.RCases.rcasesPatMed
                              [(Std.Tactic.RCases.rcasesPat.clear "-")])
                             [])
                            ","
                            (Std.Tactic.RCases.rcasesPatLo
                             (Std.Tactic.RCases.rcasesPatMed
                              [(Std.Tactic.RCases.rcasesPat.tuple
                                "‚ü®"
                                [(Std.Tactic.RCases.rcasesPatLo
                                  (Std.Tactic.RCases.rcasesPatMed
                                   [(Std.Tactic.RCases.rcasesPat.tuple
                                     "‚ü®"
                                     [(Std.Tactic.RCases.rcasesPatLo
                                       (Std.Tactic.RCases.rcasesPatMed
                                        [(Std.Tactic.RCases.rcasesPat.one `k)])
                                       [])
                                      ","
                                      (Std.Tactic.RCases.rcasesPatLo
                                       (Std.Tactic.RCases.rcasesPatMed
                                        [(Std.Tactic.RCases.rcasesPat.one `hk)])
                                       [])]
                                     "‚ü©")])
                                  [])
                                 ","
                                 (Std.Tactic.RCases.rcasesPatLo
                                  (Std.Tactic.RCases.rcasesPatMed
                                   [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                                  [])]
                                "‚ü©")])
                             [])
                            ","
                            (Std.Tactic.RCases.rcasesPatLo
                             (Std.Tactic.RCases.rcasesPatMed
                              [(Std.Tactic.RCases.rcasesPat.one `hu)])
                             [])]
                           "‚ü©")])
                        [])
                       ","
                       (Std.Tactic.RCases.rcasesPatLo
                        (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                        [])]
                      "‚ü©")])
                   [])
                  ")")
                 "|"
                 (Std.Tactic.RCases.rcasesPat.tuple
                  "‚ü®"
                  [(Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `f)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                    [])]
                  "‚ü©")])
               [])
              ")")])
           [])])
        []
        (tactic__
         (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
         [(Tactic.exact "exact" (Term.app `generate_measurable.basic [`t `h]))])
        []
        (tactic__
         (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
         [(convert "convert" [] `generate_measurable.empty [])])
        []
        (tactic__
         (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
         [(Tactic.exact
           "exact"
           (Term.app `generate_measurable.compl [`u (Term.app `H [`k `hk `u `hu])]))])
        []
        (tactic__
         (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
         [(Tactic.apply
           "apply"
           (Term.app
            `generate_measurable.union
            [(Term.hole "_") (Term.fun "fun" (Term.basicFun [`n] [] "=>" (Term.hole "_")))]))
          []
          (Std.Tactic.obtain
           "obtain"
           [(Std.Tactic.RCases.rcasesPatMed
             [(Std.Tactic.RCases.rcasesPat.tuple
               "‚ü®"
               [(Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.clear "-")])
                 [])
                ","
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed
                  [(Std.Tactic.RCases.rcasesPat.tuple
                    "‚ü®"
                    [(Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed
                       [(Std.Tactic.RCases.rcasesPat.tuple
                         "‚ü®"
                         [(Std.Tactic.RCases.rcasesPatLo
                           (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `k)])
                           [])
                          ","
                          (Std.Tactic.RCases.rcasesPatLo
                           (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hk)])
                           [])]
                         "‚ü©")])
                      [])
                     ","
                     (Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                      [])]
                    "‚ü©")])
                 [])
                ","
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hf)])
                 [])]
               "‚ü©")])]
           []
           [":=" [(Term.proj (Term.app `f [`n]) "." `Prop)]])
          []
          (Tactic.exact "exact" (Term.app `H [`k `hk (Term.hole "_") `hf]))])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Tactic.apply
         "apply"
         (Term.app
          `generate_measurable.union
          [(Term.hole "_") (Term.fun "fun" (Term.basicFun [`n] [] "=>" (Term.hole "_")))]))
        []
        (Std.Tactic.obtain
         "obtain"
         [(Std.Tactic.RCases.rcasesPatMed
           [(Std.Tactic.RCases.rcasesPat.tuple
             "‚ü®"
             [(Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.clear "-")])
               [])
              ","
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed
                [(Std.Tactic.RCases.rcasesPat.tuple
                  "‚ü®"
                  [(Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed
                     [(Std.Tactic.RCases.rcasesPat.tuple
                       "‚ü®"
                       [(Std.Tactic.RCases.rcasesPatLo
                         (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `k)])
                         [])
                        ","
                        (Std.Tactic.RCases.rcasesPatLo
                         (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hk)])
                         [])]
                       "‚ü©")])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                    [])]
                  "‚ü©")])
               [])
              ","
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hf)])
               [])]
             "‚ü©")])]
         []
         [":=" [(Term.proj (Term.app `f [`n]) "." `Prop)]])
        []
        (Tactic.exact "exact" (Term.app `H [`k `hk (Term.hole "_") `hf]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `H [`k `hk (Term.hole "_") `hf]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `H [`k `hk (Term.hole "_") `hf])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hf
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `hk
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `H
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.obtain
       "obtain"
       [(Std.Tactic.RCases.rcasesPatMed
         [(Std.Tactic.RCases.rcasesPat.tuple
           "‚ü®"
           [(Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.clear "-")])
             [])
            ","
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "‚ü®"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed
                   [(Std.Tactic.RCases.rcasesPat.tuple
                     "‚ü®"
                     [(Std.Tactic.RCases.rcasesPatLo
                       (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `k)])
                       [])
                      ","
                      (Std.Tactic.RCases.rcasesPatLo
                       (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hk)])
                       [])]
                     "‚ü©")])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                  [])]
                "‚ü©")])
             [])
            ","
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hf)])
             [])]
           "‚ü©")])]
       []
       [":=" [(Term.proj (Term.app `f [`n]) "." `Prop)]])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `f [`n]) "." `Prop)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `f [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `f [`n]) ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.apply
       "apply"
       (Term.app
        `generate_measurable.union
        [(Term.hole "_") (Term.fun "fun" (Term.basicFun [`n] [] "=>" (Term.hole "_")))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `generate_measurable.union
       [(Term.hole "_") (Term.fun "fun" (Term.basicFun [`n] [] "=>" (Term.hole "_")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [`n] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `generate_measurable.union
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Tactic.exact
         "exact"
         (Term.app `generate_measurable.compl [`u (Term.app `H [`k `hk `u `hu])]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app `generate_measurable.compl [`u (Term.app `H [`k `hk `u `hu])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `generate_measurable.compl [`u (Term.app `H [`k `hk `u `hu])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `H [`k `hk `u `hu])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hu
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hk
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `H
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `H [`k `hk `u `hu]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `u
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `generate_measurable.compl
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(convert "convert" [] `generate_measurable.empty [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (convert "convert" [] `generate_measurable.empty [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `generate_measurable.empty
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Tactic.exact "exact" (Term.app `generate_measurable.basic [`t `h]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `generate_measurable.basic [`t `h]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `generate_measurable.basic [`t `h])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `t
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `generate_measurable.basic
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rcases
       "rcases"
       [(Tactic.casesTarget [] `ht)]
       ["with"
        (Std.Tactic.RCases.rcasesPatLo
         (Std.Tactic.RCases.rcasesPatMed
          [(Std.Tactic.RCases.rcasesPat.paren
            "("
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.paren
                "("
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed
                  [(Std.Tactic.RCases.rcasesPat.paren
                    "("
                    (Std.Tactic.RCases.rcasesPatLo
                     (Std.Tactic.RCases.rcasesPatMed
                      [(Std.Tactic.RCases.rcasesPat.one `h)
                       "|"
                       (Std.Tactic.RCases.rcasesPat.one `h)])
                     [])
                    ")")
                   "|"
                   (Std.Tactic.RCases.rcasesPat.tuple
                    "‚ü®"
                    [(Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `u)])
                      [])
                     ","
                     (Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed
                       [(Std.Tactic.RCases.rcasesPat.tuple
                         "‚ü®"
                         [(Std.Tactic.RCases.rcasesPatLo
                           (Std.Tactic.RCases.rcasesPatMed
                            [(Std.Tactic.RCases.rcasesPat.clear "-")])
                           [])
                          ","
                          (Std.Tactic.RCases.rcasesPatLo
                           (Std.Tactic.RCases.rcasesPatMed
                            [(Std.Tactic.RCases.rcasesPat.tuple
                              "‚ü®"
                              [(Std.Tactic.RCases.rcasesPatLo
                                (Std.Tactic.RCases.rcasesPatMed
                                 [(Std.Tactic.RCases.rcasesPat.tuple
                                   "‚ü®"
                                   [(Std.Tactic.RCases.rcasesPatLo
                                     (Std.Tactic.RCases.rcasesPatMed
                                      [(Std.Tactic.RCases.rcasesPat.one `k)])
                                     [])
                                    ","
                                    (Std.Tactic.RCases.rcasesPatLo
                                     (Std.Tactic.RCases.rcasesPatMed
                                      [(Std.Tactic.RCases.rcasesPat.one `hk)])
                                     [])]
                                   "‚ü©")])
                                [])
                               ","
                               (Std.Tactic.RCases.rcasesPatLo
                                (Std.Tactic.RCases.rcasesPatMed
                                 [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                                [])]
                              "‚ü©")])
                           [])
                          ","
                          (Std.Tactic.RCases.rcasesPatLo
                           (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hu)])
                           [])]
                         "‚ü©")])
                      [])
                     ","
                     (Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                      [])]
                    "‚ü©")])
                 [])
                ")")
               "|"
               (Std.Tactic.RCases.rcasesPat.tuple
                "‚ü®"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `f)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                  [])]
                "‚ü©")])
             [])
            ")")])
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `ht
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.unfold
       "unfold"
       [`generate_measurable_rec]
       [(Tactic.location "at" (Tactic.locationHyp [`ht] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `ht
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`j `H `t `ht])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `ht
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `t
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `H
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `j
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.apply
       "apply"
       (Term.app
        (Term.proj
         (Term.proj
          (Term.proj
           (Term.proj (Term.proj (Term.app `aleph [(num "1")]) "." `ord) "." `out)
           "."
           `wo)
          "."
          `wf)
         "."
         `induction)
        [`i]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj
        (Term.proj
         (Term.proj (Term.proj (Term.proj (Term.app `aleph [(num "1")]) "." `ord) "." `out) "." `wo)
         "."
         `wf)
        "."
        `induction)
       [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       (Term.proj
        (Term.proj (Term.proj (Term.proj (Term.app `aleph [(num "1")]) "." `ord) "." `out) "." `wo)
        "."
        `wf)
       "."
       `induction)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj
       (Term.proj (Term.proj (Term.proj (Term.app `aleph [(num "1")]) "." `ord) "." `out) "." `wo)
       "."
       `wf)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj (Term.proj (Term.proj (Term.app `aleph [(num "1")]) "." `ord) "." `out) "." `wo)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj (Term.proj (Term.app `aleph [(num "1")]) "." `ord) "." `out)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj (Term.app `aleph [(num "1")]) "." `ord)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `aleph [(num "1")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `aleph
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `aleph [(num "1")]) ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.revert "revert" [`t])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `t
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rcases
       "rcases"
       [(Tactic.casesTarget [] `ht)]
       ["with"
        (Std.Tactic.RCases.rcasesPatLo
         (Std.Tactic.RCases.rcasesPatMed
          [(Std.Tactic.RCases.rcasesPat.tuple
            "‚ü®"
            [(Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `t)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed
               [(Std.Tactic.RCases.rcasesPat.tuple
                 "‚ü®"
                 [(Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `i)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `rfl)])
                   [])]
                 "‚ü©")])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hx)])
              [])]
            "‚ü©")])
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `ht
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Lean.Elab.Tactic.inhabit "inhabit" [] (MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ "œâ‚ÇÅ"))
        []
        (Tactic.induction'
         "induction'"
         [(Tactic.casesTarget [] `ht)]
         []
         ["with"
          [(Lean.binderIdent `u)
           (Lean.binderIdent `hu)
           (Lean.binderIdent `u)
           (Lean.binderIdent `hu)
           (Lean.binderIdent `IH)
           (Lean.binderIdent `f)
           (Lean.binderIdent `hf)
           (Lean.binderIdent `IH)]]
         [])
        []
        (tactic__
         (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
         [(Tactic.exact
           "exact"
           (Term.app
            (Term.proj `mem_Union "." (fieldIdx "2"))
            [(Term.anonymousCtor
              "‚ü®"
              [`default
               ","
               (Term.app `self_subset_generate_measurable_rec [`s (Term.hole "_") `hu])]
              "‚ü©")]))])
        []
        (tactic__
         (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
         [(Tactic.exact
           "exact"
           (Term.app
            (Term.proj `mem_Union "." (fieldIdx "2"))
            [(Term.anonymousCtor
              "‚ü®"
              [`default "," (Term.app `empty_mem_generate_measurable_rec [`s (Term.hole "_")])]
              "‚ü©")]))])
        []
        (tactic__
         (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
         [(Std.Tactic.rcases
           "rcases"
           [(Tactic.casesTarget [] (Term.app (Term.proj `mem_Union "." (fieldIdx "1")) [`IH]))]
           ["with"
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "‚ü®"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `i)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hi)])
                  [])]
                "‚ü©")])
             [])])
          []
          (Std.Tactic.obtain
           "obtain"
           [(Std.Tactic.RCases.rcasesPatMed
             [(Std.Tactic.RCases.rcasesPat.tuple
               "‚ü®"
               [(Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `j)])
                 [])
                ","
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hj)])
                 [])]
               "‚ü©")])]
           []
           [":=" [(Term.app `exists_gt [`i])]])
          []
          (Tactic.exact
           "exact"
           (Term.app
            (Term.proj `mem_Union "." (fieldIdx "2"))
            [(Term.anonymousCtor
              "‚ü®"
              [`j "," (Term.app `compl_mem_generate_measurable_rec [`hj `hi])]
              "‚ü©")]))])
        []
        (tactic__
         (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
         [(Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               (Term.forall
                "‚àÄ"
                [`n]
                []
                ","
                (¬´term‚àÉ_,_¬ª
                 "‚àÉ"
                 (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
                 ","
                 (¬´term_‚àà_¬ª (Term.app `f [`n]) "‚àà" (Term.app `generate_measurable_rec [`s `i])))))]
             ":="
             (Term.fun
              "fun"
              (Term.basicFun
               [`n]
               []
               "=>"
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(Std.Tactic.Simpa.simpa
                    "simpa"
                    []
                    []
                    (Std.Tactic.Simpa.simpaArgsRest
                     []
                     []
                     []
                     []
                     ["using" (Term.app `IH [`n])]))]))))))))
          []
          (Mathlib.Tactic.Choose.choose
           "choose"
           []
           [(Lean.binderIdent `I) (Lean.binderIdent `hI)]
           ["using" `this])
          []
          (Tactic.refine'
           "refine'"
           (Term.app
            (Term.proj `mem_Union "." (fieldIdx "2"))
            [(Term.anonymousCtor
              "‚ü®"
              [(Term.app
                `Ordinal.enum
                [(Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")
                 (Term.app
                  `Ordinal.lsub
                  [(Term.fun
                    "fun"
                    (Term.basicFun
                     [`n]
                     []
                     "=>"
                     (Term.app
                      (Term.explicitUniv `Ordinal.typein ".{" [`u] "}")
                      [(Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")
                       (Term.app `I [`n])])))])
                 (Term.hole "_")])
               ","
               (Term.app
                `Union_mem_generate_measurable_rec
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [`n]
                   []
                   "=>"
                   (Term.anonymousCtor
                    "‚ü®"
                    [(Term.app `I [`n]) "," (Term.hole "_") "," (Term.app `hI [`n])]
                    "‚ü©")))])]
              "‚ü©")]))
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `Ordinal.type_lt)] "]")
             [])
            []
            (Tactic.refine'
             "refine'"
             (Term.app
              `Ordinal.lsub_lt_ord_lift
              [(Term.hole "_")
               (Term.fun
                "fun"
                (Term.basicFun
                 [`i]
                 []
                 "=>"
                 (Term.app `Ordinal.typein_lt_self [(Term.hole "_")])))]))
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `mk_denumerable)
               ","
               (Tactic.rwRule [] `lift_aleph_0)
               ","
               (Tactic.rwRule [] `is_regular_aleph_one.cof_eq)]
              "]")
             [])
            []
            (Tactic.exact "exact" `aleph_0_lt_aleph_one)])
          []
          (tactic__
           (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule
                [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))]
                (Term.app
                 `Ordinal.typein_lt_typein
                 [(Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")]))
               ","
               (Tactic.rwRule [] `Ordinal.typein_enum)]
              "]")
             [])
            []
            (Tactic.apply
             "apply"
             (Term.app
              `Ordinal.lt_lsub
              [(Term.fun
                "fun"
                (Term.basicFun
                 [`n]
                 [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))]
                 "=>"
                 (Term.hole "_")))]))])])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec
             ":"
             (Term.forall
              "‚àÄ"
              [`n]
              []
              ","
              (¬´term‚àÉ_,_¬ª
               "‚àÉ"
               (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
               ","
               (¬´term_‚àà_¬ª (Term.app `f [`n]) "‚àà" (Term.app `generate_measurable_rec [`s `i])))))]
           ":="
           (Term.fun
            "fun"
            (Term.basicFun
             [`n]
             []
             "=>"
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Std.Tactic.Simpa.simpa
                  "simpa"
                  []
                  []
                  (Std.Tactic.Simpa.simpaArgsRest
                   []
                   []
                   []
                   []
                   ["using" (Term.app `IH [`n])]))]))))))))
        []
        (Mathlib.Tactic.Choose.choose
         "choose"
         []
         [(Lean.binderIdent `I) (Lean.binderIdent `hI)]
         ["using" `this])
        []
        (Tactic.refine'
         "refine'"
         (Term.app
          (Term.proj `mem_Union "." (fieldIdx "2"))
          [(Term.anonymousCtor
            "‚ü®"
            [(Term.app
              `Ordinal.enum
              [(Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")
               (Term.app
                `Ordinal.lsub
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [`n]
                   []
                   "=>"
                   (Term.app
                    (Term.explicitUniv `Ordinal.typein ".{" [`u] "}")
                    [(Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")
                     (Term.app `I [`n])])))])
               (Term.hole "_")])
             ","
             (Term.app
              `Union_mem_generate_measurable_rec
              [(Term.fun
                "fun"
                (Term.basicFun
                 [`n]
                 []
                 "=>"
                 (Term.anonymousCtor
                  "‚ü®"
                  [(Term.app `I [`n]) "," (Term.hole "_") "," (Term.app `hI [`n])]
                  "‚ü©")))])]
            "‚ü©")]))
        []
        (tactic__
         (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
         [(Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `Ordinal.type_lt)] "]") [])
          []
          (Tactic.refine'
           "refine'"
           (Term.app
            `Ordinal.lsub_lt_ord_lift
            [(Term.hole "_")
             (Term.fun
              "fun"
              (Term.basicFun [`i] [] "=>" (Term.app `Ordinal.typein_lt_self [(Term.hole "_")])))]))
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `mk_denumerable)
             ","
             (Tactic.rwRule [] `lift_aleph_0)
             ","
             (Tactic.rwRule [] `is_regular_aleph_one.cof_eq)]
            "]")
           [])
          []
          (Tactic.exact "exact" `aleph_0_lt_aleph_one)])
        []
        (tactic__
         (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
         [(Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule
              [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))]
              (Term.app
               `Ordinal.typein_lt_typein
               [(Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")]))
             ","
             (Tactic.rwRule [] `Ordinal.typein_enum)]
            "]")
           [])
          []
          (Tactic.apply
           "apply"
           (Term.app
            `Ordinal.lt_lsub
            [(Term.fun
              "fun"
              (Term.basicFun [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))] "=>" (Term.hole "_")))]))])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule
            [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))]
            (Term.app
             `Ordinal.typein_lt_typein
             [(Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")]))
           ","
           (Tactic.rwRule [] `Ordinal.typein_enum)]
          "]")
         [])
        []
        (Tactic.apply
         "apply"
         (Term.app
          `Ordinal.lt_lsub
          [(Term.fun
            "fun"
            (Term.basicFun [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))] "=>" (Term.hole "_")))]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.apply
       "apply"
       (Term.app
        `Ordinal.lt_lsub
        [(Term.fun
          "fun"
          (Term.basicFun [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))] "=>" (Term.hole "_")))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Ordinal.lt_lsub
       [(Term.fun
         "fun"
         (Term.basicFun [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))] "=>" (Term.hole "_")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [`n] [(Term.typeSpec ":" (term‚Ñï "‚Ñï"))] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (term‚Ñï "‚Ñï")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ordinal.lt_lsub
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule
          [(patternIgnore (token.¬´‚Üê ¬ª "‚Üê"))]
          (Term.app
           `Ordinal.typein_lt_typein
           [(Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")]))
         ","
         (Tactic.rwRule [] `Ordinal.typein_enum)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Ordinal.typein_enum
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Ordinal.typein_lt_typein
       [(Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.cdot "¬∑")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.cdot "¬∑")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ordinal.typein_lt_typein
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `Ordinal.type_lt)] "]") [])
        []
        (Tactic.refine'
         "refine'"
         (Term.app
          `Ordinal.lsub_lt_ord_lift
          [(Term.hole "_")
           (Term.fun
            "fun"
            (Term.basicFun [`i] [] "=>" (Term.app `Ordinal.typein_lt_self [(Term.hole "_")])))]))
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `mk_denumerable)
           ","
           (Tactic.rwRule [] `lift_aleph_0)
           ","
           (Tactic.rwRule [] `is_regular_aleph_one.cof_eq)]
          "]")
         [])
        []
        (Tactic.exact "exact" `aleph_0_lt_aleph_one)])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" `aleph_0_lt_aleph_one)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `aleph_0_lt_aleph_one
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `mk_denumerable)
         ","
         (Tactic.rwRule [] `lift_aleph_0)
         ","
         (Tactic.rwRule [] `is_regular_aleph_one.cof_eq)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `is_regular_aleph_one.cof_eq
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `lift_aleph_0
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mk_denumerable
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `Ordinal.lsub_lt_ord_lift
        [(Term.hole "_")
         (Term.fun
          "fun"
          (Term.basicFun [`i] [] "=>" (Term.app `Ordinal.typein_lt_self [(Term.hole "_")])))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Ordinal.lsub_lt_ord_lift
       [(Term.hole "_")
        (Term.fun
         "fun"
         (Term.basicFun [`i] [] "=>" (Term.app `Ordinal.typein_lt_self [(Term.hole "_")])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun [`i] [] "=>" (Term.app `Ordinal.typein_lt_self [(Term.hole "_")])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Ordinal.typein_lt_self [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ordinal.typein_lt_self
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ordinal.lsub_lt_ord_lift
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `Ordinal.type_lt)] "]") [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Ordinal.type_lt
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        (Term.proj `mem_Union "." (fieldIdx "2"))
        [(Term.anonymousCtor
          "‚ü®"
          [(Term.app
            `Ordinal.enum
            [(Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")
             (Term.app
              `Ordinal.lsub
              [(Term.fun
                "fun"
                (Term.basicFun
                 [`n]
                 []
                 "=>"
                 (Term.app
                  (Term.explicitUniv `Ordinal.typein ".{" [`u] "}")
                  [(Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")
                   (Term.app `I [`n])])))])
             (Term.hole "_")])
           ","
           (Term.app
            `Union_mem_generate_measurable_rec
            [(Term.fun
              "fun"
              (Term.basicFun
               [`n]
               []
               "=>"
               (Term.anonymousCtor
                "‚ü®"
                [(Term.app `I [`n]) "," (Term.hole "_") "," (Term.app `hI [`n])]
                "‚ü©")))])]
          "‚ü©")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `mem_Union "." (fieldIdx "2"))
       [(Term.anonymousCtor
         "‚ü®"
         [(Term.app
           `Ordinal.enum
           [(Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")
            (Term.app
             `Ordinal.lsub
             [(Term.fun
               "fun"
               (Term.basicFun
                [`n]
                []
                "=>"
                (Term.app
                 (Term.explicitUniv `Ordinal.typein ".{" [`u] "}")
                 [(Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")
                  (Term.app `I [`n])])))])
            (Term.hole "_")])
          ","
          (Term.app
           `Union_mem_generate_measurable_rec
           [(Term.fun
             "fun"
             (Term.basicFun
              [`n]
              []
              "=>"
              (Term.anonymousCtor
               "‚ü®"
               [(Term.app `I [`n]) "," (Term.hole "_") "," (Term.app `hI [`n])]
               "‚ü©")))])]
         "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "‚ü®"
       [(Term.app
         `Ordinal.enum
         [(Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")
          (Term.app
           `Ordinal.lsub
           [(Term.fun
             "fun"
             (Term.basicFun
              [`n]
              []
              "=>"
              (Term.app
               (Term.explicitUniv `Ordinal.typein ".{" [`u] "}")
               [(Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")
                (Term.app `I [`n])])))])
          (Term.hole "_")])
        ","
        (Term.app
         `Union_mem_generate_measurable_rec
         [(Term.fun
           "fun"
           (Term.basicFun
            [`n]
            []
            "=>"
            (Term.anonymousCtor
             "‚ü®"
             [(Term.app `I [`n]) "," (Term.hole "_") "," (Term.app `hI [`n])]
             "‚ü©")))])]
       "‚ü©")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Union_mem_generate_measurable_rec
       [(Term.fun
         "fun"
         (Term.basicFun
          [`n]
          []
          "=>"
          (Term.anonymousCtor
           "‚ü®"
           [(Term.app `I [`n]) "," (Term.hole "_") "," (Term.app `hI [`n])]
           "‚ü©")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`n]
        []
        "=>"
        (Term.anonymousCtor
         "‚ü®"
         [(Term.app `I [`n]) "," (Term.hole "_") "," (Term.app `hI [`n])]
         "‚ü©")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor "‚ü®" [(Term.app `I [`n]) "," (Term.hole "_") "," (Term.app `hI [`n])] "‚ü©")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hI [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hI
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `I [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `I
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Union_mem_generate_measurable_rec
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Ordinal.enum
       [(Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")
        (Term.app
         `Ordinal.lsub
         [(Term.fun
           "fun"
           (Term.basicFun
            [`n]
            []
            "=>"
            (Term.app
             (Term.explicitUniv `Ordinal.typein ".{" [`u] "}")
             [(Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")
              (Term.app `I [`n])])))])
        (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.app
       `Ordinal.lsub
       [(Term.fun
         "fun"
         (Term.basicFun
          [`n]
          []
          "=>"
          (Term.app
           (Term.explicitUniv `Ordinal.typein ".{" [`u] "}")
           [(Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")
            (Term.app `I [`n])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`n]
        []
        "=>"
        (Term.app
         (Term.explicitUniv `Ordinal.typein ".{" [`u] "}")
         [(Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")
          (Term.app `I [`n])])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.explicitUniv `Ordinal.typein ".{" [`u] "}")
       [(Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")") (Term.app `I [`n])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `I [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `I
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `I [`n]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.cdot "¬∑")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.cdot "¬∑")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.explicitUniv `Ordinal.typein ".{" [`u] "}")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `u
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `Ordinal.typein
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ordinal.lsub
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `Ordinal.lsub
      [(Term.fun
        "fun"
        (Term.basicFun
         [`n]
         []
         "=>"
         (Term.app
          (Term.explicitUniv `Ordinal.typein ".{" [`u] "}")
          [(Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")
           (Term.paren "(" (Term.app `I [`n]) ")")])))])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.paren', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.paren "(" (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑")) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_<_¬ª (Term.cdot "¬∑") "<" (Term.cdot "¬∑"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.cdot "¬∑")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.cdot "¬∑")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ordinal.enum
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `mem_Union "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `mem_Union
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.Choose.choose
       "choose"
       []
       [(Lean.binderIdent `I) (Lean.binderIdent `hI)]
       ["using" `this])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `this
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           (Term.forall
            "‚àÄ"
            [`n]
            []
            ","
            (¬´term‚àÉ_,_¬ª
             "‚àÉ"
             (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
             ","
             (¬´term_‚àà_¬ª (Term.app `f [`n]) "‚àà" (Term.app `generate_measurable_rec [`s `i])))))]
         ":="
         (Term.fun
          "fun"
          (Term.basicFun
           [`n]
           []
           "=>"
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Std.Tactic.Simpa.simpa
                "simpa"
                []
                []
                (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" (Term.app `IH [`n])]))]))))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`n]
        []
        "=>"
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(Std.Tactic.Simpa.simpa
             "simpa"
             []
             []
             (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" (Term.app `IH [`n])]))])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Std.Tactic.Simpa.simpa
           "simpa"
           []
           []
           (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" (Term.app `IH [`n])]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Simpa.simpa
       "simpa"
       []
       []
       (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" (Term.app `IH [`n])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `IH [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `IH
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.forall
       "‚àÄ"
       [`n]
       []
       ","
       (¬´term‚àÉ_,_¬ª
        "‚àÉ"
        (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
        ","
        (¬´term_‚àà_¬ª (Term.app `f [`n]) "‚àà" (Term.app `generate_measurable_rec [`s `i]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term‚àÉ_,_¬ª
       "‚àÉ"
       (Lean.explicitBinders (Lean.unbracketedExplicitBinders [(Lean.binderIdent `i)] []))
       ","
       (¬´term_‚àà_¬ª (Term.app `f [`n]) "‚àà" (Term.app `generate_measurable_rec [`s `i])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (¬´term_‚àà_¬ª (Term.app `f [`n]) "‚àà" (Term.app `generate_measurable_rec [`s `i]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `generate_measurable_rec [`s `i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `s
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `generate_measurable_rec
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `f [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'null', expected 'Lean.bracketedExplicitBinders'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Std.Tactic.rcases
         "rcases"
         [(Tactic.casesTarget [] (Term.app (Term.proj `mem_Union "." (fieldIdx "1")) [`IH]))]
         ["with"
          (Std.Tactic.RCases.rcasesPatLo
           (Std.Tactic.RCases.rcasesPatMed
            [(Std.Tactic.RCases.rcasesPat.tuple
              "‚ü®"
              [(Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `i)])
                [])
               ","
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hi)])
                [])]
              "‚ü©")])
           [])])
        []
        (Std.Tactic.obtain
         "obtain"
         [(Std.Tactic.RCases.rcasesPatMed
           [(Std.Tactic.RCases.rcasesPat.tuple
             "‚ü®"
             [(Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `j)])
               [])
              ","
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hj)])
               [])]
             "‚ü©")])]
         []
         [":=" [(Term.app `exists_gt [`i])]])
        []
        (Tactic.exact
         "exact"
         (Term.app
          (Term.proj `mem_Union "." (fieldIdx "2"))
          [(Term.anonymousCtor
            "‚ü®"
            [`j "," (Term.app `compl_mem_generate_measurable_rec [`hj `hi])]
            "‚ü©")]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        (Term.proj `mem_Union "." (fieldIdx "2"))
        [(Term.anonymousCtor
          "‚ü®"
          [`j "," (Term.app `compl_mem_generate_measurable_rec [`hj `hi])]
          "‚ü©")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `mem_Union "." (fieldIdx "2"))
       [(Term.anonymousCtor
         "‚ü®"
         [`j "," (Term.app `compl_mem_generate_measurable_rec [`hj `hi])]
         "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor "‚ü®" [`j "," (Term.app `compl_mem_generate_measurable_rec [`hj `hi])] "‚ü©")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `compl_mem_generate_measurable_rec [`hj `hi])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hi
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hj
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `compl_mem_generate_measurable_rec
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `j
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `mem_Union "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `mem_Union
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.obtain
       "obtain"
       [(Std.Tactic.RCases.rcasesPatMed
         [(Std.Tactic.RCases.rcasesPat.tuple
           "‚ü®"
           [(Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `j)])
             [])
            ","
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hj)])
             [])]
           "‚ü©")])]
       []
       [":=" [(Term.app `exists_gt [`i])]])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `exists_gt [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `exists_gt
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rcases
       "rcases"
       [(Tactic.casesTarget [] (Term.app (Term.proj `mem_Union "." (fieldIdx "1")) [`IH]))]
       ["with"
        (Std.Tactic.RCases.rcasesPatLo
         (Std.Tactic.RCases.rcasesPatMed
          [(Std.Tactic.RCases.rcasesPat.tuple
            "‚ü®"
            [(Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `i)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hi)])
              [])]
            "‚ü©")])
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `mem_Union "." (fieldIdx "1")) [`IH])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `IH
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `mem_Union "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `mem_Union
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Tactic.exact
         "exact"
         (Term.app
          (Term.proj `mem_Union "." (fieldIdx "2"))
          [(Term.anonymousCtor
            "‚ü®"
            [`default "," (Term.app `empty_mem_generate_measurable_rec [`s (Term.hole "_")])]
            "‚ü©")]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        (Term.proj `mem_Union "." (fieldIdx "2"))
        [(Term.anonymousCtor
          "‚ü®"
          [`default "," (Term.app `empty_mem_generate_measurable_rec [`s (Term.hole "_")])]
          "‚ü©")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `mem_Union "." (fieldIdx "2"))
       [(Term.anonymousCtor
         "‚ü®"
         [`default "," (Term.app `empty_mem_generate_measurable_rec [`s (Term.hole "_")])]
         "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "‚ü®"
       [`default "," (Term.app `empty_mem_generate_measurable_rec [`s (Term.hole "_")])]
       "‚ü©")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `empty_mem_generate_measurable_rec [`s (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `s
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `empty_mem_generate_measurable_rec
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `default
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `mem_Union "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `mem_Union
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.¬´¬∑ ¬ª "¬∑")))
       [(Tactic.exact
         "exact"
         (Term.app
          (Term.proj `mem_Union "." (fieldIdx "2"))
          [(Term.anonymousCtor
            "‚ü®"
            [`default "," (Term.app `self_subset_generate_measurable_rec [`s (Term.hole "_") `hu])]
            "‚ü©")]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        (Term.proj `mem_Union "." (fieldIdx "2"))
        [(Term.anonymousCtor
          "‚ü®"
          [`default "," (Term.app `self_subset_generate_measurable_rec [`s (Term.hole "_") `hu])]
          "‚ü©")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `mem_Union "." (fieldIdx "2"))
       [(Term.anonymousCtor
         "‚ü®"
         [`default "," (Term.app `self_subset_generate_measurable_rec [`s (Term.hole "_") `hu])]
         "‚ü©")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "‚ü®"
       [`default "," (Term.app `self_subset_generate_measurable_rec [`s (Term.hole "_") `hu])]
       "‚ü©")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `self_subset_generate_measurable_rec [`s (Term.hole "_") `hu])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hu
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `s
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `self_subset_generate_measurable_rec
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `default
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `mem_Union "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `mem_Union
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.induction'
       "induction'"
       [(Tactic.casesTarget [] `ht)]
       []
       ["with"
        [(Lean.binderIdent `u)
         (Lean.binderIdent `hu)
         (Lean.binderIdent `u)
         (Lean.binderIdent `hu)
         (Lean.binderIdent `IH)
         (Lean.binderIdent `f)
         (Lean.binderIdent `hf)
         (Lean.binderIdent `IH)]]
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `ht
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Lean.Elab.Tactic.inhabit "inhabit" [] (MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ "œâ‚ÇÅ"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ "œâ‚ÇÅ")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ', expected 'MeasureTheory.CardMeasurableSpace.termœâ‚ÇÅ._@.MeasureTheory.CardMeasurableSpace._hyg.6'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.declValEqns'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.declValSimple', expected 'Lean.Parser.Command.whereStructInst'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/-- `generate_measurable_rec s` generates precisely the smallest sigma-algebra containing `s`. -/
  theorem
    generate_measurable_eq_rec
    ( s : Set Set Œ± ) : { t | GenerateMeasurable s t } = ‚ãÉ i , generateMeasurableRec s i
    :=
      by
        ext t
          ;
          refine' ‚ü® fun ht => _ , fun ht => _ ‚ü©
          ¬∑
            inhabit œâ‚ÇÅ
              induction' ht with u hu u hu IH f hf IH
              ¬∑ exact mem_Union . 2 ‚ü® default , self_subset_generate_measurable_rec s _ hu ‚ü©
              ¬∑ exact mem_Union . 2 ‚ü® default , empty_mem_generate_measurable_rec s _ ‚ü©
              ¬∑
                rcases mem_Union . 1 IH with ‚ü® i , hi ‚ü©
                  obtain ‚ü® j , hj ‚ü© := exists_gt i
                  exact mem_Union . 2 ‚ü® j , compl_mem_generate_measurable_rec hj hi ‚ü©
              ¬∑
                have : ‚àÄ n , ‚àÉ i , f n ‚àà generate_measurable_rec s i := fun n => by simpa using IH n
                  choose I hI using this
                  refine'
                    mem_Union . 2
                      ‚ü®
                        Ordinal.enum
                            ( ¬∑ < ¬∑ ) Ordinal.lsub fun n => Ordinal.typein .{ u } ( ¬∑ < ¬∑ ) I n _
                          ,
                          Union_mem_generate_measurable_rec fun n => ‚ü® I n , _ , hI n ‚ü©
                        ‚ü©
                  ¬∑
                    rw [ Ordinal.type_lt ]
                      refine' Ordinal.lsub_lt_ord_lift _ fun i => Ordinal.typein_lt_self _
                      rw [ mk_denumerable , lift_aleph_0 , is_regular_aleph_one.cof_eq ]
                      exact aleph_0_lt_aleph_one
                  ¬∑
                    rw [ ‚Üê Ordinal.typein_lt_typein ( ¬∑ < ¬∑ ) , Ordinal.typein_enum ]
                      apply Ordinal.lt_lsub fun n : ‚Ñï => _
          ¬∑
            rcases ht with ‚ü® t , ‚ü® i , rfl ‚ü© , hx ‚ü©
              revert t
              apply aleph 1 . ord . out . wo . wf . induction i
              intro j H t ht
              unfold generate_measurable_rec at ht
              rcases
                ht
                with
                  ( ( ( h | h ) | ‚ü® u , ‚ü® - , ‚ü® ‚ü® k , hk ‚ü© , rfl ‚ü© , hu ‚ü© , rfl ‚ü© ) | ‚ü® f , rfl ‚ü© )
              ¬∑ exact generate_measurable.basic t h
              ¬∑ convert generate_measurable.empty
              ¬∑ exact generate_measurable.compl u H k hk u hu
              ¬∑
                apply generate_measurable.union _ fun n => _
                  obtain ‚ü® - , ‚ü® ‚ü® k , hk ‚ü© , rfl ‚ü© , hf ‚ü© := f n . Prop
                  exact H k hk _ hf
#align measurable_space.generate_measurable_eq_rec MeasurableSpace.generate_measurable_eq_rec

/-- If a sigma-algebra is generated by a set of sets `s`, then the sigma-algebra has cardinality at
most `(max (#s) 2) ^ ‚Ñµ‚ÇÄ`. -/
theorem cardinal_generate_measurable_le (s : Set (Set Œ±)) :
    (#{ t | GenerateMeasurable s t }) ‚â§ max (#s) 2 ^ aleph_0.{u} :=
  by
  rw [generate_measurable_eq_rec]
  apply (mk_Union_le _).trans
  rw [(aleph 1).mk_ord_out]
  refine'
    le_trans
      (mul_le_mul' aleph_one_le_continuum
        (csup·µ¢_le' fun i => cardinal_generate_measurable_rec_le s i))
      _
  have := power_le_power_right (le_max_right (#s) 2)
  rw [mul_eq_max aleph_0_le_continuum (aleph_0_le_continuum.trans this)]
  exact max_le this le_rfl
#align
  measurable_space.cardinal_generate_measurable_le MeasurableSpace.cardinal_generate_measurable_le

/-- If a sigma-algebra is generated by a set of sets `s`, then the sigma
algebra has cardinality at most `(max (#s) 2) ^ ‚Ñµ‚ÇÄ`. -/
theorem cardinal_measurable_set_le (s : Set (Set Œ±)) :
    (#{ t | @MeasurableSet Œ± (generateFrom s) t }) ‚â§ max (#s) 2 ^ aleph_0.{u} :=
  cardinal_generate_measurable_le s
#align measurable_space.cardinal_measurable_set_le MeasurableSpace.cardinal_measurable_set_le

/-- If a sigma-algebra is generated by a set of sets `s` with cardinality at most the continuum,
then the sigma algebra has the same cardinality bound. -/
theorem cardinal_generate_measurable_le_continuum {s : Set (Set Œ±)} (hs : (#s) ‚â§ ùî†) :
    (#{ t | GenerateMeasurable s t }) ‚â§ ùî† :=
  (cardinal_generate_measurable_le s).trans
    (by
      rw [‚Üê continuum_power_aleph_0]
      exact_mod_cast power_le_power_right (max_le hs (nat_lt_continuum 2).le))
#align
  measurable_space.cardinal_generate_measurable_le_continuum MeasurableSpace.cardinal_generate_measurable_le_continuum

/-- If a sigma-algebra is generated by a set of sets `s` with cardinality at most the continuum,
then the sigma algebra has the same cardinality bound. -/
theorem cardinal_measurable_set_le_continuum {s : Set (Set Œ±)} :
    (#s) ‚â§ ùî† ‚Üí (#{ t | @MeasurableSet Œ± (generateFrom s) t }) ‚â§ ùî† :=
  cardinal_generate_measurable_le_continuum
#align
  measurable_space.cardinal_measurable_set_le_continuum MeasurableSpace.cardinal_measurable_set_le_continuum

end MeasurableSpace

