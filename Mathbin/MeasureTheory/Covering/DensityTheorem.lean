/-
Copyright (c) 2022 Oliver Nash. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Oliver Nash
-/
import Mathbin.MeasureTheory.Covering.Vitali
import Mathbin.MeasureTheory.Covering.Differentiation
import Mathbin.Analysis.SpecialFunctions.Log.Base

/-!
# Doubling measures and Lebesgue's density theorem

A doubling measure `Œº` on a metric space is a measure for which there exists a constant `C` such
that for all sufficiently small radii `Œµ`, and for any centre, the measure of a ball of radius
`2 * Œµ` is bounded by `C` times the measure of the concentric ball of radius `Œµ`.

Lebesgue's density theorem states that given a set `S` in a proper metric space with locally-finite
doubling measure `Œº` then for almost all points `x` in `S`, for any sequence of closed balls
`B‚ÇÄ, B‚ÇÅ, B‚ÇÇ, ...` containing `x`, the limit `Œº (S ‚à© B‚±º) / Œº (B‚±º) ‚Üí 1` as `j ‚Üí ‚àû`.

In this file we combine general results about existence of Vitali families for doubling measures
with results about differentiation along a Vitali family to obtain an explicit form of Lebesgue's
density theorem.

## Main results

  * `is_doubling_measure`: the definition of a doubling measure (as a typeclass).
  * `is_doubling_measure.doubling_constant`: a function yielding the doubling constant `C` appearing
  in the definition of a doubling measure.
  * `is_doubling_measure.ae_tendsto_measure_inter_div`: a version of Lebesgue's density theorem for
  sequences of balls converging on a point but whose centres are not required to be fixed.

-/


noncomputable section

open Set Filter Metric MeasureTheory

open Nnreal TopologicalSpace

-- ./././Mathport/Syntax/Translate/Command.lean:326:30: infer kinds are unsupported in Lean 4: #[`exists_measure_closed_ball_le_mul] []
/-- A measure `Œº` is said to be a doubling measure if there exists a constant `C` such that for
all sufficiently small radii `Œµ`, and for any centre, the measure of a ball of radius `2 * Œµ` is
bounded by `C` times the measure of the concentric ball of radius `Œµ`.

Note: it is important that this definition makes a demand only for sufficiently small `Œµ`. For
example we want hyperbolic space to carry the instance `is_doubling_measure volume` but volumes grow
exponentially in hyperbolic space. To be really explicit, consider the hyperbolic plane of
curvature -1, the area of a disc of radius `Œµ` is `A(Œµ) = 2œÄ(cosh(Œµ) - 1)` so `A(2Œµ)/A(Œµ) ~ exp(Œµ)`.
-/
class IsDoublingMeasure {Œ± : Type _} [MetricSpace Œ±] [MeasurableSpace Œ±] (Œº : Measure‚Çì Œ±) where
  exists_measure_closed_ball_le_mul : ‚àÉ C : ‚Ñù‚â•0, ‚àÄ·∂† Œµ in ùìù[>] 0, ‚àÄ x, Œº (ClosedBall x (2 * Œµ)) ‚â§ C * Œº (ClosedBall x Œµ)

namespace IsDoublingMeasure

variable {Œ± : Type _} [MetricSpace Œ±] [MeasurableSpace Œ±] (Œº : Measure‚Çì Œ±) [IsDoublingMeasure Œº]

/-- A doubling constant for a doubling measure.

See also `is_doubling_measure.scaling_constant_of`. -/
def doublingConstant : ‚Ñù‚â•0 :=
  Classical.choose <| exists_measure_closed_ball_le_mul Œº

theorem exists_measure_closed_ball_le_mul' :
    ‚àÄ·∂† Œµ in ùìù[>] 0, ‚àÄ x, Œº (ClosedBall x (2 * Œµ)) ‚â§ doublingConstant Œº * Œº (ClosedBall x Œµ) :=
  Classical.choose_spec <| exists_measure_closed_ball_le_mul Œº

theorem exists_eventually_forall_measure_closed_ball_le_mul (K : ‚Ñù) :
    ‚àÉ C : ‚Ñù‚â•0, ‚àÄ·∂† Œµ in ùìù[>] 0, ‚àÄ (x t) (ht : t ‚â§ K), Œº (ClosedBall x (t * Œµ)) ‚â§ C * Œº (ClosedBall x Œµ) := by
  let C := doubling_constant Œº
  have hŒº : ‚àÄ n : ‚Ñï, ‚àÄ·∂† Œµ in ùìù[>] 0, ‚àÄ x, Œº (closed_ball x (2 ^ n * Œµ)) ‚â§ ‚Üë(C ^ n) * Œº (closed_ball x Œµ) := by
    intro n
    induction' n with n ih
    ¬∑ simp
      
    replace ih := eventually_nhds_within_pos_mul_left (two_pos : 0 < (2 : ‚Ñù)) ih
    refine' (ih.and (exists_measure_closed_ball_le_mul' Œº)).mono fun Œµ hŒµ x => _
    calc
      Œº (closed_ball x (2 ^ (n + 1) * Œµ)) = Œº (closed_ball x (2 ^ n * (2 * Œµ))) := by rw [pow_succ'‚Çì, mul_assoc]
      _ ‚â§ ‚Üë(C ^ n) * Œº (closed_ball x (2 * Œµ)) := hŒµ.1 x
      _ ‚â§ ‚Üë(C ^ n) * (C * Œº (closed_ball x Œµ)) := Ennreal.mul_left_mono (hŒµ.2 x)
      _ = ‚Üë(C ^ (n + 1)) * Œº (closed_ball x Œµ) := by rw [‚Üê mul_assoc, pow_succ'‚Çì, Ennreal.coe_mul]
      
  rcases lt_or_le‚Çì K 1 with (hK | hK)
  ¬∑ refine' ‚ü®1, _‚ü©
    simp only [Ennreal.coe_one, one_mul‚Çì]
    exact
      eventually_mem_nhds_within.mono fun Œµ hŒµ x t ht =>
        measure_mono <| closed_ball_subset_closed_ball (by nlinarith [mem_Ioi.mp hŒµ])
    
  ¬∑ refine'
      ‚ü®C ^ ‚åàReal.logb 2 K‚åâ‚Çä,
        ((hŒº ‚åàReal.logb 2 K‚åâ‚Çä).And eventually_mem_nhds_within).mono fun Œµ hŒµ x t ht =>
          le_trans‚Çì (measure_mono <| closed_ball_subset_closed_ball _) (hŒµ.1 x)‚ü©
    refine' mul_le_mul_of_nonneg_right (ht.trans _) (mem_Ioi.mp hŒµ.2).le
    conv_lhs => rw [‚Üê Real.rpow_logb two_pos (by norm_num) (by linarith : 0 < K)]
    rw [‚Üê Real.rpow_nat_cast]
    exact Real.rpow_le_rpow_of_exponent_le one_le_two (Nat.le_ceil (Real.logb 2 K))
    

/-- A variant of `is_doubling_measure.doubling_constant` which allows for scaling the radius by
values other than `2`. -/
def scalingConstantOf (K : ‚Ñù) : ‚Ñù‚â•0 :=
  Classical.choose <| exists_eventually_forall_measure_closed_ball_le_mul Œº K

theorem eventually_scaling_constant_of (K : ‚Ñù) :
    ‚àÄ·∂† Œµ in ùìù[>] 0, ‚àÄ (x t) (ht : t ‚â§ K), Œº (ClosedBall x (t * Œµ)) ‚â§ scalingConstantOf Œº K * Œº (ClosedBall x Œµ) :=
  Classical.choose_spec <| exists_eventually_forall_measure_closed_ball_le_mul Œº K

variable [ProperSpace Œ±] [BorelSpace Œ±] [IsLocallyFiniteMeasure Œº]

/-- A Vitali family in space with doubling measure with a covering proportion controlled by `K`. -/
def vitaliFamily (K : ‚Ñù) (hK : 6 ‚â§ K) : VitaliFamily Œº :=
  (Vitali.vitaliFamily Œº (scalingConstantOf Œº K)) fun x Œµ hŒµ => by
    have h := eventually_scaling_constant_of Œº K
    replace h := forall_eventually_of_eventually_forall (forall_eventually_of_eventually_forall h x)
    replace h := eventually_imp_distrib_left.mp (h 6) hK
    simpa only [exists_prop‚Çì] using ((eventually_nhds_within_pos_mem_Ioc hŒµ).And h).exists

/-- A version of *Lebesgue's density theorem* for a sequence of closed balls whose centres are
not required to be fixed.

See also `besicovitch.ae_tendsto_measure_inter_div`. -/
theorem ae_tendsto_measure_inter_div (S : Set Œ±) (K : ‚Ñù) (hK : K ‚àà UnitInterval) :
    ‚àÄ·µê x ‚àÇŒº.restrict S,
      ‚àÄ {Œπ : Type _} {l : Filter Œπ} (w : Œπ ‚Üí Œ±) (Œ¥ : Œπ ‚Üí ‚Ñù) (Œ¥lim : Tendsto Œ¥ l (ùìù[>] 0))
        (xmem : ‚àÄ·∂† j in l, x ‚àà ClosedBall (w j) (K * Œ¥ j)),
        Tendsto (fun j => Œº (S ‚à© ClosedBall (w j) (Œ¥ j)) / Œº (ClosedBall (w j) (Œ¥ j))) l (ùìù 1) :=
  by
  let v := IsDoublingMeasure.vitaliFamily Œº 7 (by norm_num)
  filter_upwards [v.ae_tendsto_measure_inter_div S] with x hx Œπ l w Œ¥ Œ¥lim xmem
  suffices tendsto (fun j => closed_ball (w j) (Œ¥ j)) l (v.filter_at x) by exact hx.comp this
  refine' v.tendsto_filter_at_iff.mpr ‚ü®_, fun Œµ hŒµ => _‚ü©
  ¬∑ simp only [v, Vitali.vitaliFamily]
    have Œ¥pos : ‚àÄ·∂† j in l, 0 < Œ¥ j := eventually_mem_of_tendsto_nhds_within Œ¥lim
    replace xmem : ‚àÄ·∂† j : Œπ in l, x ‚àà closed_ball (w j) (Œ¥ j) :=
      (Œ¥pos.and xmem).mono fun j hj => closed_ball_subset_closed_ball (by nlinarith [hj.1, hK.2]) hj.2
    apply ((Œ¥lim.eventually (eventually_scaling_constant_of Œº 7)).And (xmem.and Œ¥pos)).mono
    rintro j ‚ü®hjC, hjx, hjŒ¥‚ü©
    have hdiam : 3 * diam (closed_ball (w j) (Œ¥ j)) ‚â§ 6 * Œ¥ j := by linarith [@diam_closed_ball _ _ (w j) _ hjŒ¥.le]
    refine'
      ‚ü®hjx, is_closed_ball, (nonempty_ball.mpr hjŒ¥).mono ball_subset_interior_closed_ball,
        (measure_mono (closed_ball_subset_closed_ball hdiam)).trans _‚ü©
    suffices closed_ball x (6 * Œ¥ j) ‚äÜ closed_ball (w j) (7 * Œ¥ j) by
      exact (measure_mono this).trans ((hjC (w j) 7 (by norm_num)).trans <| le_refl‚Çì _)
    intro y hy
    simp only [mem_closed_ball, dist_comm x (w j)] at hjx hy‚ä¢
    linarith [dist_triangle_right y (w j) x]
    
  ¬∑ have Œ¥pos := eventually_mem_of_tendsto_nhds_within Œ¥lim
    replace Œ¥lim := tendsto_nhds_of_tendsto_nhds_within Œ¥lim
    replace hK : 0 < K + 1 := by linarith [hK.1]
    apply (((metric.tendsto_nhds.mp Œ¥lim _ (div_pos hŒµ hK)).And Œ¥pos).And xmem).mono
    rintro j ‚ü®‚ü®hjŒµ, hj‚ÇÄ : 0 < Œ¥ j‚ü©, hx‚ü© y hy
    replace hjŒµ : (K + 1) * Œ¥ j < Œµ := by simpa [abs_eq_self.mpr hj‚ÇÄ.le] using (lt_div_iff' hK).mp hjŒµ
    simp only [mem_closed_ball] at hx hy‚ä¢
    linarith [dist_triangle_right y x (w j)]
    

end IsDoublingMeasure

