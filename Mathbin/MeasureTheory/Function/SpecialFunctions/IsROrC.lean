/-
Copyright (c) 2020 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Yury Kudryashov

! This file was ported from Lean 3 source module measure_theory.function.special_functions.is_R_or_C
! leanprover-community/mathlib commit 38df578a6450a8c5142b3727e3ae894c2300cae0
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.MeasureTheory.Function.SpecialFunctions.Basic
import Mathbin.Data.IsROrC.Lemmas

/-!
# Measurability of the basic `is_R_or_C` functions

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

-/


noncomputable section

open NNReal ENNReal

namespace IsROrC

variable {𝕜 : Type _} [IsROrC 𝕜]

/- warning: is_R_or_C.measurable_re -> IsROrC.measurable_re is a dubious translation:
lean 3 declaration is
  forall {𝕜 : Type.{u1}} [_inst_1 : IsROrC.{u1} 𝕜], Measurable.{u1, 0} 𝕜 Real (IsROrC.measurableSpace.{u1} 𝕜 _inst_1) Real.measurableSpace (coeFn.{succ u1, succ u1} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddMonoidWithOne.toAddMonoid.{u1} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u1} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u1} 𝕜 (Ring.toAddCommGroupWithOne.{u1} 𝕜 (NormedRing.toRing.{u1} 𝕜 (NormedCommRing.toNormedRing.{u1} 𝕜 (NormedField.toNormedCommRing.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) (fun (_x : AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddMonoidWithOne.toAddMonoid.{u1} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u1} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u1} 𝕜 (Ring.toAddCommGroupWithOne.{u1} 𝕜 (NormedRing.toRing.{u1} 𝕜 (NormedCommRing.toNormedRing.{u1} 𝕜 (NormedField.toNormedCommRing.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) => 𝕜 -> Real) (AddMonoidHom.hasCoeToFun.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddMonoidWithOne.toAddMonoid.{u1} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u1} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u1} 𝕜 (Ring.toAddCommGroupWithOne.{u1} 𝕜 (NormedRing.toRing.{u1} 𝕜 (NormedCommRing.toNormedRing.{u1} 𝕜 (NormedField.toNormedCommRing.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) (IsROrC.re.{u1} 𝕜 _inst_1))
but is expected to have type
  forall {𝕜 : Type.{u1}} [_inst_1 : IsROrC.{u1} 𝕜], Measurable.{u1, 0} 𝕜 Real (IsROrC.measurableSpace.{u1} 𝕜 _inst_1) Real.measurableSpace (FunLike.coe.{succ u1, succ u1, 1} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 (fun (_x : 𝕜) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : 𝕜) => Real) _x) (AddHomClass.toFunLike.{u1, u1, 0} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 Real (AddZeroClass.toAdd.{u1} 𝕜 (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1)))))))))))) (AddZeroClass.toAdd.{0} Real (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) (AddMonoidHomClass.toAddHomClass.{u1, u1, 0} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal) (AddMonoidHom.addMonoidHomClass.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)))) (IsROrC.re.{u1} 𝕜 _inst_1))
Case conversion may be inaccurate. Consider using '#align is_R_or_C.measurable_re IsROrC.measurable_reₓ'. -/
@[measurability]
theorem measurable_re : Measurable (re : 𝕜 → ℝ) :=
  continuous_re.Measurable
#align is_R_or_C.measurable_re IsROrC.measurable_re

/- warning: is_R_or_C.measurable_im -> IsROrC.measurable_im is a dubious translation:
lean 3 declaration is
  forall {𝕜 : Type.{u1}} [_inst_1 : IsROrC.{u1} 𝕜], Measurable.{u1, 0} 𝕜 Real (IsROrC.measurableSpace.{u1} 𝕜 _inst_1) Real.measurableSpace (coeFn.{succ u1, succ u1} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddMonoidWithOne.toAddMonoid.{u1} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u1} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u1} 𝕜 (Ring.toAddCommGroupWithOne.{u1} 𝕜 (NormedRing.toRing.{u1} 𝕜 (NormedCommRing.toNormedRing.{u1} 𝕜 (NormedField.toNormedCommRing.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) (fun (_x : AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddMonoidWithOne.toAddMonoid.{u1} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u1} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u1} 𝕜 (Ring.toAddCommGroupWithOne.{u1} 𝕜 (NormedRing.toRing.{u1} 𝕜 (NormedCommRing.toNormedRing.{u1} 𝕜 (NormedField.toNormedCommRing.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) => 𝕜 -> Real) (AddMonoidHom.hasCoeToFun.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddMonoidWithOne.toAddMonoid.{u1} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u1} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u1} 𝕜 (Ring.toAddCommGroupWithOne.{u1} 𝕜 (NormedRing.toRing.{u1} 𝕜 (NormedCommRing.toNormedRing.{u1} 𝕜 (NormedField.toNormedCommRing.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) (IsROrC.im.{u1} 𝕜 _inst_1))
but is expected to have type
  forall {𝕜 : Type.{u1}} [_inst_1 : IsROrC.{u1} 𝕜], Measurable.{u1, 0} 𝕜 Real (IsROrC.measurableSpace.{u1} 𝕜 _inst_1) Real.measurableSpace (FunLike.coe.{succ u1, succ u1, 1} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 (fun (_x : 𝕜) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : 𝕜) => Real) _x) (AddHomClass.toFunLike.{u1, u1, 0} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 Real (AddZeroClass.toAdd.{u1} 𝕜 (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1)))))))))))) (AddZeroClass.toAdd.{0} Real (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) (AddMonoidHomClass.toAddHomClass.{u1, u1, 0} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal) (AddMonoidHom.addMonoidHomClass.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)))) (IsROrC.im.{u1} 𝕜 _inst_1))
Case conversion may be inaccurate. Consider using '#align is_R_or_C.measurable_im IsROrC.measurable_imₓ'. -/
@[measurability]
theorem measurable_im : Measurable (im : 𝕜 → ℝ) :=
  continuous_im.Measurable
#align is_R_or_C.measurable_im IsROrC.measurable_im

end IsROrC

section IsROrCComposition

variable {α 𝕜 : Type _} [IsROrC 𝕜] {m : MeasurableSpace α} {f : α → 𝕜} {μ : MeasureTheory.Measure α}

include m

/- warning: measurable.re -> Measurable.re is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {𝕜 : Type.{u2}} [_inst_1 : IsROrC.{u2} 𝕜] {m : MeasurableSpace.{u1} α} {f : α -> 𝕜}, (Measurable.{u1, u2} α 𝕜 m (IsROrC.measurableSpace.{u2} 𝕜 _inst_1) f) -> (Measurable.{u1, 0} α Real m Real.measurableSpace (fun (x : α) => coeFn.{succ u2, succ u2} (AddMonoidHom.{u2, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u2} 𝕜 (AddMonoidWithOne.toAddMonoid.{u2} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u2} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u2} 𝕜 (Ring.toAddCommGroupWithOne.{u2} 𝕜 (NormedRing.toRing.{u2} 𝕜 (NormedCommRing.toNormedRing.{u2} 𝕜 (NormedField.toNormedCommRing.{u2} 𝕜 (DenselyNormedField.toNormedField.{u2} 𝕜 (IsROrC.toDenselyNormedField.{u2} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) (fun (_x : AddMonoidHom.{u2, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u2} 𝕜 (AddMonoidWithOne.toAddMonoid.{u2} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u2} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u2} 𝕜 (Ring.toAddCommGroupWithOne.{u2} 𝕜 (NormedRing.toRing.{u2} 𝕜 (NormedCommRing.toNormedRing.{u2} 𝕜 (NormedField.toNormedCommRing.{u2} 𝕜 (DenselyNormedField.toNormedField.{u2} 𝕜 (IsROrC.toDenselyNormedField.{u2} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) => 𝕜 -> Real) (AddMonoidHom.hasCoeToFun.{u2, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u2} 𝕜 (AddMonoidWithOne.toAddMonoid.{u2} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u2} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u2} 𝕜 (Ring.toAddCommGroupWithOne.{u2} 𝕜 (NormedRing.toRing.{u2} 𝕜 (NormedCommRing.toNormedRing.{u2} 𝕜 (NormedField.toNormedCommRing.{u2} 𝕜 (DenselyNormedField.toNormedField.{u2} 𝕜 (IsROrC.toDenselyNormedField.{u2} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) (IsROrC.re.{u2} 𝕜 _inst_1) (f x)))
but is expected to have type
  forall {α : Type.{u2}} {𝕜 : Type.{u1}} [_inst_1 : IsROrC.{u1} 𝕜] {m : MeasurableSpace.{u2} α} {f : α -> 𝕜}, (Measurable.{u2, u1} α 𝕜 m (IsROrC.measurableSpace.{u1} 𝕜 _inst_1) f) -> (Measurable.{u2, 0} α Real m Real.measurableSpace (fun (x : α) => FunLike.coe.{succ u1, succ u1, 1} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 (fun (_x : 𝕜) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : 𝕜) => Real) _x) (AddHomClass.toFunLike.{u1, u1, 0} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 Real (AddZeroClass.toAdd.{u1} 𝕜 (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1)))))))))))) (AddZeroClass.toAdd.{0} Real (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) (AddMonoidHomClass.toAddHomClass.{u1, u1, 0} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal) (AddMonoidHom.addMonoidHomClass.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)))) (IsROrC.re.{u1} 𝕜 _inst_1) (f x)))
Case conversion may be inaccurate. Consider using '#align measurable.re Measurable.reₓ'. -/
@[measurability]
theorem Measurable.re (hf : Measurable f) : Measurable fun x => IsROrC.re (f x) :=
  IsROrC.measurable_re.comp hf
#align measurable.re Measurable.re

/- warning: ae_measurable.re -> AEMeasurable.re is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {𝕜 : Type.{u2}} [_inst_1 : IsROrC.{u2} 𝕜] {m : MeasurableSpace.{u1} α} {f : α -> 𝕜} {μ : MeasureTheory.Measure.{u1} α m}, (AEMeasurable.{u1, u2} α 𝕜 (IsROrC.measurableSpace.{u2} 𝕜 _inst_1) m f μ) -> (AEMeasurable.{u1, 0} α Real Real.measurableSpace m (fun (x : α) => coeFn.{succ u2, succ u2} (AddMonoidHom.{u2, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u2} 𝕜 (AddMonoidWithOne.toAddMonoid.{u2} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u2} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u2} 𝕜 (Ring.toAddCommGroupWithOne.{u2} 𝕜 (NormedRing.toRing.{u2} 𝕜 (NormedCommRing.toNormedRing.{u2} 𝕜 (NormedField.toNormedCommRing.{u2} 𝕜 (DenselyNormedField.toNormedField.{u2} 𝕜 (IsROrC.toDenselyNormedField.{u2} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) (fun (_x : AddMonoidHom.{u2, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u2} 𝕜 (AddMonoidWithOne.toAddMonoid.{u2} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u2} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u2} 𝕜 (Ring.toAddCommGroupWithOne.{u2} 𝕜 (NormedRing.toRing.{u2} 𝕜 (NormedCommRing.toNormedRing.{u2} 𝕜 (NormedField.toNormedCommRing.{u2} 𝕜 (DenselyNormedField.toNormedField.{u2} 𝕜 (IsROrC.toDenselyNormedField.{u2} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) => 𝕜 -> Real) (AddMonoidHom.hasCoeToFun.{u2, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u2} 𝕜 (AddMonoidWithOne.toAddMonoid.{u2} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u2} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u2} 𝕜 (Ring.toAddCommGroupWithOne.{u2} 𝕜 (NormedRing.toRing.{u2} 𝕜 (NormedCommRing.toNormedRing.{u2} 𝕜 (NormedField.toNormedCommRing.{u2} 𝕜 (DenselyNormedField.toNormedField.{u2} 𝕜 (IsROrC.toDenselyNormedField.{u2} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) (IsROrC.re.{u2} 𝕜 _inst_1) (f x)) μ)
but is expected to have type
  forall {α : Type.{u2}} {𝕜 : Type.{u1}} [_inst_1 : IsROrC.{u1} 𝕜] {m : MeasurableSpace.{u2} α} {f : α -> 𝕜} {μ : MeasureTheory.Measure.{u2} α m}, (AEMeasurable.{u2, u1} α 𝕜 (IsROrC.measurableSpace.{u1} 𝕜 _inst_1) m f μ) -> (AEMeasurable.{u2, 0} α Real Real.measurableSpace m (fun (x : α) => FunLike.coe.{succ u1, succ u1, 1} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 (fun (_x : 𝕜) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : 𝕜) => Real) _x) (AddHomClass.toFunLike.{u1, u1, 0} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 Real (AddZeroClass.toAdd.{u1} 𝕜 (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1)))))))))))) (AddZeroClass.toAdd.{0} Real (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) (AddMonoidHomClass.toAddHomClass.{u1, u1, 0} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal) (AddMonoidHom.addMonoidHomClass.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)))) (IsROrC.re.{u1} 𝕜 _inst_1) (f x)) μ)
Case conversion may be inaccurate. Consider using '#align ae_measurable.re AEMeasurable.reₓ'. -/
@[measurability]
theorem AEMeasurable.re (hf : AEMeasurable f μ) : AEMeasurable (fun x => IsROrC.re (f x)) μ :=
  IsROrC.measurable_re.comp_aemeasurable hf
#align ae_measurable.re AEMeasurable.re

/- warning: measurable.im -> Measurable.im is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {𝕜 : Type.{u2}} [_inst_1 : IsROrC.{u2} 𝕜] {m : MeasurableSpace.{u1} α} {f : α -> 𝕜}, (Measurable.{u1, u2} α 𝕜 m (IsROrC.measurableSpace.{u2} 𝕜 _inst_1) f) -> (Measurable.{u1, 0} α Real m Real.measurableSpace (fun (x : α) => coeFn.{succ u2, succ u2} (AddMonoidHom.{u2, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u2} 𝕜 (AddMonoidWithOne.toAddMonoid.{u2} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u2} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u2} 𝕜 (Ring.toAddCommGroupWithOne.{u2} 𝕜 (NormedRing.toRing.{u2} 𝕜 (NormedCommRing.toNormedRing.{u2} 𝕜 (NormedField.toNormedCommRing.{u2} 𝕜 (DenselyNormedField.toNormedField.{u2} 𝕜 (IsROrC.toDenselyNormedField.{u2} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) (fun (_x : AddMonoidHom.{u2, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u2} 𝕜 (AddMonoidWithOne.toAddMonoid.{u2} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u2} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u2} 𝕜 (Ring.toAddCommGroupWithOne.{u2} 𝕜 (NormedRing.toRing.{u2} 𝕜 (NormedCommRing.toNormedRing.{u2} 𝕜 (NormedField.toNormedCommRing.{u2} 𝕜 (DenselyNormedField.toNormedField.{u2} 𝕜 (IsROrC.toDenselyNormedField.{u2} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) => 𝕜 -> Real) (AddMonoidHom.hasCoeToFun.{u2, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u2} 𝕜 (AddMonoidWithOne.toAddMonoid.{u2} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u2} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u2} 𝕜 (Ring.toAddCommGroupWithOne.{u2} 𝕜 (NormedRing.toRing.{u2} 𝕜 (NormedCommRing.toNormedRing.{u2} 𝕜 (NormedField.toNormedCommRing.{u2} 𝕜 (DenselyNormedField.toNormedField.{u2} 𝕜 (IsROrC.toDenselyNormedField.{u2} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) (IsROrC.im.{u2} 𝕜 _inst_1) (f x)))
but is expected to have type
  forall {α : Type.{u2}} {𝕜 : Type.{u1}} [_inst_1 : IsROrC.{u1} 𝕜] {m : MeasurableSpace.{u2} α} {f : α -> 𝕜}, (Measurable.{u2, u1} α 𝕜 m (IsROrC.measurableSpace.{u1} 𝕜 _inst_1) f) -> (Measurable.{u2, 0} α Real m Real.measurableSpace (fun (x : α) => FunLike.coe.{succ u1, succ u1, 1} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 (fun (_x : 𝕜) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : 𝕜) => Real) _x) (AddHomClass.toFunLike.{u1, u1, 0} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 Real (AddZeroClass.toAdd.{u1} 𝕜 (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1)))))))))))) (AddZeroClass.toAdd.{0} Real (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) (AddMonoidHomClass.toAddHomClass.{u1, u1, 0} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal) (AddMonoidHom.addMonoidHomClass.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)))) (IsROrC.im.{u1} 𝕜 _inst_1) (f x)))
Case conversion may be inaccurate. Consider using '#align measurable.im Measurable.imₓ'. -/
@[measurability]
theorem Measurable.im (hf : Measurable f) : Measurable fun x => IsROrC.im (f x) :=
  IsROrC.measurable_im.comp hf
#align measurable.im Measurable.im

/- warning: ae_measurable.im -> AEMeasurable.im is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {𝕜 : Type.{u2}} [_inst_1 : IsROrC.{u2} 𝕜] {m : MeasurableSpace.{u1} α} {f : α -> 𝕜} {μ : MeasureTheory.Measure.{u1} α m}, (AEMeasurable.{u1, u2} α 𝕜 (IsROrC.measurableSpace.{u2} 𝕜 _inst_1) m f μ) -> (AEMeasurable.{u1, 0} α Real Real.measurableSpace m (fun (x : α) => coeFn.{succ u2, succ u2} (AddMonoidHom.{u2, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u2} 𝕜 (AddMonoidWithOne.toAddMonoid.{u2} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u2} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u2} 𝕜 (Ring.toAddCommGroupWithOne.{u2} 𝕜 (NormedRing.toRing.{u2} 𝕜 (NormedCommRing.toNormedRing.{u2} 𝕜 (NormedField.toNormedCommRing.{u2} 𝕜 (DenselyNormedField.toNormedField.{u2} 𝕜 (IsROrC.toDenselyNormedField.{u2} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) (fun (_x : AddMonoidHom.{u2, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u2} 𝕜 (AddMonoidWithOne.toAddMonoid.{u2} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u2} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u2} 𝕜 (Ring.toAddCommGroupWithOne.{u2} 𝕜 (NormedRing.toRing.{u2} 𝕜 (NormedCommRing.toNormedRing.{u2} 𝕜 (NormedField.toNormedCommRing.{u2} 𝕜 (DenselyNormedField.toNormedField.{u2} 𝕜 (IsROrC.toDenselyNormedField.{u2} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) => 𝕜 -> Real) (AddMonoidHom.hasCoeToFun.{u2, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u2} 𝕜 (AddMonoidWithOne.toAddMonoid.{u2} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u2} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u2} 𝕜 (Ring.toAddCommGroupWithOne.{u2} 𝕜 (NormedRing.toRing.{u2} 𝕜 (NormedCommRing.toNormedRing.{u2} 𝕜 (NormedField.toNormedCommRing.{u2} 𝕜 (DenselyNormedField.toNormedField.{u2} 𝕜 (IsROrC.toDenselyNormedField.{u2} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) (IsROrC.im.{u2} 𝕜 _inst_1) (f x)) μ)
but is expected to have type
  forall {α : Type.{u2}} {𝕜 : Type.{u1}} [_inst_1 : IsROrC.{u1} 𝕜] {m : MeasurableSpace.{u2} α} {f : α -> 𝕜} {μ : MeasureTheory.Measure.{u2} α m}, (AEMeasurable.{u2, u1} α 𝕜 (IsROrC.measurableSpace.{u1} 𝕜 _inst_1) m f μ) -> (AEMeasurable.{u2, 0} α Real Real.measurableSpace m (fun (x : α) => FunLike.coe.{succ u1, succ u1, 1} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 (fun (_x : 𝕜) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : 𝕜) => Real) _x) (AddHomClass.toFunLike.{u1, u1, 0} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 Real (AddZeroClass.toAdd.{u1} 𝕜 (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1)))))))))))) (AddZeroClass.toAdd.{0} Real (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) (AddMonoidHomClass.toAddHomClass.{u1, u1, 0} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal) (AddMonoidHom.addMonoidHomClass.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)))) (IsROrC.im.{u1} 𝕜 _inst_1) (f x)) μ)
Case conversion may be inaccurate. Consider using '#align ae_measurable.im AEMeasurable.imₓ'. -/
@[measurability]
theorem AEMeasurable.im (hf : AEMeasurable f μ) : AEMeasurable (fun x => IsROrC.im (f x)) μ :=
  IsROrC.measurable_im.comp_aemeasurable hf
#align ae_measurable.im AEMeasurable.im

omit m

end IsROrCComposition

section

variable {α 𝕜 : Type _} [IsROrC 𝕜] [MeasurableSpace α] {f : α → 𝕜} {μ : MeasureTheory.Measure α}

#print IsROrC.measurable_of_real /-
@[measurability]
theorem IsROrC.measurable_of_real : Measurable (coe : ℝ → 𝕜) :=
  IsROrC.continuous_ofReal.Measurable
#align is_R_or_C.measurable_of_real IsROrC.measurable_of_real
-/

/- warning: measurable_of_re_im -> measurable_of_re_im is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {𝕜 : Type.{u2}} [_inst_1 : IsROrC.{u2} 𝕜] [_inst_2 : MeasurableSpace.{u1} α] {f : α -> 𝕜}, (Measurable.{u1, 0} α Real _inst_2 Real.measurableSpace (fun (x : α) => coeFn.{succ u2, succ u2} (AddMonoidHom.{u2, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u2} 𝕜 (AddMonoidWithOne.toAddMonoid.{u2} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u2} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u2} 𝕜 (Ring.toAddCommGroupWithOne.{u2} 𝕜 (NormedRing.toRing.{u2} 𝕜 (NormedCommRing.toNormedRing.{u2} 𝕜 (NormedField.toNormedCommRing.{u2} 𝕜 (DenselyNormedField.toNormedField.{u2} 𝕜 (IsROrC.toDenselyNormedField.{u2} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) (fun (_x : AddMonoidHom.{u2, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u2} 𝕜 (AddMonoidWithOne.toAddMonoid.{u2} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u2} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u2} 𝕜 (Ring.toAddCommGroupWithOne.{u2} 𝕜 (NormedRing.toRing.{u2} 𝕜 (NormedCommRing.toNormedRing.{u2} 𝕜 (NormedField.toNormedCommRing.{u2} 𝕜 (DenselyNormedField.toNormedField.{u2} 𝕜 (IsROrC.toDenselyNormedField.{u2} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) => 𝕜 -> Real) (AddMonoidHom.hasCoeToFun.{u2, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u2} 𝕜 (AddMonoidWithOne.toAddMonoid.{u2} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u2} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u2} 𝕜 (Ring.toAddCommGroupWithOne.{u2} 𝕜 (NormedRing.toRing.{u2} 𝕜 (NormedCommRing.toNormedRing.{u2} 𝕜 (NormedField.toNormedCommRing.{u2} 𝕜 (DenselyNormedField.toNormedField.{u2} 𝕜 (IsROrC.toDenselyNormedField.{u2} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) (IsROrC.re.{u2} 𝕜 _inst_1) (f x))) -> (Measurable.{u1, 0} α Real _inst_2 Real.measurableSpace (fun (x : α) => coeFn.{succ u2, succ u2} (AddMonoidHom.{u2, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u2} 𝕜 (AddMonoidWithOne.toAddMonoid.{u2} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u2} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u2} 𝕜 (Ring.toAddCommGroupWithOne.{u2} 𝕜 (NormedRing.toRing.{u2} 𝕜 (NormedCommRing.toNormedRing.{u2} 𝕜 (NormedField.toNormedCommRing.{u2} 𝕜 (DenselyNormedField.toNormedField.{u2} 𝕜 (IsROrC.toDenselyNormedField.{u2} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) (fun (_x : AddMonoidHom.{u2, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u2} 𝕜 (AddMonoidWithOne.toAddMonoid.{u2} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u2} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u2} 𝕜 (Ring.toAddCommGroupWithOne.{u2} 𝕜 (NormedRing.toRing.{u2} 𝕜 (NormedCommRing.toNormedRing.{u2} 𝕜 (NormedField.toNormedCommRing.{u2} 𝕜 (DenselyNormedField.toNormedField.{u2} 𝕜 (IsROrC.toDenselyNormedField.{u2} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) => 𝕜 -> Real) (AddMonoidHom.hasCoeToFun.{u2, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u2} 𝕜 (AddMonoidWithOne.toAddMonoid.{u2} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u2} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u2} 𝕜 (Ring.toAddCommGroupWithOne.{u2} 𝕜 (NormedRing.toRing.{u2} 𝕜 (NormedCommRing.toNormedRing.{u2} 𝕜 (NormedField.toNormedCommRing.{u2} 𝕜 (DenselyNormedField.toNormedField.{u2} 𝕜 (IsROrC.toDenselyNormedField.{u2} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) (IsROrC.im.{u2} 𝕜 _inst_1) (f x))) -> (Measurable.{u1, u2} α 𝕜 _inst_2 (IsROrC.measurableSpace.{u2} 𝕜 _inst_1) f)
but is expected to have type
  forall {α : Type.{u2}} {𝕜 : Type.{u1}} [_inst_1 : IsROrC.{u1} 𝕜] [_inst_2 : MeasurableSpace.{u2} α] {f : α -> 𝕜}, (Measurable.{u2, 0} α Real _inst_2 Real.measurableSpace (fun (x : α) => FunLike.coe.{succ u1, succ u1, 1} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 (fun (_x : 𝕜) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : 𝕜) => Real) _x) (AddHomClass.toFunLike.{u1, u1, 0} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 Real (AddZeroClass.toAdd.{u1} 𝕜 (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1)))))))))))) (AddZeroClass.toAdd.{0} Real (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) (AddMonoidHomClass.toAddHomClass.{u1, u1, 0} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal) (AddMonoidHom.addMonoidHomClass.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)))) (IsROrC.re.{u1} 𝕜 _inst_1) (f x))) -> (Measurable.{u2, 0} α Real _inst_2 Real.measurableSpace (fun (x : α) => FunLike.coe.{succ u1, succ u1, 1} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 (fun (_x : 𝕜) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : 𝕜) => Real) _x) (AddHomClass.toFunLike.{u1, u1, 0} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 Real (AddZeroClass.toAdd.{u1} 𝕜 (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1)))))))))))) (AddZeroClass.toAdd.{0} Real (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) (AddMonoidHomClass.toAddHomClass.{u1, u1, 0} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal) (AddMonoidHom.addMonoidHomClass.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)))) (IsROrC.im.{u1} 𝕜 _inst_1) (f x))) -> (Measurable.{u2, u1} α 𝕜 _inst_2 (IsROrC.measurableSpace.{u1} 𝕜 _inst_1) f)
Case conversion may be inaccurate. Consider using '#align measurable_of_re_im measurable_of_re_imₓ'. -/
theorem measurable_of_re_im (hre : Measurable fun x => IsROrC.re (f x))
    (him : Measurable fun x => IsROrC.im (f x)) : Measurable f :=
  by
  convert(is_R_or_C.measurable_of_real.comp hre).add
      ((is_R_or_C.measurable_of_real.comp him).mul_const IsROrC.i)
  · ext1 x
    exact (IsROrC.re_add_im _).symm
  all_goals infer_instance
#align measurable_of_re_im measurable_of_re_im

/- warning: ae_measurable_of_re_im -> aemeasurable_of_re_im is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {𝕜 : Type.{u2}} [_inst_1 : IsROrC.{u2} 𝕜] [_inst_2 : MeasurableSpace.{u1} α] {f : α -> 𝕜} {μ : MeasureTheory.Measure.{u1} α _inst_2}, (AEMeasurable.{u1, 0} α Real Real.measurableSpace _inst_2 (fun (x : α) => coeFn.{succ u2, succ u2} (AddMonoidHom.{u2, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u2} 𝕜 (AddMonoidWithOne.toAddMonoid.{u2} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u2} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u2} 𝕜 (Ring.toAddCommGroupWithOne.{u2} 𝕜 (NormedRing.toRing.{u2} 𝕜 (NormedCommRing.toNormedRing.{u2} 𝕜 (NormedField.toNormedCommRing.{u2} 𝕜 (DenselyNormedField.toNormedField.{u2} 𝕜 (IsROrC.toDenselyNormedField.{u2} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) (fun (_x : AddMonoidHom.{u2, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u2} 𝕜 (AddMonoidWithOne.toAddMonoid.{u2} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u2} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u2} 𝕜 (Ring.toAddCommGroupWithOne.{u2} 𝕜 (NormedRing.toRing.{u2} 𝕜 (NormedCommRing.toNormedRing.{u2} 𝕜 (NormedField.toNormedCommRing.{u2} 𝕜 (DenselyNormedField.toNormedField.{u2} 𝕜 (IsROrC.toDenselyNormedField.{u2} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) => 𝕜 -> Real) (AddMonoidHom.hasCoeToFun.{u2, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u2} 𝕜 (AddMonoidWithOne.toAddMonoid.{u2} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u2} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u2} 𝕜 (Ring.toAddCommGroupWithOne.{u2} 𝕜 (NormedRing.toRing.{u2} 𝕜 (NormedCommRing.toNormedRing.{u2} 𝕜 (NormedField.toNormedCommRing.{u2} 𝕜 (DenselyNormedField.toNormedField.{u2} 𝕜 (IsROrC.toDenselyNormedField.{u2} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) (IsROrC.re.{u2} 𝕜 _inst_1) (f x)) μ) -> (AEMeasurable.{u1, 0} α Real Real.measurableSpace _inst_2 (fun (x : α) => coeFn.{succ u2, succ u2} (AddMonoidHom.{u2, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u2} 𝕜 (AddMonoidWithOne.toAddMonoid.{u2} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u2} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u2} 𝕜 (Ring.toAddCommGroupWithOne.{u2} 𝕜 (NormedRing.toRing.{u2} 𝕜 (NormedCommRing.toNormedRing.{u2} 𝕜 (NormedField.toNormedCommRing.{u2} 𝕜 (DenselyNormedField.toNormedField.{u2} 𝕜 (IsROrC.toDenselyNormedField.{u2} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) (fun (_x : AddMonoidHom.{u2, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u2} 𝕜 (AddMonoidWithOne.toAddMonoid.{u2} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u2} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u2} 𝕜 (Ring.toAddCommGroupWithOne.{u2} 𝕜 (NormedRing.toRing.{u2} 𝕜 (NormedCommRing.toNormedRing.{u2} 𝕜 (NormedField.toNormedCommRing.{u2} 𝕜 (DenselyNormedField.toNormedField.{u2} 𝕜 (IsROrC.toDenselyNormedField.{u2} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) => 𝕜 -> Real) (AddMonoidHom.hasCoeToFun.{u2, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u2} 𝕜 (AddMonoidWithOne.toAddMonoid.{u2} 𝕜 (AddGroupWithOne.toAddMonoidWithOne.{u2} 𝕜 (AddCommGroupWithOne.toAddGroupWithOne.{u2} 𝕜 (Ring.toAddCommGroupWithOne.{u2} 𝕜 (NormedRing.toRing.{u2} 𝕜 (NormedCommRing.toNormedRing.{u2} 𝕜 (NormedField.toNormedCommRing.{u2} 𝕜 (DenselyNormedField.toNormedField.{u2} 𝕜 (IsROrC.toDenselyNormedField.{u2} 𝕜 _inst_1)))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.addMonoid)) (IsROrC.im.{u2} 𝕜 _inst_1) (f x)) μ) -> (AEMeasurable.{u1, u2} α 𝕜 (IsROrC.measurableSpace.{u2} 𝕜 _inst_1) _inst_2 f μ)
but is expected to have type
  forall {α : Type.{u2}} {𝕜 : Type.{u1}} [_inst_1 : IsROrC.{u1} 𝕜] [_inst_2 : MeasurableSpace.{u2} α] {f : α -> 𝕜} {μ : MeasureTheory.Measure.{u2} α _inst_2}, (AEMeasurable.{u2, 0} α Real Real.measurableSpace _inst_2 (fun (x : α) => FunLike.coe.{succ u1, succ u1, 1} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 (fun (_x : 𝕜) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : 𝕜) => Real) _x) (AddHomClass.toFunLike.{u1, u1, 0} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 Real (AddZeroClass.toAdd.{u1} 𝕜 (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1)))))))))))) (AddZeroClass.toAdd.{0} Real (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) (AddMonoidHomClass.toAddHomClass.{u1, u1, 0} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal) (AddMonoidHom.addMonoidHomClass.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)))) (IsROrC.re.{u1} 𝕜 _inst_1) (f x)) μ) -> (AEMeasurable.{u2, 0} α Real Real.measurableSpace _inst_2 (fun (x : α) => FunLike.coe.{succ u1, succ u1, 1} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 (fun (_x : 𝕜) => (fun (x._@.Mathlib.Algebra.Hom.Group._hyg.403 : 𝕜) => Real) _x) (AddHomClass.toFunLike.{u1, u1, 0} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 Real (AddZeroClass.toAdd.{u1} 𝕜 (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1)))))))))))) (AddZeroClass.toAdd.{0} Real (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) (AddMonoidHomClass.toAddHomClass.{u1, u1, 0} (AddMonoidHom.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)) 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal) (AddMonoidHom.addMonoidHomClass.{u1, 0} 𝕜 Real (AddMonoid.toAddZeroClass.{u1} 𝕜 (AddCommMonoid.toAddMonoid.{u1} 𝕜 (NonUnitalNonAssocSemiring.toAddCommMonoid.{u1} 𝕜 (NonUnitalSemiring.toNonUnitalNonAssocSemiring.{u1} 𝕜 (Semiring.toNonUnitalSemiring.{u1} 𝕜 (Ring.toSemiring.{u1} 𝕜 (CommRing.toRing.{u1} 𝕜 (Field.toCommRing.{u1} 𝕜 (NormedField.toField.{u1} 𝕜 (DenselyNormedField.toNormedField.{u1} 𝕜 (IsROrC.toDenselyNormedField.{u1} 𝕜 _inst_1))))))))))) (AddMonoid.toAddZeroClass.{0} Real Real.instAddMonoidReal)))) (IsROrC.im.{u1} 𝕜 _inst_1) (f x)) μ) -> (AEMeasurable.{u2, u1} α 𝕜 (IsROrC.measurableSpace.{u1} 𝕜 _inst_1) _inst_2 f μ)
Case conversion may be inaccurate. Consider using '#align ae_measurable_of_re_im aemeasurable_of_re_imₓ'. -/
theorem aemeasurable_of_re_im (hre : AEMeasurable (fun x => IsROrC.re (f x)) μ)
    (him : AEMeasurable (fun x => IsROrC.im (f x)) μ) : AEMeasurable f μ :=
  by
  convert(is_R_or_C.measurable_of_real.comp_ae_measurable hre).add
      ((is_R_or_C.measurable_of_real.comp_ae_measurable him).mul_const IsROrC.i)
  · ext1 x
    exact (IsROrC.re_add_im _).symm
  all_goals infer_instance
#align ae_measurable_of_re_im aemeasurable_of_re_im

end

