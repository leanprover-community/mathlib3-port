/-
Copyright (c) 2022 Kexing Ying. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Kexing Ying
-/
import MeasureTheory.Function.StronglyMeasurable.Basic

#align_import measure_theory.function.egorov from "leanprover-community/mathlib"@"0b7c740e25651db0ba63648fbae9f9d6f941e31b"

/-!
# Egorov theorem

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

This file contains the Egorov theorem which states that an almost everywhere convergent
sequence on a finite measure space converges uniformly except on an arbitrarily small set.
This theorem is useful for the Vitali convergence theorem as well as theorems regarding
convergence in measure.

## Main results

* `measure_theory.egorov`: Egorov's theorem which shows that a sequence of almost everywhere
  convergent functions converges uniformly except on an arbitrarily small set.

-/


noncomputable section

open scoped Classical MeasureTheory NNReal ENNReal Topology

namespace MeasureTheory

open Set Filter TopologicalSpace

variable {Œ± Œ≤ Œπ : Type _} {m : MeasurableSpace Œ±} [MetricSpace Œ≤] {Œº : Measure Œ±}

namespace Egorov

#print MeasureTheory.Egorov.notConvergentSeq /-
/-- Given a sequence of functions `f` and a function `g`, `not_convergent_seq f g n j` is the
set of elements such that `f k x` and `g x` are separated by at least `1 / (n + 1)` for some
`k ‚â• j`.

This definition is useful for Egorov's theorem. -/
def notConvergentSeq [Preorder Œπ] (f : Œπ ‚Üí Œ± ‚Üí Œ≤) (g : Œ± ‚Üí Œ≤) (n : ‚Ñï) (j : Œπ) : Set Œ± :=
  ‚ãÉ (k) (hk : j ‚â§ k), {x | 1 / (n + 1 : ‚Ñù) < dist (f k x) (g x)}
#align measure_theory.egorov.not_convergent_seq MeasureTheory.Egorov.notConvergentSeq
-/

variable {n : ‚Ñï} {i j : Œπ} {s : Set Œ±} {Œµ : ‚Ñù} {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤}

#print MeasureTheory.Egorov.mem_notConvergentSeq_iff /-
theorem mem_notConvergentSeq_iff [Preorder Œπ] {x : Œ±} :
    x ‚àà notConvergentSeq f g n j ‚Üî ‚àÉ (k : _) (hk : j ‚â§ k), 1 / (n + 1 : ‚Ñù) < dist (f k x) (g x) :=
  by simp_rw [not_convergent_seq, mem_Union]; rfl
#align measure_theory.egorov.mem_not_convergent_seq_iff MeasureTheory.Egorov.mem_notConvergentSeq_iff
-/

#print MeasureTheory.Egorov.notConvergentSeq_antitone /-
theorem notConvergentSeq_antitone [Preorder Œπ] : Antitone (notConvergentSeq f g n) := fun j k hjk =>
  iUnion‚ÇÇ_mono' fun l hl => ‚ü®l, le_trans hjk hl, Subset.rfl‚ü©
#align measure_theory.egorov.not_convergent_seq_antitone MeasureTheory.Egorov.notConvergentSeq_antitone
-/

#print MeasureTheory.Egorov.measure_inter_notConvergentSeq_eq_zero /-
theorem measure_inter_notConvergentSeq_eq_zero [SemilatticeSup Œπ] [Nonempty Œπ]
    (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí Tendsto (fun n => f n x) atTop (ùìù (g x))) (n : ‚Ñï) :
    Œº (s ‚à© ‚ãÇ j, notConvergentSeq f g n j) = 0 :=
  by
  simp_rw [Metric.tendsto_atTop, ae_iff] at hfg
  rw [‚Üê nonpos_iff_eq_zero, ‚Üê hfg]
  refine' measure_mono fun x => _
  simp only [mem_inter_iff, mem_Inter, ge_iff_le, mem_not_convergent_seq_iff]
  push_neg
  rintro ‚ü®hmem, hx‚ü©
  refine' ‚ü®hmem, 1 / (n + 1 : ‚Ñù), Nat.one_div_pos_of_nat, fun N => _‚ü©
  obtain ‚ü®n, hn‚ÇÅ, hn‚ÇÇ‚ü© := hx N
  exact ‚ü®n, hn‚ÇÅ, hn‚ÇÇ.le‚ü©
#align measure_theory.egorov.measure_inter_not_convergent_seq_eq_zero MeasureTheory.Egorov.measure_inter_notConvergentSeq_eq_zero
-/

#print MeasureTheory.Egorov.notConvergentSeq_measurableSet /-
theorem notConvergentSeq_measurableSet [Preorder Œπ] [Countable Œπ]
    (hf : ‚àÄ n, strongly_measurable[m] (f n)) (hg : StronglyMeasurable g) :
    MeasurableSet (notConvergentSeq f g n j) :=
  MeasurableSet.iUnion fun k =>
    MeasurableSet.iUnion fun hk =>
      StronglyMeasurable.measurableSet_lt stronglyMeasurable_const <| (hf k).dist hg
#align measure_theory.egorov.not_convergent_seq_measurable_set MeasureTheory.Egorov.notConvergentSeq_measurableSet
-/

#print MeasureTheory.Egorov.measure_notConvergentSeq_tendsto_zero /-
theorem measure_notConvergentSeq_tendsto_zero [SemilatticeSup Œπ] [Countable Œπ]
    (hf : ‚àÄ n, StronglyMeasurable (f n)) (hg : StronglyMeasurable g) (hsm : MeasurableSet s)
    (hs : Œº s ‚â† ‚àû) (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí Tendsto (fun n => f n x) atTop (ùìù (g x))) (n : ‚Ñï) :
    Tendsto (fun j => Œº (s ‚à© notConvergentSeq f g n j)) atTop (ùìù 0) :=
  by
  cases isEmpty_or_nonempty Œπ
  ¬∑ have : (fun j => Œº (s ‚à© not_convergent_seq f g n j)) = fun j => 0 := by
      simp only [eq_iff_true_of_subsingleton]
    rw [this]
    exact tendsto_const_nhds
  rw [‚Üê measure_inter_not_convergent_seq_eq_zero hfg n, inter_Inter]
  refine'
    tendsto_measure_Inter (fun n => hsm.inter <| not_convergent_seq_measurable_set hf hg)
      (fun k l hkl => inter_subset_inter_right _ <| not_convergent_seq_antitone hkl)
      ‚ü®h.some, (lt_of_le_of_lt (measure_mono <| inter_subset_left _ _) (lt_top_iff_ne_top.2 hs)).Ne‚ü©
#align measure_theory.egorov.measure_not_convergent_seq_tendsto_zero MeasureTheory.Egorov.measure_notConvergentSeq_tendsto_zero
-/

variable [SemilatticeSup Œπ] [Nonempty Œπ] [Countable Œπ]

#print MeasureTheory.Egorov.exists_notConvergentSeq_lt /-
theorem exists_notConvergentSeq_lt (hŒµ : 0 < Œµ) (hf : ‚àÄ n, StronglyMeasurable (f n))
    (hg : StronglyMeasurable g) (hsm : MeasurableSet s) (hs : Œº s ‚â† ‚àû)
    (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí Tendsto (fun n => f n x) atTop (ùìù (g x))) (n : ‚Ñï) :
    ‚àÉ j : Œπ, Œº (s ‚à© notConvergentSeq f g n j) ‚â§ ENNReal.ofReal (Œµ * 2‚Åª¬π ^ n) :=
  by
  obtain ‚ü®N, hN‚ü© :=
    (ENNReal.tendsto_atTop ENNReal.zero_ne_top).1
      (measure_not_convergent_seq_tendsto_zero hf hg hsm hs hfg n) (ENNReal.ofReal (Œµ * 2‚Åª¬π ^ n)) _
  ¬∑ rw [zero_add] at hN
    exact ‚ü®N, (hN N le_rfl).2‚ü©
  ¬∑ rw [gt_iff_lt, ENNReal.ofReal_pos]
    exact mul_pos hŒµ (pow_pos (by norm_num) n)
#align measure_theory.egorov.exists_not_convergent_seq_lt MeasureTheory.Egorov.exists_notConvergentSeq_lt
-/

#print MeasureTheory.Egorov.notConvergentSeqLTIndex /-
/-- Given some `Œµ > 0`, `not_convergent_seq_lt_index` provides the index such that
`not_convergent_seq` (intersected with a set of finite measure) has measure less than
`Œµ * 2‚Åª¬π ^ n`.

This definition is useful for Egorov's theorem. -/
def notConvergentSeqLTIndex (hŒµ : 0 < Œµ) (hf : ‚àÄ n, StronglyMeasurable (f n))
    (hg : StronglyMeasurable g) (hsm : MeasurableSet s) (hs : Œº s ‚â† ‚àû)
    (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí Tendsto (fun n => f n x) atTop (ùìù (g x))) (n : ‚Ñï) : Œπ :=
  Classical.choose <| exists_notConvergentSeq_lt hŒµ hf hg hsm hs hfg n
#align measure_theory.egorov.not_convergent_seq_lt_index MeasureTheory.Egorov.notConvergentSeqLTIndex
-/

#print MeasureTheory.Egorov.notConvergentSeqLTIndex_spec /-
theorem notConvergentSeqLTIndex_spec (hŒµ : 0 < Œµ) (hf : ‚àÄ n, StronglyMeasurable (f n))
    (hg : StronglyMeasurable g) (hsm : MeasurableSet s) (hs : Œº s ‚â† ‚àû)
    (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí Tendsto (fun n => f n x) atTop (ùìù (g x))) (n : ‚Ñï) :
    Œº (s ‚à© notConvergentSeq f g n (notConvergentSeqLTIndex hŒµ hf hg hsm hs hfg n)) ‚â§
      ENNReal.ofReal (Œµ * 2‚Åª¬π ^ n) :=
  Classical.choose_spec <| exists_notConvergentSeq_lt hŒµ hf hg hsm hs hfg n
#align measure_theory.egorov.not_convergent_seq_lt_index_spec MeasureTheory.Egorov.notConvergentSeqLTIndex_spec
-/

#print MeasureTheory.Egorov.iUnionNotConvergentSeq /-
/-- Given some `Œµ > 0`, `Union_not_convergent_seq` is the union of `not_convergent_seq` with
specific indicies such that `Union_not_convergent_seq` has measure less equal than `Œµ`.

This definition is useful for Egorov's theorem. -/
def iUnionNotConvergentSeq (hŒµ : 0 < Œµ) (hf : ‚àÄ n, StronglyMeasurable (f n))
    (hg : StronglyMeasurable g) (hsm : MeasurableSet s) (hs : Œº s ‚â† ‚àû)
    (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí Tendsto (fun n => f n x) atTop (ùìù (g x))) : Set Œ± :=
  ‚ãÉ n, s ‚à© notConvergentSeq f g n (notConvergentSeqLTIndex (half_pos hŒµ) hf hg hsm hs hfg n)
#align measure_theory.egorov.Union_not_convergent_seq MeasureTheory.Egorov.iUnionNotConvergentSeq
-/

#print MeasureTheory.Egorov.iUnionNotConvergentSeq_measurableSet /-
theorem iUnionNotConvergentSeq_measurableSet (hŒµ : 0 < Œµ) (hf : ‚àÄ n, StronglyMeasurable (f n))
    (hg : StronglyMeasurable g) (hsm : MeasurableSet s) (hs : Œº s ‚â† ‚àû)
    (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí Tendsto (fun n => f n x) atTop (ùìù (g x))) :
    MeasurableSet <| iUnionNotConvergentSeq hŒµ hf hg hsm hs hfg :=
  MeasurableSet.iUnion fun n => hsm.inter <| notConvergentSeq_measurableSet hf hg
#align measure_theory.egorov.Union_not_convergent_seq_measurable_set MeasureTheory.Egorov.iUnionNotConvergentSeq_measurableSet
-/

#print MeasureTheory.Egorov.measure_iUnionNotConvergentSeq /-
theorem measure_iUnionNotConvergentSeq (hŒµ : 0 < Œµ) (hf : ‚àÄ n, StronglyMeasurable (f n))
    (hg : StronglyMeasurable g) (hsm : MeasurableSet s) (hs : Œº s ‚â† ‚àû)
    (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí Tendsto (fun n => f n x) atTop (ùìù (g x))) :
    Œº (iUnionNotConvergentSeq hŒµ hf hg hsm hs hfg) ‚â§ ENNReal.ofReal Œµ :=
  by
  refine'
    le_trans (measure_Union_le _)
      (le_trans
        (ENNReal.tsum_le_tsum <| not_convergent_seq_lt_index_spec (half_pos hŒµ) hf hg hsm hs hfg) _)
  simp_rw [ENNReal.ofReal_mul (half_pos hŒµ).le]
  rw [ENNReal.tsum_mul_left, ‚Üê ENNReal.ofReal_tsum_of_nonneg, inv_eq_one_div, tsum_geometric_two, ‚Üê
    ENNReal.ofReal_mul (half_pos hŒµ).le, div_mul_cancel‚ÇÄ Œµ two_ne_zero]
  ¬∑ exact le_rfl
  ¬∑ exact fun n => pow_nonneg (by norm_num) _
  ¬∑ rw [inv_eq_one_div]
    exact summable_geometric_two
#align measure_theory.egorov.measure_Union_not_convergent_seq MeasureTheory.Egorov.measure_iUnionNotConvergentSeq
-/

#print MeasureTheory.Egorov.iUnionNotConvergentSeq_subset /-
theorem iUnionNotConvergentSeq_subset (hŒµ : 0 < Œµ) (hf : ‚àÄ n, StronglyMeasurable (f n))
    (hg : StronglyMeasurable g) (hsm : MeasurableSet s) (hs : Œº s ‚â† ‚àû)
    (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí Tendsto (fun n => f n x) atTop (ùìù (g x))) :
    iUnionNotConvergentSeq hŒµ hf hg hsm hs hfg ‚äÜ s :=
  by
  rw [Union_not_convergent_seq, ‚Üê inter_Union]
  exact inter_subset_left _ _
#align measure_theory.egorov.Union_not_convergent_seq_subset MeasureTheory.Egorov.iUnionNotConvergentSeq_subset
-/

#print MeasureTheory.Egorov.tendstoUniformlyOn_diff_iUnionNotConvergentSeq /-
theorem tendstoUniformlyOn_diff_iUnionNotConvergentSeq (hŒµ : 0 < Œµ)
    (hf : ‚àÄ n, StronglyMeasurable (f n)) (hg : StronglyMeasurable g) (hsm : MeasurableSet s)
    (hs : Œº s ‚â† ‚àû) (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí Tendsto (fun n => f n x) atTop (ùìù (g x))) :
    TendstoUniformlyOn f g atTop (s \ Egorov.iUnionNotConvergentSeq hŒµ hf hg hsm hs hfg) :=
  by
  rw [Metric.tendstoUniformlyOn_iff]
  intro Œ¥ hŒ¥
  obtain ‚ü®N, hN‚ü© := exists_nat_one_div_lt hŒ¥
  rw [eventually_at_top]
  refine' ‚ü®egorov.not_convergent_seq_lt_index (half_pos hŒµ) hf hg hsm hs hfg N, fun n hn x hx => _‚ü©
  simp only [mem_diff, egorov.Union_not_convergent_seq, not_exists, mem_Union, mem_inter_iff,
    not_and, exists_and_left] at hx
  obtain ‚ü®hxs, hx‚ü© := hx
  specialize hx hxs N
  rw [egorov.mem_not_convergent_seq_iff] at hx
  push_neg at hx
  rw [dist_comm]
  exact lt_of_le_of_lt (hx n hn) hN
#align measure_theory.egorov.tendsto_uniformly_on_diff_Union_not_convergent_seq MeasureTheory.Egorov.tendstoUniformlyOn_diff_iUnionNotConvergentSeq
-/

end Egorov

variable [SemilatticeSup Œπ] [Nonempty Œπ] [Countable Œπ] {Œ≥ : Type _} [TopologicalSpace Œ≥]
  {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {g : Œ± ‚Üí Œ≤} {s : Set Œ±}

/- ././././Mathport/Syntax/Translate/Basic.lean:642:2: warning: expanding binder collection (t ¬´expr ‚äÜ ¬ª s) -/
#print MeasureTheory.tendstoUniformlyOn_of_ae_tendsto /-
/-- **Egorov's theorem**: If `f : Œπ ‚Üí Œ± ‚Üí Œ≤` is a sequence of strongly measurable functions that
converges to `g : Œ± ‚Üí Œ≤` almost everywhere on a measurable set `s` of finite measure,
then for all `Œµ > 0`, there exists a subset `t ‚äÜ s` such that `Œº t ‚â§ Œµ` and `f` converges to `g`
uniformly on `s \ t`. We require the index type `Œπ` to be countable, and usually `Œπ = ‚Ñï`.

In other words, a sequence of almost everywhere convergent functions converges uniformly except on
an arbitrarily small set. -/
theorem tendstoUniformlyOn_of_ae_tendsto (hf : ‚àÄ n, StronglyMeasurable (f n))
    (hg : StronglyMeasurable g) (hsm : MeasurableSet s) (hs : Œº s ‚â† ‚àû)
    (hfg : ‚àÄ·µê x ‚àÇŒº, x ‚àà s ‚Üí Tendsto (fun n => f n x) atTop (ùìù (g x))) {Œµ : ‚Ñù} (hŒµ : 0 < Œµ) :
    ‚àÉ (t : _) (_ : t ‚äÜ s),
      MeasurableSet t ‚àß Œº t ‚â§ ENNReal.ofReal Œµ ‚àß TendstoUniformlyOn f g atTop (s \ t) :=
  ‚ü®Egorov.iUnionNotConvergentSeq hŒµ hf hg hsm hs hfg,
    Egorov.iUnionNotConvergentSeq_subset hŒµ hf hg hsm hs hfg,
    Egorov.iUnionNotConvergentSeq_measurableSet hŒµ hf hg hsm hs hfg,
    Egorov.measure_iUnionNotConvergentSeq hŒµ hf hg hsm hs hfg,
    Egorov.tendstoUniformlyOn_diff_iUnionNotConvergentSeq hŒµ hf hg hsm hs hfg‚ü©
#align measure_theory.tendsto_uniformly_on_of_ae_tendsto MeasureTheory.tendstoUniformlyOn_of_ae_tendsto
-/

#print MeasureTheory.tendstoUniformlyOn_of_ae_tendsto' /-
/-- Egorov's theorem for finite measure spaces. -/
theorem tendstoUniformlyOn_of_ae_tendsto' [IsFiniteMeasure Œº] (hf : ‚àÄ n, StronglyMeasurable (f n))
    (hg : StronglyMeasurable g) (hfg : ‚àÄ·µê x ‚àÇŒº, Tendsto (fun n => f n x) atTop (ùìù (g x))) {Œµ : ‚Ñù}
    (hŒµ : 0 < Œµ) :
    ‚àÉ t, MeasurableSet t ‚àß Œº t ‚â§ ENNReal.ofReal Œµ ‚àß TendstoUniformlyOn f g atTop (t·∂ú) :=
  by
  obtain ‚ü®t, _, ht, htendsto‚ü© :=
    tendsto_uniformly_on_of_ae_tendsto hf hg MeasurableSet.univ (measure_ne_top Œº univ) _ hŒµ
  ¬∑ refine' ‚ü®_, ht, _‚ü©
    rwa [compl_eq_univ_diff]
  ¬∑ filter_upwards [hfg] with _ htendsto _ using htendsto
#align measure_theory.tendsto_uniformly_on_of_ae_tendsto' MeasureTheory.tendstoUniformlyOn_of_ae_tendsto'
-/

end MeasureTheory

