/-
Copyright (c) 2021 R√©my Degenne. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©my Degenne

! This file was ported from Lean 3 source module measure_theory.function.conditional_expectation.basic
! leanprover-community/mathlib commit 11bb0c9152e5d14278fb0ac5e0be6d50e2c8fa05
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Analysis.InnerProductSpace.Projection
import Mathbin.MeasureTheory.Function.L2Space
import Mathbin.MeasureTheory.Function.AeEqOfIntegral

/-! # Conditional expectation

We build the conditional expectation of an integrable function `f` with value in a Banach space
with respect to a measure `Œº` (defined on a measurable space structure `m0`) and a measurable space
structure `m` with `hm : m ‚â§ m0` (a sub-sigma-algebra). This is an `m`-strongly measurable
function `Œº[f|hm]` which is integrable and verifies `‚à´ x in s, Œº[f|hm] x ‚àÇŒº = ‚à´ x in s, f x ‚àÇŒº`
for all `m`-measurable sets `s`. It is unique as an element of `L¬π`.

The construction is done in four steps:
* Define the conditional expectation of an `L¬≤` function, as an element of `L¬≤`. This is the
  orthogonal projection on the subspace of almost everywhere `m`-measurable functions.
* Show that the conditional expectation of the indicator of a measurable set with finite measure
  is integrable and define a map `set Œ± ‚Üí (E ‚ÜíL[‚Ñù] (Œ± ‚Üí‚ÇÅ[Œº] E))` which to a set associates a linear
  map. That linear map sends `x ‚àà E` to the conditional expectation of the indicator of the set
  with value `x`.
* Extend that map to `condexp_L1_clm : (Œ± ‚Üí‚ÇÅ[Œº] E) ‚ÜíL[‚Ñù] (Œ± ‚Üí‚ÇÅ[Œº] E)`. This is done using the same
  construction as the Bochner integral (see the file `measure_theory/integral/set_to_L1`).
* Define the conditional expectation of a function `f : Œ± ‚Üí E`, which is an integrable function
  `Œ± ‚Üí E` equal to 0 if `f` is not integrable, and equal to an `m`-measurable representative of
  `condexp_L1_clm` applied to `[f]`, the equivalence class of `f` in `L¬π`.

## Main results

The conditional expectation and its properties

* `condexp (m : measurable_space Œ±) (Œº : measure Œ±) (f : Œ± ‚Üí E)`: conditional expectation of `f`
  with respect to `m`.
* `integrable_condexp` : `condexp` is integrable.
* `strongly_measurable_condexp` : `condexp` is `m`-strongly-measurable.
* `set_integral_condexp (hf : integrable f Œº) (hs : measurable_set[m] s)` : if `m ‚â§ m0` (the
  œÉ-algebra over which the measure is defined), then the conditional expectation verifies
  `‚à´ x in s, condexp m Œº f x ‚àÇŒº = ‚à´ x in s, f x ‚àÇŒº` for any `m`-measurable set `s`.

While `condexp` is function-valued, we also define `condexp_L1` with value in `L1` and a continuous
linear map `condexp_L1_clm` from `L1` to `L1`. `condexp` should be used in most cases.

Uniqueness of the conditional expectation

* `Lp.ae_eq_of_forall_set_integral_eq'`: two `Lp` functions verifying the equality of integrals
  defining the conditional expectation are equal.
* `ae_eq_of_forall_set_integral_eq_of_sigma_finite'`: two functions verifying the equality of
  integrals defining the conditional expectation are equal almost everywhere.
  Requires `[sigma_finite (Œº.trim hm)]`.
* `ae_eq_condexp_of_forall_set_integral_eq`: an a.e. `m`-measurable function which verifies the
  equality of integrals is a.e. equal to `condexp`.

## Notations

For a measure `Œº` defined on a measurable space structure `m0`, another measurable space structure
`m` with `hm : m ‚â§ m0` (a sub-œÉ-algebra) and a function `f`, we define the notation
* `Œº[f|m] = condexp m Œº f`.

## Implementation notes

Most of the results in this file are valid for a complete real normed space `F`.
However, some lemmas also use `ùïú : is_R_or_C`:
* `condexp_L2` is defined only for an `inner_product_space` for now, and we use `ùïú` for its field.
* results about scalar multiplication are stated not only for `‚Ñù` but also for `ùïú` if we happen to
  have `normed_space ùïú F`.

## Tags

conditional expectation, conditional expected value

-/


noncomputable section

open TopologicalSpace MeasureTheory.lp Filter ContinuousLinearMap

open Nnreal Ennreal TopologicalSpace BigOperators MeasureTheory

namespace MeasureTheory

/-- A function `f` verifies `ae_strongly_measurable' m f Œº` if it is `Œº`-a.e. equal to
an `m`-strongly measurable function. This is similar to `ae_strongly_measurable`, but the
`measurable_space` structures used for the measurability statement and for the measure are
different. -/
def AeStronglyMeasurable' {Œ± Œ≤} [TopologicalSpace Œ≤] (m : MeasurableSpace Œ±)
    {m0 : MeasurableSpace Œ±} (f : Œ± ‚Üí Œ≤) (Œº : Measure Œ±) : Prop :=
  ‚àÉ g : Œ± ‚Üí Œ≤, strongly_measurable[m] g ‚àß f =·µê[Œº] g
#align measure_theory.ae_strongly_measurable' MeasureTheory.AeStronglyMeasurable'

namespace AeStronglyMeasurable'

variable {Œ± Œ≤ ùïú : Type _} {m m0 : MeasurableSpace Œ±} {Œº : Measure Œ±} [TopologicalSpace Œ≤]
  {f g : Œ± ‚Üí Œ≤}

theorem congr (hf : AeStronglyMeasurable' m f Œº) (hfg : f =·µê[Œº] g) : AeStronglyMeasurable' m g Œº :=
  by 
  obtain ‚ü®f', hf'_meas, hff'‚ü© := hf
  exact ‚ü®f', hf'_meas, hfg.symm.trans hff'‚ü©
#align measure_theory.ae_strongly_measurable'.congr MeasureTheory.AeStronglyMeasurable'.congr

theorem add [Add Œ≤] [HasContinuousAdd Œ≤] (hf : AeStronglyMeasurable' m f Œº)
    (hg : AeStronglyMeasurable' m g Œº) : AeStronglyMeasurable' m (f + g) Œº := by
  rcases hf with ‚ü®f', h_f'_meas, hff'‚ü©
  rcases hg with ‚ü®g', h_g'_meas, hgg'‚ü©
  exact ‚ü®f' + g', h_f'_meas.add h_g'_meas, hff'.add hgg'‚ü©
#align measure_theory.ae_strongly_measurable'.add MeasureTheory.AeStronglyMeasurable'.add

theorem neg [AddGroup Œ≤] [TopologicalAddGroup Œ≤] {f : Œ± ‚Üí Œ≤} (hfm : AeStronglyMeasurable' m f Œº) :
    AeStronglyMeasurable' m (-f) Œº := by
  rcases hfm with ‚ü®f', hf'_meas, hf_ae‚ü©
  refine' ‚ü®-f', hf'_meas.neg, hf_ae.mono fun x hx => _‚ü©
  simp_rw [Pi.neg_apply]
  rw [hx]
#align measure_theory.ae_strongly_measurable'.neg MeasureTheory.AeStronglyMeasurable'.neg

theorem sub [AddGroup Œ≤] [TopologicalAddGroup Œ≤] {f g : Œ± ‚Üí Œ≤} (hfm : AeStronglyMeasurable' m f Œº)
    (hgm : AeStronglyMeasurable' m g Œº) : AeStronglyMeasurable' m (f - g) Œº := by
  rcases hfm with ‚ü®f', hf'_meas, hf_ae‚ü©
  rcases hgm with ‚ü®g', hg'_meas, hg_ae‚ü©
  refine' ‚ü®f' - g', hf'_meas.sub hg'_meas, hf_ae.mp (hg_ae.mono fun x hx1 hx2 => _)‚ü©
  simp_rw [Pi.sub_apply]
  rw [hx1, hx2]
#align measure_theory.ae_strongly_measurable'.sub MeasureTheory.AeStronglyMeasurable'.sub

theorem constSmul [HasSmul ùïú Œ≤] [HasContinuousConstSmul ùïú Œ≤] (c : ùïú)
    (hf : AeStronglyMeasurable' m f Œº) : AeStronglyMeasurable' m (c ‚Ä¢ f) Œº := by
  rcases hf with ‚ü®f', h_f'_meas, hff'‚ü©
  refine' ‚ü®c ‚Ä¢ f', h_f'_meas.const_smul c, _‚ü©
  exact eventually_eq.fun_comp hff' fun x => c ‚Ä¢ x
#align
  measure_theory.ae_strongly_measurable'.const_smul MeasureTheory.AeStronglyMeasurable'.constSmul

theorem constInner {ùïú Œ≤} [IsROrC ùïú] [InnerProductSpace ùïú Œ≤] {f : Œ± ‚Üí Œ≤}
    (hfm : AeStronglyMeasurable' m f Œº) (c : Œ≤) :
    AeStronglyMeasurable' m (fun x => (inner c (f x) : ùïú)) Œº := by
  rcases hfm with ‚ü®f', hf'_meas, hf_ae‚ü©
  refine'
    ‚ü®fun x => (inner c (f' x) : ùïú), (@strongly_measurable_const _ _ m _ _).inner hf'_meas,
      hf_ae.mono fun x hx => _‚ü©
  dsimp only
  rw [hx]
#align
  measure_theory.ae_strongly_measurable'.const_inner MeasureTheory.AeStronglyMeasurable'.constInner

/-- An `m`-strongly measurable function almost everywhere equal to `f`. -/
def mk (f : Œ± ‚Üí Œ≤) (hfm : AeStronglyMeasurable' m f Œº) : Œ± ‚Üí Œ≤ :=
  hfm.some
#align measure_theory.ae_strongly_measurable'.mk MeasureTheory.AeStronglyMeasurable'.mk

theorem stronglyMeasurableMk {f : Œ± ‚Üí Œ≤} (hfm : AeStronglyMeasurable' m f Œº) :
    strongly_measurable[m] (hfm.mk f) :=
  hfm.some_spec.1
#align
  measure_theory.ae_strongly_measurable'.strongly_measurable_mk MeasureTheory.AeStronglyMeasurable'.stronglyMeasurableMk

theorem ae_eq_mk {f : Œ± ‚Üí Œ≤} (hfm : AeStronglyMeasurable' m f Œº) : f =·µê[Œº] hfm.mk f :=
  hfm.some_spec.2
#align measure_theory.ae_strongly_measurable'.ae_eq_mk MeasureTheory.AeStronglyMeasurable'.ae_eq_mk

theorem continuousComp {Œ≥} [TopologicalSpace Œ≥] {f : Œ± ‚Üí Œ≤} {g : Œ≤ ‚Üí Œ≥} (hg : Continuous g)
    (hf : AeStronglyMeasurable' m f Œº) : AeStronglyMeasurable' m (g ‚àò f) Œº :=
  ‚ü®fun x => g (hf.mk _ x),
    @Continuous.compStronglyMeasurable _ _ _ m _ _ _ _ hg hf.stronglyMeasurableMk,
    hf.ae_eq_mk.mono fun x hx => by rw [Function.comp_apply, hx]‚ü©
#align
  measure_theory.ae_strongly_measurable'.continuous_comp MeasureTheory.AeStronglyMeasurable'.continuousComp

end AeStronglyMeasurable'

theorem aeStronglyMeasurable'OfAeStronglyMeasurable'Trim {Œ± Œ≤} {m m0 m0' : MeasurableSpace Œ±}
    [TopologicalSpace Œ≤] (hm0 : m0 ‚â§ m0') {Œº : Measure Œ±} {f : Œ± ‚Üí Œ≤}
    (hf : AeStronglyMeasurable' m f (Œº.trim hm0)) : AeStronglyMeasurable' m f Œº := by
  obtain ‚ü®g, hg_meas, hfg‚ü© := hf
  exact ‚ü®g, hg_meas, ae_eq_of_ae_eq_trim hfg‚ü©
#align
  measure_theory.ae_strongly_measurable'_of_ae_strongly_measurable'_trim MeasureTheory.aeStronglyMeasurable'OfAeStronglyMeasurable'Trim

theorem StronglyMeasurable.aeStronglyMeasurable' {Œ± Œ≤} {m m0 : MeasurableSpace Œ±}
    [TopologicalSpace Œ≤] {Œº : Measure Œ±} {f : Œ± ‚Üí Œ≤} (hf : strongly_measurable[m] f) :
    AeStronglyMeasurable' m f Œº :=
  ‚ü®f, hf, ae_eq_refl _‚ü©
#align
  measure_theory.strongly_measurable.ae_strongly_measurable' MeasureTheory.StronglyMeasurable.aeStronglyMeasurable'

theorem ae_eq_trim_iff_of_ae_strongly_measurable' {Œ± Œ≤} [TopologicalSpace Œ≤] [MetrizableSpace Œ≤]
    {m m0 : MeasurableSpace Œ±} {Œº : Measure Œ±} {f g : Œ± ‚Üí Œ≤} (hm : m ‚â§ m0)
    (hfm : AeStronglyMeasurable' m f Œº) (hgm : AeStronglyMeasurable' m g Œº) :
    hfm.mk f =·µê[Œº.trim hm] hgm.mk g ‚Üî f =·µê[Œº] g :=
  (ae_eq_trim_iff hm hfm.stronglyMeasurableMk hgm.stronglyMeasurableMk).trans
    ‚ü®fun h => hfm.ae_eq_mk.trans (h.trans hgm.ae_eq_mk.symm), fun h =>
      hfm.ae_eq_mk.symm.trans (h.trans hgm.ae_eq_mk)‚ü©
#align
  measure_theory.ae_eq_trim_iff_of_ae_strongly_measurable' MeasureTheory.ae_eq_trim_iff_of_ae_strongly_measurable'

/-- If the restriction to a set `s` of a œÉ-algebra `m` is included in the restriction to `s` of
another œÉ-algebra `m‚ÇÇ` (hypothesis `hs`), the set `s` is `m` measurable and a function `f` almost
everywhere supported on `s` is `m`-ae-strongly-measurable, then `f` is also
`m‚ÇÇ`-ae-strongly-measurable. -/
theorem AeStronglyMeasurable'.aeStronglyMeasurable'OfMeasurableSpaceLeOn {Œ± E}
    {m m‚ÇÇ m0 : MeasurableSpace Œ±} {Œº : Measure Œ±} [TopologicalSpace E] [Zero E] (hm : m ‚â§ m0)
    {s : Set Œ±} {f : Œ± ‚Üí E} (hs_m : measurable_set[m] s)
    (hs : ‚àÄ t, measurable_set[m] (s ‚à© t) ‚Üí measurable_set[m‚ÇÇ] (s ‚à© t))
    (hf : AeStronglyMeasurable' m f Œº) (hf_zero : f =·µê[Œº.restrict (s·∂ú)] 0) :
    AeStronglyMeasurable' m‚ÇÇ f Œº := by 
  let f' := hf.mk f
  have h_ind_eq : s.indicator (hf.mk f) =·µê[Œº] f := by
    refine'
      Filter.EventuallyEq.trans _ (indicator_ae_eq_of_restrict_compl_ae_eq_zero (hm _ hs_m) hf_zero)
    filter_upwards [hf.ae_eq_mk] with x hx
    by_cases hxs : x ‚àà s
    ¬∑ simp [hxs, hx]
    ¬∑ simp [hxs]
  suffices : strongly_measurable[m‚ÇÇ] (s.indicator (hf.mk f))
  exact ae_strongly_measurable'.congr this.ae_strongly_measurable' h_ind_eq
  have hf_ind : strongly_measurable[m] (s.indicator (hf.mk f)) :=
    hf.strongly_measurable_mk.indicator hs_m
  exact
    hf_ind.strongly_measurable_of_measurable_space_le_on hs_m hs fun x hxs =>
      Set.indicator_of_not_mem hxs _
#align
  measure_theory.ae_strongly_measurable'.ae_strongly_measurable'_of_measurable_space_le_on MeasureTheory.AeStronglyMeasurable'.aeStronglyMeasurable'OfMeasurableSpaceLeOn

variable {Œ± Œ≤ Œ≥ E E' F F' G G' H ùïú : Type _} {p : ‚Ñù‚â•0‚àû} [IsROrC ùïú]
  -- ùïú for ‚Ñù or ‚ÑÇ
  [TopologicalSpace Œ≤]
  -- Œ≤ for a generic topological space
  -- E for an inner product space
  [InnerProductSpace ùïú E]
  -- E' for an inner product space on which we compute integrals
  [InnerProductSpace ùïú E']
  [CompleteSpace E'] [NormedSpace ‚Ñù E']
  -- F for a Lp submodule
  [NormedAddCommGroup F]
  [NormedSpace ùïú F]
  -- F' for integrals on a Lp submodule
  [NormedAddCommGroup F']
  [NormedSpace ùïú F'] [NormedSpace ‚Ñù F'] [CompleteSpace F']
  -- G for a Lp add_subgroup
  [NormedAddCommGroup G]
  -- G' for integrals on a Lp add_subgroup
  [NormedAddCommGroup G']
  [NormedSpace ‚Ñù G'] [CompleteSpace G']
  -- H for a normed group (hypotheses of mem_‚Ñíp)
  [NormedAddCommGroup H]

section LpMeas

/-! ## The subset `Lp_meas` of `Lp` functions a.e. measurable with respect to a sub-sigma-algebra -/


variable (F)

/-- `Lp_meas_subgroup F m p Œº` is the subspace of `Lp F p Œº` containing functions `f` verifying
`ae_strongly_measurable' m f Œº`, i.e. functions which are `Œº`-a.e. equal to
an `m`-strongly measurable function. -/
def lpMeasSubgroup (m : MeasurableSpace Œ±) [MeasurableSpace Œ±] (p : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) :
    AddSubgroup
      (lp F p Œº) where 
  carrier := { f : lp F p Œº | AeStronglyMeasurable' m f Œº }
  zero_mem' := ‚ü®(0 : Œ± ‚Üí F), @stronglyMeasurableZero _ _ m _ _, lp.coe_fn_zero _ _ _‚ü©
  add_mem' f g hf hg := (hf.add hg).congr (lp.coe_fn_add f g).symm
  neg_mem' f hf := AeStronglyMeasurable'.congr hf.neg (lp.coe_fn_neg f).symm
#align measure_theory.Lp_meas_subgroup MeasureTheory.lpMeasSubgroup

variable (ùïú)

/-- `Lp_meas F ùïú m p Œº` is the subspace of `Lp F p Œº` containing functions `f` verifying
`ae_strongly_measurable' m f Œº`, i.e. functions which are `Œº`-a.e. equal to
an `m`-strongly measurable function. -/
def lpMeas (m : MeasurableSpace Œ±) [MeasurableSpace Œ±] (p : ‚Ñù‚â•0‚àû) (Œº : Measure Œ±) :
    Submodule ùïú
      (lp F p Œº) where 
  carrier := { f : lp F p Œº | AeStronglyMeasurable' m f Œº }
  zero_mem' := ‚ü®(0 : Œ± ‚Üí F), @stronglyMeasurableZero _ _ m _ _, lp.coe_fn_zero _ _ _‚ü©
  add_mem' f g hf hg := (hf.add hg).congr (lp.coe_fn_add f g).symm
  smul_mem' c f hf := (hf.const_smul c).congr (lp.coe_fn_smul c f).symm
#align measure_theory.Lp_meas MeasureTheory.lpMeas

variable {F ùïú}

variable ()

theorem mem_Lp_meas_subgroup_iff_ae_strongly_measurable' {m m0 : MeasurableSpace Œ±} {Œº : Measure Œ±}
    {f : lp F p Œº} : f ‚àà lpMeasSubgroup F m p Œº ‚Üî AeStronglyMeasurable' m f Œº := by
  rw [‚Üê AddSubgroup.mem_carrier, Lp_meas_subgroup, Set.mem_setOf_eq]
#align
  measure_theory.mem_Lp_meas_subgroup_iff_ae_strongly_measurable' MeasureTheory.mem_Lp_meas_subgroup_iff_ae_strongly_measurable'

theorem mem_Lp_meas_iff_ae_strongly_measurable' {m m0 : MeasurableSpace Œ±} {Œº : Measure Œ±}
    {f : lp F p Œº} : f ‚àà lpMeas F ùïú m p Œº ‚Üî AeStronglyMeasurable' m f Œº := by
  rw [‚Üê SetLike.mem_coe, ‚Üê Submodule.mem_carrier, Lp_meas, Set.mem_setOf_eq]
#align
  measure_theory.mem_Lp_meas_iff_ae_strongly_measurable' MeasureTheory.mem_Lp_meas_iff_ae_strongly_measurable'

theorem lpMeas.aeStronglyMeasurable' {m m0 : MeasurableSpace Œ±} {Œº : Measure Œ±}
    (f : lpMeas F ùïú m p Œº) : AeStronglyMeasurable' m f Œº :=
  mem_Lp_meas_iff_ae_strongly_measurable'.mp f.Mem
#align measure_theory.Lp_meas.ae_strongly_measurable' MeasureTheory.lpMeas.aeStronglyMeasurable'

theorem mem_Lp_meas_self {m0 : MeasurableSpace Œ±} (Œº : Measure Œ±) (f : lp F p Œº) :
    f ‚àà lpMeas F ùïú m0 p Œº :=
  mem_Lp_meas_iff_ae_strongly_measurable'.mpr (lp.aeStronglyMeasurable f)
#align measure_theory.mem_Lp_meas_self MeasureTheory.mem_Lp_meas_self

theorem Lp_meas_subgroup_coe {m m0 : MeasurableSpace Œ±} {Œº : Measure Œ±}
    {f : lpMeasSubgroup F m p Œº} : ‚áëf = (f : lp F p Œº) :=
  coe_fn_coe_base f
#align measure_theory.Lp_meas_subgroup_coe MeasureTheory.Lp_meas_subgroup_coe

theorem Lp_meas_coe {m m0 : MeasurableSpace Œ±} {Œº : Measure Œ±} {f : lpMeas F ùïú m p Œº} :
    ‚áëf = (f : lp F p Œº) :=
  coe_fn_coe_base f
#align measure_theory.Lp_meas_coe MeasureTheory.Lp_meas_coe

theorem mem_Lp_meas_indicator_const_Lp {m m0 : MeasurableSpace Œ±} (hm : m ‚â§ m0) {Œº : Measure Œ±}
    {s : Set Œ±} (hs : measurable_set[m] s) (hŒºs : Œº s ‚â† ‚àû) {c : F} :
    indicatorConstLp p (hm s hs) hŒºs c ‚àà lpMeas F ùïú m p Œº :=
  ‚ü®s.indicator fun x : Œ± => c, (@stronglyMeasurableConst _ _ m _ _).indicator hs,
    indicator_const_Lp_coe_fn‚ü©
#align measure_theory.mem_Lp_meas_indicator_const_Lp MeasureTheory.mem_Lp_meas_indicator_const_Lp

section CompleteSubspace

/-! ## The subspace `Lp_meas` is complete.

We define an `isometric` between `Lp_meas_subgroup` and the `Lp` space corresponding to the
measure `Œº.trim hm`. As a consequence, the completeness of `Lp` implies completeness of
`Lp_meas_subgroup` (and `Lp_meas`). -/


variable {Œπ : Type _} {m m0 : MeasurableSpace Œ±} {Œº : Measure Œ±}

/-- If `f` belongs to `Lp_meas_subgroup F m p Œº`, then the measurable function it is almost
everywhere equal to (given by `ae_measurable.mk`) belongs to `‚Ñíp` for the measure `Œº.trim hm`. -/
theorem mem‚ÑípTrimOfMemLpMeasSubgroup (hm : m ‚â§ m0) (f : lp F p Œº)
    (hf_meas : f ‚àà lpMeasSubgroup F m p Œº) :
    Mem‚Ñíp (mem_Lp_meas_subgroup_iff_ae_strongly_measurable'.mp hf_meas).some p (Œº.trim hm) := by
  have hf : ae_strongly_measurable' m f Œº :=
    mem_Lp_meas_subgroup_iff_ae_strongly_measurable'.mp hf_meas
  let g := hf.some
  obtain ‚ü®hg, hfg‚ü© := hf.some_spec
  change mem_‚Ñíp g p (Œº.trim hm)
  refine' ‚ü®hg.ae_strongly_measurable, _‚ü©
  have h_snorm_fg : snorm g p (Œº.trim hm) = snorm f p Œº := by
    rw [snorm_trim hm hg]
    exact snorm_congr_ae hfg.symm
  rw [h_snorm_fg]
  exact Lp.snorm_lt_top f
#align measure_theory.mem_‚Ñíp_trim_of_mem_Lp_meas_subgroup MeasureTheory.mem‚ÑípTrimOfMemLpMeasSubgroup

/-- If `f` belongs to `Lp` for the measure `Œº.trim hm`, then it belongs to the subgroup
`Lp_meas_subgroup F m p Œº`. -/
theorem mem_Lp_meas_subgroup_to_Lp_of_trim (hm : m ‚â§ m0) (f : lp F p (Œº.trim hm)) :
    (mem‚ÑípOfMem‚ÑípTrim hm (lp.mem‚Ñíp f)).toLp f ‚àà lpMeasSubgroup F m p Œº := by
  let hf_mem_‚Ñíp := mem_‚Ñíp_of_mem_‚Ñíp_trim hm (Lp.mem_‚Ñíp f)
  rw [mem_Lp_meas_subgroup_iff_ae_strongly_measurable']
  refine' ae_strongly_measurable'.congr _ (mem_‚Ñíp.coe_fn_to_Lp hf_mem_‚Ñíp).symm
  refine' ae_strongly_measurable'_of_ae_strongly_measurable'_trim hm _
  exact Lp.ae_strongly_measurable f
#align
  measure_theory.mem_Lp_meas_subgroup_to_Lp_of_trim MeasureTheory.mem_Lp_meas_subgroup_to_Lp_of_trim

variable (F p Œº)

/-- Map from `Lp_meas_subgroup` to `Lp F p (Œº.trim hm)`. -/
def lpMeasSubgroupToLpTrim (hm : m ‚â§ m0) (f : lpMeasSubgroup F m p Œº) : lp F p (Œº.trim hm) :=
  Mem‚Ñíp.toLp (mem_Lp_meas_subgroup_iff_ae_strongly_measurable'.mp f.Mem).some
    (mem‚ÑípTrimOfMemLpMeasSubgroup hm f f.Mem)
#align measure_theory.Lp_meas_subgroup_to_Lp_trim MeasureTheory.lpMeasSubgroupToLpTrim

variable (ùïú)

/-- Map from `Lp_meas` to `Lp F p (Œº.trim hm)`. -/
def lpMeasToLpTrim (hm : m ‚â§ m0) (f : lpMeas F ùïú m p Œº) : lp F p (Œº.trim hm) :=
  Mem‚Ñíp.toLp (mem_Lp_meas_iff_ae_strongly_measurable'.mp f.Mem).some
    (mem‚ÑípTrimOfMemLpMeasSubgroup hm f f.Mem)
#align measure_theory.Lp_meas_to_Lp_trim MeasureTheory.lpMeasToLpTrim

variable {ùïú}

/-- Map from `Lp F p (Œº.trim hm)` to `Lp_meas_subgroup`, inverse of
`Lp_meas_subgroup_to_Lp_trim`. -/
def lpTrimToLpMeasSubgroup (hm : m ‚â§ m0) (f : lp F p (Œº.trim hm)) : lpMeasSubgroup F m p Œº :=
  ‚ü®(mem‚ÑípOfMem‚ÑípTrim hm (lp.mem‚Ñíp f)).toLp f, mem_Lp_meas_subgroup_to_Lp_of_trim hm f‚ü©
#align measure_theory.Lp_trim_to_Lp_meas_subgroup MeasureTheory.lpTrimToLpMeasSubgroup

variable (ùïú)

/-- Map from `Lp F p (Œº.trim hm)` to `Lp_meas`, inverse of `Lp_meas_to_Lp_trim`. -/
def lpTrimToLpMeas (hm : m ‚â§ m0) (f : lp F p (Œº.trim hm)) : lpMeas F ùïú m p Œº :=
  ‚ü®(mem‚ÑípOfMem‚ÑípTrim hm (lp.mem‚Ñíp f)).toLp f, mem_Lp_meas_subgroup_to_Lp_of_trim hm f‚ü©
#align measure_theory.Lp_trim_to_Lp_meas MeasureTheory.lpTrimToLpMeas

variable {F ùïú p Œº}

theorem Lp_meas_subgroup_to_Lp_trim_ae_eq (hm : m ‚â§ m0) (f : lpMeasSubgroup F m p Œº) :
    lpMeasSubgroupToLpTrim F p Œº hm f =·µê[Œº] f :=
  (ae_eq_of_ae_eq_trim (Mem‚Ñíp.coe_fn_to_Lp (mem‚ÑípTrimOfMemLpMeasSubgroup hm (‚Üëf) f.Mem))).trans
    (mem_Lp_meas_subgroup_iff_ae_strongly_measurable'.mp f.Mem).some_spec.2.symm
#align
  measure_theory.Lp_meas_subgroup_to_Lp_trim_ae_eq MeasureTheory.Lp_meas_subgroup_to_Lp_trim_ae_eq

theorem Lp_trim_to_Lp_meas_subgroup_ae_eq (hm : m ‚â§ m0) (f : lp F p (Œº.trim hm)) :
    lpTrimToLpMeasSubgroup F p Œº hm f =·µê[Œº] f :=
  Mem‚Ñíp.coe_fn_to_Lp _
#align
  measure_theory.Lp_trim_to_Lp_meas_subgroup_ae_eq MeasureTheory.Lp_trim_to_Lp_meas_subgroup_ae_eq

theorem Lp_meas_to_Lp_trim_ae_eq (hm : m ‚â§ m0) (f : lpMeas F ùïú m p Œº) :
    lpMeasToLpTrim F ùïú p Œº hm f =·µê[Œº] f :=
  (ae_eq_of_ae_eq_trim (Mem‚Ñíp.coe_fn_to_Lp (mem‚ÑípTrimOfMemLpMeasSubgroup hm (‚Üëf) f.Mem))).trans
    (mem_Lp_meas_subgroup_iff_ae_strongly_measurable'.mp f.Mem).some_spec.2.symm
#align measure_theory.Lp_meas_to_Lp_trim_ae_eq MeasureTheory.Lp_meas_to_Lp_trim_ae_eq

theorem Lp_trim_to_Lp_meas_ae_eq (hm : m ‚â§ m0) (f : lp F p (Œº.trim hm)) :
    lpTrimToLpMeas F ùïú p Œº hm f =·µê[Œº] f :=
  Mem‚Ñíp.coe_fn_to_Lp _
#align measure_theory.Lp_trim_to_Lp_meas_ae_eq MeasureTheory.Lp_trim_to_Lp_meas_ae_eq

/-- `Lp_trim_to_Lp_meas_subgroup` is a right inverse of `Lp_meas_subgroup_to_Lp_trim`. -/
theorem Lp_meas_subgroup_to_Lp_trim_right_inv (hm : m ‚â§ m0) :
    Function.RightInverse (lpTrimToLpMeasSubgroup F p Œº hm) (lpMeasSubgroupToLpTrim F p Œº hm) := by
  intro f
  ext1
  refine'
    ae_eq_trim_of_strongly_measurable hm (Lp.strongly_measurable _) (Lp.strongly_measurable _) _
  exact (Lp_meas_subgroup_to_Lp_trim_ae_eq hm _).trans (Lp_trim_to_Lp_meas_subgroup_ae_eq hm _)
#align
  measure_theory.Lp_meas_subgroup_to_Lp_trim_right_inv MeasureTheory.Lp_meas_subgroup_to_Lp_trim_right_inv

/-- `Lp_trim_to_Lp_meas_subgroup` is a left inverse of `Lp_meas_subgroup_to_Lp_trim`. -/
theorem Lp_meas_subgroup_to_Lp_trim_left_inv (hm : m ‚â§ m0) :
    Function.LeftInverse (lpTrimToLpMeasSubgroup F p Œº hm) (lpMeasSubgroupToLpTrim F p Œº hm) := by
  intro f
  ext1
  ext1
  rw [‚Üê Lp_meas_subgroup_coe]
  exact (Lp_trim_to_Lp_meas_subgroup_ae_eq hm _).trans (Lp_meas_subgroup_to_Lp_trim_ae_eq hm _)
#align
  measure_theory.Lp_meas_subgroup_to_Lp_trim_left_inv MeasureTheory.Lp_meas_subgroup_to_Lp_trim_left_inv

theorem Lp_meas_subgroup_to_Lp_trim_add (hm : m ‚â§ m0) (f g : lpMeasSubgroup F m p Œº) :
    lpMeasSubgroupToLpTrim F p Œº hm (f + g) =
      lpMeasSubgroupToLpTrim F p Œº hm f + lpMeasSubgroupToLpTrim F p Œº hm g :=
  by 
  ext1
  refine' eventually_eq.trans _ (Lp.coe_fn_add _ _).symm
  refine' ae_eq_trim_of_strongly_measurable hm (Lp.strongly_measurable _) _ _
  ¬∑ exact (Lp.strongly_measurable _).add (Lp.strongly_measurable _)
  refine' (Lp_meas_subgroup_to_Lp_trim_ae_eq hm _).trans _
  refine'
    eventually_eq.trans _
      (eventually_eq.add (Lp_meas_subgroup_to_Lp_trim_ae_eq hm f).symm
        (Lp_meas_subgroup_to_Lp_trim_ae_eq hm g).symm)
  refine' (Lp.coe_fn_add _ _).trans _
  simp_rw [Lp_meas_subgroup_coe]
  exact eventually_of_forall fun x => by rfl
#align measure_theory.Lp_meas_subgroup_to_Lp_trim_add MeasureTheory.Lp_meas_subgroup_to_Lp_trim_add

theorem Lp_meas_subgroup_to_Lp_trim_neg (hm : m ‚â§ m0) (f : lpMeasSubgroup F m p Œº) :
    lpMeasSubgroupToLpTrim F p Œº hm (-f) = -lpMeasSubgroupToLpTrim F p Œº hm f := by
  ext1
  refine' eventually_eq.trans _ (Lp.coe_fn_neg _).symm
  refine' ae_eq_trim_of_strongly_measurable hm (Lp.strongly_measurable _) _ _
  ¬∑ exact @strongly_measurable.neg _ _ _ m _ _ _ (Lp.strongly_measurable _)
  refine' (Lp_meas_subgroup_to_Lp_trim_ae_eq hm _).trans _
  refine' eventually_eq.trans _ (eventually_eq.neg (Lp_meas_subgroup_to_Lp_trim_ae_eq hm f).symm)
  refine' (Lp.coe_fn_neg _).trans _
  simp_rw [Lp_meas_subgroup_coe]
  exact eventually_of_forall fun x => by rfl
#align measure_theory.Lp_meas_subgroup_to_Lp_trim_neg MeasureTheory.Lp_meas_subgroup_to_Lp_trim_neg

theorem Lp_meas_subgroup_to_Lp_trim_sub (hm : m ‚â§ m0) (f g : lpMeasSubgroup F m p Œº) :
    lpMeasSubgroupToLpTrim F p Œº hm (f - g) =
      lpMeasSubgroupToLpTrim F p Œº hm f - lpMeasSubgroupToLpTrim F p Œº hm g :=
  by
  rw [sub_eq_add_neg, sub_eq_add_neg, Lp_meas_subgroup_to_Lp_trim_add,
    Lp_meas_subgroup_to_Lp_trim_neg]
#align measure_theory.Lp_meas_subgroup_to_Lp_trim_sub MeasureTheory.Lp_meas_subgroup_to_Lp_trim_sub

theorem Lp_meas_to_Lp_trim_smul (hm : m ‚â§ m0) (c : ùïú) (f : lpMeas F ùïú m p Œº) :
    lpMeasToLpTrim F ùïú p Œº hm (c ‚Ä¢ f) = c ‚Ä¢ lpMeasToLpTrim F ùïú p Œº hm f := by
  ext1
  refine' eventually_eq.trans _ (Lp.coe_fn_smul _ _).symm
  refine' ae_eq_trim_of_strongly_measurable hm (Lp.strongly_measurable _) _ _
  ¬∑ exact (Lp.strongly_measurable _).const_smul c
  refine' (Lp_meas_to_Lp_trim_ae_eq hm _).trans _
  refine' (Lp.coe_fn_smul _ _).trans _
  refine' (Lp_meas_to_Lp_trim_ae_eq hm f).mono fun x hx => _
  rw [Pi.smul_apply, Pi.smul_apply, hx]
  rfl
#align measure_theory.Lp_meas_to_Lp_trim_smul MeasureTheory.Lp_meas_to_Lp_trim_smul

/-- `Lp_meas_subgroup_to_Lp_trim` preserves the norm. -/
theorem Lp_meas_subgroup_to_Lp_trim_norm_map [hp : Fact (1 ‚â§ p)] (hm : m ‚â§ m0)
    (f : lpMeasSubgroup F m p Œº) : ‚ÄñlpMeasSubgroupToLpTrim F p Œº hm f‚Äñ = ‚Äñf‚Äñ := by
  rw [Lp.norm_def, snorm_trim hm (Lp.strongly_measurable _),
    snorm_congr_ae (Lp_meas_subgroup_to_Lp_trim_ae_eq hm _), Lp_meas_subgroup_coe, ‚Üê Lp.norm_def]
  congr
#align
  measure_theory.Lp_meas_subgroup_to_Lp_trim_norm_map MeasureTheory.Lp_meas_subgroup_to_Lp_trim_norm_map

theorem isometryLpMeasSubgroupToLpTrim [hp : Fact (1 ‚â§ p)] (hm : m ‚â§ m0) :
    Isometry (lpMeasSubgroupToLpTrim F p Œº hm) :=
  Isometry.ofDistEq fun f g => by
    rw [dist_eq_norm, ‚Üê Lp_meas_subgroup_to_Lp_trim_sub, Lp_meas_subgroup_to_Lp_trim_norm_map,
      dist_eq_norm]
#align
  measure_theory.isometry_Lp_meas_subgroup_to_Lp_trim MeasureTheory.isometryLpMeasSubgroupToLpTrim

variable (F p Œº)

/-- `Lp_meas_subgroup` and `Lp F p (Œº.trim hm)` are isometric. -/
def lpMeasSubgroupToLpTrimIso [hp : Fact (1 ‚â§ p)] (hm : m ‚â§ m0) :
    lpMeasSubgroup F m p Œº ‚âÉ·µ¢
      lp F p (Œº.trim hm) where 
  toFun := lpMeasSubgroupToLpTrim F p Œº hm
  invFun := lpTrimToLpMeasSubgroup F p Œº hm
  left_inv := Lp_meas_subgroup_to_Lp_trim_left_inv hm
  right_inv := Lp_meas_subgroup_to_Lp_trim_right_inv hm
  isometryToFun := isometryLpMeasSubgroupToLpTrim hm
#align measure_theory.Lp_meas_subgroup_to_Lp_trim_iso MeasureTheory.lpMeasSubgroupToLpTrimIso

variable (ùïú)

/-- `Lp_meas_subgroup` and `Lp_meas` are isometric. -/
def lpMeasSubgroupToLpMeasIso [hp : Fact (1 ‚â§ p)] : lpMeasSubgroup F m p Œº ‚âÉ·µ¢ lpMeas F ùïú m p Œº :=
  Isometric.refl (lpMeasSubgroup F m p Œº)
#align measure_theory.Lp_meas_subgroup_to_Lp_meas_iso MeasureTheory.lpMeasSubgroupToLpMeasIso

/-- `Lp_meas` and `Lp F p (Œº.trim hm)` are isometric, with a linear equivalence. -/
def lpMeasToLpTrimLie [hp : Fact (1 ‚â§ p)] (hm : m ‚â§ m0) :
    lpMeas F ùïú m p Œº ‚âÉ‚Çó·µ¢[ùïú]
      lp F p (Œº.trim hm) where 
  toFun := lpMeasToLpTrim F ùïú p Œº hm
  invFun := lpTrimToLpMeas F ùïú p Œº hm
  left_inv := Lp_meas_subgroup_to_Lp_trim_left_inv hm
  right_inv := Lp_meas_subgroup_to_Lp_trim_right_inv hm
  map_add' := Lp_meas_subgroup_to_Lp_trim_add hm
  map_smul' := Lp_meas_to_Lp_trim_smul hm
  norm_map' := Lp_meas_subgroup_to_Lp_trim_norm_map hm
#align measure_theory.Lp_meas_to_Lp_trim_lie MeasureTheory.lpMeasToLpTrimLie

variable {F ùïú p Œº}

instance [hm : Fact (m ‚â§ m0)] [CompleteSpace F] [hp : Fact (1 ‚â§ p)] :
    CompleteSpace (lpMeasSubgroup F m p Œº) := by
  rw [(Lp_meas_subgroup_to_Lp_trim_iso F p Œº hm.elim).complete_space_iff]
  infer_instance

instance [hm : Fact (m ‚â§ m0)] [CompleteSpace F] [hp : Fact (1 ‚â§ p)] :
    CompleteSpace (lpMeas F ùïú m p Œº) := by
  rw [(Lp_meas_subgroup_to_Lp_meas_iso F ùïú p Œº).symm.complete_space_iff]
  infer_instance

theorem is_complete_ae_strongly_measurable' [hp : Fact (1 ‚â§ p)] [CompleteSpace F] (hm : m ‚â§ m0) :
    IsComplete { f : lp F p Œº | AeStronglyMeasurable' m f Œº } := by
  rw [‚Üê complete_space_coe_iff_is_complete]
  haveI : Fact (m ‚â§ m0) := ‚ü®hm‚ü©
  change CompleteSpace (Lp_meas_subgroup F m p Œº)
  infer_instance
#align
  measure_theory.is_complete_ae_strongly_measurable' MeasureTheory.is_complete_ae_strongly_measurable'

theorem is_closed_ae_strongly_measurable' [hp : Fact (1 ‚â§ p)] [CompleteSpace F] (hm : m ‚â§ m0) :
    IsClosed { f : lp F p Œº | AeStronglyMeasurable' m f Œº } :=
  IsComplete.is_closed (is_complete_ae_strongly_measurable' hm)
#align
  measure_theory.is_closed_ae_strongly_measurable' MeasureTheory.is_closed_ae_strongly_measurable'

end CompleteSubspace

section StronglyMeasurable

variable {m m0 : MeasurableSpace Œ±} {Œº : Measure Œ±}

/-- We do not get `ae_fin_strongly_measurable f (Œº.trim hm)`, since we don't have
`f =·µê[Œº.trim hm] Lp_meas_to_Lp_trim F ùïú p Œº hm f` but only the weaker
`f =·µê[Œº] Lp_meas_to_Lp_trim F ùïú p Œº hm f`. -/
theorem lpMeas.ae_fin_strongly_measurable' (hm : m ‚â§ m0) (f : lpMeas F ùïú m p Œº) (hp_ne_zero : p ‚â† 0)
    (hp_ne_top : p ‚â† ‚àû) : ‚àÉ g, FinStronglyMeasurable g (Œº.trim hm) ‚àß f =·µê[Œº] g :=
  ‚ü®lpMeasSubgroupToLpTrim F p Œº hm f, lp.finStronglyMeasurable _ hp_ne_zero hp_ne_top,
    (Lp_meas_subgroup_to_Lp_trim_ae_eq hm f).symm‚ü©
#align
  measure_theory.Lp_meas.ae_fin_strongly_measurable' MeasureTheory.lpMeas.ae_fin_strongly_measurable'

/-- When applying the inverse of `Lp_meas_to_Lp_trim_lie` (which takes a function in the Lp space of
the sub-sigma algebra and returns its version in the larger Lp space) to an indicator of the
sub-sigma-algebra, we obtain an indicator in the Lp space of the larger sigma-algebra. -/
theorem Lp_meas_to_Lp_trim_lie_symm_indicator [one_le_p : Fact (1 ‚â§ p)] [NormedSpace ‚Ñù F]
    {hm : m ‚â§ m0} {s : Set Œ±} {Œº : Measure Œ±} (hs : measurable_set[m] s) (hŒºs : Œº.trim hm s ‚â† ‚àû)
    (c : F) :
    ((lpMeasToLpTrimLie F ‚Ñù p Œº hm).symm (indicatorConstLp p hs hŒºs c) : lp F p Œº) =
      indicatorConstLp p (hm s hs) ((le_trim hm).trans_lt hŒºs.lt_top).Ne c :=
  by 
  ext1
  rw [‚Üê Lp_meas_coe]
  change
    Lp_trim_to_Lp_meas F ‚Ñù p Œº hm (indicator_const_Lp p hs hŒºs c) =·µê[Œº]
      (indicator_const_Lp p _ _ c : Œ± ‚Üí F)
  refine' (Lp_trim_to_Lp_meas_ae_eq hm _).trans _
  exact (ae_eq_of_ae_eq_trim indicator_const_Lp_coe_fn).trans indicator_const_Lp_coe_fn.symm
#align
  measure_theory.Lp_meas_to_Lp_trim_lie_symm_indicator MeasureTheory.Lp_meas_to_Lp_trim_lie_symm_indicator

theorem Lp_meas_to_Lp_trim_lie_symm_to_Lp [one_le_p : Fact (1 ‚â§ p)] [NormedSpace ‚Ñù F] (hm : m ‚â§ m0)
    (f : Œ± ‚Üí F) (hf : Mem‚Ñíp f p (Œº.trim hm)) :
    ((lpMeasToLpTrimLie F ‚Ñù p Œº hm).symm (hf.toLp f) : lp F p Œº) =
      (mem‚ÑípOfMem‚ÑípTrim hm hf).toLp f :=
  by 
  ext1
  rw [‚Üê Lp_meas_coe]
  refine' (Lp_trim_to_Lp_meas_ae_eq hm _).trans _
  exact (ae_eq_of_ae_eq_trim (mem_‚Ñíp.coe_fn_to_Lp hf)).trans (mem_‚Ñíp.coe_fn_to_Lp _).symm
#align
  measure_theory.Lp_meas_to_Lp_trim_lie_symm_to_Lp MeasureTheory.Lp_meas_to_Lp_trim_lie_symm_to_Lp

end StronglyMeasurable

end LpMeas

section Induction

variable {m m0 : MeasurableSpace Œ±} {Œº : Measure Œ±} [Fact (1 ‚â§ p)] [NormedSpace ‚Ñù F]

/-- Auxiliary lemma for `Lp.induction_strongly_measurable`. -/
@[elab_as_elim]
theorem lp.inductionStronglyMeasurableAux (hm : m ‚â§ m0) (hp_ne_top : p ‚â† ‚àû) (P : lp F p Œº ‚Üí Prop)
    (h_ind :
      ‚àÄ (c : F) {s : Set Œ±} (hs : measurable_set[m] s) (hŒºs : Œº s < ‚àû),
        P (lp.simpleFunc.indicatorConst p (hm s hs) hŒºs.Ne c))
    (h_add :
      ‚àÄ ‚¶Éf g‚¶Ñ,
        ‚àÄ hf : Mem‚Ñíp f p Œº,
          ‚àÄ hg : Mem‚Ñíp g p Œº,
            ‚àÄ hfm : AeStronglyMeasurable' m f Œº,
              ‚àÄ hgm : AeStronglyMeasurable' m g Œº,
                Disjoint (Function.support f) (Function.support g) ‚Üí
                  P (hf.toLp f) ‚Üí P (hg.toLp g) ‚Üí P (hf.toLp f + hg.toLp g))
    (h_closed : IsClosed { f : lpMeas F ‚Ñù m p Œº | P f }) :
    ‚àÄ f : lp F p Œº, AeStronglyMeasurable' m f Œº ‚Üí P f := by
  intro f hf
  let f' := (‚ü®f, hf‚ü© : Lp_meas F ‚Ñù m p Œº)
  let g := Lp_meas_to_Lp_trim_lie F ‚Ñù p Œº hm f'
  have hfg : f' = (Lp_meas_to_Lp_trim_lie F ‚Ñù p Œº hm).symm g := by
    simp only [LinearIsometryEquiv.symm_apply_apply]
  change P ‚Üëf'
  rw [hfg]
  refine'
    @Lp.induction Œ± F m _ p (Œº.trim hm) _ hp_ne_top
      (fun g => P ((Lp_meas_to_Lp_trim_lie F ‚Ñù p Œº hm).symm g)) _ _ _ g
  ¬∑ intro b t ht hŒºt
    rw [Lp.simple_func.coe_indicator_const, Lp_meas_to_Lp_trim_lie_symm_indicator ht hŒºt.ne b]
    have hŒºt' : Œº t < ‚àû := (le_trim hm).trans_lt hŒºt
    specialize h_ind b ht hŒºt'
    rwa [Lp.simple_func.coe_indicator_const] at h_ind
  ¬∑ intro f g hf hg h_disj hfP hgP
    rw [LinearIsometryEquiv.map_add]
    push_cast
    have h_eq :
      ‚àÄ (f : Œ± ‚Üí F) (hf : mem_‚Ñíp f p (Œº.trim hm)),
        ((Lp_meas_to_Lp_trim_lie F ‚Ñù p Œº hm).symm (mem_‚Ñíp.to_Lp f hf) : Lp F p Œº) =
          (mem_‚Ñíp_of_mem_‚Ñíp_trim hm hf).toLp f :=
      Lp_meas_to_Lp_trim_lie_symm_to_Lp hm
    rw [h_eq f hf] at hfP‚ä¢
    rw [h_eq g hg] at hgP‚ä¢
    exact
      h_add (mem_‚Ñíp_of_mem_‚Ñíp_trim hm hf) (mem_‚Ñíp_of_mem_‚Ñíp_trim hm hg)
        (ae_strongly_measurable'_of_ae_strongly_measurable'_trim hm hf.ae_strongly_measurable)
        (ae_strongly_measurable'_of_ae_strongly_measurable'_trim hm hg.ae_strongly_measurable)
        h_disj hfP hgP
  ¬∑ change IsClosed ((Lp_meas_to_Lp_trim_lie F ‚Ñù p Œº hm).symm ‚Åª¬π' { g : Lp_meas F ‚Ñù m p Œº | P ‚Üëg })
    exact IsClosed.preimage (LinearIsometryEquiv.continuous _) h_closed
#align
  measure_theory.Lp.induction_strongly_measurable_aux MeasureTheory.lp.inductionStronglyMeasurableAux

/-- To prove something for an `Lp` function a.e. strongly measurable with respect to a
sub-œÉ-algebra `m` in a normed space, it suffices to show that
* the property holds for (multiples of) characteristic functions which are measurable w.r.t. `m`;
* is closed under addition;
* the set of functions in `Lp` strongly measurable w.r.t. `m` for which the property holds is
  closed.
-/
@[elab_as_elim]
theorem lp.inductionStronglyMeasurable (hm : m ‚â§ m0) (hp_ne_top : p ‚â† ‚àû) (P : lp F p Œº ‚Üí Prop)
    (h_ind :
      ‚àÄ (c : F) {s : Set Œ±} (hs : measurable_set[m] s) (hŒºs : Œº s < ‚àû),
        P (lp.simpleFunc.indicatorConst p (hm s hs) hŒºs.Ne c))
    (h_add :
      ‚àÄ ‚¶Éf g‚¶Ñ,
        ‚àÄ hf : Mem‚Ñíp f p Œº,
          ‚àÄ hg : Mem‚Ñíp g p Œº,
            ‚àÄ hfm : strongly_measurable[m] f,
              ‚àÄ hgm : strongly_measurable[m] g,
                Disjoint (Function.support f) (Function.support g) ‚Üí
                  P (hf.toLp f) ‚Üí P (hg.toLp g) ‚Üí P (hf.toLp f + hg.toLp g))
    (h_closed : IsClosed { f : lpMeas F ‚Ñù m p Œº | P f }) :
    ‚àÄ f : lp F p Œº, AeStronglyMeasurable' m f Œº ‚Üí P f := by
  intro f hf
  suffices h_add_ae :
    ‚àÄ ‚¶Éf g‚¶Ñ,
      ‚àÄ hf : mem_‚Ñíp f p Œº,
        ‚àÄ hg : mem_‚Ñíp g p Œº,
          ‚àÄ hfm : ae_strongly_measurable' m f Œº,
            ‚àÄ hgm : ae_strongly_measurable' m g Œº,
              Disjoint (Function.support f) (Function.support g) ‚Üí
                P (hf.toLp f) ‚Üí P (hg.toLp g) ‚Üí P (hf.toLp f + hg.toLp g)
  exact Lp.induction_strongly_measurable_aux hm hp_ne_top P h_ind h_add_ae h_closed f hf
  intro f g hf hg hfm hgm h_disj hPf hPg
  let s_f : Set Œ± := Function.support (hfm.mk f)
  have hs_f : measurable_set[m] s_f := hfm.strongly_measurable_mk.measurable_set_support
  have hs_f_eq : s_f =·µê[Œº] Function.support f := hfm.ae_eq_mk.symm.support
  let s_g : Set Œ± := Function.support (hgm.mk g)
  have hs_g : measurable_set[m] s_g := hgm.strongly_measurable_mk.measurable_set_support
  have hs_g_eq : s_g =·µê[Œº] Function.support g := hgm.ae_eq_mk.symm.support
  have h_inter_empty : (s_f ‚à© s_g : Set Œ±) =·µê[Œº] (‚àÖ : Set Œ±) := by
    refine' (hs_f_eq.inter hs_g_eq).trans _
    suffices Function.support f ‚à© Function.support g = ‚àÖ by rw [this]
    exact set.disjoint_iff_inter_eq_empty.mp h_disj
  let f' := (s_f \ s_g).indicator (hfm.mk f)
  have hff' : f =·µê[Œº] f' := by
    have : s_f \ s_g =·µê[Œº] s_f := by
      rw [‚Üê Set.diff_inter_self_eq_diff, Set.inter_comm]
      refine' ((ae_eq_refl s_f).diff h_inter_empty).trans _
      rw [Set.diff_empty]
    refine' ((indicator_ae_eq_of_ae_eq_set this).trans _).symm
    rw [Set.indicator_support]
    exact hfm.ae_eq_mk.symm
  have hf'_meas : strongly_measurable[m] f' := hfm.strongly_measurable_mk.indicator (hs_f.diff hs_g)
  have hf'_Lp : mem_‚Ñíp f' p Œº := hf.ae_eq hff'
  let g' := (s_g \ s_f).indicator (hgm.mk g)
  have hgg' : g =·µê[Œº] g' := by
    have : s_g \ s_f =·µê[Œº] s_g := by
      rw [‚Üê Set.diff_inter_self_eq_diff]
      refine' ((ae_eq_refl s_g).diff h_inter_empty).trans _
      rw [Set.diff_empty]
    refine' ((indicator_ae_eq_of_ae_eq_set this).trans _).symm
    rw [Set.indicator_support]
    exact hgm.ae_eq_mk.symm
  have hg'_meas : strongly_measurable[m] g' := hgm.strongly_measurable_mk.indicator (hs_g.diff hs_f)
  have hg'_Lp : mem_‚Ñíp g' p Œº := hg.ae_eq hgg'
  have h_disj : Disjoint (Function.support f') (Function.support g') :=
    haveI : Disjoint (s_f \ s_g) (s_g \ s_f) := disjoint_sdiff_sdiff
    this.mono Set.support_indicator_subset Set.support_indicator_subset
  rw [‚Üê mem_‚Ñíp.to_Lp_congr hf'_Lp hf hff'.symm] at hPf‚ä¢
  rw [‚Üê mem_‚Ñíp.to_Lp_congr hg'_Lp hg hgg'.symm] at hPg‚ä¢
  exact h_add hf'_Lp hg'_Lp hf'_meas hg'_meas h_disj hPf hPg
#align measure_theory.Lp.induction_strongly_measurable MeasureTheory.lp.inductionStronglyMeasurable

/-- To prove something for an arbitrary `mem_‚Ñíp` function a.e. strongly measurable with respect
to a sub-œÉ-algebra `m` in a normed space, it suffices to show that
* the property holds for (multiples of) characteristic functions which are measurable w.r.t. `m`;
* is closed under addition;
* the set of functions in the `L·µñ` space strongly measurable w.r.t. `m` for which the property
  holds is closed.
* the property is closed under the almost-everywhere equal relation.
-/
@[elab_as_elim]
theorem Mem‚Ñíp.inductionStronglyMeasurable (hm : m ‚â§ m0) (hp_ne_top : p ‚â† ‚àû) (P : (Œ± ‚Üí F) ‚Üí Prop)
    (h_ind : ‚àÄ (c : F) ‚¶És‚¶Ñ, measurable_set[m] s ‚Üí Œº s < ‚àû ‚Üí P (s.indicator fun _ => c))
    (h_add :
      ‚àÄ ‚¶Éf g : Œ± ‚Üí F‚¶Ñ,
        Disjoint (Function.support f) (Function.support g) ‚Üí
          Mem‚Ñíp f p Œº ‚Üí
            Mem‚Ñíp g p Œº ‚Üí
              strongly_measurable[m] f ‚Üí strongly_measurable[m] g ‚Üí P f ‚Üí P g ‚Üí P (f + g))
    (h_closed : IsClosed { f : lpMeas F ‚Ñù m p Œº | P f })
    (h_ae : ‚àÄ ‚¶Éf g‚¶Ñ, f =·µê[Œº] g ‚Üí Mem‚Ñíp f p Œº ‚Üí P f ‚Üí P g) :
    ‚àÄ ‚¶Éf : Œ± ‚Üí F‚¶Ñ (hf : Mem‚Ñíp f p Œº) (hfm : AeStronglyMeasurable' m f Œº), P f := by
  intro f hf hfm
  let f_Lp := hf.to_Lp f
  have hfm_Lp : ae_strongly_measurable' m f_Lp Œº := hfm.congr hf.coe_fn_to_Lp.symm
  refine' h_ae hf.coe_fn_to_Lp (Lp.mem_‚Ñíp _) _
  change P f_Lp
  refine' Lp.induction_strongly_measurable hm hp_ne_top (fun f => P ‚áëf) _ _ h_closed f_Lp hfm_Lp
  ¬∑ intro c s hs hŒºs
    rw [Lp.simple_func.coe_indicator_const]
    refine' h_ae indicator_const_Lp_coe_fn.symm _ (h_ind c hs hŒºs)
    exact mem_‚Ñíp_indicator_const p (hm s hs) c (Or.inr hŒºs.ne)
  ¬∑ intro f g hf_mem hg_mem hfm hgm h_disj hfP hgP
    have hfP' : P f := h_ae hf_mem.coe_fn_to_Lp (Lp.mem_‚Ñíp _) hfP
    have hgP' : P g := h_ae hg_mem.coe_fn_to_Lp (Lp.mem_‚Ñíp _) hgP
    specialize h_add h_disj hf_mem hg_mem hfm hgm hfP' hgP'
    refine' h_ae _ (hf_mem.add hg_mem) h_add
    exact (hf_mem.coe_fn_to_Lp.symm.add hg_mem.coe_fn_to_Lp.symm).trans (Lp.coe_fn_add _ _).symm
#align
  measure_theory.mem_‚Ñíp.induction_strongly_measurable MeasureTheory.Mem‚Ñíp.inductionStronglyMeasurable

end Induction

section UniquenessOfConditionalExpectation

/-! ## Uniqueness of the conditional expectation -/


variable {m m0 : MeasurableSpace Œ±} {Œº : Measure Œ±}

theorem lpMeas.ae_eq_zero_of_forall_set_integral_eq_zero (hm : m ‚â§ m0) (f : lpMeas E' ùïú m p Œº)
    (hp_ne_zero : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû)
    (hf_int_finite : ‚àÄ s, measurable_set[m] s ‚Üí Œº s < ‚àû ‚Üí IntegrableOn f s Œº)
    (hf_zero : ‚àÄ s : Set Œ±, measurable_set[m] s ‚Üí Œº s < ‚àû ‚Üí (‚à´ x in s, f x ‚àÇŒº) = 0) : f =·µê[Œº] 0 :=
  by 
  obtain ‚ü®g, hg_sm, hfg‚ü© := Lp_meas.ae_fin_strongly_measurable' hm f hp_ne_zero hp_ne_top
  refine' hfg.trans _
  refine' ae_eq_zero_of_forall_set_integral_eq_of_fin_strongly_measurable_trim hm _ _ hg_sm
  ¬∑ intro s hs hŒºs
    have hfg_restrict : f =·µê[Œº.restrict s] g := ae_restrict_of_ae hfg
    rw [integrable_on, integrable_congr hfg_restrict.symm]
    exact hf_int_finite s hs hŒºs
  ¬∑ intro s hs hŒºs
    have hfg_restrict : f =·µê[Œº.restrict s] g := ae_restrict_of_ae hfg
    rw [integral_congr_ae hfg_restrict.symm]
    exact hf_zero s hs hŒºs
#align
  measure_theory.Lp_meas.ae_eq_zero_of_forall_set_integral_eq_zero MeasureTheory.lpMeas.ae_eq_zero_of_forall_set_integral_eq_zero

include ùïú

theorem lp.ae_eq_zero_of_forall_set_integral_eq_zero' (hm : m ‚â§ m0) (f : lp E' p Œº)
    (hp_ne_zero : p ‚â† 0) (hp_ne_top : p ‚â† ‚àû)
    (hf_int_finite : ‚àÄ s, measurable_set[m] s ‚Üí Œº s < ‚àû ‚Üí IntegrableOn f s Œº)
    (hf_zero : ‚àÄ s : Set Œ±, measurable_set[m] s ‚Üí Œº s < ‚àû ‚Üí (‚à´ x in s, f x ‚àÇŒº) = 0)
    (hf_meas : AeStronglyMeasurable' m f Œº) : f =·µê[Œº] 0 := by
  let f_meas : Lp_meas E' ùïú m p Œº := ‚ü®f, hf_meas‚ü©
  have hf_f_meas : f =·µê[Œº] f_meas := by simp only [coe_fn_coe_base', Subtype.coe_mk]
  refine' hf_f_meas.trans _
  refine' Lp_meas.ae_eq_zero_of_forall_set_integral_eq_zero hm f_meas hp_ne_zero hp_ne_top _ _
  ¬∑ intro s hs hŒºs
    have hfg_restrict : f =·µê[Œº.restrict s] f_meas := ae_restrict_of_ae hf_f_meas
    rw [integrable_on, integrable_congr hfg_restrict.symm]
    exact hf_int_finite s hs hŒºs
  ¬∑ intro s hs hŒºs
    have hfg_restrict : f =·µê[Œº.restrict s] f_meas := ae_restrict_of_ae hf_f_meas
    rw [integral_congr_ae hfg_restrict.symm]
    exact hf_zero s hs hŒºs
#align
  measure_theory.Lp.ae_eq_zero_of_forall_set_integral_eq_zero' MeasureTheory.lp.ae_eq_zero_of_forall_set_integral_eq_zero'

/-- **Uniqueness of the conditional expectation** -/
theorem lp.ae_eq_of_forall_set_integral_eq' (hm : m ‚â§ m0) (f g : lp E' p Œº) (hp_ne_zero : p ‚â† 0)
    (hp_ne_top : p ‚â† ‚àû) (hf_int_finite : ‚àÄ s, measurable_set[m] s ‚Üí Œº s < ‚àû ‚Üí IntegrableOn f s Œº)
    (hg_int_finite : ‚àÄ s, measurable_set[m] s ‚Üí Œº s < ‚àû ‚Üí IntegrableOn g s Œº)
    (hfg : ‚àÄ s : Set Œ±, measurable_set[m] s ‚Üí Œº s < ‚àû ‚Üí (‚à´ x in s, f x ‚àÇŒº) = ‚à´ x in s, g x ‚àÇŒº)
    (hf_meas : AeStronglyMeasurable' m f Œº) (hg_meas : AeStronglyMeasurable' m g Œº) : f =·µê[Œº] g :=
  by 
  suffices h_sub : ‚áë(f - g) =·µê[Œº] 0
  ¬∑ rw [‚Üê sub_ae_eq_zero]
    exact (Lp.coe_fn_sub f g).symm.trans h_sub
  have hfg' : ‚àÄ s : Set Œ±, measurable_set[m] s ‚Üí Œº s < ‚àû ‚Üí (‚à´ x in s, (f - g) x ‚àÇŒº) = 0 := by
    intro s hs hŒºs
    rw [integral_congr_ae (ae_restrict_of_ae (Lp.coe_fn_sub f g))]
    rw [integral_sub' (hf_int_finite s hs hŒºs) (hg_int_finite s hs hŒºs)]
    exact sub_eq_zero.mpr (hfg s hs hŒºs)
  have hfg_int : ‚àÄ s, measurable_set[m] s ‚Üí Œº s < ‚àû ‚Üí integrable_on (‚áë(f - g)) s Œº := by
    intro s hs hŒºs
    rw [integrable_on, integrable_congr (ae_restrict_of_ae (Lp.coe_fn_sub f g))]
    exact (hf_int_finite s hs hŒºs).sub (hg_int_finite s hs hŒºs)
  have hfg_meas : ae_strongly_measurable' m (‚áë(f - g)) Œº :=
    ae_strongly_measurable'.congr (hf_meas.sub hg_meas) (Lp.coe_fn_sub f g).symm
  exact
    Lp.ae_eq_zero_of_forall_set_integral_eq_zero' hm (f - g) hp_ne_zero hp_ne_top hfg_int hfg'
      hfg_meas
#align
  measure_theory.Lp.ae_eq_of_forall_set_integral_eq' MeasureTheory.lp.ae_eq_of_forall_set_integral_eq'

omit ùïú

theorem ae_eq_of_forall_set_integral_eq_of_sigma_finite' (hm : m ‚â§ m0) [SigmaFinite (Œº.trim hm)]
    {f g : Œ± ‚Üí F'} (hf_int_finite : ‚àÄ s, measurable_set[m] s ‚Üí Œº s < ‚àû ‚Üí IntegrableOn f s Œº)
    (hg_int_finite : ‚àÄ s, measurable_set[m] s ‚Üí Œº s < ‚àû ‚Üí IntegrableOn g s Œº)
    (hfg_eq : ‚àÄ s : Set Œ±, measurable_set[m] s ‚Üí Œº s < ‚àû ‚Üí (‚à´ x in s, f x ‚àÇŒº) = ‚à´ x in s, g x ‚àÇŒº)
    (hfm : AeStronglyMeasurable' m f Œº) (hgm : AeStronglyMeasurable' m g Œº) : f =·µê[Œº] g := by
  rw [‚Üê ae_eq_trim_iff_of_ae_strongly_measurable' hm hfm hgm]
  have hf_mk_int_finite :
    ‚àÄ s, measurable_set[m] s ‚Üí Œº.trim hm s < ‚àû ‚Üí @integrable_on _ _ m _ (hfm.mk f) s (Œº.trim hm) :=
    by 
    intro s hs hŒºs
    rw [trim_measurable_set_eq hm hs] at hŒºs
    rw [integrable_on, restrict_trim hm _ hs]
    refine' integrable.trim hm _ hfm.strongly_measurable_mk
    exact integrable.congr (hf_int_finite s hs hŒºs) (ae_restrict_of_ae hfm.ae_eq_mk)
  have hg_mk_int_finite :
    ‚àÄ s, measurable_set[m] s ‚Üí Œº.trim hm s < ‚àû ‚Üí @integrable_on _ _ m _ (hgm.mk g) s (Œº.trim hm) :=
    by 
    intro s hs hŒºs
    rw [trim_measurable_set_eq hm hs] at hŒºs
    rw [integrable_on, restrict_trim hm _ hs]
    refine' integrable.trim hm _ hgm.strongly_measurable_mk
    exact integrable.congr (hg_int_finite s hs hŒºs) (ae_restrict_of_ae hgm.ae_eq_mk)
  have hfg_mk_eq :
    ‚àÄ s : Set Œ±,
      measurable_set[m] s ‚Üí
        Œº.trim hm s < ‚àû ‚Üí (‚à´ x in s, hfm.mk f x ‚àÇŒº.trim hm) = ‚à´ x in s, hgm.mk g x ‚àÇŒº.trim hm :=
    by 
    intro s hs hŒºs
    rw [trim_measurable_set_eq hm hs] at hŒºs
    rw [restrict_trim hm _ hs, ‚Üê integral_trim hm hfm.strongly_measurable_mk, ‚Üê
      integral_trim hm hgm.strongly_measurable_mk,
      integral_congr_ae (ae_restrict_of_ae hfm.ae_eq_mk.symm),
      integral_congr_ae (ae_restrict_of_ae hgm.ae_eq_mk.symm)]
    exact hfg_eq s hs hŒºs
  exact ae_eq_of_forall_set_integral_eq_of_sigma_finite hf_mk_int_finite hg_mk_int_finite hfg_mk_eq
#align
  measure_theory.ae_eq_of_forall_set_integral_eq_of_sigma_finite' MeasureTheory.ae_eq_of_forall_set_integral_eq_of_sigma_finite'

end UniquenessOfConditionalExpectation

section IntegralNormLe

variable {m m0 : MeasurableSpace Œ±} {Œº : Measure Œ±} {s : Set Œ±}

/-- Let `m` be a sub-œÉ-algebra of `m0`, `f` a `m0`-measurable function and `g` a `m`-measurable
function, such that their integrals coincide on `m`-measurable sets with finite measure.
Then `‚à´ x in s, ‚Äñg x‚Äñ ‚àÇŒº ‚â§ ‚à´ x in s, ‚Äñf x‚Äñ ‚àÇŒº` on all `m`-measurable sets with finite measure. -/
theorem integral_norm_le_of_forall_fin_meas_integral_eq (hm : m ‚â§ m0) {f g : Œ± ‚Üí ‚Ñù}
    (hf : StronglyMeasurable f) (hfi : IntegrableOn f s Œº) (hg : strongly_measurable[m] g)
    (hgi : IntegrableOn g s Œº)
    (hgf : ‚àÄ t, measurable_set[m] t ‚Üí Œº t < ‚àû ‚Üí (‚à´ x in t, g x ‚àÇŒº) = ‚à´ x in t, f x ‚àÇŒº)
    (hs : measurable_set[m] s) (hŒºs : Œº s ‚â† ‚àû) : (‚à´ x in s, ‚Äñg x‚Äñ ‚àÇŒº) ‚â§ ‚à´ x in s, ‚Äñf x‚Äñ ‚àÇŒº := by
  rw [integral_norm_eq_pos_sub_neg (hg.mono hm) hgi, integral_norm_eq_pos_sub_neg hf hfi]
  have h_meas_nonneg_g : measurable_set[m] { x | 0 ‚â§ g x } :=
    (@strongly_measurable_const _ _ m _ _).measurableSetLe hg
  have h_meas_nonneg_f : MeasurableSet { x | 0 ‚â§ f x } :=
    strongly_measurable_const.measurable_set_le hf
  have h_meas_nonpos_g : measurable_set[m] { x | g x ‚â§ 0 } :=
    hg.measurable_set_le (@strongly_measurable_const _ _ m _ _)
  have h_meas_nonpos_f : MeasurableSet { x | f x ‚â§ 0 } :=
    hf.measurable_set_le strongly_measurable_const
  refine' sub_le_sub _ _
  ¬∑ rw [measure.restrict_restrict (hm _ h_meas_nonneg_g), measure.restrict_restrict h_meas_nonneg_f,
      hgf _ (@MeasurableSet.inter Œ± m _ _ h_meas_nonneg_g hs)
        ((measure_mono (Set.inter_subset_right _ _)).trans_lt (lt_top_iff_ne_top.mpr hŒºs)),
      ‚Üê measure.restrict_restrict (hm _ h_meas_nonneg_g), ‚Üê
      measure.restrict_restrict h_meas_nonneg_f]
    exact set_integral_le_nonneg (hm _ h_meas_nonneg_g) hf hfi
  ¬∑ rw [measure.restrict_restrict (hm _ h_meas_nonpos_g), measure.restrict_restrict h_meas_nonpos_f,
      hgf _ (@MeasurableSet.inter Œ± m _ _ h_meas_nonpos_g hs)
        ((measure_mono (Set.inter_subset_right _ _)).trans_lt (lt_top_iff_ne_top.mpr hŒºs)),
      ‚Üê measure.restrict_restrict (hm _ h_meas_nonpos_g), ‚Üê
      measure.restrict_restrict h_meas_nonpos_f]
    exact set_integral_nonpos_le (hm _ h_meas_nonpos_g) hf hfi
#align
  measure_theory.integral_norm_le_of_forall_fin_meas_integral_eq MeasureTheory.integral_norm_le_of_forall_fin_meas_integral_eq

/-- Let `m` be a sub-œÉ-algebra of `m0`, `f` a `m0`-measurable function and `g` a `m`-measurable
function, such that their integrals coincide on `m`-measurable sets with finite measure.
Then `‚à´‚Åª x in s, ‚Äñg x‚Äñ‚Çä ‚àÇŒº ‚â§ ‚à´‚Åª x in s, ‚Äñf x‚Äñ‚Çä ‚àÇŒº` on all `m`-measurable sets with finite
measure. -/
theorem lintegral_nnnorm_le_of_forall_fin_meas_integral_eq (hm : m ‚â§ m0) {f g : Œ± ‚Üí ‚Ñù}
    (hf : StronglyMeasurable f) (hfi : IntegrableOn f s Œº) (hg : strongly_measurable[m] g)
    (hgi : IntegrableOn g s Œº)
    (hgf : ‚àÄ t, measurable_set[m] t ‚Üí Œº t < ‚àû ‚Üí (‚à´ x in t, g x ‚àÇŒº) = ‚à´ x in t, f x ‚àÇŒº)
    (hs : measurable_set[m] s) (hŒºs : Œº s ‚â† ‚àû) : (‚à´‚Åª x in s, ‚Äñg x‚Äñ‚Çä ‚àÇŒº) ‚â§ ‚à´‚Åª x in s, ‚Äñf x‚Äñ‚Çä ‚àÇŒº := by
  rw [‚Üê of_real_integral_norm_eq_lintegral_nnnorm hfi, ‚Üê
    of_real_integral_norm_eq_lintegral_nnnorm hgi, Ennreal.of_real_le_of_real_iff]
  ¬∑ exact integral_norm_le_of_forall_fin_meas_integral_eq hm hf hfi hg hgi hgf hs hŒºs
  ¬∑ exact integral_nonneg fun x => norm_nonneg _
#align
  measure_theory.lintegral_nnnorm_le_of_forall_fin_meas_integral_eq MeasureTheory.lintegral_nnnorm_le_of_forall_fin_meas_integral_eq

end IntegralNormLe

/-! ## Conditional expectation in L2

We define a conditional expectation in `L2`: it is the orthogonal projection on the subspace
`Lp_meas`. -/


section CondexpL2

variable [CompleteSpace E] {m m0 : MeasurableSpace Œ±} {Œº : Measure Œ±} {s t : Set Œ±}

-- mathport name: ¬´expr‚ü™ , ‚ü´¬ª
local notation "‚ü™" x ", " y "‚ü´" => @inner ùïú E _ x y

-- mathport name: ¬´expr‚ü™ , ‚ü´‚ÇÇ¬ª
local notation "‚ü™" x ", " y "‚ü´‚ÇÇ" => @inner ùïú (Œ± ‚Üí‚ÇÇ[Œº] E) _ x y

variable (ùïú)

/-- Conditional expectation of a function in L2 with respect to a sigma-algebra -/
def condexpL2 (hm : m ‚â§ m0) : (Œ± ‚Üí‚ÇÇ[Œº] E) ‚ÜíL[ùïú] lpMeas E ùïú m 2 Œº :=
  @orthogonalProjection ùïú (Œ± ‚Üí‚ÇÇ[Œº] E) _ _ (lpMeas E ùïú m 2 Œº)
    haveI : Fact (m ‚â§ m0) := ‚ü®hm‚ü©
    inferInstance
#align measure_theory.condexp_L2 MeasureTheory.condexpL2

variable {ùïú}

theorem aeStronglyMeasurable'CondexpL2 (hm : m ‚â§ m0) (f : Œ± ‚Üí‚ÇÇ[Œº] E) :
    AeStronglyMeasurable' m (condexpL2 ùïú hm f) Œº :=
  lpMeas.aeStronglyMeasurable' _
#align
  measure_theory.ae_strongly_measurable'_condexp_L2 MeasureTheory.aeStronglyMeasurable'CondexpL2

theorem integrableOnCondexpL2OfMeasureNeTop (hm : m ‚â§ m0) (hŒºs : Œº s ‚â† ‚àû) (f : Œ± ‚Üí‚ÇÇ[Œº] E) :
    IntegrableOn (condexpL2 ùïú hm f) s Œº :=
  integrableOnLpOfMeasureNeTop (condexpL2 ùïú hm f : Œ± ‚Üí‚ÇÇ[Œº] E) fact_one_le_two_ennreal.elim hŒºs
#align
  measure_theory.integrable_on_condexp_L2_of_measure_ne_top MeasureTheory.integrableOnCondexpL2OfMeasureNeTop

theorem integrableCondexpL2OfIsFiniteMeasure (hm : m ‚â§ m0) [IsFiniteMeasure Œº] {f : Œ± ‚Üí‚ÇÇ[Œº] E} :
    Integrable (condexpL2 ùïú hm f) Œº :=
  integrable_on_univ.mp <| integrableOnCondexpL2OfMeasureNeTop hm (measure_ne_top _ _) f
#align
  measure_theory.integrable_condexp_L2_of_is_finite_measure MeasureTheory.integrableCondexpL2OfIsFiniteMeasure

theorem norm_condexp_L2_le_one (hm : m ‚â§ m0) : ‚Äñ@condexpL2 Œ± E ùïú _ _ _ _ _ Œº hm‚Äñ ‚â§ 1 :=
  haveI : Fact (m ‚â§ m0) := ‚ü®hm‚ü©
  orthogonal_projection_norm_le _
#align measure_theory.norm_condexp_L2_le_one MeasureTheory.norm_condexp_L2_le_one

theorem norm_condexp_L2_le (hm : m ‚â§ m0) (f : Œ± ‚Üí‚ÇÇ[Œº] E) : ‚ÄñcondexpL2 ùïú hm f‚Äñ ‚â§ ‚Äñf‚Äñ :=
  ((@condexpL2 _ E ùïú _ _ _ _ _ Œº hm).le_op_norm f).trans
    (mul_le_of_le_one_left (norm_nonneg _) (norm_condexp_L2_le_one hm))
#align measure_theory.norm_condexp_L2_le MeasureTheory.norm_condexp_L2_le

theorem snorm_condexp_L2_le (hm : m ‚â§ m0) (f : Œ± ‚Üí‚ÇÇ[Œº] E) :
    snorm (condexpL2 ùïú hm f) 2 Œº ‚â§ snorm f 2 Œº := by
  rw [Lp_meas_coe, ‚Üê Ennreal.to_real_le_to_real (Lp.snorm_ne_top _) (Lp.snorm_ne_top _), ‚Üê
    Lp.norm_def, ‚Üê Lp.norm_def, Submodule.norm_coe]
  exact norm_condexp_L2_le hm f
#align measure_theory.snorm_condexp_L2_le MeasureTheory.snorm_condexp_L2_le

theorem norm_condexp_L2_coe_le (hm : m ‚â§ m0) (f : Œ± ‚Üí‚ÇÇ[Œº] E) :
    ‚Äñ(condexpL2 ùïú hm f : Œ± ‚Üí‚ÇÇ[Œº] E)‚Äñ ‚â§ ‚Äñf‚Äñ := by
  rw [Lp.norm_def, Lp.norm_def, ‚Üê Lp_meas_coe]
  refine' (Ennreal.to_real_le_to_real _ (Lp.snorm_ne_top _)).mpr (snorm_condexp_L2_le hm f)
  exact Lp.snorm_ne_top _
#align measure_theory.norm_condexp_L2_coe_le MeasureTheory.norm_condexp_L2_coe_le

theorem inner_condexp_L2_left_eq_right (hm : m ‚â§ m0) {f g : Œ± ‚Üí‚ÇÇ[Œº] E} :
    ‚ü™(condexpL2 ùïú hm f : Œ± ‚Üí‚ÇÇ[Œº] E), g‚ü´‚ÇÇ = ‚ü™f, (condexpL2 ùïú hm g : Œ± ‚Üí‚ÇÇ[Œº] E)‚ü´‚ÇÇ :=
  haveI : Fact (m ‚â§ m0) := ‚ü®hm‚ü©
  inner_orthogonal_projection_left_eq_right _ f g
#align measure_theory.inner_condexp_L2_left_eq_right MeasureTheory.inner_condexp_L2_left_eq_right

theorem condexp_L2_indicator_of_measurable (hm : m ‚â§ m0) (hs : measurable_set[m] s) (hŒºs : Œº s ‚â† ‚àû)
    (c : E) :
    (condexpL2 ùïú hm (indicatorConstLp 2 (hm s hs) hŒºs c) : Œ± ‚Üí‚ÇÇ[Œº] E) =
      indicatorConstLp 2 (hm s hs) hŒºs c :=
  by 
  rw [condexp_L2]
  haveI : Fact (m ‚â§ m0) := ‚ü®hm‚ü©
  have h_mem : indicator_const_Lp 2 (hm s hs) hŒºs c ‚àà Lp_meas E ùïú m 2 Œº :=
    mem_Lp_meas_indicator_const_Lp hm hs hŒºs
  let ind := (‚ü®indicator_const_Lp 2 (hm s hs) hŒºs c, h_mem‚ü© : Lp_meas E ùïú m 2 Œº)
  have h_coe_ind : (ind : Œ± ‚Üí‚ÇÇ[Œº] E) = indicator_const_Lp 2 (hm s hs) hŒºs c := by rfl
  have h_orth_mem := orthogonal_projection_mem_subspace_eq_self ind
  rw [‚Üê h_coe_ind, h_orth_mem]
#align
  measure_theory.condexp_L2_indicator_of_measurable MeasureTheory.condexp_L2_indicator_of_measurable

theorem inner_condexp_L2_eq_inner_fun (hm : m ‚â§ m0) (f g : Œ± ‚Üí‚ÇÇ[Œº] E)
    (hg : AeStronglyMeasurable' m g Œº) : ‚ü™(condexpL2 ùïú hm f : Œ± ‚Üí‚ÇÇ[Œº] E), g‚ü´‚ÇÇ = ‚ü™f, g‚ü´‚ÇÇ := by
  symm
  rw [‚Üê sub_eq_zero, ‚Üê inner_sub_left, condexp_L2]
  simp only [mem_Lp_meas_iff_ae_strongly_measurable'.mpr hg, orthogonal_projection_inner_eq_zero]
#align measure_theory.inner_condexp_L2_eq_inner_fun MeasureTheory.inner_condexp_L2_eq_inner_fun

section Real

variable {hm : m ‚â§ m0}

theorem integral_condexp_L2_eq_of_fin_meas_real (f : lp ùïú 2 Œº) (hs : measurable_set[m] s)
    (hŒºs : Œº s ‚â† ‚àû) : (‚à´ x in s, condexpL2 ùïú hm f x ‚àÇŒº) = ‚à´ x in s, f x ‚àÇŒº := by
  rw [‚Üê L2.inner_indicator_const_Lp_one (hm s hs) hŒºs]
  have h_eq_inner :
    (‚à´ x in s, condexp_L2 ùïú hm f x ‚àÇŒº) =
      inner (indicator_const_Lp 2 (hm s hs) hŒºs (1 : ùïú)) (condexp_L2 ùïú hm f) :=
    by 
    rw [L2.inner_indicator_const_Lp_one (hm s hs) hŒºs]
    congr
  rw [h_eq_inner, ‚Üê inner_condexp_L2_left_eq_right, condexp_L2_indicator_of_measurable hm hs hŒºs]
#align
  measure_theory.integral_condexp_L2_eq_of_fin_meas_real MeasureTheory.integral_condexp_L2_eq_of_fin_meas_real

theorem lintegral_nnnorm_condexp_L2_le (hs : measurable_set[m] s) (hŒºs : Œº s ‚â† ‚àû) (f : lp ‚Ñù 2 Œº) :
    (‚à´‚Åª x in s, ‚ÄñcondexpL2 ‚Ñù hm f x‚Äñ‚Çä ‚àÇŒº) ‚â§ ‚à´‚Åª x in s, ‚Äñf x‚Äñ‚Çä ‚àÇŒº := by
  let h_meas := Lp_meas.ae_strongly_measurable' (condexp_L2 ‚Ñù hm f)
  let g := h_meas.some
  have hg_meas : strongly_measurable[m] g := h_meas.some_spec.1
  have hg_eq : g =·µê[Œº] condexp_L2 ‚Ñù hm f := h_meas.some_spec.2.symm
  have hg_eq_restrict : g =·µê[Œº.restrict s] condexp_L2 ‚Ñù hm f := ae_restrict_of_ae hg_eq
  have hg_nnnorm_eq :
    (fun x => (‚Äñg x‚Äñ‚Çä : ‚Ñù‚â•0‚àû)) =·µê[Œº.restrict s] fun x => (‚Äñcondexp_L2 ‚Ñù hm f x‚Äñ‚Çä : ‚Ñù‚â•0‚àû) := by
    refine' hg_eq_restrict.mono fun x hx => _
    dsimp only
    rw [hx]
  rw [lintegral_congr_ae hg_nnnorm_eq.symm]
  refine'
    lintegral_nnnorm_le_of_forall_fin_meas_integral_eq hm (Lp.strongly_measurable f) _ _ _ _ hs hŒºs
  ¬∑ exact integrable_on_Lp_of_measure_ne_top f fact_one_le_two_ennreal.elim hŒºs
  ¬∑ exact hg_meas
  ¬∑ rw [integrable_on, integrable_congr hg_eq_restrict]
    exact integrable_on_condexp_L2_of_measure_ne_top hm hŒºs f
  ¬∑ intro t ht hŒºt
    rw [‚Üê integral_condexp_L2_eq_of_fin_meas_real f ht hŒºt.ne]
    exact set_integral_congr_ae (hm t ht) (hg_eq.mono fun x hx _ => hx)
#align measure_theory.lintegral_nnnorm_condexp_L2_le MeasureTheory.lintegral_nnnorm_condexp_L2_le

theorem condexp_L2_ae_eq_zero_of_ae_eq_zero (hs : measurable_set[m] s) (hŒºs : Œº s ‚â† ‚àû)
    {f : lp ‚Ñù 2 Œº} (hf : f =·µê[Œº.restrict s] 0) : condexpL2 ‚Ñù hm f =·µê[Œº.restrict s] 0 := by
  suffices h_nnnorm_eq_zero : (‚à´‚Åª x in s, ‚Äñcondexp_L2 ‚Ñù hm f x‚Äñ‚Çä ‚àÇŒº) = 0
  ¬∑ rw [lintegral_eq_zero_iff] at h_nnnorm_eq_zero
    refine' h_nnnorm_eq_zero.mono fun x hx => _
    dsimp only at hx
    rw [Pi.zero_apply] at hx‚ä¢
    ¬∑ rwa [Ennreal.coe_eq_zero, nnnorm_eq_zero] at hx
    ¬∑ refine' Measurable.coeNnrealEnnreal (Measurable.nnnorm _)
      rw [Lp_meas_coe]
      exact (Lp.strongly_measurable _).Measurable
  refine' le_antisymm _ (zero_le _)
  refine' (lintegral_nnnorm_condexp_L2_le hs hŒºs f).trans (le_of_eq _)
  rw [lintegral_eq_zero_iff]
  ¬∑ refine' hf.mono fun x hx => _
    dsimp only
    rw [hx]
    simp
  ¬∑ exact (Lp.strongly_measurable _).ennnorm
#align
  measure_theory.condexp_L2_ae_eq_zero_of_ae_eq_zero MeasureTheory.condexp_L2_ae_eq_zero_of_ae_eq_zero

theorem lintegral_nnnorm_condexp_L2_indicator_le_real (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû)
    (ht : measurable_set[m] t) (hŒºt : Œº t ‚â† ‚àû) :
    (‚à´‚Åª a in t, ‚ÄñcondexpL2 ‚Ñù hm (indicatorConstLp 2 hs hŒºs (1 : ‚Ñù)) a‚Äñ‚Çä ‚àÇŒº) ‚â§ Œº (s ‚à© t) := by
  refine' (lintegral_nnnorm_condexp_L2_le ht hŒºt _).trans (le_of_eq _)
  have h_eq :
    (‚à´‚Åª x in t, ‚Äñ(indicator_const_Lp 2 hs hŒºs (1 : ‚Ñù)) x‚Äñ‚Çä ‚àÇŒº) =
      ‚à´‚Åª x in t, s.indicator (fun x => (1 : ‚Ñù‚â•0‚àû)) x ‚àÇŒº :=
    by 
    refine' lintegral_congr_ae (ae_restrict_of_ae _)
    refine' (@indicator_const_Lp_coe_fn _ _ _ 2 _ _ _ hs hŒºs (1 : ‚Ñù)).mono fun x hx => _
    rw [hx]
    classical 
      simp_rw [Set.indicator_apply]
      split_ifs <;> simp
  rw [h_eq, lintegral_indicator _ hs, lintegral_const, measure.restrict_restrict hs]
  simp only [one_mul, Set.univ_inter, MeasurableSet.univ, measure.restrict_apply]
#align
  measure_theory.lintegral_nnnorm_condexp_L2_indicator_le_real MeasureTheory.lintegral_nnnorm_condexp_L2_indicator_le_real

end Real

/-- `condexp_L2` commutes with taking inner products with constants. See the lemma
`condexp_L2_comp_continuous_linear_map` for a more general result about commuting with continuous
linear maps. -/
theorem condexp_L2_const_inner (hm : m ‚â§ m0) (f : lp E 2 Œº) (c : E) :
    condexpL2 ùïú hm (((lp.mem‚Ñíp f).constInner c).toLp fun a => ‚ü™c, f a‚ü´) =·µê[Œº] fun a =>
      ‚ü™c, condexpL2 ùïú hm f a‚ü´ :=
  by 
  rw [Lp_meas_coe]
  have h_mem_Lp : mem_‚Ñíp (fun a => ‚ü™c, condexp_L2 ùïú hm f a‚ü´) 2 Œº := by
    refine' mem_‚Ñíp.const_inner _ _
    rw [Lp_meas_coe]
    exact Lp.mem_‚Ñíp _
  have h_eq : h_mem_Lp.to_Lp _ =·µê[Œº] fun a => ‚ü™c, condexp_L2 ùïú hm f a‚ü´ := h_mem_Lp.coe_fn_to_Lp
  refine' eventually_eq.trans _ h_eq
  refine'
    Lp.ae_eq_of_forall_set_integral_eq' hm _ _ ennreal.zero_lt_two.ne.symm Ennreal.coe_ne_top
      (fun s hs hŒºs => integrable_on_condexp_L2_of_measure_ne_top hm hŒºs.Ne _) _ _ _ _
  ¬∑ intro s hs hŒºs
    rw [integrable_on, integrable_congr (ae_restrict_of_ae h_eq)]
    exact (integrable_on_condexp_L2_of_measure_ne_top hm hŒºs.ne _).constInner _
  ¬∑ intro s hs hŒºs
    rw [‚Üê Lp_meas_coe, integral_condexp_L2_eq_of_fin_meas_real _ hs hŒºs.ne,
      integral_congr_ae (ae_restrict_of_ae h_eq), Lp_meas_coe, ‚Üê
      L2.inner_indicator_const_Lp_eq_set_integral_inner ùïú (‚Üë(condexp_L2 ùïú hm f)) (hm s hs) c hŒºs.ne,
      ‚Üê inner_condexp_L2_left_eq_right, condexp_L2_indicator_of_measurable,
      L2.inner_indicator_const_Lp_eq_set_integral_inner ùïú f (hm s hs) c hŒºs.ne,
      set_integral_congr_ae (hm s hs)
        ((mem_‚Ñíp.coe_fn_to_Lp ((Lp.mem_‚Ñíp f).constInner c)).mono fun x hx hxs => hx)]
  ¬∑ rw [‚Üê Lp_meas_coe]
    exact Lp_meas.ae_strongly_measurable' _
  ¬∑ refine' ae_strongly_measurable'.congr _ h_eq.symm
    exact (Lp_meas.ae_strongly_measurable' _).constInner _
#align measure_theory.condexp_L2_const_inner MeasureTheory.condexp_L2_const_inner

/-- `condexp_L2` verifies the equality of integrals defining the conditional expectation. -/
theorem integral_condexp_L2_eq (hm : m ‚â§ m0) (f : lp E' 2 Œº) (hs : measurable_set[m] s)
    (hŒºs : Œº s ‚â† ‚àû) : (‚à´ x in s, condexpL2 ùïú hm f x ‚àÇŒº) = ‚à´ x in s, f x ‚àÇŒº := by
  rw [‚Üê sub_eq_zero, Lp_meas_coe, ‚Üê
    integral_sub' (integrable_on_Lp_of_measure_ne_top _ fact_one_le_two_ennreal.elim hŒºs)
      (integrable_on_Lp_of_measure_ne_top _ fact_one_le_two_ennreal.elim hŒºs)]
  refine' integral_eq_zero_of_forall_integral_inner_eq_zero _ _ _
  ¬∑ rw [integrable_congr (ae_restrict_of_ae (Lp.coe_fn_sub (‚Üë(condexp_L2 ùïú hm f)) f).symm)]
    exact integrable_on_Lp_of_measure_ne_top _ fact_one_le_two_ennreal.elim hŒºs
  intro c
  simp_rw [Pi.sub_apply, inner_sub_right]
  rw [integral_sub
      ((integrable_on_Lp_of_measure_ne_top _ fact_one_le_two_ennreal.elim hŒºs).constInner c)
      ((integrable_on_Lp_of_measure_ne_top _ fact_one_le_two_ennreal.elim hŒºs).constInner c)]
  have h_ae_eq_f := mem_‚Ñíp.coe_fn_to_Lp ((Lp.mem_‚Ñíp f).constInner c)
  rw [‚Üê Lp_meas_coe, sub_eq_zero, ‚Üê
    set_integral_congr_ae (hm s hs) ((condexp_L2_const_inner hm f c).mono fun x hx _ => hx), ‚Üê
    set_integral_congr_ae (hm s hs) (h_ae_eq_f.mono fun x hx _ => hx)]
  exact integral_condexp_L2_eq_of_fin_meas_real _ hs hŒºs
#align measure_theory.integral_condexp_L2_eq MeasureTheory.integral_condexp_L2_eq

variable {E'' ùïú' : Type _} [IsROrC ùïú'] [InnerProductSpace ùïú' E''] [CompleteSpace E'']
  [NormedSpace ‚Ñù E'']

variable (ùïú ùïú')

theorem condexp_L2_comp_continuous_linear_map (hm : m ‚â§ m0) (T : E' ‚ÜíL[‚Ñù] E'') (f : Œ± ‚Üí‚ÇÇ[Œº] E') :
    (condexpL2 ùïú' hm (T.compLp f) : Œ± ‚Üí‚ÇÇ[Œº] E'') =·µê[Œº] T.compLp (condexpL2 ùïú hm f : Œ± ‚Üí‚ÇÇ[Œº] E') :=
  by
  refine'
    Lp.ae_eq_of_forall_set_integral_eq' hm _ _ ennreal.zero_lt_two.ne.symm Ennreal.coe_ne_top
      (fun s hs hŒºs => integrable_on_condexp_L2_of_measure_ne_top hm hŒºs.Ne _)
      (fun s hs hŒºs => integrable_on_Lp_of_measure_ne_top _ fact_one_le_two_ennreal.elim hŒºs.Ne) _ _
      _
  ¬∑ intro s hs hŒºs
    rw [T.set_integral_comp_Lp _ (hm s hs),
      T.integral_comp_comm
        (integrable_on_Lp_of_measure_ne_top _ fact_one_le_two_ennreal.elim hŒºs.ne),
      ‚Üê Lp_meas_coe, ‚Üê Lp_meas_coe, integral_condexp_L2_eq hm f hs hŒºs.ne,
      integral_condexp_L2_eq hm (T.comp_Lp f) hs hŒºs.ne, T.set_integral_comp_Lp _ (hm s hs),
      T.integral_comp_comm
        (integrable_on_Lp_of_measure_ne_top f fact_one_le_two_ennreal.elim hŒºs.ne)]
  ¬∑ rw [‚Üê Lp_meas_coe]
    exact Lp_meas.ae_strongly_measurable' _
  ¬∑ have h_coe := T.coe_fn_comp_Lp (condexp_L2 ùïú hm f : Œ± ‚Üí‚ÇÇ[Œº] E')
    rw [‚Üê eventually_eq] at h_coe
    refine' ae_strongly_measurable'.congr _ h_coe.symm
    exact (Lp_meas.ae_strongly_measurable' (condexp_L2 ùïú hm f)).continuous_comp T.continuous
#align
  measure_theory.condexp_L2_comp_continuous_linear_map MeasureTheory.condexp_L2_comp_continuous_linear_map

variable {ùïú ùïú'}

section CondexpL2Indicator

variable (ùïú)

theorem condexp_L2_indicator_ae_eq_smul (hm : m ‚â§ m0) (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû)
    (x : E') :
    condexpL2 ùïú hm (indicatorConstLp 2 hs hŒºs x) =·µê[Œº] fun a =>
      condexpL2 ‚Ñù hm (indicatorConstLp 2 hs hŒºs (1 : ‚Ñù)) a ‚Ä¢ x :=
  by 
  rw [indicator_const_Lp_eq_to_span_singleton_comp_Lp hs hŒºs x]
  have h_comp :=
    condexp_L2_comp_continuous_linear_map ‚Ñù ùïú hm (to_span_singleton ‚Ñù x)
      (indicator_const_Lp 2 hs hŒºs (1 : ‚Ñù))
  rw [‚Üê Lp_meas_coe] at h_comp
  refine' h_comp.trans _
  exact (to_span_singleton ‚Ñù x).coe_fn_comp_Lp _
#align measure_theory.condexp_L2_indicator_ae_eq_smul MeasureTheory.condexp_L2_indicator_ae_eq_smul

theorem condexp_L2_indicator_eq_to_span_singleton_comp (hm : m ‚â§ m0) (hs : MeasurableSet s)
    (hŒºs : Œº s ‚â† ‚àû) (x : E') :
    (condexpL2 ùïú hm (indicatorConstLp 2 hs hŒºs x) : Œ± ‚Üí‚ÇÇ[Œº] E') =
      (toSpanSingleton ‚Ñù x).compLp (condexpL2 ‚Ñù hm (indicatorConstLp 2 hs hŒºs (1 : ‚Ñù))) :=
  by 
  ext1
  rw [‚Üê Lp_meas_coe]
  refine' (condexp_L2_indicator_ae_eq_smul ùïú hm hs hŒºs x).trans _
  have h_comp :=
    (to_span_singleton ‚Ñù x).coe_fn_comp_Lp
      (condexp_L2 ‚Ñù hm (indicator_const_Lp 2 hs hŒºs (1 : ‚Ñù)) : Œ± ‚Üí‚ÇÇ[Œº] ‚Ñù)
  rw [‚Üê eventually_eq] at h_comp
  refine' eventually_eq.trans _ h_comp.symm
  refine' eventually_of_forall fun y => _
  rfl
#align
  measure_theory.condexp_L2_indicator_eq_to_span_singleton_comp MeasureTheory.condexp_L2_indicator_eq_to_span_singleton_comp

variable {ùïú}

theorem set_lintegral_nnnorm_condexp_L2_indicator_le (hm : m ‚â§ m0) (hs : MeasurableSet s)
    (hŒºs : Œº s ‚â† ‚àû) (x : E') {t : Set Œ±} (ht : measurable_set[m] t) (hŒºt : Œº t ‚â† ‚àû) :
    (‚à´‚Åª a in t, ‚ÄñcondexpL2 ùïú hm (indicatorConstLp 2 hs hŒºs x) a‚Äñ‚Çä ‚àÇŒº) ‚â§ Œº (s ‚à© t) * ‚Äñx‚Äñ‚Çä :=
  calc
    (‚à´‚Åª a in t, ‚ÄñcondexpL2 ùïú hm (indicatorConstLp 2 hs hŒºs x) a‚Äñ‚Çä ‚àÇŒº) =
        ‚à´‚Åª a in t, ‚ÄñcondexpL2 ‚Ñù hm (indicatorConstLp 2 hs hŒºs (1 : ‚Ñù)) a ‚Ä¢ x‚Äñ‚Çä ‚àÇŒº :=
      set_lintegral_congr_fun (hm t ht)
        ((condexp_L2_indicator_ae_eq_smul ùïú hm hs hŒºs x).mono fun a ha hat => by rw [ha])
    _ = (‚à´‚Åª a in t, ‚ÄñcondexpL2 ‚Ñù hm (indicatorConstLp 2 hs hŒºs (1 : ‚Ñù)) a‚Äñ‚Çä ‚àÇŒº) * ‚Äñx‚Äñ‚Çä := by
      simp_rw [nnnorm_smul, Ennreal.coe_mul]
      rw [lintegral_mul_const, Lp_meas_coe]
      exact (Lp.strongly_measurable _).ennnorm
    _ ‚â§ Œº (s ‚à© t) * ‚Äñx‚Äñ‚Çä :=
      Ennreal.mul_le_mul (lintegral_nnnorm_condexp_L2_indicator_le_real hs hŒºs ht hŒºt) le_rfl
    
#align
  measure_theory.set_lintegral_nnnorm_condexp_L2_indicator_le MeasureTheory.set_lintegral_nnnorm_condexp_L2_indicator_le

theorem lintegral_nnnorm_condexp_L2_indicator_le (hm : m ‚â§ m0) (hs : MeasurableSet s)
    (hŒºs : Œº s ‚â† ‚àû) (x : E') [SigmaFinite (Œº.trim hm)] :
    (‚à´‚Åª a, ‚ÄñcondexpL2 ùïú hm (indicatorConstLp 2 hs hŒºs x) a‚Äñ‚Çä ‚àÇŒº) ‚â§ Œº s * ‚Äñx‚Äñ‚Çä := by
  refine' lintegral_le_of_forall_fin_meas_le' hm (Œº s * ‚Äñx‚Äñ‚Çä) _ fun t ht hŒºt => _
  ¬∑ rw [Lp_meas_coe]
    exact (Lp.ae_strongly_measurable _).ennnorm
  refine' (set_lintegral_nnnorm_condexp_L2_indicator_le hm hs hŒºs x ht hŒºt).trans _
  refine' Ennreal.mul_le_mul _ le_rfl
  exact measure_mono (Set.inter_subset_left _ _)
#align
  measure_theory.lintegral_nnnorm_condexp_L2_indicator_le MeasureTheory.lintegral_nnnorm_condexp_L2_indicator_le

/-- If the measure `Œº.trim hm` is sigma-finite, then the conditional expectation of a measurable set
with finite measure is integrable. -/
theorem integrableCondexpL2Indicator (hm : m ‚â§ m0) [SigmaFinite (Œº.trim hm)] (hs : MeasurableSet s)
    (hŒºs : Œº s ‚â† ‚àû) (x : E') : Integrable (condexpL2 ùïú hm (indicatorConstLp 2 hs hŒºs x)) Œº := by
  refine'
    integrable_of_forall_fin_meas_le' hm (Œº s * ‚Äñx‚Äñ‚Çä) (Ennreal.mul_lt_top hŒºs Ennreal.coe_ne_top) _
      _
  ¬∑ rw [Lp_meas_coe]
    exact Lp.ae_strongly_measurable _
  ¬∑ refine' fun t ht hŒºt =>
      (set_lintegral_nnnorm_condexp_L2_indicator_le hm hs hŒºs x ht hŒºt).trans _
    exact Ennreal.mul_le_mul (measure_mono (Set.inter_subset_left _ _)) le_rfl
#align measure_theory.integrable_condexp_L2_indicator MeasureTheory.integrableCondexpL2Indicator

end CondexpL2Indicator

section CondexpIndSmul

variable [NormedSpace ‚Ñù G] {hm : m ‚â§ m0}

/-- Conditional expectation of the indicator of a measurable set with finite measure, in L2. -/
def condexpIndSmul (hm : m ‚â§ m0) (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (x : G) : lp G 2 Œº :=
  (toSpanSingleton ‚Ñù x).compLpL 2 Œº (condexpL2 ‚Ñù hm (indicatorConstLp 2 hs hŒºs (1 : ‚Ñù)))
#align measure_theory.condexp_ind_smul MeasureTheory.condexpIndSmul

theorem aeStronglyMeasurable'CondexpIndSmul (hm : m ‚â§ m0) (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû)
    (x : G) : AeStronglyMeasurable' m (condexpIndSmul hm hs hŒºs x) Œº := by
  have h : ae_strongly_measurable' m (condexp_L2 ‚Ñù hm (indicator_const_Lp 2 hs hŒºs (1 : ‚Ñù))) Œº :=
    ae_strongly_measurable'_condexp_L2 _ _
  rw [condexp_ind_smul]
  suffices
    ae_strongly_measurable' m
      (to_span_singleton ‚Ñù x ‚àò condexp_L2 ‚Ñù hm (indicator_const_Lp 2 hs hŒºs (1 : ‚Ñù))) Œº
    by 
    refine' ae_strongly_measurable'.congr this _
    refine' eventually_eq.trans _ (coe_fn_comp_LpL _ _).symm
    rw [Lp_meas_coe]
  exact ae_strongly_measurable'.continuous_comp (to_span_singleton ‚Ñù x).Continuous h
#align
  measure_theory.ae_strongly_measurable'_condexp_ind_smul MeasureTheory.aeStronglyMeasurable'CondexpIndSmul

theorem condexp_ind_smul_add (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (x y : G) :
    condexpIndSmul hm hs hŒºs (x + y) = condexpIndSmul hm hs hŒºs x + condexpIndSmul hm hs hŒºs y := by
  simp_rw [condexp_ind_smul]
  rw [to_span_singleton_add, add_comp_LpL, add_apply]
#align measure_theory.condexp_ind_smul_add MeasureTheory.condexp_ind_smul_add

theorem condexp_ind_smul_smul (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (c : ‚Ñù) (x : G) :
    condexpIndSmul hm hs hŒºs (c ‚Ä¢ x) = c ‚Ä¢ condexpIndSmul hm hs hŒºs x := by
  simp_rw [condexp_ind_smul]
  rw [to_span_singleton_smul, smul_comp_LpL, smul_apply]
#align measure_theory.condexp_ind_smul_smul MeasureTheory.condexp_ind_smul_smul

theorem condexp_ind_smul_smul' [NormedSpace ‚Ñù F] [SMulCommClass ‚Ñù ùïú F] (hs : MeasurableSet s)
    (hŒºs : Œº s ‚â† ‚àû) (c : ùïú) (x : F) :
    condexpIndSmul hm hs hŒºs (c ‚Ä¢ x) = c ‚Ä¢ condexpIndSmul hm hs hŒºs x := by
  rw [condexp_ind_smul, condexp_ind_smul, to_span_singleton_smul',
    (to_span_singleton ‚Ñù x).smul_comp_LpL_apply c
      ‚Üë(condexp_L2 ‚Ñù hm (indicator_const_Lp 2 hs hŒºs (1 : ‚Ñù)))]
#align measure_theory.condexp_ind_smul_smul' MeasureTheory.condexp_ind_smul_smul'

theorem condexp_ind_smul_ae_eq_smul (hm : m ‚â§ m0) (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (x : G) :
    condexpIndSmul hm hs hŒºs x =·µê[Œº] fun a =>
      condexpL2 ‚Ñù hm (indicatorConstLp 2 hs hŒºs (1 : ‚Ñù)) a ‚Ä¢ x :=
  (toSpanSingleton ‚Ñù x).coe_fn_comp_LpL _
#align measure_theory.condexp_ind_smul_ae_eq_smul MeasureTheory.condexp_ind_smul_ae_eq_smul

theorem set_lintegral_nnnorm_condexp_ind_smul_le (hm : m ‚â§ m0) (hs : MeasurableSet s)
    (hŒºs : Œº s ‚â† ‚àû) (x : G) {t : Set Œ±} (ht : measurable_set[m] t) (hŒºt : Œº t ‚â† ‚àû) :
    (‚à´‚Åª a in t, ‚ÄñcondexpIndSmul hm hs hŒºs x a‚Äñ‚Çä ‚àÇŒº) ‚â§ Œº (s ‚à© t) * ‚Äñx‚Äñ‚Çä :=
  calc
    (‚à´‚Åª a in t, ‚ÄñcondexpIndSmul hm hs hŒºs x a‚Äñ‚Çä ‚àÇŒº) =
        ‚à´‚Åª a in t, ‚ÄñcondexpL2 ‚Ñù hm (indicatorConstLp 2 hs hŒºs (1 : ‚Ñù)) a ‚Ä¢ x‚Äñ‚Çä ‚àÇŒº :=
      set_lintegral_congr_fun (hm t ht)
        ((condexp_ind_smul_ae_eq_smul hm hs hŒºs x).mono fun a ha hat => by rw [ha])
    _ = (‚à´‚Åª a in t, ‚ÄñcondexpL2 ‚Ñù hm (indicatorConstLp 2 hs hŒºs (1 : ‚Ñù)) a‚Äñ‚Çä ‚àÇŒº) * ‚Äñx‚Äñ‚Çä := by
      simp_rw [nnnorm_smul, Ennreal.coe_mul]
      rw [lintegral_mul_const, Lp_meas_coe]
      exact (Lp.strongly_measurable _).ennnorm
    _ ‚â§ Œº (s ‚à© t) * ‚Äñx‚Äñ‚Çä :=
      Ennreal.mul_le_mul (lintegral_nnnorm_condexp_L2_indicator_le_real hs hŒºs ht hŒºt) le_rfl
    
#align
  measure_theory.set_lintegral_nnnorm_condexp_ind_smul_le MeasureTheory.set_lintegral_nnnorm_condexp_ind_smul_le

theorem lintegral_nnnorm_condexp_ind_smul_le (hm : m ‚â§ m0) (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû)
    (x : G) [SigmaFinite (Œº.trim hm)] : (‚à´‚Åª a, ‚ÄñcondexpIndSmul hm hs hŒºs x a‚Äñ‚Çä ‚àÇŒº) ‚â§ Œº s * ‚Äñx‚Äñ‚Çä :=
  by 
  refine' lintegral_le_of_forall_fin_meas_le' hm (Œº s * ‚Äñx‚Äñ‚Çä) _ fun t ht hŒºt => _
  ¬∑ exact (Lp.ae_strongly_measurable _).ennnorm
  refine' (set_lintegral_nnnorm_condexp_ind_smul_le hm hs hŒºs x ht hŒºt).trans _
  refine' Ennreal.mul_le_mul _ le_rfl
  exact measure_mono (Set.inter_subset_left _ _)
#align
  measure_theory.lintegral_nnnorm_condexp_ind_smul_le MeasureTheory.lintegral_nnnorm_condexp_ind_smul_le

/-- If the measure `Œº.trim hm` is sigma-finite, then the conditional expectation of a measurable set
with finite measure is integrable. -/
theorem integrableCondexpIndSmul (hm : m ‚â§ m0) [SigmaFinite (Œº.trim hm)] (hs : MeasurableSet s)
    (hŒºs : Œº s ‚â† ‚àû) (x : G) : Integrable (condexpIndSmul hm hs hŒºs x) Œº := by
  refine'
    integrable_of_forall_fin_meas_le' hm (Œº s * ‚Äñx‚Äñ‚Çä) (Ennreal.mul_lt_top hŒºs Ennreal.coe_ne_top) _
      _
  ¬∑ exact Lp.ae_strongly_measurable _
  ¬∑ refine' fun t ht hŒºt => (set_lintegral_nnnorm_condexp_ind_smul_le hm hs hŒºs x ht hŒºt).trans _
    exact Ennreal.mul_le_mul (measure_mono (Set.inter_subset_left _ _)) le_rfl
#align measure_theory.integrable_condexp_ind_smul MeasureTheory.integrableCondexpIndSmul

theorem condexp_ind_smul_empty {x : G} :
    condexpIndSmul hm MeasurableSet.empty ((@measure_empty _ _ Œº).le.trans_lt Ennreal.coe_lt_top).Ne
        x =
      0 :=
  by 
  rw [condexp_ind_smul, indicator_const_empty]
  simp only [coe_fn_coe_base, Submodule.coe_zero, ContinuousLinearMap.map_zero]
#align measure_theory.condexp_ind_smul_empty MeasureTheory.condexp_ind_smul_empty

theorem set_integral_condexp_L2_indicator (hs : measurable_set[m] s) (ht : MeasurableSet t)
    (hŒºs : Œº s ‚â† ‚àû) (hŒºt : Œº t ‚â† ‚àû) :
    (‚à´ x in s, (condexpL2 ‚Ñù hm (indicatorConstLp 2 ht hŒºt (1 : ‚Ñù))) x ‚àÇŒº) = (Œº (t ‚à© s)).toReal :=
  calc
    (‚à´ x in s, (condexpL2 ‚Ñù hm (indicatorConstLp 2 ht hŒºt (1 : ‚Ñù))) x ‚àÇŒº) =
        ‚à´ x in s, indicatorConstLp 2 ht hŒºt (1 : ‚Ñù) x ‚àÇŒº :=
      @integral_condexp_L2_eq Œ± _ ‚Ñù _ _ _ _ _ _ _ _ hm (indicatorConstLp 2 ht hŒºt (1 : ‚Ñù)) hs hŒºs
    _ = (Œº (t ‚à© s)).toReal ‚Ä¢ 1 := set_integral_indicator_const_Lp (hm s hs) ht hŒºt (1 : ‚Ñù)
    _ = (Œº (t ‚à© s)).toReal := by rw [smul_eq_mul, mul_one]
    
#align
  measure_theory.set_integral_condexp_L2_indicator MeasureTheory.set_integral_condexp_L2_indicator

theorem set_integral_condexp_ind_smul (hs : measurable_set[m] s) (ht : MeasurableSet t)
    (hŒºs : Œº s ‚â† ‚àû) (hŒºt : Œº t ‚â† ‚àû) (x : G') :
    (‚à´ a in s, (condexpIndSmul hm ht hŒºt x) a ‚àÇŒº) = (Œº (t ‚à© s)).toReal ‚Ä¢ x :=
  calc
    (‚à´ a in s, (condexpIndSmul hm ht hŒºt x) a ‚àÇŒº) =
        ‚à´ a in s, condexpL2 ‚Ñù hm (indicatorConstLp 2 ht hŒºt (1 : ‚Ñù)) a ‚Ä¢ x ‚àÇŒº :=
      set_integral_congr_ae (hm s hs)
        ((condexp_ind_smul_ae_eq_smul hm ht hŒºt x).mono fun x hx hxs => hx)
    _ = (‚à´ a in s, condexpL2 ‚Ñù hm (indicatorConstLp 2 ht hŒºt (1 : ‚Ñù)) a ‚àÇŒº) ‚Ä¢ x :=
      integral_smul_const _ x
    _ = (Œº (t ‚à© s)).toReal ‚Ä¢ x := by rw [set_integral_condexp_L2_indicator hs ht hŒºs hŒºt]
    
#align measure_theory.set_integral_condexp_ind_smul MeasureTheory.set_integral_condexp_ind_smul

theorem condexp_L2_indicator_nonneg (hm : m ‚â§ m0) (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû)
    [SigmaFinite (Œº.trim hm)] : 0 ‚â§·µê[Œº] condexpL2 ‚Ñù hm (indicatorConstLp 2 hs hŒºs (1 : ‚Ñù)) := by
  have h : ae_strongly_measurable' m (condexp_L2 ‚Ñù hm (indicator_const_Lp 2 hs hŒºs (1 : ‚Ñù))) Œº :=
    ae_strongly_measurable'_condexp_L2 _ _
  refine' eventually_le.trans_eq _ h.ae_eq_mk.symm
  refine' @ae_le_of_ae_le_trim _ _ _ _ _ _ hm _ _ _
  refine' ae_nonneg_of_forall_set_integral_nonneg_of_sigma_finite _ _
  ¬∑ intro t ht hŒºt
    refine' @integrable.integrable_on _ _ m _ _ _ _ _
    refine' integrable.trim hm _ _
    ¬∑ rw [integrable_congr h.ae_eq_mk.symm]
      exact integrable_condexp_L2_indicator hm hs hŒºs _
    ¬∑ exact h.strongly_measurable_mk
  ¬∑ intro t ht hŒºt
    rw [‚Üê set_integral_trim hm h.strongly_measurable_mk ht]
    have h_ae :
      ‚àÄ·µê x ‚àÇŒº, x ‚àà t ‚Üí h.mk _ x = condexp_L2 ‚Ñù hm (indicator_const_Lp 2 hs hŒºs (1 : ‚Ñù)) x := by
      filter_upwards [h.ae_eq_mk] with x hx
      exact fun _ => hx.symm
    rw [set_integral_congr_ae (hm t ht) h_ae,
      set_integral_condexp_L2_indicator ht hs ((le_trim hm).trans_lt hŒºt).Ne hŒºs]
    exact Ennreal.to_real_nonneg
#align measure_theory.condexp_L2_indicator_nonneg MeasureTheory.condexp_L2_indicator_nonneg

theorem condexp_ind_smul_nonneg {E} [NormedLatticeAddCommGroup E] [NormedSpace ‚Ñù E]
    [OrderedSmul ‚Ñù E] [SigmaFinite (Œº.trim hm)] (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (x : E)
    (hx : 0 ‚â§ x) : 0 ‚â§·µê[Œº] condexpIndSmul hm hs hŒºs x := by
  refine' eventually_le.trans_eq _ (condexp_ind_smul_ae_eq_smul hm hs hŒºs x).symm
  filter_upwards [condexp_L2_indicator_nonneg hm hs hŒºs] with a ha
  exact smul_nonneg ha hx
#align measure_theory.condexp_ind_smul_nonneg MeasureTheory.condexp_ind_smul_nonneg

end CondexpIndSmul

end CondexpL2

section CondexpInd

/-! ## Conditional expectation of an indicator as a continuous linear map.

The goal of this section is to build
`condexp_ind (hm : m ‚â§ m0) (Œº : measure Œ±) (s : set s) : G ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] G`, which
takes `x : G` to the conditional expectation of the indicator of the set `s` with value `x`,
seen as an element of `Œ± ‚Üí‚ÇÅ[Œº] G`.
-/


variable {m m0 : MeasurableSpace Œ±} {Œº : Measure Œ±} {s t : Set Œ±} [NormedSpace ‚Ñù G]

section CondexpIndL1Fin

/-- Conditional expectation of the indicator of a measurable set with finite measure,
as a function in L1. -/
def condexpIndL1Fin (hm : m ‚â§ m0) [SigmaFinite (Œº.trim hm)] (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû)
    (x : G) : Œ± ‚Üí‚ÇÅ[Œº] G :=
  (integrableCondexpIndSmul hm hs hŒºs x).toL1 _
#align measure_theory.condexp_ind_L1_fin MeasureTheory.condexpIndL1Fin

theorem condexp_ind_L1_fin_ae_eq_condexp_ind_smul (hm : m ‚â§ m0) [SigmaFinite (Œº.trim hm)]
    (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (x : G) :
    condexpIndL1Fin hm hs hŒºs x =·µê[Œº] condexpIndSmul hm hs hŒºs x :=
  (integrableCondexpIndSmul hm hs hŒºs x).coe_fn_to_L1
#align
  measure_theory.condexp_ind_L1_fin_ae_eq_condexp_ind_smul MeasureTheory.condexp_ind_L1_fin_ae_eq_condexp_ind_smul

variable {hm : m ‚â§ m0} [SigmaFinite (Œº.trim hm)]

theorem condexp_ind_L1_fin_add (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (x y : G) :
    condexpIndL1Fin hm hs hŒºs (x + y) = condexpIndL1Fin hm hs hŒºs x + condexpIndL1Fin hm hs hŒºs y :=
  by 
  ext1
  refine' (mem_‚Ñíp.coe_fn_to_Lp _).trans _
  refine' eventually_eq.trans _ (Lp.coe_fn_add _ _).symm
  refine'
    eventually_eq.trans _
      (eventually_eq.add (mem_‚Ñíp.coe_fn_to_Lp _).symm (mem_‚Ñíp.coe_fn_to_Lp _).symm)
  rw [condexp_ind_smul_add]
  refine' (Lp.coe_fn_add _ _).trans (eventually_of_forall fun a => _)
  rfl
#align measure_theory.condexp_ind_L1_fin_add MeasureTheory.condexp_ind_L1_fin_add

theorem condexp_ind_L1_fin_smul (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (c : ‚Ñù) (x : G) :
    condexpIndL1Fin hm hs hŒºs (c ‚Ä¢ x) = c ‚Ä¢ condexpIndL1Fin hm hs hŒºs x := by
  ext1
  refine' (mem_‚Ñíp.coe_fn_to_Lp _).trans _
  refine' eventually_eq.trans _ (Lp.coe_fn_smul _ _).symm
  rw [condexp_ind_smul_smul hs hŒºs c x]
  refine' (Lp.coe_fn_smul _ _).trans _
  refine' (condexp_ind_L1_fin_ae_eq_condexp_ind_smul hm hs hŒºs x).mono fun y hy => _
  rw [Pi.smul_apply, Pi.smul_apply, hy]
#align measure_theory.condexp_ind_L1_fin_smul MeasureTheory.condexp_ind_L1_fin_smul

theorem condexp_ind_L1_fin_smul' [NormedSpace ‚Ñù F] [SMulCommClass ‚Ñù ùïú F] (hs : MeasurableSet s)
    (hŒºs : Œº s ‚â† ‚àû) (c : ùïú) (x : F) :
    condexpIndL1Fin hm hs hŒºs (c ‚Ä¢ x) = c ‚Ä¢ condexpIndL1Fin hm hs hŒºs x := by
  ext1
  refine' (mem_‚Ñíp.coe_fn_to_Lp _).trans _
  refine' eventually_eq.trans _ (Lp.coe_fn_smul _ _).symm
  rw [condexp_ind_smul_smul' hs hŒºs c x]
  refine' (Lp.coe_fn_smul _ _).trans _
  refine' (condexp_ind_L1_fin_ae_eq_condexp_ind_smul hm hs hŒºs x).mono fun y hy => _
  rw [Pi.smul_apply, Pi.smul_apply, hy]
#align measure_theory.condexp_ind_L1_fin_smul' MeasureTheory.condexp_ind_L1_fin_smul'

theorem norm_condexp_ind_L1_fin_le (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (x : G) :
    ‚ÄñcondexpIndL1Fin hm hs hŒºs x‚Äñ ‚â§ (Œº s).toReal * ‚Äñx‚Äñ := by
  have : 0 ‚â§ ‚à´ a : Œ±, ‚Äñcondexp_ind_L1_fin hm hs hŒºs x a‚Äñ ‚àÇŒº :=
    integral_nonneg fun a => norm_nonneg _
  rw [L1.norm_eq_integral_norm, ‚Üê Ennreal.to_real_of_real (norm_nonneg x), ‚Üê Ennreal.to_real_mul, ‚Üê
    Ennreal.to_real_of_real this,
    Ennreal.to_real_le_to_real Ennreal.of_real_ne_top
      (Ennreal.mul_ne_top hŒºs Ennreal.of_real_ne_top),
    of_real_integral_norm_eq_lintegral_nnnorm]
  swap
  ¬∑ rw [‚Üê mem_‚Ñíp_one_iff_integrable]
    exact Lp.mem_‚Ñíp _
  have h_eq :
    (‚à´‚Åª a, ‚Äñcondexp_ind_L1_fin hm hs hŒºs x a‚Äñ‚Çä ‚àÇŒº) = ‚à´‚Åª a, ‚Äñcondexp_ind_smul hm hs hŒºs x a‚Äñ‚Çä ‚àÇŒº :=
    by 
    refine' lintegral_congr_ae _
    refine' (condexp_ind_L1_fin_ae_eq_condexp_ind_smul hm hs hŒºs x).mono fun z hz => _
    dsimp only
    rw [hz]
  rw [h_eq, of_real_norm_eq_coe_nnnorm]
  exact lintegral_nnnorm_condexp_ind_smul_le hm hs hŒºs x
#align measure_theory.norm_condexp_ind_L1_fin_le MeasureTheory.norm_condexp_ind_L1_fin_le

theorem condexp_ind_L1_fin_disjoint_union (hs : MeasurableSet s) (ht : MeasurableSet t)
    (hŒºs : Œº s ‚â† ‚àû) (hŒºt : Œº t ‚â† ‚àû) (hst : s ‚à© t = ‚àÖ) (x : G) :
    condexpIndL1Fin hm (hs.union ht)
        ((measure_union_le s t).trans_lt
            (lt_top_iff_ne_top.mpr (Ennreal.add_ne_top.mpr ‚ü®hŒºs, hŒºt‚ü©))).Ne
        x =
      condexpIndL1Fin hm hs hŒºs x + condexpIndL1Fin hm ht hŒºt x :=
  by 
  ext1
  have hŒºst :=
    ((measure_union_le s t).trans_lt (lt_top_iff_ne_top.mpr (ennreal.add_ne_top.mpr ‚ü®hŒºs, hŒºt‚ü©))).Ne
  refine' (condexp_ind_L1_fin_ae_eq_condexp_ind_smul hm (hs.union ht) hŒºst x).trans _
  refine' eventually_eq.trans _ (Lp.coe_fn_add _ _).symm
  have hs_eq := condexp_ind_L1_fin_ae_eq_condexp_ind_smul hm hs hŒºs x
  have ht_eq := condexp_ind_L1_fin_ae_eq_condexp_ind_smul hm ht hŒºt x
  refine' eventually_eq.trans _ (eventually_eq.add hs_eq.symm ht_eq.symm)
  rw [condexp_ind_smul]
  rw [indicator_const_Lp_disjoint_union hs ht hŒºs hŒºt hst (1 : ‚Ñù)]
  rw [(condexp_L2 ‚Ñù hm).map_add]
  push_cast
  rw [((to_span_singleton ‚Ñù x).compLpL 2 Œº).map_add]
  refine' (Lp.coe_fn_add _ _).trans _
  refine' eventually_of_forall fun y => _
  rfl
#align
  measure_theory.condexp_ind_L1_fin_disjoint_union MeasureTheory.condexp_ind_L1_fin_disjoint_union

end CondexpIndL1Fin

open Classical

section CondexpIndL1

/-- Conditional expectation of the indicator of a set, as a function in L1. Its value for sets
which are not both measurable and of finite measure is not used: we set it to 0. -/
def condexpIndL1 {m m0 : MeasurableSpace Œ±} (hm : m ‚â§ m0) (Œº : Measure Œ±) (s : Set Œ±)
    [SigmaFinite (Œº.trim hm)] (x : G) : Œ± ‚Üí‚ÇÅ[Œº] G :=
  if hs : MeasurableSet s ‚àß Œº s ‚â† ‚àû then condexpIndL1Fin hm hs.1 hs.2 x else 0
#align measure_theory.condexp_ind_L1 MeasureTheory.condexpIndL1

variable {hm : m ‚â§ m0} [SigmaFinite (Œº.trim hm)]

theorem condexp_ind_L1_of_measurable_set_of_measure_ne_top (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû)
    (x : G) : condexpIndL1 hm Œº s x = condexpIndL1Fin hm hs hŒºs x := by
  simp only [condexp_ind_L1, And.intro hs hŒºs, dif_pos, Ne.def, not_false_iff, and_self_iff]
#align
  measure_theory.condexp_ind_L1_of_measurable_set_of_measure_ne_top MeasureTheory.condexp_ind_L1_of_measurable_set_of_measure_ne_top

theorem condexp_ind_L1_of_measure_eq_top (hŒºs : Œº s = ‚àû) (x : G) : condexpIndL1 hm Œº s x = 0 := by
  simp only [condexp_ind_L1, hŒºs, eq_self_iff_true, not_true, Ne.def, dif_neg, not_false_iff,
    and_false_iff]
#align
  measure_theory.condexp_ind_L1_of_measure_eq_top MeasureTheory.condexp_ind_L1_of_measure_eq_top

theorem condexp_ind_L1_of_not_measurable_set (hs : ¬¨MeasurableSet s) (x : G) :
    condexpIndL1 hm Œº s x = 0 := by
  simp only [condexp_ind_L1, hs, dif_neg, not_false_iff, false_and_iff]
#align
  measure_theory.condexp_ind_L1_of_not_measurable_set MeasureTheory.condexp_ind_L1_of_not_measurable_set

theorem condexp_ind_L1_add (x y : G) :
    condexpIndL1 hm Œº s (x + y) = condexpIndL1 hm Œº s x + condexpIndL1 hm Œº s y := by
  by_cases hs : MeasurableSet s
  swap;
  ¬∑ simp_rw [condexp_ind_L1_of_not_measurable_set hs]
    rw [zero_add]
  by_cases hŒºs : Œº s = ‚àû
  ¬∑ simp_rw [condexp_ind_L1_of_measure_eq_top hŒºs]
    rw [zero_add]
  ¬∑ simp_rw [condexp_ind_L1_of_measurable_set_of_measure_ne_top hs hŒºs]
    exact condexp_ind_L1_fin_add hs hŒºs x y
#align measure_theory.condexp_ind_L1_add MeasureTheory.condexp_ind_L1_add

theorem condexp_ind_L1_smul (c : ‚Ñù) (x : G) :
    condexpIndL1 hm Œº s (c ‚Ä¢ x) = c ‚Ä¢ condexpIndL1 hm Œº s x := by
  by_cases hs : MeasurableSet s
  swap;
  ¬∑ simp_rw [condexp_ind_L1_of_not_measurable_set hs]
    rw [smul_zero]
  by_cases hŒºs : Œº s = ‚àû
  ¬∑ simp_rw [condexp_ind_L1_of_measure_eq_top hŒºs]
    rw [smul_zero]
  ¬∑ simp_rw [condexp_ind_L1_of_measurable_set_of_measure_ne_top hs hŒºs]
    exact condexp_ind_L1_fin_smul hs hŒºs c x
#align measure_theory.condexp_ind_L1_smul MeasureTheory.condexp_ind_L1_smul

theorem condexp_ind_L1_smul' [NormedSpace ‚Ñù F] [SMulCommClass ‚Ñù ùïú F] (c : ùïú) (x : F) :
    condexpIndL1 hm Œº s (c ‚Ä¢ x) = c ‚Ä¢ condexpIndL1 hm Œº s x := by
  by_cases hs : MeasurableSet s
  swap;
  ¬∑ simp_rw [condexp_ind_L1_of_not_measurable_set hs]
    rw [smul_zero]
  by_cases hŒºs : Œº s = ‚àû
  ¬∑ simp_rw [condexp_ind_L1_of_measure_eq_top hŒºs]
    rw [smul_zero]
  ¬∑ simp_rw [condexp_ind_L1_of_measurable_set_of_measure_ne_top hs hŒºs]
    exact condexp_ind_L1_fin_smul' hs hŒºs c x
#align measure_theory.condexp_ind_L1_smul' MeasureTheory.condexp_ind_L1_smul'

theorem norm_condexp_ind_L1_le (x : G) : ‚ÄñcondexpIndL1 hm Œº s x‚Äñ ‚â§ (Œº s).toReal * ‚Äñx‚Äñ := by
  by_cases hs : MeasurableSet s
  swap;
  ¬∑ simp_rw [condexp_ind_L1_of_not_measurable_set hs]
    rw [Lp.norm_zero]
    exact mul_nonneg Ennreal.to_real_nonneg (norm_nonneg _)
  by_cases hŒºs : Œº s = ‚àû
  ¬∑ rw [condexp_ind_L1_of_measure_eq_top hŒºs x, Lp.norm_zero]
    exact mul_nonneg Ennreal.to_real_nonneg (norm_nonneg _)
  ¬∑ rw [condexp_ind_L1_of_measurable_set_of_measure_ne_top hs hŒºs x]
    exact norm_condexp_ind_L1_fin_le hs hŒºs x
#align measure_theory.norm_condexp_ind_L1_le MeasureTheory.norm_condexp_ind_L1_le

theorem continuous_condexp_ind_L1 : Continuous fun x : G => condexpIndL1 hm Œº s x :=
  continuous_of_linear_of_bound condexp_ind_L1_add condexp_ind_L1_smul norm_condexp_ind_L1_le
#align measure_theory.continuous_condexp_ind_L1 MeasureTheory.continuous_condexp_ind_L1

theorem condexp_ind_L1_disjoint_union (hs : MeasurableSet s) (ht : MeasurableSet t) (hŒºs : Œº s ‚â† ‚àû)
    (hŒºt : Œº t ‚â† ‚àû) (hst : s ‚à© t = ‚àÖ) (x : G) :
    condexpIndL1 hm Œº (s ‚à™ t) x = condexpIndL1 hm Œº s x + condexpIndL1 hm Œº t x := by
  have hŒºst : Œº (s ‚à™ t) ‚â† ‚àû :=
    ((measure_union_le s t).trans_lt (lt_top_iff_ne_top.mpr (ennreal.add_ne_top.mpr ‚ü®hŒºs, hŒºt‚ü©))).Ne
  rw [condexp_ind_L1_of_measurable_set_of_measure_ne_top hs hŒºs x,
    condexp_ind_L1_of_measurable_set_of_measure_ne_top ht hŒºt x,
    condexp_ind_L1_of_measurable_set_of_measure_ne_top (hs.union ht) hŒºst x]
  exact condexp_ind_L1_fin_disjoint_union hs ht hŒºs hŒºt hst x
#align measure_theory.condexp_ind_L1_disjoint_union MeasureTheory.condexp_ind_L1_disjoint_union

end CondexpIndL1

/-- Conditional expectation of the indicator of a set, as a linear map from `G` to L1. -/
def condexpInd {m m0 : MeasurableSpace Œ±} (hm : m ‚â§ m0) (Œº : Measure Œ±) [SigmaFinite (Œº.trim hm)]
    (s : Set Œ±) : G ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº]
        G where 
  toFun := condexpIndL1 hm Œº s
  map_add' := condexp_ind_L1_add
  map_smul' := condexp_ind_L1_smul
  cont := continuous_condexp_ind_L1
#align measure_theory.condexp_ind MeasureTheory.condexpInd

theorem condexp_ind_ae_eq_condexp_ind_smul (hm : m ‚â§ m0) [SigmaFinite (Œº.trim hm)]
    (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (x : G) :
    condexpInd hm Œº s x =·µê[Œº] condexpIndSmul hm hs hŒºs x := by
  refine' eventually_eq.trans _ (condexp_ind_L1_fin_ae_eq_condexp_ind_smul hm hs hŒºs x)
  simp [condexp_ind, condexp_ind_L1, hs, hŒºs]
#align
  measure_theory.condexp_ind_ae_eq_condexp_ind_smul MeasureTheory.condexp_ind_ae_eq_condexp_ind_smul

variable {hm : m ‚â§ m0} [SigmaFinite (Œº.trim hm)]

theorem aeStronglyMeasurable'CondexpInd (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (x : G) :
    AeStronglyMeasurable' m (condexpInd hm Œº s x) Œº :=
  AeStronglyMeasurable'.congr (aeStronglyMeasurable'CondexpIndSmul hm hs hŒºs x)
    (condexp_ind_ae_eq_condexp_ind_smul hm hs hŒºs x).symm
#align
  measure_theory.ae_strongly_measurable'_condexp_ind MeasureTheory.aeStronglyMeasurable'CondexpInd

@[simp]
theorem condexp_ind_empty : condexpInd hm Œº ‚àÖ = (0 : G ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] G) := by
  ext1
  ext1
  refine' (condexp_ind_ae_eq_condexp_ind_smul hm MeasurableSet.empty (by simp) x).trans _
  rw [condexp_ind_smul_empty]
  refine' (Lp.coe_fn_zero G 2 Œº).trans _
  refine' eventually_eq.trans _ (Lp.coe_fn_zero G 1 Œº).symm
  rfl
#align measure_theory.condexp_ind_empty MeasureTheory.condexp_ind_empty

theorem condexp_ind_smul' [NormedSpace ‚Ñù F] [SMulCommClass ‚Ñù ùïú F] (c : ùïú) (x : F) :
    condexpInd hm Œº s (c ‚Ä¢ x) = c ‚Ä¢ condexpInd hm Œº s x :=
  condexp_ind_L1_smul' c x
#align measure_theory.condexp_ind_smul' MeasureTheory.condexp_ind_smul'

theorem norm_condexp_ind_apply_le (x : G) : ‚ÄñcondexpInd hm Œº s x‚Äñ ‚â§ (Œº s).toReal * ‚Äñx‚Äñ :=
  norm_condexp_ind_L1_le x
#align measure_theory.norm_condexp_ind_apply_le MeasureTheory.norm_condexp_ind_apply_le

theorem norm_condexp_ind_le : ‚Äñ(condexpInd hm Œº s : G ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] G)‚Äñ ‚â§ (Œº s).toReal :=
  ContinuousLinearMap.op_norm_le_bound _ Ennreal.to_real_nonneg norm_condexp_ind_apply_le
#align measure_theory.norm_condexp_ind_le MeasureTheory.norm_condexp_ind_le

theorem condexp_ind_disjoint_union_apply (hs : MeasurableSet s) (ht : MeasurableSet t)
    (hŒºs : Œº s ‚â† ‚àû) (hŒºt : Œº t ‚â† ‚àû) (hst : s ‚à© t = ‚àÖ) (x : G) :
    condexpInd hm Œº (s ‚à™ t) x = condexpInd hm Œº s x + condexpInd hm Œº t x :=
  condexp_ind_L1_disjoint_union hs ht hŒºs hŒºt hst x
#align
  measure_theory.condexp_ind_disjoint_union_apply MeasureTheory.condexp_ind_disjoint_union_apply

theorem condexp_ind_disjoint_union (hs : MeasurableSet s) (ht : MeasurableSet t) (hŒºs : Œº s ‚â† ‚àû)
    (hŒºt : Œº t ‚â† ‚àû) (hst : s ‚à© t = ‚àÖ) :
    (condexpInd hm Œº (s ‚à™ t) : G ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] G) = condexpInd hm Œº s + condexpInd hm Œº t := by
  ext1
  push_cast
  exact condexp_ind_disjoint_union_apply hs ht hŒºs hŒºt hst x
#align measure_theory.condexp_ind_disjoint_union MeasureTheory.condexp_ind_disjoint_union

variable (G)

theorem dominatedFinMeasAdditiveCondexpInd (hm : m ‚â§ m0) (Œº : Measure Œ±) [SigmaFinite (Œº.trim hm)] :
    DominatedFinMeasAdditive Œº (condexpInd hm Œº : Set Œ± ‚Üí G ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] G) 1 :=
  ‚ü®fun s t => condexp_ind_disjoint_union, fun s _ _ =>
    norm_condexp_ind_le.trans (one_mul _).symm.le‚ü©
#align
  measure_theory.dominated_fin_meas_additive_condexp_ind MeasureTheory.dominatedFinMeasAdditiveCondexpInd

variable {G}

theorem set_integral_condexp_ind (hs : measurable_set[m] s) (ht : MeasurableSet t) (hŒºs : Œº s ‚â† ‚àû)
    (hŒºt : Œº t ‚â† ‚àû) (x : G') : (‚à´ a in s, condexpInd hm Œº t x a ‚àÇŒº) = (Œº (t ‚à© s)).toReal ‚Ä¢ x :=
  calc
    (‚à´ a in s, condexpInd hm Œº t x a ‚àÇŒº) = ‚à´ a in s, condexpIndSmul hm ht hŒºt x a ‚àÇŒº :=
      set_integral_congr_ae (hm s hs)
        ((condexp_ind_ae_eq_condexp_ind_smul hm ht hŒºt x).mono fun x hx hxs => hx)
    _ = (Œº (t ‚à© s)).toReal ‚Ä¢ x := set_integral_condexp_ind_smul hs ht hŒºs hŒºt x
    
#align measure_theory.set_integral_condexp_ind MeasureTheory.set_integral_condexp_ind

theorem condexp_ind_of_measurable (hs : measurable_set[m] s) (hŒºs : Œº s ‚â† ‚àû) (c : G) :
    condexpInd hm Œº s c = indicatorConstLp 1 (hm s hs) hŒºs c := by
  ext1
  refine' eventually_eq.trans _ indicator_const_Lp_coe_fn.symm
  refine' (condexp_ind_ae_eq_condexp_ind_smul hm (hm s hs) hŒºs c).trans _
  refine' (condexp_ind_smul_ae_eq_smul hm (hm s hs) hŒºs c).trans _
  rw [Lp_meas_coe, condexp_L2_indicator_of_measurable hm hs hŒºs (1 : ‚Ñù)]
  refine' (@indicator_const_Lp_coe_fn Œ± _ _ 2 Œº _ s (hm s hs) hŒºs (1 : ‚Ñù)).mono fun x hx => _
  dsimp only
  rw [hx]
  by_cases hx_mem : x ‚àà s <;> simp [hx_mem]
#align measure_theory.condexp_ind_of_measurable MeasureTheory.condexp_ind_of_measurable

theorem condexp_ind_nonneg {E} [NormedLatticeAddCommGroup E] [NormedSpace ‚Ñù E] [OrderedSmul ‚Ñù E]
    (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (x : E) (hx : 0 ‚â§ x) : 0 ‚â§ condexpInd hm Œº s x := by
  rw [‚Üê coe_fn_le]
  refine' eventually_le.trans_eq _ (condexp_ind_ae_eq_condexp_ind_smul hm hs hŒºs x).symm
  exact (coe_fn_zero E 1 Œº).trans_le (condexp_ind_smul_nonneg hs hŒºs x hx)
#align measure_theory.condexp_ind_nonneg MeasureTheory.condexp_ind_nonneg

end CondexpInd

section CondexpL1

variable {m m0 : MeasurableSpace Œ±} {Œº : Measure Œ±} {hm : m ‚â§ m0} [SigmaFinite (Œº.trim hm)]
  {f g : Œ± ‚Üí F'} {s : Set Œ±}

/-- Conditional expectation of a function as a linear map from `Œ± ‚Üí‚ÇÅ[Œº] F'` to itself. -/
def condexpL1Clm (hm : m ‚â§ m0) (Œº : Measure Œ±) [SigmaFinite (Œº.trim hm)] :
    (Œ± ‚Üí‚ÇÅ[Œº] F') ‚ÜíL[‚Ñù] Œ± ‚Üí‚ÇÅ[Œº] F' :=
  L1Cat.setToL1 (dominatedFinMeasAdditiveCondexpInd F' hm Œº)
#align measure_theory.condexp_L1_clm MeasureTheory.condexpL1Clm

theorem condexp_L1_clm_smul (c : ùïú) (f : Œ± ‚Üí‚ÇÅ[Œº] F') :
    condexpL1Clm hm Œº (c ‚Ä¢ f) = c ‚Ä¢ condexpL1Clm hm Œº f :=
  L1Cat.set_to_L1_smul (dominatedFinMeasAdditiveCondexpInd F' hm Œº)
    (fun c s x => condexp_ind_smul' c x) c f
#align measure_theory.condexp_L1_clm_smul MeasureTheory.condexp_L1_clm_smul

theorem condexp_L1_clm_indicator_const_Lp (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (x : F') :
    (condexpL1Clm hm Œº) (indicatorConstLp 1 hs hŒºs x) = condexpInd hm Œº s x :=
  L1Cat.set_to_L1_indicator_const_Lp (dominatedFinMeasAdditiveCondexpInd F' hm Œº) hs hŒºs x
#align
  measure_theory.condexp_L1_clm_indicator_const_Lp MeasureTheory.condexp_L1_clm_indicator_const_Lp

theorem condexp_L1_clm_indicator_const (hs : MeasurableSet s) (hŒºs : Œº s ‚â† ‚àû) (x : F') :
    (condexpL1Clm hm Œº) ‚Üë(simpleFunc.indicatorConst 1 hs hŒºs x) = condexpInd hm Œº s x := by
  rw [Lp.simple_func.coe_indicator_const]
  exact condexp_L1_clm_indicator_const_Lp hs hŒºs x
#align measure_theory.condexp_L1_clm_indicator_const MeasureTheory.condexp_L1_clm_indicator_const

/-- Auxiliary lemma used in the proof of `set_integral_condexp_L1_clm`. -/
theorem set_integral_condexp_L1_clm_of_measure_ne_top (f : Œ± ‚Üí‚ÇÅ[Œº] F') (hs : measurable_set[m] s)
    (hŒºs : Œº s ‚â† ‚àû) : (‚à´ x in s, condexpL1Clm hm Œº f x ‚àÇŒº) = ‚à´ x in s, f x ‚àÇŒº := by
  refine'
    Lp.induction Ennreal.one_ne_top
      (fun f : Œ± ‚Üí‚ÇÅ[Œº] F' => (‚à´ x in s, condexp_L1_clm hm Œº f x ‚àÇŒº) = ‚à´ x in s, f x ‚àÇŒº) _ _
      (is_closed_eq _ _) f
  ¬∑ intro x t ht hŒºt
    simp_rw [condexp_L1_clm_indicator_const ht hŒºt.ne x]
    rw [Lp.simple_func.coe_indicator_const, set_integral_indicator_const_Lp (hm _ hs)]
    exact set_integral_condexp_ind hs ht hŒºs hŒºt.ne x
  ¬∑ intro f g hf_Lp hg_Lp hfg_disj hf hg
    simp_rw [(condexp_L1_clm hm Œº).map_add]
    rw [set_integral_congr_ae (hm s hs)
        ((Lp.coe_fn_add (condexp_L1_clm hm Œº (hf_Lp.to_Lp f))
              (condexp_L1_clm hm Œº (hg_Lp.to_Lp g))).mono
          fun x hx hxs => hx)]
    rw [set_integral_congr_ae (hm s hs)
        ((Lp.coe_fn_add (hf_Lp.to_Lp f) (hg_Lp.to_Lp g)).mono fun x hx hxs => hx)]
    simp_rw [Pi.add_apply]
    rw [integral_add (L1.integrable_coe_fn _).IntegrableOn (L1.integrable_coe_fn _).IntegrableOn,
      integral_add (L1.integrable_coe_fn _).IntegrableOn (L1.integrable_coe_fn _).IntegrableOn, hf,
      hg]
  ¬∑ exact (continuous_set_integral s).comp (condexp_L1_clm hm Œº).Continuous
  ¬∑ exact continuous_set_integral s
#align
  measure_theory.set_integral_condexp_L1_clm_of_measure_ne_top MeasureTheory.set_integral_condexp_L1_clm_of_measure_ne_top

/-- The integral of the conditional expectation `condexp_L1_clm` over an `m`-measurable set is equal
to the integral of `f` on that set. See also `set_integral_condexp`, the similar statement for
`condexp`. -/
theorem set_integral_condexp_L1_clm (f : Œ± ‚Üí‚ÇÅ[Œº] F') (hs : measurable_set[m] s) :
    (‚à´ x in s, condexpL1Clm hm Œº f x ‚àÇŒº) = ‚à´ x in s, f x ‚àÇŒº := by
  let S := spanning_sets (Œº.trim hm)
  have hS_meas : ‚àÄ i, measurable_set[m] (S i) := measurable_spanning_sets (Œº.trim hm)
  have hS_meas0 : ‚àÄ i, MeasurableSet (S i) := fun i => hm _ (hS_meas i)
  have hs_eq : s = ‚ãÉ i, S i ‚à© s := by 
    simp_rw [Set.inter_comm]
    rw [‚Üê Set.inter_Union, Union_spanning_sets (Œº.trim hm), Set.inter_univ]
  have hS_finite : ‚àÄ i, Œº (S i ‚à© s) < ‚àû := by
    refine' fun i => (measure_mono (Set.inter_subset_left _ _)).trans_lt _
    have hS_finite_trim := measure_spanning_sets_lt_top (Œº.trim hm) i
    rwa [trim_measurable_set_eq hm (hS_meas i)] at hS_finite_trim
  have h_mono : Monotone fun i => S i ‚à© s := by
    intro i j hij x
    simp_rw [Set.mem_inter_iff]
    exact fun h => ‚ü®monotone_spanning_sets (Œº.trim hm) hij h.1, h.2‚ü©
  have h_eq_forall :
    (fun i => ‚à´ x in S i ‚à© s, condexp_L1_clm hm Œº f x ‚àÇŒº) = fun i => ‚à´ x in S i ‚à© s, f x ‚àÇŒº :=
    funext fun i =>
      set_integral_condexp_L1_clm_of_measure_ne_top f (@MeasurableSet.inter Œ± m _ _ (hS_meas i) hs)
        (hS_finite i).Ne
  have h_right : tendsto (fun i => ‚à´ x in S i ‚à© s, f x ‚àÇŒº) at_top (ùìù (‚à´ x in s, f x ‚àÇŒº)) := by
    have h :=
      tendsto_set_integral_of_monotone (fun i => (hS_meas0 i).inter (hm s hs)) h_mono
        (L1.integrable_coe_fn f).IntegrableOn
    rwa [‚Üê hs_eq] at h
  have h_left :
    tendsto (fun i => ‚à´ x in S i ‚à© s, condexp_L1_clm hm Œº f x ‚àÇŒº) at_top
      (ùìù (‚à´ x in s, condexp_L1_clm hm Œº f x ‚àÇŒº)) :=
    by
    have h :=
      tendsto_set_integral_of_monotone (fun i => (hS_meas0 i).inter (hm s hs)) h_mono
        (L1.integrable_coe_fn (condexp_L1_clm hm Œº f)).IntegrableOn
    rwa [‚Üê hs_eq] at h
  rw [h_eq_forall] at h_left
  exact tendsto_nhds_unique h_left h_right
#align measure_theory.set_integral_condexp_L1_clm MeasureTheory.set_integral_condexp_L1_clm

theorem aeStronglyMeasurable'CondexpL1Clm (f : Œ± ‚Üí‚ÇÅ[Œº] F') :
    AeStronglyMeasurable' m (condexpL1Clm hm Œº f) Œº := by
  refine'
    Lp.induction Ennreal.one_ne_top
      (fun f : Œ± ‚Üí‚ÇÅ[Œº] F' => ae_strongly_measurable' m (condexp_L1_clm hm Œº f) Œº) _ _ _ f
  ¬∑ intro c s hs hŒºs
    rw [condexp_L1_clm_indicator_const hs hŒºs.ne c]
    exact ae_strongly_measurable'_condexp_ind hs hŒºs.ne c
  ¬∑ intro f g hf hg h_disj hfm hgm
    rw [(condexp_L1_clm hm Œº).map_add]
    refine' ae_strongly_measurable'.congr _ (coe_fn_add _ _).symm
    exact ae_strongly_measurable'.add hfm hgm
  ¬∑ have :
      { f : Lp F' 1 Œº | ae_strongly_measurable' m (condexp_L1_clm hm Œº f) Œº } =
        condexp_L1_clm hm Œº ‚Åª¬π' { f | ae_strongly_measurable' m f Œº } :=
      by rfl
    rw [this]
    refine' IsClosed.preimage (condexp_L1_clm hm Œº).Continuous _
    exact is_closed_ae_strongly_measurable' hm
#align
  measure_theory.ae_strongly_measurable'_condexp_L1_clm MeasureTheory.aeStronglyMeasurable'CondexpL1Clm

theorem condexp_L1_clm_Lp_meas (f : lpMeas F' ‚Ñù m 1 Œº) : condexpL1Clm hm Œº (f : Œ± ‚Üí‚ÇÅ[Œº] F') = ‚Üëf :=
  by 
  let g := Lp_meas_to_Lp_trim_lie F' ‚Ñù 1 Œº hm f
  have hfg : f = (Lp_meas_to_Lp_trim_lie F' ‚Ñù 1 Œº hm).symm g := by
    simp only [LinearIsometryEquiv.symm_apply_apply]
  rw [hfg]
  refine'
    @Lp.induction Œ± F' m _ 1 (Œº.trim hm) _ Ennreal.coe_ne_top
      (fun g : Œ± ‚Üí‚ÇÅ[Œº.trim hm] F' =>
        condexp_L1_clm hm Œº ((Lp_meas_to_Lp_trim_lie F' ‚Ñù 1 Œº hm).symm g : Œ± ‚Üí‚ÇÅ[Œº] F') =
          ‚Üë((Lp_meas_to_Lp_trim_lie F' ‚Ñù 1 Œº hm).symm g))
      _ _ _ g
  ¬∑ intro c s hs hŒºs
    rw [Lp.simple_func.coe_indicator_const, Lp_meas_to_Lp_trim_lie_symm_indicator hs hŒºs.ne c,
      condexp_L1_clm_indicator_const_Lp]
    exact condexp_ind_of_measurable hs ((le_trim hm).trans_lt hŒºs).Ne c
  ¬∑ intro f g hf hg hfg_disj hf_eq hg_eq
    rw [LinearIsometryEquiv.map_add]
    push_cast
    rw [map_add, hf_eq, hg_eq]
  ¬∑ refine' is_closed_eq _ _
    ¬∑ refine' (condexp_L1_clm hm Œº).Continuous.comp (continuous_induced_dom.comp _)
      exact LinearIsometryEquiv.continuous _
    ¬∑ refine' continuous_induced_dom.comp _
      exact LinearIsometryEquiv.continuous _
#align measure_theory.condexp_L1_clm_Lp_meas MeasureTheory.condexp_L1_clm_Lp_meas

theorem condexp_L1_clm_of_ae_strongly_measurable' (f : Œ± ‚Üí‚ÇÅ[Œº] F')
    (hfm : AeStronglyMeasurable' m f Œº) : condexpL1Clm hm Œº f = f :=
  condexp_L1_clm_Lp_meas (‚ü®f, hfm‚ü© : lpMeas F' ‚Ñù m 1 Œº)
#align
  measure_theory.condexp_L1_clm_of_ae_strongly_measurable' MeasureTheory.condexp_L1_clm_of_ae_strongly_measurable'

/-- Conditional expectation of a function, in L1. Its value is 0 if the function is not
integrable. The function-valued `condexp` should be used instead in most cases. -/
def condexpL1 (hm : m ‚â§ m0) (Œº : Measure Œ±) [SigmaFinite (Œº.trim hm)] (f : Œ± ‚Üí F') : Œ± ‚Üí‚ÇÅ[Œº] F' :=
  setToFun Œº (condexpInd hm Œº) (dominatedFinMeasAdditiveCondexpInd F' hm Œº) f
#align measure_theory.condexp_L1 MeasureTheory.condexpL1

theorem condexp_L1_undef (hf : ¬¨Integrable f Œº) : condexpL1 hm Œº f = 0 :=
  set_to_fun_undef (dominatedFinMeasAdditiveCondexpInd F' hm Œº) hf
#align measure_theory.condexp_L1_undef MeasureTheory.condexp_L1_undef

theorem condexp_L1_eq (hf : Integrable f Œº) : condexpL1 hm Œº f = condexpL1Clm hm Œº (hf.toL1 f) :=
  set_to_fun_eq (dominatedFinMeasAdditiveCondexpInd F' hm Œº) hf
#align measure_theory.condexp_L1_eq MeasureTheory.condexp_L1_eq

@[simp]
theorem condexp_L1_zero : condexpL1 hm Œº (0 : Œ± ‚Üí F') = 0 :=
  set_to_fun_zero _
#align measure_theory.condexp_L1_zero MeasureTheory.condexp_L1_zero

@[simp]
theorem condexp_L1_measure_zero (hm : m ‚â§ m0) : condexpL1 hm (0 : Measure Œ±) f = 0 :=
  set_to_fun_measure_zero _ rfl
#align measure_theory.condexp_L1_measure_zero MeasureTheory.condexp_L1_measure_zero

theorem aeStronglyMeasurable'CondexpL1 {f : Œ± ‚Üí F'} :
    AeStronglyMeasurable' m (condexpL1 hm Œº f) Œº := by
  by_cases hf : integrable f Œº
  ¬∑ rw [condexp_L1_eq hf]
    exact ae_strongly_measurable'_condexp_L1_clm _
  ¬∑ rw [condexp_L1_undef hf]
    refine' ae_strongly_measurable'.congr _ (coe_fn_zero _ _ _).symm
    exact strongly_measurable.ae_strongly_measurable' (@strongly_measurable_zero _ _ m _ _)
#align
  measure_theory.ae_strongly_measurable'_condexp_L1 MeasureTheory.aeStronglyMeasurable'CondexpL1

theorem condexp_L1_congr_ae (hm : m ‚â§ m0) [SigmaFinite (Œº.trim hm)] (h : f =·µê[Œº] g) :
    condexpL1 hm Œº f = condexpL1 hm Œº g :=
  set_to_fun_congr_ae _ h
#align measure_theory.condexp_L1_congr_ae MeasureTheory.condexp_L1_congr_ae

theorem integrableCondexpL1 (f : Œ± ‚Üí F') : Integrable (condexpL1 hm Œº f) Œº :=
  L1Cat.integrableCoeFn _
#align measure_theory.integrable_condexp_L1 MeasureTheory.integrableCondexpL1

/-- The integral of the conditional expectation `condexp_L1` over an `m`-measurable set is equal to
the integral of `f` on that set. See also `set_integral_condexp`, the similar statement for
`condexp`. -/
theorem set_integral_condexp_L1 (hf : Integrable f Œº) (hs : measurable_set[m] s) :
    (‚à´ x in s, condexpL1 hm Œº f x ‚àÇŒº) = ‚à´ x in s, f x ‚àÇŒº := by
  simp_rw [condexp_L1_eq hf]
  rw [set_integral_condexp_L1_clm (hf.to_L1 f) hs]
  exact set_integral_congr_ae (hm s hs) (hf.coe_fn_to_L1.mono fun x hx hxs => hx)
#align measure_theory.set_integral_condexp_L1 MeasureTheory.set_integral_condexp_L1

theorem condexp_L1_add (hf : Integrable f Œº) (hg : Integrable g Œº) :
    condexpL1 hm Œº (f + g) = condexpL1 hm Œº f + condexpL1 hm Œº g :=
  set_to_fun_add _ hf hg
#align measure_theory.condexp_L1_add MeasureTheory.condexp_L1_add

theorem condexp_L1_neg (f : Œ± ‚Üí F') : condexpL1 hm Œº (-f) = -condexpL1 hm Œº f :=
  set_to_fun_neg _ f
#align measure_theory.condexp_L1_neg MeasureTheory.condexp_L1_neg

theorem condexp_L1_smul (c : ùïú) (f : Œ± ‚Üí F') : condexpL1 hm Œº (c ‚Ä¢ f) = c ‚Ä¢ condexpL1 hm Œº f :=
  set_to_fun_smul _ (fun c _ x => condexp_ind_smul' c x) c f
#align measure_theory.condexp_L1_smul MeasureTheory.condexp_L1_smul

theorem condexp_L1_sub (hf : Integrable f Œº) (hg : Integrable g Œº) :
    condexpL1 hm Œº (f - g) = condexpL1 hm Œº f - condexpL1 hm Œº g :=
  set_to_fun_sub _ hf hg
#align measure_theory.condexp_L1_sub MeasureTheory.condexp_L1_sub

theorem condexp_L1_of_ae_strongly_measurable' (hfm : AeStronglyMeasurable' m f Œº)
    (hfi : Integrable f Œº) : condexpL1 hm Œº f =·µê[Œº] f := by
  rw [condexp_L1_eq hfi]
  refine' eventually_eq.trans _ (integrable.coe_fn_to_L1 hfi)
  rw [condexp_L1_clm_of_ae_strongly_measurable']
  exact ae_strongly_measurable'.congr hfm (integrable.coe_fn_to_L1 hfi).symm
#align
  measure_theory.condexp_L1_of_ae_strongly_measurable' MeasureTheory.condexp_L1_of_ae_strongly_measurable'

theorem condexp_L1_mono {E} [NormedLatticeAddCommGroup E] [CompleteSpace E] [NormedSpace ‚Ñù E]
    [OrderedSmul ‚Ñù E] {f g : Œ± ‚Üí E} (hf : Integrable f Œº) (hg : Integrable g Œº) (hfg : f ‚â§·µê[Œº] g) :
    condexpL1 hm Œº f ‚â§·µê[Œº] condexpL1 hm Œº g := by
  rw [coe_fn_le]
  have h_nonneg : ‚àÄ s, MeasurableSet s ‚Üí Œº s < ‚àû ‚Üí ‚àÄ x : E, 0 ‚â§ x ‚Üí 0 ‚â§ condexp_ind hm Œº s x :=
    fun s hs hŒºs x hx => condexp_ind_nonneg hs hŒºs.Ne x hx
  exact set_to_fun_mono (dominated_fin_meas_additive_condexp_ind E hm Œº) h_nonneg hf hg hfg
#align measure_theory.condexp_L1_mono MeasureTheory.condexp_L1_mono

end CondexpL1

section Condexp

/-! ### Conditional expectation of a function -/


open Classical

variable {ùïú} {m m0 : MeasurableSpace Œ±} {Œº : Measure Œ±} {f g : Œ± ‚Üí F'} {s : Set Œ±}

/-- Conditional expectation of a function. It is defined as 0 if any one of the following conditions
is true:
- `m` is not a sub-œÉ-algebra of `m0`,
- `Œº` is not œÉ-finite with respect to `m`,
- `f` is not integrable. -/
irreducible_def condexp (m : MeasurableSpace Œ±) {m0 : MeasurableSpace Œ±} (Œº : Measure Œ±)
  (f : Œ± ‚Üí F') : Œ± ‚Üí F' :=
  if hm : m ‚â§ m0 then
    if h : SigmaFinite (Œº.trim hm) ‚àß Integrable f Œº then
      if strongly_measurable[m] f then f
      else
        (@aeStronglyMeasurable'CondexpL1 _ _ _ _ _ m m0 Œº hm h.1 _).mk
          (@condexpL1 _ _ _ _ _ _ _ hm Œº h.1 f)
    else 0
  else 0
#align measure_theory.condexp MeasureTheory.condexp

-- mathport name: measure_theory.condexp
-- We define notation `Œº[f|m]` for the conditional expectation of `f` with respect to `m`.
scoped notation Œº "[" f "|" m "]" => MeasureTheory.condexp m Œº f

theorem condexp_of_not_le (hm_not : ¬¨m ‚â§ m0) : Œº[f|m] = 0 := by rw [condexp, dif_neg hm_not]
#align measure_theory.condexp_of_not_le MeasureTheory.condexp_of_not_le

theorem condexp_of_not_sigma_finite (hm : m ‚â§ m0) (hŒºm_not : ¬¨SigmaFinite (Œº.trim hm)) :
    Œº[f|m] = 0 := by 
  rw [condexp, dif_pos hm, dif_neg]
  push_neg
  exact fun h => absurd h hŒºm_not
#align measure_theory.condexp_of_not_sigma_finite MeasureTheory.condexp_of_not_sigma_finite

theorem condexp_of_sigma_finite (hm : m ‚â§ m0) [hŒºm : SigmaFinite (Œº.trim hm)] :
    Œº[f|m] =
      if Integrable f Œº then
        if strongly_measurable[m] f then f else aeStronglyMeasurable'CondexpL1.mk (condexpL1 hm Œº f)
      else 0 :=
  by 
  rw [condexp, dif_pos hm]
  simp only [hŒºm, Ne.def, true_and_iff]
  by_cases hf : integrable f Œº
  ¬∑ rw [dif_pos hf, if_pos hf]
  ¬∑ rw [dif_neg hf, if_neg hf]
#align measure_theory.condexp_of_sigma_finite MeasureTheory.condexp_of_sigma_finite

theorem condexp_of_strongly_measurable (hm : m ‚â§ m0) [hŒºm : SigmaFinite (Œº.trim hm)] {f : Œ± ‚Üí F'}
    (hf : strongly_measurable[m] f) (hfi : Integrable f Œº) : Œº[f|m] = f := by
  rw [condexp_of_sigma_finite hm, if_pos hfi, if_pos hf]
  infer_instance
#align measure_theory.condexp_of_strongly_measurable MeasureTheory.condexp_of_strongly_measurable

theorem condexp_const (hm : m ‚â§ m0) (c : F') [IsFiniteMeasure Œº] :
    Œº[fun x : Œ± => c|m] = fun _ => c :=
  condexp_of_strongly_measurable hm (@stronglyMeasurableConst _ _ m _ _) (integrableConst c)
#align measure_theory.condexp_const MeasureTheory.condexp_const

theorem condexp_ae_eq_condexp_L1 (hm : m ‚â§ m0) [hŒºm : SigmaFinite (Œº.trim hm)] (f : Œ± ‚Üí F') :
    Œº[f|m] =·µê[Œº] condexpL1 hm Œº f := by
  rw [condexp_of_sigma_finite hm]
  by_cases hfi : integrable f Œº
  ¬∑ rw [if_pos hfi]
    by_cases hfm : strongly_measurable[m] f
    ¬∑ rw [if_pos hfm]
      exact
        (condexp_L1_of_ae_strongly_measurable' (strongly_measurable.ae_strongly_measurable' hfm)
            hfi).symm
    ¬∑ rw [if_neg hfm]
      exact (ae_strongly_measurable'.ae_eq_mk ae_strongly_measurable'_condexp_L1).symm
  rw [if_neg hfi, condexp_L1_undef hfi]
  exact (coe_fn_zero _ _ _).symm
#align measure_theory.condexp_ae_eq_condexp_L1 MeasureTheory.condexp_ae_eq_condexp_L1

theorem condexp_ae_eq_condexp_L1_clm (hm : m ‚â§ m0) [SigmaFinite (Œº.trim hm)] (hf : Integrable f Œº) :
    Œº[f|m] =·µê[Œº] condexpL1Clm hm Œº (hf.toL1 f) := by
  refine' (condexp_ae_eq_condexp_L1 hm f).trans (eventually_of_forall fun x => _)
  rw [condexp_L1_eq hf]
#align measure_theory.condexp_ae_eq_condexp_L1_clm MeasureTheory.condexp_ae_eq_condexp_L1_clm

theorem condexp_undef (hf : ¬¨Integrable f Œº) : Œº[f|m] = 0 := by
  by_cases hm : m ‚â§ m0
  swap; ¬∑ rw [condexp_of_not_le hm]
  by_cases hŒºm : sigma_finite (Œº.trim hm)
  swap; ¬∑ rw [condexp_of_not_sigma_finite hm hŒºm]
  haveI : sigma_finite (Œº.trim hm) := hŒºm
  rw [condexp_of_sigma_finite, if_neg hf]
#align measure_theory.condexp_undef MeasureTheory.condexp_undef

@[simp]
theorem condexp_zero : Œº[(0 : Œ± ‚Üí F')|m] = 0 := by
  by_cases hm : m ‚â§ m0
  swap; ¬∑ rw [condexp_of_not_le hm]
  by_cases hŒºm : sigma_finite (Œº.trim hm)
  swap; ¬∑ rw [condexp_of_not_sigma_finite hm hŒºm]
  haveI : sigma_finite (Œº.trim hm) := hŒºm
  exact
    condexp_of_strongly_measurable hm (@strongly_measurable_zero _ _ m _ _) (integrable_zero _ _ _)
#align measure_theory.condexp_zero MeasureTheory.condexp_zero

theorem stronglyMeasurableCondexp : strongly_measurable[m] (Œº[f|m]) := by
  by_cases hm : m ‚â§ m0
  swap;
  ¬∑ rw [condexp_of_not_le hm]
    exact strongly_measurable_zero
  by_cases hŒºm : sigma_finite (Œº.trim hm)
  swap;
  ¬∑ rw [condexp_of_not_sigma_finite hm hŒºm]
    exact strongly_measurable_zero
  haveI : sigma_finite (Œº.trim hm) := hŒºm
  rw [condexp_of_sigma_finite hm]
  swap; ¬∑ infer_instance
  split_ifs with hfi hfm
  ¬∑ exact hfm
  ¬∑ exact ae_strongly_measurable'.strongly_measurable_mk _
  ¬∑ exact strongly_measurable_zero
#align measure_theory.strongly_measurable_condexp MeasureTheory.stronglyMeasurableCondexp

theorem condexp_congr_ae (h : f =·µê[Œº] g) : Œº[f|m] =·µê[Œº] Œº[g|m] := by
  by_cases hm : m ‚â§ m0
  swap; ¬∑ simp_rw [condexp_of_not_le hm]
  by_cases hŒºm : sigma_finite (Œº.trim hm)
  swap; ¬∑ simp_rw [condexp_of_not_sigma_finite hm hŒºm]
  haveI : sigma_finite (Œº.trim hm) := hŒºm
  exact
    (condexp_ae_eq_condexp_L1 hm f).trans
      (Filter.EventuallyEq.trans (by rw [condexp_L1_congr_ae hm h])
        (condexp_ae_eq_condexp_L1 hm g).symm)
#align measure_theory.condexp_congr_ae MeasureTheory.condexp_congr_ae

theorem condexp_of_ae_strongly_measurable' (hm : m ‚â§ m0) [hŒºm : SigmaFinite (Œº.trim hm)]
    {f : Œ± ‚Üí F'} (hf : AeStronglyMeasurable' m f Œº) (hfi : Integrable f Œº) : Œº[f|m] =·µê[Œº] f := by
  refine' ((condexp_congr_ae hf.ae_eq_mk).trans _).trans hf.ae_eq_mk.symm
  rw [condexp_of_strongly_measurable hm hf.strongly_measurable_mk
      ((integrable_congr hf.ae_eq_mk).mp hfi)]
#align
  measure_theory.condexp_of_ae_strongly_measurable' MeasureTheory.condexp_of_ae_strongly_measurable'

theorem integrableCondexp : Integrable (Œº[f|m]) Œº := by
  by_cases hm : m ‚â§ m0
  swap;
  ¬∑ rw [condexp_of_not_le hm]
    exact integrable_zero _ _ _
  by_cases hŒºm : sigma_finite (Œº.trim hm)
  swap;
  ¬∑ rw [condexp_of_not_sigma_finite hm hŒºm]
    exact integrable_zero _ _ _
  haveI : sigma_finite (Œº.trim hm) := hŒºm
  exact (integrable_condexp_L1 f).congr (condexp_ae_eq_condexp_L1 hm f).symm
#align measure_theory.integrable_condexp MeasureTheory.integrableCondexp

/-- The integral of the conditional expectation `Œº[f|hm]` over an `m`-measurable set is equal to
the integral of `f` on that set. -/
theorem set_integral_condexp (hm : m ‚â§ m0) [SigmaFinite (Œº.trim hm)] (hf : Integrable f Œº)
    (hs : measurable_set[m] s) : (‚à´ x in s, (Œº[f|m]) x ‚àÇŒº) = ‚à´ x in s, f x ‚àÇŒº := by
  rw [set_integral_congr_ae (hm s hs) ((condexp_ae_eq_condexp_L1 hm f).mono fun x hx _ => hx)]
  exact set_integral_condexp_L1 hf hs
#align measure_theory.set_integral_condexp MeasureTheory.set_integral_condexp

theorem integral_condexp (hm : m ‚â§ m0) [hŒºm : SigmaFinite (Œº.trim hm)] (hf : Integrable f Œº) :
    (‚à´ x, (Œº[f|m]) x ‚àÇŒº) = ‚à´ x, f x ‚àÇŒº := by
  suffices (‚à´ x in Set.univ, (Œº[f|m]) x ‚àÇŒº) = ‚à´ x in Set.univ, f x ‚àÇŒº by
    simp_rw [integral_univ] at this
    exact this
  exact set_integral_condexp hm hf (@MeasurableSet.univ _ m)
#align measure_theory.integral_condexp MeasureTheory.integral_condexp

/-- **Uniqueness of the conditional expectation**
If a function is a.e. `m`-measurable, verifies an integrability condition and has same integral
as `f` on all `m`-measurable sets, then it is a.e. equal to `Œº[f|hm]`. -/
theorem ae_eq_condexp_of_forall_set_integral_eq (hm : m ‚â§ m0) [SigmaFinite (Œº.trim hm)]
    {f g : Œ± ‚Üí F'} (hf : Integrable f Œº)
    (hg_int_finite : ‚àÄ s, measurable_set[m] s ‚Üí Œº s < ‚àû ‚Üí IntegrableOn g s Œº)
    (hg_eq : ‚àÄ s : Set Œ±, measurable_set[m] s ‚Üí Œº s < ‚àû ‚Üí (‚à´ x in s, g x ‚àÇŒº) = ‚à´ x in s, f x ‚àÇŒº)
    (hgm : AeStronglyMeasurable' m g Œº) : g =·µê[Œº] Œº[f|m] := by
  refine'
    ae_eq_of_forall_set_integral_eq_of_sigma_finite' hm hg_int_finite
      (fun s hs hŒºs => integrable_condexp.integrable_on) (fun s hs hŒºs => _) hgm
      (strongly_measurable.ae_strongly_measurable' strongly_measurable_condexp)
  rw [hg_eq s hs hŒºs, set_integral_condexp hm hf hs]
#align
  measure_theory.ae_eq_condexp_of_forall_set_integral_eq MeasureTheory.ae_eq_condexp_of_forall_set_integral_eq

theorem condexp_bot' [hŒº : Œº.ae.ne_bot] (f : Œ± ‚Üí F') :
    Œº[f|‚ä•] = fun _ => (Œº Set.univ).toReal‚Åª¬π ‚Ä¢ ‚à´ x, f x ‚àÇŒº := by
  by_cases hŒº_finite : is_finite_measure Œº
  swap
  ¬∑ have h : ¬¨sigma_finite (Œº.trim bot_le) := by rwa [sigma_finite_trim_bot_iff]
    rw [not_is_finite_measure_iff] at hŒº_finite
    rw [condexp_of_not_sigma_finite bot_le h]
    simp only [hŒº_finite, Ennreal.top_to_real, inv_zero, zero_smul]
    rfl
  haveI : is_finite_measure Œº := hŒº_finite
  by_cases hf : integrable f Œº
  swap;
  ¬∑ rw [integral_undef hf, smul_zero, condexp_undef hf]
    rfl
  have h_meas : strongly_measurable[‚ä•] (Œº[f|‚ä•]) := strongly_measurable_condexp
  obtain ‚ü®c, h_eq‚ü© := strongly_measurable_bot_iff.mp h_meas
  rw [h_eq]
  have h_integral : (‚à´ x, (Œº[f|‚ä•]) x ‚àÇŒº) = ‚à´ x, f x ‚àÇŒº := integral_condexp bot_le hf
  simp_rw [h_eq, integral_const] at h_integral
  rw [‚Üê h_integral, ‚Üê smul_assoc, smul_eq_mul, inv_mul_cancel, one_smul]
  rw [Ne.def, Ennreal.to_real_eq_zero_iff, Auto.not_or_eq, measure.measure_univ_eq_zero, ‚Üê
    ae_eq_bot, ‚Üê Ne.def, ‚Üê ne_bot_iff]
  exact ‚ü®hŒº, measure_ne_top Œº Set.univ‚ü©
#align measure_theory.condexp_bot' MeasureTheory.condexp_bot'

theorem condexp_bot_ae_eq (f : Œ± ‚Üí F') :
    Œº[f|‚ä•] =·µê[Œº] fun _ => (Œº Set.univ).toReal‚Åª¬π ‚Ä¢ ‚à´ x, f x ‚àÇŒº := by
  by_cases Œº.ae.ne_bot
  ¬∑ refine' eventually_of_forall fun x => _
    rw [condexp_bot' f]
    exact h
  ¬∑ rw [ne_bot_iff, not_not, ae_eq_bot] at h
    simp only [h, ae_zero]
#align measure_theory.condexp_bot_ae_eq MeasureTheory.condexp_bot_ae_eq

theorem condexp_bot [IsProbabilityMeasure Œº] (f : Œ± ‚Üí F') : Œº[f|‚ä•] = fun _ => ‚à´ x, f x ‚àÇŒº := by
  refine' (condexp_bot' f).trans _
  rw [measure_univ, Ennreal.one_to_real, inv_one, one_smul]
#align measure_theory.condexp_bot MeasureTheory.condexp_bot

theorem condexp_add (hf : Integrable f Œº) (hg : Integrable g Œº) :
    Œº[f + g|m] =·µê[Œº] Œº[f|m] + Œº[g|m] := by
  by_cases hm : m ‚â§ m0
  swap;
  ¬∑ simp_rw [condexp_of_not_le hm]
    simp
  by_cases hŒºm : sigma_finite (Œº.trim hm)
  swap;
  ¬∑ simp_rw [condexp_of_not_sigma_finite hm hŒºm]
    simp
  haveI : sigma_finite (Œº.trim hm) := hŒºm
  refine' (condexp_ae_eq_condexp_L1 hm _).trans _
  rw [condexp_L1_add hf hg]
  exact
    (coe_fn_add _ _).trans
      ((condexp_ae_eq_condexp_L1 hm _).symm.add (condexp_ae_eq_condexp_L1 hm _).symm)
#align measure_theory.condexp_add MeasureTheory.condexp_add

theorem condexp_finset_sum {Œπ : Type _} {s : Finset Œπ} {f : Œπ ‚Üí Œ± ‚Üí F'}
    (hf : ‚àÄ i ‚àà s, Integrable (f i) Œº) : Œº[‚àë i in s, f i|m] =·µê[Œº] ‚àë i in s, Œº[f i|m] := by
  induction' s using Finset.induction_on with i s his heq hf
  ¬∑ rw [Finset.sum_empty, Finset.sum_empty, condexp_zero]
  ¬∑ rw [Finset.sum_insert his, Finset.sum_insert his]
    exact
      (condexp_add (hf i <| Finset.mem_insert_self i s) <|
            integrable_finset_sum' _ fun j hmem => hf j <| Finset.mem_insert_of_mem hmem).trans
        ((eventually_eq.refl _ _).add (HEq fun j hmem => hf j <| Finset.mem_insert_of_mem hmem))
#align measure_theory.condexp_finset_sum MeasureTheory.condexp_finset_sum

theorem condexp_smul (c : ùïú) (f : Œ± ‚Üí F') : Œº[c ‚Ä¢ f|m] =·µê[Œº] c ‚Ä¢ Œº[f|m] := by
  by_cases hm : m ‚â§ m0
  swap;
  ¬∑ simp_rw [condexp_of_not_le hm]
    simp
  by_cases hŒºm : sigma_finite (Œº.trim hm)
  swap;
  ¬∑ simp_rw [condexp_of_not_sigma_finite hm hŒºm]
    simp
  haveI : sigma_finite (Œº.trim hm) := hŒºm
  refine' (condexp_ae_eq_condexp_L1 hm _).trans _
  rw [condexp_L1_smul c f]
  refine' (@condexp_ae_eq_condexp_L1 _ _ _ _ _ m _ _ hm _ f).mp _
  refine' (coe_fn_smul c (condexp_L1 hm Œº f)).mono fun x hx1 hx2 => _
  rw [hx1, Pi.smul_apply, Pi.smul_apply, hx2]
#align measure_theory.condexp_smul MeasureTheory.condexp_smul

theorem condexp_neg (f : Œ± ‚Üí F') : Œº[-f|m] =·µê[Œº] -Œº[f|m] := by
  letI : Module ‚Ñù (Œ± ‚Üí F') := @Pi.module Œ± (fun _ => F') ‚Ñù _ _ fun _ => inferInstance <;>
    calc
      Œº[-f|m] = Œº[(-1 : ‚Ñù) ‚Ä¢ f|m] := by rw [neg_one_smul ‚Ñù f]
      _ =·µê[Œº] (-1 : ‚Ñù) ‚Ä¢ Œº[f|m] := condexp_smul (-1) f
      _ = -Œº[f|m] := neg_one_smul ‚Ñù (Œº[f|m])
      
#align measure_theory.condexp_neg MeasureTheory.condexp_neg

theorem condexp_sub (hf : Integrable f Œº) (hg : Integrable g Œº) :
    Œº[f - g|m] =·µê[Œº] Œº[f|m] - Œº[g|m] := by
  simp_rw [sub_eq_add_neg]
  exact (condexp_add hf hg.neg).trans (eventually_eq.rfl.add (condexp_neg g))
#align measure_theory.condexp_sub MeasureTheory.condexp_sub

theorem condexp_condexp_of_le {m‚ÇÅ m‚ÇÇ m0 : MeasurableSpace Œ±} {Œº : Measure Œ±} (hm‚ÇÅ‚ÇÇ : m‚ÇÅ ‚â§ m‚ÇÇ)
    (hm‚ÇÇ : m‚ÇÇ ‚â§ m0) [SigmaFinite (Œº.trim hm‚ÇÇ)] : Œº[Œº[f|m‚ÇÇ]|m‚ÇÅ] =·µê[Œº] Œº[f|m‚ÇÅ] := by
  by_cases hŒºm‚ÇÅ : sigma_finite (Œº.trim (hm‚ÇÅ‚ÇÇ.trans hm‚ÇÇ))
  swap; ¬∑ simp_rw [condexp_of_not_sigma_finite (hm‚ÇÅ‚ÇÇ.trans hm‚ÇÇ) hŒºm‚ÇÅ]
  haveI : sigma_finite (Œº.trim (hm‚ÇÅ‚ÇÇ.trans hm‚ÇÇ)) := hŒºm‚ÇÅ
  by_cases hf : integrable f Œº
  swap; ¬∑ simp_rw [condexp_undef hf, condexp_zero]
  refine'
    ae_eq_of_forall_set_integral_eq_of_sigma_finite' (hm‚ÇÅ‚ÇÇ.trans hm‚ÇÇ)
      (fun s hs hŒºs => integrable_condexp.integrable_on)
      (fun s hs hŒºs => integrable_condexp.integrable_on) _
      (strongly_measurable.ae_strongly_measurable' strongly_measurable_condexp)
      (strongly_measurable.ae_strongly_measurable' strongly_measurable_condexp)
  intro s hs hŒºs
  rw [set_integral_condexp (hm‚ÇÅ‚ÇÇ.trans hm‚ÇÇ) integrable_condexp hs]
  swap; ¬∑ infer_instance
  rw [set_integral_condexp (hm‚ÇÅ‚ÇÇ.trans hm‚ÇÇ) hf hs, set_integral_condexp hm‚ÇÇ hf (hm‚ÇÅ‚ÇÇ s hs)]
#align measure_theory.condexp_condexp_of_le MeasureTheory.condexp_condexp_of_le

theorem condexp_mono {E} [NormedLatticeAddCommGroup E] [CompleteSpace E] [NormedSpace ‚Ñù E]
    [OrderedSmul ‚Ñù E] {f g : Œ± ‚Üí E} (hf : Integrable f Œº) (hg : Integrable g Œº) (hfg : f ‚â§·µê[Œº] g) :
    Œº[f|m] ‚â§·µê[Œº] Œº[g|m] := by 
  by_cases hm : m ‚â§ m0
  swap; ¬∑ simp_rw [condexp_of_not_le hm]
  by_cases hŒºm : sigma_finite (Œº.trim hm)
  swap; ¬∑ simp_rw [condexp_of_not_sigma_finite hm hŒºm]
  haveI : sigma_finite (Œº.trim hm) := hŒºm
  exact
    (condexp_ae_eq_condexp_L1 hm _).trans_le
      ((condexp_L1_mono hf hg hfg).trans_eq (condexp_ae_eq_condexp_L1 hm _).symm)
#align measure_theory.condexp_mono MeasureTheory.condexp_mono

theorem condexp_nonneg {E} [NormedLatticeAddCommGroup E] [CompleteSpace E] [NormedSpace ‚Ñù E]
    [OrderedSmul ‚Ñù E] {f : Œ± ‚Üí E} (hf : 0 ‚â§·µê[Œº] f) : 0 ‚â§·µê[Œº] Œº[f|m] := by
  by_cases hfint : integrable f Œº
  ¬∑ rw [(condexp_zero.symm : (0 : Œ± ‚Üí E) = Œº[0|m])]
    exact condexp_mono (integrable_zero _ _ _) hfint hf
  ¬∑ rw [condexp_undef hfint]
#align measure_theory.condexp_nonneg MeasureTheory.condexp_nonneg

theorem condexp_nonpos {E} [NormedLatticeAddCommGroup E] [CompleteSpace E] [NormedSpace ‚Ñù E]
    [OrderedSmul ‚Ñù E] {f : Œ± ‚Üí E} (hf : f ‚â§·µê[Œº] 0) : Œº[f|m] ‚â§·µê[Œº] 0 := by
  by_cases hfint : integrable f Œº
  ¬∑ rw [(condexp_zero.symm : (0 : Œ± ‚Üí E) = Œº[0|m])]
    exact condexp_mono hfint (integrable_zero _ _ _) hf
  ¬∑ rw [condexp_undef hfint]
#align measure_theory.condexp_nonpos MeasureTheory.condexp_nonpos

/-- **Lebesgue dominated convergence theorem**: sufficient conditions under which almost
  everywhere convergence of a sequence of functions implies the convergence of their image by
  `condexp_L1`. -/
theorem tendsto_condexp_L1_of_dominated_convergence (hm : m ‚â§ m0) [SigmaFinite (Œº.trim hm)]
    {fs : ‚Ñï ‚Üí Œ± ‚Üí F'} {f : Œ± ‚Üí F'} (bound_fs : Œ± ‚Üí ‚Ñù)
    (hfs_meas : ‚àÄ n, AeStronglyMeasurable (fs n) Œº) (h_int_bound_fs : Integrable bound_fs Œº)
    (hfs_bound : ‚àÄ n, ‚àÄ·µê x ‚àÇŒº, ‚Äñfs n x‚Äñ ‚â§ bound_fs x)
    (hfs : ‚àÄ·µê x ‚àÇŒº, Tendsto (fun n => fs n x) atTop (ùìù (f x))) :
    Tendsto (fun n => condexpL1 hm Œº (fs n)) atTop (ùìù (condexpL1 hm Œº f)) :=
  tendsto_set_to_fun_of_dominated_convergence _ bound_fs hfs_meas h_int_bound_fs hfs_bound hfs
#align
  measure_theory.tendsto_condexp_L1_of_dominated_convergence MeasureTheory.tendsto_condexp_L1_of_dominated_convergence

/-- If two sequences of functions have a.e. equal conditional expectations at each step, converge
and verify dominated convergence hypotheses, then the conditional expectations of their limits are
a.e. equal. -/
theorem tendsto_condexp_unique (fs gs : ‚Ñï ‚Üí Œ± ‚Üí F') (f g : Œ± ‚Üí F')
    (hfs_int : ‚àÄ n, Integrable (fs n) Œº) (hgs_int : ‚àÄ n, Integrable (gs n) Œº)
    (hfs : ‚àÄ·µê x ‚àÇŒº, Tendsto (fun n => fs n x) atTop (ùìù (f x)))
    (hgs : ‚àÄ·µê x ‚àÇŒº, Tendsto (fun n => gs n x) atTop (ùìù (g x))) (bound_fs : Œ± ‚Üí ‚Ñù)
    (h_int_bound_fs : Integrable bound_fs Œº) (bound_gs : Œ± ‚Üí ‚Ñù)
    (h_int_bound_gs : Integrable bound_gs Œº) (hfs_bound : ‚àÄ n, ‚àÄ·µê x ‚àÇŒº, ‚Äñfs n x‚Äñ ‚â§ bound_fs x)
    (hgs_bound : ‚àÄ n, ‚àÄ·µê x ‚àÇŒº, ‚Äñgs n x‚Äñ ‚â§ bound_gs x) (hfg : ‚àÄ n, Œº[fs n|m] =·µê[Œº] Œº[gs n|m]) :
    Œº[f|m] =·µê[Œº] Œº[g|m] := by 
  by_cases hm : m ‚â§ m0
  swap
  ¬∑ simp_rw [condexp_of_not_le hm]
  by_cases hŒºm : sigma_finite (Œº.trim hm)
  swap
  ¬∑ simp_rw [condexp_of_not_sigma_finite hm hŒºm]
  haveI : sigma_finite (Œº.trim hm) := hŒºm
  refine' (condexp_ae_eq_condexp_L1 hm f).trans ((condexp_ae_eq_condexp_L1 hm g).trans _).symm
  rw [‚Üê Lp.ext_iff]
  have hn_eq : ‚àÄ n, condexp_L1 hm Œº (gs n) = condexp_L1 hm Œº (fs n) := by
    intro n
    ext1
    refine' (condexp_ae_eq_condexp_L1 hm (gs n)).symm.trans ((hfg n).symm.trans _)
    exact condexp_ae_eq_condexp_L1 hm (fs n)
  have hcond_fs : tendsto (fun n => condexp_L1 hm Œº (fs n)) at_top (ùìù (condexp_L1 hm Œº f)) :=
    tendsto_condexp_L1_of_dominated_convergence hm _ (fun n => (hfs_int n).1) h_int_bound_fs
      hfs_bound hfs
  have hcond_gs : tendsto (fun n => condexp_L1 hm Œº (gs n)) at_top (ùìù (condexp_L1 hm Œº g)) :=
    tendsto_condexp_L1_of_dominated_convergence hm _ (fun n => (hgs_int n).1) h_int_bound_gs
      hgs_bound hgs
  exact tendsto_nhds_unique_of_eventually_eq hcond_gs hcond_fs (eventually_of_forall hn_eq)
#align measure_theory.tendsto_condexp_unique MeasureTheory.tendsto_condexp_unique

end Condexp

end MeasureTheory

