/-
Copyright (c) 2017 Johannes Hölzl. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Johannes Hölzl, Yury Kudryashov

! This file was ported from Lean 3 source module measure_theory.constructions.borel_space.basic
! leanprover-community/mathlib commit 4280f5f32e16755ec7985ce11e189b6cd6ff6735
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.Analysis.Normed.Group.Basic
import Mathbin.MeasureTheory.Function.AeMeasurableSequence
import Mathbin.MeasureTheory.Group.Arithmetic
import Mathbin.MeasureTheory.Lattice
import Mathbin.MeasureTheory.Measure.OpenPos
import Mathbin.Topology.Algebra.Order.LiminfLimsup
import Mathbin.Topology.ContinuousFunction.Basic
import Mathbin.Topology.Instances.Ereal
import Mathbin.Topology.MetricSpace.HausdorffDistance
import Mathbin.Topology.GDelta
import Mathbin.Topology.Order.Lattice
import Mathbin.Topology.Semicontinuous

/-!
# Borel (measurable) space

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

## Main definitions

* `borel α` : the least `σ`-algebra that contains all open sets;
* `class borel_space` : a space with `topological_space` and `measurable_space` structures
  such that `‹measurable_space α› = borel α`;
* `class opens_measurable_space` : a space with `topological_space` and `measurable_space`
  structures such that all open sets are measurable; equivalently, `borel α ≤ ‹measurable_space α›`.
* `borel_space` instances on `empty`, `unit`, `bool`, `nat`, `int`, `rat`;
* `measurable` and `borel_space` instances on `ℝ`, `ℝ≥0`, `ℝ≥0∞`.

## Main statements

* `is_open.measurable_set`, `is_closed.measurable_set`: open and closed sets are measurable;
* `continuous.measurable` : a continuous function is measurable;
* `continuous.measurable2` : if `f : α → β` and `g : α → γ` are measurable and `op : β × γ → δ`
  is continuous, then `λ x, op (f x, g y)` is measurable;
* `measurable.add` etc : dot notation for arithmetic operations on `measurable` predicates,
  and similarly for `dist` and `edist`;
* `ae_measurable.add` : similar dot notation for almost everywhere measurable functions;
* `measurable.ennreal*` : special cases for arithmetic operations on `ℝ≥0∞`.
-/


noncomputable section

open Classical Set Filter MeasureTheory

open Classical BigOperators Topology NNReal ENNReal MeasureTheory

universe u v w x y

variable {α β γ γ₂ δ : Type _} {ι : Sort y} {s t u : Set α}

open MeasurableSpace TopologicalSpace

#print borel /-
/-- `measurable_space` structure generated by `topological_space`. -/
def borel (α : Type u) [TopologicalSpace α] : MeasurableSpace α :=
  generateFrom { s : Set α | IsOpen s }
#align borel borel
-/

/- warning: borel_eq_top_of_discrete -> borel_eq_top_of_discrete is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : DiscreteTopology.{u1} α _inst_1], Eq.{succ u1} (MeasurableSpace.{u1} α) (borel.{u1} α _inst_1) (Top.top.{u1} (MeasurableSpace.{u1} α) (CompleteLattice.toHasTop.{u1} (MeasurableSpace.{u1} α) (MeasurableSpace.completeLattice.{u1} α)))
but is expected to have type
  forall {α : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : DiscreteTopology.{u1} α _inst_1], Eq.{succ u1} (MeasurableSpace.{u1} α) (borel.{u1} α _inst_1) (Top.top.{u1} (MeasurableSpace.{u1} α) (CompleteLattice.toTop.{u1} (MeasurableSpace.{u1} α) (MeasurableSpace.instCompleteLatticeMeasurableSpace.{u1} α)))
Case conversion may be inaccurate. Consider using '#align borel_eq_top_of_discrete borel_eq_top_of_discreteₓ'. -/
theorem borel_eq_top_of_discrete [TopologicalSpace α] [DiscreteTopology α] : borel α = ⊤ :=
  top_le_iff.1 fun s hs => GenerateMeasurable.basic s (isOpen_discrete s)
#align borel_eq_top_of_discrete borel_eq_top_of_discrete

/- warning: borel_eq_top_of_countable -> borel_eq_top_of_countable is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : T1Space.{u1} α _inst_1] [_inst_3 : Countable.{succ u1} α], Eq.{succ u1} (MeasurableSpace.{u1} α) (borel.{u1} α _inst_1) (Top.top.{u1} (MeasurableSpace.{u1} α) (CompleteLattice.toHasTop.{u1} (MeasurableSpace.{u1} α) (MeasurableSpace.completeLattice.{u1} α)))
but is expected to have type
  forall {α : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : T1Space.{u1} α _inst_1] [_inst_3 : Countable.{succ u1} α], Eq.{succ u1} (MeasurableSpace.{u1} α) (borel.{u1} α _inst_1) (Top.top.{u1} (MeasurableSpace.{u1} α) (CompleteLattice.toTop.{u1} (MeasurableSpace.{u1} α) (MeasurableSpace.instCompleteLatticeMeasurableSpace.{u1} α)))
Case conversion may be inaccurate. Consider using '#align borel_eq_top_of_countable borel_eq_top_of_countableₓ'. -/
theorem borel_eq_top_of_countable [TopologicalSpace α] [T1Space α] [Countable α] : borel α = ⊤ :=
  by
  refine' top_le_iff.1 fun s hs => bUnion_of_singleton s ▸ _
  apply MeasurableSet.biUnion s.to_countable
  intro x hx
  apply MeasurableSet.of_compl
  apply generate_measurable.basic
  exact is_closed_singleton.is_open_compl
#align borel_eq_top_of_countable borel_eq_top_of_countable

#print borel_eq_generateFrom_of_subbasis /-
theorem borel_eq_generateFrom_of_subbasis {s : Set (Set α)} [t : TopologicalSpace α]
    [SecondCountableTopology α] (hs : t = generateFrom s) : borel α = generateFrom s :=
  le_antisymm
    (generateFrom_le fun u (hu : t.IsOpen u) =>
      by
      rw [hs] at hu
      induction hu
      case basic u hu => exact generate_measurable.basic u hu
      case univ => exact @MeasurableSet.univ α (generate_from s)
      case inter s₁ s₂ _ _ hs₁ hs₂ => exact @MeasurableSet.inter α (generate_from s) _ _ hs₁ hs₂
      case
        sUnion f hf ih =>
        rcases is_open_sUnion_countable f (by rwa [hs]) with ⟨v, hv, vf, vu⟩
        rw [← vu]
        exact @MeasurableSet.sUnion α (generate_from s) _ hv fun x xv => ih _ (vf xv))
    (generateFrom_le fun u hu =>
      GenerateMeasurable.basic _ <| show t.IsOpen u by rw [hs] <;> exact generate_open.basic _ hu)
#align borel_eq_generate_from_of_subbasis borel_eq_generateFrom_of_subbasis
-/

#print TopologicalSpace.IsTopologicalBasis.borel_eq_generateFrom /-
theorem TopologicalSpace.IsTopologicalBasis.borel_eq_generateFrom [TopologicalSpace α]
    [SecondCountableTopology α] {s : Set (Set α)} (hs : IsTopologicalBasis s) :
    borel α = generateFrom s :=
  borel_eq_generateFrom_of_subbasis hs.eq_generateFrom
#align topological_space.is_topological_basis.borel_eq_generate_from TopologicalSpace.IsTopologicalBasis.borel_eq_generateFrom
-/

#print isPiSystem_isOpen /-
theorem isPiSystem_isOpen [TopologicalSpace α] : IsPiSystem (IsOpen : Set α → Prop) :=
  fun s hs t ht hst => IsOpen.inter hs ht
#align is_pi_system_is_open isPiSystem_isOpen
-/

#print borel_eq_generateFrom_isClosed /-
theorem borel_eq_generateFrom_isClosed [TopologicalSpace α] :
    borel α = generateFrom { s | IsClosed s } :=
  le_antisymm
    (generateFrom_le fun t ht =>
      @MeasurableSet.of_compl α _ (generateFrom { s | IsClosed s })
        (GenerateMeasurable.basic _ <| isClosed_compl_iff.2 ht))
    (generateFrom_le fun t ht =>
      @MeasurableSet.of_compl α _ (borel α) (GenerateMeasurable.basic _ <| isOpen_compl_iff.2 ht))
#align borel_eq_generate_from_is_closed borel_eq_generateFrom_isClosed
-/

section OrderTopology

variable (α)

variable [TopologicalSpace α] [SecondCountableTopology α] [LinearOrder α] [OrderTopology α]

#print borel_eq_generateFrom_Iio /-
theorem borel_eq_generateFrom_Iio : borel α = generateFrom (range Iio) :=
  by
  refine' le_antisymm _ (generate_from_le _)
  · rw [borel_eq_generateFrom_of_subbasis (@OrderTopology.topology_eq_generate_intervals α _ _ _)]
    letI : MeasurableSpace α := MeasurableSpace.generateFrom (range Iio)
    have H : ∀ a : α, MeasurableSet (Iio a) := fun a => generate_measurable.basic _ ⟨_, rfl⟩
    refine' generate_from_le _
    rintro _ ⟨a, rfl | rfl⟩ <;> [skip;apply H]
    by_cases h : ∃ a', ∀ b, a < b ↔ a' ≤ b
    · rcases h with ⟨a', ha'⟩
      rw [(_ : Ioi a = Iio a'ᶜ)]
      · exact (H _).compl
      simp [Set.ext_iff, ha']
    · rcases is_open_Union_countable (fun a' : { a' : α // a < a' } => { b | a'.1 < b }) fun a' =>
          isOpen_lt' _ with ⟨v, ⟨hv⟩, vu⟩
      simp [Set.ext_iff] at vu
      have : Ioi a = ⋃ x : v, Iio x.1.1ᶜ :=
        by
        simp [Set.ext_iff]
        refine' fun x => ⟨fun ax => _, fun ⟨a', ⟨h, av⟩, ax⟩ => lt_of_lt_of_le h ax⟩
        rcases(vu x).2 _ with ⟨a', h₁, h₂⟩
        · exact ⟨a', h₁, le_of_lt h₂⟩
        refine' not_imp_comm.1 (fun h => _) h
        exact ⟨x, fun b => ⟨fun ab => le_of_not_lt fun h' => h ⟨b, ab, h'⟩, lt_of_lt_of_le ax⟩⟩
      rw [this]
      skip
      apply MeasurableSet.iUnion
      exact fun _ => (H _).compl
  · rw [forall_range_iff]
    intro a
    exact generate_measurable.basic _ isOpen_Iio
#align borel_eq_generate_from_Iio borel_eq_generateFrom_Iio
-/

#print borel_eq_generateFrom_Ioi /-
theorem borel_eq_generateFrom_Ioi : borel α = generateFrom (range Ioi) :=
  @borel_eq_generateFrom_Iio αᵒᵈ _ (by infer_instance : SecondCountableTopology α) _ _
#align borel_eq_generate_from_Ioi borel_eq_generateFrom_Ioi
-/

#print borel_eq_generateFrom_Iic /-
theorem borel_eq_generateFrom_Iic : borel α = MeasurableSpace.generateFrom (range Iic) :=
  by
  rw [borel_eq_generateFrom_Ioi]
  refine' le_antisymm _ _
  · refine' MeasurableSpace.generateFrom_le fun t ht => _
    obtain ⟨u, rfl⟩ := ht
    rw [← compl_Iic]
    exact (MeasurableSpace.measurableSet_generateFrom (mem_range.mpr ⟨u, rfl⟩)).compl
  · refine' MeasurableSpace.generateFrom_le fun t ht => _
    obtain ⟨u, rfl⟩ := ht
    rw [← compl_Ioi]
    exact (MeasurableSpace.measurableSet_generateFrom (mem_range.mpr ⟨u, rfl⟩)).compl
#align borel_eq_generate_from_Iic borel_eq_generateFrom_Iic
-/

#print borel_eq_generateFrom_Ici /-
theorem borel_eq_generateFrom_Ici : borel α = MeasurableSpace.generateFrom (range Ici) :=
  @borel_eq_generateFrom_Iic αᵒᵈ _ _ _ _
#align borel_eq_generate_from_Ici borel_eq_generateFrom_Ici
-/

end OrderTopology

#print borel_comap /-
theorem borel_comap {f : α → β} {t : TopologicalSpace β} :
    @borel α (t.induced f) = (@borel β t).comap f :=
  comap_generateFrom.symm
#align borel_comap borel_comap
-/

/- warning: continuous.borel_measurable -> Continuous.borel_measurable is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : TopologicalSpace.{u2} β] {f : α -> β}, (Continuous.{u1, u2} α β _inst_1 _inst_2 f) -> (Measurable.{u1, u2} α β (borel.{u1} α _inst_1) (borel.{u2} β _inst_2) f)
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} [_inst_1 : TopologicalSpace.{u2} α] [_inst_2 : TopologicalSpace.{u1} β] {f : α -> β}, (Continuous.{u2, u1} α β _inst_1 _inst_2 f) -> (Measurable.{u2, u1} α β (borel.{u2} α _inst_1) (borel.{u1} β _inst_2) f)
Case conversion may be inaccurate. Consider using '#align continuous.borel_measurable Continuous.borel_measurableₓ'. -/
theorem Continuous.borel_measurable [TopologicalSpace α] [TopologicalSpace β] {f : α → β}
    (hf : Continuous f) : @Measurable α β (borel α) (borel β) f :=
  Measurable.of_le_map <|
    generateFrom_le fun s hs => GenerateMeasurable.basic (f ⁻¹' s) (hs.Preimage hf)
#align continuous.borel_measurable Continuous.borel_measurable

#print OpensMeasurableSpace /-
/-- A space with `measurable_space` and `topological_space` structures such that
all open sets are measurable. -/
class OpensMeasurableSpace (α : Type _) [TopologicalSpace α] [h : MeasurableSpace α] : Prop where
  borel_le : borel α ≤ h
#align opens_measurable_space OpensMeasurableSpace
-/

#print BorelSpace /-
/-- A space with `measurable_space` and `topological_space` structures such that
the `σ`-algebra of measurable sets is exactly the `σ`-algebra generated by open sets. -/
class BorelSpace (α : Type _) [TopologicalSpace α] [MeasurableSpace α] : Prop where
  measurable_eq : ‹MeasurableSpace α› = borel α
#align borel_space BorelSpace
-/

namespace Tactic

/-- Add instances `borel α : measurable_space α` and `⟨rfl⟩ : borel_space α`. -/
unsafe def add_borel_instance (α : expr) : tactic Unit := do
  let n1 ← get_unused_name "_inst"
  to_expr ``(borel $(α)) >>= pose n1
  reset_instance_cache
  let n2 ← get_unused_name "_inst"
  let v ← to_expr ``((BorelSpace.mk rfl : BorelSpace $(α)))
  note n2 none v
  reset_instance_cache
#align tactic.add_borel_instance tactic.add_borel_instance

-- failed to format: unknown constant 'term.pseudo.antiquot'
/--
      Given a type `α`, an assumption `i : measurable_space α`, and an instance `[borel_space α]`,
      replace `i` with `borel α`. -/
    unsafe
  def
    borel_to_refl
    ( α i : expr ) : tactic Unit
    :=
      do
        let n ← get_unused_name "h"
          to_expr ` `( $ ( i ) = borel $ ( α ) ) >>= assert n
          applyc `borel_space.measurable_eq
          unfreezing ( tactic.subst i )
          let n1 ← get_unused_name "_inst"
          to_expr ` `( borel $ ( α ) ) >>= pose n1
          reset_instance_cache
#align tactic.borel_to_refl tactic.borel_to_refl

/-- Given a type `α`, if there is an assumption `[i : measurable_space α]`, then try to prove
`[borel_space α]` and replace `i` with `borel α`. Otherwise, add instances
`borel α : measurable_space α` and `⟨rfl⟩ : borel_space α`. -/
unsafe def borelize (α : expr) : tactic Unit := do
  let i ← optional (to_expr ``(MeasurableSpace $(α)) >>= find_assumption)
  i (add_borel_instance α) (borel_to_refl α)
#align tactic.borelize tactic.borelize

namespace Interactive

/- ./././Mathport/Syntax/Translate/Tactic/Mathlib/Core.lean:38:34: unsupported: setup_tactic_parser -/
/-- The behaviour of `borelize α` depends on the existing assumptions on `α`.

- if `α` is a topological space with instances `[measurable_space α] [borel_space α]`, then
  `borelize α` replaces the former instance by `borel α`;
- otherwise, `borelize α` adds instances `borel α : measurable_space α` and `⟨rfl⟩ : borel_space α`.

Finally, `borelize [α, β, γ]` runs `borelize α, borelize β, borelize γ`.
-/
unsafe def borelize (ts : parse pexpr_list_or_texpr) : tactic Unit :=
  mapM' (fun t => to_expr t >>= tactic.borelize) ts
#align tactic.interactive.borelize tactic.interactive.borelize

add_tactic_doc
  { Name := "borelize"
    category := DocCategory.tactic
    declNames := [`tactic.interactive.borelize]
    tags := ["type class"] }

end Interactive

end Tactic

#print OrderDual.opensMeasurableSpace /-
instance (priority := 100) OrderDual.opensMeasurableSpace {α : Type _} [TopologicalSpace α]
    [MeasurableSpace α] [h : OpensMeasurableSpace α] : OpensMeasurableSpace αᵒᵈ
    where borel_le := h.borel_le
#align order_dual.opens_measurable_space OrderDual.opensMeasurableSpace
-/

#print OrderDual.borelSpace /-
instance (priority := 100) OrderDual.borelSpace {α : Type _} [TopologicalSpace α]
    [MeasurableSpace α] [h : BorelSpace α] : BorelSpace αᵒᵈ where measurable_eq := h.measurable_eq
#align order_dual.borel_space OrderDual.borelSpace
-/

#print BorelSpace.opensMeasurable /-
/-- In a `borel_space` all open sets are measurable. -/
instance (priority := 100) BorelSpace.opensMeasurable {α : Type _} [TopologicalSpace α]
    [MeasurableSpace α] [BorelSpace α] : OpensMeasurableSpace α :=
  ⟨ge_of_eq <| BorelSpace.measurable_eq⟩
#align borel_space.opens_measurable BorelSpace.opensMeasurable
-/

#print Subtype.borelSpace /-
instance Subtype.borelSpace {α : Type _} [TopologicalSpace α] [MeasurableSpace α]
    [hα : BorelSpace α] (s : Set α) : BorelSpace s :=
  ⟨by
    rw [hα.1, Subtype.instMeasurableSpace, ← borel_comap]
    rfl⟩
#align subtype.borel_space Subtype.borelSpace
-/

#print Subtype.opensMeasurableSpace /-
instance Subtype.opensMeasurableSpace {α : Type _} [TopologicalSpace α] [MeasurableSpace α]
    [h : OpensMeasurableSpace α] (s : Set α) : OpensMeasurableSpace s :=
  ⟨by
    rw [borel_comap]
    exact comap_mono h.1⟩
#align subtype.opens_measurable_space Subtype.opensMeasurableSpace
-/

#print BorelSpace.countablyGenerated /-
instance (priority := 100) BorelSpace.countablyGenerated {α : Type _} [TopologicalSpace α]
    [MeasurableSpace α] [BorelSpace α] [SecondCountableTopology α] : CountablyGenerated α :=
  by
  obtain ⟨b, bct, -, hb⟩ := exists_countable_basis α
  refine' ⟨⟨b, bct, _⟩⟩
  borelize α
  exact hb.borel_eq_generate_from
#align borel_space.countably_generated BorelSpace.countablyGenerated
-/

/- warning: measurable_set.induction_on_open -> MeasurableSet.induction_on_open is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] {C : (Set.{u1} α) -> Prop}, (forall (U : Set.{u1} α), (IsOpen.{u1} α _inst_1 U) -> (C U)) -> (forall (t : Set.{u1} α), (MeasurableSet.{u1} α _inst_2 t) -> (C t) -> (C (HasCompl.compl.{u1} (Set.{u1} α) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} α) (Set.booleanAlgebra.{u1} α)) t))) -> (forall (f : Nat -> (Set.{u1} α)), (Pairwise.{0} Nat (Function.onFun.{1, succ u1, 1} Nat (Set.{u1} α) Prop (Disjoint.{u1} (Set.{u1} α) (CompleteSemilatticeInf.toPartialOrder.{u1} (Set.{u1} α) (CompleteLattice.toCompleteSemilatticeInf.{u1} (Set.{u1} α) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} α) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} α) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} α) (Set.completeBooleanAlgebra.{u1} α)))))) (GeneralizedBooleanAlgebra.toOrderBot.{u1} (Set.{u1} α) (BooleanAlgebra.toGeneralizedBooleanAlgebra.{u1} (Set.{u1} α) (Set.booleanAlgebra.{u1} α)))) f)) -> (forall (i : Nat), MeasurableSet.{u1} α _inst_2 (f i)) -> (forall (i : Nat), C (f i)) -> (C (Set.iUnion.{u1, 1} α Nat (fun (i : Nat) => f i)))) -> (forall {{t : Set.{u1} α}}, (MeasurableSet.{u1} α _inst_2 t) -> (C t))
but is expected to have type
  forall {α : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] {C : (Set.{u1} α) -> Prop}, (forall (U : Set.{u1} α), (IsOpen.{u1} α _inst_1 U) -> (C U)) -> (forall (t : Set.{u1} α), (MeasurableSet.{u1} α _inst_2 t) -> (C t) -> (C (HasCompl.compl.{u1} (Set.{u1} α) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} α) (Set.instBooleanAlgebraSet.{u1} α)) t))) -> (forall (f : Nat -> (Set.{u1} α)), (Pairwise.{0} Nat (Function.onFun.{1, succ u1, 1} Nat (Set.{u1} α) Prop (Disjoint.{u1} (Set.{u1} α) (OmegaCompletePartialOrder.toPartialOrder.{u1} (Set.{u1} α) (CompleteLattice.instOmegaCompletePartialOrder.{u1} (Set.{u1} α) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} α) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} α) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} α) (Set.instCompleteBooleanAlgebraSet.{u1} α)))))) (BoundedOrder.toOrderBot.{u1} (Set.{u1} α) (Preorder.toLE.{u1} (Set.{u1} α) (PartialOrder.toPreorder.{u1} (Set.{u1} α) (OmegaCompletePartialOrder.toPartialOrder.{u1} (Set.{u1} α) (CompleteLattice.instOmegaCompletePartialOrder.{u1} (Set.{u1} α) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} α) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} α) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} α) (Set.instCompleteBooleanAlgebraSet.{u1} α)))))))) (CompleteLattice.toBoundedOrder.{u1} (Set.{u1} α) (Order.Coframe.toCompleteLattice.{u1} (Set.{u1} α) (CompleteDistribLattice.toCoframe.{u1} (Set.{u1} α) (CompleteBooleanAlgebra.toCompleteDistribLattice.{u1} (Set.{u1} α) (Set.instCompleteBooleanAlgebraSet.{u1} α))))))) f)) -> (forall (i : Nat), MeasurableSet.{u1} α _inst_2 (f i)) -> (forall (i : Nat), C (f i)) -> (C (Set.iUnion.{u1, 1} α Nat (fun (i : Nat) => f i)))) -> (forall {{t : Set.{u1} α}}, (MeasurableSet.{u1} α _inst_2 t) -> (C t))
Case conversion may be inaccurate. Consider using '#align measurable_set.induction_on_open MeasurableSet.induction_on_openₓ'. -/
theorem MeasurableSet.induction_on_open [TopologicalSpace α] [MeasurableSpace α] [BorelSpace α]
    {C : Set α → Prop} (h_open : ∀ U, IsOpen U → C U)
    (h_compl : ∀ t, MeasurableSet t → C t → C (tᶜ))
    (h_union :
      ∀ f : ℕ → Set α,
        Pairwise (Disjoint on f) → (∀ i, MeasurableSet (f i)) → (∀ i, C (f i)) → C (⋃ i, f i)) :
    ∀ ⦃t⦄, MeasurableSet t → C t :=
  MeasurableSpace.induction_on_inter BorelSpace.measurable_eq isPiSystem_isOpen
    (h_open _ isOpen_empty) h_open h_compl h_union
#align measurable_set.induction_on_open MeasurableSet.induction_on_open

section

variable [TopologicalSpace α] [MeasurableSpace α] [OpensMeasurableSpace α] [TopologicalSpace β]
  [MeasurableSpace β] [OpensMeasurableSpace β] [TopologicalSpace γ] [MeasurableSpace γ]
  [BorelSpace γ] [TopologicalSpace γ₂] [MeasurableSpace γ₂] [BorelSpace γ₂] [MeasurableSpace δ]

#print IsOpen.measurableSet /-
theorem IsOpen.measurableSet (h : IsOpen s) : MeasurableSet s :=
  OpensMeasurableSpace.borel_le _ <| GenerateMeasurable.basic _ h
#align is_open.measurable_set IsOpen.measurableSet
-/

#print measurableSet_interior /-
@[measurability]
theorem measurableSet_interior : MeasurableSet (interior s) :=
  isOpen_interior.MeasurableSet
#align measurable_set_interior measurableSet_interior
-/

#print IsGδ.measurableSet /-
theorem IsGδ.measurableSet (h : IsGδ s) : MeasurableSet s :=
  by
  rcases h with ⟨S, hSo, hSc, rfl⟩
  exact MeasurableSet.sInter hSc fun t ht => (hSo t ht).MeasurableSet
#align is_Gδ.measurable_set IsGδ.measurableSet
-/

#print measurableSet_of_continuousAt /-
theorem measurableSet_of_continuousAt {β} [EMetricSpace β] (f : α → β) :
    MeasurableSet { x | ContinuousAt f x } :=
  (isGδ_setOf_continuousAt f).MeasurableSet
#align measurable_set_of_continuous_at measurableSet_of_continuousAt
-/

#print IsClosed.measurableSet /-
theorem IsClosed.measurableSet (h : IsClosed s) : MeasurableSet s :=
  h.isOpen_compl.MeasurableSet.ofCompl
#align is_closed.measurable_set IsClosed.measurableSet
-/

#print IsCompact.measurableSet /-
theorem IsCompact.measurableSet [T2Space α] (h : IsCompact s) : MeasurableSet s :=
  h.IsClosed.MeasurableSet
#align is_compact.measurable_set IsCompact.measurableSet
-/

#print measurableSet_closure /-
@[measurability]
theorem measurableSet_closure : MeasurableSet (closure s) :=
  isClosed_closure.MeasurableSet
#align measurable_set_closure measurableSet_closure
-/

/- warning: measurable_of_is_open -> measurable_of_isOpen is a dubious translation:
lean 3 declaration is
  forall {γ : Type.{u1}} {δ : Type.{u2}} [_inst_7 : TopologicalSpace.{u1} γ] [_inst_8 : MeasurableSpace.{u1} γ] [_inst_9 : BorelSpace.{u1} γ _inst_7 _inst_8] [_inst_13 : MeasurableSpace.{u2} δ] {f : δ -> γ}, (forall (s : Set.{u1} γ), (IsOpen.{u1} γ _inst_7 s) -> (MeasurableSet.{u2} δ _inst_13 (Set.preimage.{u2, u1} δ γ f s))) -> (Measurable.{u2, u1} δ γ _inst_13 _inst_8 f)
but is expected to have type
  forall {γ : Type.{u2}} {δ : Type.{u1}} [_inst_7 : TopologicalSpace.{u2} γ] [_inst_8 : MeasurableSpace.{u2} γ] [_inst_9 : BorelSpace.{u2} γ _inst_7 _inst_8] [_inst_13 : MeasurableSpace.{u1} δ] {f : δ -> γ}, (forall (s : Set.{u2} γ), (IsOpen.{u2} γ _inst_7 s) -> (MeasurableSet.{u1} δ _inst_13 (Set.preimage.{u1, u2} δ γ f s))) -> (Measurable.{u1, u2} δ γ _inst_13 _inst_8 f)
Case conversion may be inaccurate. Consider using '#align measurable_of_is_open measurable_of_isOpenₓ'. -/
theorem measurable_of_isOpen {f : δ → γ} (hf : ∀ s, IsOpen s → MeasurableSet (f ⁻¹' s)) :
    Measurable f := by
  rw [‹BorelSpace γ›.measurable_eq]
  exact measurable_generateFrom hf
#align measurable_of_is_open measurable_of_isOpen

/- warning: measurable_of_is_closed -> measurable_of_isClosed is a dubious translation:
lean 3 declaration is
  forall {γ : Type.{u1}} {δ : Type.{u2}} [_inst_7 : TopologicalSpace.{u1} γ] [_inst_8 : MeasurableSpace.{u1} γ] [_inst_9 : BorelSpace.{u1} γ _inst_7 _inst_8] [_inst_13 : MeasurableSpace.{u2} δ] {f : δ -> γ}, (forall (s : Set.{u1} γ), (IsClosed.{u1} γ _inst_7 s) -> (MeasurableSet.{u2} δ _inst_13 (Set.preimage.{u2, u1} δ γ f s))) -> (Measurable.{u2, u1} δ γ _inst_13 _inst_8 f)
but is expected to have type
  forall {γ : Type.{u2}} {δ : Type.{u1}} [_inst_7 : TopologicalSpace.{u2} γ] [_inst_8 : MeasurableSpace.{u2} γ] [_inst_9 : BorelSpace.{u2} γ _inst_7 _inst_8] [_inst_13 : MeasurableSpace.{u1} δ] {f : δ -> γ}, (forall (s : Set.{u2} γ), (IsClosed.{u2} γ _inst_7 s) -> (MeasurableSet.{u1} δ _inst_13 (Set.preimage.{u1, u2} δ γ f s))) -> (Measurable.{u1, u2} δ γ _inst_13 _inst_8 f)
Case conversion may be inaccurate. Consider using '#align measurable_of_is_closed measurable_of_isClosedₓ'. -/
theorem measurable_of_isClosed {f : δ → γ} (hf : ∀ s, IsClosed s → MeasurableSet (f ⁻¹' s)) :
    Measurable f := by
  apply measurable_of_isOpen; intro s hs
  rw [← MeasurableSet.compl_iff, ← preimage_compl]; apply hf; rw [isClosed_compl_iff]; exact hs
#align measurable_of_is_closed measurable_of_isClosed

/- warning: measurable_of_is_closed' -> measurable_of_is_closed' is a dubious translation:
lean 3 declaration is
  forall {γ : Type.{u1}} {δ : Type.{u2}} [_inst_7 : TopologicalSpace.{u1} γ] [_inst_8 : MeasurableSpace.{u1} γ] [_inst_9 : BorelSpace.{u1} γ _inst_7 _inst_8] [_inst_13 : MeasurableSpace.{u2} δ] {f : δ -> γ}, (forall (s : Set.{u1} γ), (IsClosed.{u1} γ _inst_7 s) -> (Set.Nonempty.{u1} γ s) -> (Ne.{succ u1} (Set.{u1} γ) s (Set.univ.{u1} γ)) -> (MeasurableSet.{u2} δ _inst_13 (Set.preimage.{u2, u1} δ γ f s))) -> (Measurable.{u2, u1} δ γ _inst_13 _inst_8 f)
but is expected to have type
  forall {γ : Type.{u2}} {δ : Type.{u1}} [_inst_7 : TopologicalSpace.{u2} γ] [_inst_8 : MeasurableSpace.{u2} γ] [_inst_9 : BorelSpace.{u2} γ _inst_7 _inst_8] [_inst_13 : MeasurableSpace.{u1} δ] {f : δ -> γ}, (forall (s : Set.{u2} γ), (IsClosed.{u2} γ _inst_7 s) -> (Set.Nonempty.{u2} γ s) -> (Ne.{succ u2} (Set.{u2} γ) s (Set.univ.{u2} γ)) -> (MeasurableSet.{u1} δ _inst_13 (Set.preimage.{u1, u2} δ γ f s))) -> (Measurable.{u1, u2} δ γ _inst_13 _inst_8 f)
Case conversion may be inaccurate. Consider using '#align measurable_of_is_closed' measurable_of_is_closed'ₓ'. -/
theorem measurable_of_is_closed' {f : δ → γ}
    (hf : ∀ s, IsClosed s → s.Nonempty → s ≠ univ → MeasurableSet (f ⁻¹' s)) : Measurable f :=
  by
  apply measurable_of_isClosed; intro s hs
  cases' eq_empty_or_nonempty s with h1 h1; · simp [h1]
  by_cases h2 : s = univ; · simp [h2]
  exact hf s hs h1 h2
#align measurable_of_is_closed' measurable_of_is_closed'

#print nhds_isMeasurablyGenerated /-
instance nhds_isMeasurablyGenerated (a : α) : (𝓝 a).IsMeasurablyGenerated :=
  by
  rw [nhds, iInf_subtype']
  refine' @Filter.iInf_isMeasurablyGenerated _ _ _ _ fun i => _
  exact i.2.2.MeasurableSet.principal_isMeasurablyGenerated
#align nhds_is_measurably_generated nhds_isMeasurablyGenerated
-/

#print MeasurableSet.nhdsWithin_isMeasurablyGenerated /-
/-- If `s` is a measurable set, then `𝓝[s] a` is a measurably generated filter for
each `a`. This cannot be an `instance` because it depends on a non-instance `hs : measurable_set s`.
-/
theorem MeasurableSet.nhdsWithin_isMeasurablyGenerated {s : Set α} (hs : MeasurableSet s) (a : α) :
    (𝓝[s] a).IsMeasurablyGenerated :=
  haveI := hs.principal_is_measurably_generated
  Filter.inf_isMeasurablyGenerated _ _
#align measurable_set.nhds_within_is_measurably_generated MeasurableSet.nhdsWithin_isMeasurablyGenerated
-/

#print OpensMeasurableSpace.toMeasurableSingletonClass /-
-- see Note [lower instance priority]
instance (priority := 100) OpensMeasurableSpace.toMeasurableSingletonClass [T1Space α] :
    MeasurableSingletonClass α :=
  ⟨fun x => isClosed_singleton.MeasurableSet⟩
#align opens_measurable_space.to_measurable_singleton_class OpensMeasurableSpace.toMeasurableSingletonClass
-/

#print Pi.opensMeasurableSpace /-
instance Pi.opensMeasurableSpace {ι : Type _} {π : ι → Type _} [Countable ι]
    [t' : ∀ i, TopologicalSpace (π i)] [∀ i, MeasurableSpace (π i)]
    [∀ i, SecondCountableTopology (π i)] [∀ i, OpensMeasurableSpace (π i)] :
    OpensMeasurableSpace (∀ i, π i) := by
  constructor
  have :
    Pi.topologicalSpace =
      generate_from
        { t |
          ∃ (s : ∀ a, Set (π a))(i : Finset ι),
            (∀ a ∈ i, s a ∈ countable_basis (π a)) ∧ t = pi (↑i) s } :=
    by rw [funext fun a => @eq_generate_from_countable_basis (π a) _ _, pi_generateFrom_eq]
  rw [borel_eq_generateFrom_of_subbasis this]
  apply generate_from_le
  rintro _ ⟨s, i, hi, rfl⟩
  refine' MeasurableSet.pi i.countable_to_set fun a ha => IsOpen.measurableSet _
  rw [eq_generate_from_countable_basis (π a)]
  exact generate_open.basic _ (hi a ha)
#align pi.opens_measurable_space Pi.opensMeasurableSpace
-/

/- warning: prod.opens_measurable_space -> Prod.opensMeasurableSpace is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] [_inst_4 : TopologicalSpace.{u2} β] [_inst_5 : MeasurableSpace.{u2} β] [_inst_6 : OpensMeasurableSpace.{u2} β _inst_4 _inst_5] [_inst_14 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] [_inst_15 : TopologicalSpace.SecondCountableTopology.{u2} β _inst_4], OpensMeasurableSpace.{max u1 u2} (Prod.{u1, u2} α β) (Prod.topologicalSpace.{u1, u2} α β _inst_1 _inst_4) (Prod.instMeasurableSpace.{u1, u2} α β _inst_2 _inst_5)
but is expected to have type
  forall {α : Type.{u1}} {β : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] [_inst_4 : TopologicalSpace.{u2} β] [_inst_5 : MeasurableSpace.{u2} β] [_inst_6 : OpensMeasurableSpace.{u2} β _inst_4 _inst_5] [_inst_14 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] [_inst_15 : TopologicalSpace.SecondCountableTopology.{u2} β _inst_4], OpensMeasurableSpace.{max u2 u1} (Prod.{u1, u2} α β) (instTopologicalSpaceProd.{u1, u2} α β _inst_1 _inst_4) (Prod.instMeasurableSpace.{u1, u2} α β _inst_2 _inst_5)
Case conversion may be inaccurate. Consider using '#align prod.opens_measurable_space Prod.opensMeasurableSpaceₓ'. -/
instance Prod.opensMeasurableSpace [SecondCountableTopology α] [SecondCountableTopology β] :
    OpensMeasurableSpace (α × β) := by
  constructor
  rw [((is_basis_countable_basis α).Prod (is_basis_countable_basis β)).borel_eq_generateFrom]
  apply generate_from_le
  rintro _ ⟨u, v, hu, hv, rfl⟩
  exact
    (is_open_of_mem_countable_basis hu).MeasurableSet.Prod
      (is_open_of_mem_countable_basis hv).MeasurableSet
#align prod.opens_measurable_space Prod.opensMeasurableSpace

variable {α' : Type _} [TopologicalSpace α'] [MeasurableSpace α']

/- warning: interior_ae_eq_of_null_frontier -> interior_ae_eq_of_null_frontier is a dubious translation:
lean 3 declaration is
  forall {α' : Type.{u1}} [_inst_14 : TopologicalSpace.{u1} α'] [_inst_15 : MeasurableSpace.{u1} α'] {μ : MeasureTheory.Measure.{u1} α' _inst_15} {s : Set.{u1} α'}, (Eq.{1} ENNReal (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α' _inst_15) (fun (_x : MeasureTheory.Measure.{u1} α' _inst_15) => (Set.{u1} α') -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α' _inst_15) μ (frontier.{u1} α' _inst_14 s)) (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) -> (Filter.EventuallyEq.{u1, 0} α' Prop (MeasureTheory.Measure.ae.{u1} α' _inst_15 μ) (interior.{u1} α' _inst_14 s) s)
but is expected to have type
  forall {α' : Type.{u1}} [_inst_14 : TopologicalSpace.{u1} α'] [_inst_15 : MeasurableSpace.{u1} α'] {μ : MeasureTheory.Measure.{u1} α' _inst_15} {s : Set.{u1} α'}, (Eq.{1} ENNReal (MeasureTheory.OuterMeasure.measureOf.{u1} α' (MeasureTheory.Measure.toOuterMeasure.{u1} α' _inst_15 μ) (frontier.{u1} α' _inst_14 s)) (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) -> (Filter.EventuallyEq.{u1, 0} α' Prop (MeasureTheory.Measure.ae.{u1} α' _inst_15 μ) (interior.{u1} α' _inst_14 s) s)
Case conversion may be inaccurate. Consider using '#align interior_ae_eq_of_null_frontier interior_ae_eq_of_null_frontierₓ'. -/
theorem interior_ae_eq_of_null_frontier {μ : Measure α'} {s : Set α'} (h : μ (frontier s) = 0) :
    interior s =ᵐ[μ] s :=
  interior_subset.EventuallyLE.antisymm <| subset_closure.EventuallyLE.trans (ae_le_set.2 h)
#align interior_ae_eq_of_null_frontier interior_ae_eq_of_null_frontier

/- warning: measure_interior_of_null_frontier -> measure_interior_of_null_frontier is a dubious translation:
lean 3 declaration is
  forall {α' : Type.{u1}} [_inst_14 : TopologicalSpace.{u1} α'] [_inst_15 : MeasurableSpace.{u1} α'] {μ : MeasureTheory.Measure.{u1} α' _inst_15} {s : Set.{u1} α'}, (Eq.{1} ENNReal (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α' _inst_15) (fun (_x : MeasureTheory.Measure.{u1} α' _inst_15) => (Set.{u1} α') -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α' _inst_15) μ (frontier.{u1} α' _inst_14 s)) (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) -> (Eq.{1} ENNReal (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α' _inst_15) (fun (_x : MeasureTheory.Measure.{u1} α' _inst_15) => (Set.{u1} α') -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α' _inst_15) μ (interior.{u1} α' _inst_14 s)) (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α' _inst_15) (fun (_x : MeasureTheory.Measure.{u1} α' _inst_15) => (Set.{u1} α') -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α' _inst_15) μ s))
but is expected to have type
  forall {α' : Type.{u1}} [_inst_14 : TopologicalSpace.{u1} α'] [_inst_15 : MeasurableSpace.{u1} α'] {μ : MeasureTheory.Measure.{u1} α' _inst_15} {s : Set.{u1} α'}, (Eq.{1} ENNReal (MeasureTheory.OuterMeasure.measureOf.{u1} α' (MeasureTheory.Measure.toOuterMeasure.{u1} α' _inst_15 μ) (frontier.{u1} α' _inst_14 s)) (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) -> (Eq.{1} ENNReal (MeasureTheory.OuterMeasure.measureOf.{u1} α' (MeasureTheory.Measure.toOuterMeasure.{u1} α' _inst_15 μ) (interior.{u1} α' _inst_14 s)) (MeasureTheory.OuterMeasure.measureOf.{u1} α' (MeasureTheory.Measure.toOuterMeasure.{u1} α' _inst_15 μ) s))
Case conversion may be inaccurate. Consider using '#align measure_interior_of_null_frontier measure_interior_of_null_frontierₓ'. -/
theorem measure_interior_of_null_frontier {μ : Measure α'} {s : Set α'} (h : μ (frontier s) = 0) :
    μ (interior s) = μ s :=
  measure_congr (interior_ae_eq_of_null_frontier h)
#align measure_interior_of_null_frontier measure_interior_of_null_frontier

/- warning: null_measurable_set_of_null_frontier -> nullMeasurableSet_of_null_frontier is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] {s : Set.{u1} α} {μ : MeasureTheory.Measure.{u1} α _inst_2}, (Eq.{1} ENNReal (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α _inst_2) (fun (_x : MeasureTheory.Measure.{u1} α _inst_2) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α _inst_2) μ (frontier.{u1} α _inst_1 s)) (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) -> (MeasureTheory.NullMeasurableSet.{u1} α _inst_2 s μ)
but is expected to have type
  forall {α : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] {s : Set.{u1} α} {μ : MeasureTheory.Measure.{u1} α _inst_2}, (Eq.{1} ENNReal (MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α _inst_2 μ) (frontier.{u1} α _inst_1 s)) (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) -> (MeasureTheory.NullMeasurableSet.{u1} α _inst_2 s μ)
Case conversion may be inaccurate. Consider using '#align null_measurable_set_of_null_frontier nullMeasurableSet_of_null_frontierₓ'. -/
theorem nullMeasurableSet_of_null_frontier {s : Set α} {μ : Measure α} (h : μ (frontier s) = 0) :
    NullMeasurableSet s μ :=
  ⟨interior s, isOpen_interior.MeasurableSet, (interior_ae_eq_of_null_frontier h).symm⟩
#align null_measurable_set_of_null_frontier nullMeasurableSet_of_null_frontier

/- warning: closure_ae_eq_of_null_frontier -> closure_ae_eq_of_null_frontier is a dubious translation:
lean 3 declaration is
  forall {α' : Type.{u1}} [_inst_14 : TopologicalSpace.{u1} α'] [_inst_15 : MeasurableSpace.{u1} α'] {μ : MeasureTheory.Measure.{u1} α' _inst_15} {s : Set.{u1} α'}, (Eq.{1} ENNReal (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α' _inst_15) (fun (_x : MeasureTheory.Measure.{u1} α' _inst_15) => (Set.{u1} α') -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α' _inst_15) μ (frontier.{u1} α' _inst_14 s)) (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) -> (Filter.EventuallyEq.{u1, 0} α' Prop (MeasureTheory.Measure.ae.{u1} α' _inst_15 μ) (closure.{u1} α' _inst_14 s) s)
but is expected to have type
  forall {α' : Type.{u1}} [_inst_14 : TopologicalSpace.{u1} α'] [_inst_15 : MeasurableSpace.{u1} α'] {μ : MeasureTheory.Measure.{u1} α' _inst_15} {s : Set.{u1} α'}, (Eq.{1} ENNReal (MeasureTheory.OuterMeasure.measureOf.{u1} α' (MeasureTheory.Measure.toOuterMeasure.{u1} α' _inst_15 μ) (frontier.{u1} α' _inst_14 s)) (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) -> (Filter.EventuallyEq.{u1, 0} α' Prop (MeasureTheory.Measure.ae.{u1} α' _inst_15 μ) (closure.{u1} α' _inst_14 s) s)
Case conversion may be inaccurate. Consider using '#align closure_ae_eq_of_null_frontier closure_ae_eq_of_null_frontierₓ'. -/
theorem closure_ae_eq_of_null_frontier {μ : Measure α'} {s : Set α'} (h : μ (frontier s) = 0) :
    closure s =ᵐ[μ] s :=
  ((ae_le_set.2 h).trans interior_subset.EventuallyLE).antisymm <| subset_closure.EventuallyLE
#align closure_ae_eq_of_null_frontier closure_ae_eq_of_null_frontier

/- warning: measure_closure_of_null_frontier -> measure_closure_of_null_frontier is a dubious translation:
lean 3 declaration is
  forall {α' : Type.{u1}} [_inst_14 : TopologicalSpace.{u1} α'] [_inst_15 : MeasurableSpace.{u1} α'] {μ : MeasureTheory.Measure.{u1} α' _inst_15} {s : Set.{u1} α'}, (Eq.{1} ENNReal (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α' _inst_15) (fun (_x : MeasureTheory.Measure.{u1} α' _inst_15) => (Set.{u1} α') -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α' _inst_15) μ (frontier.{u1} α' _inst_14 s)) (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero)))) -> (Eq.{1} ENNReal (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α' _inst_15) (fun (_x : MeasureTheory.Measure.{u1} α' _inst_15) => (Set.{u1} α') -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α' _inst_15) μ (closure.{u1} α' _inst_14 s)) (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α' _inst_15) (fun (_x : MeasureTheory.Measure.{u1} α' _inst_15) => (Set.{u1} α') -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α' _inst_15) μ s))
but is expected to have type
  forall {α' : Type.{u1}} [_inst_14 : TopologicalSpace.{u1} α'] [_inst_15 : MeasurableSpace.{u1} α'] {μ : MeasureTheory.Measure.{u1} α' _inst_15} {s : Set.{u1} α'}, (Eq.{1} ENNReal (MeasureTheory.OuterMeasure.measureOf.{u1} α' (MeasureTheory.Measure.toOuterMeasure.{u1} α' _inst_15 μ) (frontier.{u1} α' _inst_14 s)) (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero))) -> (Eq.{1} ENNReal (MeasureTheory.OuterMeasure.measureOf.{u1} α' (MeasureTheory.Measure.toOuterMeasure.{u1} α' _inst_15 μ) (closure.{u1} α' _inst_14 s)) (MeasureTheory.OuterMeasure.measureOf.{u1} α' (MeasureTheory.Measure.toOuterMeasure.{u1} α' _inst_15 μ) s))
Case conversion may be inaccurate. Consider using '#align measure_closure_of_null_frontier measure_closure_of_null_frontierₓ'. -/
theorem measure_closure_of_null_frontier {μ : Measure α'} {s : Set α'} (h : μ (frontier s) = 0) :
    μ (closure s) = μ s :=
  measure_congr (closure_ae_eq_of_null_frontier h)
#align measure_closure_of_null_frontier measure_closure_of_null_frontier

section Preorder

variable [Preorder α] [OrderClosedTopology α] {a b x : α}

#print measurableSet_Ici /-
@[simp, measurability]
theorem measurableSet_Ici : MeasurableSet (Ici a) :=
  isClosed_Ici.MeasurableSet
#align measurable_set_Ici measurableSet_Ici
-/

#print measurableSet_Iic /-
@[simp, measurability]
theorem measurableSet_Iic : MeasurableSet (Iic a) :=
  isClosed_Iic.MeasurableSet
#align measurable_set_Iic measurableSet_Iic
-/

#print measurableSet_Icc /-
@[simp, measurability]
theorem measurableSet_Icc : MeasurableSet (Icc a b) :=
  isClosed_Icc.MeasurableSet
#align measurable_set_Icc measurableSet_Icc
-/

#print nhdsWithin_Ici_isMeasurablyGenerated /-
instance nhdsWithin_Ici_isMeasurablyGenerated : (𝓝[Ici b] a).IsMeasurablyGenerated :=
  measurableSet_Ici.nhdsWithin_isMeasurablyGenerated _
#align nhds_within_Ici_is_measurably_generated nhdsWithin_Ici_isMeasurablyGenerated
-/

#print nhdsWithin_Iic_isMeasurablyGenerated /-
instance nhdsWithin_Iic_isMeasurablyGenerated : (𝓝[Iic b] a).IsMeasurablyGenerated :=
  measurableSet_Iic.nhdsWithin_isMeasurablyGenerated _
#align nhds_within_Iic_is_measurably_generated nhdsWithin_Iic_isMeasurablyGenerated
-/

#print nhdsWithin_Icc_isMeasurablyGenerated /-
instance nhdsWithin_Icc_isMeasurablyGenerated : IsMeasurablyGenerated (𝓝[Icc a b] x) :=
  by
  rw [← Ici_inter_Iic, nhdsWithin_inter]
  infer_instance
#align nhds_within_Icc_is_measurably_generated nhdsWithin_Icc_isMeasurablyGenerated
-/

#print atTop_isMeasurablyGenerated /-
instance atTop_isMeasurablyGenerated : (Filter.atTop : Filter α).IsMeasurablyGenerated :=
  @Filter.iInf_isMeasurablyGenerated _ _ _ _ fun a =>
    (measurableSet_Ici : MeasurableSet (Ici a)).principal_isMeasurablyGenerated
#align at_top_is_measurably_generated atTop_isMeasurablyGenerated
-/

#print atBot_isMeasurablyGenerated /-
instance atBot_isMeasurablyGenerated : (Filter.atBot : Filter α).IsMeasurablyGenerated :=
  @Filter.iInf_isMeasurablyGenerated _ _ _ _ fun a =>
    (measurableSet_Iic : MeasurableSet (Iic a)).principal_isMeasurablyGenerated
#align at_bot_is_measurably_generated atBot_isMeasurablyGenerated
-/

end Preorder

section PartialOrder

variable [PartialOrder α] [OrderClosedTopology α] [SecondCountableTopology α] {a b : α}

/- warning: measurable_set_le' -> measurableSet_le' is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] [_inst_16 : PartialOrder.{u1} α] [_inst_17 : OrderClosedTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α _inst_16)] [_inst_18 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1], MeasurableSet.{u1} (Prod.{u1, u1} α α) (Prod.instMeasurableSpace.{u1, u1} α α _inst_2 _inst_2) (setOf.{u1} (Prod.{u1, u1} α α) (fun (p : Prod.{u1, u1} α α) => LE.le.{u1} α (Preorder.toHasLe.{u1} α (PartialOrder.toPreorder.{u1} α _inst_16)) (Prod.fst.{u1, u1} α α p) (Prod.snd.{u1, u1} α α p)))
but is expected to have type
  forall {α : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] [_inst_16 : PartialOrder.{u1} α] [_inst_17 : OrderClosedTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α _inst_16)] [_inst_18 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1], MeasurableSet.{u1} (Prod.{u1, u1} α α) (Prod.instMeasurableSpace.{u1, u1} α α _inst_2 _inst_2) (setOf.{u1} (Prod.{u1, u1} α α) (fun (p : Prod.{u1, u1} α α) => LE.le.{u1} α (Preorder.toLE.{u1} α (PartialOrder.toPreorder.{u1} α _inst_16)) (Prod.fst.{u1, u1} α α p) (Prod.snd.{u1, u1} α α p)))
Case conversion may be inaccurate. Consider using '#align measurable_set_le' measurableSet_le'ₓ'. -/
@[measurability]
theorem measurableSet_le' : MeasurableSet { p : α × α | p.1 ≤ p.2 } :=
  OrderClosedTopology.isClosed_le'.MeasurableSet
#align measurable_set_le' measurableSet_le'

/- warning: measurable_set_le -> measurableSet_le is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] [_inst_13 : MeasurableSpace.{u2} δ] [_inst_16 : PartialOrder.{u1} α] [_inst_17 : OrderClosedTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α _inst_16)] [_inst_18 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {f : δ -> α} {g : δ -> α}, (Measurable.{u2, u1} δ α _inst_13 _inst_2 f) -> (Measurable.{u2, u1} δ α _inst_13 _inst_2 g) -> (MeasurableSet.{u2} δ _inst_13 (setOf.{u2} δ (fun (a : δ) => LE.le.{u1} α (Preorder.toHasLe.{u1} α (PartialOrder.toPreorder.{u1} α _inst_16)) (f a) (g a))))
but is expected to have type
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] [_inst_13 : MeasurableSpace.{u2} δ] [_inst_16 : PartialOrder.{u1} α] [_inst_17 : OrderClosedTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α _inst_16)] [_inst_18 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {f : δ -> α} {g : δ -> α}, (Measurable.{u2, u1} δ α _inst_13 _inst_2 f) -> (Measurable.{u2, u1} δ α _inst_13 _inst_2 g) -> (MeasurableSet.{u2} δ _inst_13 (setOf.{u2} δ (fun (a : δ) => LE.le.{u1} α (Preorder.toLE.{u1} α (PartialOrder.toPreorder.{u1} α _inst_16)) (f a) (g a))))
Case conversion may be inaccurate. Consider using '#align measurable_set_le measurableSet_leₓ'. -/
@[measurability]
theorem measurableSet_le {f g : δ → α} (hf : Measurable f) (hg : Measurable g) :
    MeasurableSet { a | f a ≤ g a } :=
  hf.prod_mk hg measurableSet_le'
#align measurable_set_le measurableSet_le

end PartialOrder

section LinearOrder

variable [LinearOrder α] [OrderClosedTopology α] {a b x : α}

-- we open this locale only here to avoid issues with list being treated as intervals above
open Interval

#print measurableSet_Iio /-
@[simp, measurability]
theorem measurableSet_Iio : MeasurableSet (Iio a) :=
  isOpen_Iio.MeasurableSet
#align measurable_set_Iio measurableSet_Iio
-/

#print measurableSet_Ioi /-
@[simp, measurability]
theorem measurableSet_Ioi : MeasurableSet (Ioi a) :=
  isOpen_Ioi.MeasurableSet
#align measurable_set_Ioi measurableSet_Ioi
-/

#print measurableSet_Ioo /-
@[simp, measurability]
theorem measurableSet_Ioo : MeasurableSet (Ioo a b) :=
  isOpen_Ioo.MeasurableSet
#align measurable_set_Ioo measurableSet_Ioo
-/

#print measurableSet_Ioc /-
@[simp, measurability]
theorem measurableSet_Ioc : MeasurableSet (Ioc a b) :=
  measurableSet_Ioi.inter measurableSet_Iic
#align measurable_set_Ioc measurableSet_Ioc
-/

#print measurableSet_Ico /-
@[simp, measurability]
theorem measurableSet_Ico : MeasurableSet (Ico a b) :=
  measurableSet_Ici.inter measurableSet_Iio
#align measurable_set_Ico measurableSet_Ico
-/

#print nhdsWithin_Ioi_isMeasurablyGenerated /-
instance nhdsWithin_Ioi_isMeasurablyGenerated : (𝓝[Ioi b] a).IsMeasurablyGenerated :=
  measurableSet_Ioi.nhdsWithin_isMeasurablyGenerated _
#align nhds_within_Ioi_is_measurably_generated nhdsWithin_Ioi_isMeasurablyGenerated
-/

#print nhdsWithin_Iio_isMeasurablyGenerated /-
instance nhdsWithin_Iio_isMeasurablyGenerated : (𝓝[Iio b] a).IsMeasurablyGenerated :=
  measurableSet_Iio.nhdsWithin_isMeasurablyGenerated _
#align nhds_within_Iio_is_measurably_generated nhdsWithin_Iio_isMeasurablyGenerated
-/

#print nhdsWithin_uIcc_isMeasurablyGenerated /-
instance nhdsWithin_uIcc_isMeasurablyGenerated : IsMeasurablyGenerated (𝓝[[a, b]] x) :=
  nhdsWithin_Icc_isMeasurablyGenerated
#align nhds_within_uIcc_is_measurably_generated nhdsWithin_uIcc_isMeasurablyGenerated
-/

/- warning: measurable_set_lt' -> measurableSet_lt' is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] [_inst_16 : LinearOrder.{u1} α] [_inst_17 : OrderClosedTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_16))))] [_inst_18 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1], MeasurableSet.{u1} (Prod.{u1, u1} α α) (Prod.instMeasurableSpace.{u1, u1} α α _inst_2 _inst_2) (setOf.{u1} (Prod.{u1, u1} α α) (fun (p : Prod.{u1, u1} α α) => LT.lt.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_16))))) (Prod.fst.{u1, u1} α α p) (Prod.snd.{u1, u1} α α p)))
but is expected to have type
  forall {α : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] [_inst_16 : LinearOrder.{u1} α] [_inst_17 : OrderClosedTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_16)))))] [_inst_18 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1], MeasurableSet.{u1} (Prod.{u1, u1} α α) (Prod.instMeasurableSpace.{u1, u1} α α _inst_2 _inst_2) (setOf.{u1} (Prod.{u1, u1} α α) (fun (p : Prod.{u1, u1} α α) => LT.lt.{u1} α (Preorder.toLT.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_16)))))) (Prod.fst.{u1, u1} α α p) (Prod.snd.{u1, u1} α α p)))
Case conversion may be inaccurate. Consider using '#align measurable_set_lt' measurableSet_lt'ₓ'. -/
@[measurability]
theorem measurableSet_lt' [SecondCountableTopology α] : MeasurableSet { p : α × α | p.1 < p.2 } :=
  (isOpen_lt continuous_fst continuous_snd).MeasurableSet
#align measurable_set_lt' measurableSet_lt'

/- warning: measurable_set_lt -> measurableSet_lt is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] [_inst_13 : MeasurableSpace.{u2} δ] [_inst_16 : LinearOrder.{u1} α] [_inst_17 : OrderClosedTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_16))))] [_inst_18 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {f : δ -> α} {g : δ -> α}, (Measurable.{u2, u1} δ α _inst_13 _inst_2 f) -> (Measurable.{u2, u1} δ α _inst_13 _inst_2 g) -> (MeasurableSet.{u2} δ _inst_13 (setOf.{u2} δ (fun (a : δ) => LT.lt.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_16))))) (f a) (g a))))
but is expected to have type
  forall {α : Type.{u2}} {δ : Type.{u1}} [_inst_1 : TopologicalSpace.{u2} α] [_inst_2 : MeasurableSpace.{u2} α] [_inst_3 : OpensMeasurableSpace.{u2} α _inst_1 _inst_2] [_inst_13 : MeasurableSpace.{u1} δ] [_inst_16 : LinearOrder.{u2} α] [_inst_17 : OrderClosedTopology.{u2} α _inst_1 (PartialOrder.toPreorder.{u2} α (SemilatticeInf.toPartialOrder.{u2} α (Lattice.toSemilatticeInf.{u2} α (DistribLattice.toLattice.{u2} α (instDistribLattice.{u2} α _inst_16)))))] [_inst_18 : TopologicalSpace.SecondCountableTopology.{u2} α _inst_1] {f : δ -> α} {g : δ -> α}, (Measurable.{u1, u2} δ α _inst_13 _inst_2 f) -> (Measurable.{u1, u2} δ α _inst_13 _inst_2 g) -> (MeasurableSet.{u1} δ _inst_13 (setOf.{u1} δ (fun (a : δ) => LT.lt.{u2} α (Preorder.toLT.{u2} α (PartialOrder.toPreorder.{u2} α (SemilatticeInf.toPartialOrder.{u2} α (Lattice.toSemilatticeInf.{u2} α (DistribLattice.toLattice.{u2} α (instDistribLattice.{u2} α _inst_16)))))) (f a) (g a))))
Case conversion may be inaccurate. Consider using '#align measurable_set_lt measurableSet_ltₓ'. -/
@[measurability]
theorem measurableSet_lt [SecondCountableTopology α] {f g : δ → α} (hf : Measurable f)
    (hg : Measurable g) : MeasurableSet { a | f a < g a } :=
  hf.prod_mk hg measurableSet_lt'
#align measurable_set_lt measurableSet_lt

/- warning: null_measurable_set_lt -> nullMeasurableSet_lt is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] [_inst_13 : MeasurableSpace.{u2} δ] [_inst_16 : LinearOrder.{u1} α] [_inst_17 : OrderClosedTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_16))))] [_inst_18 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {μ : MeasureTheory.Measure.{u2} δ _inst_13} {f : δ -> α} {g : δ -> α}, (AEMeasurable.{u2, u1} δ α _inst_2 _inst_13 f μ) -> (AEMeasurable.{u2, u1} δ α _inst_2 _inst_13 g μ) -> (MeasureTheory.NullMeasurableSet.{u2} δ _inst_13 (setOf.{u2} δ (fun (a : δ) => LT.lt.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_16))))) (f a) (g a))) μ)
but is expected to have type
  forall {α : Type.{u2}} {δ : Type.{u1}} [_inst_1 : TopologicalSpace.{u2} α] [_inst_2 : MeasurableSpace.{u2} α] [_inst_3 : OpensMeasurableSpace.{u2} α _inst_1 _inst_2] [_inst_13 : MeasurableSpace.{u1} δ] [_inst_16 : LinearOrder.{u2} α] [_inst_17 : OrderClosedTopology.{u2} α _inst_1 (PartialOrder.toPreorder.{u2} α (SemilatticeInf.toPartialOrder.{u2} α (Lattice.toSemilatticeInf.{u2} α (DistribLattice.toLattice.{u2} α (instDistribLattice.{u2} α _inst_16)))))] [_inst_18 : TopologicalSpace.SecondCountableTopology.{u2} α _inst_1] {μ : MeasureTheory.Measure.{u1} δ _inst_13} {f : δ -> α} {g : δ -> α}, (AEMeasurable.{u1, u2} δ α _inst_2 _inst_13 f μ) -> (AEMeasurable.{u1, u2} δ α _inst_2 _inst_13 g μ) -> (MeasureTheory.NullMeasurableSet.{u1} δ _inst_13 (setOf.{u1} δ (fun (a : δ) => LT.lt.{u2} α (Preorder.toLT.{u2} α (PartialOrder.toPreorder.{u2} α (SemilatticeInf.toPartialOrder.{u2} α (Lattice.toSemilatticeInf.{u2} α (DistribLattice.toLattice.{u2} α (instDistribLattice.{u2} α _inst_16)))))) (f a) (g a))) μ)
Case conversion may be inaccurate. Consider using '#align null_measurable_set_lt nullMeasurableSet_ltₓ'. -/
theorem nullMeasurableSet_lt [SecondCountableTopology α] {μ : Measure δ} {f g : δ → α}
    (hf : AEMeasurable f μ) (hg : AEMeasurable g μ) : NullMeasurableSet { a | f a < g a } μ :=
  (hf.prod_mk hg).NullMeasurable measurableSet_lt'
#align null_measurable_set_lt nullMeasurableSet_lt

#print Set.OrdConnected.measurableSet /-
theorem Set.OrdConnected.measurableSet (h : OrdConnected s) : MeasurableSet s :=
  by
  let u := ⋃ (x ∈ s) (y ∈ s), Ioo x y
  have huopen : IsOpen u := isOpen_biUnion fun x hx => isOpen_biUnion fun y hy => isOpen_Ioo
  have humeas : MeasurableSet u := huopen.measurable_set
  have hfinite : (s \ u).Finite := s.finite_diff_Union_Ioo
  have : u ⊆ s :=
    Union₂_subset fun x hx => Union₂_subset fun y hy => Ioo_subset_Icc_self.trans (h.out hx hy)
  rw [← union_diff_cancel this]
  exact humeas.union hfinite.measurable_set
#align set.ord_connected.measurable_set Set.OrdConnected.measurableSet
-/

#print IsPreconnected.measurableSet /-
theorem IsPreconnected.measurableSet (h : IsPreconnected s) : MeasurableSet s :=
  h.OrdConnected.MeasurableSet
#align is_preconnected.measurable_set IsPreconnected.measurableSet
-/

/- warning: generate_from_Ico_mem_le_borel -> generateFrom_Ico_mem_le_borel is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_18 : TopologicalSpace.{u1} α] [_inst_19 : LinearOrder.{u1} α] [_inst_20 : OrderClosedTopology.{u1} α _inst_18 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19))))] (s : Set.{u1} α) (t : Set.{u1} α), LE.le.{u1} (MeasurableSpace.{u1} α) (MeasurableSpace.hasLe.{u1} α) (MeasurableSpace.generateFrom.{u1} α (setOf.{u1} (Set.{u1} α) (fun (S : Set.{u1} α) => Exists.{succ u1} α (fun (l : α) => Exists.{0} (Membership.Mem.{u1, u1} α (Set.{u1} α) (Set.hasMem.{u1} α) l s) (fun (H : Membership.Mem.{u1, u1} α (Set.{u1} α) (Set.hasMem.{u1} α) l s) => Exists.{succ u1} α (fun (u : α) => Exists.{0} (Membership.Mem.{u1, u1} α (Set.{u1} α) (Set.hasMem.{u1} α) u t) (fun (H : Membership.Mem.{u1, u1} α (Set.{u1} α) (Set.hasMem.{u1} α) u t) => Exists.{0} (LT.lt.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19))))) l u) (fun (h : LT.lt.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19))))) l u) => Eq.{succ u1} (Set.{u1} α) (Set.Ico.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19)))) l u) S)))))))) (borel.{u1} α _inst_18)
but is expected to have type
  forall {α : Type.{u1}} [_inst_18 : TopologicalSpace.{u1} α] [_inst_19 : LinearOrder.{u1} α] [_inst_20 : OrderClosedTopology.{u1} α _inst_18 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_19)))))] (s : Set.{u1} α) (t : Set.{u1} α), LE.le.{u1} (MeasurableSpace.{u1} α) (MeasurableSpace.instLEMeasurableSpace.{u1} α) (MeasurableSpace.generateFrom.{u1} α (setOf.{u1} (Set.{u1} α) (fun (S : Set.{u1} α) => Exists.{succ u1} α (fun (l : α) => And (Membership.mem.{u1, u1} α (Set.{u1} α) (Set.instMembershipSet.{u1} α) l s) (Exists.{succ u1} α (fun (u : α) => And (Membership.mem.{u1, u1} α (Set.{u1} α) (Set.instMembershipSet.{u1} α) u t) (And (LT.lt.{u1} α (Preorder.toLT.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_19)))))) l u) (Eq.{succ u1} (Set.{u1} α) (Set.Ico.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_19))))) l u) S)))))))) (borel.{u1} α _inst_18)
Case conversion may be inaccurate. Consider using '#align generate_from_Ico_mem_le_borel generateFrom_Ico_mem_le_borelₓ'. -/
theorem generateFrom_Ico_mem_le_borel {α : Type _} [TopologicalSpace α] [LinearOrder α]
    [OrderClosedTopology α] (s t : Set α) :
    MeasurableSpace.generateFrom { S | ∃ l ∈ s, ∃ u ∈ t, ∃ h : l < u, Ico l u = S } ≤ borel α :=
  by
  apply generate_from_le
  borelize α
  rintro _ ⟨a, -, b, -, -, rfl⟩
  exact measurableSet_Ico
#align generate_from_Ico_mem_le_borel generateFrom_Ico_mem_le_borel

/- warning: dense.borel_eq_generate_from_Ico_mem_aux -> Dense.borel_eq_generateFrom_Ico_mem_aux is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_18 : TopologicalSpace.{u1} α] [_inst_19 : LinearOrder.{u1} α] [_inst_20 : OrderTopology.{u1} α _inst_18 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19))))] [_inst_21 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_18] {s : Set.{u1} α}, (Dense.{u1} α _inst_18 s) -> (forall (x : α), (IsBot.{u1} α (Preorder.toHasLe.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19))))) x) -> (Membership.Mem.{u1, u1} α (Set.{u1} α) (Set.hasMem.{u1} α) x s)) -> (forall (x : α) (y : α), (LT.lt.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19))))) x y) -> (Eq.{succ u1} (Set.{u1} α) (Set.Ioo.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19)))) x y) (EmptyCollection.emptyCollection.{u1} (Set.{u1} α) (Set.hasEmptyc.{u1} α))) -> (Membership.Mem.{u1, u1} α (Set.{u1} α) (Set.hasMem.{u1} α) y s)) -> (Eq.{succ u1} (MeasurableSpace.{u1} α) (borel.{u1} α _inst_18) (MeasurableSpace.generateFrom.{u1} α (setOf.{u1} (Set.{u1} α) (fun (S : Set.{u1} α) => Exists.{succ u1} α (fun (l : α) => Exists.{0} (Membership.Mem.{u1, u1} α (Set.{u1} α) (Set.hasMem.{u1} α) l s) (fun (H : Membership.Mem.{u1, u1} α (Set.{u1} α) (Set.hasMem.{u1} α) l s) => Exists.{succ u1} α (fun (u : α) => Exists.{0} (Membership.Mem.{u1, u1} α (Set.{u1} α) (Set.hasMem.{u1} α) u s) (fun (H : Membership.Mem.{u1, u1} α (Set.{u1} α) (Set.hasMem.{u1} α) u s) => Exists.{0} (LT.lt.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19))))) l u) (fun (h : LT.lt.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19))))) l u) => Eq.{succ u1} (Set.{u1} α) (Set.Ico.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19)))) l u) S)))))))))
but is expected to have type
  forall {α : Type.{u1}} [_inst_18 : TopologicalSpace.{u1} α] [_inst_19 : LinearOrder.{u1} α] [_inst_20 : OrderTopology.{u1} α _inst_18 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_19)))))] [_inst_21 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_18] {s : Set.{u1} α}, (Dense.{u1} α _inst_18 s) -> (forall (x : α), (IsBot.{u1} α (Preorder.toLE.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_19)))))) x) -> (Membership.mem.{u1, u1} α (Set.{u1} α) (Set.instMembershipSet.{u1} α) x s)) -> (forall (x : α) (y : α), (LT.lt.{u1} α (Preorder.toLT.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_19)))))) x y) -> (Eq.{succ u1} (Set.{u1} α) (Set.Ioo.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_19))))) x y) (EmptyCollection.emptyCollection.{u1} (Set.{u1} α) (Set.instEmptyCollectionSet.{u1} α))) -> (Membership.mem.{u1, u1} α (Set.{u1} α) (Set.instMembershipSet.{u1} α) y s)) -> (Eq.{succ u1} (MeasurableSpace.{u1} α) (borel.{u1} α _inst_18) (MeasurableSpace.generateFrom.{u1} α (setOf.{u1} (Set.{u1} α) (fun (S : Set.{u1} α) => Exists.{succ u1} α (fun (l : α) => And (Membership.mem.{u1, u1} α (Set.{u1} α) (Set.instMembershipSet.{u1} α) l s) (Exists.{succ u1} α (fun (u : α) => And (Membership.mem.{u1, u1} α (Set.{u1} α) (Set.instMembershipSet.{u1} α) u s) (And (LT.lt.{u1} α (Preorder.toLT.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_19)))))) l u) (Eq.{succ u1} (Set.{u1} α) (Set.Ico.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_19))))) l u) S)))))))))
Case conversion may be inaccurate. Consider using '#align dense.borel_eq_generate_from_Ico_mem_aux Dense.borel_eq_generateFrom_Ico_mem_auxₓ'. -/
theorem Dense.borel_eq_generateFrom_Ico_mem_aux {α : Type _} [TopologicalSpace α] [LinearOrder α]
    [OrderTopology α] [SecondCountableTopology α] {s : Set α} (hd : Dense s)
    (hbot : ∀ x, IsBot x → x ∈ s) (hIoo : ∀ x y : α, x < y → Ioo x y = ∅ → y ∈ s) :
    borel α = generateFrom { S : Set α | ∃ l ∈ s, ∃ u ∈ s, ∃ h : l < u, Ico l u = S } :=
  by
  set S : Set (Set α) := { S | ∃ l ∈ s, ∃ u ∈ s, ∃ h : l < u, Ico l u = S }
  refine' le_antisymm _ (generateFrom_Ico_mem_le_borel _ _)
  letI : MeasurableSpace α := generate_from S
  rw [borel_eq_generateFrom_Iio]
  refine' generate_from_le (forall_range_iff.2 fun a => _)
  rcases hd.exists_countable_dense_subset_bot_top with ⟨t, hts, hc, htd, htb, htt⟩
  by_cases ha : ∀ b < a, (Ioo b a).Nonempty
  · convert_to MeasurableSet (⋃ (l ∈ t) (u ∈ t) (hlu : l < u) (hu : u ≤ a), Ico l u)
    · ext y
      simp only [mem_Union, mem_Iio, mem_Ico]
      constructor
      · intro hy
        rcases htd.exists_le' (fun b hb => htb _ hb (hbot b hb)) y with ⟨l, hlt, hly⟩
        rcases htd.exists_mem_open isOpen_Ioo (ha y hy) with ⟨u, hut, hyu, hua⟩
        exact ⟨l, hlt, u, hut, hly.trans_lt hyu, hua.le, hly, hyu⟩
      · rintro ⟨l, -, u, -, -, hua, -, hyu⟩
        exact hyu.trans_le hua
    · refine' MeasurableSet.biUnion hc fun a ha => MeasurableSet.biUnion hc fun b hb => _
      refine' MeasurableSet.iUnion fun hab => MeasurableSet.iUnion fun hb' => _
      exact generate_measurable.basic _ ⟨a, hts ha, b, hts hb, hab, mem_singleton _⟩
  · simp only [not_forall, not_nonempty_iff_eq_empty] at ha
    replace ha : a ∈ s := hIoo ha.some a ha.some_spec.fst ha.some_spec.snd
    convert_to MeasurableSet (⋃ (l ∈ t) (hl : l < a), Ico l a)
    · symm
      simp only [← Ici_inter_Iio, ← Union_inter, inter_eq_right_iff_subset, subset_def, mem_Union,
        mem_Ici, mem_Iio]
      intro x hx
      rcases htd.exists_le' (fun b hb => htb _ hb (hbot b hb)) x with ⟨z, hzt, hzx⟩
      exact ⟨z, hzt, hzx.trans_lt hx, hzx⟩
    · refine' MeasurableSet.biUnion hc fun x hx => MeasurableSet.iUnion fun hlt => _
      exact generate_measurable.basic _ ⟨x, hts hx, a, ha, hlt, mem_singleton _⟩
#align dense.borel_eq_generate_from_Ico_mem_aux Dense.borel_eq_generateFrom_Ico_mem_aux

/- warning: dense.borel_eq_generate_from_Ico_mem -> Dense.borel_eq_generateFrom_Ico_mem is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_18 : TopologicalSpace.{u1} α] [_inst_19 : LinearOrder.{u1} α] [_inst_20 : OrderTopology.{u1} α _inst_18 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19))))] [_inst_21 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_18] [_inst_22 : DenselyOrdered.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19)))))] [_inst_23 : NoMinOrder.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19)))))] {s : Set.{u1} α}, (Dense.{u1} α _inst_18 s) -> (Eq.{succ u1} (MeasurableSpace.{u1} α) (borel.{u1} α _inst_18) (MeasurableSpace.generateFrom.{u1} α (setOf.{u1} (Set.{u1} α) (fun (S : Set.{u1} α) => Exists.{succ u1} α (fun (l : α) => Exists.{0} (Membership.Mem.{u1, u1} α (Set.{u1} α) (Set.hasMem.{u1} α) l s) (fun (H : Membership.Mem.{u1, u1} α (Set.{u1} α) (Set.hasMem.{u1} α) l s) => Exists.{succ u1} α (fun (u : α) => Exists.{0} (Membership.Mem.{u1, u1} α (Set.{u1} α) (Set.hasMem.{u1} α) u s) (fun (H : Membership.Mem.{u1, u1} α (Set.{u1} α) (Set.hasMem.{u1} α) u s) => Exists.{0} (LT.lt.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19))))) l u) (fun (h : LT.lt.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19))))) l u) => Eq.{succ u1} (Set.{u1} α) (Set.Ico.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19)))) l u) S)))))))))
but is expected to have type
  forall {α : Type.{u1}} [_inst_18 : TopologicalSpace.{u1} α] [_inst_19 : LinearOrder.{u1} α] [_inst_20 : OrderTopology.{u1} α _inst_18 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_19)))))] [_inst_21 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_18] [_inst_22 : DenselyOrdered.{u1} α (Preorder.toLT.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_19))))))] [_inst_23 : NoMinOrder.{u1} α (Preorder.toLT.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_19))))))] {s : Set.{u1} α}, (Dense.{u1} α _inst_18 s) -> (Eq.{succ u1} (MeasurableSpace.{u1} α) (borel.{u1} α _inst_18) (MeasurableSpace.generateFrom.{u1} α (setOf.{u1} (Set.{u1} α) (fun (S : Set.{u1} α) => Exists.{succ u1} α (fun (l : α) => And (Membership.mem.{u1, u1} α (Set.{u1} α) (Set.instMembershipSet.{u1} α) l s) (Exists.{succ u1} α (fun (u : α) => And (Membership.mem.{u1, u1} α (Set.{u1} α) (Set.instMembershipSet.{u1} α) u s) (And (LT.lt.{u1} α (Preorder.toLT.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_19)))))) l u) (Eq.{succ u1} (Set.{u1} α) (Set.Ico.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_19))))) l u) S)))))))))
Case conversion may be inaccurate. Consider using '#align dense.borel_eq_generate_from_Ico_mem Dense.borel_eq_generateFrom_Ico_memₓ'. -/
theorem Dense.borel_eq_generateFrom_Ico_mem {α : Type _} [TopologicalSpace α] [LinearOrder α]
    [OrderTopology α] [SecondCountableTopology α] [DenselyOrdered α] [NoMinOrder α] {s : Set α}
    (hd : Dense s) :
    borel α = generateFrom { S : Set α | ∃ l ∈ s, ∃ u ∈ s, ∃ h : l < u, Ico l u = S } :=
  hd.borel_eq_generateFrom_Ico_mem_aux (by simp) fun x y hxy H =>
    ((nonempty_Ioo.2 hxy).ne_empty H).elim
#align dense.borel_eq_generate_from_Ico_mem Dense.borel_eq_generateFrom_Ico_mem

/- warning: borel_eq_generate_from_Ico -> borel_eq_generateFrom_Ico is a dubious translation:
lean 3 declaration is
  forall (α : Type.{u1}) [_inst_18 : TopologicalSpace.{u1} α] [_inst_19 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_18] [_inst_20 : LinearOrder.{u1} α] [_inst_21 : OrderTopology.{u1} α _inst_18 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20))))], Eq.{succ u1} (MeasurableSpace.{u1} α) (borel.{u1} α _inst_18) (MeasurableSpace.generateFrom.{u1} α (setOf.{u1} (Set.{u1} α) (fun (S : Set.{u1} α) => Exists.{succ u1} α (fun (l : α) => Exists.{succ u1} α (fun (u : α) => Exists.{0} (LT.lt.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20))))) l u) (fun (h : LT.lt.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20))))) l u) => Eq.{succ u1} (Set.{u1} α) (Set.Ico.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20)))) l u) S))))))
but is expected to have type
  forall (α : Type.{u1}) [_inst_18 : TopologicalSpace.{u1} α] [_inst_19 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_18] [_inst_20 : LinearOrder.{u1} α] [_inst_21 : OrderTopology.{u1} α _inst_18 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_20)))))], Eq.{succ u1} (MeasurableSpace.{u1} α) (borel.{u1} α _inst_18) (MeasurableSpace.generateFrom.{u1} α (setOf.{u1} (Set.{u1} α) (fun (S : Set.{u1} α) => Exists.{succ u1} α (fun (l : α) => Exists.{succ u1} α (fun (u : α) => And (LT.lt.{u1} α (Preorder.toLT.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_20)))))) l u) (Eq.{succ u1} (Set.{u1} α) (Set.Ico.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_20))))) l u) S))))))
Case conversion may be inaccurate. Consider using '#align borel_eq_generate_from_Ico borel_eq_generateFrom_Icoₓ'. -/
theorem borel_eq_generateFrom_Ico (α : Type _) [TopologicalSpace α] [SecondCountableTopology α]
    [LinearOrder α] [OrderTopology α] :
    borel α = generateFrom { S : Set α | ∃ (l u : _)(h : l < u), Ico l u = S } := by
  simpa only [exists_prop, mem_univ, true_and_iff] using
    (@dense_univ α _).borel_eq_generateFrom_Ico_mem_aux (fun _ _ => mem_univ _) fun _ _ _ _ =>
      mem_univ _
#align borel_eq_generate_from_Ico borel_eq_generateFrom_Ico

/- warning: dense.borel_eq_generate_from_Ioc_mem_aux -> Dense.borel_eq_generateFrom_Ioc_mem_aux is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_18 : TopologicalSpace.{u1} α] [_inst_19 : LinearOrder.{u1} α] [_inst_20 : OrderTopology.{u1} α _inst_18 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19))))] [_inst_21 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_18] {s : Set.{u1} α}, (Dense.{u1} α _inst_18 s) -> (forall (x : α), (IsTop.{u1} α (Preorder.toHasLe.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19))))) x) -> (Membership.Mem.{u1, u1} α (Set.{u1} α) (Set.hasMem.{u1} α) x s)) -> (forall (x : α) (y : α), (LT.lt.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19))))) x y) -> (Eq.{succ u1} (Set.{u1} α) (Set.Ioo.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19)))) x y) (EmptyCollection.emptyCollection.{u1} (Set.{u1} α) (Set.hasEmptyc.{u1} α))) -> (Membership.Mem.{u1, u1} α (Set.{u1} α) (Set.hasMem.{u1} α) x s)) -> (Eq.{succ u1} (MeasurableSpace.{u1} α) (borel.{u1} α _inst_18) (MeasurableSpace.generateFrom.{u1} α (setOf.{u1} (Set.{u1} α) (fun (S : Set.{u1} α) => Exists.{succ u1} α (fun (l : α) => Exists.{0} (Membership.Mem.{u1, u1} α (Set.{u1} α) (Set.hasMem.{u1} α) l s) (fun (H : Membership.Mem.{u1, u1} α (Set.{u1} α) (Set.hasMem.{u1} α) l s) => Exists.{succ u1} α (fun (u : α) => Exists.{0} (Membership.Mem.{u1, u1} α (Set.{u1} α) (Set.hasMem.{u1} α) u s) (fun (H : Membership.Mem.{u1, u1} α (Set.{u1} α) (Set.hasMem.{u1} α) u s) => Exists.{0} (LT.lt.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19))))) l u) (fun (h : LT.lt.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19))))) l u) => Eq.{succ u1} (Set.{u1} α) (Set.Ioc.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19)))) l u) S)))))))))
but is expected to have type
  forall {α : Type.{u1}} [_inst_18 : TopologicalSpace.{u1} α] [_inst_19 : LinearOrder.{u1} α] [_inst_20 : OrderTopology.{u1} α _inst_18 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_19)))))] [_inst_21 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_18] {s : Set.{u1} α}, (Dense.{u1} α _inst_18 s) -> (forall (x : α), (IsTop.{u1} α (Preorder.toLE.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_19)))))) x) -> (Membership.mem.{u1, u1} α (Set.{u1} α) (Set.instMembershipSet.{u1} α) x s)) -> (forall (x : α) (y : α), (LT.lt.{u1} α (Preorder.toLT.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_19)))))) x y) -> (Eq.{succ u1} (Set.{u1} α) (Set.Ioo.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_19))))) x y) (EmptyCollection.emptyCollection.{u1} (Set.{u1} α) (Set.instEmptyCollectionSet.{u1} α))) -> (Membership.mem.{u1, u1} α (Set.{u1} α) (Set.instMembershipSet.{u1} α) x s)) -> (Eq.{succ u1} (MeasurableSpace.{u1} α) (borel.{u1} α _inst_18) (MeasurableSpace.generateFrom.{u1} α (setOf.{u1} (Set.{u1} α) (fun (S : Set.{u1} α) => Exists.{succ u1} α (fun (l : α) => And (Membership.mem.{u1, u1} α (Set.{u1} α) (Set.instMembershipSet.{u1} α) l s) (Exists.{succ u1} α (fun (u : α) => And (Membership.mem.{u1, u1} α (Set.{u1} α) (Set.instMembershipSet.{u1} α) u s) (And (LT.lt.{u1} α (Preorder.toLT.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_19)))))) l u) (Eq.{succ u1} (Set.{u1} α) (Set.Ioc.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_19))))) l u) S)))))))))
Case conversion may be inaccurate. Consider using '#align dense.borel_eq_generate_from_Ioc_mem_aux Dense.borel_eq_generateFrom_Ioc_mem_auxₓ'. -/
theorem Dense.borel_eq_generateFrom_Ioc_mem_aux {α : Type _} [TopologicalSpace α] [LinearOrder α]
    [OrderTopology α] [SecondCountableTopology α] {s : Set α} (hd : Dense s)
    (hbot : ∀ x, IsTop x → x ∈ s) (hIoo : ∀ x y : α, x < y → Ioo x y = ∅ → x ∈ s) :
    borel α = generateFrom { S : Set α | ∃ l ∈ s, ∃ u ∈ s, ∃ h : l < u, Ioc l u = S } :=
  by
  convert hd.order_dual.borel_eq_generate_from_Ico_mem_aux hbot fun x y hlt he => hIoo y x hlt _
  · ext s
    constructor <;> rintro ⟨l, hl, u, hu, hlt, rfl⟩
    exacts[⟨u, hu, l, hl, hlt, dual_Ico⟩, ⟨u, hu, l, hl, hlt, dual_Ioc⟩]
  · erw [dual_Ioo]
    exact he
#align dense.borel_eq_generate_from_Ioc_mem_aux Dense.borel_eq_generateFrom_Ioc_mem_aux

/- warning: dense.borel_eq_generate_from_Ioc_mem -> Dense.borel_eq_generateFrom_Ioc_mem is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_18 : TopologicalSpace.{u1} α] [_inst_19 : LinearOrder.{u1} α] [_inst_20 : OrderTopology.{u1} α _inst_18 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19))))] [_inst_21 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_18] [_inst_22 : DenselyOrdered.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19)))))] [_inst_23 : NoMaxOrder.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19)))))] {s : Set.{u1} α}, (Dense.{u1} α _inst_18 s) -> (Eq.{succ u1} (MeasurableSpace.{u1} α) (borel.{u1} α _inst_18) (MeasurableSpace.generateFrom.{u1} α (setOf.{u1} (Set.{u1} α) (fun (S : Set.{u1} α) => Exists.{succ u1} α (fun (l : α) => Exists.{0} (Membership.Mem.{u1, u1} α (Set.{u1} α) (Set.hasMem.{u1} α) l s) (fun (H : Membership.Mem.{u1, u1} α (Set.{u1} α) (Set.hasMem.{u1} α) l s) => Exists.{succ u1} α (fun (u : α) => Exists.{0} (Membership.Mem.{u1, u1} α (Set.{u1} α) (Set.hasMem.{u1} α) u s) (fun (H : Membership.Mem.{u1, u1} α (Set.{u1} α) (Set.hasMem.{u1} α) u s) => Exists.{0} (LT.lt.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19))))) l u) (fun (h : LT.lt.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19))))) l u) => Eq.{succ u1} (Set.{u1} α) (Set.Ioc.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_19)))) l u) S)))))))))
but is expected to have type
  forall {α : Type.{u1}} [_inst_18 : TopologicalSpace.{u1} α] [_inst_19 : LinearOrder.{u1} α] [_inst_20 : OrderTopology.{u1} α _inst_18 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_19)))))] [_inst_21 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_18] [_inst_22 : DenselyOrdered.{u1} α (Preorder.toLT.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_19))))))] [_inst_23 : NoMaxOrder.{u1} α (Preorder.toLT.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_19))))))] {s : Set.{u1} α}, (Dense.{u1} α _inst_18 s) -> (Eq.{succ u1} (MeasurableSpace.{u1} α) (borel.{u1} α _inst_18) (MeasurableSpace.generateFrom.{u1} α (setOf.{u1} (Set.{u1} α) (fun (S : Set.{u1} α) => Exists.{succ u1} α (fun (l : α) => And (Membership.mem.{u1, u1} α (Set.{u1} α) (Set.instMembershipSet.{u1} α) l s) (Exists.{succ u1} α (fun (u : α) => And (Membership.mem.{u1, u1} α (Set.{u1} α) (Set.instMembershipSet.{u1} α) u s) (And (LT.lt.{u1} α (Preorder.toLT.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_19)))))) l u) (Eq.{succ u1} (Set.{u1} α) (Set.Ioc.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_19))))) l u) S)))))))))
Case conversion may be inaccurate. Consider using '#align dense.borel_eq_generate_from_Ioc_mem Dense.borel_eq_generateFrom_Ioc_memₓ'. -/
theorem Dense.borel_eq_generateFrom_Ioc_mem {α : Type _} [TopologicalSpace α] [LinearOrder α]
    [OrderTopology α] [SecondCountableTopology α] [DenselyOrdered α] [NoMaxOrder α] {s : Set α}
    (hd : Dense s) :
    borel α = generateFrom { S : Set α | ∃ l ∈ s, ∃ u ∈ s, ∃ h : l < u, Ioc l u = S } :=
  hd.borel_eq_generateFrom_Ioc_mem_aux (by simp) fun x y hxy H =>
    ((nonempty_Ioo.2 hxy).ne_empty H).elim
#align dense.borel_eq_generate_from_Ioc_mem Dense.borel_eq_generateFrom_Ioc_mem

/- warning: borel_eq_generate_from_Ioc -> borel_eq_generateFrom_Ioc is a dubious translation:
lean 3 declaration is
  forall (α : Type.{u1}) [_inst_18 : TopologicalSpace.{u1} α] [_inst_19 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_18] [_inst_20 : LinearOrder.{u1} α] [_inst_21 : OrderTopology.{u1} α _inst_18 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20))))], Eq.{succ u1} (MeasurableSpace.{u1} α) (borel.{u1} α _inst_18) (MeasurableSpace.generateFrom.{u1} α (setOf.{u1} (Set.{u1} α) (fun (S : Set.{u1} α) => Exists.{succ u1} α (fun (l : α) => Exists.{succ u1} α (fun (u : α) => Exists.{0} (LT.lt.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20))))) l u) (fun (h : LT.lt.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20))))) l u) => Eq.{succ u1} (Set.{u1} α) (Set.Ioc.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20)))) l u) S))))))
but is expected to have type
  forall (α : Type.{u1}) [_inst_18 : TopologicalSpace.{u1} α] [_inst_19 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_18] [_inst_20 : LinearOrder.{u1} α] [_inst_21 : OrderTopology.{u1} α _inst_18 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_20)))))], Eq.{succ u1} (MeasurableSpace.{u1} α) (borel.{u1} α _inst_18) (MeasurableSpace.generateFrom.{u1} α (setOf.{u1} (Set.{u1} α) (fun (S : Set.{u1} α) => Exists.{succ u1} α (fun (l : α) => Exists.{succ u1} α (fun (u : α) => And (LT.lt.{u1} α (Preorder.toLT.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_20)))))) l u) (Eq.{succ u1} (Set.{u1} α) (Set.Ioc.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_20))))) l u) S))))))
Case conversion may be inaccurate. Consider using '#align borel_eq_generate_from_Ioc borel_eq_generateFrom_Iocₓ'. -/
theorem borel_eq_generateFrom_Ioc (α : Type _) [TopologicalSpace α] [SecondCountableTopology α]
    [LinearOrder α] [OrderTopology α] :
    borel α = generateFrom { S : Set α | ∃ (l u : _)(h : l < u), Ioc l u = S } := by
  simpa only [exists_prop, mem_univ, true_and_iff] using
    (@dense_univ α _).borel_eq_generateFrom_Ioc_mem_aux (fun _ _ => mem_univ _) fun _ _ _ _ =>
      mem_univ _
#align borel_eq_generate_from_Ioc borel_eq_generateFrom_Ioc

namespace MeasureTheory.Measure

/- warning: measure_theory.measure.ext_of_Ico_finite -> MeasureTheory.Measure.ext_of_Ico_finite is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_18 : TopologicalSpace.{u1} α] {m : MeasurableSpace.{u1} α} [_inst_19 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_18] [_inst_20 : LinearOrder.{u1} α] [_inst_21 : OrderTopology.{u1} α _inst_18 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20))))] [_inst_22 : BorelSpace.{u1} α _inst_18 m] (μ : MeasureTheory.Measure.{u1} α m) (ν : MeasureTheory.Measure.{u1} α m) [_inst_23 : MeasureTheory.FiniteMeasure.{u1} α m μ], (Eq.{1} ENNReal (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α m) (fun (_x : MeasureTheory.Measure.{u1} α m) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α m) μ (Set.univ.{u1} α)) (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α m) (fun (_x : MeasureTheory.Measure.{u1} α m) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α m) ν (Set.univ.{u1} α))) -> (forall {{a : α}} {{b : α}}, (LT.lt.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20))))) a b) -> (Eq.{1} ENNReal (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α m) (fun (_x : MeasureTheory.Measure.{u1} α m) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α m) μ (Set.Ico.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20)))) a b)) (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α m) (fun (_x : MeasureTheory.Measure.{u1} α m) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α m) ν (Set.Ico.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20)))) a b)))) -> (Eq.{succ u1} (MeasureTheory.Measure.{u1} α m) μ ν)
but is expected to have type
  forall {α : Type.{u1}} [_inst_18 : TopologicalSpace.{u1} α] {m : MeasurableSpace.{u1} α} [_inst_19 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_18] [_inst_20 : LinearOrder.{u1} α] [_inst_21 : OrderTopology.{u1} α _inst_18 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_20)))))] [_inst_22 : BorelSpace.{u1} α _inst_18 m] (μ : MeasureTheory.Measure.{u1} α m) (ν : MeasureTheory.Measure.{u1} α m) [_inst_23 : MeasureTheory.FiniteMeasure.{u1} α m μ], (Eq.{1} ENNReal (MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α m μ) (Set.univ.{u1} α)) (MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α m ν) (Set.univ.{u1} α))) -> (forall {{a : α}} {{b : α}}, (LT.lt.{u1} α (Preorder.toLT.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_20)))))) a b) -> (Eq.{1} ENNReal (MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α m μ) (Set.Ico.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_20))))) a b)) (MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α m ν) (Set.Ico.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_20))))) a b)))) -> (Eq.{succ u1} (MeasureTheory.Measure.{u1} α m) μ ν)
Case conversion may be inaccurate. Consider using '#align measure_theory.measure.ext_of_Ico_finite MeasureTheory.Measure.ext_of_Ico_finiteₓ'. -/
/-- Two finite measures on a Borel space are equal if they agree on all closed-open intervals.  If
`α` is a conditionally complete linear order with no top element,
`measure_theory.measure..ext_of_Ico` is an extensionality lemma with weaker assumptions on `μ` and
`ν`. -/
theorem ext_of_Ico_finite {α : Type _} [TopologicalSpace α] {m : MeasurableSpace α}
    [SecondCountableTopology α] [LinearOrder α] [OrderTopology α] [BorelSpace α] (μ ν : Measure α)
    [FiniteMeasure μ] (hμν : μ univ = ν univ) (h : ∀ ⦃a b⦄, a < b → μ (Ico a b) = ν (Ico a b)) :
    μ = ν :=
  by
  refine'
    ext_of_generate_finite _ (borel_space.measurable_eq.trans (borel_eq_generateFrom_Ico α))
      (isPiSystem_Ico (id : α → α) id) _ hμν
  · rintro - ⟨a, b, hlt, rfl⟩
    exact h hlt
#align measure_theory.measure.ext_of_Ico_finite MeasureTheory.Measure.ext_of_Ico_finite

/- warning: measure_theory.measure.ext_of_Ioc_finite -> MeasureTheory.Measure.ext_of_Ioc_finite is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_18 : TopologicalSpace.{u1} α] {m : MeasurableSpace.{u1} α} [_inst_19 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_18] [_inst_20 : LinearOrder.{u1} α] [_inst_21 : OrderTopology.{u1} α _inst_18 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20))))] [_inst_22 : BorelSpace.{u1} α _inst_18 m] (μ : MeasureTheory.Measure.{u1} α m) (ν : MeasureTheory.Measure.{u1} α m) [_inst_23 : MeasureTheory.FiniteMeasure.{u1} α m μ], (Eq.{1} ENNReal (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α m) (fun (_x : MeasureTheory.Measure.{u1} α m) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α m) μ (Set.univ.{u1} α)) (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α m) (fun (_x : MeasureTheory.Measure.{u1} α m) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α m) ν (Set.univ.{u1} α))) -> (forall {{a : α}} {{b : α}}, (LT.lt.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20))))) a b) -> (Eq.{1} ENNReal (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α m) (fun (_x : MeasureTheory.Measure.{u1} α m) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α m) μ (Set.Ioc.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20)))) a b)) (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α m) (fun (_x : MeasureTheory.Measure.{u1} α m) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α m) ν (Set.Ioc.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20)))) a b)))) -> (Eq.{succ u1} (MeasureTheory.Measure.{u1} α m) μ ν)
but is expected to have type
  forall {α : Type.{u1}} [_inst_18 : TopologicalSpace.{u1} α] {m : MeasurableSpace.{u1} α} [_inst_19 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_18] [_inst_20 : LinearOrder.{u1} α] [_inst_21 : OrderTopology.{u1} α _inst_18 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_20)))))] [_inst_22 : BorelSpace.{u1} α _inst_18 m] (μ : MeasureTheory.Measure.{u1} α m) (ν : MeasureTheory.Measure.{u1} α m) [_inst_23 : MeasureTheory.FiniteMeasure.{u1} α m μ], (Eq.{1} ENNReal (MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α m μ) (Set.univ.{u1} α)) (MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α m ν) (Set.univ.{u1} α))) -> (forall {{a : α}} {{b : α}}, (LT.lt.{u1} α (Preorder.toLT.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_20)))))) a b) -> (Eq.{1} ENNReal (MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α m μ) (Set.Ioc.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_20))))) a b)) (MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α m ν) (Set.Ioc.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_20))))) a b)))) -> (Eq.{succ u1} (MeasureTheory.Measure.{u1} α m) μ ν)
Case conversion may be inaccurate. Consider using '#align measure_theory.measure.ext_of_Ioc_finite MeasureTheory.Measure.ext_of_Ioc_finiteₓ'. -/
/-- Two finite measures on a Borel space are equal if they agree on all open-closed intervals.  If
`α` is a conditionally complete linear order with no top element,
`measure_theory.measure..ext_of_Ioc` is an extensionality lemma with weaker assumptions on `μ` and
`ν`. -/
theorem ext_of_Ioc_finite {α : Type _} [TopologicalSpace α] {m : MeasurableSpace α}
    [SecondCountableTopology α] [LinearOrder α] [OrderTopology α] [BorelSpace α] (μ ν : Measure α)
    [FiniteMeasure μ] (hμν : μ univ = ν univ) (h : ∀ ⦃a b⦄, a < b → μ (Ioc a b) = ν (Ioc a b)) :
    μ = ν := by
  refine' @ext_of_Ico_finite αᵒᵈ _ _ _ _ _ ‹_› μ ν _ hμν fun a b hab => _
  erw [dual_Ico]
  exact h hab
#align measure_theory.measure.ext_of_Ioc_finite MeasureTheory.Measure.ext_of_Ioc_finite

/- warning: measure_theory.measure.ext_of_Ico' -> MeasureTheory.Measure.ext_of_Ico' is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_18 : TopologicalSpace.{u1} α] {m : MeasurableSpace.{u1} α} [_inst_19 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_18] [_inst_20 : LinearOrder.{u1} α] [_inst_21 : OrderTopology.{u1} α _inst_18 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20))))] [_inst_22 : BorelSpace.{u1} α _inst_18 m] [_inst_23 : NoMaxOrder.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20)))))] (μ : MeasureTheory.Measure.{u1} α m) (ν : MeasureTheory.Measure.{u1} α m), (forall {{a : α}} {{b : α}}, (LT.lt.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20))))) a b) -> (Ne.{1} ENNReal (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α m) (fun (_x : MeasureTheory.Measure.{u1} α m) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α m) μ (Set.Ico.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20)))) a b)) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) -> (forall {{a : α}} {{b : α}}, (LT.lt.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20))))) a b) -> (Eq.{1} ENNReal (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α m) (fun (_x : MeasureTheory.Measure.{u1} α m) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α m) μ (Set.Ico.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20)))) a b)) (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α m) (fun (_x : MeasureTheory.Measure.{u1} α m) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α m) ν (Set.Ico.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20)))) a b)))) -> (Eq.{succ u1} (MeasureTheory.Measure.{u1} α m) μ ν)
but is expected to have type
  forall {α : Type.{u1}} [_inst_18 : TopologicalSpace.{u1} α] {m : MeasurableSpace.{u1} α} [_inst_19 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_18] [_inst_20 : LinearOrder.{u1} α] [_inst_21 : OrderTopology.{u1} α _inst_18 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_20)))))] [_inst_22 : BorelSpace.{u1} α _inst_18 m] [_inst_23 : NoMaxOrder.{u1} α (Preorder.toLT.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_20))))))] (μ : MeasureTheory.Measure.{u1} α m) (ν : MeasureTheory.Measure.{u1} α m), (forall {{a : α}} {{b : α}}, (LT.lt.{u1} α (Preorder.toLT.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_20)))))) a b) -> (Ne.{1} ENNReal (MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α m μ) (Set.Ico.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_20))))) a b)) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) -> (forall {{a : α}} {{b : α}}, (LT.lt.{u1} α (Preorder.toLT.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_20)))))) a b) -> (Eq.{1} ENNReal (MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α m μ) (Set.Ico.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_20))))) a b)) (MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α m ν) (Set.Ico.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_20))))) a b)))) -> (Eq.{succ u1} (MeasureTheory.Measure.{u1} α m) μ ν)
Case conversion may be inaccurate. Consider using '#align measure_theory.measure.ext_of_Ico' MeasureTheory.Measure.ext_of_Ico'ₓ'. -/
/-- Two measures which are finite on closed-open intervals are equal if the agree on all
closed-open intervals. -/
theorem ext_of_Ico' {α : Type _} [TopologicalSpace α] {m : MeasurableSpace α}
    [SecondCountableTopology α] [LinearOrder α] [OrderTopology α] [BorelSpace α] [NoMaxOrder α]
    (μ ν : Measure α) (hμ : ∀ ⦃a b⦄, a < b → μ (Ico a b) ≠ ∞)
    (h : ∀ ⦃a b⦄, a < b → μ (Ico a b) = ν (Ico a b)) : μ = ν :=
  by
  rcases exists_countable_dense_bot_top α with ⟨s, hsc, hsd, hsb, hst⟩
  have : (⋃ (l ∈ s) (u ∈ s) (h : l < u), {Ico l u} : Set (Set α)).Countable :=
    hsc.bUnion fun l hl => hsc.bUnion fun u hu => countable_Union fun _ => countable_singleton _
  simp only [← set_of_eq_eq_singleton, ← set_of_exists] at this
  refine'
    measure.ext_of_generate_from_of_cover_subset
      (borel_space.measurable_eq.trans (borel_eq_generateFrom_Ico α)) (isPiSystem_Ico id id) _ this
      _ _ _
  · rintro _ ⟨l, -, u, -, h, rfl⟩
    exact ⟨l, u, h, rfl⟩
  · refine' sUnion_eq_univ_iff.2 fun x => _
    rcases hsd.exists_le' hsb x with ⟨l, hls, hlx⟩
    rcases hsd.exists_gt x with ⟨u, hus, hxu⟩
    exact ⟨_, ⟨l, hls, u, hus, hlx.trans_lt hxu, rfl⟩, hlx, hxu⟩
  · rintro _ ⟨l, -, u, -, hlt, rfl⟩
    exact hμ hlt
  · rintro _ ⟨l, u, hlt, rfl⟩
    exact h hlt
#align measure_theory.measure.ext_of_Ico' MeasureTheory.Measure.ext_of_Ico'

/- warning: measure_theory.measure.ext_of_Ioc' -> MeasureTheory.Measure.ext_of_Ioc' is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_18 : TopologicalSpace.{u1} α] {m : MeasurableSpace.{u1} α} [_inst_19 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_18] [_inst_20 : LinearOrder.{u1} α] [_inst_21 : OrderTopology.{u1} α _inst_18 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20))))] [_inst_22 : BorelSpace.{u1} α _inst_18 m] [_inst_23 : NoMinOrder.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20)))))] (μ : MeasureTheory.Measure.{u1} α m) (ν : MeasureTheory.Measure.{u1} α m), (forall {{a : α}} {{b : α}}, (LT.lt.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20))))) a b) -> (Ne.{1} ENNReal (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α m) (fun (_x : MeasureTheory.Measure.{u1} α m) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α m) μ (Set.Ioc.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20)))) a b)) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))))) -> (forall {{a : α}} {{b : α}}, (LT.lt.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20))))) a b) -> (Eq.{1} ENNReal (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α m) (fun (_x : MeasureTheory.Measure.{u1} α m) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α m) μ (Set.Ioc.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20)))) a b)) (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α m) (fun (_x : MeasureTheory.Measure.{u1} α m) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α m) ν (Set.Ioc.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_20)))) a b)))) -> (Eq.{succ u1} (MeasureTheory.Measure.{u1} α m) μ ν)
but is expected to have type
  forall {α : Type.{u1}} [_inst_18 : TopologicalSpace.{u1} α] {m : MeasurableSpace.{u1} α} [_inst_19 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_18] [_inst_20 : LinearOrder.{u1} α] [_inst_21 : OrderTopology.{u1} α _inst_18 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_20)))))] [_inst_22 : BorelSpace.{u1} α _inst_18 m] [_inst_23 : NoMinOrder.{u1} α (Preorder.toLT.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_20))))))] (μ : MeasureTheory.Measure.{u1} α m) (ν : MeasureTheory.Measure.{u1} α m), (forall {{a : α}} {{b : α}}, (LT.lt.{u1} α (Preorder.toLT.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_20)))))) a b) -> (Ne.{1} ENNReal (MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α m μ) (Set.Ioc.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_20))))) a b)) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))))) -> (forall {{a : α}} {{b : α}}, (LT.lt.{u1} α (Preorder.toLT.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_20)))))) a b) -> (Eq.{1} ENNReal (MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α m μ) (Set.Ioc.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_20))))) a b)) (MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α m ν) (Set.Ioc.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_20))))) a b)))) -> (Eq.{succ u1} (MeasureTheory.Measure.{u1} α m) μ ν)
Case conversion may be inaccurate. Consider using '#align measure_theory.measure.ext_of_Ioc' MeasureTheory.Measure.ext_of_Ioc'ₓ'. -/
/-- Two measures which are finite on closed-open intervals are equal if the agree on all
open-closed intervals. -/
theorem ext_of_Ioc' {α : Type _} [TopologicalSpace α] {m : MeasurableSpace α}
    [SecondCountableTopology α] [LinearOrder α] [OrderTopology α] [BorelSpace α] [NoMinOrder α]
    (μ ν : Measure α) (hμ : ∀ ⦃a b⦄, a < b → μ (Ioc a b) ≠ ∞)
    (h : ∀ ⦃a b⦄, a < b → μ (Ioc a b) = ν (Ioc a b)) : μ = ν :=
  by
  refine' @ext_of_Ico' αᵒᵈ _ _ _ _ _ ‹_› _ μ ν _ _ <;> intro a b hab <;> erw [dual_Ico]
  exacts[hμ hab, h hab]
#align measure_theory.measure.ext_of_Ioc' MeasureTheory.Measure.ext_of_Ioc'

/- warning: measure_theory.measure.ext_of_Ico -> MeasureTheory.Measure.ext_of_Ico is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_18 : TopologicalSpace.{u1} α] {m : MeasurableSpace.{u1} α} [_inst_19 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_18] [_inst_20 : ConditionallyCompleteLinearOrder.{u1} α] [_inst_21 : OrderTopology.{u1} α _inst_18 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_20)))))] [_inst_22 : BorelSpace.{u1} α _inst_18 m] [_inst_23 : NoMaxOrder.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_20))))))] (μ : MeasureTheory.Measure.{u1} α m) (ν : MeasureTheory.Measure.{u1} α m) [_inst_24 : MeasureTheory.LocallyFiniteMeasure.{u1} α m _inst_18 μ], (forall {{a : α}} {{b : α}}, (LT.lt.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_20)))))) a b) -> (Eq.{1} ENNReal (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α m) (fun (_x : MeasureTheory.Measure.{u1} α m) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α m) μ (Set.Ico.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_20))))) a b)) (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α m) (fun (_x : MeasureTheory.Measure.{u1} α m) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α m) ν (Set.Ico.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_20))))) a b)))) -> (Eq.{succ u1} (MeasureTheory.Measure.{u1} α m) μ ν)
but is expected to have type
  forall {α : Type.{u1}} [_inst_18 : TopologicalSpace.{u1} α] {m : MeasurableSpace.{u1} α} [_inst_19 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_18] [_inst_20 : ConditionallyCompleteLinearOrder.{u1} α] [_inst_21 : OrderTopology.{u1} α _inst_18 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_20)))))] [_inst_22 : BorelSpace.{u1} α _inst_18 m] [_inst_23 : NoMaxOrder.{u1} α (Preorder.toLT.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_20))))))] (μ : MeasureTheory.Measure.{u1} α m) (ν : MeasureTheory.Measure.{u1} α m) [_inst_24 : MeasureTheory.LocallyFiniteMeasure.{u1} α m _inst_18 μ], (forall {{a : α}} {{b : α}}, (LT.lt.{u1} α (Preorder.toLT.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_20)))))) a b) -> (Eq.{1} ENNReal (MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α m μ) (Set.Ico.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_20))))) a b)) (MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α m ν) (Set.Ico.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_20))))) a b)))) -> (Eq.{succ u1} (MeasureTheory.Measure.{u1} α m) μ ν)
Case conversion may be inaccurate. Consider using '#align measure_theory.measure.ext_of_Ico MeasureTheory.Measure.ext_of_Icoₓ'. -/
/-- Two measures which are finite on closed-open intervals are equal if the agree on all
closed-open intervals. -/
theorem ext_of_Ico {α : Type _} [TopologicalSpace α] {m : MeasurableSpace α}
    [SecondCountableTopology α] [ConditionallyCompleteLinearOrder α] [OrderTopology α]
    [BorelSpace α] [NoMaxOrder α] (μ ν : Measure α) [LocallyFiniteMeasure μ]
    (h : ∀ ⦃a b⦄, a < b → μ (Ico a b) = ν (Ico a b)) : μ = ν :=
  μ.ext_of_Ico' ν (fun a b hab => measure_Ico_lt_top.Ne) h
#align measure_theory.measure.ext_of_Ico MeasureTheory.Measure.ext_of_Ico

/- warning: measure_theory.measure.ext_of_Ioc -> MeasureTheory.Measure.ext_of_Ioc is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_18 : TopologicalSpace.{u1} α] {m : MeasurableSpace.{u1} α} [_inst_19 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_18] [_inst_20 : ConditionallyCompleteLinearOrder.{u1} α] [_inst_21 : OrderTopology.{u1} α _inst_18 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_20)))))] [_inst_22 : BorelSpace.{u1} α _inst_18 m] [_inst_23 : NoMinOrder.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_20))))))] (μ : MeasureTheory.Measure.{u1} α m) (ν : MeasureTheory.Measure.{u1} α m) [_inst_24 : MeasureTheory.LocallyFiniteMeasure.{u1} α m _inst_18 μ], (forall {{a : α}} {{b : α}}, (LT.lt.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_20)))))) a b) -> (Eq.{1} ENNReal (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α m) (fun (_x : MeasureTheory.Measure.{u1} α m) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α m) μ (Set.Ioc.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_20))))) a b)) (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α m) (fun (_x : MeasureTheory.Measure.{u1} α m) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α m) ν (Set.Ioc.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_20))))) a b)))) -> (Eq.{succ u1} (MeasureTheory.Measure.{u1} α m) μ ν)
but is expected to have type
  forall {α : Type.{u1}} [_inst_18 : TopologicalSpace.{u1} α] {m : MeasurableSpace.{u1} α} [_inst_19 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_18] [_inst_20 : ConditionallyCompleteLinearOrder.{u1} α] [_inst_21 : OrderTopology.{u1} α _inst_18 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_20)))))] [_inst_22 : BorelSpace.{u1} α _inst_18 m] [_inst_23 : NoMinOrder.{u1} α (Preorder.toLT.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_20))))))] (μ : MeasureTheory.Measure.{u1} α m) (ν : MeasureTheory.Measure.{u1} α m) [_inst_24 : MeasureTheory.LocallyFiniteMeasure.{u1} α m _inst_18 μ], (forall {{a : α}} {{b : α}}, (LT.lt.{u1} α (Preorder.toLT.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_20)))))) a b) -> (Eq.{1} ENNReal (MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α m μ) (Set.Ioc.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_20))))) a b)) (MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α m ν) (Set.Ioc.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_20))))) a b)))) -> (Eq.{succ u1} (MeasureTheory.Measure.{u1} α m) μ ν)
Case conversion may be inaccurate. Consider using '#align measure_theory.measure.ext_of_Ioc MeasureTheory.Measure.ext_of_Iocₓ'. -/
/-- Two measures which are finite on closed-open intervals are equal if the agree on all
open-closed intervals. -/
theorem ext_of_Ioc {α : Type _} [TopologicalSpace α] {m : MeasurableSpace α}
    [SecondCountableTopology α] [ConditionallyCompleteLinearOrder α] [OrderTopology α]
    [BorelSpace α] [NoMinOrder α] (μ ν : Measure α) [LocallyFiniteMeasure μ]
    (h : ∀ ⦃a b⦄, a < b → μ (Ioc a b) = ν (Ioc a b)) : μ = ν :=
  μ.ext_of_Ioc' ν (fun a b hab => measure_Ioc_lt_top.Ne) h
#align measure_theory.measure.ext_of_Ioc MeasureTheory.Measure.ext_of_Ioc

#print MeasureTheory.Measure.ext_of_Iic /-
/-- Two finite measures on a Borel space are equal if they agree on all left-infinite right-closed
intervals. -/
theorem ext_of_Iic {α : Type _} [TopologicalSpace α] {m : MeasurableSpace α}
    [SecondCountableTopology α] [LinearOrder α] [OrderTopology α] [BorelSpace α] (μ ν : Measure α)
    [FiniteMeasure μ] (h : ∀ a, μ (Iic a) = ν (Iic a)) : μ = ν :=
  by
  refine' ext_of_Ioc_finite μ ν _ fun a b hlt => _
  · rcases exists_countable_dense_bot_top α with ⟨s, hsc, hsd, -, hst⟩
    have : DirectedOn (· ≤ ·) s := directedOn_iff_directed.2 (directed_of_sup fun _ _ => id)
    simp only [← bsupr_measure_Iic hsc (hsd.exists_ge' hst) this, h]
  rw [← Iic_diff_Iic, measure_diff (Iic_subset_Iic.2 hlt.le) measurableSet_Iic,
    measure_diff (Iic_subset_Iic.2 hlt.le) measurableSet_Iic, h a, h b]
  · rw [← h a]
    exact (measure_lt_top μ _).Ne
  · exact (measure_lt_top μ _).Ne
#align measure_theory.measure.ext_of_Iic MeasureTheory.Measure.ext_of_Iic
-/

#print MeasureTheory.Measure.ext_of_Ici /-
/-- Two finite measures on a Borel space are equal if they agree on all left-closed right-infinite
intervals. -/
theorem ext_of_Ici {α : Type _} [TopologicalSpace α] {m : MeasurableSpace α}
    [SecondCountableTopology α] [LinearOrder α] [OrderTopology α] [BorelSpace α] (μ ν : Measure α)
    [FiniteMeasure μ] (h : ∀ a, μ (Ici a) = ν (Ici a)) : μ = ν :=
  @ext_of_Iic αᵒᵈ _ _ _ _ _ ‹_› _ _ _ h
#align measure_theory.measure.ext_of_Ici MeasureTheory.Measure.ext_of_Ici
-/

end MeasureTheory.Measure

end LinearOrder

section LinearOrder

variable [LinearOrder α] [OrderClosedTopology α] {a b : α}

#print measurableSet_uIcc /-
@[measurability]
theorem measurableSet_uIcc : MeasurableSet (uIcc a b) :=
  measurableSet_Icc
#align measurable_set_uIcc measurableSet_uIcc
-/

#print measurableSet_uIoc /-
@[measurability]
theorem measurableSet_uIoc : MeasurableSet (uIoc a b) :=
  measurableSet_Ioc
#align measurable_set_uIoc measurableSet_uIoc
-/

variable [SecondCountableTopology α]

/- warning: measurable.max -> Measurable.max is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] [_inst_13 : MeasurableSpace.{u2} δ] [_inst_16 : LinearOrder.{u1} α] [_inst_17 : OrderClosedTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_16))))] [_inst_18 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {f : δ -> α} {g : δ -> α}, (Measurable.{u2, u1} δ α _inst_13 _inst_2 f) -> (Measurable.{u2, u1} δ α _inst_13 _inst_2 g) -> (Measurable.{u2, u1} δ α _inst_13 _inst_2 (fun (a : δ) => LinearOrder.max.{u1} α _inst_16 (f a) (g a)))
but is expected to have type
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] [_inst_13 : MeasurableSpace.{u2} δ] [_inst_16 : LinearOrder.{u1} α] [_inst_17 : OrderClosedTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_16)))))] [_inst_18 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {f : δ -> α} {g : δ -> α}, (Measurable.{u2, u1} δ α _inst_13 _inst_2 f) -> (Measurable.{u2, u1} δ α _inst_13 _inst_2 g) -> (Measurable.{u2, u1} δ α _inst_13 _inst_2 (fun (a : δ) => Max.max.{u1} α (LinearOrder.toMax.{u1} α _inst_16) (f a) (g a)))
Case conversion may be inaccurate. Consider using '#align measurable.max Measurable.maxₓ'. -/
@[measurability]
theorem Measurable.max {f g : δ → α} (hf : Measurable f) (hg : Measurable g) :
    Measurable fun a => max (f a) (g a) := by
  simpa only [max_def'] using hf.piecewise (measurableSet_le hg hf) hg
#align measurable.max Measurable.max

/- warning: ae_measurable.max -> AEMeasurable.max is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] [_inst_13 : MeasurableSpace.{u2} δ] [_inst_16 : LinearOrder.{u1} α] [_inst_17 : OrderClosedTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_16))))] [_inst_18 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {f : δ -> α} {g : δ -> α} {μ : MeasureTheory.Measure.{u2} δ _inst_13}, (AEMeasurable.{u2, u1} δ α _inst_2 _inst_13 f μ) -> (AEMeasurable.{u2, u1} δ α _inst_2 _inst_13 g μ) -> (AEMeasurable.{u2, u1} δ α _inst_2 _inst_13 (fun (a : δ) => LinearOrder.max.{u1} α _inst_16 (f a) (g a)) μ)
but is expected to have type
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] [_inst_13 : MeasurableSpace.{u2} δ] [_inst_16 : LinearOrder.{u1} α] [_inst_17 : OrderClosedTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_16)))))] [_inst_18 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {f : δ -> α} {g : δ -> α} {μ : MeasureTheory.Measure.{u2} δ _inst_13}, (AEMeasurable.{u2, u1} δ α _inst_2 _inst_13 f μ) -> (AEMeasurable.{u2, u1} δ α _inst_2 _inst_13 g μ) -> (AEMeasurable.{u2, u1} δ α _inst_2 _inst_13 (fun (a : δ) => Max.max.{u1} α (LinearOrder.toMax.{u1} α _inst_16) (f a) (g a)) μ)
Case conversion may be inaccurate. Consider using '#align ae_measurable.max AEMeasurable.maxₓ'. -/
@[measurability]
theorem AEMeasurable.max {f g : δ → α} {μ : Measure δ} (hf : AEMeasurable f μ)
    (hg : AEMeasurable g μ) : AEMeasurable (fun a => max (f a) (g a)) μ :=
  ⟨fun a => max (hf.mk f a) (hg.mk g a), hf.measurable_mk.max hg.measurable_mk,
    EventuallyEq.comp₂ hf.ae_eq_mk _ hg.ae_eq_mk⟩
#align ae_measurable.max AEMeasurable.max

/- warning: measurable.min -> Measurable.min is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] [_inst_13 : MeasurableSpace.{u2} δ] [_inst_16 : LinearOrder.{u1} α] [_inst_17 : OrderClosedTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_16))))] [_inst_18 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {f : δ -> α} {g : δ -> α}, (Measurable.{u2, u1} δ α _inst_13 _inst_2 f) -> (Measurable.{u2, u1} δ α _inst_13 _inst_2 g) -> (Measurable.{u2, u1} δ α _inst_13 _inst_2 (fun (a : δ) => LinearOrder.min.{u1} α _inst_16 (f a) (g a)))
but is expected to have type
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] [_inst_13 : MeasurableSpace.{u2} δ] [_inst_16 : LinearOrder.{u1} α] [_inst_17 : OrderClosedTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_16)))))] [_inst_18 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {f : δ -> α} {g : δ -> α}, (Measurable.{u2, u1} δ α _inst_13 _inst_2 f) -> (Measurable.{u2, u1} δ α _inst_13 _inst_2 g) -> (Measurable.{u2, u1} δ α _inst_13 _inst_2 (fun (a : δ) => Min.min.{u1} α (LinearOrder.toMin.{u1} α _inst_16) (f a) (g a)))
Case conversion may be inaccurate. Consider using '#align measurable.min Measurable.minₓ'. -/
@[measurability]
theorem Measurable.min {f g : δ → α} (hf : Measurable f) (hg : Measurable g) :
    Measurable fun a => min (f a) (g a) := by
  simpa only [min_def] using hf.piecewise (measurableSet_le hf hg) hg
#align measurable.min Measurable.min

/- warning: ae_measurable.min -> AEMeasurable.min is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] [_inst_13 : MeasurableSpace.{u2} δ] [_inst_16 : LinearOrder.{u1} α] [_inst_17 : OrderClosedTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_16))))] [_inst_18 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {f : δ -> α} {g : δ -> α} {μ : MeasureTheory.Measure.{u2} δ _inst_13}, (AEMeasurable.{u2, u1} δ α _inst_2 _inst_13 f μ) -> (AEMeasurable.{u2, u1} δ α _inst_2 _inst_13 g μ) -> (AEMeasurable.{u2, u1} δ α _inst_2 _inst_13 (fun (a : δ) => LinearOrder.min.{u1} α _inst_16 (f a) (g a)) μ)
but is expected to have type
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] [_inst_13 : MeasurableSpace.{u2} δ] [_inst_16 : LinearOrder.{u1} α] [_inst_17 : OrderClosedTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_16)))))] [_inst_18 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {f : δ -> α} {g : δ -> α} {μ : MeasureTheory.Measure.{u2} δ _inst_13}, (AEMeasurable.{u2, u1} δ α _inst_2 _inst_13 f μ) -> (AEMeasurable.{u2, u1} δ α _inst_2 _inst_13 g μ) -> (AEMeasurable.{u2, u1} δ α _inst_2 _inst_13 (fun (a : δ) => Min.min.{u1} α (LinearOrder.toMin.{u1} α _inst_16) (f a) (g a)) μ)
Case conversion may be inaccurate. Consider using '#align ae_measurable.min AEMeasurable.minₓ'. -/
@[measurability]
theorem AEMeasurable.min {f g : δ → α} {μ : Measure δ} (hf : AEMeasurable f μ)
    (hg : AEMeasurable g μ) : AEMeasurable (fun a => min (f a) (g a)) μ :=
  ⟨fun a => min (hf.mk f a) (hg.mk g a), hf.measurable_mk.min hg.measurable_mk,
    EventuallyEq.comp₂ hf.ae_eq_mk _ hg.ae_eq_mk⟩
#align ae_measurable.min AEMeasurable.min

end LinearOrder

/- warning: continuous.measurable -> Continuous.measurable is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {γ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] [_inst_7 : TopologicalSpace.{u2} γ] [_inst_8 : MeasurableSpace.{u2} γ] [_inst_9 : BorelSpace.{u2} γ _inst_7 _inst_8] {f : α -> γ}, (Continuous.{u1, u2} α γ _inst_1 _inst_7 f) -> (Measurable.{u1, u2} α γ _inst_2 _inst_8 f)
but is expected to have type
  forall {α : Type.{u2}} {γ : Type.{u1}} [_inst_1 : TopologicalSpace.{u2} α] [_inst_2 : MeasurableSpace.{u2} α] [_inst_3 : OpensMeasurableSpace.{u2} α _inst_1 _inst_2] [_inst_7 : TopologicalSpace.{u1} γ] [_inst_8 : MeasurableSpace.{u1} γ] [_inst_9 : BorelSpace.{u1} γ _inst_7 _inst_8] {f : α -> γ}, (Continuous.{u2, u1} α γ _inst_1 _inst_7 f) -> (Measurable.{u2, u1} α γ _inst_2 _inst_8 f)
Case conversion may be inaccurate. Consider using '#align continuous.measurable Continuous.measurableₓ'. -/
/-- A continuous function from an `opens_measurable_space` to a `borel_space`
is measurable. -/
theorem Continuous.measurable {f : α → γ} (hf : Continuous f) : Measurable f :=
  hf.borel_measurable.mono OpensMeasurableSpace.borel_le (le_of_eq <| BorelSpace.measurable_eq)
#align continuous.measurable Continuous.measurable

/- warning: continuous.ae_measurable -> Continuous.aemeasurable is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {γ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] [_inst_7 : TopologicalSpace.{u2} γ] [_inst_8 : MeasurableSpace.{u2} γ] [_inst_9 : BorelSpace.{u2} γ _inst_7 _inst_8] {f : α -> γ}, (Continuous.{u1, u2} α γ _inst_1 _inst_7 f) -> (forall {μ : MeasureTheory.Measure.{u1} α _inst_2}, AEMeasurable.{u1, u2} α γ _inst_8 _inst_2 f μ)
but is expected to have type
  forall {α : Type.{u2}} {γ : Type.{u1}} [_inst_1 : TopologicalSpace.{u2} α] [_inst_2 : MeasurableSpace.{u2} α] [_inst_3 : OpensMeasurableSpace.{u2} α _inst_1 _inst_2] [_inst_7 : TopologicalSpace.{u1} γ] [_inst_8 : MeasurableSpace.{u1} γ] [_inst_9 : BorelSpace.{u1} γ _inst_7 _inst_8] {f : α -> γ}, (Continuous.{u2, u1} α γ _inst_1 _inst_7 f) -> (forall {μ : MeasureTheory.Measure.{u2} α _inst_2}, AEMeasurable.{u2, u1} α γ _inst_8 _inst_2 f μ)
Case conversion may be inaccurate. Consider using '#align continuous.ae_measurable Continuous.aemeasurableₓ'. -/
/-- A continuous function from an `opens_measurable_space` to a `borel_space`
is ae-measurable. -/
theorem Continuous.aemeasurable {f : α → γ} (h : Continuous f) {μ : Measure α} : AEMeasurable f μ :=
  h.Measurable.AEMeasurable
#align continuous.ae_measurable Continuous.aemeasurable

/- warning: closed_embedding.measurable -> ClosedEmbedding.measurable is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {γ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] [_inst_7 : TopologicalSpace.{u2} γ] [_inst_8 : MeasurableSpace.{u2} γ] [_inst_9 : BorelSpace.{u2} γ _inst_7 _inst_8] {f : α -> γ}, (ClosedEmbedding.{u1, u2} α γ _inst_1 _inst_7 f) -> (Measurable.{u1, u2} α γ _inst_2 _inst_8 f)
but is expected to have type
  forall {α : Type.{u2}} {γ : Type.{u1}} [_inst_1 : TopologicalSpace.{u2} α] [_inst_2 : MeasurableSpace.{u2} α] [_inst_3 : OpensMeasurableSpace.{u2} α _inst_1 _inst_2] [_inst_7 : TopologicalSpace.{u1} γ] [_inst_8 : MeasurableSpace.{u1} γ] [_inst_9 : BorelSpace.{u1} γ _inst_7 _inst_8] {f : α -> γ}, (ClosedEmbedding.{u2, u1} α γ _inst_1 _inst_7 f) -> (Measurable.{u2, u1} α γ _inst_2 _inst_8 f)
Case conversion may be inaccurate. Consider using '#align closed_embedding.measurable ClosedEmbedding.measurableₓ'. -/
theorem ClosedEmbedding.measurable {f : α → γ} (hf : ClosedEmbedding f) : Measurable f :=
  hf.Continuous.Measurable
#align closed_embedding.measurable ClosedEmbedding.measurable

/- warning: continuous.is_open_pos_measure_map -> Continuous.openPosMeasure_map is a dubious translation:
lean 3 declaration is
  forall {β : Type.{u1}} {γ : Type.{u2}} [_inst_4 : TopologicalSpace.{u1} β] [_inst_5 : MeasurableSpace.{u1} β] [_inst_6 : OpensMeasurableSpace.{u1} β _inst_4 _inst_5] [_inst_7 : TopologicalSpace.{u2} γ] [_inst_8 : MeasurableSpace.{u2} γ] [_inst_9 : BorelSpace.{u2} γ _inst_7 _inst_8] {f : β -> γ}, (Continuous.{u1, u2} β γ _inst_4 _inst_7 f) -> (Function.Surjective.{succ u1, succ u2} β γ f) -> (forall {μ : MeasureTheory.Measure.{u1} β _inst_5} [_inst_16 : MeasureTheory.Measure.OpenPosMeasure.{u1} β _inst_4 _inst_5 μ], MeasureTheory.Measure.OpenPosMeasure.{u2} γ _inst_7 _inst_8 (MeasureTheory.Measure.map.{u1, u2} β γ _inst_8 _inst_5 f μ))
but is expected to have type
  forall {β : Type.{u2}} {γ : Type.{u1}} [_inst_4 : TopologicalSpace.{u2} β] [_inst_5 : MeasurableSpace.{u2} β] [_inst_6 : OpensMeasurableSpace.{u2} β _inst_4 _inst_5] [_inst_7 : TopologicalSpace.{u1} γ] [_inst_8 : MeasurableSpace.{u1} γ] [_inst_9 : BorelSpace.{u1} γ _inst_7 _inst_8] {f : β -> γ}, (Continuous.{u2, u1} β γ _inst_4 _inst_7 f) -> (Function.Surjective.{succ u2, succ u1} β γ f) -> (forall {μ : MeasureTheory.Measure.{u2} β _inst_5} [_inst_16 : MeasureTheory.Measure.OpenPosMeasure.{u2} β _inst_4 _inst_5 μ], MeasureTheory.Measure.OpenPosMeasure.{u1} γ _inst_7 _inst_8 (MeasureTheory.Measure.map.{u2, u1} β γ _inst_8 _inst_5 f μ))
Case conversion may be inaccurate. Consider using '#align continuous.is_open_pos_measure_map Continuous.openPosMeasure_mapₓ'. -/
theorem Continuous.openPosMeasure_map {f : β → γ} (hf : Continuous f)
    (hf_surj : Function.Surjective f) {μ : Measure β} [μ.OpenPosMeasure] :
    (Measure.map f μ).OpenPosMeasure :=
  by
  refine' ⟨fun U hUo hUne => _⟩
  rw [measure.map_apply hf.measurable hUo.measurable_set]
  exact (hUo.preimage hf).measure_ne_zero μ (hf_surj.nonempty_preimage.mpr hUne)
#align continuous.is_open_pos_measure_map Continuous.openPosMeasure_map

/- warning: continuous_on.measurable_piecewise -> ContinuousOn.measurable_piecewise is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {γ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] [_inst_7 : TopologicalSpace.{u2} γ] [_inst_8 : MeasurableSpace.{u2} γ] [_inst_9 : BorelSpace.{u2} γ _inst_7 _inst_8] {f : α -> γ} {g : α -> γ} {s : Set.{u1} α} [_inst_16 : forall (j : α), Decidable (Membership.Mem.{u1, u1} α (Set.{u1} α) (Set.hasMem.{u1} α) j s)], (ContinuousOn.{u1, u2} α γ _inst_1 _inst_7 f s) -> (ContinuousOn.{u1, u2} α γ _inst_1 _inst_7 g (HasCompl.compl.{u1} (Set.{u1} α) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} α) (Set.booleanAlgebra.{u1} α)) s)) -> (MeasurableSet.{u1} α _inst_2 s) -> (Measurable.{u1, u2} α γ _inst_2 _inst_8 (Set.piecewise.{u1, succ u2} α (fun (ᾰ : α) => γ) s f g (fun (j : α) => _inst_16 j)))
but is expected to have type
  forall {α : Type.{u2}} {γ : Type.{u1}} [_inst_1 : TopologicalSpace.{u2} α] [_inst_2 : MeasurableSpace.{u2} α] [_inst_3 : OpensMeasurableSpace.{u2} α _inst_1 _inst_2] [_inst_7 : TopologicalSpace.{u1} γ] [_inst_8 : MeasurableSpace.{u1} γ] [_inst_9 : BorelSpace.{u1} γ _inst_7 _inst_8] {f : α -> γ} {g : α -> γ} {s : Set.{u2} α} [_inst_16 : forall (j : α), Decidable (Membership.mem.{u2, u2} α (Set.{u2} α) (Set.instMembershipSet.{u2} α) j s)], (ContinuousOn.{u2, u1} α γ _inst_1 _inst_7 f s) -> (ContinuousOn.{u2, u1} α γ _inst_1 _inst_7 g (HasCompl.compl.{u2} (Set.{u2} α) (BooleanAlgebra.toHasCompl.{u2} (Set.{u2} α) (Set.instBooleanAlgebraSet.{u2} α)) s)) -> (MeasurableSet.{u2} α _inst_2 s) -> (Measurable.{u2, u1} α γ _inst_2 _inst_8 (Set.piecewise.{u2, succ u1} α (fun (ᾰ : α) => γ) s f g (fun (j : α) => _inst_16 j)))
Case conversion may be inaccurate. Consider using '#align continuous_on.measurable_piecewise ContinuousOn.measurable_piecewiseₓ'. -/
/-- If a function is defined piecewise in terms of functions which are continuous on their
respective pieces, then it is measurable. -/
theorem ContinuousOn.measurable_piecewise {f g : α → γ} {s : Set α} [∀ j : α, Decidable (j ∈ s)]
    (hf : ContinuousOn f s) (hg : ContinuousOn g (sᶜ)) (hs : MeasurableSet s) :
    Measurable (s.piecewise f g) :=
  by
  refine' measurable_of_isOpen fun t ht => _
  rw [piecewise_preimage, Set.ite]
  apply MeasurableSet.union
  · rcases _root_.continuous_on_iff'.1 hf t ht with ⟨u, u_open, hu⟩
    rw [hu]
    exact u_open.measurable_set.inter hs
  · rcases _root_.continuous_on_iff'.1 hg t ht with ⟨u, u_open, hu⟩
    rw [diff_eq_compl_inter, inter_comm, hu]
    exact u_open.measurable_set.inter hs.compl
#align continuous_on.measurable_piecewise ContinuousOn.measurable_piecewise

#print ContinuousMul.measurableMul /-
@[to_additive]
instance (priority := 100) ContinuousMul.measurableMul [Mul γ] [ContinuousMul γ] : MeasurableMul γ
    where
  measurable_const_mul c := (continuous_const.mul continuous_id).Measurable
  measurable_mul_const c := (continuous_id.mul continuous_const).Measurable
#align has_continuous_mul.has_measurable_mul ContinuousMul.measurableMul
#align has_continuous_add.has_measurable_add ContinuousAdd.measurableAdd
-/

#print ContinuousSub.measurableSub /-
instance (priority := 100) ContinuousSub.measurableSub [Sub γ] [ContinuousSub γ] : MeasurableSub γ
    where
  measurable_const_sub c := (continuous_const.sub continuous_id).Measurable
  measurable_sub_const c := (continuous_id.sub continuous_const).Measurable
#align has_continuous_sub.has_measurable_sub ContinuousSub.measurableSub
-/

/- warning: topological_group.has_measurable_inv -> TopologicalGroup.measurableInv is a dubious translation:
lean 3 declaration is
  forall {γ : Type.{u1}} [_inst_7 : TopologicalSpace.{u1} γ] [_inst_8 : MeasurableSpace.{u1} γ] [_inst_9 : BorelSpace.{u1} γ _inst_7 _inst_8] [_inst_16 : Group.{u1} γ] [_inst_17 : TopologicalGroup.{u1} γ _inst_7 _inst_16], MeasurableInv.{u1} γ (DivInvMonoid.toHasInv.{u1} γ (Group.toDivInvMonoid.{u1} γ _inst_16)) _inst_8
but is expected to have type
  forall {γ : Type.{u1}} [_inst_7 : TopologicalSpace.{u1} γ] [_inst_8 : MeasurableSpace.{u1} γ] [_inst_9 : BorelSpace.{u1} γ _inst_7 _inst_8] [_inst_16 : Group.{u1} γ] [_inst_17 : TopologicalGroup.{u1} γ _inst_7 _inst_16], MeasurableInv.{u1} γ (InvOneClass.toInv.{u1} γ (DivInvOneMonoid.toInvOneClass.{u1} γ (DivisionMonoid.toDivInvOneMonoid.{u1} γ (Group.toDivisionMonoid.{u1} γ _inst_16)))) _inst_8
Case conversion may be inaccurate. Consider using '#align topological_group.has_measurable_inv TopologicalGroup.measurableInvₓ'. -/
@[to_additive]
instance (priority := 100) TopologicalGroup.measurableInv [Group γ] [TopologicalGroup γ] :
    MeasurableInv γ :=
  ⟨continuous_inv.Measurable⟩
#align topological_group.has_measurable_inv TopologicalGroup.measurableInv
#align topological_add_group.has_measurable_neg TopologicalAddGroup.measurableNeg

#print ContinuousSMul.measurableSMul /-
instance (priority := 100) ContinuousSMul.measurableSMul {M α} [TopologicalSpace M]
    [TopologicalSpace α] [MeasurableSpace M] [MeasurableSpace α] [OpensMeasurableSpace M]
    [BorelSpace α] [SMul M α] [ContinuousSMul M α] : MeasurableSMul M α :=
  ⟨fun c => (continuous_const_smul _).Measurable, fun y =>
    (continuous_id.smul continuous_const).Measurable⟩
#align has_continuous_smul.has_measurable_smul ContinuousSMul.measurableSMul
-/

section Lattice

#print ContinuousSup.measurableSup /-
instance (priority := 100) ContinuousSup.measurableSup [Sup γ] [ContinuousSup γ] : MeasurableSup γ
    where
  measurable_const_sup c := (continuous_const.sup continuous_id).Measurable
  measurable_sup_const c := (continuous_id.sup continuous_const).Measurable
#align has_continuous_sup.has_measurable_sup ContinuousSup.measurableSup
-/

#print ContinuousSup.measurableSup₂ /-
instance (priority := 100) ContinuousSup.measurableSup₂ [SecondCountableTopology γ] [Sup γ]
    [ContinuousSup γ] : MeasurableSup₂ γ :=
  ⟨continuous_sup.Measurable⟩
#align has_continuous_sup.has_measurable_sup₂ ContinuousSup.measurableSup₂
-/

#print ContinuousInf.measurableInf /-
instance (priority := 100) ContinuousInf.measurableInf [Inf γ] [ContinuousInf γ] : MeasurableInf γ
    where
  measurable_const_inf c := (continuous_const.inf continuous_id).Measurable
  measurable_inf_const c := (continuous_id.inf continuous_const).Measurable
#align has_continuous_inf.has_measurable_inf ContinuousInf.measurableInf
-/

#print ContinuousInf.measurableInf₂ /-
instance (priority := 100) ContinuousInf.measurableInf₂ [SecondCountableTopology γ] [Inf γ]
    [ContinuousInf γ] : MeasurableInf₂ γ :=
  ⟨continuous_inf.Measurable⟩
#align has_continuous_inf.has_measurable_inf₂ ContinuousInf.measurableInf₂
-/

end Lattice

section Homeomorph

/- warning: homeomorph.measurable -> Homeomorph.measurable is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {γ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] [_inst_7 : TopologicalSpace.{u2} γ] [_inst_8 : MeasurableSpace.{u2} γ] [_inst_9 : BorelSpace.{u2} γ _inst_7 _inst_8] (h : Homeomorph.{u1, u2} α γ _inst_1 _inst_7), Measurable.{u1, u2} α γ _inst_2 _inst_8 (coeFn.{max (succ u1) (succ u2), max (succ u1) (succ u2)} (Homeomorph.{u1, u2} α γ _inst_1 _inst_7) (fun (_x : Homeomorph.{u1, u2} α γ _inst_1 _inst_7) => α -> γ) (Homeomorph.hasCoeToFun.{u1, u2} α γ _inst_1 _inst_7) h)
but is expected to have type
  forall {α : Type.{u2}} {γ : Type.{u1}} [_inst_1 : TopologicalSpace.{u2} α] [_inst_2 : MeasurableSpace.{u2} α] [_inst_3 : OpensMeasurableSpace.{u2} α _inst_1 _inst_2] [_inst_7 : TopologicalSpace.{u1} γ] [_inst_8 : MeasurableSpace.{u1} γ] [_inst_9 : BorelSpace.{u1} γ _inst_7 _inst_8] (h : Homeomorph.{u2, u1} α γ _inst_1 _inst_7), Measurable.{u2, u1} α γ _inst_2 _inst_8 (FunLike.coe.{max (succ u2) (succ u1), succ u2, succ u1} (Homeomorph.{u2, u1} α γ _inst_1 _inst_7) α (fun (_x : α) => γ) (EmbeddingLike.toFunLike.{max (succ u2) (succ u1), succ u2, succ u1} (Homeomorph.{u2, u1} α γ _inst_1 _inst_7) α γ (EquivLike.toEmbeddingLike.{max (succ u2) (succ u1), succ u2, succ u1} (Homeomorph.{u2, u1} α γ _inst_1 _inst_7) α γ (Homeomorph.instEquivLikeHomeomorph.{u2, u1} α γ _inst_1 _inst_7))) h)
Case conversion may be inaccurate. Consider using '#align homeomorph.measurable Homeomorph.measurableₓ'. -/
@[measurability]
protected theorem Homeomorph.measurable (h : α ≃ₜ γ) : Measurable h :=
  h.Continuous.Measurable
#align homeomorph.measurable Homeomorph.measurable

#print Homeomorph.toMeasurableEquiv /-
/-- A homeomorphism between two Borel spaces is a measurable equivalence.-/
def Homeomorph.toMeasurableEquiv (h : γ ≃ₜ γ₂) : γ ≃ᵐ γ₂
    where
  measurable_to_fun := h.Measurable
  measurable_inv_fun := h.symm.Measurable
  toEquiv := h.toEquiv
#align homeomorph.to_measurable_equiv Homeomorph.toMeasurableEquiv
-/

/- warning: homeomorph.to_measurable_equiv_coe -> Homeomorph.toMeasurableEquiv_coe is a dubious translation:
lean 3 declaration is
  forall {γ : Type.{u1}} {γ₂ : Type.{u2}} [_inst_7 : TopologicalSpace.{u1} γ] [_inst_8 : MeasurableSpace.{u1} γ] [_inst_9 : BorelSpace.{u1} γ _inst_7 _inst_8] [_inst_10 : TopologicalSpace.{u2} γ₂] [_inst_11 : MeasurableSpace.{u2} γ₂] [_inst_12 : BorelSpace.{u2} γ₂ _inst_10 _inst_11] (h : Homeomorph.{u1, u2} γ γ₂ _inst_7 _inst_10), Eq.{max (succ u1) (succ u2)} ((fun (_x : MeasurableEquiv.{u1, u2} γ γ₂ _inst_8 _inst_11) => γ -> γ₂) (Homeomorph.toMeasurableEquiv.{u1, u2} γ γ₂ _inst_7 _inst_8 _inst_9 _inst_10 _inst_11 _inst_12 h)) (coeFn.{max (succ u1) (succ u2), max (succ u1) (succ u2)} (MeasurableEquiv.{u1, u2} γ γ₂ _inst_8 _inst_11) (fun (_x : MeasurableEquiv.{u1, u2} γ γ₂ _inst_8 _inst_11) => γ -> γ₂) (MeasurableEquiv.hasCoeToFun.{u1, u2} γ γ₂ _inst_8 _inst_11) (Homeomorph.toMeasurableEquiv.{u1, u2} γ γ₂ _inst_7 _inst_8 _inst_9 _inst_10 _inst_11 _inst_12 h)) (coeFn.{max (succ u1) (succ u2), max (succ u1) (succ u2)} (Homeomorph.{u1, u2} γ γ₂ _inst_7 _inst_10) (fun (_x : Homeomorph.{u1, u2} γ γ₂ _inst_7 _inst_10) => γ -> γ₂) (Homeomorph.hasCoeToFun.{u1, u2} γ γ₂ _inst_7 _inst_10) h)
but is expected to have type
  forall {γ : Type.{u2}} {γ₂ : Type.{u1}} [_inst_7 : TopologicalSpace.{u2} γ] [_inst_8 : MeasurableSpace.{u2} γ] [_inst_9 : BorelSpace.{u2} γ _inst_7 _inst_8] [_inst_10 : TopologicalSpace.{u1} γ₂] [_inst_11 : MeasurableSpace.{u1} γ₂] [_inst_12 : BorelSpace.{u1} γ₂ _inst_10 _inst_11] (h : Homeomorph.{u2, u1} γ γ₂ _inst_7 _inst_10), Eq.{max (succ u2) (succ u1)} (forall (a : γ), (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : γ) => γ₂) a) (FunLike.coe.{max (succ u2) (succ u1), succ u2, succ u1} (MeasurableEquiv.{u2, u1} γ γ₂ _inst_8 _inst_11) γ (fun (_x : γ) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : γ) => γ₂) _x) (EmbeddingLike.toFunLike.{max (succ u2) (succ u1), succ u2, succ u1} (MeasurableEquiv.{u2, u1} γ γ₂ _inst_8 _inst_11) γ γ₂ (EquivLike.toEmbeddingLike.{max (succ u2) (succ u1), succ u2, succ u1} (MeasurableEquiv.{u2, u1} γ γ₂ _inst_8 _inst_11) γ γ₂ (MeasurableEquiv.instEquivLike.{u2, u1} γ γ₂ _inst_8 _inst_11))) (Homeomorph.toMeasurableEquiv.{u2, u1} γ γ₂ _inst_7 _inst_8 _inst_9 _inst_10 _inst_11 _inst_12 h)) (FunLike.coe.{max (succ u2) (succ u1), succ u2, succ u1} (Homeomorph.{u2, u1} γ γ₂ _inst_7 _inst_10) γ (fun (_x : γ) => γ₂) (EmbeddingLike.toFunLike.{max (succ u2) (succ u1), succ u2, succ u1} (Homeomorph.{u2, u1} γ γ₂ _inst_7 _inst_10) γ γ₂ (EquivLike.toEmbeddingLike.{max (succ u2) (succ u1), succ u2, succ u1} (Homeomorph.{u2, u1} γ γ₂ _inst_7 _inst_10) γ γ₂ (Homeomorph.instEquivLikeHomeomorph.{u2, u1} γ γ₂ _inst_7 _inst_10))) h)
Case conversion may be inaccurate. Consider using '#align homeomorph.to_measurable_equiv_coe Homeomorph.toMeasurableEquiv_coeₓ'. -/
@[simp]
theorem Homeomorph.toMeasurableEquiv_coe (h : γ ≃ₜ γ₂) : (h.toMeasurableEquiv : γ → γ₂) = h :=
  rfl
#align homeomorph.to_measurable_equiv_coe Homeomorph.toMeasurableEquiv_coe

/- warning: homeomorph.to_measurable_equiv_symm_coe -> Homeomorph.toMeasurableEquiv_symm_coe is a dubious translation:
lean 3 declaration is
  forall {γ : Type.{u1}} {γ₂ : Type.{u2}} [_inst_7 : TopologicalSpace.{u1} γ] [_inst_8 : MeasurableSpace.{u1} γ] [_inst_9 : BorelSpace.{u1} γ _inst_7 _inst_8] [_inst_10 : TopologicalSpace.{u2} γ₂] [_inst_11 : MeasurableSpace.{u2} γ₂] [_inst_12 : BorelSpace.{u2} γ₂ _inst_10 _inst_11] (h : Homeomorph.{u1, u2} γ γ₂ _inst_7 _inst_10), Eq.{max (succ u2) (succ u1)} ((fun (_x : MeasurableEquiv.{u2, u1} γ₂ γ _inst_11 _inst_8) => γ₂ -> γ) (MeasurableEquiv.symm.{u1, u2} γ γ₂ _inst_8 _inst_11 (Homeomorph.toMeasurableEquiv.{u1, u2} γ γ₂ _inst_7 _inst_8 _inst_9 _inst_10 _inst_11 _inst_12 h))) (coeFn.{max (succ u2) (succ u1), max (succ u2) (succ u1)} (MeasurableEquiv.{u2, u1} γ₂ γ _inst_11 _inst_8) (fun (_x : MeasurableEquiv.{u2, u1} γ₂ γ _inst_11 _inst_8) => γ₂ -> γ) (MeasurableEquiv.hasCoeToFun.{u2, u1} γ₂ γ _inst_11 _inst_8) (MeasurableEquiv.symm.{u1, u2} γ γ₂ _inst_8 _inst_11 (Homeomorph.toMeasurableEquiv.{u1, u2} γ γ₂ _inst_7 _inst_8 _inst_9 _inst_10 _inst_11 _inst_12 h))) (coeFn.{max (succ u2) (succ u1), max (succ u2) (succ u1)} (Homeomorph.{u2, u1} γ₂ γ _inst_10 _inst_7) (fun (_x : Homeomorph.{u2, u1} γ₂ γ _inst_10 _inst_7) => γ₂ -> γ) (Homeomorph.hasCoeToFun.{u2, u1} γ₂ γ _inst_10 _inst_7) (Homeomorph.symm.{u1, u2} γ γ₂ _inst_7 _inst_10 h))
but is expected to have type
  forall {γ : Type.{u2}} {γ₂ : Type.{u1}} [_inst_7 : TopologicalSpace.{u2} γ] [_inst_8 : MeasurableSpace.{u2} γ] [_inst_9 : BorelSpace.{u2} γ _inst_7 _inst_8] [_inst_10 : TopologicalSpace.{u1} γ₂] [_inst_11 : MeasurableSpace.{u1} γ₂] [_inst_12 : BorelSpace.{u1} γ₂ _inst_10 _inst_11] (h : Homeomorph.{u2, u1} γ γ₂ _inst_7 _inst_10), Eq.{max (succ u2) (succ u1)} (forall (a : γ₂), (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : γ₂) => γ) a) (FunLike.coe.{max (succ u2) (succ u1), succ u1, succ u2} (MeasurableEquiv.{u1, u2} γ₂ γ _inst_11 _inst_8) γ₂ (fun (_x : γ₂) => (fun (x._@.Mathlib.Data.FunLike.Embedding._hyg.19 : γ₂) => γ) _x) (EmbeddingLike.toFunLike.{max (succ u2) (succ u1), succ u1, succ u2} (MeasurableEquiv.{u1, u2} γ₂ γ _inst_11 _inst_8) γ₂ γ (EquivLike.toEmbeddingLike.{max (succ u2) (succ u1), succ u1, succ u2} (MeasurableEquiv.{u1, u2} γ₂ γ _inst_11 _inst_8) γ₂ γ (MeasurableEquiv.instEquivLike.{u1, u2} γ₂ γ _inst_11 _inst_8))) (MeasurableEquiv.symm.{u2, u1} γ γ₂ _inst_8 _inst_11 (Homeomorph.toMeasurableEquiv.{u2, u1} γ γ₂ _inst_7 _inst_8 _inst_9 _inst_10 _inst_11 _inst_12 h))) (FunLike.coe.{max (succ u1) (succ u2), succ u1, succ u2} (Homeomorph.{u1, u2} γ₂ γ _inst_10 _inst_7) γ₂ (fun (_x : γ₂) => γ) (EmbeddingLike.toFunLike.{max (succ u1) (succ u2), succ u1, succ u2} (Homeomorph.{u1, u2} γ₂ γ _inst_10 _inst_7) γ₂ γ (EquivLike.toEmbeddingLike.{max (succ u1) (succ u2), succ u1, succ u2} (Homeomorph.{u1, u2} γ₂ γ _inst_10 _inst_7) γ₂ γ (Homeomorph.instEquivLikeHomeomorph.{u1, u2} γ₂ γ _inst_10 _inst_7))) (Homeomorph.symm.{u2, u1} γ γ₂ _inst_7 _inst_10 h))
Case conversion may be inaccurate. Consider using '#align homeomorph.to_measurable_equiv_symm_coe Homeomorph.toMeasurableEquiv_symm_coeₓ'. -/
@[simp]
theorem Homeomorph.toMeasurableEquiv_symm_coe (h : γ ≃ₜ γ₂) :
    (h.toMeasurableEquiv.symm : γ₂ → γ) = h.symm :=
  rfl
#align homeomorph.to_measurable_equiv_symm_coe Homeomorph.toMeasurableEquiv_symm_coe

end Homeomorph

/- warning: continuous_map.measurable -> ContinuousMap.measurable is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {γ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] [_inst_7 : TopologicalSpace.{u2} γ] [_inst_8 : MeasurableSpace.{u2} γ] [_inst_9 : BorelSpace.{u2} γ _inst_7 _inst_8] (f : ContinuousMap.{u1, u2} α γ _inst_1 _inst_7), Measurable.{u1, u2} α γ _inst_2 _inst_8 (coeFn.{max (succ u1) (succ u2), max (succ u1) (succ u2)} (ContinuousMap.{u1, u2} α γ _inst_1 _inst_7) (fun (_x : ContinuousMap.{u1, u2} α γ _inst_1 _inst_7) => α -> γ) (ContinuousMap.hasCoeToFun.{u1, u2} α γ _inst_1 _inst_7) f)
but is expected to have type
  forall {α : Type.{u2}} {γ : Type.{u1}} [_inst_1 : TopologicalSpace.{u2} α] [_inst_2 : MeasurableSpace.{u2} α] [_inst_3 : OpensMeasurableSpace.{u2} α _inst_1 _inst_2] [_inst_7 : TopologicalSpace.{u1} γ] [_inst_8 : MeasurableSpace.{u1} γ] [_inst_9 : BorelSpace.{u1} γ _inst_7 _inst_8] (f : ContinuousMap.{u2, u1} α γ _inst_1 _inst_7), Measurable.{u2, u1} α γ _inst_2 _inst_8 (FunLike.coe.{max (succ u2) (succ u1), succ u2, succ u1} (ContinuousMap.{u2, u1} α γ _inst_1 _inst_7) α (fun (_x : α) => (fun (x._@.Mathlib.Topology.ContinuousFunction.Basic._hyg.699 : α) => γ) _x) (ContinuousMapClass.toFunLike.{max u2 u1, u2, u1} (ContinuousMap.{u2, u1} α γ _inst_1 _inst_7) α γ _inst_1 _inst_7 (ContinuousMap.instContinuousMapClassContinuousMap.{u2, u1} α γ _inst_1 _inst_7)) f)
Case conversion may be inaccurate. Consider using '#align continuous_map.measurable ContinuousMap.measurableₓ'. -/
@[measurability]
theorem ContinuousMap.measurable (f : C(α, γ)) : Measurable f :=
  f.Continuous.Measurable
#align continuous_map.measurable ContinuousMap.measurable

/- warning: measurable_of_continuous_on_compl_singleton -> measurable_of_continuousOn_compl_singleton is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {γ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] [_inst_7 : TopologicalSpace.{u2} γ] [_inst_8 : MeasurableSpace.{u2} γ] [_inst_9 : BorelSpace.{u2} γ _inst_7 _inst_8] [_inst_16 : T1Space.{u1} α _inst_1] {f : α -> γ} (a : α), (ContinuousOn.{u1, u2} α γ _inst_1 _inst_7 f (HasCompl.compl.{u1} (Set.{u1} α) (BooleanAlgebra.toHasCompl.{u1} (Set.{u1} α) (Set.booleanAlgebra.{u1} α)) (Singleton.singleton.{u1, u1} α (Set.{u1} α) (Set.hasSingleton.{u1} α) a))) -> (Measurable.{u1, u2} α γ _inst_2 _inst_8 f)
but is expected to have type
  forall {α : Type.{u2}} {γ : Type.{u1}} [_inst_1 : TopologicalSpace.{u2} α] [_inst_2 : MeasurableSpace.{u2} α] [_inst_3 : OpensMeasurableSpace.{u2} α _inst_1 _inst_2] [_inst_7 : TopologicalSpace.{u1} γ] [_inst_8 : MeasurableSpace.{u1} γ] [_inst_9 : BorelSpace.{u1} γ _inst_7 _inst_8] [_inst_16 : T1Space.{u2} α _inst_1] {f : α -> γ} (a : α), (ContinuousOn.{u2, u1} α γ _inst_1 _inst_7 f (HasCompl.compl.{u2} (Set.{u2} α) (BooleanAlgebra.toHasCompl.{u2} (Set.{u2} α) (Set.instBooleanAlgebraSet.{u2} α)) (Singleton.singleton.{u2, u2} α (Set.{u2} α) (Set.instSingletonSet.{u2} α) a))) -> (Measurable.{u2, u1} α γ _inst_2 _inst_8 f)
Case conversion may be inaccurate. Consider using '#align measurable_of_continuous_on_compl_singleton measurable_of_continuousOn_compl_singletonₓ'. -/
theorem measurable_of_continuousOn_compl_singleton [T1Space α] {f : α → γ} (a : α)
    (hf : ContinuousOn f ({a}ᶜ)) : Measurable f :=
  measurable_of_measurable_on_compl_singleton a
    (continuousOn_iff_continuous_restrict.1 hf).Measurable
#align measurable_of_continuous_on_compl_singleton measurable_of_continuousOn_compl_singleton

/- warning: continuous.measurable2 -> Continuous.measurable2 is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {γ : Type.{u3}} {δ : Type.{u4}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] [_inst_4 : TopologicalSpace.{u2} β] [_inst_5 : MeasurableSpace.{u2} β] [_inst_6 : OpensMeasurableSpace.{u2} β _inst_4 _inst_5] [_inst_7 : TopologicalSpace.{u3} γ] [_inst_8 : MeasurableSpace.{u3} γ] [_inst_9 : BorelSpace.{u3} γ _inst_7 _inst_8] [_inst_13 : MeasurableSpace.{u4} δ] [_inst_16 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] [_inst_17 : TopologicalSpace.SecondCountableTopology.{u2} β _inst_4] {f : δ -> α} {g : δ -> β} {c : α -> β -> γ}, (Continuous.{max u1 u2, u3} (Prod.{u1, u2} α β) γ (Prod.topologicalSpace.{u1, u2} α β _inst_1 _inst_4) _inst_7 (fun (p : Prod.{u1, u2} α β) => c (Prod.fst.{u1, u2} α β p) (Prod.snd.{u1, u2} α β p))) -> (Measurable.{u4, u1} δ α _inst_13 _inst_2 f) -> (Measurable.{u4, u2} δ β _inst_13 _inst_5 g) -> (Measurable.{u4, u3} δ γ _inst_13 _inst_8 (fun (a : δ) => c (f a) (g a)))
but is expected to have type
  forall {α : Type.{u4}} {β : Type.{u3}} {γ : Type.{u2}} {δ : Type.{u1}} [_inst_1 : TopologicalSpace.{u4} α] [_inst_2 : MeasurableSpace.{u4} α] [_inst_3 : OpensMeasurableSpace.{u4} α _inst_1 _inst_2] [_inst_4 : TopologicalSpace.{u3} β] [_inst_5 : MeasurableSpace.{u3} β] [_inst_6 : OpensMeasurableSpace.{u3} β _inst_4 _inst_5] [_inst_7 : TopologicalSpace.{u2} γ] [_inst_8 : MeasurableSpace.{u2} γ] [_inst_9 : BorelSpace.{u2} γ _inst_7 _inst_8] [_inst_13 : MeasurableSpace.{u1} δ] [_inst_16 : TopologicalSpace.SecondCountableTopology.{u4} α _inst_1] [_inst_17 : TopologicalSpace.SecondCountableTopology.{u3} β _inst_4] {f : δ -> α} {g : δ -> β} {c : α -> β -> γ}, (Continuous.{max u4 u3, u2} (Prod.{u4, u3} α β) γ (instTopologicalSpaceProd.{u4, u3} α β _inst_1 _inst_4) _inst_7 (fun (p : Prod.{u4, u3} α β) => c (Prod.fst.{u4, u3} α β p) (Prod.snd.{u4, u3} α β p))) -> (Measurable.{u1, u4} δ α _inst_13 _inst_2 f) -> (Measurable.{u1, u3} δ β _inst_13 _inst_5 g) -> (Measurable.{u1, u2} δ γ _inst_13 _inst_8 (fun (a : δ) => c (f a) (g a)))
Case conversion may be inaccurate. Consider using '#align continuous.measurable2 Continuous.measurable2ₓ'. -/
theorem Continuous.measurable2 [SecondCountableTopology α] [SecondCountableTopology β] {f : δ → α}
    {g : δ → β} {c : α → β → γ} (h : Continuous fun p : α × β => c p.1 p.2) (hf : Measurable f)
    (hg : Measurable g) : Measurable fun a => c (f a) (g a) :=
  h.Measurable.comp (hf.prod_mk hg)
#align continuous.measurable2 Continuous.measurable2

/- warning: continuous.ae_measurable2 -> Continuous.aemeasurable2 is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} {γ : Type.{u3}} {δ : Type.{u4}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α _inst_1 _inst_2] [_inst_4 : TopologicalSpace.{u2} β] [_inst_5 : MeasurableSpace.{u2} β] [_inst_6 : OpensMeasurableSpace.{u2} β _inst_4 _inst_5] [_inst_7 : TopologicalSpace.{u3} γ] [_inst_8 : MeasurableSpace.{u3} γ] [_inst_9 : BorelSpace.{u3} γ _inst_7 _inst_8] [_inst_13 : MeasurableSpace.{u4} δ] [_inst_16 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] [_inst_17 : TopologicalSpace.SecondCountableTopology.{u2} β _inst_4] {f : δ -> α} {g : δ -> β} {c : α -> β -> γ} {μ : MeasureTheory.Measure.{u4} δ _inst_13}, (Continuous.{max u1 u2, u3} (Prod.{u1, u2} α β) γ (Prod.topologicalSpace.{u1, u2} α β _inst_1 _inst_4) _inst_7 (fun (p : Prod.{u1, u2} α β) => c (Prod.fst.{u1, u2} α β p) (Prod.snd.{u1, u2} α β p))) -> (AEMeasurable.{u4, u1} δ α _inst_2 _inst_13 f μ) -> (AEMeasurable.{u4, u2} δ β _inst_5 _inst_13 g μ) -> (AEMeasurable.{u4, u3} δ γ _inst_8 _inst_13 (fun (a : δ) => c (f a) (g a)) μ)
but is expected to have type
  forall {α : Type.{u4}} {β : Type.{u3}} {γ : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u4} α] [_inst_2 : MeasurableSpace.{u4} α] [_inst_3 : OpensMeasurableSpace.{u4} α _inst_1 _inst_2] [_inst_4 : TopologicalSpace.{u3} β] [_inst_5 : MeasurableSpace.{u3} β] [_inst_6 : OpensMeasurableSpace.{u3} β _inst_4 _inst_5] [_inst_7 : TopologicalSpace.{u1} γ] [_inst_8 : MeasurableSpace.{u1} γ] [_inst_9 : BorelSpace.{u1} γ _inst_7 _inst_8] [_inst_13 : MeasurableSpace.{u2} δ] [_inst_16 : TopologicalSpace.SecondCountableTopology.{u4} α _inst_1] [_inst_17 : TopologicalSpace.SecondCountableTopology.{u3} β _inst_4] {f : δ -> α} {g : δ -> β} {c : α -> β -> γ} {μ : MeasureTheory.Measure.{u2} δ _inst_13}, (Continuous.{max u4 u3, u1} (Prod.{u4, u3} α β) γ (instTopologicalSpaceProd.{u4, u3} α β _inst_1 _inst_4) _inst_7 (fun (p : Prod.{u4, u3} α β) => c (Prod.fst.{u4, u3} α β p) (Prod.snd.{u4, u3} α β p))) -> (AEMeasurable.{u2, u4} δ α _inst_2 _inst_13 f μ) -> (AEMeasurable.{u2, u3} δ β _inst_5 _inst_13 g μ) -> (AEMeasurable.{u2, u1} δ γ _inst_8 _inst_13 (fun (a : δ) => c (f a) (g a)) μ)
Case conversion may be inaccurate. Consider using '#align continuous.ae_measurable2 Continuous.aemeasurable2ₓ'. -/
theorem Continuous.aemeasurable2 [SecondCountableTopology α] [SecondCountableTopology β] {f : δ → α}
    {g : δ → β} {c : α → β → γ} {μ : Measure δ} (h : Continuous fun p : α × β => c p.1 p.2)
    (hf : AEMeasurable f μ) (hg : AEMeasurable g μ) : AEMeasurable (fun a => c (f a) (g a)) μ :=
  h.Measurable.comp_aemeasurable (hf.prod_mk hg)
#align continuous.ae_measurable2 Continuous.aemeasurable2

/- warning: has_continuous_inv₀.has_measurable_inv -> HasContinuousInv₀.measurableInv is a dubious translation:
lean 3 declaration is
  forall {γ : Type.{u1}} [_inst_7 : TopologicalSpace.{u1} γ] [_inst_8 : MeasurableSpace.{u1} γ] [_inst_9 : BorelSpace.{u1} γ _inst_7 _inst_8] [_inst_16 : GroupWithZero.{u1} γ] [_inst_17 : T1Space.{u1} γ _inst_7] [_inst_18 : HasContinuousInv₀.{u1} γ (MulZeroClass.toHasZero.{u1} γ (MulZeroOneClass.toMulZeroClass.{u1} γ (MonoidWithZero.toMulZeroOneClass.{u1} γ (GroupWithZero.toMonoidWithZero.{u1} γ _inst_16)))) (DivInvMonoid.toHasInv.{u1} γ (GroupWithZero.toDivInvMonoid.{u1} γ _inst_16)) _inst_7], MeasurableInv.{u1} γ (DivInvMonoid.toHasInv.{u1} γ (GroupWithZero.toDivInvMonoid.{u1} γ _inst_16)) _inst_8
but is expected to have type
  forall {γ : Type.{u1}} [_inst_7 : TopologicalSpace.{u1} γ] [_inst_8 : MeasurableSpace.{u1} γ] [_inst_9 : BorelSpace.{u1} γ _inst_7 _inst_8] [_inst_16 : GroupWithZero.{u1} γ] [_inst_17 : T1Space.{u1} γ _inst_7] [_inst_18 : HasContinuousInv₀.{u1} γ (MonoidWithZero.toZero.{u1} γ (GroupWithZero.toMonoidWithZero.{u1} γ _inst_16)) (GroupWithZero.toInv.{u1} γ _inst_16) _inst_7], MeasurableInv.{u1} γ (GroupWithZero.toInv.{u1} γ _inst_16) _inst_8
Case conversion may be inaccurate. Consider using '#align has_continuous_inv₀.has_measurable_inv HasContinuousInv₀.measurableInvₓ'. -/
instance (priority := 100) HasContinuousInv₀.measurableInv [GroupWithZero γ] [T1Space γ]
    [HasContinuousInv₀ γ] : MeasurableInv γ :=
  ⟨measurable_of_continuousOn_compl_singleton 0 continuousOn_inv₀⟩
#align has_continuous_inv₀.has_measurable_inv HasContinuousInv₀.measurableInv

#print ContinuousMul.measurableMul₂ /-
@[to_additive]
instance (priority := 100) ContinuousMul.measurableMul₂ [SecondCountableTopology γ] [Mul γ]
    [ContinuousMul γ] : MeasurableMul₂ γ :=
  ⟨continuous_mul.Measurable⟩
#align has_continuous_mul.has_measurable_mul₂ ContinuousMul.measurableMul₂
#align has_continuous_add.has_measurable_mul₂ ContinuousAdd.measurableMul₂
-/

#print ContinuousSub.measurableSub₂ /-
instance (priority := 100) ContinuousSub.measurableSub₂ [SecondCountableTopology γ] [Sub γ]
    [ContinuousSub γ] : MeasurableSub₂ γ :=
  ⟨continuous_sub.Measurable⟩
#align has_continuous_sub.has_measurable_sub₂ ContinuousSub.measurableSub₂
-/

#print ContinuousSMul.measurableSMul₂ /-
instance (priority := 100) ContinuousSMul.measurableSMul₂ {M α} [TopologicalSpace M]
    [SecondCountableTopology M] [MeasurableSpace M] [OpensMeasurableSpace M] [TopologicalSpace α]
    [SecondCountableTopology α] [MeasurableSpace α] [BorelSpace α] [SMul M α] [ContinuousSMul M α] :
    MeasurableSMul₂ M α :=
  ⟨continuous_smul.Measurable⟩
#align has_continuous_smul.has_measurable_smul₂ ContinuousSMul.measurableSMul₂
-/

end

section BorelSpace

variable [TopologicalSpace α] [MeasurableSpace α] [BorelSpace α] [TopologicalSpace β]
  [MeasurableSpace β] [BorelSpace β] [TopologicalSpace γ] [MeasurableSpace γ] [BorelSpace γ]
  [MeasurableSpace δ]

/- warning: pi_le_borel_pi -> pi_le_borel_pi is a dubious translation:
lean 3 declaration is
  forall {ι : Type.{u1}} {π : ι -> Type.{u2}} [_inst_11 : forall (i : ι), TopologicalSpace.{u2} (π i)] [_inst_12 : forall (i : ι), MeasurableSpace.{u2} (π i)] [_inst_13 : forall (i : ι), BorelSpace.{u2} (π i) (_inst_11 i) (_inst_12 i)], LE.le.{max u1 u2} (MeasurableSpace.{max u1 u2} (forall (a : ι), π a)) (MeasurableSpace.hasLe.{max u1 u2} (forall (a : ι), π a)) (MeasurableSpace.pi.{u1, u2} ι (fun (a : ι) => π a) (fun (a : ι) => _inst_12 a)) (borel.{max u1 u2} (forall (i : ι), π i) (Pi.topologicalSpace.{u1, u2} ι (fun (a : ι) => π a) (fun (a : ι) => _inst_11 a)))
but is expected to have type
  forall {ι : Type.{u2}} {π : ι -> Type.{u1}} [_inst_11 : forall (i : ι), TopologicalSpace.{u1} (π i)] [_inst_12 : forall (i : ι), MeasurableSpace.{u1} (π i)] [_inst_13 : forall (i : ι), BorelSpace.{u1} (π i) (_inst_11 i) (_inst_12 i)], LE.le.{max u2 u1} (MeasurableSpace.{max u2 u1} (forall (a : ι), π a)) (MeasurableSpace.instLEMeasurableSpace.{max u2 u1} (forall (a : ι), π a)) (MeasurableSpace.pi.{u2, u1} ι (fun (a : ι) => π a) (fun (a : ι) => _inst_12 a)) (borel.{max u2 u1} (forall (i : ι), π i) (Pi.topologicalSpace.{u2, u1} ι (fun (a : ι) => π a) (fun (a : ι) => _inst_11 a)))
Case conversion may be inaccurate. Consider using '#align pi_le_borel_pi pi_le_borel_piₓ'. -/
theorem pi_le_borel_pi {ι : Type _} {π : ι → Type _} [∀ i, TopologicalSpace (π i)]
    [∀ i, MeasurableSpace (π i)] [∀ i, BorelSpace (π i)] : MeasurableSpace.pi ≤ borel (∀ i, π i) :=
  by
  have : ‹∀ i, MeasurableSpace (π i)› = fun i => borel (π i) :=
    funext fun i => BorelSpace.measurable_eq
  rw [this]
  exact iSup_le fun i => comap_le_iff_le_map.2 <| (continuous_apply i).borel_measurable
#align pi_le_borel_pi pi_le_borel_pi

/- warning: prod_le_borel_prod -> prod_le_borel_prod is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_4 : TopologicalSpace.{u2} β] [_inst_5 : MeasurableSpace.{u2} β] [_inst_6 : BorelSpace.{u2} β _inst_4 _inst_5], LE.le.{max u1 u2} (MeasurableSpace.{max u1 u2} (Prod.{u1, u2} α β)) (MeasurableSpace.hasLe.{max u1 u2} (Prod.{u1, u2} α β)) (Prod.instMeasurableSpace.{u1, u2} α β _inst_2 _inst_5) (borel.{max u1 u2} (Prod.{u1, u2} α β) (Prod.topologicalSpace.{u1, u2} α β _inst_1 _inst_4))
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} [_inst_1 : TopologicalSpace.{u2} α] [_inst_2 : MeasurableSpace.{u2} α] [_inst_3 : BorelSpace.{u2} α _inst_1 _inst_2] [_inst_4 : TopologicalSpace.{u1} β] [_inst_5 : MeasurableSpace.{u1} β] [_inst_6 : BorelSpace.{u1} β _inst_4 _inst_5], LE.le.{max u2 u1} (MeasurableSpace.{max u1 u2} (Prod.{u2, u1} α β)) (MeasurableSpace.instLEMeasurableSpace.{max u2 u1} (Prod.{u2, u1} α β)) (Prod.instMeasurableSpace.{u2, u1} α β _inst_2 _inst_5) (borel.{max u1 u2} (Prod.{u2, u1} α β) (instTopologicalSpaceProd.{u2, u1} α β _inst_1 _inst_4))
Case conversion may be inaccurate. Consider using '#align prod_le_borel_prod prod_le_borel_prodₓ'. -/
theorem prod_le_borel_prod : Prod.instMeasurableSpace ≤ borel (α × β) :=
  by
  rw [‹BorelSpace α›.measurable_eq, ‹BorelSpace β›.measurable_eq]
  refine' sup_le _ _
  · exact comap_le_iff_le_map.mpr continuous_fst.borel_measurable
  · exact comap_le_iff_le_map.mpr continuous_snd.borel_measurable
#align prod_le_borel_prod prod_le_borel_prod

#print Pi.borelSpace /-
instance Pi.borelSpace {ι : Type _} {π : ι → Type _} [Countable ι] [∀ i, TopologicalSpace (π i)]
    [∀ i, MeasurableSpace (π i)] [∀ i, SecondCountableTopology (π i)] [∀ i, BorelSpace (π i)] :
    BorelSpace (∀ i, π i) :=
  ⟨le_antisymm pi_le_borel_pi OpensMeasurableSpace.borel_le⟩
#align pi.borel_space Pi.borelSpace
-/

/- warning: prod.borel_space -> Prod.borelSpace is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_4 : TopologicalSpace.{u2} β] [_inst_5 : MeasurableSpace.{u2} β] [_inst_6 : BorelSpace.{u2} β _inst_4 _inst_5] [_inst_11 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] [_inst_12 : TopologicalSpace.SecondCountableTopology.{u2} β _inst_4], BorelSpace.{max u1 u2} (Prod.{u1, u2} α β) (Prod.topologicalSpace.{u1, u2} α β _inst_1 _inst_4) (Prod.instMeasurableSpace.{u1, u2} α β _inst_2 _inst_5)
but is expected to have type
  forall {α : Type.{u1}} {β : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_4 : TopologicalSpace.{u2} β] [_inst_5 : MeasurableSpace.{u2} β] [_inst_6 : BorelSpace.{u2} β _inst_4 _inst_5] [_inst_11 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] [_inst_12 : TopologicalSpace.SecondCountableTopology.{u2} β _inst_4], BorelSpace.{max u2 u1} (Prod.{u1, u2} α β) (instTopologicalSpaceProd.{u1, u2} α β _inst_1 _inst_4) (Prod.instMeasurableSpace.{u1, u2} α β _inst_2 _inst_5)
Case conversion may be inaccurate. Consider using '#align prod.borel_space Prod.borelSpaceₓ'. -/
instance Prod.borelSpace [SecondCountableTopology α] [SecondCountableTopology β] :
    BorelSpace (α × β) :=
  ⟨le_antisymm prod_le_borel_prod OpensMeasurableSpace.borel_le⟩
#align prod.borel_space Prod.borelSpace

/- warning: embedding.measurable_embedding -> Embedding.measurableEmbedding is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_4 : TopologicalSpace.{u2} β] [_inst_5 : MeasurableSpace.{u2} β] [_inst_6 : BorelSpace.{u2} β _inst_4 _inst_5] {f : α -> β}, (Embedding.{u1, u2} α β _inst_1 _inst_4 f) -> (MeasurableSet.{u2} β _inst_5 (Set.range.{u2, succ u1} β α f)) -> (MeasurableEmbedding.{u1, u2} α β _inst_2 _inst_5 f)
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} [_inst_1 : TopologicalSpace.{u2} α] [_inst_2 : MeasurableSpace.{u2} α] [_inst_3 : BorelSpace.{u2} α _inst_1 _inst_2] [_inst_4 : TopologicalSpace.{u1} β] [_inst_5 : MeasurableSpace.{u1} β] [_inst_6 : BorelSpace.{u1} β _inst_4 _inst_5] {f : α -> β}, (Embedding.{u2, u1} α β _inst_1 _inst_4 f) -> (MeasurableSet.{u1} β _inst_5 (Set.range.{u1, succ u2} β α f)) -> (MeasurableEmbedding.{u2, u1} α β _inst_2 _inst_5 f)
Case conversion may be inaccurate. Consider using '#align embedding.measurable_embedding Embedding.measurableEmbeddingₓ'. -/
protected theorem Embedding.measurableEmbedding {f : α → β} (h₁ : Embedding f)
    (h₂ : MeasurableSet (range f)) : MeasurableEmbedding f :=
  show MeasurableEmbedding (coe ∘ (Homeomorph.ofEmbedding f h₁).toMeasurableEquiv) from
    (MeasurableEmbedding.subtype_coe h₂).comp (MeasurableEquiv.measurableEmbedding _)
#align embedding.measurable_embedding Embedding.measurableEmbedding

/- warning: closed_embedding.measurable_embedding -> ClosedEmbedding.measurableEmbedding is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_4 : TopologicalSpace.{u2} β] [_inst_5 : MeasurableSpace.{u2} β] [_inst_6 : BorelSpace.{u2} β _inst_4 _inst_5] {f : α -> β}, (ClosedEmbedding.{u1, u2} α β _inst_1 _inst_4 f) -> (MeasurableEmbedding.{u1, u2} α β _inst_2 _inst_5 f)
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} [_inst_1 : TopologicalSpace.{u2} α] [_inst_2 : MeasurableSpace.{u2} α] [_inst_3 : BorelSpace.{u2} α _inst_1 _inst_2] [_inst_4 : TopologicalSpace.{u1} β] [_inst_5 : MeasurableSpace.{u1} β] [_inst_6 : BorelSpace.{u1} β _inst_4 _inst_5] {f : α -> β}, (ClosedEmbedding.{u2, u1} α β _inst_1 _inst_4 f) -> (MeasurableEmbedding.{u2, u1} α β _inst_2 _inst_5 f)
Case conversion may be inaccurate. Consider using '#align closed_embedding.measurable_embedding ClosedEmbedding.measurableEmbeddingₓ'. -/
protected theorem ClosedEmbedding.measurableEmbedding {f : α → β} (h : ClosedEmbedding f) :
    MeasurableEmbedding f :=
  h.toEmbedding.MeasurableEmbedding h.closed_range.MeasurableSet
#align closed_embedding.measurable_embedding ClosedEmbedding.measurableEmbedding

/- warning: open_embedding.measurable_embedding -> OpenEmbedding.measurableEmbedding is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {β : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_4 : TopologicalSpace.{u2} β] [_inst_5 : MeasurableSpace.{u2} β] [_inst_6 : BorelSpace.{u2} β _inst_4 _inst_5] {f : α -> β}, (OpenEmbedding.{u1, u2} α β _inst_1 _inst_4 f) -> (MeasurableEmbedding.{u1, u2} α β _inst_2 _inst_5 f)
but is expected to have type
  forall {α : Type.{u2}} {β : Type.{u1}} [_inst_1 : TopologicalSpace.{u2} α] [_inst_2 : MeasurableSpace.{u2} α] [_inst_3 : BorelSpace.{u2} α _inst_1 _inst_2] [_inst_4 : TopologicalSpace.{u1} β] [_inst_5 : MeasurableSpace.{u1} β] [_inst_6 : BorelSpace.{u1} β _inst_4 _inst_5] {f : α -> β}, (OpenEmbedding.{u2, u1} α β _inst_1 _inst_4 f) -> (MeasurableEmbedding.{u2, u1} α β _inst_2 _inst_5 f)
Case conversion may be inaccurate. Consider using '#align open_embedding.measurable_embedding OpenEmbedding.measurableEmbeddingₓ'. -/
protected theorem OpenEmbedding.measurableEmbedding {f : α → β} (h : OpenEmbedding f) :
    MeasurableEmbedding f :=
  h.toEmbedding.MeasurableEmbedding h.open_range.MeasurableSet
#align open_embedding.measurable_embedding OpenEmbedding.measurableEmbedding

section LinearOrder

variable [LinearOrder α] [OrderTopology α] [SecondCountableTopology α]

#print measurable_of_Iio /-
theorem measurable_of_Iio {f : δ → α} (hf : ∀ x, MeasurableSet (f ⁻¹' Iio x)) : Measurable f :=
  by
  convert measurable_generateFrom _
  exact borel_space.measurable_eq.trans (borel_eq_generateFrom_Iio _)
  rintro _ ⟨x, rfl⟩; exact hf x
#align measurable_of_Iio measurable_of_Iio
-/

#print UpperSemicontinuous.measurable /-
theorem UpperSemicontinuous.measurable [TopologicalSpace δ] [OpensMeasurableSpace δ] {f : δ → α}
    (hf : UpperSemicontinuous f) : Measurable f :=
  measurable_of_Iio fun y => (hf.isOpen_preimage y).MeasurableSet
#align upper_semicontinuous.measurable UpperSemicontinuous.measurable
-/

#print measurable_of_Ioi /-
theorem measurable_of_Ioi {f : δ → α} (hf : ∀ x, MeasurableSet (f ⁻¹' Ioi x)) : Measurable f :=
  by
  convert measurable_generateFrom _
  exact borel_space.measurable_eq.trans (borel_eq_generateFrom_Ioi _)
  rintro _ ⟨x, rfl⟩; exact hf x
#align measurable_of_Ioi measurable_of_Ioi
-/

#print LowerSemicontinuous.measurable /-
theorem LowerSemicontinuous.measurable [TopologicalSpace δ] [OpensMeasurableSpace δ] {f : δ → α}
    (hf : LowerSemicontinuous f) : Measurable f :=
  measurable_of_Ioi fun y => (hf.isOpen_preimage y).MeasurableSet
#align lower_semicontinuous.measurable LowerSemicontinuous.measurable
-/

#print measurable_of_Iic /-
theorem measurable_of_Iic {f : δ → α} (hf : ∀ x, MeasurableSet (f ⁻¹' Iic x)) : Measurable f :=
  by
  apply measurable_of_Ioi
  simp_rw [← compl_Iic, preimage_compl, MeasurableSet.compl_iff]
  assumption
#align measurable_of_Iic measurable_of_Iic
-/

#print measurable_of_Ici /-
theorem measurable_of_Ici {f : δ → α} (hf : ∀ x, MeasurableSet (f ⁻¹' Ici x)) : Measurable f :=
  by
  apply measurable_of_Iio
  simp_rw [← compl_Ici, preimage_compl, MeasurableSet.compl_iff]
  assumption
#align measurable_of_Ici measurable_of_Ici
-/

#print Measurable.isLUB /-
theorem Measurable.isLUB {ι} [Countable ι] {f : ι → δ → α} {g : δ → α} (hf : ∀ i, Measurable (f i))
    (hg : ∀ b, IsLUB { a | ∃ i, f i b = a } (g b)) : Measurable g :=
  by
  change ∀ b, IsLUB (range fun i => f i b) (g b) at hg
  rw [‹BorelSpace α›.measurable_eq, borel_eq_generateFrom_Ioi α]
  apply measurable_generateFrom
  rintro _ ⟨a, rfl⟩
  simp_rw [Set.preimage, mem_Ioi, lt_isLUB_iff (hg _), exists_range_iff, set_of_exists]
  exact MeasurableSet.iUnion fun i => hf i (isOpen_lt' _).MeasurableSet
#align measurable.is_lub Measurable.isLUB
-/

private theorem ae_measurable.is_lub_of_nonempty {ι} (hι : Nonempty ι) {μ : Measure δ} [Countable ι]
    {f : ι → δ → α} {g : δ → α} (hf : ∀ i, AEMeasurable (f i) μ)
    (hg : ∀ᵐ b ∂μ, IsLUB { a | ∃ i, f i b = a } (g b)) : AEMeasurable g μ :=
  by
  let p : δ → (ι → α) → Prop := fun x f' => IsLUB { a | ∃ i, f' i = a } (g x)
  let g_seq x := ite (x ∈ aeSeqSet hf p) (g x) (⟨g x⟩ : Nonempty α).some
  have hg_seq : ∀ b, IsLUB { a | ∃ i, aeSeq hf p i b = a } (g_seq b) :=
    by
    intro b
    haveI hα : Nonempty α := Nonempty.map g ⟨b⟩
    simp only [aeSeq, g_seq]
    split_ifs
    · have h_set_eq : { a : α | ∃ i : ι, (hf i).mk (f i) b = a } = { a : α | ∃ i : ι, f i b = a } :=
        by
        ext x
        simp_rw [Set.mem_setOf_eq, aeSeq.mk_eq_fun_of_mem_aeSeqSet hf h]
      rw [h_set_eq]
      exact aeSeq.fun_prop_of_mem_aeSeqSet hf h
    · have h_singleton : { a : α | ∃ i : ι, hα.some = a } = {hα.some} :=
        by
        ext1 x
        exact ⟨fun hx => hx.some_spec.symm, fun hx => ⟨hι.some, hx.symm⟩⟩
      rw [h_singleton]
      exact isLUB_singleton
  refine' ⟨g_seq, Measurable.isLUB (aeSeq.measurable hf p) hg_seq, _⟩
  exact
    (ite_ae_eq_of_measure_compl_zero g (fun x => (⟨g x⟩ : Nonempty α).some) (aeSeqSet hf p)
        (aeSeq.measure_compl_aeSeqSet_eq_zero hf hg)).symm
#align ae_measurable.is_lub_of_nonempty ae_measurable.is_lub_of_nonempty

#print AEMeasurable.isLUB /-
theorem AEMeasurable.isLUB {ι} {μ : Measure δ} [Countable ι] {f : ι → δ → α} {g : δ → α}
    (hf : ∀ i, AEMeasurable (f i) μ) (hg : ∀ᵐ b ∂μ, IsLUB { a | ∃ i, f i b = a } (g b)) :
    AEMeasurable g μ := by
  by_cases hμ : μ = 0
  · rw [hμ]
    exact aemeasurable_zero_measure
  have : μ.ae.ne_bot := by simpa [ne_bot_iff]
  by_cases hι : Nonempty ι
  · exact ae_measurable.is_lub_of_nonempty hι hf hg
  suffices ∃ x, g =ᵐ[μ] fun y => g x by
    exact ⟨fun y => g this.some, measurable_const, this.some_spec⟩
  have h_empty : ∀ x, { a : α | ∃ i : ι, f i x = a } = ∅ :=
    by
    intro x
    ext1 y
    rw [Set.mem_setOf_eq, Set.mem_empty_iff_false, iff_false_iff]
    exact fun hi => hι (nonempty_of_exists hi)
  simp_rw [h_empty] at hg
  exact ⟨hg.exists.some, hg.mono fun y hy => IsLUB.unique hy hg.exists.some_spec⟩
#align ae_measurable.is_lub AEMeasurable.isLUB
-/

#print Measurable.isGLB /-
theorem Measurable.isGLB {ι} [Countable ι] {f : ι → δ → α} {g : δ → α} (hf : ∀ i, Measurable (f i))
    (hg : ∀ b, IsGLB { a | ∃ i, f i b = a } (g b)) : Measurable g :=
  by
  change ∀ b, IsGLB (range fun i => f i b) (g b) at hg
  rw [‹BorelSpace α›.measurable_eq, borel_eq_generateFrom_Iio α]
  apply measurable_generateFrom
  rintro _ ⟨a, rfl⟩
  simp_rw [Set.preimage, mem_Iio, isGLB_lt_iff (hg _), exists_range_iff, set_of_exists]
  exact MeasurableSet.iUnion fun i => hf i (isOpen_gt' _).MeasurableSet
#align measurable.is_glb Measurable.isGLB
-/

#print AEMeasurable.isGLB /-
theorem AEMeasurable.isGLB {ι} {μ : Measure δ} [Countable ι] {f : ι → δ → α} {g : δ → α}
    (hf : ∀ i, AEMeasurable (f i) μ) (hg : ∀ᵐ b ∂μ, IsGLB { a | ∃ i, f i b = a } (g b)) :
    AEMeasurable g μ := by
  nontriviality α
  haveI hα : Nonempty α := inferInstance
  cases' isEmpty_or_nonempty ι with hι hι
  · simp only [IsEmpty.exists_iff, set_of_false, isGLB_empty_iff] at hg
    exact aemeasurable_const' (hg.mono fun a ha => hg.mono fun b hb => (hb _).antisymm (ha _))
  let p : δ → (ι → α) → Prop := fun x f' => IsGLB { a | ∃ i, f' i = a } (g x)
  let g_seq := (aeSeqSet hf p).piecewise g fun _ => hα.some
  have hg_seq : ∀ b, IsGLB { a | ∃ i, aeSeq hf p i b = a } (g_seq b) :=
    by
    intro b
    simp only [aeSeq, g_seq, Set.piecewise]
    split_ifs
    · have h_set_eq : { a : α | ∃ i : ι, (hf i).mk (f i) b = a } = { a : α | ∃ i : ι, f i b = a } :=
        by
        ext x
        simp_rw [Set.mem_setOf_eq, aeSeq.mk_eq_fun_of_mem_aeSeqSet hf h]
      rw [h_set_eq]
      exact aeSeq.fun_prop_of_mem_aeSeqSet hf h
    · exact IsLeast.isGLB ⟨(@exists_const (hα.some = hα.some) ι _).2 rfl, fun x ⟨i, hi⟩ => hi.le⟩
  refine' ⟨g_seq, Measurable.isGLB (aeSeq.measurable hf p) hg_seq, _⟩
  exact
    (ite_ae_eq_of_measure_compl_zero g (fun x => hα.some) (aeSeqSet hf p)
        (aeSeq.measure_compl_aeSeqSet_eq_zero hf hg)).symm
#align ae_measurable.is_glb AEMeasurable.isGLB
-/

#print Monotone.measurable /-
protected theorem Monotone.measurable [LinearOrder β] [OrderClosedTopology β] {f : β → α}
    (hf : Monotone f) : Measurable f :=
  suffices h : ∀ x, OrdConnected (f ⁻¹' Ioi x) from measurable_of_Ioi fun x => (h x).MeasurableSet
  fun x => ordConnected_def.mpr fun a ha b hb c hc => lt_of_lt_of_le ha (hf hc.1)
#align monotone.measurable Monotone.measurable
-/

#print aemeasurable_restrict_of_monotoneOn /-
theorem aemeasurable_restrict_of_monotoneOn [LinearOrder β] [OrderClosedTopology β] {μ : Measure β}
    {s : Set β} (hs : MeasurableSet s) {f : β → α} (hf : MonotoneOn f s) :
    AEMeasurable f (μ.restrict s) :=
  have this : Monotone (f ∘ coe : s → α) := fun ⟨x, hx⟩ ⟨y, hy⟩ (hxy : x ≤ y) => hf hx hy hxy
  aemeasurable_restrict_of_measurable_subtype hs this.Measurable
#align ae_measurable_restrict_of_monotone_on aemeasurable_restrict_of_monotoneOn
-/

#print Antitone.measurable /-
protected theorem Antitone.measurable [LinearOrder β] [OrderClosedTopology β] {f : β → α}
    (hf : Antitone f) : Measurable f :=
  @Monotone.measurable αᵒᵈ β _ _ ‹_› _ _ _ _ _ ‹_› _ _ _ hf
#align antitone.measurable Antitone.measurable
-/

#print aemeasurable_restrict_of_antitoneOn /-
theorem aemeasurable_restrict_of_antitoneOn [LinearOrder β] [OrderClosedTopology β] {μ : Measure β}
    {s : Set β} (hs : MeasurableSet s) {f : β → α} (hf : AntitoneOn f s) :
    AEMeasurable f (μ.restrict s) :=
  @aemeasurable_restrict_of_monotoneOn αᵒᵈ β _ _ ‹_› _ _ _ _ _ ‹_› _ _ _ _ hs _ hf
#align ae_measurable_restrict_of_antitone_on aemeasurable_restrict_of_antitoneOn
-/

/- warning: measurable_set_of_mem_nhds_within_Ioi_aux -> measurableSet_of_mem_nhdsWithin_Ioi_aux is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_11 : LinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_11))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {s : Set.{u1} α}, (forall (x : α), (Membership.Mem.{u1, u1} α (Set.{u1} α) (Set.hasMem.{u1} α) x s) -> (Membership.Mem.{u1, u1} (Set.{u1} α) (Filter.{u1} α) (Filter.hasMem.{u1} α) s (nhdsWithin.{u1} α _inst_1 x (Set.Ioi.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_11)))) x)))) -> (forall (x : α), (Membership.Mem.{u1, u1} α (Set.{u1} α) (Set.hasMem.{u1} α) x s) -> (Exists.{succ u1} α (fun (y : α) => LT.lt.{u1} α (Preorder.toHasLt.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (LinearOrder.toLattice.{u1} α _inst_11))))) x y))) -> (MeasurableSet.{u1} α _inst_2 s)
but is expected to have type
  forall {α : Type.{u1}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_11 : LinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_11)))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {s : Set.{u1} α}, (forall (x : α), (Membership.mem.{u1, u1} α (Set.{u1} α) (Set.instMembershipSet.{u1} α) x s) -> (Membership.mem.{u1, u1} (Set.{u1} α) (Filter.{u1} α) (instMembershipSetFilter.{u1} α) s (nhdsWithin.{u1} α _inst_1 x (Set.Ioi.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_11))))) x)))) -> (forall (x : α), (Membership.mem.{u1, u1} α (Set.{u1} α) (Set.instMembershipSet.{u1} α) x s) -> (Exists.{succ u1} α (fun (y : α) => LT.lt.{u1} α (Preorder.toLT.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (DistribLattice.toLattice.{u1} α (instDistribLattice.{u1} α _inst_11)))))) x y))) -> (MeasurableSet.{u1} α _inst_2 s)
Case conversion may be inaccurate. Consider using '#align measurable_set_of_mem_nhds_within_Ioi_aux measurableSet_of_mem_nhdsWithin_Ioi_auxₓ'. -/
theorem measurableSet_of_mem_nhdsWithin_Ioi_aux {s : Set α} (h : ∀ x ∈ s, s ∈ 𝓝[>] x)
    (h' : ∀ x ∈ s, ∃ y, x < y) : MeasurableSet s :=
  by
  choose! M hM using h'
  suffices H : (s \ interior s).Countable
  · have : s = interior s ∪ s \ interior s := by rw [union_diff_cancel interior_subset]
    rw [this]
    exact is_open_interior.measurable_set.union H.measurable_set
  have A : ∀ x ∈ s, ∃ y ∈ Ioi x, Ioo x y ⊆ s := fun x hx =>
    (mem_nhdsWithin_Ioi_iff_exists_Ioo_subset' (hM x hx)).1 (h x hx)
  choose! y hy h'y using A
  have B : Set.PairwiseDisjoint (s \ interior s) fun x => Ioo x (y x) :=
    by
    intro x hx x' hx' hxx'
    rcases lt_or_gt_of_ne hxx' with (h' | h')
    · apply disjoint_left.2 fun z hz h'z => _
      have : x' ∈ interior s :=
        mem_interior.2 ⟨Ioo x (y x), h'y _ hx.1, isOpen_Ioo, ⟨h', h'z.1.trans hz.2⟩⟩
      exact False.elim (hx'.2 this)
    · apply disjoint_left.2 fun z hz h'z => _
      have : x ∈ interior s :=
        mem_interior.2 ⟨Ioo x' (y x'), h'y _ hx'.1, isOpen_Ioo, ⟨h', hz.1.trans h'z.2⟩⟩
      exact False.elim (hx.2 this)
  exact B.countable_of_Ioo fun x hx => hy x hx.1
#align measurable_set_of_mem_nhds_within_Ioi_aux measurableSet_of_mem_nhdsWithin_Ioi_aux

#print measurableSet_of_mem_nhdsWithin_Ioi /-
/-- If a set is a right-neighborhood of all of its points, then it is measurable. -/
theorem measurableSet_of_mem_nhdsWithin_Ioi {s : Set α} (h : ∀ x ∈ s, s ∈ 𝓝[>] x) :
    MeasurableSet s := by
  by_cases H : ∃ x ∈ s, IsTop x
  · rcases H with ⟨x₀, x₀s, h₀⟩
    have : s = {x₀} ∪ s \ {x₀} := by rw [union_diff_cancel (singleton_subset_iff.2 x₀s)]
    rw [this]
    refine' (measurable_set_singleton _).union _
    have A : ∀ x ∈ s \ {x₀}, x < x₀ := fun x hx => lt_of_le_of_ne (h₀ _) (by simpa using hx.2)
    refine' measurableSet_of_mem_nhdsWithin_Ioi_aux (fun x hx => _) fun x hx => ⟨x₀, A x hx⟩
    obtain ⟨u, hu, us⟩ : ∃ (u : α)(H : u ∈ Ioi x), Ioo x u ⊆ s :=
      (mem_nhdsWithin_Ioi_iff_exists_Ioo_subset' (A x hx)).1 (h x hx.1)
    refine' (mem_nhdsWithin_Ioi_iff_exists_Ioo_subset' (A x hx)).2 ⟨u, hu, fun y hy => ⟨us hy, _⟩⟩
    exact ne_of_lt (hy.2.trans_le (h₀ _))
  · apply measurableSet_of_mem_nhdsWithin_Ioi_aux h
    simp only [IsTop] at H
    push_neg  at H
    exact H
#align measurable_set_of_mem_nhds_within_Ioi measurableSet_of_mem_nhdsWithin_Ioi
-/

end LinearOrder

/- warning: measurable.supr_Prop -> Measurable.iSup_Prop is a dubious translation:
lean 3 declaration is
  forall {δ : Type.{u1}} [_inst_10 : MeasurableSpace.{u1} δ] {α : Type.{u2}} [_inst_11 : MeasurableSpace.{u2} α] [_inst_12 : CompleteLattice.{u2} α] (p : Prop) {f : δ -> α}, (Measurable.{u1, u2} δ α _inst_10 _inst_11 f) -> (Measurable.{u1, u2} δ α _inst_10 _inst_11 (fun (b : δ) => iSup.{u2, 0} α (ConditionallyCompleteLattice.toHasSup.{u2} α (CompleteLattice.toConditionallyCompleteLattice.{u2} α _inst_12)) p (fun (h : p) => f b)))
but is expected to have type
  forall {δ : Type.{u1}} [_inst_10 : MeasurableSpace.{u1} δ] {α : Type.{u2}} [_inst_11 : MeasurableSpace.{u2} α] [_inst_12 : CompleteLattice.{u2} α] (p : Prop) {f : δ -> α}, (Measurable.{u1, u2} δ α _inst_10 _inst_11 f) -> (Measurable.{u1, u2} δ α _inst_10 _inst_11 (fun (b : δ) => iSup.{u2, 0} α (ConditionallyCompleteLattice.toSupSet.{u2} α (CompleteLattice.toConditionallyCompleteLattice.{u2} α _inst_12)) p (fun (h : p) => f b)))
Case conversion may be inaccurate. Consider using '#align measurable.supr_Prop Measurable.iSup_Propₓ'. -/
@[measurability]
theorem Measurable.iSup_Prop {α} [MeasurableSpace α] [CompleteLattice α] (p : Prop) {f : δ → α}
    (hf : Measurable f) : Measurable fun b => ⨆ h : p, f b :=
  by_cases (fun h : p => by convert hf; funext; exact iSup_pos h) fun h : ¬p => by
    convert measurable_const; funext; exact iSup_neg h
#align measurable.supr_Prop Measurable.iSup_Prop

/- warning: measurable.infi_Prop -> Measurable.iInf_Prop is a dubious translation:
lean 3 declaration is
  forall {δ : Type.{u1}} [_inst_10 : MeasurableSpace.{u1} δ] {α : Type.{u2}} [_inst_11 : MeasurableSpace.{u2} α] [_inst_12 : CompleteLattice.{u2} α] (p : Prop) {f : δ -> α}, (Measurable.{u1, u2} δ α _inst_10 _inst_11 f) -> (Measurable.{u1, u2} δ α _inst_10 _inst_11 (fun (b : δ) => iInf.{u2, 0} α (ConditionallyCompleteLattice.toHasInf.{u2} α (CompleteLattice.toConditionallyCompleteLattice.{u2} α _inst_12)) p (fun (h : p) => f b)))
but is expected to have type
  forall {δ : Type.{u1}} [_inst_10 : MeasurableSpace.{u1} δ] {α : Type.{u2}} [_inst_11 : MeasurableSpace.{u2} α] [_inst_12 : CompleteLattice.{u2} α] (p : Prop) {f : δ -> α}, (Measurable.{u1, u2} δ α _inst_10 _inst_11 f) -> (Measurable.{u1, u2} δ α _inst_10 _inst_11 (fun (b : δ) => iInf.{u2, 0} α (ConditionallyCompleteLattice.toInfSet.{u2} α (CompleteLattice.toConditionallyCompleteLattice.{u2} α _inst_12)) p (fun (h : p) => f b)))
Case conversion may be inaccurate. Consider using '#align measurable.infi_Prop Measurable.iInf_Propₓ'. -/
@[measurability]
theorem Measurable.iInf_Prop {α} [MeasurableSpace α] [CompleteLattice α] (p : Prop) {f : δ → α}
    (hf : Measurable f) : Measurable fun b => ⨅ h : p, f b :=
  by_cases (fun h : p => by convert hf; funext; exact iInf_pos h) fun h : ¬p => by
    convert measurable_const; funext; exact iInf_neg h
#align measurable.infi_Prop Measurable.iInf_Prop

section CompleteLinearOrder

variable [CompleteLinearOrder α] [OrderTopology α] [SecondCountableTopology α]

/- warning: measurable_supr -> measurable_iSup is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_10 : MeasurableSpace.{u2} δ] [_inst_11 : CompleteLinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (CompleteSemilatticeInf.toPartialOrder.{u1} α (CompleteLattice.toCompleteSemilatticeInf.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {ι : Sort.{u3}} [_inst_14 : Countable.{u3} ι] {f : ι -> δ -> α}, (forall (i : ι), Measurable.{u2, u1} δ α _inst_10 _inst_2 (f i)) -> (Measurable.{u2, u1} δ α _inst_10 _inst_2 (fun (b : δ) => iSup.{u1, u3} α (ConditionallyCompleteLattice.toHasSup.{u1} α (CompleteLattice.toConditionallyCompleteLattice.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))) ι (fun (i : ι) => f i b)))
but is expected to have type
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_10 : MeasurableSpace.{u2} δ] [_inst_11 : CompleteLinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (OmegaCompletePartialOrder.toPartialOrder.{u1} α (CompleteLattice.instOmegaCompletePartialOrder.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {ι : Sort.{u3}} [_inst_14 : Countable.{u3} ι] {f : ι -> δ -> α}, (forall (i : ι), Measurable.{u2, u1} δ α _inst_10 _inst_2 (f i)) -> (Measurable.{u2, u1} δ α _inst_10 _inst_2 (fun (b : δ) => iSup.{u1, u3} α (ConditionallyCompleteLattice.toSupSet.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{u1} α (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{u1} α _inst_11)))) ι (fun (i : ι) => f i b)))
Case conversion may be inaccurate. Consider using '#align measurable_supr measurable_iSupₓ'. -/
@[measurability]
theorem measurable_iSup {ι} [Countable ι] {f : ι → δ → α} (hf : ∀ i, Measurable (f i)) :
    Measurable fun b => ⨆ i, f i b :=
  Measurable.isLUB hf fun b => isLUB_iSup
#align measurable_supr measurable_iSup

/- warning: ae_measurable_supr -> aemeasurable_iSup is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_10 : MeasurableSpace.{u2} δ] [_inst_11 : CompleteLinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (CompleteSemilatticeInf.toPartialOrder.{u1} α (CompleteLattice.toCompleteSemilatticeInf.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {ι : Sort.{u3}} {μ : MeasureTheory.Measure.{u2} δ _inst_10} [_inst_14 : Countable.{u3} ι] {f : ι -> δ -> α}, (forall (i : ι), AEMeasurable.{u2, u1} δ α _inst_2 _inst_10 (f i) μ) -> (AEMeasurable.{u2, u1} δ α _inst_2 _inst_10 (fun (b : δ) => iSup.{u1, u3} α (ConditionallyCompleteLattice.toHasSup.{u1} α (CompleteLattice.toConditionallyCompleteLattice.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))) ι (fun (i : ι) => f i b)) μ)
but is expected to have type
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_10 : MeasurableSpace.{u2} δ] [_inst_11 : CompleteLinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (OmegaCompletePartialOrder.toPartialOrder.{u1} α (CompleteLattice.instOmegaCompletePartialOrder.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {ι : Sort.{u3}} {μ : MeasureTheory.Measure.{u2} δ _inst_10} [_inst_14 : Countable.{u3} ι] {f : ι -> δ -> α}, (forall (i : ι), AEMeasurable.{u2, u1} δ α _inst_2 _inst_10 (f i) μ) -> (AEMeasurable.{u2, u1} δ α _inst_2 _inst_10 (fun (b : δ) => iSup.{u1, u3} α (ConditionallyCompleteLattice.toSupSet.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{u1} α (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{u1} α _inst_11)))) ι (fun (i : ι) => f i b)) μ)
Case conversion may be inaccurate. Consider using '#align ae_measurable_supr aemeasurable_iSupₓ'. -/
@[measurability]
theorem aemeasurable_iSup {ι} {μ : Measure δ} [Countable ι] {f : ι → δ → α}
    (hf : ∀ i, AEMeasurable (f i) μ) : AEMeasurable (fun b => ⨆ i, f i b) μ :=
  AEMeasurable.isLUB hf <| ae_of_all μ fun b => isLUB_iSup
#align ae_measurable_supr aemeasurable_iSup

/- warning: measurable_infi -> measurable_iInf is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_10 : MeasurableSpace.{u2} δ] [_inst_11 : CompleteLinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (CompleteSemilatticeInf.toPartialOrder.{u1} α (CompleteLattice.toCompleteSemilatticeInf.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {ι : Sort.{u3}} [_inst_14 : Countable.{u3} ι] {f : ι -> δ -> α}, (forall (i : ι), Measurable.{u2, u1} δ α _inst_10 _inst_2 (f i)) -> (Measurable.{u2, u1} δ α _inst_10 _inst_2 (fun (b : δ) => iInf.{u1, u3} α (ConditionallyCompleteLattice.toHasInf.{u1} α (CompleteLattice.toConditionallyCompleteLattice.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))) ι (fun (i : ι) => f i b)))
but is expected to have type
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_10 : MeasurableSpace.{u2} δ] [_inst_11 : CompleteLinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (OmegaCompletePartialOrder.toPartialOrder.{u1} α (CompleteLattice.instOmegaCompletePartialOrder.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {ι : Sort.{u3}} [_inst_14 : Countable.{u3} ι] {f : ι -> δ -> α}, (forall (i : ι), Measurable.{u2, u1} δ α _inst_10 _inst_2 (f i)) -> (Measurable.{u2, u1} δ α _inst_10 _inst_2 (fun (b : δ) => iInf.{u1, u3} α (ConditionallyCompleteLattice.toInfSet.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{u1} α (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{u1} α _inst_11)))) ι (fun (i : ι) => f i b)))
Case conversion may be inaccurate. Consider using '#align measurable_infi measurable_iInfₓ'. -/
@[measurability]
theorem measurable_iInf {ι} [Countable ι] {f : ι → δ → α} (hf : ∀ i, Measurable (f i)) :
    Measurable fun b => ⨅ i, f i b :=
  Measurable.isGLB hf fun b => isGLB_iInf
#align measurable_infi measurable_iInf

/- warning: ae_measurable_infi -> aemeasurable_iInf is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_10 : MeasurableSpace.{u2} δ] [_inst_11 : CompleteLinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (CompleteSemilatticeInf.toPartialOrder.{u1} α (CompleteLattice.toCompleteSemilatticeInf.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {ι : Sort.{u3}} {μ : MeasureTheory.Measure.{u2} δ _inst_10} [_inst_14 : Countable.{u3} ι] {f : ι -> δ -> α}, (forall (i : ι), AEMeasurable.{u2, u1} δ α _inst_2 _inst_10 (f i) μ) -> (AEMeasurable.{u2, u1} δ α _inst_2 _inst_10 (fun (b : δ) => iInf.{u1, u3} α (ConditionallyCompleteLattice.toHasInf.{u1} α (CompleteLattice.toConditionallyCompleteLattice.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))) ι (fun (i : ι) => f i b)) μ)
but is expected to have type
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_10 : MeasurableSpace.{u2} δ] [_inst_11 : CompleteLinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (OmegaCompletePartialOrder.toPartialOrder.{u1} α (CompleteLattice.instOmegaCompletePartialOrder.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {ι : Sort.{u3}} {μ : MeasureTheory.Measure.{u2} δ _inst_10} [_inst_14 : Countable.{u3} ι] {f : ι -> δ -> α}, (forall (i : ι), AEMeasurable.{u2, u1} δ α _inst_2 _inst_10 (f i) μ) -> (AEMeasurable.{u2, u1} δ α _inst_2 _inst_10 (fun (b : δ) => iInf.{u1, u3} α (ConditionallyCompleteLattice.toInfSet.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{u1} α (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{u1} α _inst_11)))) ι (fun (i : ι) => f i b)) μ)
Case conversion may be inaccurate. Consider using '#align ae_measurable_infi aemeasurable_iInfₓ'. -/
@[measurability]
theorem aemeasurable_iInf {ι} {μ : Measure δ} [Countable ι] {f : ι → δ → α}
    (hf : ∀ i, AEMeasurable (f i) μ) : AEMeasurable (fun b => ⨅ i, f i b) μ :=
  AEMeasurable.isGLB hf <| ae_of_all μ fun b => isGLB_iInf
#align ae_measurable_infi aemeasurable_iInf

/- warning: measurable_bsupr -> measurable_biSup is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_10 : MeasurableSpace.{u2} δ] [_inst_11 : CompleteLinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (CompleteSemilatticeInf.toPartialOrder.{u1} α (CompleteLattice.toCompleteSemilatticeInf.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {ι : Type.{u3}} (s : Set.{u3} ι) {f : ι -> δ -> α}, (Set.Countable.{u3} ι s) -> (forall (i : ι), Measurable.{u2, u1} δ α _inst_10 _inst_2 (f i)) -> (Measurable.{u2, u1} δ α _inst_10 _inst_2 (fun (b : δ) => iSup.{u1, succ u3} α (ConditionallyCompleteLattice.toHasSup.{u1} α (CompleteLattice.toConditionallyCompleteLattice.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))) ι (fun (i : ι) => iSup.{u1, 0} α (ConditionallyCompleteLattice.toHasSup.{u1} α (CompleteLattice.toConditionallyCompleteLattice.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))) (Membership.Mem.{u3, u3} ι (Set.{u3} ι) (Set.hasMem.{u3} ι) i s) (fun (H : Membership.Mem.{u3, u3} ι (Set.{u3} ι) (Set.hasMem.{u3} ι) i s) => f i b))))
but is expected to have type
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_10 : MeasurableSpace.{u2} δ] [_inst_11 : CompleteLinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (OmegaCompletePartialOrder.toPartialOrder.{u1} α (CompleteLattice.instOmegaCompletePartialOrder.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {ι : Type.{u3}} (s : Set.{u3} ι) {f : ι -> δ -> α}, (Set.Countable.{u3} ι s) -> (forall (i : ι), Measurable.{u2, u1} δ α _inst_10 _inst_2 (f i)) -> (Measurable.{u2, u1} δ α _inst_10 _inst_2 (fun (b : δ) => iSup.{u1, succ u3} α (ConditionallyCompleteLattice.toSupSet.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{u1} α (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{u1} α _inst_11)))) ι (fun (i : ι) => iSup.{u1, 0} α (ConditionallyCompleteLattice.toSupSet.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{u1} α (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{u1} α _inst_11)))) (Membership.mem.{u3, u3} ι (Set.{u3} ι) (Set.instMembershipSet.{u3} ι) i s) (fun (H : Membership.mem.{u3, u3} ι (Set.{u3} ι) (Set.instMembershipSet.{u3} ι) i s) => f i b))))
Case conversion may be inaccurate. Consider using '#align measurable_bsupr measurable_biSupₓ'. -/
theorem measurable_biSup {ι} (s : Set ι) {f : ι → δ → α} (hs : s.Countable)
    (hf : ∀ i, Measurable (f i)) : Measurable fun b => ⨆ i ∈ s, f i b :=
  by
  haveI : Encodable s := hs.to_encodable
  simp only [iSup_subtype']
  exact measurable_iSup fun i => hf i
#align measurable_bsupr measurable_biSup

/- warning: ae_measurable_bsupr -> aemeasurable_biSup is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_10 : MeasurableSpace.{u2} δ] [_inst_11 : CompleteLinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (CompleteSemilatticeInf.toPartialOrder.{u1} α (CompleteLattice.toCompleteSemilatticeInf.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {ι : Type.{u3}} {μ : MeasureTheory.Measure.{u2} δ _inst_10} (s : Set.{u3} ι) {f : ι -> δ -> α}, (Set.Countable.{u3} ι s) -> (forall (i : ι), AEMeasurable.{u2, u1} δ α _inst_2 _inst_10 (f i) μ) -> (AEMeasurable.{u2, u1} δ α _inst_2 _inst_10 (fun (b : δ) => iSup.{u1, succ u3} α (ConditionallyCompleteLattice.toHasSup.{u1} α (CompleteLattice.toConditionallyCompleteLattice.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))) ι (fun (i : ι) => iSup.{u1, 0} α (ConditionallyCompleteLattice.toHasSup.{u1} α (CompleteLattice.toConditionallyCompleteLattice.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))) (Membership.Mem.{u3, u3} ι (Set.{u3} ι) (Set.hasMem.{u3} ι) i s) (fun (H : Membership.Mem.{u3, u3} ι (Set.{u3} ι) (Set.hasMem.{u3} ι) i s) => f i b))) μ)
but is expected to have type
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_10 : MeasurableSpace.{u2} δ] [_inst_11 : CompleteLinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (OmegaCompletePartialOrder.toPartialOrder.{u1} α (CompleteLattice.instOmegaCompletePartialOrder.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {ι : Type.{u3}} {μ : MeasureTheory.Measure.{u2} δ _inst_10} (s : Set.{u3} ι) {f : ι -> δ -> α}, (Set.Countable.{u3} ι s) -> (forall (i : ι), AEMeasurable.{u2, u1} δ α _inst_2 _inst_10 (f i) μ) -> (AEMeasurable.{u2, u1} δ α _inst_2 _inst_10 (fun (b : δ) => iSup.{u1, succ u3} α (ConditionallyCompleteLattice.toSupSet.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{u1} α (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{u1} α _inst_11)))) ι (fun (i : ι) => iSup.{u1, 0} α (ConditionallyCompleteLattice.toSupSet.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{u1} α (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{u1} α _inst_11)))) (Membership.mem.{u3, u3} ι (Set.{u3} ι) (Set.instMembershipSet.{u3} ι) i s) (fun (H : Membership.mem.{u3, u3} ι (Set.{u3} ι) (Set.instMembershipSet.{u3} ι) i s) => f i b))) μ)
Case conversion may be inaccurate. Consider using '#align ae_measurable_bsupr aemeasurable_biSupₓ'. -/
theorem aemeasurable_biSup {ι} {μ : Measure δ} (s : Set ι) {f : ι → δ → α} (hs : s.Countable)
    (hf : ∀ i, AEMeasurable (f i) μ) : AEMeasurable (fun b => ⨆ i ∈ s, f i b) μ :=
  by
  haveI : Encodable s := hs.to_encodable
  simp only [iSup_subtype']
  exact aemeasurable_iSup fun i => hf i
#align ae_measurable_bsupr aemeasurable_biSup

/- warning: measurable_binfi -> measurable_biInf is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_10 : MeasurableSpace.{u2} δ] [_inst_11 : CompleteLinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (CompleteSemilatticeInf.toPartialOrder.{u1} α (CompleteLattice.toCompleteSemilatticeInf.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {ι : Type.{u3}} (s : Set.{u3} ι) {f : ι -> δ -> α}, (Set.Countable.{u3} ι s) -> (forall (i : ι), Measurable.{u2, u1} δ α _inst_10 _inst_2 (f i)) -> (Measurable.{u2, u1} δ α _inst_10 _inst_2 (fun (b : δ) => iInf.{u1, succ u3} α (ConditionallyCompleteLattice.toHasInf.{u1} α (CompleteLattice.toConditionallyCompleteLattice.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))) ι (fun (i : ι) => iInf.{u1, 0} α (ConditionallyCompleteLattice.toHasInf.{u1} α (CompleteLattice.toConditionallyCompleteLattice.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))) (Membership.Mem.{u3, u3} ι (Set.{u3} ι) (Set.hasMem.{u3} ι) i s) (fun (H : Membership.Mem.{u3, u3} ι (Set.{u3} ι) (Set.hasMem.{u3} ι) i s) => f i b))))
but is expected to have type
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_10 : MeasurableSpace.{u2} δ] [_inst_11 : CompleteLinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (OmegaCompletePartialOrder.toPartialOrder.{u1} α (CompleteLattice.instOmegaCompletePartialOrder.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {ι : Type.{u3}} (s : Set.{u3} ι) {f : ι -> δ -> α}, (Set.Countable.{u3} ι s) -> (forall (i : ι), Measurable.{u2, u1} δ α _inst_10 _inst_2 (f i)) -> (Measurable.{u2, u1} δ α _inst_10 _inst_2 (fun (b : δ) => iInf.{u1, succ u3} α (ConditionallyCompleteLattice.toInfSet.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{u1} α (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{u1} α _inst_11)))) ι (fun (i : ι) => iInf.{u1, 0} α (ConditionallyCompleteLattice.toInfSet.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{u1} α (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{u1} α _inst_11)))) (Membership.mem.{u3, u3} ι (Set.{u3} ι) (Set.instMembershipSet.{u3} ι) i s) (fun (H : Membership.mem.{u3, u3} ι (Set.{u3} ι) (Set.instMembershipSet.{u3} ι) i s) => f i b))))
Case conversion may be inaccurate. Consider using '#align measurable_binfi measurable_biInfₓ'. -/
theorem measurable_biInf {ι} (s : Set ι) {f : ι → δ → α} (hs : s.Countable)
    (hf : ∀ i, Measurable (f i)) : Measurable fun b => ⨅ i ∈ s, f i b :=
  by
  haveI : Encodable s := hs.to_encodable
  simp only [iInf_subtype']
  exact measurable_iInf fun i => hf i
#align measurable_binfi measurable_biInf

/- warning: ae_measurable_binfi -> aemeasurable_biInf is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_10 : MeasurableSpace.{u2} δ] [_inst_11 : CompleteLinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (CompleteSemilatticeInf.toPartialOrder.{u1} α (CompleteLattice.toCompleteSemilatticeInf.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {ι : Type.{u3}} {μ : MeasureTheory.Measure.{u2} δ _inst_10} (s : Set.{u3} ι) {f : ι -> δ -> α}, (Set.Countable.{u3} ι s) -> (forall (i : ι), AEMeasurable.{u2, u1} δ α _inst_2 _inst_10 (f i) μ) -> (AEMeasurable.{u2, u1} δ α _inst_2 _inst_10 (fun (b : δ) => iInf.{u1, succ u3} α (ConditionallyCompleteLattice.toHasInf.{u1} α (CompleteLattice.toConditionallyCompleteLattice.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))) ι (fun (i : ι) => iInf.{u1, 0} α (ConditionallyCompleteLattice.toHasInf.{u1} α (CompleteLattice.toConditionallyCompleteLattice.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))) (Membership.Mem.{u3, u3} ι (Set.{u3} ι) (Set.hasMem.{u3} ι) i s) (fun (H : Membership.Mem.{u3, u3} ι (Set.{u3} ι) (Set.hasMem.{u3} ι) i s) => f i b))) μ)
but is expected to have type
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_10 : MeasurableSpace.{u2} δ] [_inst_11 : CompleteLinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (OmegaCompletePartialOrder.toPartialOrder.{u1} α (CompleteLattice.instOmegaCompletePartialOrder.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {ι : Type.{u3}} {μ : MeasureTheory.Measure.{u2} δ _inst_10} (s : Set.{u3} ι) {f : ι -> δ -> α}, (Set.Countable.{u3} ι s) -> (forall (i : ι), AEMeasurable.{u2, u1} δ α _inst_2 _inst_10 (f i) μ) -> (AEMeasurable.{u2, u1} δ α _inst_2 _inst_10 (fun (b : δ) => iInf.{u1, succ u3} α (ConditionallyCompleteLattice.toInfSet.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{u1} α (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{u1} α _inst_11)))) ι (fun (i : ι) => iInf.{u1, 0} α (ConditionallyCompleteLattice.toInfSet.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{u1} α (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{u1} α _inst_11)))) (Membership.mem.{u3, u3} ι (Set.{u3} ι) (Set.instMembershipSet.{u3} ι) i s) (fun (H : Membership.mem.{u3, u3} ι (Set.{u3} ι) (Set.instMembershipSet.{u3} ι) i s) => f i b))) μ)
Case conversion may be inaccurate. Consider using '#align ae_measurable_binfi aemeasurable_biInfₓ'. -/
theorem aemeasurable_biInf {ι} {μ : Measure δ} (s : Set ι) {f : ι → δ → α} (hs : s.Countable)
    (hf : ∀ i, AEMeasurable (f i) μ) : AEMeasurable (fun b => ⨅ i ∈ s, f i b) μ :=
  by
  haveI : Encodable s := hs.to_encodable
  simp only [iInf_subtype']
  exact aemeasurable_iInf fun i => hf i
#align ae_measurable_binfi aemeasurable_biInf

/- warning: measurable_liminf' -> measurable_liminf' is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_10 : MeasurableSpace.{u2} δ] [_inst_11 : CompleteLinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (CompleteSemilatticeInf.toPartialOrder.{u1} α (CompleteLattice.toCompleteSemilatticeInf.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {ι : Type.{u3}} {ι' : Type.{u4}} {f : ι -> δ -> α} {u : Filter.{u3} ι}, (forall (i : ι), Measurable.{u2, u1} δ α _inst_10 _inst_2 (f i)) -> (forall {p : ι' -> Prop} {s : ι' -> (Set.{u3} ι)}, (Filter.HasCountableBasis.{u3, u4} ι ι' u p s) -> (forall (i : ι'), Set.Countable.{u3} ι (s i)) -> (Measurable.{u2, u1} δ α _inst_10 _inst_2 (fun (x : δ) => Filter.liminf.{u1, u3} α ι (CompleteLattice.toConditionallyCompleteLattice.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11)) (fun (i : ι) => f i x) u)))
but is expected to have type
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_10 : MeasurableSpace.{u2} δ] [_inst_11 : CompleteLinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (OmegaCompletePartialOrder.toPartialOrder.{u1} α (CompleteLattice.instOmegaCompletePartialOrder.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {ι : Type.{u4}} {ι' : Type.{u3}} {f : ι -> δ -> α} {u : Filter.{u4} ι}, (forall (i : ι), Measurable.{u2, u1} δ α _inst_10 _inst_2 (f i)) -> (forall {p : ι' -> Prop} {s : ι' -> (Set.{u4} ι)}, (Filter.HasCountableBasis.{u4, u3} ι ι' u p s) -> (forall (i : ι'), Set.Countable.{u4} ι (s i)) -> (Measurable.{u2, u1} δ α _inst_10 _inst_2 (fun (x : δ) => Filter.liminf.{u1, u4} α ι (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{u1} α (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{u1} α _inst_11))) (fun (i : ι) => f i x) u)))
Case conversion may be inaccurate. Consider using '#align measurable_liminf' measurable_liminf'ₓ'. -/
/-- `liminf` over a general filter is measurable. See `measurable_liminf` for the version over `ℕ`.
-/
theorem measurable_liminf' {ι ι'} {f : ι → δ → α} {u : Filter ι} (hf : ∀ i, Measurable (f i))
    {p : ι' → Prop} {s : ι' → Set ι} (hu : u.HasCountableBasis p s) (hs : ∀ i, (s i).Countable) :
    Measurable fun x => liminf (fun i => f i x) u :=
  by
  simp_rw [hu.to_has_basis.liminf_eq_supr_infi]
  refine' measurable_biSup _ hu.countable _
  exact fun i => measurable_biInf _ (hs i) hf
#align measurable_liminf' measurable_liminf'

/- warning: measurable_limsup' -> measurable_limsup' is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_10 : MeasurableSpace.{u2} δ] [_inst_11 : CompleteLinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (CompleteSemilatticeInf.toPartialOrder.{u1} α (CompleteLattice.toCompleteSemilatticeInf.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {ι : Type.{u3}} {ι' : Type.{u4}} {f : ι -> δ -> α} {u : Filter.{u3} ι}, (forall (i : ι), Measurable.{u2, u1} δ α _inst_10 _inst_2 (f i)) -> (forall {p : ι' -> Prop} {s : ι' -> (Set.{u3} ι)}, (Filter.HasCountableBasis.{u3, u4} ι ι' u p s) -> (forall (i : ι'), Set.Countable.{u3} ι (s i)) -> (Measurable.{u2, u1} δ α _inst_10 _inst_2 (fun (x : δ) => Filter.limsup.{u1, u3} α ι (CompleteLattice.toConditionallyCompleteLattice.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11)) (fun (i : ι) => f i x) u)))
but is expected to have type
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_10 : MeasurableSpace.{u2} δ] [_inst_11 : CompleteLinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (OmegaCompletePartialOrder.toPartialOrder.{u1} α (CompleteLattice.instOmegaCompletePartialOrder.{u1} α (CompleteLinearOrder.toCompleteLattice.{u1} α _inst_11))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {ι : Type.{u4}} {ι' : Type.{u3}} {f : ι -> δ -> α} {u : Filter.{u4} ι}, (forall (i : ι), Measurable.{u2, u1} δ α _inst_10 _inst_2 (f i)) -> (forall {p : ι' -> Prop} {s : ι' -> (Set.{u4} ι)}, (Filter.HasCountableBasis.{u4, u3} ι ι' u p s) -> (forall (i : ι'), Set.Countable.{u4} ι (s i)) -> (Measurable.{u2, u1} δ α _inst_10 _inst_2 (fun (x : δ) => Filter.limsup.{u1, u4} α ι (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α (ConditionallyCompleteLinearOrderBot.toConditionallyCompleteLinearOrder.{u1} α (CompleteLinearOrder.toConditionallyCompleteLinearOrderBot.{u1} α _inst_11))) (fun (i : ι) => f i x) u)))
Case conversion may be inaccurate. Consider using '#align measurable_limsup' measurable_limsup'ₓ'. -/
/-- `limsup` over a general filter is measurable. See `measurable_limsup` for the version over `ℕ`.
-/
theorem measurable_limsup' {ι ι'} {f : ι → δ → α} {u : Filter ι} (hf : ∀ i, Measurable (f i))
    {p : ι' → Prop} {s : ι' → Set ι} (hu : u.HasCountableBasis p s) (hs : ∀ i, (s i).Countable) :
    Measurable fun x => limsup (fun i => f i x) u :=
  by
  simp_rw [hu.to_has_basis.limsup_eq_infi_supr]
  refine' measurable_biInf _ hu.countable _
  exact fun i => measurable_biSup _ (hs i) hf
#align measurable_limsup' measurable_limsup'

#print measurable_liminf /-
/-- `liminf` over `ℕ` is measurable. See `measurable_liminf'` for a version with a general filter.
-/
@[measurability]
theorem measurable_liminf {f : ℕ → δ → α} (hf : ∀ i, Measurable (f i)) :
    Measurable fun x => liminf (fun i => f i x) atTop :=
  measurable_liminf' hf atTop_countable_basis fun i => to_countable _
#align measurable_liminf measurable_liminf
-/

#print measurable_limsup /-
/-- `limsup` over `ℕ` is measurable. See `measurable_limsup'` for a version with a general filter.
-/
@[measurability]
theorem measurable_limsup {f : ℕ → δ → α} (hf : ∀ i, Measurable (f i)) :
    Measurable fun x => limsup (fun i => f i x) atTop :=
  measurable_limsup' hf atTop_countable_basis fun i => to_countable _
#align measurable_limsup measurable_limsup
-/

end CompleteLinearOrder

section ConditionallyCompleteLinearOrder

variable [ConditionallyCompleteLinearOrder α] [OrderTopology α] [SecondCountableTopology α]

/- warning: measurable_cSup -> measurable_cSup is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_10 : MeasurableSpace.{u2} δ] [_inst_11 : ConditionallyCompleteLinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_11)))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {ι : Type.{u3}} {f : ι -> δ -> α} {s : Set.{u3} ι}, (Set.Countable.{u3} ι s) -> (forall (i : ι), Measurable.{u2, u1} δ α _inst_10 _inst_2 (f i)) -> (forall (x : δ), BddAbove.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_11))))) (Set.image.{u3, u1} ι α (fun (i : ι) => f i x) s)) -> (Measurable.{u2, u1} δ α _inst_10 _inst_2 (fun (x : δ) => SupSet.sSup.{u1} α (ConditionallyCompleteLattice.toHasSup.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_11)) (Set.image.{u3, u1} ι α (fun (i : ι) => f i x) s)))
but is expected to have type
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_10 : MeasurableSpace.{u2} δ] [_inst_11 : ConditionallyCompleteLinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_11)))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {ι : Type.{u3}} {f : ι -> δ -> α} {s : Set.{u3} ι}, (Set.Countable.{u3} ι s) -> (forall (i : ι), Measurable.{u2, u1} δ α _inst_10 _inst_2 (f i)) -> (forall (x : δ), BddAbove.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_11))))) (Set.image.{u3, u1} ι α (fun (i : ι) => f i x) s)) -> (Measurable.{u2, u1} δ α _inst_10 _inst_2 (fun (x : δ) => SupSet.sSup.{u1} α (ConditionallyCompleteLattice.toSupSet.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_11)) (Set.image.{u3, u1} ι α (fun (i : ι) => f i x) s)))
Case conversion may be inaccurate. Consider using '#align measurable_cSup measurable_cSupₓ'. -/
theorem measurable_cSup {ι} {f : ι → δ → α} {s : Set ι} (hs : s.Countable)
    (hf : ∀ i, Measurable (f i)) (bdd : ∀ x, BddAbove ((fun i => f i x) '' s)) :
    Measurable fun x => sSup ((fun i => f i x) '' s) :=
  by
  cases' eq_empty_or_nonempty s with h2s h2s
  · simp [h2s, measurable_const]
  · apply measurable_of_Iic
    intro y
    simp_rw [preimage, mem_Iic, csSup_le_iff (bdd _) (h2s.image _), ball_image_iff, set_of_forall]
    exact MeasurableSet.biInter hs fun i hi => measurableSet_le (hf i) measurable_const
#align measurable_cSup measurable_cSup

/- warning: measurable_cInf -> measurable_cInf is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_10 : MeasurableSpace.{u2} δ] [_inst_11 : ConditionallyCompleteLinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_11)))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {ι : Type.{u3}} {f : ι -> δ -> α} {s : Set.{u3} ι}, (Set.Countable.{u3} ι s) -> (forall (i : ι), Measurable.{u2, u1} δ α _inst_10 _inst_2 (f i)) -> (forall (x : δ), BddBelow.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_11))))) (Set.image.{u3, u1} ι α (fun (i : ι) => f i x) s)) -> (Measurable.{u2, u1} δ α _inst_10 _inst_2 (fun (x : δ) => InfSet.sInf.{u1} α (ConditionallyCompleteLattice.toHasInf.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_11)) (Set.image.{u3, u1} ι α (fun (i : ι) => f i x) s)))
but is expected to have type
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_10 : MeasurableSpace.{u2} δ] [_inst_11 : ConditionallyCompleteLinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_11)))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {ι : Type.{u3}} {f : ι -> δ -> α} {s : Set.{u3} ι}, (Set.Countable.{u3} ι s) -> (forall (i : ι), Measurable.{u2, u1} δ α _inst_10 _inst_2 (f i)) -> (forall (x : δ), BddBelow.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_11))))) (Set.image.{u3, u1} ι α (fun (i : ι) => f i x) s)) -> (Measurable.{u2, u1} δ α _inst_10 _inst_2 (fun (x : δ) => InfSet.sInf.{u1} α (ConditionallyCompleteLattice.toInfSet.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_11)) (Set.image.{u3, u1} ι α (fun (i : ι) => f i x) s)))
Case conversion may be inaccurate. Consider using '#align measurable_cInf measurable_cInfₓ'. -/
theorem measurable_cInf {ι} {f : ι → δ → α} {s : Set ι} (hs : s.Countable)
    (hf : ∀ i, Measurable (f i)) (bdd : ∀ x, BddBelow ((fun i => f i x) '' s)) :
    Measurable fun x => sInf ((fun i => f i x) '' s) :=
  @measurable_cSup αᵒᵈ _ _ _ _ _ _ _ _ _ _ _ hs hf bdd
#align measurable_cInf measurable_cInf

/- warning: measurable_csupr -> measurable_ciSup is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_10 : MeasurableSpace.{u2} δ] [_inst_11 : ConditionallyCompleteLinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_11)))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {ι : Type.{u3}} [_inst_14 : Countable.{succ u3} ι] {f : ι -> δ -> α}, (forall (i : ι), Measurable.{u2, u1} δ α _inst_10 _inst_2 (f i)) -> (forall (x : δ), BddAbove.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_11))))) (Set.range.{u1, succ u3} α ι (fun (i : ι) => f i x))) -> (Measurable.{u2, u1} δ α _inst_10 _inst_2 (fun (x : δ) => iSup.{u1, succ u3} α (ConditionallyCompleteLattice.toHasSup.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_11)) ι (fun (i : ι) => f i x)))
but is expected to have type
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_10 : MeasurableSpace.{u2} δ] [_inst_11 : ConditionallyCompleteLinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_11)))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {ι : Type.{u3}} [_inst_14 : Countable.{succ u3} ι] {f : ι -> δ -> α}, (forall (i : ι), Measurable.{u2, u1} δ α _inst_10 _inst_2 (f i)) -> (forall (x : δ), BddAbove.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_11))))) (Set.range.{u1, succ u3} α ι (fun (i : ι) => f i x))) -> (Measurable.{u2, u1} δ α _inst_10 _inst_2 (fun (x : δ) => iSup.{u1, succ u3} α (ConditionallyCompleteLattice.toSupSet.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_11)) ι (fun (i : ι) => f i x)))
Case conversion may be inaccurate. Consider using '#align measurable_csupr measurable_ciSupₓ'. -/
theorem measurable_ciSup {ι : Type _} [Countable ι] {f : ι → δ → α} (hf : ∀ i, Measurable (f i))
    (bdd : ∀ x, BddAbove (range fun i => f i x)) : Measurable fun x => ⨆ i, f i x :=
  by
  change Measurable fun x => Sup (range fun i : ι => f i x)
  simp_rw [← image_univ] at bdd⊢
  refine' measurable_cSup countable_univ hf bdd
#align measurable_csupr measurable_ciSup

/- warning: measurable_cinfi -> measurable_ciInf is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_10 : MeasurableSpace.{u2} δ] [_inst_11 : ConditionallyCompleteLinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_11)))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {ι : Type.{u3}} [_inst_14 : Countable.{succ u3} ι] {f : ι -> δ -> α}, (forall (i : ι), Measurable.{u2, u1} δ α _inst_10 _inst_2 (f i)) -> (forall (x : δ), BddBelow.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_11))))) (Set.range.{u1, succ u3} α ι (fun (i : ι) => f i x))) -> (Measurable.{u2, u1} δ α _inst_10 _inst_2 (fun (x : δ) => iInf.{u1, succ u3} α (ConditionallyCompleteLattice.toHasInf.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_11)) ι (fun (i : ι) => f i x)))
but is expected to have type
  forall {α : Type.{u1}} {δ : Type.{u2}} [_inst_1 : TopologicalSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : BorelSpace.{u1} α _inst_1 _inst_2] [_inst_10 : MeasurableSpace.{u2} δ] [_inst_11 : ConditionallyCompleteLinearOrder.{u1} α] [_inst_12 : OrderTopology.{u1} α _inst_1 (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_11)))))] [_inst_13 : TopologicalSpace.SecondCountableTopology.{u1} α _inst_1] {ι : Type.{u3}} [_inst_14 : Countable.{succ u3} ι] {f : ι -> δ -> α}, (forall (i : ι), Measurable.{u2, u1} δ α _inst_10 _inst_2 (f i)) -> (forall (x : δ), BddBelow.{u1} α (PartialOrder.toPreorder.{u1} α (SemilatticeInf.toPartialOrder.{u1} α (Lattice.toSemilatticeInf.{u1} α (ConditionallyCompleteLattice.toLattice.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_11))))) (Set.range.{u1, succ u3} α ι (fun (i : ι) => f i x))) -> (Measurable.{u2, u1} δ α _inst_10 _inst_2 (fun (x : δ) => iInf.{u1, succ u3} α (ConditionallyCompleteLattice.toInfSet.{u1} α (ConditionallyCompleteLinearOrder.toConditionallyCompleteLattice.{u1} α _inst_11)) ι (fun (i : ι) => f i x)))
Case conversion may be inaccurate. Consider using '#align measurable_cinfi measurable_ciInfₓ'. -/
theorem measurable_ciInf {ι : Type _} [Countable ι] {f : ι → δ → α} (hf : ∀ i, Measurable (f i))
    (bdd : ∀ x, BddBelow (range fun i => f i x)) : Measurable fun x => ⨅ i, f i x :=
  @measurable_ciSup αᵒᵈ _ _ _ _ _ _ _ _ _ _ _ hf bdd
#align measurable_cinfi measurable_ciInf

end ConditionallyCompleteLinearOrder

#print Homemorph.toMeasurableEquiv /-
/-- Convert a `homeomorph` to a `measurable_equiv`. -/
def Homemorph.toMeasurableEquiv (h : α ≃ₜ β) : α ≃ᵐ β
    where
  toEquiv := h.toEquiv
  measurable_to_fun := h.continuous_toFun.Measurable
  measurable_inv_fun := h.continuous_invFun.Measurable
#align homemorph.to_measurable_equiv Homemorph.toMeasurableEquiv
-/

/- warning: is_finite_measure_on_compacts.map -> IsFiniteMeasureOnCompacts.map is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} {m0 : MeasurableSpace.{u1} α} [_inst_11 : TopologicalSpace.{u1} α] [_inst_12 : OpensMeasurableSpace.{u1} α _inst_11 m0] {β : Type.{u2}} [_inst_13 : MeasurableSpace.{u2} β] [_inst_14 : TopologicalSpace.{u2} β] [_inst_15 : BorelSpace.{u2} β _inst_14 _inst_13] [_inst_16 : T2Space.{u2} β _inst_14] (μ : MeasureTheory.Measure.{u1} α m0) [_inst_17 : MeasureTheory.FiniteMeasureOnCompacts.{u1} α m0 _inst_11 μ] (f : Homeomorph.{u1, u2} α β _inst_11 _inst_14), MeasureTheory.FiniteMeasureOnCompacts.{u2} β _inst_13 _inst_14 (MeasureTheory.Measure.map.{u1, u2} α β _inst_13 m0 (coeFn.{max (succ u1) (succ u2), max (succ u1) (succ u2)} (Homeomorph.{u1, u2} α β _inst_11 _inst_14) (fun (_x : Homeomorph.{u1, u2} α β _inst_11 _inst_14) => α -> β) (Homeomorph.hasCoeToFun.{u1, u2} α β _inst_11 _inst_14) f) μ)
but is expected to have type
  forall {α : Type.{u2}} {m0 : MeasurableSpace.{u2} α} [_inst_11 : TopologicalSpace.{u2} α] [_inst_12 : OpensMeasurableSpace.{u2} α _inst_11 m0] {β : Type.{u1}} [_inst_13 : MeasurableSpace.{u1} β] [_inst_14 : TopologicalSpace.{u1} β] [_inst_15 : BorelSpace.{u1} β _inst_14 _inst_13] [_inst_16 : T2Space.{u1} β _inst_14] (μ : MeasureTheory.Measure.{u2} α m0) [_inst_17 : MeasureTheory.FiniteMeasureOnCompacts.{u2} α m0 _inst_11 μ] (f : Homeomorph.{u2, u1} α β _inst_11 _inst_14), MeasureTheory.FiniteMeasureOnCompacts.{u1} β _inst_13 _inst_14 (MeasureTheory.Measure.map.{u2, u1} α β _inst_13 m0 (FunLike.coe.{max (succ u2) (succ u1), succ u2, succ u1} (Homeomorph.{u2, u1} α β _inst_11 _inst_14) α (fun (_x : α) => β) (EmbeddingLike.toFunLike.{max (succ u2) (succ u1), succ u2, succ u1} (Homeomorph.{u2, u1} α β _inst_11 _inst_14) α β (EquivLike.toEmbeddingLike.{max (succ u2) (succ u1), succ u2, succ u1} (Homeomorph.{u2, u1} α β _inst_11 _inst_14) α β (Homeomorph.instEquivLikeHomeomorph.{u2, u1} α β _inst_11 _inst_14))) f) μ)
Case conversion may be inaccurate. Consider using '#align is_finite_measure_on_compacts.map IsFiniteMeasureOnCompacts.mapₓ'. -/
protected theorem IsFiniteMeasureOnCompacts.map {α : Type _} {m0 : MeasurableSpace α}
    [TopologicalSpace α] [OpensMeasurableSpace α] {β : Type _} [MeasurableSpace β]
    [TopologicalSpace β] [BorelSpace β] [T2Space β] (μ : Measure α) [FiniteMeasureOnCompacts μ]
    (f : α ≃ₜ β) : FiniteMeasureOnCompacts (Measure.map f μ) :=
  ⟨by
    intro K hK
    rw [measure.map_apply f.measurable hK.measurable_set]
    apply IsCompact.measure_lt_top
    rwa [f.is_compact_preimage]⟩
#align is_finite_measure_on_compacts.map IsFiniteMeasureOnCompacts.map

end BorelSpace

/- warning: empty.borel_space -> Empty.borelSpace is a dubious translation:
lean 3 declaration is
  BorelSpace.{0} Empty Empty.topologicalSpace Empty.instMeasurableSpace
but is expected to have type
  BorelSpace.{0} Empty instTopologicalSpaceEmpty Empty.instMeasurableSpace
Case conversion may be inaccurate. Consider using '#align empty.borel_space Empty.borelSpaceₓ'. -/
instance Empty.borelSpace : BorelSpace Empty :=
  ⟨borel_eq_top_of_discrete.symm⟩
#align empty.borel_space Empty.borelSpace

/- warning: unit.borel_space -> Unit.borelSpace is a dubious translation:
lean 3 declaration is
  BorelSpace.{0} Unit PUnit.topologicalSpace.{0} PUnit.instMeasurableSpace.{0}
but is expected to have type
  BorelSpace.{0} Unit instTopologicalSpacePUnit.{0} PUnit.instMeasurableSpace.{0}
Case conversion may be inaccurate. Consider using '#align unit.borel_space Unit.borelSpaceₓ'. -/
instance Unit.borelSpace : BorelSpace Unit :=
  ⟨borel_eq_top_of_discrete.symm⟩
#align unit.borel_space Unit.borelSpace

/- warning: bool.borel_space -> Bool.borelSpace is a dubious translation:
lean 3 declaration is
  BorelSpace.{0} Bool Bool.topologicalSpace Bool.instMeasurableSpace
but is expected to have type
  BorelSpace.{0} Bool instTopologicalSpaceBool Bool.instMeasurableSpace
Case conversion may be inaccurate. Consider using '#align bool.borel_space Bool.borelSpaceₓ'. -/
instance Bool.borelSpace : BorelSpace Bool :=
  ⟨borel_eq_top_of_discrete.symm⟩
#align bool.borel_space Bool.borelSpace

/- warning: nat.borel_space -> Nat.borelSpace is a dubious translation:
lean 3 declaration is
  BorelSpace.{0} Nat Nat.topologicalSpace Nat.instMeasurableSpace
but is expected to have type
  BorelSpace.{0} Nat instTopologicalSpaceNat Nat.instMeasurableSpace
Case conversion may be inaccurate. Consider using '#align nat.borel_space Nat.borelSpaceₓ'. -/
instance Nat.borelSpace : BorelSpace ℕ :=
  ⟨borel_eq_top_of_discrete.symm⟩
#align nat.borel_space Nat.borelSpace

/- warning: int.borel_space -> Int.borelSpace is a dubious translation:
lean 3 declaration is
  BorelSpace.{0} Int Int.topologicalSpace Int.instMeasurableSpace
but is expected to have type
  BorelSpace.{0} Int instTopologicalSpaceInt Int.instMeasurableSpace
Case conversion may be inaccurate. Consider using '#align int.borel_space Int.borelSpaceₓ'. -/
instance Int.borelSpace : BorelSpace ℤ :=
  ⟨borel_eq_top_of_discrete.symm⟩
#align int.borel_space Int.borelSpace

#print Rat.borelSpace /-
instance Rat.borelSpace : BorelSpace ℚ :=
  ⟨borel_eq_top_of_countable.symm⟩
#align rat.borel_space Rat.borelSpace
-/

#print Real.measurableSpace /-
/- Instances on `real` and `complex` are special cases of `is_R_or_C` but without these instances,
Lean fails to prove `borel_space (ι → ℝ)`, so we leave them here. -/
instance Real.measurableSpace : MeasurableSpace ℝ :=
  borel ℝ
#align real.measurable_space Real.measurableSpace
-/

#print Real.borelSpace /-
instance Real.borelSpace : BorelSpace ℝ :=
  ⟨rfl⟩
#align real.borel_space Real.borelSpace
-/

#print NNReal.measurableSpace /-
instance NNReal.measurableSpace : MeasurableSpace ℝ≥0 :=
  Subtype.instMeasurableSpace
#align nnreal.measurable_space NNReal.measurableSpace
-/

/- warning: nnreal.borel_space -> NNReal.borelSpace is a dubious translation:
lean 3 declaration is
  BorelSpace.{0} NNReal NNReal.topologicalSpace NNReal.measurableSpace
but is expected to have type
  BorelSpace.{0} NNReal NNReal.instTopologicalSpaceNNReal NNReal.measurableSpace
Case conversion may be inaccurate. Consider using '#align nnreal.borel_space NNReal.borelSpaceₓ'. -/
instance NNReal.borelSpace : BorelSpace ℝ≥0 :=
  Subtype.borelSpace _
#align nnreal.borel_space NNReal.borelSpace

#print ENNReal.measurableSpace /-
instance ENNReal.measurableSpace : MeasurableSpace ℝ≥0∞ :=
  borel ℝ≥0∞
#align ennreal.measurable_space ENNReal.measurableSpace
-/

/- warning: ennreal.borel_space -> ENNReal.borelSpace is a dubious translation:
lean 3 declaration is
  BorelSpace.{0} ENNReal ENNReal.topologicalSpace ENNReal.measurableSpace
but is expected to have type
  BorelSpace.{0} ENNReal ENNReal.instTopologicalSpaceENNReal ENNReal.measurableSpace
Case conversion may be inaccurate. Consider using '#align ennreal.borel_space ENNReal.borelSpaceₓ'. -/
instance ENNReal.borelSpace : BorelSpace ℝ≥0∞ :=
  ⟨rfl⟩
#align ennreal.borel_space ENNReal.borelSpace

#print EReal.measurableSpace /-
instance EReal.measurableSpace : MeasurableSpace EReal :=
  borel EReal
#align ereal.measurable_space EReal.measurableSpace
-/

/- warning: ereal.borel_space -> EReal.borelSpace is a dubious translation:
lean 3 declaration is
  BorelSpace.{0} EReal EReal.topologicalSpace EReal.measurableSpace
but is expected to have type
  BorelSpace.{0} EReal EReal.instTopologicalSpaceEReal EReal.measurableSpace
Case conversion may be inaccurate. Consider using '#align ereal.borel_space EReal.borelSpaceₓ'. -/
instance EReal.borelSpace : BorelSpace EReal :=
  ⟨rfl⟩
#align ereal.borel_space EReal.borelSpace

/- warning: measure_eq_measure_preimage_add_measure_tsum_Ico_zpow -> measure_eq_measure_preimage_add_measure_tsum_Ico_zpow is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_1 : MeasurableSpace.{u1} α] (μ : MeasureTheory.Measure.{u1} α _inst_1) {f : α -> ENNReal}, (Measurable.{u1, 0} α ENNReal _inst_1 ENNReal.measurableSpace f) -> (forall {s : Set.{u1} α}, (MeasurableSet.{u1} α _inst_1 s) -> (forall {t : NNReal}, (LT.lt.{0} NNReal (Preorder.toHasLt.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (OrderedCancelAddCommMonoid.toPartialOrder.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)))) (OfNat.ofNat.{0} NNReal 1 (OfNat.mk.{0} NNReal 1 (One.one.{0} NNReal (AddMonoidWithOne.toOne.{0} NNReal (AddCommMonoidWithOne.toAddMonoidWithOne.{0} NNReal (NonAssocSemiring.toAddCommMonoidWithOne.{0} NNReal (Semiring.toNonAssocSemiring.{0} NNReal NNReal.semiring))))))) t) -> (Eq.{1} ENNReal (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α _inst_1) (fun (_x : MeasureTheory.Measure.{u1} α _inst_1) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α _inst_1) μ s) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toHasAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))))))) (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α _inst_1) (fun (_x : MeasureTheory.Measure.{u1} α _inst_1) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α _inst_1) μ (Inter.inter.{u1} (Set.{u1} α) (Set.hasInter.{u1} α) s (Set.preimage.{u1, 0} α ENNReal f (Singleton.singleton.{0, 0} ENNReal (Set.{0} ENNReal) (Set.hasSingleton.{0} ENNReal) (OfNat.ofNat.{0} ENNReal 0 (OfNat.mk.{0} ENNReal 0 (Zero.zero.{0} ENNReal ENNReal.hasZero))))))) (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α _inst_1) (fun (_x : MeasureTheory.Measure.{u1} α _inst_1) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α _inst_1) μ (Inter.inter.{u1} (Set.{u1} α) (Set.hasInter.{u1} α) s (Set.preimage.{u1, 0} α ENNReal f (Singleton.singleton.{0, 0} ENNReal (Set.{0} ENNReal) (Set.hasSingleton.{0} ENNReal) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))))))) (tsum.{0, 0} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace Int (fun (n : Int) => coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α _inst_1) (fun (_x : MeasureTheory.Measure.{u1} α _inst_1) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α _inst_1) μ (Inter.inter.{u1} (Set.{u1} α) (Set.hasInter.{u1} α) s (Set.preimage.{u1, 0} α ENNReal f (Set.Ico.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (CompleteSemilatticeInf.toPartialOrder.{0} ENNReal (CompleteLattice.toCompleteSemilatticeInf.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))) (HPow.hPow.{0, 0, 0} ENNReal Int ENNReal (instHPow.{0, 0} ENNReal Int (DivInvMonoid.Pow.{0} ENNReal ENNReal.divInvMonoid)) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTCₓ.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) t) n) (HPow.hPow.{0, 0, 0} ENNReal Int ENNReal (instHPow.{0, 0} ENNReal Int (DivInvMonoid.Pow.{0} ENNReal ENNReal.divInvMonoid)) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTCₓ.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) t) (HAdd.hAdd.{0, 0, 0} Int Int Int (instHAdd.{0} Int Int.hasAdd) n (OfNat.ofNat.{0} Int 1 (OfNat.mk.{0} Int 1 (One.one.{0} Int Int.hasOne))))))))))))))
but is expected to have type
  forall {α : Type.{u1}} [_inst_1 : MeasurableSpace.{u1} α] (μ : MeasureTheory.Measure.{u1} α _inst_1) {f : α -> ENNReal}, (Measurable.{u1, 0} α ENNReal _inst_1 ENNReal.measurableSpace f) -> (forall {s : Set.{u1} α}, (MeasurableSet.{u1} α _inst_1 s) -> (forall {t : NNReal}, (LT.lt.{0} NNReal (Preorder.toLT.{0} NNReal (PartialOrder.toPreorder.{0} NNReal (StrictOrderedSemiring.toPartialOrder.{0} NNReal instNNRealStrictOrderedSemiring))) (OfNat.ofNat.{0} NNReal 1 (One.toOfNat1.{0} NNReal instNNRealOne)) t) -> (Eq.{1} ENNReal (MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α _inst_1 μ) s) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) (HAdd.hAdd.{0, 0, 0} ENNReal ENNReal ENNReal (instHAdd.{0} ENNReal (Distrib.toAdd.{0} ENNReal (NonUnitalNonAssocSemiring.toDistrib.{0} ENNReal (NonAssocSemiring.toNonUnitalNonAssocSemiring.{0} ENNReal (Semiring.toNonAssocSemiring.{0} ENNReal (OrderedSemiring.toSemiring.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.instCanonicallyOrderedCommSemiringENNReal)))))))) (MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α _inst_1 μ) (Inter.inter.{u1} (Set.{u1} α) (Set.instInterSet.{u1} α) s (Set.preimage.{u1, 0} α ENNReal f (Singleton.singleton.{0, 0} ENNReal (Set.{0} ENNReal) (Set.instSingletonSet.{0} ENNReal) (OfNat.ofNat.{0} ENNReal 0 (Zero.toOfNat0.{0} ENNReal instENNRealZero)))))) (MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α _inst_1 μ) (Inter.inter.{u1} (Set.{u1} α) (Set.instInterSet.{u1} α) s (Set.preimage.{u1, 0} α ENNReal f (Singleton.singleton.{0, 0} ENNReal (Set.{0} ENNReal) (Set.instSingletonSet.{0} ENNReal) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))))))) (tsum.{0, 0} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal Int (fun (n : Int) => MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α _inst_1 μ) (Inter.inter.{u1} (Set.{u1} α) (Set.instInterSet.{u1} α) s (Set.preimage.{u1, 0} α ENNReal f (Set.Ico.{0} ENNReal (PartialOrder.toPreorder.{0} ENNReal (OmegaCompletePartialOrder.toPartialOrder.{0} ENNReal (CompleteLattice.instOmegaCompletePartialOrder.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))) (HPow.hPow.{0, 0, 0} ENNReal Int ENNReal (instHPow.{0, 0} ENNReal Int (DivInvMonoid.Pow.{0} ENNReal ENNReal.instDivInvMonoidENNReal)) (ENNReal.some t) n) (HPow.hPow.{0, 0, 0} ENNReal Int ENNReal (instHPow.{0, 0} ENNReal Int (DivInvMonoid.Pow.{0} ENNReal ENNReal.instDivInvMonoidENNReal)) (ENNReal.some t) (HAdd.hAdd.{0, 0, 0} Int Int Int (instHAdd.{0} Int Int.instAddInt) n (OfNat.ofNat.{0} Int 1 (instOfNatInt 1)))))))))))))
Case conversion may be inaccurate. Consider using '#align measure_eq_measure_preimage_add_measure_tsum_Ico_zpow measure_eq_measure_preimage_add_measure_tsum_Ico_zpowₓ'. -/
/-- One can cut out `ℝ≥0∞` into the sets `{0}`, `Ico (t^n) (t^(n+1))` for `n : ℤ` and `{∞}`. This
gives a way to compute the measure of a set in terms of sets on which a given function `f` does not
fluctuate by more than `t`. -/
theorem measure_eq_measure_preimage_add_measure_tsum_Ico_zpow [MeasurableSpace α] (μ : Measure α)
    {f : α → ℝ≥0∞} (hf : Measurable f) {s : Set α} (hs : MeasurableSet s) {t : ℝ≥0} (ht : 1 < t) :
    μ s =
      μ (s ∩ f ⁻¹' {0}) + μ (s ∩ f ⁻¹' {∞}) + ∑' n : ℤ, μ (s ∩ f ⁻¹' Ico (t ^ n) (t ^ (n + 1))) :=
  by
  have A : μ s = μ (s ∩ f ⁻¹' {0}) + μ (s ∩ f ⁻¹' Ioi 0) :=
    by
    rw [← measure_union]
    · congr 1
      ext x
      have : 0 = f x ∨ 0 < f x := eq_or_lt_of_le bot_le
      rw [eq_comm] at this
      simp only [← and_or_left, this, mem_singleton_iff, mem_inter_iff, and_true_iff, mem_union,
        mem_Ioi, mem_preimage]
    · apply disjoint_left.2 fun x hx h'x => _
      have : 0 < f x := h'x.2
      exact lt_irrefl 0 (this.trans_le hx.2.le)
    · exact hs.inter (hf measurableSet_Ioi)
  have B : μ (s ∩ f ⁻¹' Ioi 0) = μ (s ∩ f ⁻¹' {∞}) + μ (s ∩ f ⁻¹' Ioo 0 ∞) :=
    by
    rw [← measure_union]
    · rw [← inter_union_distrib_left]
      congr
      ext x
      simp only [mem_singleton_iff, mem_union, mem_Ioo, mem_Ioi, mem_preimage]
      have H : f x = ∞ ∨ f x < ∞ := eq_or_lt_of_le le_top
      cases H
      ·
        simp only [H, eq_self_iff_true, or_false_iff, WithTop.zero_lt_top, not_top_lt,
          and_false_iff]
      · simp only [H, H.ne, and_true_iff, false_or_iff]
    · apply disjoint_left.2 fun x hx h'x => _
      have : f x < ∞ := h'x.2.2
      exact lt_irrefl _ (this.trans_le (le_of_eq hx.2.symm))
    · exact hs.inter (hf measurableSet_Ioo)
  have C : μ (s ∩ f ⁻¹' Ioo 0 ∞) = ∑' n : ℤ, μ (s ∩ f ⁻¹' Ico (t ^ n) (t ^ (n + 1))) :=
    by
    rw [← measure_Union,
      ENNReal.Ioo_zero_top_eq_iUnion_Ico_zpow (ENNReal.one_lt_coe_iff.2 ht) ENNReal.coe_ne_top,
      preimage_Union, inter_Union]
    · intro i j
      simp only [Function.onFun]
      intro hij
      wlog h : i < j generalizing i j
      · exact (this hij.symm (hij.lt_or_lt.resolve_left h)).symm
      apply disjoint_left.2 fun x hx h'x => lt_irrefl (f x) _
      calc
        f x < t ^ (i + 1) := hx.2.2
        _ ≤ t ^ j := (ENNReal.zpow_le_of_le (ENNReal.one_le_coe_iff.2 ht.le) h)
        _ ≤ f x := h'x.2.1
        
    · intro n
      exact hs.inter (hf measurableSet_Ico)
  rw [A, B, C, add_assoc]
#align measure_eq_measure_preimage_add_measure_tsum_Ico_zpow measure_eq_measure_preimage_add_measure_tsum_Ico_zpow

section PseudoMetricSpace

variable [PseudoMetricSpace α] [MeasurableSpace α] [OpensMeasurableSpace α]

variable [MeasurableSpace β] {x : α} {ε : ℝ}

open Metric

#print measurableSet_ball /-
@[measurability]
theorem measurableSet_ball : MeasurableSet (Metric.ball x ε) :=
  Metric.isOpen_ball.MeasurableSet
#align measurable_set_ball measurableSet_ball
-/

#print measurableSet_closedBall /-
@[measurability]
theorem measurableSet_closedBall : MeasurableSet (Metric.closedBall x ε) :=
  Metric.isClosed_ball.MeasurableSet
#align measurable_set_closed_ball measurableSet_closedBall
-/

#print measurable_infDist /-
@[measurability]
theorem measurable_infDist {s : Set α} : Measurable fun x => infDist x s :=
  (continuous_infDist_pt s).Measurable
#align measurable_inf_dist measurable_infDist
-/

#print Measurable.infDist /-
@[measurability]
theorem Measurable.infDist {f : β → α} (hf : Measurable f) {s : Set α} :
    Measurable fun x => infDist (f x) s :=
  measurable_infDist.comp hf
#align measurable.inf_dist Measurable.infDist
-/

#print measurable_infNndist /-
@[measurability]
theorem measurable_infNndist {s : Set α} : Measurable fun x => infNndist x s :=
  (continuous_infNndist_pt s).Measurable
#align measurable_inf_nndist measurable_infNndist
-/

#print Measurable.infNndist /-
@[measurability]
theorem Measurable.infNndist {f : β → α} (hf : Measurable f) {s : Set α} :
    Measurable fun x => infNndist (f x) s :=
  measurable_infNndist.comp hf
#align measurable.inf_nndist Measurable.infNndist
-/

section

variable [SecondCountableTopology α]

#print measurable_dist /-
@[measurability]
theorem measurable_dist : Measurable fun p : α × α => dist p.1 p.2 :=
  continuous_dist.Measurable
#align measurable_dist measurable_dist
-/

#print Measurable.dist /-
@[measurability]
theorem Measurable.dist {f g : β → α} (hf : Measurable f) (hg : Measurable g) :
    Measurable fun b => dist (f b) (g b) :=
  (@continuous_dist α _).measurable2 hf hg
#align measurable.dist Measurable.dist
-/

#print measurable_nndist /-
@[measurability]
theorem measurable_nndist : Measurable fun p : α × α => nndist p.1 p.2 :=
  continuous_nndist.Measurable
#align measurable_nndist measurable_nndist
-/

#print Measurable.nndist /-
@[measurability]
theorem Measurable.nndist {f g : β → α} (hf : Measurable f) (hg : Measurable g) :
    Measurable fun b => nndist (f b) (g b) :=
  (@continuous_nndist α _).measurable2 hf hg
#align measurable.nndist Measurable.nndist
-/

end

/- warning: tendsto_measure_cthickening -> tendsto_measure_cthickening is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_1 : PseudoMetricSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α (UniformSpace.toTopologicalSpace.{u1} α (PseudoMetricSpace.toUniformSpace.{u1} α _inst_1)) _inst_2] {μ : MeasureTheory.Measure.{u1} α _inst_2} {s : Set.{u1} α}, (Exists.{1} Real (fun (R : Real) => Exists.{0} (GT.gt.{0} Real Real.hasLt R (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero)))) (fun (H : GT.gt.{0} Real Real.hasLt R (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero)))) => Ne.{1} ENNReal (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α _inst_2) (fun (_x : MeasureTheory.Measure.{u1} α _inst_2) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α _inst_2) μ (Metric.cthickening.{u1} α (PseudoMetricSpace.toPseudoEMetricSpace.{u1} α _inst_1) R s)) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))))) -> (Filter.Tendsto.{0, 0} Real ENNReal (fun (r : Real) => coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α _inst_2) (fun (_x : MeasureTheory.Measure.{u1} α _inst_2) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α _inst_2) μ (Metric.cthickening.{u1} α (PseudoMetricSpace.toPseudoEMetricSpace.{u1} α _inst_1) r s)) (nhds.{0} Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero)))) (nhds.{0} ENNReal ENNReal.topologicalSpace (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α _inst_2) (fun (_x : MeasureTheory.Measure.{u1} α _inst_2) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α _inst_2) μ (closure.{u1} α (UniformSpace.toTopologicalSpace.{u1} α (PseudoMetricSpace.toUniformSpace.{u1} α _inst_1)) s))))
but is expected to have type
  forall {α : Type.{u1}} [_inst_1 : PseudoMetricSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α (UniformSpace.toTopologicalSpace.{u1} α (PseudoMetricSpace.toUniformSpace.{u1} α _inst_1)) _inst_2] {μ : MeasureTheory.Measure.{u1} α _inst_2} {s : Set.{u1} α}, (Exists.{1} Real (fun (R : Real) => And (GT.gt.{0} Real Real.instLTReal R (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal))) (Ne.{1} ENNReal (MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α _inst_2 μ) (Metric.cthickening.{u1} α (PseudoMetricSpace.toPseudoEMetricSpace.{u1} α _inst_1) R s)) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))))) -> (Filter.Tendsto.{0, 0} Real ENNReal (fun (r : Real) => MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α _inst_2 μ) (Metric.cthickening.{u1} α (PseudoMetricSpace.toPseudoEMetricSpace.{u1} α _inst_1) r s)) (nhds.{0} Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal))) (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α _inst_2 μ) (closure.{u1} α (UniformSpace.toTopologicalSpace.{u1} α (PseudoMetricSpace.toUniformSpace.{u1} α _inst_1)) s))))
Case conversion may be inaccurate. Consider using '#align tendsto_measure_cthickening tendsto_measure_cthickeningₓ'. -/
/-- If a set has a closed thickening with finite measure, then the measure of its `r`-closed
thickenings converges to the measure of its closure as `r` tends to `0`. -/
theorem tendsto_measure_cthickening {μ : Measure α} {s : Set α}
    (hs : ∃ R > 0, μ (cthickening R s) ≠ ∞) :
    Tendsto (fun r => μ (cthickening r s)) (𝓝 0) (𝓝 (μ (closure s))) :=
  by
  have A : tendsto (fun r => μ (cthickening r s)) (𝓝[Ioi 0] 0) (𝓝 (μ (closure s))) :=
    by
    rw [closure_eq_Inter_cthickening]
    exact
      tendsto_measure_bInter_gt (fun r hr => is_closed_cthickening.measurable_set)
        (fun i j ipos ij => cthickening_mono ij _) hs
  have B : tendsto (fun r => μ (cthickening r s)) (𝓝[Iic 0] 0) (𝓝 (μ (closure s))) :=
    by
    apply tendsto.congr' _ tendsto_const_nhds
    filter_upwards [self_mem_nhdsWithin]with _ hr
    rw [cthickening_of_nonpos hr]
  convert B.sup A
  exact (nhds_left_sup_nhds_right' 0).symm
#align tendsto_measure_cthickening tendsto_measure_cthickening

/- warning: tendsto_measure_cthickening_of_is_closed -> tendsto_measure_cthickening_of_isClosed is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_1 : PseudoMetricSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α (UniformSpace.toTopologicalSpace.{u1} α (PseudoMetricSpace.toUniformSpace.{u1} α _inst_1)) _inst_2] {μ : MeasureTheory.Measure.{u1} α _inst_2} {s : Set.{u1} α}, (Exists.{1} Real (fun (R : Real) => Exists.{0} (GT.gt.{0} Real Real.hasLt R (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero)))) (fun (H : GT.gt.{0} Real Real.hasLt R (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero)))) => Ne.{1} ENNReal (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α _inst_2) (fun (_x : MeasureTheory.Measure.{u1} α _inst_2) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α _inst_2) μ (Metric.cthickening.{u1} α (PseudoMetricSpace.toPseudoEMetricSpace.{u1} α _inst_1) R s)) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))))) -> (IsClosed.{u1} α (UniformSpace.toTopologicalSpace.{u1} α (PseudoMetricSpace.toUniformSpace.{u1} α _inst_1)) s) -> (Filter.Tendsto.{0, 0} Real ENNReal (fun (r : Real) => coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α _inst_2) (fun (_x : MeasureTheory.Measure.{u1} α _inst_2) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α _inst_2) μ (Metric.cthickening.{u1} α (PseudoMetricSpace.toPseudoEMetricSpace.{u1} α _inst_1) r s)) (nhds.{0} Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero)))) (nhds.{0} ENNReal ENNReal.topologicalSpace (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α _inst_2) (fun (_x : MeasureTheory.Measure.{u1} α _inst_2) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α _inst_2) μ s)))
but is expected to have type
  forall {α : Type.{u1}} [_inst_1 : PseudoMetricSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α (UniformSpace.toTopologicalSpace.{u1} α (PseudoMetricSpace.toUniformSpace.{u1} α _inst_1)) _inst_2] {μ : MeasureTheory.Measure.{u1} α _inst_2} {s : Set.{u1} α}, (Exists.{1} Real (fun (R : Real) => And (GT.gt.{0} Real Real.instLTReal R (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal))) (Ne.{1} ENNReal (MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α _inst_2 μ) (Metric.cthickening.{u1} α (PseudoMetricSpace.toPseudoEMetricSpace.{u1} α _inst_1) R s)) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))))) -> (IsClosed.{u1} α (UniformSpace.toTopologicalSpace.{u1} α (PseudoMetricSpace.toUniformSpace.{u1} α _inst_1)) s) -> (Filter.Tendsto.{0, 0} Real ENNReal (fun (r : Real) => MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α _inst_2 μ) (Metric.cthickening.{u1} α (PseudoMetricSpace.toPseudoEMetricSpace.{u1} α _inst_1) r s)) (nhds.{0} Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal))) (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α _inst_2 μ) s)))
Case conversion may be inaccurate. Consider using '#align tendsto_measure_cthickening_of_is_closed tendsto_measure_cthickening_of_isClosedₓ'. -/
/-- If a closed set has a closed thickening with finite measure, then the measure of its `r`-closed
thickenings converges to its measure as `r` tends to `0`. -/
theorem tendsto_measure_cthickening_of_isClosed {μ : Measure α} {s : Set α}
    (hs : ∃ R > 0, μ (cthickening R s) ≠ ∞) (h's : IsClosed s) :
    Tendsto (fun r => μ (cthickening r s)) (𝓝 0) (𝓝 (μ s)) :=
  by
  convert tendsto_measure_cthickening hs
  exact h's.closure_eq.symm
#align tendsto_measure_cthickening_of_is_closed tendsto_measure_cthickening_of_isClosed

end PseudoMetricSpace

/- warning: tendsto_measure_cthickening_of_is_compact -> tendsto_measure_cthickening_of_isCompact is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_1 : MetricSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α (UniformSpace.toTopologicalSpace.{u1} α (PseudoMetricSpace.toUniformSpace.{u1} α (MetricSpace.toPseudoMetricSpace.{u1} α _inst_1))) _inst_2] [_inst_4 : ProperSpace.{u1} α (MetricSpace.toPseudoMetricSpace.{u1} α _inst_1)] {μ : MeasureTheory.Measure.{u1} α _inst_2} [_inst_5 : MeasureTheory.FiniteMeasureOnCompacts.{u1} α _inst_2 (UniformSpace.toTopologicalSpace.{u1} α (PseudoMetricSpace.toUniformSpace.{u1} α (MetricSpace.toPseudoMetricSpace.{u1} α _inst_1))) μ] {s : Set.{u1} α}, (IsCompact.{u1} α (UniformSpace.toTopologicalSpace.{u1} α (PseudoMetricSpace.toUniformSpace.{u1} α (MetricSpace.toPseudoMetricSpace.{u1} α _inst_1))) s) -> (Filter.Tendsto.{0, 0} Real ENNReal (fun (r : Real) => coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α _inst_2) (fun (_x : MeasureTheory.Measure.{u1} α _inst_2) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α _inst_2) μ (Metric.cthickening.{u1} α (PseudoMetricSpace.toPseudoEMetricSpace.{u1} α (MetricSpace.toPseudoMetricSpace.{u1} α _inst_1)) r s)) (nhds.{0} Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (OfNat.ofNat.{0} Real 0 (OfNat.mk.{0} Real 0 (Zero.zero.{0} Real Real.hasZero)))) (nhds.{0} ENNReal ENNReal.topologicalSpace (coeFn.{succ u1, succ u1} (MeasureTheory.Measure.{u1} α _inst_2) (fun (_x : MeasureTheory.Measure.{u1} α _inst_2) => (Set.{u1} α) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{u1} α _inst_2) μ s)))
but is expected to have type
  forall {α : Type.{u1}} [_inst_1 : MetricSpace.{u1} α] [_inst_2 : MeasurableSpace.{u1} α] [_inst_3 : OpensMeasurableSpace.{u1} α (UniformSpace.toTopologicalSpace.{u1} α (PseudoMetricSpace.toUniformSpace.{u1} α (MetricSpace.toPseudoMetricSpace.{u1} α _inst_1))) _inst_2] [_inst_4 : ProperSpace.{u1} α (MetricSpace.toPseudoMetricSpace.{u1} α _inst_1)] {μ : MeasureTheory.Measure.{u1} α _inst_2} [_inst_5 : MeasureTheory.FiniteMeasureOnCompacts.{u1} α _inst_2 (UniformSpace.toTopologicalSpace.{u1} α (PseudoMetricSpace.toUniformSpace.{u1} α (MetricSpace.toPseudoMetricSpace.{u1} α _inst_1))) μ] {s : Set.{u1} α}, (IsCompact.{u1} α (UniformSpace.toTopologicalSpace.{u1} α (PseudoMetricSpace.toUniformSpace.{u1} α (MetricSpace.toPseudoMetricSpace.{u1} α _inst_1))) s) -> (Filter.Tendsto.{0, 0} Real ENNReal (fun (r : Real) => MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α _inst_2 μ) (Metric.cthickening.{u1} α (EMetricSpace.toPseudoEMetricSpace.{u1} α (MetricSpace.toEMetricSpace.{u1} α _inst_1)) r s)) (nhds.{0} Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) (OfNat.ofNat.{0} Real 0 (Zero.toOfNat0.{0} Real Real.instZeroReal))) (nhds.{0} ENNReal ENNReal.instTopologicalSpaceENNReal (MeasureTheory.OuterMeasure.measureOf.{u1} α (MeasureTheory.Measure.toOuterMeasure.{u1} α _inst_2 μ) s)))
Case conversion may be inaccurate. Consider using '#align tendsto_measure_cthickening_of_is_compact tendsto_measure_cthickening_of_isCompactₓ'. -/
/-- Given a compact set in a proper space, the measure of its `r`-closed thickenings converges to
its measure as `r` tends to `0`. -/
theorem tendsto_measure_cthickening_of_isCompact [MetricSpace α] [MeasurableSpace α]
    [OpensMeasurableSpace α] [ProperSpace α] {μ : Measure α} [FiniteMeasureOnCompacts μ] {s : Set α}
    (hs : IsCompact s) : Tendsto (fun r => μ (Metric.cthickening r s)) (𝓝 0) (𝓝 (μ s)) :=
  tendsto_measure_cthickening_of_isClosed ⟨1, zero_lt_one, hs.Bounded.cthickening.measure_lt_top.Ne⟩
    hs.IsClosed
#align tendsto_measure_cthickening_of_is_compact tendsto_measure_cthickening_of_isCompact

section PseudoEMetricSpace

variable [PseudoEMetricSpace α] [MeasurableSpace α] [OpensMeasurableSpace α]

variable [MeasurableSpace β] {x : α} {ε : ℝ≥0∞}

open Emetric

#print measurableSet_eball /-
@[measurability]
theorem measurableSet_eball : MeasurableSet (EMetric.ball x ε) :=
  EMetric.isOpen_ball.MeasurableSet
#align measurable_set_eball measurableSet_eball
-/

#print measurable_edist_right /-
@[measurability]
theorem measurable_edist_right : Measurable (edist x) :=
  (continuous_const.edist continuous_id).Measurable
#align measurable_edist_right measurable_edist_right
-/

#print measurable_edist_left /-
@[measurability]
theorem measurable_edist_left : Measurable fun y => edist y x :=
  (continuous_id.edist continuous_const).Measurable
#align measurable_edist_left measurable_edist_left
-/

#print measurable_infEdist /-
@[measurability]
theorem measurable_infEdist {s : Set α} : Measurable fun x => infEdist x s :=
  continuous_infEdist.Measurable
#align measurable_inf_edist measurable_infEdist
-/

#print Measurable.infEdist /-
@[measurability]
theorem Measurable.infEdist {f : β → α} (hf : Measurable f) {s : Set α} :
    Measurable fun x => infEdist (f x) s :=
  measurable_infEdist.comp hf
#align measurable.inf_edist Measurable.infEdist
-/

variable [SecondCountableTopology α]

#print measurable_edist /-
@[measurability]
theorem measurable_edist : Measurable fun p : α × α => edist p.1 p.2 :=
  continuous_edist.Measurable
#align measurable_edist measurable_edist
-/

#print Measurable.edist /-
@[measurability]
theorem Measurable.edist {f g : β → α} (hf : Measurable f) (hg : Measurable g) :
    Measurable fun b => edist (f b) (g b) :=
  (@continuous_edist α _).measurable2 hf hg
#align measurable.edist Measurable.edist
-/

#print AEMeasurable.edist /-
@[measurability]
theorem AEMeasurable.edist {f g : β → α} {μ : Measure β} (hf : AEMeasurable f μ)
    (hg : AEMeasurable g μ) : AEMeasurable (fun a => edist (f a) (g a)) μ :=
  (@continuous_edist α _).aemeasurable2 hf hg
#align ae_measurable.edist AEMeasurable.edist
-/

end PseudoEMetricSpace

namespace Real

open MeasurableSpace MeasureTheory

/- warning: real.borel_eq_generate_from_Ioo_rat -> Real.borel_eq_generateFrom_Ioo_rat is a dubious translation:
lean 3 declaration is
  Eq.{1} (MeasurableSpace.{0} Real) (borel.{0} Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace))) (MeasurableSpace.generateFrom.{0} Real (Set.iUnion.{0, 1} (Set.{0} Real) Rat (fun (a : Rat) => Set.iUnion.{0, 1} (Set.{0} Real) Rat (fun (b : Rat) => Set.iUnion.{0, 0} (Set.{0} Real) (LT.lt.{0} Rat Rat.hasLt a b) (fun (h : LT.lt.{0} Rat Rat.hasLt a b) => Singleton.singleton.{0, 0} (Set.{0} Real) (Set.{0} (Set.{0} Real)) (Set.hasSingleton.{0} (Set.{0} Real)) (Set.Ioo.{0} Real Real.preorder ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) Rat Real (HasLiftT.mk.{1, 1} Rat Real (CoeTCₓ.coe.{1, 1} Rat Real (Rat.castCoe.{0} Real Real.hasRatCast))) a) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) Rat Real (HasLiftT.mk.{1, 1} Rat Real (CoeTCₓ.coe.{1, 1} Rat Real (Rat.castCoe.{0} Real Real.hasRatCast))) b)))))))
but is expected to have type
  Eq.{1} (MeasurableSpace.{0} Real) (borel.{0} Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace))) (MeasurableSpace.generateFrom.{0} Real (Set.iUnion.{0, 1} (Set.{0} Real) Rat (fun (a : Rat) => Set.iUnion.{0, 1} (Set.{0} Real) Rat (fun (b : Rat) => Set.iUnion.{0, 0} (Set.{0} Real) (LT.lt.{0} Rat Rat.instLTRat_1 a b) (fun (h : LT.lt.{0} Rat Rat.instLTRat_1 a b) => Singleton.singleton.{0, 0} (Set.{0} Real) (Set.{0} (Set.{0} Real)) (Set.instSingletonSet.{0} (Set.{0} Real)) (Set.Ioo.{0} Real Real.instPreorderReal (Rat.cast.{0} Real Real.ratCast a) (Rat.cast.{0} Real Real.ratCast b)))))))
Case conversion may be inaccurate. Consider using '#align real.borel_eq_generate_from_Ioo_rat Real.borel_eq_generateFrom_Ioo_ratₓ'. -/
/- ./././Mathport/Syntax/Translate/Expr.lean:107:6: warning: expanding binder group (a b) -/
theorem borel_eq_generateFrom_Ioo_rat :
    borel ℝ = generateFrom (⋃ (a : ℚ) (b : ℚ) (h : a < b), {Ioo a b}) :=
  isTopologicalBasis_Ioo_rat.borel_eq_generateFrom
#align real.borel_eq_generate_from_Ioo_rat Real.borel_eq_generateFrom_Ioo_rat

/- warning: real.is_pi_system_Ioo_rat -> Real.isPiSystem_Ioo_rat is a dubious translation:
lean 3 declaration is
  IsPiSystem.{0} Real (Set.iUnion.{0, 1} (Set.{0} Real) Rat (fun (a : Rat) => Set.iUnion.{0, 1} (Set.{0} Real) Rat (fun (b : Rat) => Set.iUnion.{0, 0} (Set.{0} Real) (LT.lt.{0} Rat Rat.hasLt a b) (fun (h : LT.lt.{0} Rat Rat.hasLt a b) => Singleton.singleton.{0, 0} (Set.{0} Real) (Set.{0} (Set.{0} Real)) (Set.hasSingleton.{0} (Set.{0} Real)) (Set.Ioo.{0} Real Real.preorder ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) Rat Real (HasLiftT.mk.{1, 1} Rat Real (CoeTCₓ.coe.{1, 1} Rat Real (Rat.castCoe.{0} Real Real.hasRatCast))) a) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) Rat Real (HasLiftT.mk.{1, 1} Rat Real (CoeTCₓ.coe.{1, 1} Rat Real (Rat.castCoe.{0} Real Real.hasRatCast))) b))))))
but is expected to have type
  IsPiSystem.{0} Real (Set.iUnion.{0, 1} (Set.{0} Real) Rat (fun (a : Rat) => Set.iUnion.{0, 1} (Set.{0} Real) Rat (fun (b : Rat) => Set.iUnion.{0, 0} (Set.{0} Real) (LT.lt.{0} Rat Rat.instLTRat_1 a b) (fun (h : LT.lt.{0} Rat Rat.instLTRat_1 a b) => Singleton.singleton.{0, 0} (Set.{0} Real) (Set.{0} (Set.{0} Real)) (Set.instSingletonSet.{0} (Set.{0} Real)) (Set.Ioo.{0} Real Real.instPreorderReal (Rat.cast.{0} Real Real.ratCast a) (Rat.cast.{0} Real Real.ratCast b))))))
Case conversion may be inaccurate. Consider using '#align real.is_pi_system_Ioo_rat Real.isPiSystem_Ioo_ratₓ'. -/
/- ./././Mathport/Syntax/Translate/Expr.lean:107:6: warning: expanding binder group (a b) -/
theorem isPiSystem_Ioo_rat : @IsPiSystem ℝ (⋃ (a : ℚ) (b : ℚ) (h : a < b), {Ioo a b}) :=
  by
  convert isPiSystem_Ioo (coe : ℚ → ℝ) (coe : ℚ → ℝ)
  ext x
  simp [eq_comm]
#align real.is_pi_system_Ioo_rat Real.isPiSystem_Ioo_rat

/- warning: real.finite_spanning_sets_in_Ioo_rat -> Real.finiteSpanningSetsInIooRat is a dubious translation:
lean 3 declaration is
  forall (μ : MeasureTheory.Measure.{0} Real Real.measurableSpace) [_inst_1 : MeasureTheory.LocallyFiniteMeasure.{0} Real Real.measurableSpace (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) μ], MeasureTheory.Measure.FiniteSpanningSetsIn.{0} Real Real.measurableSpace μ (Set.iUnion.{0, 1} (Set.{0} Real) Rat (fun (a : Rat) => Set.iUnion.{0, 1} (Set.{0} Real) Rat (fun (b : Rat) => Set.iUnion.{0, 0} (Set.{0} Real) (LT.lt.{0} Rat Rat.hasLt a b) (fun (h : LT.lt.{0} Rat Rat.hasLt a b) => Singleton.singleton.{0, 0} (Set.{0} Real) (Set.{0} (Set.{0} Real)) (Set.hasSingleton.{0} (Set.{0} Real)) (Set.Ioo.{0} Real Real.preorder ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) Rat Real (HasLiftT.mk.{1, 1} Rat Real (CoeTCₓ.coe.{1, 1} Rat Real (Rat.castCoe.{0} Real Real.hasRatCast))) a) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) Rat Real (HasLiftT.mk.{1, 1} Rat Real (CoeTCₓ.coe.{1, 1} Rat Real (Rat.castCoe.{0} Real Real.hasRatCast))) b))))))
but is expected to have type
  forall (μ : MeasureTheory.Measure.{0} Real Real.measurableSpace) [_inst_1 : MeasureTheory.LocallyFiniteMeasure.{0} Real Real.measurableSpace (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) μ], MeasureTheory.Measure.FiniteSpanningSetsIn.{0} Real Real.measurableSpace μ (Set.iUnion.{0, 1} (Set.{0} Real) Rat (fun (a : Rat) => Set.iUnion.{0, 1} (Set.{0} Real) Rat (fun (b : Rat) => Set.iUnion.{0, 0} (Set.{0} Real) (LT.lt.{0} Rat Rat.instLTRat_1 a b) (fun (h : LT.lt.{0} Rat Rat.instLTRat_1 a b) => Singleton.singleton.{0, 0} (Set.{0} Real) (Set.{0} (Set.{0} Real)) (Set.instSingletonSet.{0} (Set.{0} Real)) (Set.Ioo.{0} Real Real.instPreorderReal (Rat.cast.{0} Real Real.ratCast a) (Rat.cast.{0} Real Real.ratCast b))))))
Case conversion may be inaccurate. Consider using '#align real.finite_spanning_sets_in_Ioo_rat Real.finiteSpanningSetsInIooRatₓ'. -/
/- ./././Mathport/Syntax/Translate/Expr.lean:107:6: warning: expanding binder group (a b) -/
/-- The intervals `(-(n + 1), (n + 1))` form a finite spanning sets in the set of open intervals
with rational endpoints for a locally finite measure `μ` on `ℝ`. -/
def finiteSpanningSetsInIooRat (μ : Measure ℝ) [LocallyFiniteMeasure μ] :
    μ.FiniteSpanningSetsIn (⋃ (a : ℚ) (b : ℚ) (h : a < b), {Ioo a b})
    where
  Set n := Ioo (-(n + 1)) (n + 1)
  set_mem n := by
    simp only [mem_Union, mem_singleton_iff]
    refine' ⟨-(n + 1 : ℕ), n + 1, _, by simp⟩
    -- TODO: norm_cast fails here?
    exact (neg_nonpos.2 (@Nat.cast_nonneg ℚ _ (n + 1))).trans_lt n.cast_add_one_pos
  Finite n := measure_Ioo_lt_top
  spanning :=
    iUnion_eq_univ_iff.2 fun x =>
      ⟨⌊|x|⌋₊, neg_lt.1 ((neg_le_abs_self x).trans_lt (Nat.lt_floor_add_one _)),
        (le_abs_self x).trans_lt (Nat.lt_floor_add_one _)⟩
#align real.finite_spanning_sets_in_Ioo_rat Real.finiteSpanningSetsInIooRat

/- warning: real.measure_ext_Ioo_rat -> Real.measure_ext_Ioo_rat is a dubious translation:
lean 3 declaration is
  forall {μ : MeasureTheory.Measure.{0} Real Real.measurableSpace} {ν : MeasureTheory.Measure.{0} Real Real.measurableSpace} [_inst_1 : MeasureTheory.LocallyFiniteMeasure.{0} Real Real.measurableSpace (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) μ], (forall (a : Rat) (b : Rat), Eq.{1} ENNReal (coeFn.{1, 1} (MeasureTheory.Measure.{0} Real Real.measurableSpace) (fun (_x : MeasureTheory.Measure.{0} Real Real.measurableSpace) => (Set.{0} Real) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{0} Real Real.measurableSpace) μ (Set.Ioo.{0} Real Real.preorder ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) Rat Real (HasLiftT.mk.{1, 1} Rat Real (CoeTCₓ.coe.{1, 1} Rat Real (Rat.castCoe.{0} Real Real.hasRatCast))) a) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) Rat Real (HasLiftT.mk.{1, 1} Rat Real (CoeTCₓ.coe.{1, 1} Rat Real (Rat.castCoe.{0} Real Real.hasRatCast))) b))) (coeFn.{1, 1} (MeasureTheory.Measure.{0} Real Real.measurableSpace) (fun (_x : MeasureTheory.Measure.{0} Real Real.measurableSpace) => (Set.{0} Real) -> ENNReal) (MeasureTheory.Measure.instCoeFun.{0} Real Real.measurableSpace) ν (Set.Ioo.{0} Real Real.preorder ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) Rat Real (HasLiftT.mk.{1, 1} Rat Real (CoeTCₓ.coe.{1, 1} Rat Real (Rat.castCoe.{0} Real Real.hasRatCast))) a) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) Rat Real (HasLiftT.mk.{1, 1} Rat Real (CoeTCₓ.coe.{1, 1} Rat Real (Rat.castCoe.{0} Real Real.hasRatCast))) b)))) -> (Eq.{1} (MeasureTheory.Measure.{0} Real Real.measurableSpace) μ ν)
but is expected to have type
  forall {μ : MeasureTheory.Measure.{0} Real Real.measurableSpace} {ν : MeasureTheory.Measure.{0} Real Real.measurableSpace} [_inst_1 : MeasureTheory.LocallyFiniteMeasure.{0} Real Real.measurableSpace (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace)) μ], (forall (a : Rat) (b : Rat), Eq.{1} ENNReal (MeasureTheory.OuterMeasure.measureOf.{0} Real (MeasureTheory.Measure.toOuterMeasure.{0} Real Real.measurableSpace μ) (Set.Ioo.{0} Real Real.instPreorderReal (Rat.cast.{0} Real Real.ratCast a) (Rat.cast.{0} Real Real.ratCast b))) (MeasureTheory.OuterMeasure.measureOf.{0} Real (MeasureTheory.Measure.toOuterMeasure.{0} Real Real.measurableSpace ν) (Set.Ioo.{0} Real Real.instPreorderReal (Rat.cast.{0} Real Real.ratCast a) (Rat.cast.{0} Real Real.ratCast b)))) -> (Eq.{1} (MeasureTheory.Measure.{0} Real Real.measurableSpace) μ ν)
Case conversion may be inaccurate. Consider using '#align real.measure_ext_Ioo_rat Real.measure_ext_Ioo_ratₓ'. -/
theorem measure_ext_Ioo_rat {μ ν : Measure ℝ} [LocallyFiniteMeasure μ]
    (h : ∀ a b : ℚ, μ (Ioo a b) = ν (Ioo a b)) : μ = ν :=
  (finiteSpanningSetsInIooRat μ).ext borel_eq_generateFrom_Ioo_rat isPiSystem_Ioo_rat <|
    by
    simp only [mem_Union, mem_singleton_iff]
    rintro _ ⟨a, b, -, rfl⟩
    apply h
#align real.measure_ext_Ioo_rat Real.measure_ext_Ioo_rat

/- warning: real.borel_eq_generate_from_Iio_rat -> Real.borel_eq_generateFrom_Iio_rat is a dubious translation:
lean 3 declaration is
  Eq.{1} (MeasurableSpace.{0} Real) (borel.{0} Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace))) (MeasurableSpace.generateFrom.{0} Real (Set.iUnion.{0, 1} (Set.{0} Real) Rat (fun (a : Rat) => Singleton.singleton.{0, 0} (Set.{0} Real) (Set.{0} (Set.{0} Real)) (Set.hasSingleton.{0} (Set.{0} Real)) (Set.Iio.{0} Real Real.preorder ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) Rat Real (HasLiftT.mk.{1, 1} Rat Real (CoeTCₓ.coe.{1, 1} Rat Real (Rat.castCoe.{0} Real Real.hasRatCast))) a)))))
but is expected to have type
  Eq.{1} (MeasurableSpace.{0} Real) (borel.{0} Real (UniformSpace.toTopologicalSpace.{0} Real (PseudoMetricSpace.toUniformSpace.{0} Real Real.pseudoMetricSpace))) (MeasurableSpace.generateFrom.{0} Real (Set.iUnion.{0, 1} (Set.{0} Real) Rat (fun (a : Rat) => Singleton.singleton.{0, 0} (Set.{0} Real) (Set.{0} (Set.{0} Real)) (Set.instSingletonSet.{0} (Set.{0} Real)) (Set.Iio.{0} Real Real.instPreorderReal (Rat.cast.{0} Real Real.ratCast a)))))
Case conversion may be inaccurate. Consider using '#align real.borel_eq_generate_from_Iio_rat Real.borel_eq_generateFrom_Iio_ratₓ'. -/
theorem borel_eq_generateFrom_Iio_rat : borel ℝ = generateFrom (⋃ a : ℚ, {Iio a}) :=
  by
  let g : MeasurableSpace ℝ := generate_from (⋃ a : ℚ, {Iio a})
  refine' le_antisymm _ _
  · rw [borel_eq_generate_from_Ioo_rat]
    refine' generate_from_le fun t => _
    simp only [mem_Union, mem_singleton_iff]
    rintro ⟨a, b, h, rfl⟩
    rw [(Set.ext fun x => _ : Ioo (a : ℝ) b = (⋃ c > a, Iio cᶜ) ∩ Iio b)]
    · have hg : ∀ q : ℚ, measurable_set[g] (Iio q) := fun q =>
        generate_measurable.basic (Iio q) (by simp)
      refine' @MeasurableSet.inter _ g _ _ _ (hg _)
      refine' @MeasurableSet.biUnion _ _ g _ _ (to_countable _) fun c h => _
      exact @MeasurableSet.compl _ _ g (hg _)
    · suffices x < ↑b → (↑a < x ↔ ∃ i : ℚ, a < i ∧ ↑i ≤ x) by simpa
      refine' fun _ => ⟨fun h => _, fun ⟨i, hai, hix⟩ => (Rat.cast_lt.2 hai).trans_le hix⟩
      rcases exists_rat_btwn h with ⟨c, ac, cx⟩
      exact ⟨c, Rat.cast_lt.1 ac, cx.le⟩
  · refine' MeasurableSpace.generateFrom_le fun _ => _
    simp only [mem_Union, mem_singleton_iff]
    rintro ⟨r, rfl⟩
    exact measurableSet_Iio
#align real.borel_eq_generate_from_Iio_rat Real.borel_eq_generateFrom_Iio_rat

end Real

variable [MeasurableSpace α]

#print measurable_real_toNNReal /-
@[measurability]
theorem measurable_real_toNNReal : Measurable Real.toNNReal :=
  continuous_real_toNNReal.Measurable
#align measurable_real_to_nnreal measurable_real_toNNReal
-/

#print Measurable.real_toNNReal /-
@[measurability]
theorem Measurable.real_toNNReal {f : α → ℝ} (hf : Measurable f) :
    Measurable fun x => Real.toNNReal (f x) :=
  measurable_real_toNNReal.comp hf
#align measurable.real_to_nnreal Measurable.real_toNNReal
-/

#print AEMeasurable.real_toNNReal /-
@[measurability]
theorem AEMeasurable.real_toNNReal {f : α → ℝ} {μ : Measure α} (hf : AEMeasurable f μ) :
    AEMeasurable (fun x => Real.toNNReal (f x)) μ :=
  measurable_real_toNNReal.comp_aemeasurable hf
#align ae_measurable.real_to_nnreal AEMeasurable.real_toNNReal
-/

/- warning: measurable_coe_nnreal_real -> measurable_coe_nnreal_real is a dubious translation:
lean 3 declaration is
  Measurable.{0, 0} NNReal Real NNReal.measurableSpace Real.measurableSpace ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal Real (HasLiftT.mk.{1, 1} NNReal Real (CoeTCₓ.coe.{1, 1} NNReal Real (coeBase.{1, 1} NNReal Real NNReal.Real.hasCoe))))
but is expected to have type
  Measurable.{0, 0} NNReal Real NNReal.measurableSpace Real.measurableSpace NNReal.toReal
Case conversion may be inaccurate. Consider using '#align measurable_coe_nnreal_real measurable_coe_nnreal_realₓ'. -/
@[measurability]
theorem measurable_coe_nnreal_real : Measurable (coe : ℝ≥0 → ℝ) :=
  NNReal.continuous_coe.Measurable
#align measurable_coe_nnreal_real measurable_coe_nnreal_real

/- warning: measurable.coe_nnreal_real -> Measurable.coe_nnreal_real is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_1 : MeasurableSpace.{u1} α] {f : α -> NNReal}, (Measurable.{u1, 0} α NNReal _inst_1 NNReal.measurableSpace f) -> (Measurable.{u1, 0} α Real _inst_1 Real.measurableSpace (fun (x : α) => (fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal Real (HasLiftT.mk.{1, 1} NNReal Real (CoeTCₓ.coe.{1, 1} NNReal Real (coeBase.{1, 1} NNReal Real NNReal.Real.hasCoe))) (f x)))
but is expected to have type
  forall {α : Type.{u1}} [_inst_1 : MeasurableSpace.{u1} α] {f : α -> NNReal}, (Measurable.{u1, 0} α NNReal _inst_1 NNReal.measurableSpace f) -> (Measurable.{u1, 0} α Real _inst_1 Real.measurableSpace (fun (x : α) => NNReal.toReal (f x)))
Case conversion may be inaccurate. Consider using '#align measurable.coe_nnreal_real Measurable.coe_nnreal_realₓ'. -/
@[measurability]
theorem Measurable.coe_nnreal_real {f : α → ℝ≥0} (hf : Measurable f) :
    Measurable fun x => (f x : ℝ) :=
  measurable_coe_nnreal_real.comp hf
#align measurable.coe_nnreal_real Measurable.coe_nnreal_real

/- warning: ae_measurable.coe_nnreal_real -> AEMeasurable.coe_nnreal_real is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_1 : MeasurableSpace.{u1} α] {f : α -> NNReal} {μ : MeasureTheory.Measure.{u1} α _inst_1}, (AEMeasurable.{u1, 0} α NNReal NNReal.measurableSpace _inst_1 f μ) -> (AEMeasurable.{u1, 0} α Real Real.measurableSpace _inst_1 (fun (x : α) => (fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal Real (HasLiftT.mk.{1, 1} NNReal Real (CoeTCₓ.coe.{1, 1} NNReal Real (coeBase.{1, 1} NNReal Real NNReal.Real.hasCoe))) (f x)) μ)
but is expected to have type
  forall {α : Type.{u1}} [_inst_1 : MeasurableSpace.{u1} α] {f : α -> NNReal} {μ : MeasureTheory.Measure.{u1} α _inst_1}, (AEMeasurable.{u1, 0} α NNReal NNReal.measurableSpace _inst_1 f μ) -> (AEMeasurable.{u1, 0} α Real Real.measurableSpace _inst_1 (fun (x : α) => NNReal.toReal (f x)) μ)
Case conversion may be inaccurate. Consider using '#align ae_measurable.coe_nnreal_real AEMeasurable.coe_nnreal_realₓ'. -/
@[measurability]
theorem AEMeasurable.coe_nnreal_real {f : α → ℝ≥0} {μ : Measure α} (hf : AEMeasurable f μ) :
    AEMeasurable (fun x => (f x : ℝ)) μ :=
  measurable_coe_nnreal_real.comp_aemeasurable hf
#align ae_measurable.coe_nnreal_real AEMeasurable.coe_nnreal_real

#print measurable_coe_nnreal_ennreal /-
@[measurability]
theorem measurable_coe_nnreal_ennreal : Measurable (coe : ℝ≥0 → ℝ≥0∞) :=
  ENNReal.continuous_coe.Measurable
#align measurable_coe_nnreal_ennreal measurable_coe_nnreal_ennreal
-/

#print Measurable.coe_nnreal_ennreal /-
@[measurability]
theorem Measurable.coe_nnreal_ennreal {f : α → ℝ≥0} (hf : Measurable f) :
    Measurable fun x => (f x : ℝ≥0∞) :=
  ENNReal.continuous_coe.Measurable.comp hf
#align measurable.coe_nnreal_ennreal Measurable.coe_nnreal_ennreal
-/

#print AEMeasurable.coe_nnreal_ennreal /-
@[measurability]
theorem AEMeasurable.coe_nnreal_ennreal {f : α → ℝ≥0} {μ : Measure α} (hf : AEMeasurable f μ) :
    AEMeasurable (fun x => (f x : ℝ≥0∞)) μ :=
  ENNReal.continuous_coe.Measurable.comp_aemeasurable hf
#align ae_measurable.coe_nnreal_ennreal AEMeasurable.coe_nnreal_ennreal
-/

#print Measurable.ennreal_ofReal /-
@[measurability]
theorem Measurable.ennreal_ofReal {f : α → ℝ} (hf : Measurable f) :
    Measurable fun x => ENNReal.ofReal (f x) :=
  ENNReal.continuous_ofReal.Measurable.comp hf
#align measurable.ennreal_of_real Measurable.ennreal_ofReal
-/

/- warning: measurable_coe_nnreal_real_iff -> measurable_coe_nnreal_real_iff is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_1 : MeasurableSpace.{u1} α] {f : α -> NNReal}, Iff (Measurable.{u1, 0} α Real _inst_1 Real.measurableSpace (fun (x : α) => (fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal Real (HasLiftT.mk.{1, 1} NNReal Real (CoeTCₓ.coe.{1, 1} NNReal Real (coeBase.{1, 1} NNReal Real NNReal.Real.hasCoe))) (f x))) (Measurable.{u1, 0} α NNReal _inst_1 NNReal.measurableSpace f)
but is expected to have type
  forall {α : Type.{u1}} [_inst_1 : MeasurableSpace.{u1} α] {f : α -> NNReal}, Iff (Measurable.{u1, 0} α Real _inst_1 Real.measurableSpace (fun (x : α) => NNReal.toReal (f x))) (Measurable.{u1, 0} α NNReal _inst_1 NNReal.measurableSpace f)
Case conversion may be inaccurate. Consider using '#align measurable_coe_nnreal_real_iff measurable_coe_nnreal_real_iffₓ'. -/
@[simp, norm_cast]
theorem measurable_coe_nnreal_real_iff {f : α → ℝ≥0} :
    Measurable (fun x => f x : α → ℝ) ↔ Measurable f :=
  ⟨fun h => by simpa only [Real.toNNReal_coe] using h.real_to_nnreal, Measurable.coe_nnreal_real⟩
#align measurable_coe_nnreal_real_iff measurable_coe_nnreal_real_iff

/- warning: ae_measurable_coe_nnreal_real_iff -> aEMeasurable_coe_nnreal_real_iff is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_1 : MeasurableSpace.{u1} α] {f : α -> NNReal} {μ : MeasureTheory.Measure.{u1} α _inst_1}, Iff (AEMeasurable.{u1, 0} α Real Real.measurableSpace _inst_1 (fun (x : α) => (fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal Real (HasLiftT.mk.{1, 1} NNReal Real (CoeTCₓ.coe.{1, 1} NNReal Real (coeBase.{1, 1} NNReal Real NNReal.Real.hasCoe))) (f x)) μ) (AEMeasurable.{u1, 0} α NNReal NNReal.measurableSpace _inst_1 f μ)
but is expected to have type
  forall {α : Type.{u1}} [_inst_1 : MeasurableSpace.{u1} α] {f : α -> NNReal} {μ : MeasureTheory.Measure.{u1} α _inst_1}, Iff (AEMeasurable.{u1, 0} α Real Real.measurableSpace _inst_1 (fun (x : α) => NNReal.toReal (f x)) μ) (AEMeasurable.{u1, 0} α NNReal NNReal.measurableSpace _inst_1 f μ)
Case conversion may be inaccurate. Consider using '#align ae_measurable_coe_nnreal_real_iff aEMeasurable_coe_nnreal_real_iffₓ'. -/
@[simp, norm_cast]
theorem aEMeasurable_coe_nnreal_real_iff {f : α → ℝ≥0} {μ : Measure α} :
    AEMeasurable (fun x => f x : α → ℝ) μ ↔ AEMeasurable f μ :=
  ⟨fun h => by simpa only [Real.toNNReal_coe] using h.real_to_nnreal, AEMeasurable.coe_nnreal_real⟩
#align ae_measurable_coe_nnreal_real_iff aEMeasurable_coe_nnreal_real_iff

/- warning: measurable_equiv.ennreal_equiv_nnreal -> MeasurableEquiv.ennrealEquivNNReal is a dubious translation:
lean 3 declaration is
  MeasurableEquiv.{0, 0} (coeSort.{1, 2} (Set.{0} ENNReal) Type (Set.hasCoeToSort.{0} ENNReal) (setOf.{0} ENNReal (fun (r : ENNReal) => Ne.{1} ENNReal r (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))))) NNReal (Subtype.instMeasurableSpace.{0} ENNReal (fun (x : ENNReal) => Membership.Mem.{0, 0} ENNReal (Set.{0} ENNReal) (Set.hasMem.{0} ENNReal) x (setOf.{0} ENNReal (fun (r : ENNReal) => Ne.{1} ENNReal r (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))))) ENNReal.measurableSpace) NNReal.measurableSpace
but is expected to have type
  MeasurableEquiv.{0, 0} (Set.Elem.{0} ENNReal (setOf.{0} ENNReal (fun (r : ENNReal) => Ne.{1} ENNReal r (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))))) NNReal (Subtype.instMeasurableSpace.{0} ENNReal (fun (x : ENNReal) => Membership.mem.{0, 0} ENNReal (Set.{0} ENNReal) (Set.instMembershipSet.{0} ENNReal) x (setOf.{0} ENNReal (fun (r : ENNReal) => Ne.{1} ENNReal r (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))))) ENNReal.measurableSpace) NNReal.measurableSpace
Case conversion may be inaccurate. Consider using '#align measurable_equiv.ennreal_equiv_nnreal MeasurableEquiv.ennrealEquivNNRealₓ'. -/
/-- The set of finite `ℝ≥0∞` numbers is `measurable_equiv` to `ℝ≥0`. -/
def MeasurableEquiv.ennrealEquivNNReal : { r : ℝ≥0∞ | r ≠ ∞ } ≃ᵐ ℝ≥0 :=
  ENNReal.neTopHomeomorphNNReal.toMeasurableEquiv
#align measurable_equiv.ennreal_equiv_nnreal MeasurableEquiv.ennrealEquivNNReal

namespace ENNReal

#print ENNReal.measurable_of_measurable_nnreal /-
theorem measurable_of_measurable_nnreal {f : ℝ≥0∞ → α} (h : Measurable fun p : ℝ≥0 => f p) :
    Measurable f :=
  measurable_of_measurable_on_compl_singleton ∞
    (MeasurableEquiv.ennrealEquivNNReal.symm.measurable_comp_iff.1 h)
#align ennreal.measurable_of_measurable_nnreal ENNReal.measurable_of_measurable_nnreal
-/

#print ENNReal.ennrealEquivSum /-
/-- `ℝ≥0∞` is `measurable_equiv` to `ℝ≥0 ⊕ unit`. -/
def ennrealEquivSum : ℝ≥0∞ ≃ᵐ Sum ℝ≥0 Unit :=
  {
    Equiv.optionEquivSumPUnit
      ℝ≥0 with
    measurable_to_fun := measurable_of_measurable_nnreal measurable_inl
    measurable_inv_fun :=
      measurable_sum measurable_coe_nnreal_ennreal (@measurable_const ℝ≥0∞ Unit _ _ ∞) }
#align ennreal.ennreal_equiv_sum ENNReal.ennrealEquivSum
-/

open Function (uncurry)

/- warning: ennreal.measurable_of_measurable_nnreal_prod -> ENNReal.measurable_of_measurable_nnreal_prod is a dubious translation:
lean 3 declaration is
  forall {β : Type.{u1}} {γ : Type.{u2}} [_inst_2 : MeasurableSpace.{u1} β] [_inst_3 : MeasurableSpace.{u2} γ] {f : (Prod.{0, u1} ENNReal β) -> γ}, (Measurable.{u1, u2} (Prod.{0, u1} NNReal β) γ (Prod.instMeasurableSpace.{0, u1} NNReal β NNReal.measurableSpace _inst_2) _inst_3 (fun (p : Prod.{0, u1} NNReal β) => f (Prod.mk.{0, u1} ENNReal β ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTCₓ.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) (Prod.fst.{0, u1} NNReal β p)) (Prod.snd.{0, u1} NNReal β p)))) -> (Measurable.{u1, u2} β γ _inst_2 _inst_3 (fun (x : β) => f (Prod.mk.{0, u1} ENNReal β (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) x))) -> (Measurable.{u1, u2} (Prod.{0, u1} ENNReal β) γ (Prod.instMeasurableSpace.{0, u1} ENNReal β ENNReal.measurableSpace _inst_2) _inst_3 f)
but is expected to have type
  forall {β : Type.{u2}} {γ : Type.{u1}} [_inst_2 : MeasurableSpace.{u2} β] [_inst_3 : MeasurableSpace.{u1} γ] {f : (Prod.{0, u2} ENNReal β) -> γ}, (Measurable.{u2, u1} (Prod.{0, u2} NNReal β) γ (Prod.instMeasurableSpace.{0, u2} NNReal β NNReal.measurableSpace _inst_2) _inst_3 (fun (p : Prod.{0, u2} NNReal β) => f (Prod.mk.{0, u2} ENNReal β (ENNReal.some (Prod.fst.{0, u2} NNReal β p)) (Prod.snd.{0, u2} NNReal β p)))) -> (Measurable.{u2, u1} β γ _inst_2 _inst_3 (fun (x : β) => f (Prod.mk.{0, u2} ENNReal β (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))) x))) -> (Measurable.{u2, u1} (Prod.{0, u2} ENNReal β) γ (Prod.instMeasurableSpace.{0, u2} ENNReal β ENNReal.measurableSpace _inst_2) _inst_3 f)
Case conversion may be inaccurate. Consider using '#align ennreal.measurable_of_measurable_nnreal_prod ENNReal.measurable_of_measurable_nnreal_prodₓ'. -/
theorem measurable_of_measurable_nnreal_prod [MeasurableSpace β] [MeasurableSpace γ]
    {f : ℝ≥0∞ × β → γ} (H₁ : Measurable fun p : ℝ≥0 × β => f (p.1, p.2))
    (H₂ : Measurable fun x => f (∞, x)) : Measurable f :=
  let e : ℝ≥0∞ × β ≃ᵐ Sum (ℝ≥0 × β) (Unit × β) :=
    (ennrealEquivSum.prodCongr (MeasurableEquiv.refl β)).trans
      (MeasurableEquiv.sumProdDistrib _ _ _)
  e.symm.measurable_comp_iff.1 <| measurable_sum H₁ (H₂.comp measurable_id.snd)
#align ennreal.measurable_of_measurable_nnreal_prod ENNReal.measurable_of_measurable_nnreal_prod

/- warning: ennreal.measurable_of_measurable_nnreal_nnreal -> ENNReal.measurable_of_measurable_nnreal_nnreal is a dubious translation:
lean 3 declaration is
  forall {β : Type.{u1}} [_inst_2 : MeasurableSpace.{u1} β] {f : (Prod.{0, 0} ENNReal ENNReal) -> β}, (Measurable.{0, u1} (Prod.{0, 0} NNReal NNReal) β (Prod.instMeasurableSpace.{0, 0} NNReal NNReal NNReal.measurableSpace NNReal.measurableSpace) _inst_2 (fun (p : Prod.{0, 0} NNReal NNReal) => f (Prod.mk.{0, 0} ENNReal ENNReal ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTCₓ.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) (Prod.fst.{0, 0} NNReal NNReal p)) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTCₓ.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) (Prod.snd.{0, 0} NNReal NNReal p))))) -> (Measurable.{0, u1} NNReal β NNReal.measurableSpace _inst_2 (fun (r : NNReal) => f (Prod.mk.{0, 0} ENNReal ENNReal (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder))) ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTCₓ.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) r)))) -> (Measurable.{0, u1} NNReal β NNReal.measurableSpace _inst_2 (fun (r : NNReal) => f (Prod.mk.{0, 0} ENNReal ENNReal ((fun (a : Type) (b : Type) [self : HasLiftT.{1, 1} a b] => self.0) NNReal ENNReal (HasLiftT.mk.{1, 1} NNReal ENNReal (CoeTCₓ.coe.{1, 1} NNReal ENNReal (coeBase.{1, 1} NNReal ENNReal ENNReal.hasCoe))) r) (Top.top.{0} ENNReal (CompleteLattice.toHasTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.completeLinearOrder)))))) -> (Measurable.{0, u1} (Prod.{0, 0} ENNReal ENNReal) β (Prod.instMeasurableSpace.{0, 0} ENNReal ENNReal ENNReal.measurableSpace ENNReal.measurableSpace) _inst_2 f)
but is expected to have type
  forall {β : Type.{u1}} [_inst_2 : MeasurableSpace.{u1} β] {f : (Prod.{0, 0} ENNReal ENNReal) -> β}, (Measurable.{0, u1} (Prod.{0, 0} NNReal NNReal) β (Prod.instMeasurableSpace.{0, 0} NNReal NNReal NNReal.measurableSpace NNReal.measurableSpace) _inst_2 (fun (p : Prod.{0, 0} NNReal NNReal) => f (Prod.mk.{0, 0} ENNReal ENNReal (ENNReal.some (Prod.fst.{0, 0} NNReal NNReal p)) (ENNReal.some (Prod.snd.{0, 0} NNReal NNReal p))))) -> (Measurable.{0, u1} NNReal β NNReal.measurableSpace _inst_2 (fun (r : NNReal) => f (Prod.mk.{0, 0} ENNReal ENNReal (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal))) (ENNReal.some r)))) -> (Measurable.{0, u1} NNReal β NNReal.measurableSpace _inst_2 (fun (r : NNReal) => f (Prod.mk.{0, 0} ENNReal ENNReal (ENNReal.some r) (Top.top.{0} ENNReal (CompleteLattice.toTop.{0} ENNReal (CompleteLinearOrder.toCompleteLattice.{0} ENNReal ENNReal.instCompleteLinearOrderENNReal)))))) -> (Measurable.{0, u1} (Prod.{0, 0} ENNReal ENNReal) β (Prod.instMeasurableSpace.{0, 0} ENNReal ENNReal ENNReal.measurableSpace ENNReal.measurableSpace) _inst_2 f)
Case conversion may be inaccurate. Consider using '#align ennreal.measurable_of_measurable_nnreal_nnreal ENNReal.measurable_of_measurable_nnreal_nnrealₓ'. -/
theorem measurable_of_measurable_nnreal_nnreal [MeasurableSpace β] {f : ℝ≥0∞ × ℝ≥0∞ → β}
    (h₁ : Measurable fun p : ℝ≥0 × ℝ≥0 => f (p.1, p.2)) (h₂ : Measurable fun r : ℝ≥0 => f (∞, r))
    (h₃ : Measurable fun r : ℝ≥0 => f (r, ∞)) : Measurable f :=
  measurable_of_measurable_nnreal_prod
    (measurable_swap_iff.1 <| measurable_of_measurable_nnreal_prod (h₁.comp measurable_swap) h₃)
    (measurable_of_measurable_nnreal h₂)
#align ennreal.measurable_of_measurable_nnreal_nnreal ENNReal.measurable_of_measurable_nnreal_nnreal

#print ENNReal.measurable_ofReal /-
@[measurability]
theorem measurable_ofReal : Measurable ENNReal.ofReal :=
  ENNReal.continuous_ofReal.Measurable
#align ennreal.measurable_of_real ENNReal.measurable_ofReal
-/

#print ENNReal.measurable_toReal /-
@[measurability]
theorem measurable_toReal : Measurable ENNReal.toReal :=
  ENNReal.measurable_of_measurable_nnreal measurable_coe_nnreal_real
#align ennreal.measurable_to_real ENNReal.measurable_toReal
-/

#print ENNReal.measurable_toNNReal /-
@[measurability]
theorem measurable_toNNReal : Measurable ENNReal.toNNReal :=
  ENNReal.measurable_of_measurable_nnreal measurable_id
#align ennreal.measurable_to_nnreal ENNReal.measurable_toNNReal
-/

instance : MeasurableMul₂ ℝ≥0∞ :=
  by
  refine' ⟨measurable_of_measurable_nnreal_nnreal _ _ _⟩
  · simp only [← ENNReal.coe_mul, measurable_mul.coe_nnreal_ennreal]
  · simp only [ENNReal.top_mul', ENNReal.coe_eq_zero]
    exact measurable_const.piecewise (measurable_set_singleton _) measurable_const
  · simp only [ENNReal.mul_top', ENNReal.coe_eq_zero]
    exact measurable_const.piecewise (measurable_set_singleton _) measurable_const

instance : MeasurableSub₂ ℝ≥0∞ :=
  ⟨by
    apply measurable_of_measurable_nnreal_nnreal <;>
      simp [← WithTop.coe_sub, continuous_sub.measurable.coe_nnreal_ennreal]⟩

instance : MeasurableInv ℝ≥0∞ :=
  ⟨continuous_inv.Measurable⟩

end ENNReal

#print Measurable.ennreal_toNNReal /-
@[measurability]
theorem Measurable.ennreal_toNNReal {f : α → ℝ≥0∞} (hf : Measurable f) :
    Measurable fun x => (f x).toNNReal :=
  ENNReal.measurable_toNNReal.comp hf
#align measurable.ennreal_to_nnreal Measurable.ennreal_toNNReal
-/

#print AEMeasurable.ennreal_toNNReal /-
@[measurability]
theorem AEMeasurable.ennreal_toNNReal {f : α → ℝ≥0∞} {μ : Measure α} (hf : AEMeasurable f μ) :
    AEMeasurable (fun x => (f x).toNNReal) μ :=
  ENNReal.measurable_toNNReal.comp_aemeasurable hf
#align ae_measurable.ennreal_to_nnreal AEMeasurable.ennreal_toNNReal
-/

#print measurable_coe_nnreal_ennreal_iff /-
@[simp, norm_cast]
theorem measurable_coe_nnreal_ennreal_iff {f : α → ℝ≥0} :
    (Measurable fun x => (f x : ℝ≥0∞)) ↔ Measurable f :=
  ⟨fun h => h.ennreal_toNNReal, fun h => h.coe_nnreal_ennreal⟩
#align measurable_coe_nnreal_ennreal_iff measurable_coe_nnreal_ennreal_iff
-/

#print aemeasurable_coe_nnreal_ennreal_iff /-
@[simp, norm_cast]
theorem aemeasurable_coe_nnreal_ennreal_iff {f : α → ℝ≥0} {μ : Measure α} :
    AEMeasurable (fun x => (f x : ℝ≥0∞)) μ ↔ AEMeasurable f μ :=
  ⟨fun h => h.ennreal_toNNReal, fun h => h.coe_nnreal_ennreal⟩
#align ae_measurable_coe_nnreal_ennreal_iff aemeasurable_coe_nnreal_ennreal_iff
-/

#print Measurable.ennreal_toReal /-
@[measurability]
theorem Measurable.ennreal_toReal {f : α → ℝ≥0∞} (hf : Measurable f) :
    Measurable fun x => ENNReal.toReal (f x) :=
  ENNReal.measurable_toReal.comp hf
#align measurable.ennreal_to_real Measurable.ennreal_toReal
-/

#print AEMeasurable.ennreal_toReal /-
@[measurability]
theorem AEMeasurable.ennreal_toReal {f : α → ℝ≥0∞} {μ : Measure α} (hf : AEMeasurable f μ) :
    AEMeasurable (fun x => ENNReal.toReal (f x)) μ :=
  ENNReal.measurable_toReal.comp_aemeasurable hf
#align ae_measurable.ennreal_to_real AEMeasurable.ennreal_toReal
-/

/- warning: measurable.ennreal_tsum -> Measurable.ennreal_tsum is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_1 : MeasurableSpace.{u1} α] {ι : Type.{u2}} [_inst_2 : Countable.{succ u2} ι] {f : ι -> α -> ENNReal}, (forall (i : ι), Measurable.{u1, 0} α ENNReal _inst_1 ENNReal.measurableSpace (f i)) -> (Measurable.{u1, 0} α ENNReal _inst_1 ENNReal.measurableSpace (fun (x : α) => tsum.{0, u2} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace ι (fun (i : ι) => f i x)))
but is expected to have type
  forall {α : Type.{u1}} [_inst_1 : MeasurableSpace.{u1} α] {ι : Type.{u2}} [_inst_2 : Countable.{succ u2} ι] {f : ι -> α -> ENNReal}, (forall (i : ι), Measurable.{u1, 0} α ENNReal _inst_1 ENNReal.measurableSpace (f i)) -> (Measurable.{u1, 0} α ENNReal _inst_1 ENNReal.measurableSpace (fun (x : α) => tsum.{0, u2} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal ι (fun (i : ι) => f i x)))
Case conversion may be inaccurate. Consider using '#align measurable.ennreal_tsum Measurable.ennreal_tsumₓ'. -/
/-- note: `ℝ≥0∞` can probably be generalized in a future version of this lemma. -/
@[measurability]
theorem Measurable.ennreal_tsum {ι} [Countable ι] {f : ι → α → ℝ≥0∞} (h : ∀ i, Measurable (f i)) :
    Measurable fun x => ∑' i, f i x :=
  by
  simp_rw [ENNReal.tsum_eq_iSup_sum]
  apply measurable_iSup
  exact fun s => s.measurable_sum fun i _ => h i
#align measurable.ennreal_tsum Measurable.ennreal_tsum

/- warning: measurable.ennreal_tsum' -> Measurable.ennreal_tsum' is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_1 : MeasurableSpace.{u1} α] {ι : Type.{u2}} [_inst_2 : Countable.{succ u2} ι] {f : ι -> α -> ENNReal}, (forall (i : ι), Measurable.{u1, 0} α ENNReal _inst_1 ENNReal.measurableSpace (f i)) -> (Measurable.{u1, 0} α ENNReal _inst_1 ENNReal.measurableSpace (tsum.{u1, u2} (α -> ENNReal) (Pi.addCommMonoid.{u1, 0} α (fun (ᾰ : α) => ENNReal) (fun (i : α) => OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring))))) (Pi.topologicalSpace.{u1, 0} α (fun (ᾰ : α) => ENNReal) (fun (a : α) => ENNReal.topologicalSpace)) ι (fun (i : ι) => f i)))
but is expected to have type
  forall {α : Type.{u1}} [_inst_1 : MeasurableSpace.{u1} α] {ι : Type.{u2}} [_inst_2 : Countable.{succ u2} ι] {f : ι -> α -> ENNReal}, (forall (i : ι), Measurable.{u1, 0} α ENNReal _inst_1 ENNReal.measurableSpace (f i)) -> (Measurable.{u1, 0} α ENNReal _inst_1 ENNReal.measurableSpace (tsum.{u1, u2} (α -> ENNReal) (Pi.addCommMonoid.{u1, 0} α (fun (ᾰ : α) => ENNReal) (fun (i : α) => LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal))) (Pi.topologicalSpace.{u1, 0} α (fun (ᾰ : α) => ENNReal) (fun (a : α) => ENNReal.instTopologicalSpaceENNReal)) ι (fun (i : ι) => f i)))
Case conversion may be inaccurate. Consider using '#align measurable.ennreal_tsum' Measurable.ennreal_tsum'ₓ'. -/
@[measurability]
theorem Measurable.ennreal_tsum' {ι} [Countable ι] {f : ι → α → ℝ≥0∞} (h : ∀ i, Measurable (f i)) :
    Measurable (∑' i, f i) := by
  convert Measurable.ennreal_tsum h
  ext1 x
  exact tsum_apply (Pi.summable.2 fun _ => ENNReal.summable)
#align measurable.ennreal_tsum' Measurable.ennreal_tsum'

/- warning: measurable.nnreal_tsum -> Measurable.nnreal_tsum is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_1 : MeasurableSpace.{u1} α] {ι : Type.{u2}} [_inst_2 : Countable.{succ u2} ι] {f : ι -> α -> NNReal}, (forall (i : ι), Measurable.{u1, 0} α NNReal _inst_1 NNReal.measurableSpace (f i)) -> (Measurable.{u1, 0} α NNReal _inst_1 NNReal.measurableSpace (fun (x : α) => tsum.{0, u2} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace ι (fun (i : ι) => f i x)))
but is expected to have type
  forall {α : Type.{u1}} [_inst_1 : MeasurableSpace.{u1} α] {ι : Type.{u2}} [_inst_2 : Countable.{succ u2} ι] {f : ι -> α -> NNReal}, (forall (i : ι), Measurable.{u1, 0} α NNReal _inst_1 NNReal.measurableSpace (f i)) -> (Measurable.{u1, 0} α NNReal _inst_1 NNReal.measurableSpace (fun (x : α) => tsum.{0, u2} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal ι (fun (i : ι) => f i x)))
Case conversion may be inaccurate. Consider using '#align measurable.nnreal_tsum Measurable.nnreal_tsumₓ'. -/
@[measurability]
theorem Measurable.nnreal_tsum {ι} [Countable ι] {f : ι → α → ℝ≥0} (h : ∀ i, Measurable (f i)) :
    Measurable fun x => ∑' i, f i x :=
  by
  simp_rw [NNReal.tsum_eq_toNNReal_tsum]
  exact (Measurable.ennreal_tsum fun i => (h i).coe_nnreal_ennreal).ennreal_toNNReal
#align measurable.nnreal_tsum Measurable.nnreal_tsum

/- warning: ae_measurable.ennreal_tsum -> AEMeasurable.ennreal_tsum is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_1 : MeasurableSpace.{u1} α] {ι : Type.{u2}} [_inst_2 : Countable.{succ u2} ι] {f : ι -> α -> ENNReal} {μ : MeasureTheory.Measure.{u1} α _inst_1}, (forall (i : ι), AEMeasurable.{u1, 0} α ENNReal ENNReal.measurableSpace _inst_1 (f i) μ) -> (AEMeasurable.{u1, 0} α ENNReal ENNReal.measurableSpace _inst_1 (fun (x : α) => tsum.{0, u2} ENNReal (OrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (OrderedSemiring.toOrderedAddCommMonoid.{0} ENNReal (OrderedCommSemiring.toOrderedSemiring.{0} ENNReal (CanonicallyOrderedCommSemiring.toOrderedCommSemiring.{0} ENNReal ENNReal.canonicallyOrderedCommSemiring)))) ENNReal.topologicalSpace ι (fun (i : ι) => f i x)) μ)
but is expected to have type
  forall {α : Type.{u1}} [_inst_1 : MeasurableSpace.{u1} α] {ι : Type.{u2}} [_inst_2 : Countable.{succ u2} ι] {f : ι -> α -> ENNReal} {μ : MeasureTheory.Measure.{u1} α _inst_1}, (forall (i : ι), AEMeasurable.{u1, 0} α ENNReal ENNReal.measurableSpace _inst_1 (f i) μ) -> (AEMeasurable.{u1, 0} α ENNReal ENNReal.measurableSpace _inst_1 (fun (x : α) => tsum.{0, u2} ENNReal (LinearOrderedAddCommMonoid.toAddCommMonoid.{0} ENNReal (LinearOrderedAddCommMonoidWithTop.toLinearOrderedAddCommMonoid.{0} ENNReal ENNReal.instLinearOrderedAddCommMonoidWithTopENNReal)) ENNReal.instTopologicalSpaceENNReal ι (fun (i : ι) => f i x)) μ)
Case conversion may be inaccurate. Consider using '#align ae_measurable.ennreal_tsum AEMeasurable.ennreal_tsumₓ'. -/
@[measurability]
theorem AEMeasurable.ennreal_tsum {ι} [Countable ι] {f : ι → α → ℝ≥0∞} {μ : Measure α}
    (h : ∀ i, AEMeasurable (f i) μ) : AEMeasurable (fun x => ∑' i, f i x) μ :=
  by
  simp_rw [ENNReal.tsum_eq_iSup_sum]
  apply aemeasurable_iSup
  exact fun s => Finset.aemeasurable_sum s fun i _ => h i
#align ae_measurable.ennreal_tsum AEMeasurable.ennreal_tsum

/- warning: ae_measurable.nnreal_tsum -> AEMeasurable.nnreal_tsum is a dubious translation:
lean 3 declaration is
  forall {α : Type.{u1}} [_inst_2 : MeasurableSpace.{u1} α] {ι : Type.{u2}} [_inst_3 : Countable.{succ u2} ι] {f : ι -> α -> NNReal} {μ : MeasureTheory.Measure.{u1} α _inst_2}, (forall (i : ι), AEMeasurable.{u1, 0} α NNReal NNReal.measurableSpace _inst_2 (f i) μ) -> (AEMeasurable.{u1, 0} α NNReal NNReal.measurableSpace _inst_2 (fun (x : α) => tsum.{0, u2} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal NNReal.strictOrderedSemiring)) NNReal.topologicalSpace ι (fun (i : ι) => f i x)) μ)
but is expected to have type
  forall {α : Type.{u2}} [_inst_2 : MeasurableSpace.{u2} α] {ι : Type.{u1}} [_inst_3 : Countable.{succ u1} ι] {f : ι -> α -> NNReal} {μ : MeasureTheory.Measure.{u2} α _inst_2}, (forall (i : ι), AEMeasurable.{u2, 0} α NNReal NNReal.measurableSpace _inst_2 (f i) μ) -> (AEMeasurable.{u2, 0} α NNReal NNReal.measurableSpace _inst_2 (fun (x : α) => tsum.{0, u1} NNReal (OrderedCancelAddCommMonoid.toAddCommMonoid.{0} NNReal (StrictOrderedSemiring.toOrderedCancelAddCommMonoid.{0} NNReal instNNRealStrictOrderedSemiring)) NNReal.instTopologicalSpaceNNReal ι (fun (i : ι) => f i x)) μ)
Case conversion may be inaccurate. Consider using '#align ae_measurable.nnreal_tsum AEMeasurable.nnreal_tsumₓ'. -/
@[measurability]
theorem AEMeasurable.nnreal_tsum {α : Type _} [MeasurableSpace α] {ι : Type _} [Countable ι]
    {f : ι → α → NNReal} {μ : MeasureTheory.Measure α} (h : ∀ i : ι, AEMeasurable (f i) μ) :
    AEMeasurable (fun x : α => ∑' i : ι, f i x) μ :=
  by
  simp_rw [NNReal.tsum_eq_toNNReal_tsum]
  exact (AEMeasurable.ennreal_tsum fun i => (h i).coe_nnreal_ennreal).ennreal_toNNReal
#align ae_measurable.nnreal_tsum AEMeasurable.nnreal_tsum

#print measurable_coe_real_ereal /-
@[measurability]
theorem measurable_coe_real_ereal : Measurable (coe : ℝ → EReal) :=
  continuous_coe_real_ereal.Measurable
#align measurable_coe_real_ereal measurable_coe_real_ereal
-/

#print Measurable.coe_real_ereal /-
@[measurability]
theorem Measurable.coe_real_ereal {f : α → ℝ} (hf : Measurable f) :
    Measurable fun x => (f x : EReal) :=
  measurable_coe_real_ereal.comp hf
#align measurable.coe_real_ereal Measurable.coe_real_ereal
-/

#print AEMeasurable.coe_real_ereal /-
@[measurability]
theorem AEMeasurable.coe_real_ereal {f : α → ℝ} {μ : Measure α} (hf : AEMeasurable f μ) :
    AEMeasurable (fun x => (f x : EReal)) μ :=
  measurable_coe_real_ereal.comp_aemeasurable hf
#align ae_measurable.coe_real_ereal AEMeasurable.coe_real_ereal
-/

/- warning: measurable_equiv.ereal_equiv_real -> MeasurableEquiv.erealEquivReal is a dubious translation:
lean 3 declaration is
  MeasurableEquiv.{0, 0} (coeSort.{1, 2} (Set.{0} EReal) Type (Set.hasCoeToSort.{0} EReal) (HasCompl.compl.{0} (Set.{0} EReal) (BooleanAlgebra.toHasCompl.{0} (Set.{0} EReal) (Set.booleanAlgebra.{0} EReal)) (Insert.insert.{0, 0} EReal (Set.{0} EReal) (Set.hasInsert.{0} EReal) (Bot.bot.{0} EReal EReal.hasBot) (Singleton.singleton.{0, 0} EReal (Set.{0} EReal) (Set.hasSingleton.{0} EReal) (Top.top.{0} EReal EReal.hasTop))))) Real (Subtype.instMeasurableSpace.{0} EReal (fun (x : EReal) => Membership.Mem.{0, 0} EReal (Set.{0} EReal) (Set.hasMem.{0} EReal) x (HasCompl.compl.{0} (Set.{0} EReal) (BooleanAlgebra.toHasCompl.{0} (Set.{0} EReal) (Set.booleanAlgebra.{0} EReal)) (Insert.insert.{0, 0} EReal (Set.{0} EReal) (Set.hasInsert.{0} EReal) (Bot.bot.{0} EReal EReal.hasBot) (Singleton.singleton.{0, 0} EReal (Set.{0} EReal) (Set.hasSingleton.{0} EReal) (Top.top.{0} EReal EReal.hasTop))))) EReal.measurableSpace) Real.measurableSpace
but is expected to have type
  MeasurableEquiv.{0, 0} (Set.Elem.{0} EReal (HasCompl.compl.{0} (Set.{0} EReal) (BooleanAlgebra.toHasCompl.{0} (Set.{0} EReal) (Set.instBooleanAlgebraSet.{0} EReal)) (Insert.insert.{0, 0} EReal (Set.{0} EReal) (Set.instInsertSet.{0} EReal) (Bot.bot.{0} EReal instERealBot) (Singleton.singleton.{0, 0} EReal (Set.{0} EReal) (Set.instSingletonSet.{0} EReal) (Top.top.{0} EReal EReal.instTopEReal))))) Real (Subtype.instMeasurableSpace.{0} EReal (fun (x : EReal) => Membership.mem.{0, 0} EReal (Set.{0} EReal) (Set.instMembershipSet.{0} EReal) x (HasCompl.compl.{0} (Set.{0} EReal) (BooleanAlgebra.toHasCompl.{0} (Set.{0} EReal) (Set.instBooleanAlgebraSet.{0} EReal)) (Insert.insert.{0, 0} EReal (Set.{0} EReal) (Set.instInsertSet.{0} EReal) (Bot.bot.{0} EReal instERealBot) (Singleton.singleton.{0, 0} EReal (Set.{0} EReal) (Set.instSingletonSet.{0} EReal) (Top.top.{0} EReal EReal.instTopEReal))))) EReal.measurableSpace) Real.measurableSpace
Case conversion may be inaccurate. Consider using '#align measurable_equiv.ereal_equiv_real MeasurableEquiv.erealEquivRealₓ'. -/
/-- The set of finite `ereal` numbers is `measurable_equiv` to `ℝ`. -/
def MeasurableEquiv.erealEquivReal : ({⊥, ⊤}ᶜ : Set EReal) ≃ᵐ ℝ :=
  EReal.neBotTopHomeomorphReal.toMeasurableEquiv
#align measurable_equiv.ereal_equiv_real MeasurableEquiv.erealEquivReal

#print EReal.measurable_of_measurable_real /-
theorem EReal.measurable_of_measurable_real {f : EReal → α} (h : Measurable fun p : ℝ => f p) :
    Measurable f :=
  measurable_of_measurable_on_compl_finite {⊥, ⊤} (by simp)
    (MeasurableEquiv.erealEquivReal.symm.measurable_comp_iff.1 h)
#align ereal.measurable_of_measurable_real EReal.measurable_of_measurable_real
-/

#print measurable_ereal_toReal /-
@[measurability]
theorem measurable_ereal_toReal : Measurable EReal.toReal :=
  EReal.measurable_of_measurable_real (by simpa using measurable_id)
#align measurable_ereal_to_real measurable_ereal_toReal
-/

#print Measurable.ereal_toReal /-
@[measurability]
theorem Measurable.ereal_toReal {f : α → EReal} (hf : Measurable f) :
    Measurable fun x => (f x).toReal :=
  measurable_ereal_toReal.comp hf
#align measurable.ereal_to_real Measurable.ereal_toReal
-/

#print AEMeasurable.ereal_toReal /-
@[measurability]
theorem AEMeasurable.ereal_toReal {f : α → EReal} {μ : Measure α} (hf : AEMeasurable f μ) :
    AEMeasurable (fun x => (f x).toReal) μ :=
  measurable_ereal_toReal.comp_aemeasurable hf
#align ae_measurable.ereal_to_real AEMeasurable.ereal_toReal
-/

#print measurable_coe_ennreal_ereal /-
@[measurability]
theorem measurable_coe_ennreal_ereal : Measurable (coe : ℝ≥0∞ → EReal) :=
  continuous_coe_ennreal_ereal.Measurable
#align measurable_coe_ennreal_ereal measurable_coe_ennreal_ereal
-/

#print Measurable.coe_ereal_ennreal /-
@[measurability]
theorem Measurable.coe_ereal_ennreal {f : α → ℝ≥0∞} (hf : Measurable f) :
    Measurable fun x => (f x : EReal) :=
  measurable_coe_ennreal_ereal.comp hf
#align measurable.coe_ereal_ennreal Measurable.coe_ereal_ennreal
-/

#print AEMeasurable.coe_ereal_ennreal /-
@[measurability]
theorem AEMeasurable.coe_ereal_ennreal {f : α → ℝ≥0∞} {μ : Measure α} (hf : AEMeasurable f μ) :
    AEMeasurable (fun x => (f x : EReal)) μ :=
  measurable_coe_ennreal_ereal.comp_aemeasurable hf
#align ae_measurable.coe_ereal_ennreal AEMeasurable.coe_ereal_ennreal
-/

section NormedAddCommGroup

variable [NormedAddCommGroup α] [OpensMeasurableSpace α] [MeasurableSpace β]

#print measurable_norm /-
@[measurability]
theorem measurable_norm : Measurable (norm : α → ℝ) :=
  continuous_norm.Measurable
#align measurable_norm measurable_norm
-/

#print Measurable.norm /-
@[measurability]
theorem Measurable.norm {f : β → α} (hf : Measurable f) : Measurable fun a => norm (f a) :=
  measurable_norm.comp hf
#align measurable.norm Measurable.norm
-/

#print AEMeasurable.norm /-
@[measurability]
theorem AEMeasurable.norm {f : β → α} {μ : Measure β} (hf : AEMeasurable f μ) :
    AEMeasurable (fun a => norm (f a)) μ :=
  measurable_norm.comp_aemeasurable hf
#align ae_measurable.norm AEMeasurable.norm
-/

#print measurable_nnnorm /-
@[measurability]
theorem measurable_nnnorm : Measurable (nnnorm : α → ℝ≥0) :=
  continuous_nnnorm.Measurable
#align measurable_nnnorm measurable_nnnorm
-/

#print Measurable.nnnorm /-
@[measurability]
theorem Measurable.nnnorm {f : β → α} (hf : Measurable f) : Measurable fun a => ‖f a‖₊ :=
  measurable_nnnorm.comp hf
#align measurable.nnnorm Measurable.nnnorm
-/

#print AEMeasurable.nnnorm /-
@[measurability]
theorem AEMeasurable.nnnorm {f : β → α} {μ : Measure β} (hf : AEMeasurable f μ) :
    AEMeasurable (fun a => ‖f a‖₊) μ :=
  measurable_nnnorm.comp_aemeasurable hf
#align ae_measurable.nnnorm AEMeasurable.nnnorm
-/

#print measurable_ennnorm /-
@[measurability]
theorem measurable_ennnorm : Measurable fun x : α => (‖x‖₊ : ℝ≥0∞) :=
  measurable_nnnorm.coe_nnreal_ennreal
#align measurable_ennnorm measurable_ennnorm
-/

#print Measurable.ennnorm /-
@[measurability]
theorem Measurable.ennnorm {f : β → α} (hf : Measurable f) : Measurable fun a => (‖f a‖₊ : ℝ≥0∞) :=
  hf.nnnorm.coe_nnreal_ennreal
#align measurable.ennnorm Measurable.ennnorm
-/

#print AEMeasurable.ennnorm /-
@[measurability]
theorem AEMeasurable.ennnorm {f : β → α} {μ : Measure β} (hf : AEMeasurable f μ) :
    AEMeasurable (fun a => (‖f a‖₊ : ℝ≥0∞)) μ :=
  measurable_ennnorm.comp_aemeasurable hf
#align ae_measurable.ennnorm AEMeasurable.ennnorm
-/

end NormedAddCommGroup

