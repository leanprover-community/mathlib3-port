/-
Copyright (c) 2022 Jo√´l Riou. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jo√´l Riou

! This file was ported from Lean 3 source module algebraic_topology.dold_kan.equivalence_additive
! leanprover-community/mathlib commit ba2245edf0c8bb155f1569fd9b9492a9b384cde6
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.AlgebraicTopology.DoldKan.NCompGamma

/-! The Dold-Kan equivalence for additive categories.

This file defines `preadditive.dold_kan.equivalence` which is the equivalence
of categories `karoubi (simplicial_object C) ‚âå karoubi (chain_complex C ‚Ñï)`.

-/


noncomputable section

open
  CategoryTheory CategoryTheory.Category CategoryTheory.Limits CategoryTheory.Idempotents AlgebraicTopology.DoldKan

variable {C : Type _} [Category C] [Preadditive C]

namespace CategoryTheory

namespace Preadditive

namespace DoldKan

/-- The functor `karoubi (simplicial_object C) ‚•§ karoubi (chain_complex C ‚Ñï)` of
the Dold-Kan equivalence for additive categories. -/
@[simps]
def n : Karoubi (SimplicialObject C) ‚•§ Karoubi (ChainComplex C ‚Ñï) :=
  N‚ÇÇ
#align category_theory.preadditive.dold_kan.N CategoryTheory.Preadditive.DoldKan.n

variable [HasFiniteCoproducts C]

/-- The inverse functor `karoubi (chain_complex C ‚Ñï) ‚•§ karoubi (simplicial_object C)` of
the Dold-Kan equivalence for additive categories. -/
@[simps]
def Œì : Karoubi (ChainComplex C ‚Ñï) ‚•§ Karoubi (SimplicialObject C) :=
  Œì‚ÇÇ
#align category_theory.preadditive.dold_kan.Œì CategoryTheory.Preadditive.DoldKan.Œì

/-- The Dold-Kan equivalence `karoubi (simplicial_object C) ‚âå karoubi (chain_complex C ‚Ñï)`
for additive categories. -/
@[simps]
def equivalence :
    Karoubi (SimplicialObject C) ‚âå
      Karoubi (ChainComplex C ‚Ñï) where 
  Functor := n
  inverse := Œì
  unitIso := Œì‚ÇÇN‚ÇÇ
  counitIso := n‚ÇÇŒì‚ÇÇ
  functor_unit_iso_comp' P := by 
    let Œ± := N.map_iso (Œì‚ÇÇN‚ÇÇ.app P)
    let Œ≤ := N‚ÇÇŒì‚ÇÇ.app (N.obj P)
    symm
    change ùüô _ = Œ±.hom ‚â´ Œ≤.hom
    rw [‚Üê iso.inv_comp_eq, comp_id, ‚Üê comp_id Œ≤.hom, ‚Üê iso.inv_comp_eq]
    exact AlgebraicTopology.DoldKan.identity_N‚ÇÇ_objectwise P
#align
  category_theory.preadditive.dold_kan.equivalence CategoryTheory.Preadditive.DoldKan.equivalence

end DoldKan

end Preadditive

end CategoryTheory

