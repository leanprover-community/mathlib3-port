/-
Copyright (c) 2022 Riccardo Brasca. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Riccardo Brasca

! This file was ported from Lean 3 source module ring_theory.polynomial.eisenstein
! leanprover-community/mathlib commit 26f081a2fb920140ed5bc5cc5344e84bcc7cb2b2
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.RingTheory.EisensteinCriterion
import Mathbin.RingTheory.IntegrallyClosed
import Mathbin.RingTheory.Norm
import Mathbin.RingTheory.Polynomial.Cyclotomic.Basic

/-!
# Eisenstein polynomials
Given an ideal `𝓟` of a commutative semiring `R`, we say that a polynomial `f : R[X]` is
*Eisenstein at `𝓟`* if `f.leading_coeff ∉ 𝓟`, `∀ n, n < f.nat_degree → f.coeff n ∈ 𝓟` and
`f.coeff 0 ∉ 𝓟 ^ 2`. In this file we gather miscellaneous results about Eisenstein polynomials.

## Main definitions
* `polynomial.is_eisenstein_at f 𝓟`: the property of being Eisenstein at `𝓟`.

## Main results
* `polynomial.is_eisenstein_at.irreducible`: if a primitive `f` satisfies `f.is_eisenstein_at 𝓟`,
  where `𝓟.is_prime`, then `f` is irreducible.
* `mem_adjoin_of_smul_prime_pow_smul_of_minpoly_is_eiseinstein_at`: let `K` be the field of fraction
  of an integrally closed domain `R` and let `L` be a separable extension of `K`, generated by an
  integral power basis `B` such that the minimal polynomial of `B.gen` is Eisenstein at `p`. Given
  `z : L` integral over `R`, if `p ^ n • z ∈ adjoin R {B.gen}`, then `z ∈ adjoin R {B.gen}`.
  Together with `algebra.discr_mul_is_integral_mem_adjoin` this result often allows to compute the
  ring of integers of `L`.

## Implementation details
We also define a notion `is_weakly_eisenstein_at` requiring only that
`∀ n < f.nat_degree → f.coeff n ∈ 𝓟`. This makes certain results slightly more general and it is
useful since it is sometimes better behaved (for example it is stable under `polynomial.map`).

-/


universe u v w z

variable {R : Type u}

open Ideal Algebra Finset

open BigOperators Polynomial

namespace Polynomial

/-- Given an ideal `𝓟` of a commutative semiring `R`, we say that a polynomial `f : R[X]`
is *weakly Eisenstein at `𝓟`* if `∀ n, n < f.nat_degree → f.coeff n ∈ 𝓟`. -/
@[mk_iff]
structure IsWeaklyEisensteinAt [CommSemiring R] (f : R[X]) (𝓟 : Ideal R) : Prop where
  Mem : ∀ {n}, n < f.natDegree → f.coeff n ∈ 𝓟
#align polynomial.is_weakly_eisenstein_at Polynomial.IsWeaklyEisensteinAt

/-- Given an ideal `𝓟` of a commutative semiring `R`, we say that a polynomial `f : R[X]`
is *Eisenstein at `𝓟`* if `f.leading_coeff ∉ 𝓟`, `∀ n, n < f.nat_degree → f.coeff n ∈ 𝓟` and
`f.coeff 0 ∉ 𝓟 ^ 2`. -/
@[mk_iff]
structure IsEisensteinAt [CommSemiring R] (f : R[X]) (𝓟 : Ideal R) : Prop where
  leading : f.leadingCoeff ∉ 𝓟
  Mem : ∀ {n}, n < f.natDegree → f.coeff n ∈ 𝓟
  not_mem : f.coeff 0 ∉ 𝓟 ^ 2
#align polynomial.is_eisenstein_at Polynomial.IsEisensteinAt

namespace IsWeaklyEisensteinAt

section CommSemiring

variable [CommSemiring R] {𝓟 : Ideal R} {f : R[X]} (hf : f.IsWeaklyEisensteinAt 𝓟)

include hf

theorem map {A : Type v} [CommRing A] (φ : R →+* A) : (f.map φ).IsWeaklyEisensteinAt (𝓟.map φ) :=
  by
  refine' (is_weakly_eisenstein_at_iff _ _).2 fun n hn => _
  rw [coeff_map]
  exact mem_map_of_mem _ (hf.mem (lt_of_lt_of_le hn (nat_degree_map_le _ _)))
#align polynomial.is_weakly_eisenstein_at.map Polynomial.IsWeaklyEisensteinAt.map

end CommSemiring

section CommRing

variable [CommRing R] {𝓟 : Ideal R} {f : R[X]} (hf : f.IsWeaklyEisensteinAt 𝓟)

variable {S : Type v} [CommRing S] [Algebra R S]

section Principal

variable {p : R}

-- mathport name: exprP
local notation "P" => Submodule.span R {p}

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers [] [] [] [] [] [])
     (Command.theorem
      "theorem"
      (Command.declId `exists_mem_adjoin_mul_eq_pow_nat_degree [])
      (Command.declSig
       [(Term.implicitBinder "{" [`x] [":" `S] "}")
        (Term.explicitBinder
         "("
         [`hx]
         [":" («term_=_» (Term.app `aeval [`x `f]) "=" (num "0"))]
         []
         ")")
        (Term.explicitBinder "(" [`hmo] [":" (Term.proj `f "." `Monic)] [] ")")
        (Term.explicitBinder
         "("
         [`hf]
         [":"
          (Term.app
           (Term.proj `f "." `IsWeaklyEisensteinAt)
           [(Polynomial.IsWeaklyEisensteinAt.RingTheory.Polynomial.Eisenstein.termP "P")])]
         []
         ")")]
       (Term.typeSpec
        ":"
        (Std.ExtendedBinder.«term∃__,_»
         "∃"
         (Lean.binderIdent `y)
         («binderTerm∈_»
          "∈"
          (Term.app
           `adjoin
           [`R (Term.typeAscription "(" («term{_}» "{" [`x] "}") ":" [(Term.app `Set [`S])] ")")]))
         ","
         («term_=_»
          («term_*_» (Term.app (Term.app `algebraMap [`R `S]) [`p]) "*" `y)
          "="
          («term_^_»
           `x
           "^"
           (Term.proj
            (Term.app (Term.proj `f "." `map) [(Term.app `algebraMap [`R `S])])
            "."
            `natDegree))))))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq
             "["
             [(Tactic.rwRule [] `aeval_def)
              ","
              (Tactic.rwRule [] `Polynomial.eval₂_eq_eval_map)
              ","
              (Tactic.rwRule [] `eval_eq_sum_range)
              ","
              (Tactic.rwRule [] `range_add_one)
              ","
              (Tactic.rwRule [] (Term.app `sum_insert [`not_mem_range_self]))
              ","
              (Tactic.rwRule [] `sum_range)
              ","
              (Tactic.rwRule
               []
               (Term.proj
                (Term.app `hmo.map [(Term.app `algebraMap [`R `S])])
                "."
                `coeff_nat_degree))
              ","
              (Tactic.rwRule [] `one_mul)]
             "]")
            [(Tactic.location "at" (Tactic.locationHyp [`hx] []))])
           []
           (Mathlib.Tactic.tacticReplace_
            "replace"
            (Term.haveDecl
             (Term.haveIdDecl [`hx []] [] ":=" (Term.app `eq_neg_of_add_eq_zero_left [`hx]))))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              []
              [(Term.typeSpec
                ":"
                (Std.ExtendedBinder.«term∀__,_»
                 "∀"
                 (Lean.binderIdent `n)
                 (Std.ExtendedBinder.«binderTerm<_» "<" `f.nat_degree)
                 ","
                 («term_∣_» `p "∣" (Term.app `f.coeff [`n]))))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.intro "intro" [`n `hn])
                  []
                  (Tactic.refine'
                   "refine'"
                   (Term.app
                    (Term.proj `mem_span_singleton "." (fieldIdx "1"))
                    [(Term.byTactic
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented
                        [(Std.Tactic.Simpa.simpa
                          "simpa"
                          []
                          []
                          (Std.Tactic.Simpa.simpaArgsRest
                           []
                           []
                           []
                           []
                           ["using" (Term.app `hf.mem [`hn])]))])))]))]))))))
           []
           (Mathlib.Tactic.Choose.tacticChoose!__Using_
            "choose!"
            [(Lean.binderIdent `φ) (Lean.binderIdent `hφ)]
            ["using" `this])
           []
           (Mathlib.Tactic.Conv.convRHS
            "conv_rhs"
            ["at" `hx]
            []
            "=>"
            (Tactic.Conv.convSeq
             (Tactic.Conv.convSeq1Indented
              [(Tactic.Conv.congr "congr")
               []
               (Tactic.Conv.congr "congr")
               []
               (Tactic.Conv.skip "skip")
               []
               (Tactic.Conv.ext "ext" [])
               []
               (Tactic.Conv.convRw__
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] `Fin.coe_eq_val)
                  ","
                  (Tactic.rwRule [] `coeff_map)
                  ","
                  (Tactic.rwRule
                   []
                   (Term.app
                    `hφ
                    [(Term.proj `i "." (fieldIdx "1"))
                     (Term.app
                      `lt_of_lt_of_le
                      [(Term.proj `i "." (fieldIdx "2"))
                       (Term.app `nat_degree_map_le [(Term.hole "_") (Term.hole "_")])])]))
                  ","
                  (Tactic.rwRule [] `RingHom.map_mul)
                  ","
                  (Tactic.rwRule [] `mul_assoc)]
                 "]"))])))
           []
           (Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq
             "["
             [(Tactic.rwRule [] `hx)
              ","
              (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `mul_sum)
              ","
              (Tactic.rwRule [] `neg_eq_neg_one_mul)
              ","
              (Tactic.rwRule
               [(patternIgnore (token.«← » "←"))]
               (Term.app
                `mul_assoc
                [(Term.typeAscription "(" («term-_» "-" (num "1")) ":" [`S] ")")]))
              ","
              (Tactic.rwRule
               []
               (Term.app
                `mul_comm
                [(Term.typeAscription "(" («term-_» "-" (num "1")) ":" [`S] ")")]))
              ","
              (Tactic.rwRule [] `mul_assoc)]
             "]")
            [])
           []
           (Tactic.refine'
            "refine'"
            (Term.anonymousCtor
             "⟨"
             [(«term_*_»
               («term-_» "-" (num "1"))
               "*"
               (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
                "∑"
                (Std.ExtendedBinder.extBinders
                 (Std.ExtendedBinder.extBinder
                  (Lean.binderIdent `i)
                  [(group
                    ":"
                    (Term.app
                     `Fin
                     [(Term.proj
                       (Term.app `f.map [(Term.app `algebraMap [`R `S])])
                       "."
                       `natDegree)]))]))
                ", "
                («term_*_»
                 (Term.app
                  (Term.app `algebraMap [`R `S])
                  [(Term.app `φ [(Term.proj `i "." (fieldIdx "1"))])])
                 "*"
                 («term_^_» `x "^" (Term.proj `i "." (fieldIdx "1"))))))
              ","
              (Term.hole "_")
              ","
              `rfl]
             "⟩"))
           []
           (Tactic.exact
            "exact"
            (Term.app
             `Subalgebra.mul_mem
             [(Term.hole "_")
              (Term.app
               `Subalgebra.neg_mem
               [(Term.hole "_") (Term.app `Subalgebra.one_mem [(Term.hole "_")])])
              (Term.app
               `Subalgebra.sum_mem
               [(Term.hole "_")
                (Term.fun
                 "fun"
                 (Term.basicFun
                  [`i `hi]
                  []
                  "=>"
                  (Term.app
                   `Subalgebra.mul_mem
                   [(Term.hole "_")
                    (Term.app `Subalgebra.algebra_map_mem [(Term.hole "_") (Term.hole "_")])
                    (Term.app
                     `Subalgebra.pow_mem
                     [(Term.hole "_")
                      (Term.app `subset_adjoin [(Term.app `Set.mem_singleton [`x])])
                      (Term.hole "_")])])))])]))])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `aeval_def)
             ","
             (Tactic.rwRule [] `Polynomial.eval₂_eq_eval_map)
             ","
             (Tactic.rwRule [] `eval_eq_sum_range)
             ","
             (Tactic.rwRule [] `range_add_one)
             ","
             (Tactic.rwRule [] (Term.app `sum_insert [`not_mem_range_self]))
             ","
             (Tactic.rwRule [] `sum_range)
             ","
             (Tactic.rwRule
              []
              (Term.proj
               (Term.app `hmo.map [(Term.app `algebraMap [`R `S])])
               "."
               `coeff_nat_degree))
             ","
             (Tactic.rwRule [] `one_mul)]
            "]")
           [(Tactic.location "at" (Tactic.locationHyp [`hx] []))])
          []
          (Mathlib.Tactic.tacticReplace_
           "replace"
           (Term.haveDecl
            (Term.haveIdDecl [`hx []] [] ":=" (Term.app `eq_neg_of_add_eq_zero_left [`hx]))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec
               ":"
               (Std.ExtendedBinder.«term∀__,_»
                "∀"
                (Lean.binderIdent `n)
                (Std.ExtendedBinder.«binderTerm<_» "<" `f.nat_degree)
                ","
                («term_∣_» `p "∣" (Term.app `f.coeff [`n]))))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.intro "intro" [`n `hn])
                 []
                 (Tactic.refine'
                  "refine'"
                  (Term.app
                   (Term.proj `mem_span_singleton "." (fieldIdx "1"))
                   [(Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(Std.Tactic.Simpa.simpa
                         "simpa"
                         []
                         []
                         (Std.Tactic.Simpa.simpaArgsRest
                          []
                          []
                          []
                          []
                          ["using" (Term.app `hf.mem [`hn])]))])))]))]))))))
          []
          (Mathlib.Tactic.Choose.tacticChoose!__Using_
           "choose!"
           [(Lean.binderIdent `φ) (Lean.binderIdent `hφ)]
           ["using" `this])
          []
          (Mathlib.Tactic.Conv.convRHS
           "conv_rhs"
           ["at" `hx]
           []
           "=>"
           (Tactic.Conv.convSeq
            (Tactic.Conv.convSeq1Indented
             [(Tactic.Conv.congr "congr")
              []
              (Tactic.Conv.congr "congr")
              []
              (Tactic.Conv.skip "skip")
              []
              (Tactic.Conv.ext "ext" [])
              []
              (Tactic.Conv.convRw__
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule [] `Fin.coe_eq_val)
                 ","
                 (Tactic.rwRule [] `coeff_map)
                 ","
                 (Tactic.rwRule
                  []
                  (Term.app
                   `hφ
                   [(Term.proj `i "." (fieldIdx "1"))
                    (Term.app
                     `lt_of_lt_of_le
                     [(Term.proj `i "." (fieldIdx "2"))
                      (Term.app `nat_degree_map_le [(Term.hole "_") (Term.hole "_")])])]))
                 ","
                 (Tactic.rwRule [] `RingHom.map_mul)
                 ","
                 (Tactic.rwRule [] `mul_assoc)]
                "]"))])))
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `hx)
             ","
             (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `mul_sum)
             ","
             (Tactic.rwRule [] `neg_eq_neg_one_mul)
             ","
             (Tactic.rwRule
              [(patternIgnore (token.«← » "←"))]
              (Term.app
               `mul_assoc
               [(Term.typeAscription "(" («term-_» "-" (num "1")) ":" [`S] ")")]))
             ","
             (Tactic.rwRule
              []
              (Term.app
               `mul_comm
               [(Term.typeAscription "(" («term-_» "-" (num "1")) ":" [`S] ")")]))
             ","
             (Tactic.rwRule [] `mul_assoc)]
            "]")
           [])
          []
          (Tactic.refine'
           "refine'"
           (Term.anonymousCtor
            "⟨"
            [(«term_*_»
              («term-_» "-" (num "1"))
              "*"
              (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
               "∑"
               (Std.ExtendedBinder.extBinders
                (Std.ExtendedBinder.extBinder
                 (Lean.binderIdent `i)
                 [(group
                   ":"
                   (Term.app
                    `Fin
                    [(Term.proj
                      (Term.app `f.map [(Term.app `algebraMap [`R `S])])
                      "."
                      `natDegree)]))]))
               ", "
               («term_*_»
                (Term.app
                 (Term.app `algebraMap [`R `S])
                 [(Term.app `φ [(Term.proj `i "." (fieldIdx "1"))])])
                "*"
                («term_^_» `x "^" (Term.proj `i "." (fieldIdx "1"))))))
             ","
             (Term.hole "_")
             ","
             `rfl]
            "⟩"))
          []
          (Tactic.exact
           "exact"
           (Term.app
            `Subalgebra.mul_mem
            [(Term.hole "_")
             (Term.app
              `Subalgebra.neg_mem
              [(Term.hole "_") (Term.app `Subalgebra.one_mem [(Term.hole "_")])])
             (Term.app
              `Subalgebra.sum_mem
              [(Term.hole "_")
               (Term.fun
                "fun"
                (Term.basicFun
                 [`i `hi]
                 []
                 "=>"
                 (Term.app
                  `Subalgebra.mul_mem
                  [(Term.hole "_")
                   (Term.app `Subalgebra.algebra_map_mem [(Term.hole "_") (Term.hole "_")])
                   (Term.app
                    `Subalgebra.pow_mem
                    [(Term.hole "_")
                     (Term.app `subset_adjoin [(Term.app `Set.mem_singleton [`x])])
                     (Term.hole "_")])])))])]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `Subalgebra.mul_mem
        [(Term.hole "_")
         (Term.app
          `Subalgebra.neg_mem
          [(Term.hole "_") (Term.app `Subalgebra.one_mem [(Term.hole "_")])])
         (Term.app
          `Subalgebra.sum_mem
          [(Term.hole "_")
           (Term.fun
            "fun"
            (Term.basicFun
             [`i `hi]
             []
             "=>"
             (Term.app
              `Subalgebra.mul_mem
              [(Term.hole "_")
               (Term.app `Subalgebra.algebra_map_mem [(Term.hole "_") (Term.hole "_")])
               (Term.app
                `Subalgebra.pow_mem
                [(Term.hole "_")
                 (Term.app `subset_adjoin [(Term.app `Set.mem_singleton [`x])])
                 (Term.hole "_")])])))])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Subalgebra.mul_mem
       [(Term.hole "_")
        (Term.app
         `Subalgebra.neg_mem
         [(Term.hole "_") (Term.app `Subalgebra.one_mem [(Term.hole "_")])])
        (Term.app
         `Subalgebra.sum_mem
         [(Term.hole "_")
          (Term.fun
           "fun"
           (Term.basicFun
            [`i `hi]
            []
            "=>"
            (Term.app
             `Subalgebra.mul_mem
             [(Term.hole "_")
              (Term.app `Subalgebra.algebra_map_mem [(Term.hole "_") (Term.hole "_")])
              (Term.app
               `Subalgebra.pow_mem
               [(Term.hole "_")
                (Term.app `subset_adjoin [(Term.app `Set.mem_singleton [`x])])
                (Term.hole "_")])])))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Subalgebra.sum_mem
       [(Term.hole "_")
        (Term.fun
         "fun"
         (Term.basicFun
          [`i `hi]
          []
          "=>"
          (Term.app
           `Subalgebra.mul_mem
           [(Term.hole "_")
            (Term.app `Subalgebra.algebra_map_mem [(Term.hole "_") (Term.hole "_")])
            (Term.app
             `Subalgebra.pow_mem
             [(Term.hole "_")
              (Term.app `subset_adjoin [(Term.app `Set.mem_singleton [`x])])
              (Term.hole "_")])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`i `hi]
        []
        "=>"
        (Term.app
         `Subalgebra.mul_mem
         [(Term.hole "_")
          (Term.app `Subalgebra.algebra_map_mem [(Term.hole "_") (Term.hole "_")])
          (Term.app
           `Subalgebra.pow_mem
           [(Term.hole "_")
            (Term.app `subset_adjoin [(Term.app `Set.mem_singleton [`x])])
            (Term.hole "_")])])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Subalgebra.mul_mem
       [(Term.hole "_")
        (Term.app `Subalgebra.algebra_map_mem [(Term.hole "_") (Term.hole "_")])
        (Term.app
         `Subalgebra.pow_mem
         [(Term.hole "_")
          (Term.app `subset_adjoin [(Term.app `Set.mem_singleton [`x])])
          (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Subalgebra.pow_mem
       [(Term.hole "_")
        (Term.app `subset_adjoin [(Term.app `Set.mem_singleton [`x])])
        (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.app `subset_adjoin [(Term.app `Set.mem_singleton [`x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Set.mem_singleton [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Set.mem_singleton
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `Set.mem_singleton [`x]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `subset_adjoin
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `subset_adjoin [(Term.paren "(" (Term.app `Set.mem_singleton [`x]) ")")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Subalgebra.pow_mem
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `Subalgebra.pow_mem
      [(Term.hole "_")
       (Term.paren
        "("
        (Term.app `subset_adjoin [(Term.paren "(" (Term.app `Set.mem_singleton [`x]) ")")])
        ")")
       (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `Subalgebra.algebra_map_mem [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Subalgebra.algebra_map_mem
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `Subalgebra.algebra_map_mem [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Subalgebra.mul_mem
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Subalgebra.sum_mem
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `Subalgebra.sum_mem
      [(Term.hole "_")
       (Term.fun
        "fun"
        (Term.basicFun
         [`i `hi]
         []
         "=>"
         (Term.app
          `Subalgebra.mul_mem
          [(Term.hole "_")
           (Term.paren
            "("
            (Term.app `Subalgebra.algebra_map_mem [(Term.hole "_") (Term.hole "_")])
            ")")
           (Term.paren
            "("
            (Term.app
             `Subalgebra.pow_mem
             [(Term.hole "_")
              (Term.paren
               "("
               (Term.app `subset_adjoin [(Term.paren "(" (Term.app `Set.mem_singleton [`x]) ")")])
               ")")
              (Term.hole "_")])
            ")")])))])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `Subalgebra.neg_mem
       [(Term.hole "_") (Term.app `Subalgebra.one_mem [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Subalgebra.one_mem [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Subalgebra.one_mem
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `Subalgebra.one_mem [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Subalgebra.neg_mem
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `Subalgebra.neg_mem
      [(Term.hole "_") (Term.paren "(" (Term.app `Subalgebra.one_mem [(Term.hole "_")]) ")")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Subalgebra.mul_mem
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.anonymousCtor
        "⟨"
        [(«term_*_»
          («term-_» "-" (num "1"))
          "*"
          (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
           "∑"
           (Std.ExtendedBinder.extBinders
            (Std.ExtendedBinder.extBinder
             (Lean.binderIdent `i)
             [(group
               ":"
               (Term.app
                `Fin
                [(Term.proj (Term.app `f.map [(Term.app `algebraMap [`R `S])]) "." `natDegree)]))]))
           ", "
           («term_*_»
            (Term.app
             (Term.app `algebraMap [`R `S])
             [(Term.app `φ [(Term.proj `i "." (fieldIdx "1"))])])
            "*"
            («term_^_» `x "^" (Term.proj `i "." (fieldIdx "1"))))))
         ","
         (Term.hole "_")
         ","
         `rfl]
        "⟩"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "⟨"
       [(«term_*_»
         («term-_» "-" (num "1"))
         "*"
         (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
          "∑"
          (Std.ExtendedBinder.extBinders
           (Std.ExtendedBinder.extBinder
            (Lean.binderIdent `i)
            [(group
              ":"
              (Term.app
               `Fin
               [(Term.proj (Term.app `f.map [(Term.app `algebraMap [`R `S])]) "." `natDegree)]))]))
          ", "
          («term_*_»
           (Term.app
            (Term.app `algebraMap [`R `S])
            [(Term.app `φ [(Term.proj `i "." (fieldIdx "1"))])])
           "*"
           («term_^_» `x "^" (Term.proj `i "." (fieldIdx "1"))))))
        ","
        (Term.hole "_")
        ","
        `rfl]
       "⟩")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `rfl
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_»
       («term-_» "-" (num "1"))
       "*"
       (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
        "∑"
        (Std.ExtendedBinder.extBinders
         (Std.ExtendedBinder.extBinder
          (Lean.binderIdent `i)
          [(group
            ":"
            (Term.app
             `Fin
             [(Term.proj (Term.app `f.map [(Term.app `algebraMap [`R `S])]) "." `natDegree)]))]))
        ", "
        («term_*_»
         (Term.app
          (Term.app `algebraMap [`R `S])
          [(Term.app `φ [(Term.proj `i "." (fieldIdx "1"))])])
         "*"
         («term_^_» `x "^" (Term.proj `i "." (fieldIdx "1"))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (BigOperators.Algebra.BigOperators.Basic.finset.sum_univ
       "∑"
       (Std.ExtendedBinder.extBinders
        (Std.ExtendedBinder.extBinder
         (Lean.binderIdent `i)
         [(group
           ":"
           (Term.app
            `Fin
            [(Term.proj (Term.app `f.map [(Term.app `algebraMap [`R `S])]) "." `natDegree)]))]))
       ", "
       («term_*_»
        (Term.app
         (Term.app `algebraMap [`R `S])
         [(Term.app `φ [(Term.proj `i "." (fieldIdx "1"))])])
        "*"
        («term_^_» `x "^" (Term.proj `i "." (fieldIdx "1")))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_»
       (Term.app (Term.app `algebraMap [`R `S]) [(Term.app `φ [(Term.proj `i "." (fieldIdx "1"))])])
       "*"
       («term_^_» `x "^" (Term.proj `i "." (fieldIdx "1"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» `x "^" (Term.proj `i "." (fieldIdx "1")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Term.app (Term.app `algebraMap [`R `S]) [(Term.app `φ [(Term.proj `i "." (fieldIdx "1"))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `φ [(Term.proj `i "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `φ
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `φ [(Term.proj `i "." (fieldIdx "1"))])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.app `algebraMap [`R `S])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `S
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `algebraMap
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1022, (some 1023,
     term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `algebraMap [`R `S]) ")")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1022, (some 1023, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Fin
       [(Term.proj (Term.app `f.map [(Term.app `algebraMap [`R `S])]) "." `natDegree)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `f.map [(Term.app `algebraMap [`R `S])]) "." `natDegree)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `f.map [(Term.app `algebraMap [`R `S])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `algebraMap [`R `S])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `S
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `algebraMap
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `algebraMap [`R `S]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f.map
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `f.map [(Term.paren "(" (Term.app `algebraMap [`R `S]) ")")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Fin
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      («term-_» "-" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 70 >? 75, (some 75, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `hx)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `mul_sum)
         ","
         (Tactic.rwRule [] `neg_eq_neg_one_mul)
         ","
         (Tactic.rwRule
          [(patternIgnore (token.«← » "←"))]
          (Term.app `mul_assoc [(Term.typeAscription "(" («term-_» "-" (num "1")) ":" [`S] ")")]))
         ","
         (Tactic.rwRule
          []
          (Term.app `mul_comm [(Term.typeAscription "(" («term-_» "-" (num "1")) ":" [`S] ")")]))
         ","
         (Tactic.rwRule [] `mul_assoc)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_assoc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `mul_comm [(Term.typeAscription "(" («term-_» "-" (num "1")) ":" [`S] ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.typeAscription "(" («term-_» "-" (num "1")) ":" [`S] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `S
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term-_» "-" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 75, (some 75, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_comm
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `mul_assoc [(Term.typeAscription "(" («term-_» "-" (num "1")) ":" [`S] ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.typeAscription "(" («term-_» "-" (num "1")) ":" [`S] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `S
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term-_» "-" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 75, (some 75, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_assoc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `neg_eq_neg_one_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_sum
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.Conv.convRHS
       "conv_rhs"
       ["at" `hx]
       []
       "=>"
       (Tactic.Conv.convSeq
        (Tactic.Conv.convSeq1Indented
         [(Tactic.Conv.congr "congr")
          []
          (Tactic.Conv.congr "congr")
          []
          (Tactic.Conv.skip "skip")
          []
          (Tactic.Conv.ext "ext" [])
          []
          (Tactic.Conv.convRw__
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `Fin.coe_eq_val)
             ","
             (Tactic.rwRule [] `coeff_map)
             ","
             (Tactic.rwRule
              []
              (Term.app
               `hφ
               [(Term.proj `i "." (fieldIdx "1"))
                (Term.app
                 `lt_of_lt_of_le
                 [(Term.proj `i "." (fieldIdx "2"))
                  (Term.app `nat_degree_map_le [(Term.hole "_") (Term.hole "_")])])]))
             ","
             (Tactic.rwRule [] `RingHom.map_mul)
             ","
             (Tactic.rwRule [] `mul_assoc)]
            "]"))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.Conv.convSeq1Indented', expected 'Lean.Parser.Tactic.Conv.convSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_assoc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `RingHom.map_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `hφ
       [(Term.proj `i "." (fieldIdx "1"))
        (Term.app
         `lt_of_lt_of_le
         [(Term.proj `i "." (fieldIdx "2"))
          (Term.app `nat_degree_map_le [(Term.hole "_") (Term.hole "_")])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `lt_of_lt_of_le
       [(Term.proj `i "." (fieldIdx "2"))
        (Term.app `nat_degree_map_le [(Term.hole "_") (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `nat_degree_map_le [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `nat_degree_map_le
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `nat_degree_map_le [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj `i "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `lt_of_lt_of_le
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `lt_of_lt_of_le
      [(Term.proj `i "." (fieldIdx "2"))
       (Term.paren "(" (Term.app `nat_degree_map_le [(Term.hole "_") (Term.hole "_")]) ")")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj `i "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hφ
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `coeff_map
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Fin.coe_eq_val
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.Choose.tacticChoose!__Using_
       "choose!"
       [(Lean.binderIdent `φ) (Lean.binderIdent `hφ)]
       ["using" `this])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `this
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           (Std.ExtendedBinder.«term∀__,_»
            "∀"
            (Lean.binderIdent `n)
            (Std.ExtendedBinder.«binderTerm<_» "<" `f.nat_degree)
            ","
            («term_∣_» `p "∣" (Term.app `f.coeff [`n]))))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.intro "intro" [`n `hn])
             []
             (Tactic.refine'
              "refine'"
              (Term.app
               (Term.proj `mem_span_singleton "." (fieldIdx "1"))
               [(Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Std.Tactic.Simpa.simpa
                     "simpa"
                     []
                     []
                     (Std.Tactic.Simpa.simpaArgsRest
                      []
                      []
                      []
                      []
                      ["using" (Term.app `hf.mem [`hn])]))])))]))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.intro "intro" [`n `hn])
          []
          (Tactic.refine'
           "refine'"
           (Term.app
            (Term.proj `mem_span_singleton "." (fieldIdx "1"))
            [(Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Std.Tactic.Simpa.simpa
                  "simpa"
                  []
                  []
                  (Std.Tactic.Simpa.simpaArgsRest
                   []
                   []
                   []
                   []
                   ["using" (Term.app `hf.mem [`hn])]))])))]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        (Term.proj `mem_span_singleton "." (fieldIdx "1"))
        [(Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Std.Tactic.Simpa.simpa
              "simpa"
              []
              []
              (Std.Tactic.Simpa.simpaArgsRest
               []
               []
               []
               []
               ["using" (Term.app `hf.mem [`hn])]))])))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `mem_span_singleton "." (fieldIdx "1"))
       [(Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(Std.Tactic.Simpa.simpa
             "simpa"
             []
             []
             (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" (Term.app `hf.mem [`hn])]))])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Std.Tactic.Simpa.simpa
           "simpa"
           []
           []
           (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" (Term.app `hf.mem [`hn])]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Simpa.simpa
       "simpa"
       []
       []
       (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" (Term.app `hf.mem [`hn])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hf.mem [`hn])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hn
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hf.mem
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0,
     tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(Std.Tactic.Simpa.simpa
          "simpa"
          []
          []
          (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" (Term.app `hf.mem [`hn])]))])))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `mem_span_singleton "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `mem_span_singleton
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`n `hn])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hn
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.«term∀__,_»
       "∀"
       (Lean.binderIdent `n)
       (Std.ExtendedBinder.«binderTerm<_» "<" `f.nat_degree)
       ","
       («term_∣_» `p "∣" (Term.app `f.coeff [`n])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_∣_» `p "∣" (Term.app `f.coeff [`n]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f.coeff [`n])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f.coeff
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `p
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `f.nat_degree
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.tacticReplace_
       "replace"
       (Term.haveDecl
        (Term.haveIdDecl [`hx []] [] ":=" (Term.app `eq_neg_of_add_eq_zero_left [`hx]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `eq_neg_of_add_eq_zero_left [`hx])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `eq_neg_of_add_eq_zero_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `aeval_def)
         ","
         (Tactic.rwRule [] `Polynomial.eval₂_eq_eval_map)
         ","
         (Tactic.rwRule [] `eval_eq_sum_range)
         ","
         (Tactic.rwRule [] `range_add_one)
         ","
         (Tactic.rwRule [] (Term.app `sum_insert [`not_mem_range_self]))
         ","
         (Tactic.rwRule [] `sum_range)
         ","
         (Tactic.rwRule
          []
          (Term.proj (Term.app `hmo.map [(Term.app `algebraMap [`R `S])]) "." `coeff_nat_degree))
         ","
         (Tactic.rwRule [] `one_mul)]
        "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hx] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `one_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `hmo.map [(Term.app `algebraMap [`R `S])]) "." `coeff_nat_degree)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `hmo.map [(Term.app `algebraMap [`R `S])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `algebraMap [`R `S])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `S
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `algebraMap
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `algebraMap [`R `S]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hmo.map
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `hmo.map [(Term.paren "(" (Term.app `algebraMap [`R `S]) ")")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `sum_range
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `sum_insert [`not_mem_range_self])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `not_mem_range_self
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `sum_insert
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `range_add_one
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eval_eq_sum_range
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Polynomial.eval₂_eq_eval_map
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `aeval_def
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (Std.ExtendedBinder.«term∃__,_»
       "∃"
       (Lean.binderIdent `y)
       («binderTerm∈_»
        "∈"
        (Term.app
         `adjoin
         [`R (Term.typeAscription "(" («term{_}» "{" [`x] "}") ":" [(Term.app `Set [`S])] ")")]))
       ","
       («term_=_»
        («term_*_» (Term.app (Term.app `algebraMap [`R `S]) [`p]) "*" `y)
        "="
        («term_^_»
         `x
         "^"
         (Term.proj
          (Term.app (Term.proj `f "." `map) [(Term.app `algebraMap [`R `S])])
          "."
          `natDegree))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_»
       («term_*_» (Term.app (Term.app `algebraMap [`R `S]) [`p]) "*" `y)
       "="
       («term_^_»
        `x
        "^"
        (Term.proj
         (Term.app (Term.proj `f "." `map) [(Term.app `algebraMap [`R `S])])
         "."
         `natDegree)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_»
       `x
       "^"
       (Term.proj
        (Term.app (Term.proj `f "." `map) [(Term.app `algebraMap [`R `S])])
        "."
        `natDegree))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app (Term.proj `f "." `map) [(Term.app `algebraMap [`R `S])]) "." `natDegree)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj `f "." `map) [(Term.app `algebraMap [`R `S])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `algebraMap [`R `S])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `S
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `algebraMap
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `algebraMap [`R `S]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `f "." `map)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj `f "." `map) [(Term.paren "(" (Term.app `algebraMap [`R `S]) ")")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      («term_*_» (Term.app (Term.app `algebraMap [`R `S]) [`p]) "*" `y)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `y
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Term.app (Term.app `algebraMap [`R `S]) [`p])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `p
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.app `algebraMap [`R `S])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `S
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `algebraMap
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1022, (some 1023,
     term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `algebraMap [`R `S]) ")")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1022, (some 1023, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `adjoin
       [`R (Term.typeAscription "(" («term{_}» "{" [`x] "}") ":" [(Term.app `Set [`S])] ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.typeAscription "(" («term{_}» "{" [`x] "}") ":" [(Term.app `Set [`S])] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Set [`S])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `S
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Set
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term{_}» "{" [`x] "}")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `adjoin
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `f "." `IsWeaklyEisensteinAt)
       [(Polynomial.IsWeaklyEisensteinAt.RingTheory.Polynomial.Eisenstein.termP "P")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Polynomial.IsWeaklyEisensteinAt.RingTheory.Polynomial.Eisenstein.termP', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Polynomial.IsWeaklyEisensteinAt.RingTheory.Polynomial.Eisenstein.termP', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Polynomial.IsWeaklyEisensteinAt.RingTheory.Polynomial.Eisenstein.termP "P")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Polynomial.IsWeaklyEisensteinAt.RingTheory.Polynomial.Eisenstein.termP', expected 'Polynomial.IsWeaklyEisensteinAt.RingTheory.Polynomial.Eisenstein.termP._@.RingTheory.Polynomial.Eisenstein._hyg.12'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  exists_mem_adjoin_mul_eq_pow_nat_degree
  { x : S } ( hx : aeval x f = 0 ) ( hmo : f . Monic ) ( hf : f . IsWeaklyEisensteinAt P )
    :
      ∃
        y
        ∈ adjoin R ( { x } : Set S )
        ,
        algebraMap R S p * y = x ^ f . map algebraMap R S . natDegree
  :=
    by
      rw
          [
            aeval_def
              ,
              Polynomial.eval₂_eq_eval_map
              ,
              eval_eq_sum_range
              ,
              range_add_one
              ,
              sum_insert not_mem_range_self
              ,
              sum_range
              ,
              hmo.map algebraMap R S . coeff_nat_degree
              ,
              one_mul
            ]
          at hx
        replace hx := eq_neg_of_add_eq_zero_left hx
        have
          : ∀ n < f.nat_degree , p ∣ f.coeff n
            :=
            by intro n hn refine' mem_span_singleton . 1 by simpa using hf.mem hn
        choose! φ hφ using this
        conv_rhs
          at hx
          =>
          congr
            congr
            skip
            ext
            rw
              [
                Fin.coe_eq_val
                  ,
                  coeff_map
                  ,
                  hφ i . 1 lt_of_lt_of_le i . 2 nat_degree_map_le _ _
                  ,
                  RingHom.map_mul
                  ,
                  mul_assoc
                ]
        rw
          [
            hx
              ,
              ← mul_sum
              ,
              neg_eq_neg_one_mul
              ,
              ← mul_assoc ( - 1 : S )
              ,
              mul_comm ( - 1 : S )
              ,
              mul_assoc
            ]
        refine'
          ⟨
            - 1 * ∑ i : Fin f.map algebraMap R S . natDegree , algebraMap R S φ i . 1 * x ^ i . 1
              ,
              _
              ,
              rfl
            ⟩
        exact
          Subalgebra.mul_mem
            _
              Subalgebra.neg_mem _ Subalgebra.one_mem _
              Subalgebra.sum_mem
                _
                  fun
                    i hi
                      =>
                      Subalgebra.mul_mem
                        _
                          Subalgebra.algebra_map_mem _ _
                          Subalgebra.pow_mem _ subset_adjoin Set.mem_singleton x _
#align
  polynomial.is_weakly_eisenstein_at.exists_mem_adjoin_mul_eq_pow_nat_degree Polynomial.IsWeaklyEisensteinAt.exists_mem_adjoin_mul_eq_pow_nat_degree

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers [] [] [] [] [] [])
     (Command.theorem
      "theorem"
      (Command.declId `exists_mem_adjoin_mul_eq_pow_nat_degree_le [])
      (Command.declSig
       [(Term.implicitBinder "{" [`x] [":" `S] "}")
        (Term.explicitBinder
         "("
         [`hx]
         [":" («term_=_» (Term.app `aeval [`x `f]) "=" (num "0"))]
         []
         ")")
        (Term.explicitBinder "(" [`hmo] [":" (Term.proj `f "." `Monic)] [] ")")
        (Term.explicitBinder
         "("
         [`hf]
         [":"
          (Term.app
           (Term.proj `f "." `IsWeaklyEisensteinAt)
           [(Polynomial.IsWeaklyEisensteinAt.RingTheory.Polynomial.Eisenstein.termP "P")])]
         []
         ")")]
       (Term.typeSpec
        ":"
        (Term.forall
         "∀"
         [`i]
         []
         ","
         (Term.arrow
          («term_≤_»
           (Term.proj
            (Term.app (Term.proj `f "." `map) [(Term.app `algebraMap [`R `S])])
            "."
            `natDegree)
           "≤"
           `i)
          "→"
          (Std.ExtendedBinder.«term∃__,_»
           "∃"
           (Lean.binderIdent `y)
           («binderTerm∈_»
            "∈"
            (Term.app
             `adjoin
             [`R
              (Term.typeAscription "(" («term{_}» "{" [`x] "}") ":" [(Term.app `Set [`S])] ")")]))
           ","
           («term_=_»
            («term_*_» (Term.app (Term.app `algebraMap [`R `S]) [`p]) "*" `y)
            "="
            («term_^_» `x "^" `i)))))))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.intro "intro" [`i `hi])
           []
           (Std.Tactic.obtain
            "obtain"
            [(Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "⟨"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `k)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hk)])
                  [])]
                "⟩")])]
            []
            [":=" [(Term.app `exists_add_of_le [`hi])]])
           []
           (Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hk) "," (Tactic.rwRule [] `pow_add)] "]")
            [])
           []
           (Std.Tactic.obtain
            "obtain"
            [(Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "⟨"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `y)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hy)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `H)])
                  [])]
                "⟩")])]
            []
            [":=" [(Term.app `exists_mem_adjoin_mul_eq_pow_nat_degree [`hx `hmo `hf])]])
           []
           (Tactic.refine'
            "refine'"
            (Term.anonymousCtor
             "⟨"
             [(«term_*_» `y "*" («term_^_» `x "^" `k)) "," (Term.hole "_") "," (Term.hole "_")]
             "⟩"))
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.exact
              "exact"
              (Term.app
               `Subalgebra.mul_mem
               [(Term.hole "_")
                `hy
                (Term.app
                 `Subalgebra.pow_mem
                 [(Term.hole "_")
                  (Term.app `subset_adjoin [(Term.app `Set.mem_singleton [`x])])
                  (Term.hole "_")])]))])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule
                 [(patternIgnore (token.«← » "←"))]
                 (Term.app `mul_assoc [(Term.hole "_") `y]))
                ","
                (Tactic.rwRule [] `H)]
               "]")
              [])])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.intro "intro" [`i `hi])
          []
          (Std.Tactic.obtain
           "obtain"
           [(Std.Tactic.RCases.rcasesPatMed
             [(Std.Tactic.RCases.rcasesPat.tuple
               "⟨"
               [(Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `k)])
                 [])
                ","
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hk)])
                 [])]
               "⟩")])]
           []
           [":=" [(Term.app `exists_add_of_le [`hi])]])
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hk) "," (Tactic.rwRule [] `pow_add)] "]")
           [])
          []
          (Std.Tactic.obtain
           "obtain"
           [(Std.Tactic.RCases.rcasesPatMed
             [(Std.Tactic.RCases.rcasesPat.tuple
               "⟨"
               [(Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `y)])
                 [])
                ","
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hy)])
                 [])
                ","
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `H)])
                 [])]
               "⟩")])]
           []
           [":=" [(Term.app `exists_mem_adjoin_mul_eq_pow_nat_degree [`hx `hmo `hf])]])
          []
          (Tactic.refine'
           "refine'"
           (Term.anonymousCtor
            "⟨"
            [(«term_*_» `y "*" («term_^_» `x "^" `k)) "," (Term.hole "_") "," (Term.hole "_")]
            "⟩"))
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.exact
             "exact"
             (Term.app
              `Subalgebra.mul_mem
              [(Term.hole "_")
               `hy
               (Term.app
                `Subalgebra.pow_mem
                [(Term.hole "_")
                 (Term.app `subset_adjoin [(Term.app `Set.mem_singleton [`x])])
                 (Term.hole "_")])]))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule
                [(patternIgnore (token.«← » "←"))]
                (Term.app `mul_assoc [(Term.hole "_") `y]))
               ","
               (Tactic.rwRule [] `H)]
              "]")
             [])])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule
            [(patternIgnore (token.«← » "←"))]
            (Term.app `mul_assoc [(Term.hole "_") `y]))
           ","
           (Tactic.rwRule [] `H)]
          "]")
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule
          [(patternIgnore (token.«← » "←"))]
          (Term.app `mul_assoc [(Term.hole "_") `y]))
         ","
         (Tactic.rwRule [] `H)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `H
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `mul_assoc [(Term.hole "_") `y])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `y
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_assoc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.exact
         "exact"
         (Term.app
          `Subalgebra.mul_mem
          [(Term.hole "_")
           `hy
           (Term.app
            `Subalgebra.pow_mem
            [(Term.hole "_")
             (Term.app `subset_adjoin [(Term.app `Set.mem_singleton [`x])])
             (Term.hole "_")])]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `Subalgebra.mul_mem
        [(Term.hole "_")
         `hy
         (Term.app
          `Subalgebra.pow_mem
          [(Term.hole "_")
           (Term.app `subset_adjoin [(Term.app `Set.mem_singleton [`x])])
           (Term.hole "_")])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Subalgebra.mul_mem
       [(Term.hole "_")
        `hy
        (Term.app
         `Subalgebra.pow_mem
         [(Term.hole "_")
          (Term.app `subset_adjoin [(Term.app `Set.mem_singleton [`x])])
          (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Subalgebra.pow_mem
       [(Term.hole "_")
        (Term.app `subset_adjoin [(Term.app `Set.mem_singleton [`x])])
        (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.app `subset_adjoin [(Term.app `Set.mem_singleton [`x])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Set.mem_singleton [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Set.mem_singleton
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `Set.mem_singleton [`x]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `subset_adjoin
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `subset_adjoin [(Term.paren "(" (Term.app `Set.mem_singleton [`x]) ")")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Subalgebra.pow_mem
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `Subalgebra.pow_mem
      [(Term.hole "_")
       (Term.paren
        "("
        (Term.app `subset_adjoin [(Term.paren "(" (Term.app `Set.mem_singleton [`x]) ")")])
        ")")
       (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hy
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Subalgebra.mul_mem
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.anonymousCtor
        "⟨"
        [(«term_*_» `y "*" («term_^_» `x "^" `k)) "," (Term.hole "_") "," (Term.hole "_")]
        "⟩"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "⟨"
       [(«term_*_» `y "*" («term_^_» `x "^" `k)) "," (Term.hole "_") "," (Term.hole "_")]
       "⟩")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `y "*" («term_^_» `x "^" `k))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» `x "^" `k)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `y
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.obtain
       "obtain"
       [(Std.Tactic.RCases.rcasesPatMed
         [(Std.Tactic.RCases.rcasesPat.tuple
           "⟨"
           [(Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `y)])
             [])
            ","
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hy)])
             [])
            ","
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `H)])
             [])]
           "⟩")])]
       []
       [":=" [(Term.app `exists_mem_adjoin_mul_eq_pow_nat_degree [`hx `hmo `hf])]])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `exists_mem_adjoin_mul_eq_pow_nat_degree [`hx `hmo `hf])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hf
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hmo
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hx
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `exists_mem_adjoin_mul_eq_pow_nat_degree
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hk) "," (Tactic.rwRule [] `pow_add)] "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `pow_add
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hk
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.obtain
       "obtain"
       [(Std.Tactic.RCases.rcasesPatMed
         [(Std.Tactic.RCases.rcasesPat.tuple
           "⟨"
           [(Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `k)])
             [])
            ","
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hk)])
             [])]
           "⟩")])]
       []
       [":=" [(Term.app `exists_add_of_le [`hi])]])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `exists_add_of_le [`hi])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hi
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `exists_add_of_le
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`i `hi])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (Term.forall
       "∀"
       [`i]
       []
       ","
       (Term.arrow
        («term_≤_»
         (Term.proj
          (Term.app (Term.proj `f "." `map) [(Term.app `algebraMap [`R `S])])
          "."
          `natDegree)
         "≤"
         `i)
        "→"
        (Std.ExtendedBinder.«term∃__,_»
         "∃"
         (Lean.binderIdent `y)
         («binderTerm∈_»
          "∈"
          (Term.app
           `adjoin
           [`R (Term.typeAscription "(" («term{_}» "{" [`x] "}") ":" [(Term.app `Set [`S])] ")")]))
         ","
         («term_=_»
          («term_*_» (Term.app (Term.app `algebraMap [`R `S]) [`p]) "*" `y)
          "="
          («term_^_» `x "^" `i)))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.arrow
       («term_≤_»
        (Term.proj
         (Term.app (Term.proj `f "." `map) [(Term.app `algebraMap [`R `S])])
         "."
         `natDegree)
        "≤"
        `i)
       "→"
       (Std.ExtendedBinder.«term∃__,_»
        "∃"
        (Lean.binderIdent `y)
        («binderTerm∈_»
         "∈"
         (Term.app
          `adjoin
          [`R (Term.typeAscription "(" («term{_}» "{" [`x] "}") ":" [(Term.app `Set [`S])] ")")]))
        ","
        («term_=_»
         («term_*_» (Term.app (Term.app `algebraMap [`R `S]) [`p]) "*" `y)
         "="
         («term_^_» `x "^" `i))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.«term∃__,_»
       "∃"
       (Lean.binderIdent `y)
       («binderTerm∈_»
        "∈"
        (Term.app
         `adjoin
         [`R (Term.typeAscription "(" («term{_}» "{" [`x] "}") ":" [(Term.app `Set [`S])] ")")]))
       ","
       («term_=_»
        («term_*_» (Term.app (Term.app `algebraMap [`R `S]) [`p]) "*" `y)
        "="
        («term_^_» `x "^" `i)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_»
       («term_*_» (Term.app (Term.app `algebraMap [`R `S]) [`p]) "*" `y)
       "="
       («term_^_» `x "^" `i))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» `x "^" `i)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      («term_*_» (Term.app (Term.app `algebraMap [`R `S]) [`p]) "*" `y)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `y
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Term.app (Term.app `algebraMap [`R `S]) [`p])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `p
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.app `algebraMap [`R `S])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `S
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `algebraMap
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1022, (some 1023,
     term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `algebraMap [`R `S]) ")")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1022, (some 1023, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `adjoin
       [`R (Term.typeAscription "(" («term{_}» "{" [`x] "}") ":" [(Term.app `Set [`S])] ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.typeAscription "(" («term{_}» "{" [`x] "}") ":" [(Term.app `Set [`S])] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Set [`S])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `S
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Set
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term{_}» "{" [`x] "}")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `adjoin
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 25 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 25, term))
      («term_≤_»
       (Term.proj
        (Term.app (Term.proj `f "." `map) [(Term.app `algebraMap [`R `S])])
        "."
        `natDegree)
       "≤"
       `i)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.proj (Term.app (Term.proj `f "." `map) [(Term.app `algebraMap [`R `S])]) "." `natDegree)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj `f "." `map) [(Term.app `algebraMap [`R `S])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `algebraMap [`R `S])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `S
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `algebraMap
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `algebraMap [`R `S]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `f "." `map)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj `f "." `map) [(Term.paren "(" (Term.app `algebraMap [`R `S]) ")")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (some 25, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 25, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `f "." `IsWeaklyEisensteinAt)
       [(Polynomial.IsWeaklyEisensteinAt.RingTheory.Polynomial.Eisenstein.termP "P")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Polynomial.IsWeaklyEisensteinAt.RingTheory.Polynomial.Eisenstein.termP', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Polynomial.IsWeaklyEisensteinAt.RingTheory.Polynomial.Eisenstein.termP', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Polynomial.IsWeaklyEisensteinAt.RingTheory.Polynomial.Eisenstein.termP "P")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Polynomial.IsWeaklyEisensteinAt.RingTheory.Polynomial.Eisenstein.termP', expected 'Polynomial.IsWeaklyEisensteinAt.RingTheory.Polynomial.Eisenstein.termP._@.RingTheory.Polynomial.Eisenstein._hyg.12'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  exists_mem_adjoin_mul_eq_pow_nat_degree_le
  { x : S } ( hx : aeval x f = 0 ) ( hmo : f . Monic ) ( hf : f . IsWeaklyEisensteinAt P )
    :
      ∀
        i
        ,
        f . map algebraMap R S . natDegree ≤ i
          →
          ∃ y ∈ adjoin R ( { x } : Set S ) , algebraMap R S p * y = x ^ i
  :=
    by
      intro i hi
        obtain ⟨ k , hk ⟩ := exists_add_of_le hi
        rw [ hk , pow_add ]
        obtain ⟨ y , hy , H ⟩ := exists_mem_adjoin_mul_eq_pow_nat_degree hx hmo hf
        refine' ⟨ y * x ^ k , _ , _ ⟩
        · exact Subalgebra.mul_mem _ hy Subalgebra.pow_mem _ subset_adjoin Set.mem_singleton x _
        · rw [ ← mul_assoc _ y , H ]
#align
  polynomial.is_weakly_eisenstein_at.exists_mem_adjoin_mul_eq_pow_nat_degree_le Polynomial.IsWeaklyEisensteinAt.exists_mem_adjoin_mul_eq_pow_nat_degree_le

end Principal

include hf

theorem pow_nat_degree_le_of_root_of_monic_mem {x : R} (hroot : IsRoot f x) (hmo : f.Monic) :
    ∀ i, f.natDegree ≤ i → x ^ i ∈ 𝓟 := by
  intro i hi
  obtain ⟨k, hk⟩ := exists_add_of_le hi
  rw [hk, pow_add]
  suffices x ^ f.nat_degree ∈ 𝓟 by exact mul_mem_right (x ^ k) 𝓟 this
  rw [is_root.def, eval_eq_sum_range, Finset.range_add_one,
    Finset.sum_insert Finset.not_mem_range_self, Finset.sum_range, hmo.coeff_nat_degree, one_mul] at
    hroot
  rw [eq_neg_of_add_eq_zero_left hroot, neg_mem_iff]
  refine' Submodule.sum_mem _ fun i hi => mul_mem_right _ _ (hf.mem (Fin.is_lt i))
#align
  polynomial.is_weakly_eisenstein_at.pow_nat_degree_le_of_root_of_monic_mem Polynomial.IsWeaklyEisensteinAt.pow_nat_degree_le_of_root_of_monic_mem

theorem pow_nat_degree_le_of_aeval_zero_of_monic_mem_map {x : S} (hx : aeval x f = 0)
    (hmo : f.Monic) :
    ∀ i, (f.map (algebraMap R S)).natDegree ≤ i → x ^ i ∈ 𝓟.map (algebraMap R S) :=
  by
  suffices x ^ (f.map (algebraMap R S)).natDegree ∈ 𝓟.map (algebraMap R S)
    by
    intro i hi
    obtain ⟨k, hk⟩ := exists_add_of_le hi
    rw [hk, pow_add]
    refine' mul_mem_right _ _ this
  rw [aeval_def, eval₂_eq_eval_map, ← is_root.def] at hx
  refine' pow_nat_degree_le_of_root_of_monic_mem (hf.map _) hx (hmo.map _) _ rfl.le
#align
  polynomial.is_weakly_eisenstein_at.pow_nat_degree_le_of_aeval_zero_of_monic_mem_map Polynomial.IsWeaklyEisensteinAt.pow_nat_degree_le_of_aeval_zero_of_monic_mem_map

end CommRing

end IsWeaklyEisensteinAt

section ScaleRoots

variable {A : Type _} [CommRing R] [CommRing A]

theorem scaleRoots.isWeaklyEisensteinAt (p : R[X]) {x : R} {P : Ideal R} (hP : x ∈ P) :
    (scaleRoots p x).IsWeaklyEisensteinAt P :=
  by
  refine' ⟨fun i hi => _⟩
  rw [coeff_scale_roots]
  rw [nat_degree_scale_roots, ← tsub_pos_iff_lt] at hi
  exact Ideal.mul_mem_left _ _ (Ideal.pow_mem_of_mem P hP _ hi)
#align polynomial.scale_roots.is_weakly_eisenstein_at Polynomial.scaleRoots.isWeaklyEisensteinAt

theorem dvd_pow_nat_degree_of_eval₂_eq_zero {f : R →+* A} (hf : Function.Injective f) {p : R[X]}
    (hp : p.Monic) (x y : R) (z : A) (h : p.eval₂ f z = 0) (hz : f x * z = f y) :
    x ∣ y ^ p.natDegree :=
  by
  rw [← nat_degree_scale_roots p x, ← Ideal.mem_span_singleton]
  refine'
    (scale_roots.is_weakly_eisenstein_at _
          (ideal.mem_span_singleton.mpr <| dvd_refl x)).pow_nat_degree_le_of_root_of_monic_mem
      _ ((monic_scale_roots_iff x).mpr hp) _ le_rfl
  rw [injective_iff_map_eq_zero'] at hf
  have := scale_roots_eval₂_eq_zero f h
  rwa [hz, Polynomial.eval₂_at_apply, hf] at this
#align polynomial.dvd_pow_nat_degree_of_eval₂_eq_zero Polynomial.dvd_pow_nat_degree_of_eval₂_eq_zero

theorem dvd_pow_nat_degree_of_aeval_eq_zero [Algebra R A] [Nontrivial A] [NoZeroSMulDivisors R A]
    {p : R[X]} (hp : p.Monic) (x y : R) (z : A) (h : Polynomial.aeval z p = 0)
    (hz : z * algebraMap R A x = algebraMap R A y) : x ∣ y ^ p.natDegree :=
  dvd_pow_nat_degree_of_eval₂_eq_zero (NoZeroSMulDivisors.algebra_map_injective R A) hp x y z h
    ((mul_comm _ _).trans hz)
#align polynomial.dvd_pow_nat_degree_of_aeval_eq_zero Polynomial.dvd_pow_nat_degree_of_aeval_eq_zero

end ScaleRoots

namespace IsEisensteinAt

section CommSemiring

variable [CommSemiring R] {𝓟 : Ideal R} {f : R[X]} (hf : f.IsEisensteinAt 𝓟)

theorem Polynomial.Monic.leading_coeff_not_mem (hf : f.Monic) (h : 𝓟 ≠ ⊤) : ¬f.leadingCoeff ∈ 𝓟 :=
  hf.leadingCoeff.symm ▸ (Ideal.ne_top_iff_one _).1 h
#align polynomial.monic.leading_coeff_not_mem Polynomial.Monic.leading_coeff_not_mem

theorem Polynomial.Monic.isEisensteinAtOfMemOfNotMem (hf : f.Monic) (h : 𝓟 ≠ ⊤)
    (hmem : ∀ {n}, n < f.natDegree → f.coeff n ∈ 𝓟) (hnot_mem : f.coeff 0 ∉ 𝓟 ^ 2) :
    f.IsEisensteinAt 𝓟 :=
  { leading := hf.leading_coeff_not_mem h
    Mem := fun n hn => hmem hn
    not_mem := hnot_mem }
#align
  polynomial.monic.is_eisenstein_at_of_mem_of_not_mem Polynomial.Monic.isEisensteinAtOfMemOfNotMem

include hf

theorem isWeaklyEisensteinAt : IsWeaklyEisensteinAt f 𝓟 :=
  ⟨fun _ => hf.Mem⟩
#align
  polynomial.is_eisenstein_at.is_weakly_eisenstein_at Polynomial.IsEisensteinAt.isWeaklyEisensteinAt

theorem coeff_mem {n : ℕ} (hn : n ≠ f.natDegree) : f.coeff n ∈ 𝓟 :=
  by
  cases ne_iff_lt_or_gt.1 hn
  · exact hf.mem h
  · rw [coeff_eq_zero_of_nat_degree_lt h]
    exact Ideal.zero_mem _
#align polynomial.is_eisenstein_at.coeff_mem Polynomial.IsEisensteinAt.coeff_mem

end CommSemiring

section IsDomain

variable [CommRing R] [IsDomain R] {𝓟 : Ideal R} {f : R[X]} (hf : f.IsEisensteinAt 𝓟)

/-- If a primitive `f` satisfies `f.is_eisenstein_at 𝓟`, where `𝓟.is_prime`, then `f` is
irreducible. -/
theorem irreducible (hprime : 𝓟.IsPrime) (hu : f.IsPrimitive) (hfd0 : 0 < f.natDegree) :
    Irreducible f :=
  irreducible_of_eisenstein_criterion hprime hf.leading (fun n hn => hf.Mem (coe_lt_degree.1 hn))
    (nat_degree_pos_iff_degree_pos.1 hfd0) hf.not_mem hu
#align polynomial.is_eisenstein_at.irreducible Polynomial.IsEisensteinAt.irreducible

end IsDomain

end IsEisensteinAt

end Polynomial

section Cyclotomic

variable (p : ℕ)

-- mathport name: expr𝓟
local notation "𝓟" => Submodule.span ℤ {p}

open Polynomial

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers [] [] [] [] [] [])
     (Command.theorem
      "theorem"
      (Command.declId `cyclotomicCompXAddOneIsEisensteinAt [])
      (Command.declSig
       [(Term.instBinder "[" [`hp ":"] (Term.app `Fact [(Term.proj `p "." `Prime)]) "]")]
       (Term.typeSpec
        ":"
        (Term.app
         (Term.proj
          (Term.app
           (Term.proj (Term.app `cyclotomic [`p (termℤ "ℤ")]) "." `comp)
           [(«term_+_» `X "+" (num "1"))])
          "."
          `IsEisensteinAt)
         [(RingTheory.Polynomial.Eisenstein.term𝓟 "𝓟")])))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.refine'
            "refine'"
            (Term.app
             `monic.is_eisenstein_at_of_mem_of_not_mem
             [(Term.hole "_")
              («term_<|_»
               `Ideal.IsPrime.ne_top
               "<|"
               («term_<|_»
                (Term.proj
                 (Term.app
                  `Ideal.span_singleton_prime
                  [(Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(Tactic.NormCast.tacticExact_mod_cast_
                        "exact_mod_cast"
                        `hp.out.ne_zero)])))])
                 "."
                 (fieldIdx "2"))
                "<|"
                (Term.app (Term.proj `Nat.prime_iff_prime_int "." (fieldIdx "1")) [`hp.out])))
              (Term.fun "fun" (Term.basicFun [`i `hi] [] "=>" (Term.hole "_")))
              (Term.hole "_")]))
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule
                 []
                 (Term.show
                  "show"
                  («term_=_»
                   (Term.typeAscription
                    "("
                    («term_+_» `X "+" (num "1"))
                    ":"
                    [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
                    ")")
                   "="
                   («term_+_» `X "+" (Term.app `C [(num "1")])))
                  (Term.byTactic'
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])])))))]
               "]")
              [])
             []
             (Tactic.refine'
              "refine'"
              (Term.app
               (Term.proj (Term.app `cyclotomic.monic [`p (termℤ "ℤ")]) "." `comp)
               [(Term.app `monic_X_add_C [(num "1")])
                (Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))]))
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `nat_degree_X_add_C)] "]")
              [(Tactic.location "at" (Tactic.locationHyp [`h] []))])
             []
             (Tactic.exact "exact" (Term.app `zero_ne_one [`h.symm]))])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `cyclotomic_prime)
                ","
                (Tactic.rwRule [] `geom_sum_X_comp_X_add_one_eq_sum)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `lcoeff_apply)
                ","
                (Tactic.rwRule [] `LinearMap.map_sum)]
               "]")
              [])
             []
             (Tactic.Conv.conv
              "conv"
              []
              []
              "=>"
              (Tactic.Conv.convSeq
               (Tactic.Conv.convSeq1Indented
                [(Tactic.Conv.congr "congr")
                 []
                 (Tactic.Conv.congr "congr")
                 []
                 (Tactic.Conv.skip "skip")
                 []
                 (Tactic.Conv.ext "ext" [])
                 []
                 (Tactic.Conv.convRw__
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule [] `lcoeff_apply)
                    ","
                    (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `C_eq_nat_cast)
                    ","
                    (Tactic.rwRule [] `C_mul_X_pow_eq_monomial)
                    ","
                    (Tactic.rwRule [] `coeff_monomial)]
                   "]"))])))
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `nat_degree_comp)
                ","
                (Tactic.rwRule
                 []
                 (Term.show
                  "show"
                  («term_=_»
                   (Term.typeAscription
                    "("
                    («term_+_» `X "+" (num "1"))
                    ":"
                    [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
                    ")")
                   "="
                   («term_+_» `X "+" (Term.app `C [(num "1")])))
                  (Term.byTactic'
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])])))))
                ","
                (Tactic.rwRule [] `nat_degree_X_add_C)
                ","
                (Tactic.rwRule [] `mul_one)
                ","
                (Tactic.rwRule [] `nat_degree_cyclotomic)
                ","
                (Tactic.rwRule [] (Term.app `Nat.totient_prime [`hp.out]))]
               "]")
              [(Tactic.location "at" (Tactic.locationHyp [`hi] []))])
             []
             (Tactic.simp
              "simp"
              []
              []
              ["only"]
              ["["
               [(Tactic.simpLemma
                 []
                 []
                 (Term.app
                  `lt_of_lt_of_le
                  [`hi (Term.app `Nat.sub_le [(Term.hole "_") (Term.hole "_")])]))
                ","
                (Tactic.simpLemma [] [] `sum_ite_eq')
                ","
                (Tactic.simpLemma [] [] `mem_range)
                ","
                (Tactic.simpLemma [] [] `if_true)
                ","
                (Tactic.simpLemma [] [] `Ideal.submodule_span_eq)
                ","
                (Tactic.simpLemma [] [] `Ideal.mem_span_singleton)]
               "]"]
              [])
             []
             (Tactic.exact
              "exact"
              (Term.app
               (Term.proj `Int.coe_nat_dvd "." (fieldIdx "2"))
               [(Term.app
                 `Nat.Prime.dvd_choose_self
                 [(Term.app `Nat.succ_pos [`i])
                  (Term.app (Term.proj `lt_tsub_iff_right "." (fieldIdx "1")) [`hi])
                  `hp.out])]))])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `coeff_zero_eq_eval_zero)
                ","
                (Tactic.rwRule [] `eval_comp)
                ","
                (Tactic.rwRule [] `cyclotomic_prime)
                ","
                (Tactic.rwRule [] `eval_add)
                ","
                (Tactic.rwRule [] `eval_X)
                ","
                (Tactic.rwRule [] `eval_one)
                ","
                (Tactic.rwRule [] `zero_add)
                ","
                (Tactic.rwRule [] `eval_geom_sum)
                ","
                (Tactic.rwRule [] `one_geom_sum)
                ","
                (Tactic.rwRule [] `Ideal.submodule_span_eq)
                ","
                (Tactic.rwRule [] `Ideal.span_singleton_pow)
                ","
                (Tactic.rwRule [] `Ideal.mem_span_singleton)]
               "]")
              [])
             []
             (Tactic.intro "intro" [`h])
             []
             (Std.Tactic.obtain
              "obtain"
              [(Std.Tactic.RCases.rcasesPatMed
                [(Std.Tactic.RCases.rcasesPat.tuple
                  "⟨"
                  [(Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `k)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hk)])
                    [])]
                  "⟩")])]
              []
              [":=" [(Term.app (Term.proj `Int.coe_nat_dvd "." (fieldIdx "1")) [`h])]])
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `mul_assoc)
                ","
                (Tactic.rwRule [] `mul_one)
                ","
                (Tactic.rwRule [] `mul_assoc)]
               "]")
              [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
             []
             (Mathlib.Tactic.nthRwSeq
              "nth_rw"
              []
              (num "1")
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] (Term.app `Nat.mul_one [`p]))]
               "]")
              [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] (Term.app `mul_right_inj' [`hp.out.ne_zero]))]
               "]")
              [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
             []
             (Tactic.exact
              "exact"
              (Term.app `Nat.Prime.not_dvd_one [`hp.out (Term.app `Dvd.intro [`k `hk.symm])]))])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.refine'
           "refine'"
           (Term.app
            `monic.is_eisenstein_at_of_mem_of_not_mem
            [(Term.hole "_")
             («term_<|_»
              `Ideal.IsPrime.ne_top
              "<|"
              («term_<|_»
               (Term.proj
                (Term.app
                 `Ideal.span_singleton_prime
                 [(Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(Tactic.NormCast.tacticExact_mod_cast_ "exact_mod_cast" `hp.out.ne_zero)])))])
                "."
                (fieldIdx "2"))
               "<|"
               (Term.app (Term.proj `Nat.prime_iff_prime_int "." (fieldIdx "1")) [`hp.out])))
             (Term.fun "fun" (Term.basicFun [`i `hi] [] "=>" (Term.hole "_")))
             (Term.hole "_")]))
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule
                []
                (Term.show
                 "show"
                 («term_=_»
                  (Term.typeAscription
                   "("
                   («term_+_» `X "+" (num "1"))
                   ":"
                   [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
                   ")")
                  "="
                  («term_+_» `X "+" (Term.app `C [(num "1")])))
                 (Term.byTactic'
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])])))))]
              "]")
             [])
            []
            (Tactic.refine'
             "refine'"
             (Term.app
              (Term.proj (Term.app `cyclotomic.monic [`p (termℤ "ℤ")]) "." `comp)
              [(Term.app `monic_X_add_C [(num "1")])
               (Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))]))
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `nat_degree_X_add_C)] "]")
             [(Tactic.location "at" (Tactic.locationHyp [`h] []))])
            []
            (Tactic.exact "exact" (Term.app `zero_ne_one [`h.symm]))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `cyclotomic_prime)
               ","
               (Tactic.rwRule [] `geom_sum_X_comp_X_add_one_eq_sum)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `lcoeff_apply)
               ","
               (Tactic.rwRule [] `LinearMap.map_sum)]
              "]")
             [])
            []
            (Tactic.Conv.conv
             "conv"
             []
             []
             "=>"
             (Tactic.Conv.convSeq
              (Tactic.Conv.convSeq1Indented
               [(Tactic.Conv.congr "congr")
                []
                (Tactic.Conv.congr "congr")
                []
                (Tactic.Conv.skip "skip")
                []
                (Tactic.Conv.ext "ext" [])
                []
                (Tactic.Conv.convRw__
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule [] `lcoeff_apply)
                   ","
                   (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `C_eq_nat_cast)
                   ","
                   (Tactic.rwRule [] `C_mul_X_pow_eq_monomial)
                   ","
                   (Tactic.rwRule [] `coeff_monomial)]
                  "]"))])))
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `nat_degree_comp)
               ","
               (Tactic.rwRule
                []
                (Term.show
                 "show"
                 («term_=_»
                  (Term.typeAscription
                   "("
                   («term_+_» `X "+" (num "1"))
                   ":"
                   [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
                   ")")
                  "="
                  («term_+_» `X "+" (Term.app `C [(num "1")])))
                 (Term.byTactic'
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])])))))
               ","
               (Tactic.rwRule [] `nat_degree_X_add_C)
               ","
               (Tactic.rwRule [] `mul_one)
               ","
               (Tactic.rwRule [] `nat_degree_cyclotomic)
               ","
               (Tactic.rwRule [] (Term.app `Nat.totient_prime [`hp.out]))]
              "]")
             [(Tactic.location "at" (Tactic.locationHyp [`hi] []))])
            []
            (Tactic.simp
             "simp"
             []
             []
             ["only"]
             ["["
              [(Tactic.simpLemma
                []
                []
                (Term.app
                 `lt_of_lt_of_le
                 [`hi (Term.app `Nat.sub_le [(Term.hole "_") (Term.hole "_")])]))
               ","
               (Tactic.simpLemma [] [] `sum_ite_eq')
               ","
               (Tactic.simpLemma [] [] `mem_range)
               ","
               (Tactic.simpLemma [] [] `if_true)
               ","
               (Tactic.simpLemma [] [] `Ideal.submodule_span_eq)
               ","
               (Tactic.simpLemma [] [] `Ideal.mem_span_singleton)]
              "]"]
             [])
            []
            (Tactic.exact
             "exact"
             (Term.app
              (Term.proj `Int.coe_nat_dvd "." (fieldIdx "2"))
              [(Term.app
                `Nat.Prime.dvd_choose_self
                [(Term.app `Nat.succ_pos [`i])
                 (Term.app (Term.proj `lt_tsub_iff_right "." (fieldIdx "1")) [`hi])
                 `hp.out])]))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `coeff_zero_eq_eval_zero)
               ","
               (Tactic.rwRule [] `eval_comp)
               ","
               (Tactic.rwRule [] `cyclotomic_prime)
               ","
               (Tactic.rwRule [] `eval_add)
               ","
               (Tactic.rwRule [] `eval_X)
               ","
               (Tactic.rwRule [] `eval_one)
               ","
               (Tactic.rwRule [] `zero_add)
               ","
               (Tactic.rwRule [] `eval_geom_sum)
               ","
               (Tactic.rwRule [] `one_geom_sum)
               ","
               (Tactic.rwRule [] `Ideal.submodule_span_eq)
               ","
               (Tactic.rwRule [] `Ideal.span_singleton_pow)
               ","
               (Tactic.rwRule [] `Ideal.mem_span_singleton)]
              "]")
             [])
            []
            (Tactic.intro "intro" [`h])
            []
            (Std.Tactic.obtain
             "obtain"
             [(Std.Tactic.RCases.rcasesPatMed
               [(Std.Tactic.RCases.rcasesPat.tuple
                 "⟨"
                 [(Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `k)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hk)])
                   [])]
                 "⟩")])]
             []
             [":=" [(Term.app (Term.proj `Int.coe_nat_dvd "." (fieldIdx "1")) [`h])]])
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `mul_assoc)
               ","
               (Tactic.rwRule [] `mul_one)
               ","
               (Tactic.rwRule [] `mul_assoc)]
              "]")
             [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
            []
            (Mathlib.Tactic.nthRwSeq
             "nth_rw"
             []
             (num "1")
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] (Term.app `Nat.mul_one [`p]))]
              "]")
             [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] (Term.app `mul_right_inj' [`hp.out.ne_zero]))]
              "]")
             [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
            []
            (Tactic.exact
             "exact"
             (Term.app `Nat.Prime.not_dvd_one [`hp.out (Term.app `Dvd.intro [`k `hk.symm])]))])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `coeff_zero_eq_eval_zero)
           ","
           (Tactic.rwRule [] `eval_comp)
           ","
           (Tactic.rwRule [] `cyclotomic_prime)
           ","
           (Tactic.rwRule [] `eval_add)
           ","
           (Tactic.rwRule [] `eval_X)
           ","
           (Tactic.rwRule [] `eval_one)
           ","
           (Tactic.rwRule [] `zero_add)
           ","
           (Tactic.rwRule [] `eval_geom_sum)
           ","
           (Tactic.rwRule [] `one_geom_sum)
           ","
           (Tactic.rwRule [] `Ideal.submodule_span_eq)
           ","
           (Tactic.rwRule [] `Ideal.span_singleton_pow)
           ","
           (Tactic.rwRule [] `Ideal.mem_span_singleton)]
          "]")
         [])
        []
        (Tactic.intro "intro" [`h])
        []
        (Std.Tactic.obtain
         "obtain"
         [(Std.Tactic.RCases.rcasesPatMed
           [(Std.Tactic.RCases.rcasesPat.tuple
             "⟨"
             [(Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `k)])
               [])
              ","
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hk)])
               [])]
             "⟩")])]
         []
         [":=" [(Term.app (Term.proj `Int.coe_nat_dvd "." (fieldIdx "1")) [`h])]])
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `mul_assoc)
           ","
           (Tactic.rwRule [] `mul_one)
           ","
           (Tactic.rwRule [] `mul_assoc)]
          "]")
         [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
        []
        (Mathlib.Tactic.nthRwSeq
         "nth_rw"
         []
         (num "1")
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] (Term.app `Nat.mul_one [`p]))]
          "]")
         [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] (Term.app `mul_right_inj' [`hp.out.ne_zero]))]
          "]")
         [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
        []
        (Tactic.exact
         "exact"
         (Term.app `Nat.Prime.not_dvd_one [`hp.out (Term.app `Dvd.intro [`k `hk.symm])]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app `Nat.Prime.not_dvd_one [`hp.out (Term.app `Dvd.intro [`k `hk.symm])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Nat.Prime.not_dvd_one [`hp.out (Term.app `Dvd.intro [`k `hk.symm])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Dvd.intro [`k `hk.symm])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hk.symm
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Dvd.intro
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `Dvd.intro [`k `hk.symm]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hp.out
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Nat.Prime.not_dvd_one
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `mul_right_inj' [`hp.out.ne_zero]))] "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hk
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `mul_right_inj' [`hp.out.ne_zero])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hp.out.ne_zero
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_right_inj'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.nthRwSeq
       "nth_rw"
       []
       (num "1")
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] (Term.app `Nat.mul_one [`p]))]
        "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hk
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Nat.mul_one [`p])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `p
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Nat.mul_one
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `mul_assoc)
         ","
         (Tactic.rwRule [] `mul_one)
         ","
         (Tactic.rwRule [] `mul_assoc)]
        "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hk
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_assoc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_one
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_assoc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.obtain
       "obtain"
       [(Std.Tactic.RCases.rcasesPatMed
         [(Std.Tactic.RCases.rcasesPat.tuple
           "⟨"
           [(Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `k)])
             [])
            ","
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hk)])
             [])]
           "⟩")])]
       []
       [":=" [(Term.app (Term.proj `Int.coe_nat_dvd "." (fieldIdx "1")) [`h])]])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `Int.coe_nat_dvd "." (fieldIdx "1")) [`h])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `Int.coe_nat_dvd "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `Int.coe_nat_dvd
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`h])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `coeff_zero_eq_eval_zero)
         ","
         (Tactic.rwRule [] `eval_comp)
         ","
         (Tactic.rwRule [] `cyclotomic_prime)
         ","
         (Tactic.rwRule [] `eval_add)
         ","
         (Tactic.rwRule [] `eval_X)
         ","
         (Tactic.rwRule [] `eval_one)
         ","
         (Tactic.rwRule [] `zero_add)
         ","
         (Tactic.rwRule [] `eval_geom_sum)
         ","
         (Tactic.rwRule [] `one_geom_sum)
         ","
         (Tactic.rwRule [] `Ideal.submodule_span_eq)
         ","
         (Tactic.rwRule [] `Ideal.span_singleton_pow)
         ","
         (Tactic.rwRule [] `Ideal.mem_span_singleton)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Ideal.mem_span_singleton
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Ideal.span_singleton_pow
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Ideal.submodule_span_eq
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `one_geom_sum
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eval_geom_sum
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `zero_add
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eval_one
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eval_X
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eval_add
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `cyclotomic_prime
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eval_comp
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `coeff_zero_eq_eval_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `cyclotomic_prime)
           ","
           (Tactic.rwRule [] `geom_sum_X_comp_X_add_one_eq_sum)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `lcoeff_apply)
           ","
           (Tactic.rwRule [] `LinearMap.map_sum)]
          "]")
         [])
        []
        (Tactic.Conv.conv
         "conv"
         []
         []
         "=>"
         (Tactic.Conv.convSeq
          (Tactic.Conv.convSeq1Indented
           [(Tactic.Conv.congr "congr")
            []
            (Tactic.Conv.congr "congr")
            []
            (Tactic.Conv.skip "skip")
            []
            (Tactic.Conv.ext "ext" [])
            []
            (Tactic.Conv.convRw__
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `lcoeff_apply)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `C_eq_nat_cast)
               ","
               (Tactic.rwRule [] `C_mul_X_pow_eq_monomial)
               ","
               (Tactic.rwRule [] `coeff_monomial)]
              "]"))])))
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `nat_degree_comp)
           ","
           (Tactic.rwRule
            []
            (Term.show
             "show"
             («term_=_»
              (Term.typeAscription
               "("
               («term_+_» `X "+" (num "1"))
               ":"
               [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
               ")")
              "="
              («term_+_» `X "+" (Term.app `C [(num "1")])))
             (Term.byTactic'
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])])))))
           ","
           (Tactic.rwRule [] `nat_degree_X_add_C)
           ","
           (Tactic.rwRule [] `mul_one)
           ","
           (Tactic.rwRule [] `nat_degree_cyclotomic)
           ","
           (Tactic.rwRule [] (Term.app `Nat.totient_prime [`hp.out]))]
          "]")
         [(Tactic.location "at" (Tactic.locationHyp [`hi] []))])
        []
        (Tactic.simp
         "simp"
         []
         []
         ["only"]
         ["["
          [(Tactic.simpLemma
            []
            []
            (Term.app
             `lt_of_lt_of_le
             [`hi (Term.app `Nat.sub_le [(Term.hole "_") (Term.hole "_")])]))
           ","
           (Tactic.simpLemma [] [] `sum_ite_eq')
           ","
           (Tactic.simpLemma [] [] `mem_range)
           ","
           (Tactic.simpLemma [] [] `if_true)
           ","
           (Tactic.simpLemma [] [] `Ideal.submodule_span_eq)
           ","
           (Tactic.simpLemma [] [] `Ideal.mem_span_singleton)]
          "]"]
         [])
        []
        (Tactic.exact
         "exact"
         (Term.app
          (Term.proj `Int.coe_nat_dvd "." (fieldIdx "2"))
          [(Term.app
            `Nat.Prime.dvd_choose_self
            [(Term.app `Nat.succ_pos [`i])
             (Term.app (Term.proj `lt_tsub_iff_right "." (fieldIdx "1")) [`hi])
             `hp.out])]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        (Term.proj `Int.coe_nat_dvd "." (fieldIdx "2"))
        [(Term.app
          `Nat.Prime.dvd_choose_self
          [(Term.app `Nat.succ_pos [`i])
           (Term.app (Term.proj `lt_tsub_iff_right "." (fieldIdx "1")) [`hi])
           `hp.out])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `Int.coe_nat_dvd "." (fieldIdx "2"))
       [(Term.app
         `Nat.Prime.dvd_choose_self
         [(Term.app `Nat.succ_pos [`i])
          (Term.app (Term.proj `lt_tsub_iff_right "." (fieldIdx "1")) [`hi])
          `hp.out])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Nat.Prime.dvd_choose_self
       [(Term.app `Nat.succ_pos [`i])
        (Term.app (Term.proj `lt_tsub_iff_right "." (fieldIdx "1")) [`hi])
        `hp.out])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hp.out
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj `lt_tsub_iff_right "." (fieldIdx "1")) [`hi])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hi
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `lt_tsub_iff_right "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `lt_tsub_iff_right
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj `lt_tsub_iff_right "." (fieldIdx "1")) [`hi])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `Nat.succ_pos [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Nat.succ_pos
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `Nat.succ_pos [`i]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Nat.Prime.dvd_choose_self
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `Nat.Prime.dvd_choose_self
      [(Term.paren "(" (Term.app `Nat.succ_pos [`i]) ")")
       (Term.paren "(" (Term.app (Term.proj `lt_tsub_iff_right "." (fieldIdx "1")) [`hi]) ")")
       `hp.out])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `Int.coe_nat_dvd "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `Int.coe_nat_dvd
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       ["only"]
       ["["
        [(Tactic.simpLemma
          []
          []
          (Term.app `lt_of_lt_of_le [`hi (Term.app `Nat.sub_le [(Term.hole "_") (Term.hole "_")])]))
         ","
         (Tactic.simpLemma [] [] `sum_ite_eq')
         ","
         (Tactic.simpLemma [] [] `mem_range)
         ","
         (Tactic.simpLemma [] [] `if_true)
         ","
         (Tactic.simpLemma [] [] `Ideal.submodule_span_eq)
         ","
         (Tactic.simpLemma [] [] `Ideal.mem_span_singleton)]
        "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Ideal.mem_span_singleton
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Ideal.submodule_span_eq
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `if_true
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mem_range
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `sum_ite_eq'
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `lt_of_lt_of_le [`hi (Term.app `Nat.sub_le [(Term.hole "_") (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Nat.sub_le [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Nat.sub_le
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `Nat.sub_le [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hi
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `lt_of_lt_of_le
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `nat_degree_comp)
         ","
         (Tactic.rwRule
          []
          (Term.show
           "show"
           («term_=_»
            (Term.typeAscription
             "("
             («term_+_» `X "+" (num "1"))
             ":"
             [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
             ")")
            "="
            («term_+_» `X "+" (Term.app `C [(num "1")])))
           (Term.byTactic'
            "by"
            (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])])))))
         ","
         (Tactic.rwRule [] `nat_degree_X_add_C)
         ","
         (Tactic.rwRule [] `mul_one)
         ","
         (Tactic.rwRule [] `nat_degree_cyclotomic)
         ","
         (Tactic.rwRule [] (Term.app `Nat.totient_prime [`hp.out]))]
        "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hi] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Nat.totient_prime [`hp.out])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hp.out
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Nat.totient_prime
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `nat_degree_cyclotomic
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_one
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `nat_degree_X_add_C
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.show
       "show"
       («term_=_»
        (Term.typeAscription
         "("
         («term_+_» `X "+" (num "1"))
         ":"
         [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
         ")")
        "="
        («term_+_» `X "+" (Term.app `C [(num "1")])))
       (Term.byTactic'
        "by"
        (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic'', expected 'Lean.Parser.Term.fromTerm'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp "simp" [] [] [] [] [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      («term_=_»
       (Term.typeAscription
        "("
        («term_+_» `X "+" (num "1"))
        ":"
        [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
        ")")
       "="
       («term_+_» `X "+" (Term.app `C [(num "1")])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `X "+" (Term.app `C [(num "1")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `C [(num "1")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `C
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `X
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.typeAscription
       "("
       («term_+_» `X "+" (num "1"))
       ":"
       [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
       ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 9000, term))
      (termℤ "ℤ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 9000, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 9000, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `X "+" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `X
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `nat_degree_comp
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.Conv.conv
       "conv"
       []
       []
       "=>"
       (Tactic.Conv.convSeq
        (Tactic.Conv.convSeq1Indented
         [(Tactic.Conv.congr "congr")
          []
          (Tactic.Conv.congr "congr")
          []
          (Tactic.Conv.skip "skip")
          []
          (Tactic.Conv.ext "ext" [])
          []
          (Tactic.Conv.convRw__
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `lcoeff_apply)
             ","
             (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `C_eq_nat_cast)
             ","
             (Tactic.rwRule [] `C_mul_X_pow_eq_monomial)
             ","
             (Tactic.rwRule [] `coeff_monomial)]
            "]"))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.Conv.convSeq1Indented', expected 'Lean.Parser.Tactic.Conv.convSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `coeff_monomial
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C_mul_X_pow_eq_monomial
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `C_eq_nat_cast
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `lcoeff_apply
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `cyclotomic_prime)
         ","
         (Tactic.rwRule [] `geom_sum_X_comp_X_add_one_eq_sum)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `lcoeff_apply)
         ","
         (Tactic.rwRule [] `LinearMap.map_sum)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `LinearMap.map_sum
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `lcoeff_apply
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `geom_sum_X_comp_X_add_one_eq_sum
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `cyclotomic_prime
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule
            []
            (Term.show
             "show"
             («term_=_»
              (Term.typeAscription
               "("
               («term_+_» `X "+" (num "1"))
               ":"
               [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
               ")")
              "="
              («term_+_» `X "+" (Term.app `C [(num "1")])))
             (Term.byTactic'
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])])))))]
          "]")
         [])
        []
        (Tactic.refine'
         "refine'"
         (Term.app
          (Term.proj (Term.app `cyclotomic.monic [`p (termℤ "ℤ")]) "." `comp)
          [(Term.app `monic_X_add_C [(num "1")])
           (Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))]))
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `nat_degree_X_add_C)] "]")
         [(Tactic.location "at" (Tactic.locationHyp [`h] []))])
        []
        (Tactic.exact "exact" (Term.app `zero_ne_one [`h.symm]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `zero_ne_one [`h.symm]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `zero_ne_one [`h.symm])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h.symm
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `zero_ne_one
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `nat_degree_X_add_C)] "]")
       [(Tactic.location "at" (Tactic.locationHyp [`h] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `nat_degree_X_add_C
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        (Term.proj (Term.app `cyclotomic.monic [`p (termℤ "ℤ")]) "." `comp)
        [(Term.app `monic_X_add_C [(num "1")])
         (Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `cyclotomic.monic [`p (termℤ "ℤ")]) "." `comp)
       [(Term.app `monic_X_add_C [(num "1")])
        (Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.app `monic_X_add_C [(num "1")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `monic_X_add_C
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `monic_X_add_C [(num "1")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `cyclotomic.monic [`p (termℤ "ℤ")]) "." `comp)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `cyclotomic.monic [`p (termℤ "ℤ")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'termℤ', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'termℤ', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (termℤ "ℤ")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `p
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `cyclotomic.monic
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `cyclotomic.monic [`p (termℤ "ℤ")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule
          []
          (Term.show
           "show"
           («term_=_»
            (Term.typeAscription
             "("
             («term_+_» `X "+" (num "1"))
             ":"
             [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
             ")")
            "="
            («term_+_» `X "+" (Term.app `C [(num "1")])))
           (Term.byTactic'
            "by"
            (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])])))))]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.show
       "show"
       («term_=_»
        (Term.typeAscription
         "("
         («term_+_» `X "+" (num "1"))
         ":"
         [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
         ")")
        "="
        («term_+_» `X "+" (Term.app `C [(num "1")])))
       (Term.byTactic'
        "by"
        (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic'', expected 'Lean.Parser.Term.fromTerm'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp "simp" [] [] [] [] [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      («term_=_»
       (Term.typeAscription
        "("
        («term_+_» `X "+" (num "1"))
        ":"
        [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
        ")")
       "="
       («term_+_» `X "+" (Term.app `C [(num "1")])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `X "+" (Term.app `C [(num "1")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `C [(num "1")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `C
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `X
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.typeAscription
       "("
       («term_+_» `X "+" (num "1"))
       ":"
       [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
       ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 9000, term))
      (termℤ "ℤ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 9000, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 9000, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `X "+" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `X
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `monic.is_eisenstein_at_of_mem_of_not_mem
        [(Term.hole "_")
         («term_<|_»
          `Ideal.IsPrime.ne_top
          "<|"
          («term_<|_»
           (Term.proj
            (Term.app
             `Ideal.span_singleton_prime
             [(Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.NormCast.tacticExact_mod_cast_ "exact_mod_cast" `hp.out.ne_zero)])))])
            "."
            (fieldIdx "2"))
           "<|"
           (Term.app (Term.proj `Nat.prime_iff_prime_int "." (fieldIdx "1")) [`hp.out])))
         (Term.fun "fun" (Term.basicFun [`i `hi] [] "=>" (Term.hole "_")))
         (Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `monic.is_eisenstein_at_of_mem_of_not_mem
       [(Term.hole "_")
        («term_<|_»
         `Ideal.IsPrime.ne_top
         "<|"
         («term_<|_»
          (Term.proj
           (Term.app
            `Ideal.span_singleton_prime
            [(Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.NormCast.tacticExact_mod_cast_ "exact_mod_cast" `hp.out.ne_zero)])))])
           "."
           (fieldIdx "2"))
          "<|"
          (Term.app (Term.proj `Nat.prime_iff_prime_int "." (fieldIdx "1")) [`hp.out])))
        (Term.fun "fun" (Term.basicFun [`i `hi] [] "=>" (Term.hole "_")))
        (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.fun "fun" (Term.basicFun [`i `hi] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun "fun" (Term.basicFun [`i `hi] [] "=>" (Term.hole "_")))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      («term_<|_»
       `Ideal.IsPrime.ne_top
       "<|"
       («term_<|_»
        (Term.proj
         (Term.app
          `Ideal.span_singleton_prime
          [(Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.NormCast.tacticExact_mod_cast_ "exact_mod_cast" `hp.out.ne_zero)])))])
         "."
         (fieldIdx "2"))
        "<|"
        (Term.app (Term.proj `Nat.prime_iff_prime_int "." (fieldIdx "1")) [`hp.out])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_»
       (Term.proj
        (Term.app
         `Ideal.span_singleton_prime
         [(Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(Tactic.NormCast.tacticExact_mod_cast_ "exact_mod_cast" `hp.out.ne_zero)])))])
        "."
        (fieldIdx "2"))
       "<|"
       (Term.app (Term.proj `Nat.prime_iff_prime_int "." (fieldIdx "1")) [`hp.out]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `Nat.prime_iff_prime_int "." (fieldIdx "1")) [`hp.out])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hp.out
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `Nat.prime_iff_prime_int "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `Nat.prime_iff_prime_int
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj
       (Term.app
        `Ideal.span_singleton_prime
        [(Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.NormCast.tacticExact_mod_cast_ "exact_mod_cast" `hp.out.ne_zero)])))])
       "."
       (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `Ideal.span_singleton_prime
       [(Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(Tactic.NormCast.tacticExact_mod_cast_ "exact_mod_cast" `hp.out.ne_zero)])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.NormCast.tacticExact_mod_cast_ "exact_mod_cast" `hp.out.ne_zero)])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.NormCast.tacticExact_mod_cast_ "exact_mod_cast" `hp.out.ne_zero)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hp.out.ne_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0,
     tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(Tactic.NormCast.tacticExact_mod_cast_ "exact_mod_cast" `hp.out.ne_zero)])))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ideal.span_singleton_prime
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `Ideal.span_singleton_prime
      [(Term.paren
        "("
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(Tactic.NormCast.tacticExact_mod_cast_ "exact_mod_cast" `hp.out.ne_zero)])))
        ")")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      `Ideal.IsPrime.ne_top
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 10, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_<|_»
      `Ideal.IsPrime.ne_top
      "<|"
      («term_<|_»
       (Term.proj
        (Term.paren
         "("
         (Term.app
          `Ideal.span_singleton_prime
          [(Term.paren
            "("
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(Tactic.NormCast.tacticExact_mod_cast_ "exact_mod_cast" `hp.out.ne_zero)])))
            ")")])
         ")")
        "."
        (fieldIdx "2"))
       "<|"
       (Term.app (Term.proj `Nat.prime_iff_prime_int "." (fieldIdx "1")) [`hp.out])))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `monic.is_eisenstein_at_of_mem_of_not_mem
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (Term.app
       (Term.proj
        (Term.app
         (Term.proj (Term.app `cyclotomic [`p (termℤ "ℤ")]) "." `comp)
         [(«term_+_» `X "+" (num "1"))])
        "."
        `IsEisensteinAt)
       [(RingTheory.Polynomial.Eisenstein.term𝓟 "𝓟")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'RingTheory.Polynomial.Eisenstein.term𝓟', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'RingTheory.Polynomial.Eisenstein.term𝓟', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (RingTheory.Polynomial.Eisenstein.term𝓟 "𝓟")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'RingTheory.Polynomial.Eisenstein.term𝓟', expected 'RingTheory.Polynomial.Eisenstein.term𝓟._@.RingTheory.Polynomial.Eisenstein._hyg.809'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  cyclotomicCompXAddOneIsEisensteinAt
  [ hp : Fact p . Prime ] : cyclotomic p ℤ . comp X + 1 . IsEisensteinAt 𝓟
  :=
    by
      refine'
          monic.is_eisenstein_at_of_mem_of_not_mem
            _
              Ideal.IsPrime.ne_top
                <|
                Ideal.span_singleton_prime by exact_mod_cast hp.out.ne_zero . 2
                  <|
                  Nat.prime_iff_prime_int . 1 hp.out
              fun i hi => _
              _
        ·
          rw [ show ( X + 1 : ℤ [X] ) = X + C 1 by simp ]
            refine' cyclotomic.monic p ℤ . comp monic_X_add_C 1 fun h => _
            rw [ nat_degree_X_add_C ] at h
            exact zero_ne_one h.symm
        ·
          rw
              [
                cyclotomic_prime
                  ,
                  geom_sum_X_comp_X_add_one_eq_sum
                  ,
                  ← lcoeff_apply
                  ,
                  LinearMap.map_sum
                ]
            conv
              =>
              congr
                congr
                skip
                ext
                rw [ lcoeff_apply , ← C_eq_nat_cast , C_mul_X_pow_eq_monomial , coeff_monomial ]
            rw
              [
                nat_degree_comp
                  ,
                  show ( X + 1 : ℤ [X] ) = X + C 1 by simp
                  ,
                  nat_degree_X_add_C
                  ,
                  mul_one
                  ,
                  nat_degree_cyclotomic
                  ,
                  Nat.totient_prime hp.out
                ]
              at hi
            simp
              only
              [
                lt_of_lt_of_le hi Nat.sub_le _ _
                  ,
                  sum_ite_eq'
                  ,
                  mem_range
                  ,
                  if_true
                  ,
                  Ideal.submodule_span_eq
                  ,
                  Ideal.mem_span_singleton
                ]
            exact
              Int.coe_nat_dvd . 2
                Nat.Prime.dvd_choose_self Nat.succ_pos i lt_tsub_iff_right . 1 hi hp.out
        ·
          rw
              [
                coeff_zero_eq_eval_zero
                  ,
                  eval_comp
                  ,
                  cyclotomic_prime
                  ,
                  eval_add
                  ,
                  eval_X
                  ,
                  eval_one
                  ,
                  zero_add
                  ,
                  eval_geom_sum
                  ,
                  one_geom_sum
                  ,
                  Ideal.submodule_span_eq
                  ,
                  Ideal.span_singleton_pow
                  ,
                  Ideal.mem_span_singleton
                ]
            intro h
            obtain ⟨ k , hk ⟩ := Int.coe_nat_dvd . 1 h
            rw [ ← mul_assoc , mul_one , mul_assoc ] at hk
            nth_rw 1 [ ← Nat.mul_one p ] at hk
            rw [ mul_right_inj' hp.out.ne_zero ] at hk
            exact Nat.Prime.not_dvd_one hp.out Dvd.intro k hk.symm
#align cyclotomic_comp_X_add_one_is_eisenstein_at cyclotomicCompXAddOneIsEisensteinAt

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers [] [] [] [] [] [])
     (Command.theorem
      "theorem"
      (Command.declId `cyclotomicPrimePowCompXAddOneIsEisensteinAt [])
      (Command.declSig
       [(Term.instBinder "[" [`hp ":"] (Term.app `Fact [(Term.proj `p "." `Prime)]) "]")
        (Term.explicitBinder "(" [`n] [":" (termℕ "ℕ")] [] ")")]
       (Term.typeSpec
        ":"
        (Term.app
         (Term.proj
          (Term.app
           (Term.proj
            (Term.app `cyclotomic [(«term_^_» `p "^" («term_+_» `n "+" (num "1"))) (termℤ "ℤ")])
            "."
            `comp)
           [(«term_+_» `X "+" (num "1"))])
          "."
          `IsEisensteinAt)
         [(RingTheory.Polynomial.Eisenstein.term𝓟 "𝓟")])))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.refine'
            "refine'"
            (Term.app
             `monic.is_eisenstein_at_of_mem_of_not_mem
             [(Term.hole "_")
              («term_<|_»
               `Ideal.IsPrime.ne_top
               "<|"
               («term_<|_»
                (Term.proj
                 (Term.app
                  `Ideal.span_singleton_prime
                  [(Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(Tactic.NormCast.tacticExact_mod_cast_
                        "exact_mod_cast"
                        `hp.out.ne_zero)])))])
                 "."
                 (fieldIdx "2"))
                "<|"
                (Term.app (Term.proj `Nat.prime_iff_prime_int "." (fieldIdx "1")) [`hp.out])))
              (Term.hole "_")
              (Term.hole "_")]))
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule
                 []
                 (Term.show
                  "show"
                  («term_=_»
                   (Term.typeAscription
                    "("
                    («term_+_» `X "+" (num "1"))
                    ":"
                    [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
                    ")")
                   "="
                   («term_+_» `X "+" (Term.app `C [(num "1")])))
                  (Term.byTactic'
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])])))))]
               "]")
              [])
             []
             (Tactic.refine'
              "refine'"
              (Term.app
               (Term.proj (Term.app `cyclotomic.monic [(Term.hole "_") (termℤ "ℤ")]) "." `comp)
               [(Term.app `monic_X_add_C [(num "1")])
                (Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))]))
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `nat_degree_X_add_C)] "]")
              [(Tactic.location "at" (Tactic.locationHyp [`h] []))])
             []
             (Tactic.exact "exact" (Term.app `zero_ne_one [`h.symm]))])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.induction'
              "induction'"
              [(Tactic.casesTarget [] `n)]
              []
              ["with" [(Lean.binderIdent `n) (Lean.binderIdent `hn)]]
              [])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.intro "intro" [`i `hi])
               []
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] `zero_add) "," (Tactic.rwRule [] `pow_one)]
                 "]")
                [(Tactic.location
                  "at"
                  (Tactic.locationHyp [`hi] [(patternIgnore (token.«⊢» "⊢"))]))])
               []
               (Tactic.exact
                "exact"
                (Term.app
                 (Term.proj (Term.app `cyclotomicCompXAddOneIsEisensteinAt [`p]) "." `Mem)
                 [`hi]))])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.intro "intro" [`i `hi])
               []
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] `Ideal.submodule_span_eq)
                  ","
                  (Tactic.rwRule [] `Ideal.mem_span_singleton)
                  ","
                  (Tactic.rwRule
                   [(patternIgnore (token.«← » "←"))]
                   `Zmod.int_coe_zmod_eq_zero_iff_dvd)
                  ","
                  (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Int.coe_castRingHom)
                  ","
                  (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `coeff_map)
                  ","
                  (Tactic.rwRule [] `map_comp)
                  ","
                  (Tactic.rwRule [] `map_cyclotomic)
                  ","
                  (Tactic.rwRule [] `Polynomial.map_add)
                  ","
                  (Tactic.rwRule [] `map_X)
                  ","
                  (Tactic.rwRule [] `Polynomial.map_one)
                  ","
                  (Tactic.rwRule [] `pow_add)
                  ","
                  (Tactic.rwRule [] `pow_one)
                  ","
                  (Tactic.rwRule [] `cyclotomic_mul_prime_dvd_eq_pow)
                  ","
                  (Tactic.rwRule [] `pow_comp)
                  ","
                  (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Zmod.expand_card)
                  ","
                  (Tactic.rwRule [] (Term.app `coeff_expand [`hp.out.pos]))]
                 "]")
                [])
               []
               (tactic__
                (cdotTk (patternIgnore (token.«· » "·")))
                [(Tactic.simp
                  "simp"
                  []
                  []
                  ["only"]
                  ["[" [(Tactic.simpLemma [] [] `ite_eq_right_iff)] "]"]
                  [])
                 []
                 (Std.Tactic.rintro
                  "rintro"
                  [(Std.Tactic.RCases.rintroPat.one
                    (Std.Tactic.RCases.rcasesPat.tuple
                     "⟨"
                     [(Std.Tactic.RCases.rcasesPatLo
                       (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `k)])
                       [])
                      ","
                      (Std.Tactic.RCases.rcasesPatLo
                       (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hk)])
                       [])]
                     "⟩"))]
                  [])
                 []
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule [] `nat_degree_comp)
                    ","
                    (Tactic.rwRule
                     []
                     (Term.show
                      "show"
                      («term_=_»
                       (Term.typeAscription
                        "("
                        («term_+_» `X "+" (num "1"))
                        ":"
                        [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
                        ")")
                       "="
                       («term_+_» `X "+" (Term.app `C [(num "1")])))
                      (Term.byTactic'
                       "by"
                       (Tactic.tacticSeq
                        (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])])))))
                    ","
                    (Tactic.rwRule [] `nat_degree_X_add_C)
                    ","
                    (Tactic.rwRule [] `mul_one)
                    ","
                    (Tactic.rwRule [] `nat_degree_cyclotomic)
                    ","
                    (Tactic.rwRule
                     []
                     (Term.app
                      `Nat.totient_prime_pow
                      [`hp.out (Term.app `Nat.succ_pos [(Term.hole "_")])]))
                    ","
                    (Tactic.rwRule [] `Nat.succ_sub_one)]
                   "]")
                  [(Tactic.location "at" (Tactic.locationHyp [`hn `hi] []))])
                 []
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule [] `hk)
                    ","
                    (Tactic.rwRule [] `pow_succ)
                    ","
                    (Tactic.rwRule [] `mul_assoc)]
                   "]")
                  [(Tactic.location "at" (Tactic.locationHyp [`hi] []))])
                 []
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule [] `hk)
                    ","
                    (Tactic.rwRule [] `mul_comm)
                    ","
                    (Tactic.rwRule [] (Term.app `Nat.mul_div_cancel [(Term.hole "_") `hp.out.pos]))]
                   "]")
                  [])
                 []
                 (Mathlib.Tactic.tacticReplace_
                  "replace"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`hn []]
                    []
                    ":="
                    (Term.app `hn [(Term.app `lt_of_mul_lt_mul_left' [`hi])]))))
                 []
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule [] `Ideal.submodule_span_eq)
                    ","
                    (Tactic.rwRule [] `Ideal.mem_span_singleton)
                    ","
                    (Tactic.rwRule
                     [(patternIgnore (token.«← » "←"))]
                     `Zmod.int_coe_zmod_eq_zero_iff_dvd)
                    ","
                    (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Int.coe_castRingHom)
                    ","
                    (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `coeff_map)]
                   "]")
                  [(Tactic.location "at" (Tactic.locationHyp [`hn] []))])
                 []
                 (Std.Tactic.Simpa.simpa
                  "simpa"
                  []
                  []
                  (Std.Tactic.Simpa.simpaArgsRest
                   []
                   []
                   []
                   [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `map_comp)] "]")]
                   ["using" `hn]))])
               []
               (tactic__
                (cdotTk (patternIgnore (token.«· » "·")))
                [(Tactic.exact
                  "exact"
                  (Term.anonymousCtor
                   "⟨"
                   [(«term_^_» `p "^" `n)
                    ","
                    (Term.byTactic
                     "by"
                     (Tactic.tacticSeq
                      (Tactic.tacticSeq1Indented
                       [(Tactic.rwSeq
                         "rw"
                         []
                         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `pow_succ)] "]")
                         [])])))]
                   "⟩"))])])])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `coeff_zero_eq_eval_zero)
                ","
                (Tactic.rwRule [] `eval_comp)
                ","
                (Tactic.rwRule [] (Term.app `cyclotomic_prime_pow_eq_geom_sum [`hp.out]))
                ","
                (Tactic.rwRule [] `eval_add)
                ","
                (Tactic.rwRule [] `eval_X)
                ","
                (Tactic.rwRule [] `eval_one)
                ","
                (Tactic.rwRule [] `zero_add)
                ","
                (Tactic.rwRule [] `eval_finset_sum)]
               "]")
              [])
             []
             (Tactic.simp
              "simp"
              []
              []
              ["only"]
              ["["
               [(Tactic.simpLemma [] [] `eval_pow)
                ","
                (Tactic.simpLemma [] [] `eval_X)
                ","
                (Tactic.simpLemma [] [] `one_pow)
                ","
                (Tactic.simpLemma [] [] `sum_const)
                ","
                (Tactic.simpLemma [] [] `card_range)
                ","
                (Tactic.simpLemma [] [] `Nat.smul_one_eq_coe)
                ","
                (Tactic.simpLemma [] [] `submodule_span_eq)
                ","
                (Tactic.simpLemma [] [] `Ideal.submodule_span_eq)
                ","
                (Tactic.simpLemma [] [] `Ideal.span_singleton_pow)
                ","
                (Tactic.simpLemma [] [] `Ideal.mem_span_singleton)]
               "]"]
              [])
             []
             (Tactic.intro "intro" [`h])
             []
             (Std.Tactic.obtain
              "obtain"
              [(Std.Tactic.RCases.rcasesPatMed
                [(Std.Tactic.RCases.rcasesPat.tuple
                  "⟨"
                  [(Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `k)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hk)])
                    [])]
                  "⟩")])]
              []
              [":=" [(Term.app (Term.proj `Int.coe_nat_dvd "." (fieldIdx "1")) [`h])]])
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `mul_assoc)
                ","
                (Tactic.rwRule [] `mul_one)
                ","
                (Tactic.rwRule [] `mul_assoc)]
               "]")
              [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
             []
             (Mathlib.Tactic.nthRwSeq
              "nth_rw"
              []
              (num "1")
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] (Term.app `Nat.mul_one [`p]))]
               "]")
              [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] (Term.app `mul_right_inj' [`hp.out.ne_zero]))]
               "]")
              [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
             []
             (Tactic.exact
              "exact"
              (Term.app `Nat.Prime.not_dvd_one [`hp.out (Term.app `Dvd.intro [`k `hk.symm])]))])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.refine'
           "refine'"
           (Term.app
            `monic.is_eisenstein_at_of_mem_of_not_mem
            [(Term.hole "_")
             («term_<|_»
              `Ideal.IsPrime.ne_top
              "<|"
              («term_<|_»
               (Term.proj
                (Term.app
                 `Ideal.span_singleton_prime
                 [(Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(Tactic.NormCast.tacticExact_mod_cast_ "exact_mod_cast" `hp.out.ne_zero)])))])
                "."
                (fieldIdx "2"))
               "<|"
               (Term.app (Term.proj `Nat.prime_iff_prime_int "." (fieldIdx "1")) [`hp.out])))
             (Term.hole "_")
             (Term.hole "_")]))
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule
                []
                (Term.show
                 "show"
                 («term_=_»
                  (Term.typeAscription
                   "("
                   («term_+_» `X "+" (num "1"))
                   ":"
                   [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
                   ")")
                  "="
                  («term_+_» `X "+" (Term.app `C [(num "1")])))
                 (Term.byTactic'
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])])))))]
              "]")
             [])
            []
            (Tactic.refine'
             "refine'"
             (Term.app
              (Term.proj (Term.app `cyclotomic.monic [(Term.hole "_") (termℤ "ℤ")]) "." `comp)
              [(Term.app `monic_X_add_C [(num "1")])
               (Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))]))
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `nat_degree_X_add_C)] "]")
             [(Tactic.location "at" (Tactic.locationHyp [`h] []))])
            []
            (Tactic.exact "exact" (Term.app `zero_ne_one [`h.symm]))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.induction'
             "induction'"
             [(Tactic.casesTarget [] `n)]
             []
             ["with" [(Lean.binderIdent `n) (Lean.binderIdent `hn)]]
             [])
            []
            (tactic__
             (cdotTk (patternIgnore (token.«· » "·")))
             [(Tactic.intro "intro" [`i `hi])
              []
              (Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule [] `zero_add) "," (Tactic.rwRule [] `pow_one)]
                "]")
               [(Tactic.location
                 "at"
                 (Tactic.locationHyp [`hi] [(patternIgnore (token.«⊢» "⊢"))]))])
              []
              (Tactic.exact
               "exact"
               (Term.app
                (Term.proj (Term.app `cyclotomicCompXAddOneIsEisensteinAt [`p]) "." `Mem)
                [`hi]))])
            []
            (tactic__
             (cdotTk (patternIgnore (token.«· » "·")))
             [(Tactic.intro "intro" [`i `hi])
              []
              (Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule [] `Ideal.submodule_span_eq)
                 ","
                 (Tactic.rwRule [] `Ideal.mem_span_singleton)
                 ","
                 (Tactic.rwRule
                  [(patternIgnore (token.«← » "←"))]
                  `Zmod.int_coe_zmod_eq_zero_iff_dvd)
                 ","
                 (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Int.coe_castRingHom)
                 ","
                 (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `coeff_map)
                 ","
                 (Tactic.rwRule [] `map_comp)
                 ","
                 (Tactic.rwRule [] `map_cyclotomic)
                 ","
                 (Tactic.rwRule [] `Polynomial.map_add)
                 ","
                 (Tactic.rwRule [] `map_X)
                 ","
                 (Tactic.rwRule [] `Polynomial.map_one)
                 ","
                 (Tactic.rwRule [] `pow_add)
                 ","
                 (Tactic.rwRule [] `pow_one)
                 ","
                 (Tactic.rwRule [] `cyclotomic_mul_prime_dvd_eq_pow)
                 ","
                 (Tactic.rwRule [] `pow_comp)
                 ","
                 (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Zmod.expand_card)
                 ","
                 (Tactic.rwRule [] (Term.app `coeff_expand [`hp.out.pos]))]
                "]")
               [])
              []
              (tactic__
               (cdotTk (patternIgnore (token.«· » "·")))
               [(Tactic.simp
                 "simp"
                 []
                 []
                 ["only"]
                 ["[" [(Tactic.simpLemma [] [] `ite_eq_right_iff)] "]"]
                 [])
                []
                (Std.Tactic.rintro
                 "rintro"
                 [(Std.Tactic.RCases.rintroPat.one
                   (Std.Tactic.RCases.rcasesPat.tuple
                    "⟨"
                    [(Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `k)])
                      [])
                     ","
                     (Std.Tactic.RCases.rcasesPatLo
                      (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hk)])
                      [])]
                    "⟩"))]
                 [])
                []
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule [] `nat_degree_comp)
                   ","
                   (Tactic.rwRule
                    []
                    (Term.show
                     "show"
                     («term_=_»
                      (Term.typeAscription
                       "("
                       («term_+_» `X "+" (num "1"))
                       ":"
                       [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
                       ")")
                      "="
                      («term_+_» `X "+" (Term.app `C [(num "1")])))
                     (Term.byTactic'
                      "by"
                      (Tactic.tacticSeq
                       (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])])))))
                   ","
                   (Tactic.rwRule [] `nat_degree_X_add_C)
                   ","
                   (Tactic.rwRule [] `mul_one)
                   ","
                   (Tactic.rwRule [] `nat_degree_cyclotomic)
                   ","
                   (Tactic.rwRule
                    []
                    (Term.app
                     `Nat.totient_prime_pow
                     [`hp.out (Term.app `Nat.succ_pos [(Term.hole "_")])]))
                   ","
                   (Tactic.rwRule [] `Nat.succ_sub_one)]
                  "]")
                 [(Tactic.location "at" (Tactic.locationHyp [`hn `hi] []))])
                []
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule [] `hk)
                   ","
                   (Tactic.rwRule [] `pow_succ)
                   ","
                   (Tactic.rwRule [] `mul_assoc)]
                  "]")
                 [(Tactic.location "at" (Tactic.locationHyp [`hi] []))])
                []
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule [] `hk)
                   ","
                   (Tactic.rwRule [] `mul_comm)
                   ","
                   (Tactic.rwRule [] (Term.app `Nat.mul_div_cancel [(Term.hole "_") `hp.out.pos]))]
                  "]")
                 [])
                []
                (Mathlib.Tactic.tacticReplace_
                 "replace"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   [`hn []]
                   []
                   ":="
                   (Term.app `hn [(Term.app `lt_of_mul_lt_mul_left' [`hi])]))))
                []
                (Tactic.rwSeq
                 "rw"
                 []
                 (Tactic.rwRuleSeq
                  "["
                  [(Tactic.rwRule [] `Ideal.submodule_span_eq)
                   ","
                   (Tactic.rwRule [] `Ideal.mem_span_singleton)
                   ","
                   (Tactic.rwRule
                    [(patternIgnore (token.«← » "←"))]
                    `Zmod.int_coe_zmod_eq_zero_iff_dvd)
                   ","
                   (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Int.coe_castRingHom)
                   ","
                   (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `coeff_map)]
                  "]")
                 [(Tactic.location "at" (Tactic.locationHyp [`hn] []))])
                []
                (Std.Tactic.Simpa.simpa
                 "simpa"
                 []
                 []
                 (Std.Tactic.Simpa.simpaArgsRest
                  []
                  []
                  []
                  [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `map_comp)] "]")]
                  ["using" `hn]))])
              []
              (tactic__
               (cdotTk (patternIgnore (token.«· » "·")))
               [(Tactic.exact
                 "exact"
                 (Term.anonymousCtor
                  "⟨"
                  [(«term_^_» `p "^" `n)
                   ","
                   (Term.byTactic
                    "by"
                    (Tactic.tacticSeq
                     (Tactic.tacticSeq1Indented
                      [(Tactic.rwSeq
                        "rw"
                        []
                        (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `pow_succ)] "]")
                        [])])))]
                  "⟩"))])])])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `coeff_zero_eq_eval_zero)
               ","
               (Tactic.rwRule [] `eval_comp)
               ","
               (Tactic.rwRule [] (Term.app `cyclotomic_prime_pow_eq_geom_sum [`hp.out]))
               ","
               (Tactic.rwRule [] `eval_add)
               ","
               (Tactic.rwRule [] `eval_X)
               ","
               (Tactic.rwRule [] `eval_one)
               ","
               (Tactic.rwRule [] `zero_add)
               ","
               (Tactic.rwRule [] `eval_finset_sum)]
              "]")
             [])
            []
            (Tactic.simp
             "simp"
             []
             []
             ["only"]
             ["["
              [(Tactic.simpLemma [] [] `eval_pow)
               ","
               (Tactic.simpLemma [] [] `eval_X)
               ","
               (Tactic.simpLemma [] [] `one_pow)
               ","
               (Tactic.simpLemma [] [] `sum_const)
               ","
               (Tactic.simpLemma [] [] `card_range)
               ","
               (Tactic.simpLemma [] [] `Nat.smul_one_eq_coe)
               ","
               (Tactic.simpLemma [] [] `submodule_span_eq)
               ","
               (Tactic.simpLemma [] [] `Ideal.submodule_span_eq)
               ","
               (Tactic.simpLemma [] [] `Ideal.span_singleton_pow)
               ","
               (Tactic.simpLemma [] [] `Ideal.mem_span_singleton)]
              "]"]
             [])
            []
            (Tactic.intro "intro" [`h])
            []
            (Std.Tactic.obtain
             "obtain"
             [(Std.Tactic.RCases.rcasesPatMed
               [(Std.Tactic.RCases.rcasesPat.tuple
                 "⟨"
                 [(Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `k)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hk)])
                   [])]
                 "⟩")])]
             []
             [":=" [(Term.app (Term.proj `Int.coe_nat_dvd "." (fieldIdx "1")) [`h])]])
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `mul_assoc)
               ","
               (Tactic.rwRule [] `mul_one)
               ","
               (Tactic.rwRule [] `mul_assoc)]
              "]")
             [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
            []
            (Mathlib.Tactic.nthRwSeq
             "nth_rw"
             []
             (num "1")
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] (Term.app `Nat.mul_one [`p]))]
              "]")
             [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] (Term.app `mul_right_inj' [`hp.out.ne_zero]))]
              "]")
             [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
            []
            (Tactic.exact
             "exact"
             (Term.app `Nat.Prime.not_dvd_one [`hp.out (Term.app `Dvd.intro [`k `hk.symm])]))])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `coeff_zero_eq_eval_zero)
           ","
           (Tactic.rwRule [] `eval_comp)
           ","
           (Tactic.rwRule [] (Term.app `cyclotomic_prime_pow_eq_geom_sum [`hp.out]))
           ","
           (Tactic.rwRule [] `eval_add)
           ","
           (Tactic.rwRule [] `eval_X)
           ","
           (Tactic.rwRule [] `eval_one)
           ","
           (Tactic.rwRule [] `zero_add)
           ","
           (Tactic.rwRule [] `eval_finset_sum)]
          "]")
         [])
        []
        (Tactic.simp
         "simp"
         []
         []
         ["only"]
         ["["
          [(Tactic.simpLemma [] [] `eval_pow)
           ","
           (Tactic.simpLemma [] [] `eval_X)
           ","
           (Tactic.simpLemma [] [] `one_pow)
           ","
           (Tactic.simpLemma [] [] `sum_const)
           ","
           (Tactic.simpLemma [] [] `card_range)
           ","
           (Tactic.simpLemma [] [] `Nat.smul_one_eq_coe)
           ","
           (Tactic.simpLemma [] [] `submodule_span_eq)
           ","
           (Tactic.simpLemma [] [] `Ideal.submodule_span_eq)
           ","
           (Tactic.simpLemma [] [] `Ideal.span_singleton_pow)
           ","
           (Tactic.simpLemma [] [] `Ideal.mem_span_singleton)]
          "]"]
         [])
        []
        (Tactic.intro "intro" [`h])
        []
        (Std.Tactic.obtain
         "obtain"
         [(Std.Tactic.RCases.rcasesPatMed
           [(Std.Tactic.RCases.rcasesPat.tuple
             "⟨"
             [(Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `k)])
               [])
              ","
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hk)])
               [])]
             "⟩")])]
         []
         [":=" [(Term.app (Term.proj `Int.coe_nat_dvd "." (fieldIdx "1")) [`h])]])
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `mul_assoc)
           ","
           (Tactic.rwRule [] `mul_one)
           ","
           (Tactic.rwRule [] `mul_assoc)]
          "]")
         [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
        []
        (Mathlib.Tactic.nthRwSeq
         "nth_rw"
         []
         (num "1")
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] (Term.app `Nat.mul_one [`p]))]
          "]")
         [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] (Term.app `mul_right_inj' [`hp.out.ne_zero]))]
          "]")
         [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
        []
        (Tactic.exact
         "exact"
         (Term.app `Nat.Prime.not_dvd_one [`hp.out (Term.app `Dvd.intro [`k `hk.symm])]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app `Nat.Prime.not_dvd_one [`hp.out (Term.app `Dvd.intro [`k `hk.symm])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Nat.Prime.not_dvd_one [`hp.out (Term.app `Dvd.intro [`k `hk.symm])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Dvd.intro [`k `hk.symm])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hk.symm
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Dvd.intro
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `Dvd.intro [`k `hk.symm]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hp.out
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Nat.Prime.not_dvd_one
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `mul_right_inj' [`hp.out.ne_zero]))] "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hk
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `mul_right_inj' [`hp.out.ne_zero])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hp.out.ne_zero
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_right_inj'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.nthRwSeq
       "nth_rw"
       []
       (num "1")
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] (Term.app `Nat.mul_one [`p]))]
        "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hk
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Nat.mul_one [`p])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `p
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Nat.mul_one
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `mul_assoc)
         ","
         (Tactic.rwRule [] `mul_one)
         ","
         (Tactic.rwRule [] `mul_assoc)]
        "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hk
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_assoc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_one
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_assoc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.obtain
       "obtain"
       [(Std.Tactic.RCases.rcasesPatMed
         [(Std.Tactic.RCases.rcasesPat.tuple
           "⟨"
           [(Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `k)])
             [])
            ","
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hk)])
             [])]
           "⟩")])]
       []
       [":=" [(Term.app (Term.proj `Int.coe_nat_dvd "." (fieldIdx "1")) [`h])]])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `Int.coe_nat_dvd "." (fieldIdx "1")) [`h])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `Int.coe_nat_dvd "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `Int.coe_nat_dvd
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`h])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       ["only"]
       ["["
        [(Tactic.simpLemma [] [] `eval_pow)
         ","
         (Tactic.simpLemma [] [] `eval_X)
         ","
         (Tactic.simpLemma [] [] `one_pow)
         ","
         (Tactic.simpLemma [] [] `sum_const)
         ","
         (Tactic.simpLemma [] [] `card_range)
         ","
         (Tactic.simpLemma [] [] `Nat.smul_one_eq_coe)
         ","
         (Tactic.simpLemma [] [] `submodule_span_eq)
         ","
         (Tactic.simpLemma [] [] `Ideal.submodule_span_eq)
         ","
         (Tactic.simpLemma [] [] `Ideal.span_singleton_pow)
         ","
         (Tactic.simpLemma [] [] `Ideal.mem_span_singleton)]
        "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Ideal.mem_span_singleton
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Ideal.span_singleton_pow
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Ideal.submodule_span_eq
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `submodule_span_eq
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Nat.smul_one_eq_coe
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `card_range
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `sum_const
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `one_pow
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eval_X
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eval_pow
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `coeff_zero_eq_eval_zero)
         ","
         (Tactic.rwRule [] `eval_comp)
         ","
         (Tactic.rwRule [] (Term.app `cyclotomic_prime_pow_eq_geom_sum [`hp.out]))
         ","
         (Tactic.rwRule [] `eval_add)
         ","
         (Tactic.rwRule [] `eval_X)
         ","
         (Tactic.rwRule [] `eval_one)
         ","
         (Tactic.rwRule [] `zero_add)
         ","
         (Tactic.rwRule [] `eval_finset_sum)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eval_finset_sum
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `zero_add
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eval_one
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eval_X
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eval_add
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `cyclotomic_prime_pow_eq_geom_sum [`hp.out])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hp.out
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `cyclotomic_prime_pow_eq_geom_sum
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `eval_comp
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `coeff_zero_eq_eval_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.induction'
         "induction'"
         [(Tactic.casesTarget [] `n)]
         []
         ["with" [(Lean.binderIdent `n) (Lean.binderIdent `hn)]]
         [])
        []
        (tactic__
         (cdotTk (patternIgnore (token.«· » "·")))
         [(Tactic.intro "intro" [`i `hi])
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `zero_add) "," (Tactic.rwRule [] `pow_one)] "]")
           [(Tactic.location "at" (Tactic.locationHyp [`hi] [(patternIgnore (token.«⊢» "⊢"))]))])
          []
          (Tactic.exact
           "exact"
           (Term.app
            (Term.proj (Term.app `cyclotomicCompXAddOneIsEisensteinAt [`p]) "." `Mem)
            [`hi]))])
        []
        (tactic__
         (cdotTk (patternIgnore (token.«· » "·")))
         [(Tactic.intro "intro" [`i `hi])
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `Ideal.submodule_span_eq)
             ","
             (Tactic.rwRule [] `Ideal.mem_span_singleton)
             ","
             (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Zmod.int_coe_zmod_eq_zero_iff_dvd)
             ","
             (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Int.coe_castRingHom)
             ","
             (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `coeff_map)
             ","
             (Tactic.rwRule [] `map_comp)
             ","
             (Tactic.rwRule [] `map_cyclotomic)
             ","
             (Tactic.rwRule [] `Polynomial.map_add)
             ","
             (Tactic.rwRule [] `map_X)
             ","
             (Tactic.rwRule [] `Polynomial.map_one)
             ","
             (Tactic.rwRule [] `pow_add)
             ","
             (Tactic.rwRule [] `pow_one)
             ","
             (Tactic.rwRule [] `cyclotomic_mul_prime_dvd_eq_pow)
             ","
             (Tactic.rwRule [] `pow_comp)
             ","
             (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Zmod.expand_card)
             ","
             (Tactic.rwRule [] (Term.app `coeff_expand [`hp.out.pos]))]
            "]")
           [])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.simp
             "simp"
             []
             []
             ["only"]
             ["[" [(Tactic.simpLemma [] [] `ite_eq_right_iff)] "]"]
             [])
            []
            (Std.Tactic.rintro
             "rintro"
             [(Std.Tactic.RCases.rintroPat.one
               (Std.Tactic.RCases.rcasesPat.tuple
                "⟨"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `k)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hk)])
                  [])]
                "⟩"))]
             [])
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `nat_degree_comp)
               ","
               (Tactic.rwRule
                []
                (Term.show
                 "show"
                 («term_=_»
                  (Term.typeAscription
                   "("
                   («term_+_» `X "+" (num "1"))
                   ":"
                   [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
                   ")")
                  "="
                  («term_+_» `X "+" (Term.app `C [(num "1")])))
                 (Term.byTactic'
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])])))))
               ","
               (Tactic.rwRule [] `nat_degree_X_add_C)
               ","
               (Tactic.rwRule [] `mul_one)
               ","
               (Tactic.rwRule [] `nat_degree_cyclotomic)
               ","
               (Tactic.rwRule
                []
                (Term.app
                 `Nat.totient_prime_pow
                 [`hp.out (Term.app `Nat.succ_pos [(Term.hole "_")])]))
               ","
               (Tactic.rwRule [] `Nat.succ_sub_one)]
              "]")
             [(Tactic.location "at" (Tactic.locationHyp [`hn `hi] []))])
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `hk)
               ","
               (Tactic.rwRule [] `pow_succ)
               ","
               (Tactic.rwRule [] `mul_assoc)]
              "]")
             [(Tactic.location "at" (Tactic.locationHyp [`hi] []))])
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `hk)
               ","
               (Tactic.rwRule [] `mul_comm)
               ","
               (Tactic.rwRule [] (Term.app `Nat.mul_div_cancel [(Term.hole "_") `hp.out.pos]))]
              "]")
             [])
            []
            (Mathlib.Tactic.tacticReplace_
             "replace"
             (Term.haveDecl
              (Term.haveIdDecl
               [`hn []]
               []
               ":="
               (Term.app `hn [(Term.app `lt_of_mul_lt_mul_left' [`hi])]))))
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `Ideal.submodule_span_eq)
               ","
               (Tactic.rwRule [] `Ideal.mem_span_singleton)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Zmod.int_coe_zmod_eq_zero_iff_dvd)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Int.coe_castRingHom)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `coeff_map)]
              "]")
             [(Tactic.location "at" (Tactic.locationHyp [`hn] []))])
            []
            (Std.Tactic.Simpa.simpa
             "simpa"
             []
             []
             (Std.Tactic.Simpa.simpaArgsRest
              []
              []
              []
              [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `map_comp)] "]")]
              ["using" `hn]))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.exact
             "exact"
             (Term.anonymousCtor
              "⟨"
              [(«term_^_» `p "^" `n)
               ","
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `pow_succ)] "]")
                    [])])))]
              "⟩"))])])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.intro "intro" [`i `hi])
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `Ideal.submodule_span_eq)
           ","
           (Tactic.rwRule [] `Ideal.mem_span_singleton)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Zmod.int_coe_zmod_eq_zero_iff_dvd)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Int.coe_castRingHom)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `coeff_map)
           ","
           (Tactic.rwRule [] `map_comp)
           ","
           (Tactic.rwRule [] `map_cyclotomic)
           ","
           (Tactic.rwRule [] `Polynomial.map_add)
           ","
           (Tactic.rwRule [] `map_X)
           ","
           (Tactic.rwRule [] `Polynomial.map_one)
           ","
           (Tactic.rwRule [] `pow_add)
           ","
           (Tactic.rwRule [] `pow_one)
           ","
           (Tactic.rwRule [] `cyclotomic_mul_prime_dvd_eq_pow)
           ","
           (Tactic.rwRule [] `pow_comp)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Zmod.expand_card)
           ","
           (Tactic.rwRule [] (Term.app `coeff_expand [`hp.out.pos]))]
          "]")
         [])
        []
        (tactic__
         (cdotTk (patternIgnore (token.«· » "·")))
         [(Tactic.simp
           "simp"
           []
           []
           ["only"]
           ["[" [(Tactic.simpLemma [] [] `ite_eq_right_iff)] "]"]
           [])
          []
          (Std.Tactic.rintro
           "rintro"
           [(Std.Tactic.RCases.rintroPat.one
             (Std.Tactic.RCases.rcasesPat.tuple
              "⟨"
              [(Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `k)])
                [])
               ","
               (Std.Tactic.RCases.rcasesPatLo
                (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hk)])
                [])]
              "⟩"))]
           [])
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `nat_degree_comp)
             ","
             (Tactic.rwRule
              []
              (Term.show
               "show"
               («term_=_»
                (Term.typeAscription
                 "("
                 («term_+_» `X "+" (num "1"))
                 ":"
                 [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
                 ")")
                "="
                («term_+_» `X "+" (Term.app `C [(num "1")])))
               (Term.byTactic'
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])])))))
             ","
             (Tactic.rwRule [] `nat_degree_X_add_C)
             ","
             (Tactic.rwRule [] `mul_one)
             ","
             (Tactic.rwRule [] `nat_degree_cyclotomic)
             ","
             (Tactic.rwRule
              []
              (Term.app
               `Nat.totient_prime_pow
               [`hp.out (Term.app `Nat.succ_pos [(Term.hole "_")])]))
             ","
             (Tactic.rwRule [] `Nat.succ_sub_one)]
            "]")
           [(Tactic.location "at" (Tactic.locationHyp [`hn `hi] []))])
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `hk)
             ","
             (Tactic.rwRule [] `pow_succ)
             ","
             (Tactic.rwRule [] `mul_assoc)]
            "]")
           [(Tactic.location "at" (Tactic.locationHyp [`hi] []))])
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `hk)
             ","
             (Tactic.rwRule [] `mul_comm)
             ","
             (Tactic.rwRule [] (Term.app `Nat.mul_div_cancel [(Term.hole "_") `hp.out.pos]))]
            "]")
           [])
          []
          (Mathlib.Tactic.tacticReplace_
           "replace"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hn []]
             []
             ":="
             (Term.app `hn [(Term.app `lt_of_mul_lt_mul_left' [`hi])]))))
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `Ideal.submodule_span_eq)
             ","
             (Tactic.rwRule [] `Ideal.mem_span_singleton)
             ","
             (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Zmod.int_coe_zmod_eq_zero_iff_dvd)
             ","
             (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Int.coe_castRingHom)
             ","
             (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `coeff_map)]
            "]")
           [(Tactic.location "at" (Tactic.locationHyp [`hn] []))])
          []
          (Std.Tactic.Simpa.simpa
           "simpa"
           []
           []
           (Std.Tactic.Simpa.simpaArgsRest
            []
            []
            []
            [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `map_comp)] "]")]
            ["using" `hn]))])
        []
        (tactic__
         (cdotTk (patternIgnore (token.«· » "·")))
         [(Tactic.exact
           "exact"
           (Term.anonymousCtor
            "⟨"
            [(«term_^_» `p "^" `n)
             ","
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `pow_succ)] "]")
                  [])])))]
            "⟩"))])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.exact
         "exact"
         (Term.anonymousCtor
          "⟨"
          [(«term_^_» `p "^" `n)
           ","
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `pow_succ)] "]")
                [])])))]
          "⟩"))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.anonymousCtor
        "⟨"
        [(«term_^_» `p "^" `n)
         ","
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `pow_succ)] "]")
              [])])))]
        "⟩"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "⟨"
       [(«term_^_» `p "^" `n)
        ","
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `pow_succ)] "]") [])])))]
       "⟩")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `pow_succ)] "]") [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `pow_succ)] "]") [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `pow_succ
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» `p "^" `n)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `p
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.simp
         "simp"
         []
         []
         ["only"]
         ["[" [(Tactic.simpLemma [] [] `ite_eq_right_iff)] "]"]
         [])
        []
        (Std.Tactic.rintro
         "rintro"
         [(Std.Tactic.RCases.rintroPat.one
           (Std.Tactic.RCases.rcasesPat.tuple
            "⟨"
            [(Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `k)])
              [])
             ","
             (Std.Tactic.RCases.rcasesPatLo
              (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hk)])
              [])]
            "⟩"))]
         [])
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `nat_degree_comp)
           ","
           (Tactic.rwRule
            []
            (Term.show
             "show"
             («term_=_»
              (Term.typeAscription
               "("
               («term_+_» `X "+" (num "1"))
               ":"
               [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
               ")")
              "="
              («term_+_» `X "+" (Term.app `C [(num "1")])))
             (Term.byTactic'
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])])))))
           ","
           (Tactic.rwRule [] `nat_degree_X_add_C)
           ","
           (Tactic.rwRule [] `mul_one)
           ","
           (Tactic.rwRule [] `nat_degree_cyclotomic)
           ","
           (Tactic.rwRule
            []
            (Term.app `Nat.totient_prime_pow [`hp.out (Term.app `Nat.succ_pos [(Term.hole "_")])]))
           ","
           (Tactic.rwRule [] `Nat.succ_sub_one)]
          "]")
         [(Tactic.location "at" (Tactic.locationHyp [`hn `hi] []))])
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `hk)
           ","
           (Tactic.rwRule [] `pow_succ)
           ","
           (Tactic.rwRule [] `mul_assoc)]
          "]")
         [(Tactic.location "at" (Tactic.locationHyp [`hi] []))])
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `hk)
           ","
           (Tactic.rwRule [] `mul_comm)
           ","
           (Tactic.rwRule [] (Term.app `Nat.mul_div_cancel [(Term.hole "_") `hp.out.pos]))]
          "]")
         [])
        []
        (Mathlib.Tactic.tacticReplace_
         "replace"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hn []]
           []
           ":="
           (Term.app `hn [(Term.app `lt_of_mul_lt_mul_left' [`hi])]))))
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `Ideal.submodule_span_eq)
           ","
           (Tactic.rwRule [] `Ideal.mem_span_singleton)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Zmod.int_coe_zmod_eq_zero_iff_dvd)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Int.coe_castRingHom)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `coeff_map)]
          "]")
         [(Tactic.location "at" (Tactic.locationHyp [`hn] []))])
        []
        (Std.Tactic.Simpa.simpa
         "simpa"
         []
         []
         (Std.Tactic.Simpa.simpaArgsRest
          []
          []
          []
          [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `map_comp)] "]")]
          ["using" `hn]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Simpa.simpa
       "simpa"
       []
       []
       (Std.Tactic.Simpa.simpaArgsRest
        []
        []
        []
        [(Tactic.simpArgs "[" [(Tactic.simpLemma [] [] `map_comp)] "]")]
        ["using" `hn]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hn
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `map_comp
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `Ideal.submodule_span_eq)
         ","
         (Tactic.rwRule [] `Ideal.mem_span_singleton)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Zmod.int_coe_zmod_eq_zero_iff_dvd)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Int.coe_castRingHom)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `coeff_map)]
        "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hn] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hn
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `coeff_map
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Int.coe_castRingHom
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Zmod.int_coe_zmod_eq_zero_iff_dvd
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Ideal.mem_span_singleton
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Ideal.submodule_span_eq
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.tacticReplace_
       "replace"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hn []]
         []
         ":="
         (Term.app `hn [(Term.app `lt_of_mul_lt_mul_left' [`hi])]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hn [(Term.app `lt_of_mul_lt_mul_left' [`hi])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `lt_of_mul_lt_mul_left' [`hi])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hi
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `lt_of_mul_lt_mul_left'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `lt_of_mul_lt_mul_left' [`hi])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hn
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `hk)
         ","
         (Tactic.rwRule [] `mul_comm)
         ","
         (Tactic.rwRule [] (Term.app `Nat.mul_div_cancel [(Term.hole "_") `hp.out.pos]))]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Nat.mul_div_cancel [(Term.hole "_") `hp.out.pos])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hp.out.pos
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Nat.mul_div_cancel
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_comm
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hk
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `hk) "," (Tactic.rwRule [] `pow_succ) "," (Tactic.rwRule [] `mul_assoc)]
        "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hi] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_assoc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `pow_succ
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hk
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `nat_degree_comp)
         ","
         (Tactic.rwRule
          []
          (Term.show
           "show"
           («term_=_»
            (Term.typeAscription
             "("
             («term_+_» `X "+" (num "1"))
             ":"
             [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
             ")")
            "="
            («term_+_» `X "+" (Term.app `C [(num "1")])))
           (Term.byTactic'
            "by"
            (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])])))))
         ","
         (Tactic.rwRule [] `nat_degree_X_add_C)
         ","
         (Tactic.rwRule [] `mul_one)
         ","
         (Tactic.rwRule [] `nat_degree_cyclotomic)
         ","
         (Tactic.rwRule
          []
          (Term.app `Nat.totient_prime_pow [`hp.out (Term.app `Nat.succ_pos [(Term.hole "_")])]))
         ","
         (Tactic.rwRule [] `Nat.succ_sub_one)]
        "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hn `hi] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hn
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Nat.succ_sub_one
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Nat.totient_prime_pow [`hp.out (Term.app `Nat.succ_pos [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Nat.succ_pos [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Nat.succ_pos
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `Nat.succ_pos [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hp.out
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Nat.totient_prime_pow
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `nat_degree_cyclotomic
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_one
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `nat_degree_X_add_C
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.show
       "show"
       («term_=_»
        (Term.typeAscription
         "("
         («term_+_» `X "+" (num "1"))
         ":"
         [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
         ")")
        "="
        («term_+_» `X "+" (Term.app `C [(num "1")])))
       (Term.byTactic'
        "by"
        (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic'', expected 'Lean.Parser.Term.fromTerm'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp "simp" [] [] [] [] [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      («term_=_»
       (Term.typeAscription
        "("
        («term_+_» `X "+" (num "1"))
        ":"
        [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
        ")")
       "="
       («term_+_» `X "+" (Term.app `C [(num "1")])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `X "+" (Term.app `C [(num "1")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `C [(num "1")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `C
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `X
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.typeAscription
       "("
       («term_+_» `X "+" (num "1"))
       ":"
       [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
       ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 9000, term))
      (termℤ "ℤ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 9000, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 9000, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `X "+" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `X
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `nat_degree_comp
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.rintro
       "rintro"
       [(Std.Tactic.RCases.rintroPat.one
         (Std.Tactic.RCases.rcasesPat.tuple
          "⟨"
          [(Std.Tactic.RCases.rcasesPatLo
            (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `k)])
            [])
           ","
           (Std.Tactic.RCases.rcasesPatLo
            (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hk)])
            [])]
          "⟩"))]
       [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp "simp" [] [] ["only"] ["[" [(Tactic.simpLemma [] [] `ite_eq_right_iff)] "]"] [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `ite_eq_right_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `Ideal.submodule_span_eq)
         ","
         (Tactic.rwRule [] `Ideal.mem_span_singleton)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Zmod.int_coe_zmod_eq_zero_iff_dvd)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Int.coe_castRingHom)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `coeff_map)
         ","
         (Tactic.rwRule [] `map_comp)
         ","
         (Tactic.rwRule [] `map_cyclotomic)
         ","
         (Tactic.rwRule [] `Polynomial.map_add)
         ","
         (Tactic.rwRule [] `map_X)
         ","
         (Tactic.rwRule [] `Polynomial.map_one)
         ","
         (Tactic.rwRule [] `pow_add)
         ","
         (Tactic.rwRule [] `pow_one)
         ","
         (Tactic.rwRule [] `cyclotomic_mul_prime_dvd_eq_pow)
         ","
         (Tactic.rwRule [] `pow_comp)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Zmod.expand_card)
         ","
         (Tactic.rwRule [] (Term.app `coeff_expand [`hp.out.pos]))]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `coeff_expand [`hp.out.pos])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hp.out.pos
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `coeff_expand
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Zmod.expand_card
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `pow_comp
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `cyclotomic_mul_prime_dvd_eq_pow
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `pow_one
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `pow_add
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Polynomial.map_one
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `map_X
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Polynomial.map_add
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `map_cyclotomic
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `map_comp
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `coeff_map
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Int.coe_castRingHom
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Zmod.int_coe_zmod_eq_zero_iff_dvd
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Ideal.mem_span_singleton
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Ideal.submodule_span_eq
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`i `hi])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.intro "intro" [`i `hi])
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `zero_add) "," (Tactic.rwRule [] `pow_one)] "]")
         [(Tactic.location "at" (Tactic.locationHyp [`hi] [(patternIgnore (token.«⊢» "⊢"))]))])
        []
        (Tactic.exact
         "exact"
         (Term.app
          (Term.proj (Term.app `cyclotomicCompXAddOneIsEisensteinAt [`p]) "." `Mem)
          [`hi]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app (Term.proj (Term.app `cyclotomicCompXAddOneIsEisensteinAt [`p]) "." `Mem) [`hi]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj (Term.app `cyclotomicCompXAddOneIsEisensteinAt [`p]) "." `Mem) [`hi])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hi
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `cyclotomicCompXAddOneIsEisensteinAt [`p]) "." `Mem)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `cyclotomicCompXAddOneIsEisensteinAt [`p])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `p
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `cyclotomicCompXAddOneIsEisensteinAt
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `cyclotomicCompXAddOneIsEisensteinAt [`p])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `zero_add) "," (Tactic.rwRule [] `pow_one)] "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hi] [(patternIgnore (token.«⊢» "⊢"))]))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `pow_one
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `zero_add
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`i `hi])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.induction'
       "induction'"
       [(Tactic.casesTarget [] `n)]
       []
       ["with" [(Lean.binderIdent `n) (Lean.binderIdent `hn)]]
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule
            []
            (Term.show
             "show"
             («term_=_»
              (Term.typeAscription
               "("
               («term_+_» `X "+" (num "1"))
               ":"
               [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
               ")")
              "="
              («term_+_» `X "+" (Term.app `C [(num "1")])))
             (Term.byTactic'
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])])))))]
          "]")
         [])
        []
        (Tactic.refine'
         "refine'"
         (Term.app
          (Term.proj (Term.app `cyclotomic.monic [(Term.hole "_") (termℤ "ℤ")]) "." `comp)
          [(Term.app `monic_X_add_C [(num "1")])
           (Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))]))
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `nat_degree_X_add_C)] "]")
         [(Tactic.location "at" (Tactic.locationHyp [`h] []))])
        []
        (Tactic.exact "exact" (Term.app `zero_ne_one [`h.symm]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `zero_ne_one [`h.symm]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `zero_ne_one [`h.symm])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h.symm
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `zero_ne_one
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `nat_degree_X_add_C)] "]")
       [(Tactic.location "at" (Tactic.locationHyp [`h] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `nat_degree_X_add_C
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        (Term.proj (Term.app `cyclotomic.monic [(Term.hole "_") (termℤ "ℤ")]) "." `comp)
        [(Term.app `monic_X_add_C [(num "1")])
         (Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `cyclotomic.monic [(Term.hole "_") (termℤ "ℤ")]) "." `comp)
       [(Term.app `monic_X_add_C [(num "1")])
        (Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.app `monic_X_add_C [(num "1")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `monic_X_add_C
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `monic_X_add_C [(num "1")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `cyclotomic.monic [(Term.hole "_") (termℤ "ℤ")]) "." `comp)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `cyclotomic.monic [(Term.hole "_") (termℤ "ℤ")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'termℤ', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'termℤ', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (termℤ "ℤ")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `cyclotomic.monic
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `cyclotomic.monic [(Term.hole "_") (termℤ "ℤ")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule
          []
          (Term.show
           "show"
           («term_=_»
            (Term.typeAscription
             "("
             («term_+_» `X "+" (num "1"))
             ":"
             [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
             ")")
            "="
            («term_+_» `X "+" (Term.app `C [(num "1")])))
           (Term.byTactic'
            "by"
            (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])])))))]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.show
       "show"
       («term_=_»
        (Term.typeAscription
         "("
         («term_+_» `X "+" (num "1"))
         ":"
         [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
         ")")
        "="
        («term_+_» `X "+" (Term.app `C [(num "1")])))
       (Term.byTactic'
        "by"
        (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic'', expected 'Lean.Parser.Term.fromTerm'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp "simp" [] [] [] [] [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      («term_=_»
       (Term.typeAscription
        "("
        («term_+_» `X "+" (num "1"))
        ":"
        [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
        ")")
       "="
       («term_+_» `X "+" (Term.app `C [(num "1")])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `X "+" (Term.app `C [(num "1")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `C [(num "1")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `C
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `X
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.typeAscription
       "("
       («term_+_» `X "+" (num "1"))
       ":"
       [(Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")]
       ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Polynomial.Data.Polynomial.Basic.polynomial (termℤ "ℤ") "[X]")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 9000, term))
      (termℤ "ℤ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 9000, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 9000, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `X "+" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `X
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `monic.is_eisenstein_at_of_mem_of_not_mem
        [(Term.hole "_")
         («term_<|_»
          `Ideal.IsPrime.ne_top
          "<|"
          («term_<|_»
           (Term.proj
            (Term.app
             `Ideal.span_singleton_prime
             [(Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.NormCast.tacticExact_mod_cast_ "exact_mod_cast" `hp.out.ne_zero)])))])
            "."
            (fieldIdx "2"))
           "<|"
           (Term.app (Term.proj `Nat.prime_iff_prime_int "." (fieldIdx "1")) [`hp.out])))
         (Term.hole "_")
         (Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `monic.is_eisenstein_at_of_mem_of_not_mem
       [(Term.hole "_")
        («term_<|_»
         `Ideal.IsPrime.ne_top
         "<|"
         («term_<|_»
          (Term.proj
           (Term.app
            `Ideal.span_singleton_prime
            [(Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.NormCast.tacticExact_mod_cast_ "exact_mod_cast" `hp.out.ne_zero)])))])
           "."
           (fieldIdx "2"))
          "<|"
          (Term.app (Term.proj `Nat.prime_iff_prime_int "." (fieldIdx "1")) [`hp.out])))
        (Term.hole "_")
        (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      («term_<|_»
       `Ideal.IsPrime.ne_top
       "<|"
       («term_<|_»
        (Term.proj
         (Term.app
          `Ideal.span_singleton_prime
          [(Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.NormCast.tacticExact_mod_cast_ "exact_mod_cast" `hp.out.ne_zero)])))])
         "."
         (fieldIdx "2"))
        "<|"
        (Term.app (Term.proj `Nat.prime_iff_prime_int "." (fieldIdx "1")) [`hp.out])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_»
       (Term.proj
        (Term.app
         `Ideal.span_singleton_prime
         [(Term.byTactic
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(Tactic.NormCast.tacticExact_mod_cast_ "exact_mod_cast" `hp.out.ne_zero)])))])
        "."
        (fieldIdx "2"))
       "<|"
       (Term.app (Term.proj `Nat.prime_iff_prime_int "." (fieldIdx "1")) [`hp.out]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `Nat.prime_iff_prime_int "." (fieldIdx "1")) [`hp.out])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hp.out
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `Nat.prime_iff_prime_int "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `Nat.prime_iff_prime_int
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj
       (Term.app
        `Ideal.span_singleton_prime
        [(Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.NormCast.tacticExact_mod_cast_ "exact_mod_cast" `hp.out.ne_zero)])))])
       "."
       (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `Ideal.span_singleton_prime
       [(Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(Tactic.NormCast.tacticExact_mod_cast_ "exact_mod_cast" `hp.out.ne_zero)])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.NormCast.tacticExact_mod_cast_ "exact_mod_cast" `hp.out.ne_zero)])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.NormCast.tacticExact_mod_cast_ "exact_mod_cast" `hp.out.ne_zero)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hp.out.ne_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0,
     tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.byTactic
      "by"
      (Tactic.tacticSeq
       (Tactic.tacticSeq1Indented
        [(Tactic.NormCast.tacticExact_mod_cast_ "exact_mod_cast" `hp.out.ne_zero)])))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Ideal.span_singleton_prime
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `Ideal.span_singleton_prime
      [(Term.paren
        "("
        (Term.byTactic
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(Tactic.NormCast.tacticExact_mod_cast_ "exact_mod_cast" `hp.out.ne_zero)])))
        ")")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      `Ideal.IsPrime.ne_top
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 10, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_<|_»
      `Ideal.IsPrime.ne_top
      "<|"
      («term_<|_»
       (Term.proj
        (Term.paren
         "("
         (Term.app
          `Ideal.span_singleton_prime
          [(Term.paren
            "("
            (Term.byTactic
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(Tactic.NormCast.tacticExact_mod_cast_ "exact_mod_cast" `hp.out.ne_zero)])))
            ")")])
         ")")
        "."
        (fieldIdx "2"))
       "<|"
       (Term.app (Term.proj `Nat.prime_iff_prime_int "." (fieldIdx "1")) [`hp.out])))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `monic.is_eisenstein_at_of_mem_of_not_mem
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      (Term.app
       (Term.proj
        (Term.app
         (Term.proj
          (Term.app `cyclotomic [(«term_^_» `p "^" («term_+_» `n "+" (num "1"))) (termℤ "ℤ")])
          "."
          `comp)
         [(«term_+_» `X "+" (num "1"))])
        "."
        `IsEisensteinAt)
       [(RingTheory.Polynomial.Eisenstein.term𝓟 "𝓟")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'RingTheory.Polynomial.Eisenstein.term𝓟', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'RingTheory.Polynomial.Eisenstein.term𝓟', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (RingTheory.Polynomial.Eisenstein.term𝓟 "𝓟")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'RingTheory.Polynomial.Eisenstein.term𝓟', expected 'RingTheory.Polynomial.Eisenstein.term𝓟._@.RingTheory.Polynomial.Eisenstein._hyg.809'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
theorem
  cyclotomicPrimePowCompXAddOneIsEisensteinAt
  [ hp : Fact p . Prime ] ( n : ℕ ) : cyclotomic p ^ n + 1 ℤ . comp X + 1 . IsEisensteinAt 𝓟
  :=
    by
      refine'
          monic.is_eisenstein_at_of_mem_of_not_mem
            _
              Ideal.IsPrime.ne_top
                <|
                Ideal.span_singleton_prime by exact_mod_cast hp.out.ne_zero . 2
                  <|
                  Nat.prime_iff_prime_int . 1 hp.out
              _
              _
        ·
          rw [ show ( X + 1 : ℤ [X] ) = X + C 1 by simp ]
            refine' cyclotomic.monic _ ℤ . comp monic_X_add_C 1 fun h => _
            rw [ nat_degree_X_add_C ] at h
            exact zero_ne_one h.symm
        ·
          induction' n with n hn
            ·
              intro i hi
                rw [ zero_add , pow_one ] at hi ⊢
                exact cyclotomicCompXAddOneIsEisensteinAt p . Mem hi
            ·
              intro i hi
                rw
                  [
                    Ideal.submodule_span_eq
                      ,
                      Ideal.mem_span_singleton
                      ,
                      ← Zmod.int_coe_zmod_eq_zero_iff_dvd
                      ,
                      ← Int.coe_castRingHom
                      ,
                      ← coeff_map
                      ,
                      map_comp
                      ,
                      map_cyclotomic
                      ,
                      Polynomial.map_add
                      ,
                      map_X
                      ,
                      Polynomial.map_one
                      ,
                      pow_add
                      ,
                      pow_one
                      ,
                      cyclotomic_mul_prime_dvd_eq_pow
                      ,
                      pow_comp
                      ,
                      ← Zmod.expand_card
                      ,
                      coeff_expand hp.out.pos
                    ]
                ·
                  simp only [ ite_eq_right_iff ]
                    rintro ⟨ k , hk ⟩
                    rw
                      [
                        nat_degree_comp
                          ,
                          show ( X + 1 : ℤ [X] ) = X + C 1 by simp
                          ,
                          nat_degree_X_add_C
                          ,
                          mul_one
                          ,
                          nat_degree_cyclotomic
                          ,
                          Nat.totient_prime_pow hp.out Nat.succ_pos _
                          ,
                          Nat.succ_sub_one
                        ]
                      at hn hi
                    rw [ hk , pow_succ , mul_assoc ] at hi
                    rw [ hk , mul_comm , Nat.mul_div_cancel _ hp.out.pos ]
                    replace hn := hn lt_of_mul_lt_mul_left' hi
                    rw
                      [
                        Ideal.submodule_span_eq
                          ,
                          Ideal.mem_span_singleton
                          ,
                          ← Zmod.int_coe_zmod_eq_zero_iff_dvd
                          ,
                          ← Int.coe_castRingHom
                          ,
                          ← coeff_map
                        ]
                      at hn
                    simpa [ map_comp ] using hn
                · exact ⟨ p ^ n , by rw [ pow_succ ] ⟩
        ·
          rw
              [
                coeff_zero_eq_eval_zero
                  ,
                  eval_comp
                  ,
                  cyclotomic_prime_pow_eq_geom_sum hp.out
                  ,
                  eval_add
                  ,
                  eval_X
                  ,
                  eval_one
                  ,
                  zero_add
                  ,
                  eval_finset_sum
                ]
            simp
              only
              [
                eval_pow
                  ,
                  eval_X
                  ,
                  one_pow
                  ,
                  sum_const
                  ,
                  card_range
                  ,
                  Nat.smul_one_eq_coe
                  ,
                  submodule_span_eq
                  ,
                  Ideal.submodule_span_eq
                  ,
                  Ideal.span_singleton_pow
                  ,
                  Ideal.mem_span_singleton
                ]
            intro h
            obtain ⟨ k , hk ⟩ := Int.coe_nat_dvd . 1 h
            rw [ ← mul_assoc , mul_one , mul_assoc ] at hk
            nth_rw 1 [ ← Nat.mul_one p ] at hk
            rw [ mul_right_inj' hp.out.ne_zero ] at hk
            exact Nat.Prime.not_dvd_one hp.out Dvd.intro k hk.symm
#align
  cyclotomic_prime_pow_comp_X_add_one_is_eisenstein_at cyclotomicPrimePowCompXAddOneIsEisensteinAt

end Cyclotomic

section IsIntegral

variable {K : Type v} {L : Type z} {p : R} [CommRing R] [Field K] [Field L]

variable [Algebra K L] [Algebra R L] [Algebra R K] [IsScalarTower R K L] [IsSeparable K L]

variable [IsDomain R] [NormalizedGCDMonoid R] [IsFractionRing R K] [IsIntegrallyClosed R]

-- mathport name: expr𝓟
local notation "𝓟" => Submodule.span R {p}

open IsIntegrallyClosed PowerBasis Nat Polynomial IsScalarTower

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "Let `K` be the field of fraction of an integrally closed domain `R` and let `L` be a separable\nextension of `K`, generated by an integral power basis `B` such that the minimal polynomial of\n`B.gen` is Eisenstein at `p`. Given `z : L` integral over `R`, if `Q : R[X]` is such that\n`aeval B.gen Q = p • z`, then `p ∣ Q.coeff 0`. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `dvd_coeff_zero_of_aeval_eq_prime_smul_of_minpoly_is_eiseinstein_at [])
      (Command.declSig
       [(Term.implicitBinder "{" [`B] [":" (Term.app `PowerBasis [`K `L])] "}")
        (Term.explicitBinder "(" [`hp] [":" (Term.app `Prime [`p])] [] ")")
        (Term.explicitBinder
         "("
         [`hBint]
         [":" (Term.app `IsIntegral [`R (Term.proj `B "." `gen)])]
         []
         ")")
        (Term.implicitBinder "{" [`z] [":" `L] "}")
        (Term.implicitBinder
         "{"
         [`Q]
         [":" (Polynomial.Data.Polynomial.Basic.polynomial `R "[X]")]
         "}")
        (Term.explicitBinder
         "("
         [`hQ]
         [":"
          («term_=_»
           (Term.app `aeval [(Term.proj `B "." `gen) `Q])
           "="
           (Algebra.Group.Defs.«term_•_» `p " • " `z))]
         []
         ")")
        (Term.explicitBinder "(" [`hzint] [":" (Term.app `IsIntegral [`R `z])] [] ")")
        (Term.explicitBinder
         "("
         [`hei]
         [":"
          (Term.app
           (Term.proj (Term.app `minpoly [`R (Term.proj `B "." `gen)]) "." `IsEisensteinAt)
           [(RingTheory.Polynomial.Eisenstein.term𝓟_1 "𝓟")])]
         []
         ")")]
       (Term.typeSpec ":" («term_∣_» `p "∣" (Term.app (Term.proj `Q "." `coeff) [(num "0")]))))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Std.Tactic.tacticLetI_
            "letI"
            (Term.haveDecl (Term.haveIdDecl [] [] ":=" `B.finite_dimensional)))
           []
           (Tactic.tacticLet_
            "let"
            (Term.letDecl (Term.letIdDecl `P [] [] ":=" (Term.app `minpoly [`R `B.gen]))))
           []
           (Std.Tactic.obtain
            "obtain"
            [(Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "⟨"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `n)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hn)])
                  [])]
                "⟩")])]
            []
            [":=" [(Term.app `Nat.exists_eq_succ_of_ne_zero [`B.dim_pos.ne'])]])
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`finrank_K_L []]
              [(Term.typeSpec
                ":"
                («term_=_» (Term.app `FiniteDimensional.finrank [`K `L]) "=" `B.dim))]
              ":="
              `B.finrank)))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`deg_K_P []]
              [(Term.typeSpec
                ":"
                («term_=_» (Term.proj (Term.app `minpoly [`K `B.gen]) "." `natDegree) "=" `B.dim))]
              ":="
              `B.nat_degree_minpoly)))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`deg_R_P []]
              [(Term.typeSpec ":" («term_=_» `P.nat_degree "=" `B.dim))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `deg_K_P)
                     ","
                     (Tactic.rwRule
                      []
                      (Term.app `minpoly.gcd_domain_eq_field_fractions' [`K `hBint]))
                     ","
                     (Tactic.rwRule
                      []
                      (Term.app
                       (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map)
                       [(Term.app `algebraMap [`R `K])]))]
                    "]")
                   [])]))))))
           []
           (Mathlib.Tactic.Choose.tacticChoose!__Using_
            "choose!"
            [(Lean.binderIdent `f) (Lean.binderIdent `hf)]
            ["using"
             (Term.app
              `hei.is_weakly_eisenstein_at.exists_mem_adjoin_mul_eq_pow_nat_degree_le
              [(Term.app `minpoly.aeval [`R `B.gen]) (Term.app `minpoly.monic [`hBint])])])
           []
           (Tactic.simp
            "simp"
            []
            []
            ["only"]
            ["["
             [(Tactic.simpLemma
               []
               []
               (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map))
              ","
              (Tactic.simpLemma [] [] `deg_R_P)]
             "]"]
            [(Tactic.location "at" (Tactic.locationHyp [`hf] []))])
           []
           (Tactic.tacticSuffices_
            "suffices"
            (Term.sufficesDecl
             []
             («term_∣_»
              («term_^_» `p "^" `n.succ)
              "∣"
              («term_*_»
               («term_^_» (Term.app `Q.coeff [(num "0")]) "^" `n.succ)
               "*"
               («term_*_»
                («term_^_» («term-_» "-" (num "1")) "^" («term_*_» `n.succ "*" `n))
                "*"
                («term_^_»
                 (Term.app (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff) [(num "0")])
                 "^"
                 `n))))
             (Term.byTactic'
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.tacticHave_
                  "have"
                  (Term.haveDecl
                   (Term.haveIdDecl
                    [`hndiv []]
                    [(Term.typeSpec
                      ":"
                      («term¬_»
                       "¬"
                       («term_∣_»
                        («term_^_» `p "^" (num "2"))
                        "∣"
                        (Term.app
                         (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff)
                         [(num "0")]))))]
                    ":="
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [`h]
                      []
                      "=>"
                      (Term.app
                       `hei.not_mem
                       [(Term.subst
                         (Term.proj (Term.app `span_singleton_pow [`p (num "2")]) "." `symm)
                         "▸"
                         [(Term.app
                           (Term.proj `Ideal.mem_span_singleton "." (fieldIdx "2"))
                           [`h])])]))))))
                 []
                 (Tactic.refine'
                  "refine'"
                  (Term.app
                   `Prime.dvd_of_pow_dvd_pow_mul_pow_of_square_not_dvd
                   [`hp
                    (Term.typeAscription
                     "("
                     (Term.hole "_")
                     ":"
                     [(«term_∣_» («term_^_» (Term.hole "_") "^" `n.succ) "∣" (Term.hole "_"))]
                     ")")
                    `hndiv]))
                 []
                 (convert
                  "convert"
                  []
                  (Term.app
                   (Term.proj
                    (Term.app
                     `IsUnit.dvd_mul_right
                     [(Term.anonymousCtor
                       "⟨"
                       [(«term_^_» («term-_» "-" (num "1")) "^" («term_*_» `n.succ "*" `n))
                        ","
                        `rfl]
                       "⟩")])
                    "."
                    `mpr)
                   [`this])
                  ["using" (num "1")])
                 []
                 (Tactic.NormCast.pushCast "push_cast" [] [] [] [] [])
                 []
                 (Mathlib.Tactic.RingNF.ringNF "ring_nf" [] [] [])
                 []
                 (Tactic.simp
                  "simp"
                  []
                  []
                  []
                  ["["
                   [(Tactic.simpLemma
                     []
                     []
                     (Term.app `pow_right_comm [(Term.hole "_") (Term.hole "_") (num "2")]))]
                   "]"]
                  [])])))))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`aux []]
              [(Term.typeSpec
                ":"
                (Std.ExtendedBinder.«term∀__,_»
                 "∀"
                 (Lean.binderIdent `i)
                 («binderTerm∈_»
                  "∈"
                  (Term.app
                   (Term.proj
                    (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))])
                    "."
                    `erase)
                   [(num "0")]))
                 ","
                 («term_≤_» `B.dim "≤" («term_+_» `i "+" `n))))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.intro "intro" [`i `hi])
                  []
                  (Tactic.simp
                   "simp"
                   []
                   []
                   ["only"]
                   ["["
                    [(Tactic.simpLemma [] [] `mem_range) "," (Tactic.simpLemma [] [] `mem_erase)]
                    "]"]
                   [(Tactic.location "at" (Tactic.locationHyp [`hi] []))])
                  []
                  (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hn)] "]") [])
                  []
                  (Tactic.exact
                   "exact"
                   (Term.app
                    `le_add_pred_of_pos
                    [(Term.hole "_") (Term.proj `hi "." (fieldIdx "1"))]))]))))))
           []
           (Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`hintsum []]
              [(Term.typeSpec
                ":"
                (Term.app
                 `IsIntegral
                 [`R
                  («term_-_»
                   («term_*_» `z "*" («term_^_» `B.gen "^" `n))
                   "-"
                   (BigOperators.Algebra.BigOperators.Basic.finset.sum
                    "∑"
                    (Std.ExtendedBinder.extBinders
                     (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
                    " in "
                    (Term.app
                     (Term.proj
                      (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))])
                      "."
                      `erase)
                     [(num "0")])
                    ", "
                    (Algebra.Group.Defs.«term_•_»
                     (Term.app `Q.coeff [`x])
                     " • "
                     (Term.app `f [(«term_+_» `x "+" `n)]))))]))]
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.refine'
                   "refine'"
                   (Term.app
                    `is_integral_sub
                    [(Term.app
                      `is_integral_mul
                      [`hzint (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])
                     (Term.app
                      `IsIntegral.sum
                      [(Term.hole "_")
                       (Term.fun
                        "fun"
                        (Term.basicFun
                         [`i `hi]
                         []
                         "=>"
                         (Term.app `is_integral_smul [(Term.hole "_") (Term.hole "_")])))])]))
                  []
                  (Tactic.exact
                   "exact"
                   (Term.app
                    `adjoin_le_integral_closure
                    [`hBint
                     (Term.proj
                      (Term.app `hf [(Term.hole "_") (Term.app `aux [`i `hi])])
                      "."
                      (fieldIdx "1"))]))]))))))
           []
           (Std.Tactic.obtain
            "obtain"
            [(Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "⟨"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `r)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hr)])
                  [])]
                "⟩")])]
            []
            [":="
             [(Term.app
               (Term.proj `is_integral_iff "." (fieldIdx "1"))
               [(Term.app `is_integral_norm [`K `hintsum])])]])
           []
           (Mathlib.Tactic.«tacticUse_,,» "use" [`r])
           []
           (Tactic.apply "apply" (Term.app `IsFractionRing.injective [`R `K]))
           []
           (Tactic.simp
            "simp"
            []
            []
            ["only"]
            ["["
             [(Tactic.simpLemma [] [] `_root_.map_mul)
              ","
              (Tactic.simpLemma [] [] `_root_.map_pow)
              ","
              (Tactic.simpLemma [] [] `_root_.map_neg)
              ","
              (Tactic.simpLemma [] [] `_root_.map_one)]
             "]"]
            [])
           []
           (calcTactic
            "calc"
            (calcStep
             («term_=_»
              (Term.hole "_")
              "="
              (Term.app
               `norm
               [`K
                (Algebra.Group.Defs.«term_•_»
                 (Term.app `Q.coeff [(num "0")])
                 " • "
                 («term_^_» `B.gen "^" `n))]))
             ":="
             (Term.hole "_"))
            [(calcStep
              («term_=_»
               (Term.hole "_")
               "="
               (Term.app
                `norm
                [`K
                 («term_-_»
                  (Algebra.Group.Defs.«term_•_»
                   `p
                   " • "
                   («term_*_» `z "*" («term_^_» `B.gen "^" `n)))
                  "-"
                  (BigOperators.Algebra.BigOperators.Basic.finset.sum
                   "∑"
                   (Std.ExtendedBinder.extBinders
                    (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
                   " in "
                   (Term.app
                    (Term.proj
                     (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))])
                     "."
                     `erase)
                    [(num "0")])
                   ", "
                   (Algebra.Group.Defs.«term_•_»
                    `p
                    " • "
                    (Algebra.Group.Defs.«term_•_»
                     (Term.app `Q.coeff [`x])
                     " • "
                     (Term.app `f [(«term_+_» `x "+" `n)])))))]))
              ":="
              (Term.app
               `congr_arg
               [(Term.app `norm [`K]) (Term.app `eq_sub_of_add_eq [(Term.hole "_")])]))
             (calcStep («term_=_» (Term.hole "_") "=" (Term.hole "_")) ":=" (Term.hole "_"))])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.simp
              "simp"
              []
              []
              ["only"]
              ["["
               [(Tactic.simpLemma [] [] `Algebra.smul_def)
                ","
                (Tactic.simpLemma [] [] (Term.app `algebra_map_apply [`R `K `L]))
                ","
                (Tactic.simpLemma [] [] `Algebra.norm_algebra_map)
                ","
                (Tactic.simpLemma [] [] `_root_.map_mul)
                ","
                (Tactic.simpLemma [] [] `_root_.map_pow)
                ","
                (Tactic.simpLemma [] [] `finrank_K_L)
                ","
                (Tactic.simpLemma [] [] `power_basis.norm_gen_eq_coeff_zero_minpoly)
                ","
                (Tactic.simpLemma
                 []
                 []
                 (Term.app `minpoly.gcd_domain_eq_field_fractions' [`K `hBint]))
                ","
                (Tactic.simpLemma [] [] `coeff_map)
                ","
                (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `hn)]
               "]"]
              [])
             []
             (Mathlib.Tactic.RingNF.ring "ring")])
           []
           (Mathlib.Tactic.tacticSwap "swap")
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Mathlib.Tactic.tacticSimp_rw__
              "simp_rw"
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `smul_sum)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `smul_sub)
                ","
                (Tactic.rwRule [] (Term.app `Algebra.smul_def [`p]))
                ","
                (Tactic.rwRule [] (Term.app `algebra_map_apply [`R `K `L]))
                ","
                (Tactic.rwRule [] `_root_.map_mul)
                ","
                (Tactic.rwRule [] `Algebra.norm_algebra_map)
                ","
                (Tactic.rwRule [] `finrank_K_L)
                ","
                (Tactic.rwRule [] `hr)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hn)]
               "]")
              [])])
           []
           (calcTactic
            "calc"
            (calcStep
             («term_=_»
              (Term.hole "_")
              "="
              («term_*_»
               («term_+_»
                (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [(num "0")]) " • " (num "1"))
                "+"
                (BigOperators.Algebra.BigOperators.Basic.finset.sum
                 "∑"
                 (Std.ExtendedBinder.extBinders
                  (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
                 " in "
                 (Term.app
                  (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
                  [(num "0")])
                 ", "
                 (Algebra.Group.Defs.«term_•_»
                  (Term.app `Q.coeff [`x])
                  " • "
                  («term_^_» `B.gen "^" `x))))
               "*"
               («term_^_» `B.gen "^" `n)))
             ":="
             (Term.hole "_"))
            [(calcStep
              («term_=_»
               (Term.hole "_")
               "="
               («term_*_»
                («term_+_»
                 (Algebra.Group.Defs.«term_•_»
                  (Term.app `Q.coeff [(num "0")])
                  " • "
                  («term_^_» `B.gen "^" (num "0")))
                 "+"
                 (BigOperators.Algebra.BigOperators.Basic.finset.sum
                  "∑"
                  (Std.ExtendedBinder.extBinders
                   (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
                  " in "
                  (Term.app
                   (Term.proj
                    (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))])
                    "."
                    `erase)
                   [(num "0")])
                  ", "
                  (Algebra.Group.Defs.«term_•_»
                   (Term.app `Q.coeff [`x])
                   " • "
                   («term_^_» `B.gen "^" `x))))
                "*"
                («term_^_» `B.gen "^" `n)))
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `pow_zero)] "]")
                   [])]))))
             (calcStep
              («term_=_»
               (Term.hole "_")
               "="
               («term_*_» (Term.app `aeval [`B.gen `Q]) "*" («term_^_» `B.gen "^" `n)))
              ":="
              (Term.hole "_"))
             (calcStep
              («term_=_» (Term.hole "_") "=" (Term.hole "_"))
              ":="
              (Term.byTactic
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule [] `hQ) "," (Tactic.rwRule [] `Algebra.smul_mul_assoc)]
                    "]")
                   [])]))))])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                []
                [(Term.typeSpec
                  ":"
                  (Std.ExtendedBinder.«term∀__,_»
                   "∀"
                   (Lean.binderIdent `i)
                   («binderTerm∈_»
                    "∈"
                    (Term.app
                     (Term.proj
                      (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))])
                      "."
                      `erase)
                     [(num "0")]))
                   ","
                   («term_=_»
                    (Algebra.Group.Defs.«term_•_»
                     (Term.app `Q.coeff [`i])
                     " • "
                     («term_*_» («term_^_» `B.gen "^" `i) "*" («term_^_» `B.gen "^" `n)))
                    "="
                    (Algebra.Group.Defs.«term_•_»
                     `p
                     " • "
                     (Algebra.Group.Defs.«term_•_»
                      (Term.app `Q.coeff [`i])
                      " • "
                      (Term.app `f [(«term_+_» `i "+" `n)]))))))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Tactic.intro "intro" [`i `hi])
                    []
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `pow_add)
                       ","
                       (Tactic.rwRule
                        [(patternIgnore (token.«← » "←"))]
                        (Term.proj
                         (Term.app `hf [(Term.hole "_") (Term.app `aux [`i `hi])])
                         "."
                         (fieldIdx "2")))
                       ","
                       (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Algebra.smul_def)
                       ","
                       (Tactic.rwRule [] `smul_smul)
                       ","
                       (Tactic.rwRule [] (Term.app `mul_comm [(Term.hole "_") `p]))
                       ","
                       (Tactic.rwRule [] `smul_smul)]
                      "]")
                     [])]))))))
             []
             (Tactic.simp
              "simp"
              []
              []
              ["only"]
              ["["
               [(Tactic.simpLemma [] [] `add_mul)
                ","
                (Tactic.simpLemma [] [] `smul_mul_assoc)
                ","
                (Tactic.simpLemma [] [] `one_mul)
                ","
                (Tactic.simpLemma [] [] `sum_mul)
                ","
                (Tactic.simpLemma [] [] (Term.app `sum_congr [`rfl `this]))]
               "]"]
              [])])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `aeval_eq_sum_range)
                ","
                (Tactic.rwRule
                 []
                 (Term.app
                  `Finset.add_sum_erase
                  [(Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))])
                   (Term.fun
                    "fun"
                    (Term.basicFun
                     [`i]
                     []
                     "=>"
                     (Algebra.Group.Defs.«term_•_»
                      (Term.app `Q.coeff [`i])
                      " • "
                      («term_^_» `B.gen "^" `i))))]))]
               "]")
              [])
             []
             (Tactic.simp "simp" [] [] [] [] [])])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Std.Tactic.tacticLetI_
           "letI"
           (Term.haveDecl (Term.haveIdDecl [] [] ":=" `B.finite_dimensional)))
          []
          (Tactic.tacticLet_
           "let"
           (Term.letDecl (Term.letIdDecl `P [] [] ":=" (Term.app `minpoly [`R `B.gen]))))
          []
          (Std.Tactic.obtain
           "obtain"
           [(Std.Tactic.RCases.rcasesPatMed
             [(Std.Tactic.RCases.rcasesPat.tuple
               "⟨"
               [(Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `n)])
                 [])
                ","
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hn)])
                 [])]
               "⟩")])]
           []
           [":=" [(Term.app `Nat.exists_eq_succ_of_ne_zero [`B.dim_pos.ne'])]])
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`finrank_K_L []]
             [(Term.typeSpec
               ":"
               («term_=_» (Term.app `FiniteDimensional.finrank [`K `L]) "=" `B.dim))]
             ":="
             `B.finrank)))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`deg_K_P []]
             [(Term.typeSpec
               ":"
               («term_=_» (Term.proj (Term.app `minpoly [`K `B.gen]) "." `natDegree) "=" `B.dim))]
             ":="
             `B.nat_degree_minpoly)))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`deg_R_P []]
             [(Term.typeSpec ":" («term_=_» `P.nat_degree "=" `B.dim))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `deg_K_P)
                    ","
                    (Tactic.rwRule
                     []
                     (Term.app `minpoly.gcd_domain_eq_field_fractions' [`K `hBint]))
                    ","
                    (Tactic.rwRule
                     []
                     (Term.app
                      (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map)
                      [(Term.app `algebraMap [`R `K])]))]
                   "]")
                  [])]))))))
          []
          (Mathlib.Tactic.Choose.tacticChoose!__Using_
           "choose!"
           [(Lean.binderIdent `f) (Lean.binderIdent `hf)]
           ["using"
            (Term.app
             `hei.is_weakly_eisenstein_at.exists_mem_adjoin_mul_eq_pow_nat_degree_le
             [(Term.app `minpoly.aeval [`R `B.gen]) (Term.app `minpoly.monic [`hBint])])])
          []
          (Tactic.simp
           "simp"
           []
           []
           ["only"]
           ["["
            [(Tactic.simpLemma
              []
              []
              (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map))
             ","
             (Tactic.simpLemma [] [] `deg_R_P)]
            "]"]
           [(Tactic.location "at" (Tactic.locationHyp [`hf] []))])
          []
          (Tactic.tacticSuffices_
           "suffices"
           (Term.sufficesDecl
            []
            («term_∣_»
             («term_^_» `p "^" `n.succ)
             "∣"
             («term_*_»
              («term_^_» (Term.app `Q.coeff [(num "0")]) "^" `n.succ)
              "*"
              («term_*_»
               («term_^_» («term-_» "-" (num "1")) "^" («term_*_» `n.succ "*" `n))
               "*"
               («term_^_»
                (Term.app (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff) [(num "0")])
                "^"
                `n))))
            (Term.byTactic'
             "by"
             (Tactic.tacticSeq
              (Tactic.tacticSeq1Indented
               [(Tactic.tacticHave_
                 "have"
                 (Term.haveDecl
                  (Term.haveIdDecl
                   [`hndiv []]
                   [(Term.typeSpec
                     ":"
                     («term¬_»
                      "¬"
                      («term_∣_»
                       («term_^_» `p "^" (num "2"))
                       "∣"
                       (Term.app
                        (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff)
                        [(num "0")]))))]
                   ":="
                   (Term.fun
                    "fun"
                    (Term.basicFun
                     [`h]
                     []
                     "=>"
                     (Term.app
                      `hei.not_mem
                      [(Term.subst
                        (Term.proj (Term.app `span_singleton_pow [`p (num "2")]) "." `symm)
                        "▸"
                        [(Term.app
                          (Term.proj `Ideal.mem_span_singleton "." (fieldIdx "2"))
                          [`h])])]))))))
                []
                (Tactic.refine'
                 "refine'"
                 (Term.app
                  `Prime.dvd_of_pow_dvd_pow_mul_pow_of_square_not_dvd
                  [`hp
                   (Term.typeAscription
                    "("
                    (Term.hole "_")
                    ":"
                    [(«term_∣_» («term_^_» (Term.hole "_") "^" `n.succ) "∣" (Term.hole "_"))]
                    ")")
                   `hndiv]))
                []
                (convert
                 "convert"
                 []
                 (Term.app
                  (Term.proj
                   (Term.app
                    `IsUnit.dvd_mul_right
                    [(Term.anonymousCtor
                      "⟨"
                      [(«term_^_» («term-_» "-" (num "1")) "^" («term_*_» `n.succ "*" `n)) "," `rfl]
                      "⟩")])
                   "."
                   `mpr)
                  [`this])
                 ["using" (num "1")])
                []
                (Tactic.NormCast.pushCast "push_cast" [] [] [] [] [])
                []
                (Mathlib.Tactic.RingNF.ringNF "ring_nf" [] [] [])
                []
                (Tactic.simp
                 "simp"
                 []
                 []
                 []
                 ["["
                  [(Tactic.simpLemma
                    []
                    []
                    (Term.app `pow_right_comm [(Term.hole "_") (Term.hole "_") (num "2")]))]
                  "]"]
                 [])])))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`aux []]
             [(Term.typeSpec
               ":"
               (Std.ExtendedBinder.«term∀__,_»
                "∀"
                (Lean.binderIdent `i)
                («binderTerm∈_»
                 "∈"
                 (Term.app
                  (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
                  [(num "0")]))
                ","
                («term_≤_» `B.dim "≤" («term_+_» `i "+" `n))))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.intro "intro" [`i `hi])
                 []
                 (Tactic.simp
                  "simp"
                  []
                  []
                  ["only"]
                  ["["
                   [(Tactic.simpLemma [] [] `mem_range) "," (Tactic.simpLemma [] [] `mem_erase)]
                   "]"]
                  [(Tactic.location "at" (Tactic.locationHyp [`hi] []))])
                 []
                 (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hn)] "]") [])
                 []
                 (Tactic.exact
                  "exact"
                  (Term.app
                   `le_add_pred_of_pos
                   [(Term.hole "_") (Term.proj `hi "." (fieldIdx "1"))]))]))))))
          []
          (Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hintsum []]
             [(Term.typeSpec
               ":"
               (Term.app
                `IsIntegral
                [`R
                 («term_-_»
                  («term_*_» `z "*" («term_^_» `B.gen "^" `n))
                  "-"
                  (BigOperators.Algebra.BigOperators.Basic.finset.sum
                   "∑"
                   (Std.ExtendedBinder.extBinders
                    (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
                   " in "
                   (Term.app
                    (Term.proj
                     (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))])
                     "."
                     `erase)
                    [(num "0")])
                   ", "
                   (Algebra.Group.Defs.«term_•_»
                    (Term.app `Q.coeff [`x])
                    " • "
                    (Term.app `f [(«term_+_» `x "+" `n)]))))]))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.refine'
                  "refine'"
                  (Term.app
                   `is_integral_sub
                   [(Term.app
                     `is_integral_mul
                     [`hzint (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])
                    (Term.app
                     `IsIntegral.sum
                     [(Term.hole "_")
                      (Term.fun
                       "fun"
                       (Term.basicFun
                        [`i `hi]
                        []
                        "=>"
                        (Term.app `is_integral_smul [(Term.hole "_") (Term.hole "_")])))])]))
                 []
                 (Tactic.exact
                  "exact"
                  (Term.app
                   `adjoin_le_integral_closure
                   [`hBint
                    (Term.proj
                     (Term.app `hf [(Term.hole "_") (Term.app `aux [`i `hi])])
                     "."
                     (fieldIdx "1"))]))]))))))
          []
          (Std.Tactic.obtain
           "obtain"
           [(Std.Tactic.RCases.rcasesPatMed
             [(Std.Tactic.RCases.rcasesPat.tuple
               "⟨"
               [(Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `r)])
                 [])
                ","
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hr)])
                 [])]
               "⟩")])]
           []
           [":="
            [(Term.app
              (Term.proj `is_integral_iff "." (fieldIdx "1"))
              [(Term.app `is_integral_norm [`K `hintsum])])]])
          []
          (Mathlib.Tactic.«tacticUse_,,» "use" [`r])
          []
          (Tactic.apply "apply" (Term.app `IsFractionRing.injective [`R `K]))
          []
          (Tactic.simp
           "simp"
           []
           []
           ["only"]
           ["["
            [(Tactic.simpLemma [] [] `_root_.map_mul)
             ","
             (Tactic.simpLemma [] [] `_root_.map_pow)
             ","
             (Tactic.simpLemma [] [] `_root_.map_neg)
             ","
             (Tactic.simpLemma [] [] `_root_.map_one)]
            "]"]
           [])
          []
          (calcTactic
           "calc"
           (calcStep
            («term_=_»
             (Term.hole "_")
             "="
             (Term.app
              `norm
              [`K
               (Algebra.Group.Defs.«term_•_»
                (Term.app `Q.coeff [(num "0")])
                " • "
                («term_^_» `B.gen "^" `n))]))
            ":="
            (Term.hole "_"))
           [(calcStep
             («term_=_»
              (Term.hole "_")
              "="
              (Term.app
               `norm
               [`K
                («term_-_»
                 (Algebra.Group.Defs.«term_•_»
                  `p
                  " • "
                  («term_*_» `z "*" («term_^_» `B.gen "^" `n)))
                 "-"
                 (BigOperators.Algebra.BigOperators.Basic.finset.sum
                  "∑"
                  (Std.ExtendedBinder.extBinders
                   (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
                  " in "
                  (Term.app
                   (Term.proj
                    (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))])
                    "."
                    `erase)
                   [(num "0")])
                  ", "
                  (Algebra.Group.Defs.«term_•_»
                   `p
                   " • "
                   (Algebra.Group.Defs.«term_•_»
                    (Term.app `Q.coeff [`x])
                    " • "
                    (Term.app `f [(«term_+_» `x "+" `n)])))))]))
             ":="
             (Term.app
              `congr_arg
              [(Term.app `norm [`K]) (Term.app `eq_sub_of_add_eq [(Term.hole "_")])]))
            (calcStep («term_=_» (Term.hole "_") "=" (Term.hole "_")) ":=" (Term.hole "_"))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.simp
             "simp"
             []
             []
             ["only"]
             ["["
              [(Tactic.simpLemma [] [] `Algebra.smul_def)
               ","
               (Tactic.simpLemma [] [] (Term.app `algebra_map_apply [`R `K `L]))
               ","
               (Tactic.simpLemma [] [] `Algebra.norm_algebra_map)
               ","
               (Tactic.simpLemma [] [] `_root_.map_mul)
               ","
               (Tactic.simpLemma [] [] `_root_.map_pow)
               ","
               (Tactic.simpLemma [] [] `finrank_K_L)
               ","
               (Tactic.simpLemma [] [] `power_basis.norm_gen_eq_coeff_zero_minpoly)
               ","
               (Tactic.simpLemma
                []
                []
                (Term.app `minpoly.gcd_domain_eq_field_fractions' [`K `hBint]))
               ","
               (Tactic.simpLemma [] [] `coeff_map)
               ","
               (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `hn)]
              "]"]
             [])
            []
            (Mathlib.Tactic.RingNF.ring "ring")])
          []
          (Mathlib.Tactic.tacticSwap "swap")
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Mathlib.Tactic.tacticSimp_rw__
             "simp_rw"
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `smul_sum)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `smul_sub)
               ","
               (Tactic.rwRule [] (Term.app `Algebra.smul_def [`p]))
               ","
               (Tactic.rwRule [] (Term.app `algebra_map_apply [`R `K `L]))
               ","
               (Tactic.rwRule [] `_root_.map_mul)
               ","
               (Tactic.rwRule [] `Algebra.norm_algebra_map)
               ","
               (Tactic.rwRule [] `finrank_K_L)
               ","
               (Tactic.rwRule [] `hr)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hn)]
              "]")
             [])])
          []
          (calcTactic
           "calc"
           (calcStep
            («term_=_»
             (Term.hole "_")
             "="
             («term_*_»
              («term_+_»
               (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [(num "0")]) " • " (num "1"))
               "+"
               (BigOperators.Algebra.BigOperators.Basic.finset.sum
                "∑"
                (Std.ExtendedBinder.extBinders
                 (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
                " in "
                (Term.app
                 (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
                 [(num "0")])
                ", "
                (Algebra.Group.Defs.«term_•_»
                 (Term.app `Q.coeff [`x])
                 " • "
                 («term_^_» `B.gen "^" `x))))
              "*"
              («term_^_» `B.gen "^" `n)))
            ":="
            (Term.hole "_"))
           [(calcStep
             («term_=_»
              (Term.hole "_")
              "="
              («term_*_»
               («term_+_»
                (Algebra.Group.Defs.«term_•_»
                 (Term.app `Q.coeff [(num "0")])
                 " • "
                 («term_^_» `B.gen "^" (num "0")))
                "+"
                (BigOperators.Algebra.BigOperators.Basic.finset.sum
                 "∑"
                 (Std.ExtendedBinder.extBinders
                  (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
                 " in "
                 (Term.app
                  (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
                  [(num "0")])
                 ", "
                 (Algebra.Group.Defs.«term_•_»
                  (Term.app `Q.coeff [`x])
                  " • "
                  («term_^_» `B.gen "^" `x))))
               "*"
               («term_^_» `B.gen "^" `n)))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `pow_zero)] "]")
                  [])]))))
            (calcStep
             («term_=_»
              (Term.hole "_")
              "="
              («term_*_» (Term.app `aeval [`B.gen `Q]) "*" («term_^_» `B.gen "^" `n)))
             ":="
             (Term.hole "_"))
            (calcStep
             («term_=_» (Term.hole "_") "=" (Term.hole "_"))
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule [] `hQ) "," (Tactic.rwRule [] `Algebra.smul_mul_assoc)]
                   "]")
                  [])]))))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               []
               [(Term.typeSpec
                 ":"
                 (Std.ExtendedBinder.«term∀__,_»
                  "∀"
                  (Lean.binderIdent `i)
                  («binderTerm∈_»
                   "∈"
                   (Term.app
                    (Term.proj
                     (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))])
                     "."
                     `erase)
                    [(num "0")]))
                  ","
                  («term_=_»
                   (Algebra.Group.Defs.«term_•_»
                    (Term.app `Q.coeff [`i])
                    " • "
                    («term_*_» («term_^_» `B.gen "^" `i) "*" («term_^_» `B.gen "^" `n)))
                   "="
                   (Algebra.Group.Defs.«term_•_»
                    `p
                    " • "
                    (Algebra.Group.Defs.«term_•_»
                     (Term.app `Q.coeff [`i])
                     " • "
                     (Term.app `f [(«term_+_» `i "+" `n)]))))))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(Tactic.intro "intro" [`i `hi])
                   []
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `pow_add)
                      ","
                      (Tactic.rwRule
                       [(patternIgnore (token.«← » "←"))]
                       (Term.proj
                        (Term.app `hf [(Term.hole "_") (Term.app `aux [`i `hi])])
                        "."
                        (fieldIdx "2")))
                      ","
                      (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Algebra.smul_def)
                      ","
                      (Tactic.rwRule [] `smul_smul)
                      ","
                      (Tactic.rwRule [] (Term.app `mul_comm [(Term.hole "_") `p]))
                      ","
                      (Tactic.rwRule [] `smul_smul)]
                     "]")
                    [])]))))))
            []
            (Tactic.simp
             "simp"
             []
             []
             ["only"]
             ["["
              [(Tactic.simpLemma [] [] `add_mul)
               ","
               (Tactic.simpLemma [] [] `smul_mul_assoc)
               ","
               (Tactic.simpLemma [] [] `one_mul)
               ","
               (Tactic.simpLemma [] [] `sum_mul)
               ","
               (Tactic.simpLemma [] [] (Term.app `sum_congr [`rfl `this]))]
              "]"]
             [])])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `aeval_eq_sum_range)
               ","
               (Tactic.rwRule
                []
                (Term.app
                 `Finset.add_sum_erase
                 [(Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))])
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [`i]
                    []
                    "=>"
                    (Algebra.Group.Defs.«term_•_»
                     (Term.app `Q.coeff [`i])
                     " • "
                     («term_^_» `B.gen "^" `i))))]))]
              "]")
             [])
            []
            (Tactic.simp "simp" [] [] [] [] [])])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `aeval_eq_sum_range)
           ","
           (Tactic.rwRule
            []
            (Term.app
             `Finset.add_sum_erase
             [(Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))])
              (Term.fun
               "fun"
               (Term.basicFun
                [`i]
                []
                "=>"
                (Algebra.Group.Defs.«term_•_»
                 (Term.app `Q.coeff [`i])
                 " • "
                 («term_^_» `B.gen "^" `i))))]))]
          "]")
         [])
        []
        (Tactic.simp "simp" [] [] [] [] [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp "simp" [] [] [] [] [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `aeval_eq_sum_range)
         ","
         (Tactic.rwRule
          []
          (Term.app
           `Finset.add_sum_erase
           [(Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))])
            (Term.fun
             "fun"
             (Term.basicFun
              [`i]
              []
              "=>"
              (Algebra.Group.Defs.«term_•_»
               (Term.app `Q.coeff [`i])
               " • "
               («term_^_» `B.gen "^" `i))))]))]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Finset.add_sum_erase
       [(Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))])
        (Term.fun
         "fun"
         (Term.basicFun
          [`i]
          []
          "=>"
          (Algebra.Group.Defs.«term_•_»
           (Term.app `Q.coeff [`i])
           " • "
           («term_^_» `B.gen "^" `i))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`i]
        []
        "=>"
        (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [`i]) " • " («term_^_» `B.gen "^" `i))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [`i]) " • " («term_^_» `B.gen "^" `i))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» `B.gen "^" `i)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      (Term.app `Q.coeff [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Q.coeff
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1022, (some 1023, term) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `Q.nat_degree "+" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `Q.nat_degree
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_+_» `Q.nat_degree "+" (num "1"))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `range
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `range [(Term.paren "(" («term_+_» `Q.nat_degree "+" (num "1")) ")")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Finset.add_sum_erase
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `aeval_eq_sum_range
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec
             ":"
             (Std.ExtendedBinder.«term∀__,_»
              "∀"
              (Lean.binderIdent `i)
              («binderTerm∈_»
               "∈"
               (Term.app
                (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
                [(num "0")]))
              ","
              («term_=_»
               (Algebra.Group.Defs.«term_•_»
                (Term.app `Q.coeff [`i])
                " • "
                («term_*_» («term_^_» `B.gen "^" `i) "*" («term_^_» `B.gen "^" `n)))
               "="
               (Algebra.Group.Defs.«term_•_»
                `p
                " • "
                (Algebra.Group.Defs.«term_•_»
                 (Term.app `Q.coeff [`i])
                 " • "
                 (Term.app `f [(«term_+_» `i "+" `n)]))))))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.intro "intro" [`i `hi])
               []
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `pow_add)
                  ","
                  (Tactic.rwRule
                   [(patternIgnore (token.«← » "←"))]
                   (Term.proj
                    (Term.app `hf [(Term.hole "_") (Term.app `aux [`i `hi])])
                    "."
                    (fieldIdx "2")))
                  ","
                  (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Algebra.smul_def)
                  ","
                  (Tactic.rwRule [] `smul_smul)
                  ","
                  (Tactic.rwRule [] (Term.app `mul_comm [(Term.hole "_") `p]))
                  ","
                  (Tactic.rwRule [] `smul_smul)]
                 "]")
                [])]))))))
        []
        (Tactic.simp
         "simp"
         []
         []
         ["only"]
         ["["
          [(Tactic.simpLemma [] [] `add_mul)
           ","
           (Tactic.simpLemma [] [] `smul_mul_assoc)
           ","
           (Tactic.simpLemma [] [] `one_mul)
           ","
           (Tactic.simpLemma [] [] `sum_mul)
           ","
           (Tactic.simpLemma [] [] (Term.app `sum_congr [`rfl `this]))]
          "]"]
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       ["only"]
       ["["
        [(Tactic.simpLemma [] [] `add_mul)
         ","
         (Tactic.simpLemma [] [] `smul_mul_assoc)
         ","
         (Tactic.simpLemma [] [] `one_mul)
         ","
         (Tactic.simpLemma [] [] `sum_mul)
         ","
         (Tactic.simpLemma [] [] (Term.app `sum_congr [`rfl `this]))]
        "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `sum_congr [`rfl `this])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `this
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `rfl
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `sum_congr
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `sum_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `one_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `smul_mul_assoc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `add_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec
           ":"
           (Std.ExtendedBinder.«term∀__,_»
            "∀"
            (Lean.binderIdent `i)
            («binderTerm∈_»
             "∈"
             (Term.app
              (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
              [(num "0")]))
            ","
            («term_=_»
             (Algebra.Group.Defs.«term_•_»
              (Term.app `Q.coeff [`i])
              " • "
              («term_*_» («term_^_» `B.gen "^" `i) "*" («term_^_» `B.gen "^" `n)))
             "="
             (Algebra.Group.Defs.«term_•_»
              `p
              " • "
              (Algebra.Group.Defs.«term_•_»
               (Term.app `Q.coeff [`i])
               " • "
               (Term.app `f [(«term_+_» `i "+" `n)]))))))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.intro "intro" [`i `hi])
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `pow_add)
                ","
                (Tactic.rwRule
                 [(patternIgnore (token.«← » "←"))]
                 (Term.proj
                  (Term.app `hf [(Term.hole "_") (Term.app `aux [`i `hi])])
                  "."
                  (fieldIdx "2")))
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Algebra.smul_def)
                ","
                (Tactic.rwRule [] `smul_smul)
                ","
                (Tactic.rwRule [] (Term.app `mul_comm [(Term.hole "_") `p]))
                ","
                (Tactic.rwRule [] `smul_smul)]
               "]")
              [])]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.intro "intro" [`i `hi])
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `pow_add)
             ","
             (Tactic.rwRule
              [(patternIgnore (token.«← » "←"))]
              (Term.proj
               (Term.app `hf [(Term.hole "_") (Term.app `aux [`i `hi])])
               "."
               (fieldIdx "2")))
             ","
             (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Algebra.smul_def)
             ","
             (Tactic.rwRule [] `smul_smul)
             ","
             (Tactic.rwRule [] (Term.app `mul_comm [(Term.hole "_") `p]))
             ","
             (Tactic.rwRule [] `smul_smul)]
            "]")
           [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `pow_add)
         ","
         (Tactic.rwRule
          [(patternIgnore (token.«← » "←"))]
          (Term.proj (Term.app `hf [(Term.hole "_") (Term.app `aux [`i `hi])]) "." (fieldIdx "2")))
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Algebra.smul_def)
         ","
         (Tactic.rwRule [] `smul_smul)
         ","
         (Tactic.rwRule [] (Term.app `mul_comm [(Term.hole "_") `p]))
         ","
         (Tactic.rwRule [] `smul_smul)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `smul_smul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `mul_comm [(Term.hole "_") `p])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `p
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mul_comm
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `smul_smul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Algebra.smul_def
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `hf [(Term.hole "_") (Term.app `aux [`i `hi])]) "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `hf [(Term.hole "_") (Term.app `aux [`i `hi])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `aux [`i `hi])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hi
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `aux
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `aux [`i `hi]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hf
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `hf [(Term.hole "_") (Term.paren "(" (Term.app `aux [`i `hi]) ")")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `pow_add
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`i `hi])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.«term∀__,_»
       "∀"
       (Lean.binderIdent `i)
       («binderTerm∈_»
        "∈"
        (Term.app
         (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
         [(num "0")]))
       ","
       («term_=_»
        (Algebra.Group.Defs.«term_•_»
         (Term.app `Q.coeff [`i])
         " • "
         («term_*_» («term_^_» `B.gen "^" `i) "*" («term_^_» `B.gen "^" `n)))
        "="
        (Algebra.Group.Defs.«term_•_»
         `p
         " • "
         (Algebra.Group.Defs.«term_•_»
          (Term.app `Q.coeff [`i])
          " • "
          (Term.app `f [(«term_+_» `i "+" `n)])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_»
       (Algebra.Group.Defs.«term_•_»
        (Term.app `Q.coeff [`i])
        " • "
        («term_*_» («term_^_» `B.gen "^" `i) "*" («term_^_» `B.gen "^" `n)))
       "="
       (Algebra.Group.Defs.«term_•_»
        `p
        " • "
        (Algebra.Group.Defs.«term_•_»
         (Term.app `Q.coeff [`i])
         " • "
         (Term.app `f [(«term_+_» `i "+" `n)]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Algebra.Group.Defs.«term_•_»
       `p
       " • "
       (Algebra.Group.Defs.«term_•_»
        (Term.app `Q.coeff [`i])
        " • "
        (Term.app `f [(«term_+_» `i "+" `n)])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Algebra.Group.Defs.«term_•_»
       (Term.app `Q.coeff [`i])
       " • "
       (Term.app `f [(«term_+_» `i "+" `n)]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [(«term_+_» `i "+" `n)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `i "+" `n)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_+_» `i "+" `n) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      (Term.app `Q.coeff [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Q.coeff
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1022, (some 1023, term) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      `p
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Algebra.Group.Defs.«term_•_»
       (Term.app `Q.coeff [`i])
       " • "
       («term_*_» («term_^_» `B.gen "^" `i) "*" («term_^_» `B.gen "^" `n)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» («term_^_» `B.gen "^" `i) "*" («term_^_» `B.gen "^" `n))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» `B.gen "^" `n)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      («term_^_» `B.gen "^" `i)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 80, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_*_» («term_^_» `B.gen "^" `i) "*" («term_^_» `B.gen "^" `n))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      (Term.app `Q.coeff [`i])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Q.coeff
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1022, (some 1023, term) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 73, (some 73, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
       [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `Q.nat_degree "+" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `Q.nat_degree
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_+_» `Q.nat_degree "+" (num "1"))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `range
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `range [(Term.paren "(" («term_+_» `Q.nat_degree "+" (num "1")) ")")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (calcTactic
       "calc"
       (calcStep
        («term_=_»
         (Term.hole "_")
         "="
         («term_*_»
          («term_+_»
           (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [(num "0")]) " • " (num "1"))
           "+"
           (BigOperators.Algebra.BigOperators.Basic.finset.sum
            "∑"
            (Std.ExtendedBinder.extBinders
             (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
            " in "
            (Term.app
             (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
             [(num "0")])
            ", "
            (Algebra.Group.Defs.«term_•_»
             (Term.app `Q.coeff [`x])
             " • "
             («term_^_» `B.gen "^" `x))))
          "*"
          («term_^_» `B.gen "^" `n)))
        ":="
        (Term.hole "_"))
       [(calcStep
         («term_=_»
          (Term.hole "_")
          "="
          («term_*_»
           («term_+_»
            (Algebra.Group.Defs.«term_•_»
             (Term.app `Q.coeff [(num "0")])
             " • "
             («term_^_» `B.gen "^" (num "0")))
            "+"
            (BigOperators.Algebra.BigOperators.Basic.finset.sum
             "∑"
             (Std.ExtendedBinder.extBinders
              (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
             " in "
             (Term.app
              (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
              [(num "0")])
             ", "
             (Algebra.Group.Defs.«term_•_»
              (Term.app `Q.coeff [`x])
              " • "
              («term_^_» `B.gen "^" `x))))
           "*"
           («term_^_» `B.gen "^" `n)))
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `pow_zero)] "]")
              [])]))))
        (calcStep
         («term_=_»
          (Term.hole "_")
          "="
          («term_*_» (Term.app `aeval [`B.gen `Q]) "*" («term_^_» `B.gen "^" `n)))
         ":="
         (Term.hole "_"))
        (calcStep
         («term_=_» (Term.hole "_") "=" (Term.hole "_"))
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `hQ) "," (Tactic.rwRule [] `Algebra.smul_mul_assoc)]
               "]")
              [])]))))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `hQ) "," (Tactic.rwRule [] `Algebra.smul_mul_assoc)]
            "]")
           [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `hQ) "," (Tactic.rwRule [] `Algebra.smul_mul_assoc)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Algebra.smul_mul_assoc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hQ
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.hole "_") "=" (Term.hole "_"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_»
       (Term.hole "_")
       "="
       («term_*_» (Term.app `aeval [`B.gen `Q]) "*" («term_^_» `B.gen "^" `n)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» (Term.app `aeval [`B.gen `Q]) "*" («term_^_» `B.gen "^" `n))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» `B.gen "^" `n)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Term.app `aeval [`B.gen `Q])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Q
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `aeval
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1022, (some 1023, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `pow_zero)] "]") [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `pow_zero)] "]") [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `pow_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_»
       (Term.hole "_")
       "="
       («term_*_»
        («term_+_»
         (Algebra.Group.Defs.«term_•_»
          (Term.app `Q.coeff [(num "0")])
          " • "
          («term_^_» `B.gen "^" (num "0")))
         "+"
         (BigOperators.Algebra.BigOperators.Basic.finset.sum
          "∑"
          (Std.ExtendedBinder.extBinders
           (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
          " in "
          (Term.app
           (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
           [(num "0")])
          ", "
          (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [`x]) " • " («term_^_» `B.gen "^" `x))))
        "*"
        («term_^_» `B.gen "^" `n)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_»
       («term_+_»
        (Algebra.Group.Defs.«term_•_»
         (Term.app `Q.coeff [(num "0")])
         " • "
         («term_^_» `B.gen "^" (num "0")))
        "+"
        (BigOperators.Algebra.BigOperators.Basic.finset.sum
         "∑"
         (Std.ExtendedBinder.extBinders
          (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
         " in "
         (Term.app
          (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
          [(num "0")])
         ", "
         (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [`x]) " • " («term_^_» `B.gen "^" `x))))
       "*"
       («term_^_» `B.gen "^" `n))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» `B.gen "^" `n)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      («term_+_»
       (Algebra.Group.Defs.«term_•_»
        (Term.app `Q.coeff [(num "0")])
        " • "
        («term_^_» `B.gen "^" (num "0")))
       "+"
       (BigOperators.Algebra.BigOperators.Basic.finset.sum
        "∑"
        (Std.ExtendedBinder.extBinders
         (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
        " in "
        (Term.app
         (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
         [(num "0")])
        ", "
        (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [`x]) " • " («term_^_» `B.gen "^" `x))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (BigOperators.Algebra.BigOperators.Basic.finset.sum
       "∑"
       (Std.ExtendedBinder.extBinders
        (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
       " in "
       (Term.app
        (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
        [(num "0")])
       ", "
       (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [`x]) " • " («term_^_» `B.gen "^" `x)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [`x]) " • " («term_^_» `B.gen "^" `x))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» `B.gen "^" `x)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      (Term.app `Q.coeff [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Q.coeff
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1022, (some 1023, term) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
       [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `Q.nat_degree "+" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `Q.nat_degree
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_+_» `Q.nat_degree "+" (num "1"))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `range
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `range [(Term.paren "(" («term_+_» `Q.nat_degree "+" (num "1")) ")")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (termℕ "ℕ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (Algebra.Group.Defs.«term_•_»
       (Term.app `Q.coeff [(num "0")])
       " • "
       («term_^_» `B.gen "^" (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» `B.gen "^" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      (Term.app `Q.coeff [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Q.coeff
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1022, (some 1023, term) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 73, (some 73, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 65, (some 0, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_+_»
      (Algebra.Group.Defs.«term_•_»
       (Term.app `Q.coeff [(num "0")])
       " • "
       («term_^_» `B.gen "^" (num "0")))
      "+"
      (BigOperators.Algebra.BigOperators.Basic.finset.sum
       "∑"
       (Std.ExtendedBinder.extBinders
        (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
       " in "
       (Term.app
        (Term.proj
         (Term.paren
          "("
          (Term.app `range [(Term.paren "(" («term_+_» `Q.nat_degree "+" (num "1")) ")")])
          ")")
         "."
         `erase)
        [(num "0")])
       ", "
       (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [`x]) " • " («term_^_» `B.gen "^" `x))))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_»
       (Term.hole "_")
       "="
       («term_*_»
        («term_+_»
         (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [(num "0")]) " • " (num "1"))
         "+"
         (BigOperators.Algebra.BigOperators.Basic.finset.sum
          "∑"
          (Std.ExtendedBinder.extBinders
           (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
          " in "
          (Term.app
           (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
           [(num "0")])
          ", "
          (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [`x]) " • " («term_^_» `B.gen "^" `x))))
        "*"
        («term_^_» `B.gen "^" `n)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_»
       («term_+_»
        (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [(num "0")]) " • " (num "1"))
        "+"
        (BigOperators.Algebra.BigOperators.Basic.finset.sum
         "∑"
         (Std.ExtendedBinder.extBinders
          (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
         " in "
         (Term.app
          (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
          [(num "0")])
         ", "
         (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [`x]) " • " («term_^_» `B.gen "^" `x))))
       "*"
       («term_^_» `B.gen "^" `n))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» `B.gen "^" `n)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      («term_+_»
       (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [(num "0")]) " • " (num "1"))
       "+"
       (BigOperators.Algebra.BigOperators.Basic.finset.sum
        "∑"
        (Std.ExtendedBinder.extBinders
         (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
        " in "
        (Term.app
         (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
         [(num "0")])
        ", "
        (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [`x]) " • " («term_^_» `B.gen "^" `x))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (BigOperators.Algebra.BigOperators.Basic.finset.sum
       "∑"
       (Std.ExtendedBinder.extBinders
        (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
       " in "
       (Term.app
        (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
        [(num "0")])
       ", "
       (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [`x]) " • " («term_^_» `B.gen "^" `x)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [`x]) " • " («term_^_» `B.gen "^" `x))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» `B.gen "^" `x)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      (Term.app `Q.coeff [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Q.coeff
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1022, (some 1023, term) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
       [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `Q.nat_degree "+" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `Q.nat_degree
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_+_» `Q.nat_degree "+" (num "1"))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `range
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `range [(Term.paren "(" («term_+_» `Q.nat_degree "+" (num "1")) ")")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (termℕ "ℕ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [(num "0")]) " • " (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      (Term.app `Q.coeff [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Q.coeff
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1022, (some 1023, term) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 73, (some 73, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 65, (some 0, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_+_»
      (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [(num "0")]) " • " (num "1"))
      "+"
      (BigOperators.Algebra.BigOperators.Basic.finset.sum
       "∑"
       (Std.ExtendedBinder.extBinders
        (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
       " in "
       (Term.app
        (Term.proj
         (Term.paren
          "("
          (Term.app `range [(Term.paren "(" («term_+_» `Q.nat_degree "+" (num "1")) ")")])
          ")")
         "."
         `erase)
        [(num "0")])
       ", "
       (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [`x]) " • " («term_^_» `B.gen "^" `x))))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Mathlib.Tactic.tacticSimp_rw__
         "simp_rw"
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `smul_sum)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `smul_sub)
           ","
           (Tactic.rwRule [] (Term.app `Algebra.smul_def [`p]))
           ","
           (Tactic.rwRule [] (Term.app `algebra_map_apply [`R `K `L]))
           ","
           (Tactic.rwRule [] `_root_.map_mul)
           ","
           (Tactic.rwRule [] `Algebra.norm_algebra_map)
           ","
           (Tactic.rwRule [] `finrank_K_L)
           ","
           (Tactic.rwRule [] `hr)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hn)]
          "]")
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.tacticSimp_rw__
       "simp_rw"
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `smul_sum)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `smul_sub)
         ","
         (Tactic.rwRule [] (Term.app `Algebra.smul_def [`p]))
         ","
         (Tactic.rwRule [] (Term.app `algebra_map_apply [`R `K `L]))
         ","
         (Tactic.rwRule [] `_root_.map_mul)
         ","
         (Tactic.rwRule [] `Algebra.norm_algebra_map)
         ","
         (Tactic.rwRule [] `finrank_K_L)
         ","
         (Tactic.rwRule [] `hr)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hn)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hn
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hr
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `finrank_K_L
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Algebra.norm_algebra_map
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `_root_.map_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `algebra_map_apply [`R `K `L])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `L
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `algebra_map_apply
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Algebra.smul_def [`p])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `p
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Algebra.smul_def
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `smul_sub
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `smul_sum
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.tacticSwap "swap")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.simp
         "simp"
         []
         []
         ["only"]
         ["["
          [(Tactic.simpLemma [] [] `Algebra.smul_def)
           ","
           (Tactic.simpLemma [] [] (Term.app `algebra_map_apply [`R `K `L]))
           ","
           (Tactic.simpLemma [] [] `Algebra.norm_algebra_map)
           ","
           (Tactic.simpLemma [] [] `_root_.map_mul)
           ","
           (Tactic.simpLemma [] [] `_root_.map_pow)
           ","
           (Tactic.simpLemma [] [] `finrank_K_L)
           ","
           (Tactic.simpLemma [] [] `power_basis.norm_gen_eq_coeff_zero_minpoly)
           ","
           (Tactic.simpLemma [] [] (Term.app `minpoly.gcd_domain_eq_field_fractions' [`K `hBint]))
           ","
           (Tactic.simpLemma [] [] `coeff_map)
           ","
           (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `hn)]
          "]"]
         [])
        []
        (Mathlib.Tactic.RingNF.ring "ring")])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.RingNF.ring "ring")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       ["only"]
       ["["
        [(Tactic.simpLemma [] [] `Algebra.smul_def)
         ","
         (Tactic.simpLemma [] [] (Term.app `algebra_map_apply [`R `K `L]))
         ","
         (Tactic.simpLemma [] [] `Algebra.norm_algebra_map)
         ","
         (Tactic.simpLemma [] [] `_root_.map_mul)
         ","
         (Tactic.simpLemma [] [] `_root_.map_pow)
         ","
         (Tactic.simpLemma [] [] `finrank_K_L)
         ","
         (Tactic.simpLemma [] [] `power_basis.norm_gen_eq_coeff_zero_minpoly)
         ","
         (Tactic.simpLemma [] [] (Term.app `minpoly.gcd_domain_eq_field_fractions' [`K `hBint]))
         ","
         (Tactic.simpLemma [] [] `coeff_map)
         ","
         (Tactic.simpLemma [] [(patternIgnore (token.«← » "←"))] `hn)]
        "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hn
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `coeff_map
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `minpoly.gcd_domain_eq_field_fractions' [`K `hBint])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hBint
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `minpoly.gcd_domain_eq_field_fractions'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `power_basis.norm_gen_eq_coeff_zero_minpoly
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `finrank_K_L
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `_root_.map_pow
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `_root_.map_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Algebra.norm_algebra_map
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `algebra_map_apply [`R `K `L])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `L
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `algebra_map_apply
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Algebra.smul_def
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (calcTactic
       "calc"
       (calcStep
        («term_=_»
         (Term.hole "_")
         "="
         (Term.app
          `norm
          [`K
           (Algebra.Group.Defs.«term_•_»
            (Term.app `Q.coeff [(num "0")])
            " • "
            («term_^_» `B.gen "^" `n))]))
        ":="
        (Term.hole "_"))
       [(calcStep
         («term_=_»
          (Term.hole "_")
          "="
          (Term.app
           `norm
           [`K
            («term_-_»
             (Algebra.Group.Defs.«term_•_» `p " • " («term_*_» `z "*" («term_^_» `B.gen "^" `n)))
             "-"
             (BigOperators.Algebra.BigOperators.Basic.finset.sum
              "∑"
              (Std.ExtendedBinder.extBinders
               (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
              " in "
              (Term.app
               (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
               [(num "0")])
              ", "
              (Algebra.Group.Defs.«term_•_»
               `p
               " • "
               (Algebra.Group.Defs.«term_•_»
                (Term.app `Q.coeff [`x])
                " • "
                (Term.app `f [(«term_+_» `x "+" `n)])))))]))
         ":="
         (Term.app
          `congr_arg
          [(Term.app `norm [`K]) (Term.app `eq_sub_of_add_eq [(Term.hole "_")])]))
        (calcStep («term_=_» (Term.hole "_") "=" (Term.hole "_")) ":=" (Term.hole "_"))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.hole "_") "=" (Term.hole "_"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
      (Term.app `congr_arg [(Term.app `norm [`K]) (Term.app `eq_sub_of_add_eq [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `eq_sub_of_add_eq [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `eq_sub_of_add_eq
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `eq_sub_of_add_eq [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `norm [`K])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `norm
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `norm [`K]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `congr_arg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_»
       (Term.hole "_")
       "="
       (Term.app
        `norm
        [`K
         («term_-_»
          (Algebra.Group.Defs.«term_•_» `p " • " («term_*_» `z "*" («term_^_» `B.gen "^" `n)))
          "-"
          (BigOperators.Algebra.BigOperators.Basic.finset.sum
           "∑"
           (Std.ExtendedBinder.extBinders
            (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
           " in "
           (Term.app
            (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
            [(num "0")])
           ", "
           (Algebra.Group.Defs.«term_•_»
            `p
            " • "
            (Algebra.Group.Defs.«term_•_»
             (Term.app `Q.coeff [`x])
             " • "
             (Term.app `f [(«term_+_» `x "+" `n)])))))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `norm
       [`K
        («term_-_»
         (Algebra.Group.Defs.«term_•_» `p " • " («term_*_» `z "*" («term_^_» `B.gen "^" `n)))
         "-"
         (BigOperators.Algebra.BigOperators.Basic.finset.sum
          "∑"
          (Std.ExtendedBinder.extBinders
           (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
          " in "
          (Term.app
           (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
           [(num "0")])
          ", "
          (Algebra.Group.Defs.«term_•_»
           `p
           " • "
           (Algebra.Group.Defs.«term_•_»
            (Term.app `Q.coeff [`x])
            " • "
            (Term.app `f [(«term_+_» `x "+" `n)])))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_-_»
       (Algebra.Group.Defs.«term_•_» `p " • " («term_*_» `z "*" («term_^_» `B.gen "^" `n)))
       "-"
       (BigOperators.Algebra.BigOperators.Basic.finset.sum
        "∑"
        (Std.ExtendedBinder.extBinders
         (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
        " in "
        (Term.app
         (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
         [(num "0")])
        ", "
        (Algebra.Group.Defs.«term_•_»
         `p
         " • "
         (Algebra.Group.Defs.«term_•_»
          (Term.app `Q.coeff [`x])
          " • "
          (Term.app `f [(«term_+_» `x "+" `n)])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (BigOperators.Algebra.BigOperators.Basic.finset.sum
       "∑"
       (Std.ExtendedBinder.extBinders
        (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
       " in "
       (Term.app
        (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
        [(num "0")])
       ", "
       (Algebra.Group.Defs.«term_•_»
        `p
        " • "
        (Algebra.Group.Defs.«term_•_»
         (Term.app `Q.coeff [`x])
         " • "
         (Term.app `f [(«term_+_» `x "+" `n)]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Algebra.Group.Defs.«term_•_»
       `p
       " • "
       (Algebra.Group.Defs.«term_•_»
        (Term.app `Q.coeff [`x])
        " • "
        (Term.app `f [(«term_+_» `x "+" `n)])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Algebra.Group.Defs.«term_•_»
       (Term.app `Q.coeff [`x])
       " • "
       (Term.app `f [(«term_+_» `x "+" `n)]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [(«term_+_» `x "+" `n)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `x "+" `n)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_+_» `x "+" `n) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      (Term.app `Q.coeff [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Q.coeff
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1022, (some 1023, term) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      `p
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
       [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `Q.nat_degree "+" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `Q.nat_degree
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_+_» `Q.nat_degree "+" (num "1"))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `range
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `range [(Term.paren "(" («term_+_» `Q.nat_degree "+" (num "1")) ")")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (termℕ "ℕ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (Algebra.Group.Defs.«term_•_» `p " • " («term_*_» `z "*" («term_^_» `B.gen "^" `n)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `z "*" («term_^_» `B.gen "^" `n))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» `B.gen "^" `n)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_*_» `z "*" («term_^_» `B.gen "^" `n))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      `p
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 73, (some 73, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_-_»
      (Algebra.Group.Defs.«term_•_»
       `p
       " • "
       (Term.paren "(" («term_*_» `z "*" («term_^_» `B.gen "^" `n)) ")"))
      "-"
      (BigOperators.Algebra.BigOperators.Basic.finset.sum
       "∑"
       (Std.ExtendedBinder.extBinders
        (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
       " in "
       (Term.app
        (Term.proj
         (Term.paren
          "("
          (Term.app `range [(Term.paren "(" («term_+_» `Q.nat_degree "+" (num "1")) ")")])
          ")")
         "."
         `erase)
        [(num "0")])
       ", "
       (Algebra.Group.Defs.«term_•_»
        `p
        " • "
        (Algebra.Group.Defs.«term_•_»
         (Term.app `Q.coeff [`x])
         " • "
         (Term.app `f [(Term.paren "(" («term_+_» `x "+" `n) ")")])))))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `norm
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (none, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_»
       (Term.hole "_")
       "="
       (Term.app
        `norm
        [`K
         (Algebra.Group.Defs.«term_•_»
          (Term.app `Q.coeff [(num "0")])
          " • "
          («term_^_» `B.gen "^" `n))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `norm
       [`K
        (Algebra.Group.Defs.«term_•_»
         (Term.app `Q.coeff [(num "0")])
         " • "
         («term_^_» `B.gen "^" `n))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.«term_•_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Algebra.Group.Defs.«term_•_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [(num "0")]) " • " («term_^_» `B.gen "^" `n))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» `B.gen "^" `n)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      (Term.app `Q.coeff [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Q.coeff
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1022, (some 1023, term) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [(num "0")]) " • " («term_^_» `B.gen "^" `n))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `norm
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       ["only"]
       ["["
        [(Tactic.simpLemma [] [] `_root_.map_mul)
         ","
         (Tactic.simpLemma [] [] `_root_.map_pow)
         ","
         (Tactic.simpLemma [] [] `_root_.map_neg)
         ","
         (Tactic.simpLemma [] [] `_root_.map_one)]
        "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `_root_.map_one
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `_root_.map_neg
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `_root_.map_pow
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `_root_.map_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.apply "apply" (Term.app `IsFractionRing.injective [`R `K]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `IsFractionRing.injective [`R `K])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `IsFractionRing.injective
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.«tacticUse_,,» "use" [`r])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `r
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.obtain
       "obtain"
       [(Std.Tactic.RCases.rcasesPatMed
         [(Std.Tactic.RCases.rcasesPat.tuple
           "⟨"
           [(Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `r)])
             [])
            ","
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hr)])
             [])]
           "⟩")])]
       []
       [":="
        [(Term.app
          (Term.proj `is_integral_iff "." (fieldIdx "1"))
          [(Term.app `is_integral_norm [`K `hintsum])])]])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `is_integral_iff "." (fieldIdx "1"))
       [(Term.app `is_integral_norm [`K `hintsum])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `is_integral_norm [`K `hintsum])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hintsum
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `is_integral_norm
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `is_integral_norm [`K `hintsum])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `is_integral_iff "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `is_integral_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hintsum []]
         [(Term.typeSpec
           ":"
           (Term.app
            `IsIntegral
            [`R
             («term_-_»
              («term_*_» `z "*" («term_^_» `B.gen "^" `n))
              "-"
              (BigOperators.Algebra.BigOperators.Basic.finset.sum
               "∑"
               (Std.ExtendedBinder.extBinders
                (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
               " in "
               (Term.app
                (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
                [(num "0")])
               ", "
               (Algebra.Group.Defs.«term_•_»
                (Term.app `Q.coeff [`x])
                " • "
                (Term.app `f [(«term_+_» `x "+" `n)]))))]))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.refine'
              "refine'"
              (Term.app
               `is_integral_sub
               [(Term.app
                 `is_integral_mul
                 [`hzint (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])
                (Term.app
                 `IsIntegral.sum
                 [(Term.hole "_")
                  (Term.fun
                   "fun"
                   (Term.basicFun
                    [`i `hi]
                    []
                    "=>"
                    (Term.app `is_integral_smul [(Term.hole "_") (Term.hole "_")])))])]))
             []
             (Tactic.exact
              "exact"
              (Term.app
               `adjoin_le_integral_closure
               [`hBint
                (Term.proj
                 (Term.app `hf [(Term.hole "_") (Term.app `aux [`i `hi])])
                 "."
                 (fieldIdx "1"))]))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.refine'
           "refine'"
           (Term.app
            `is_integral_sub
            [(Term.app
              `is_integral_mul
              [`hzint (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])
             (Term.app
              `IsIntegral.sum
              [(Term.hole "_")
               (Term.fun
                "fun"
                (Term.basicFun
                 [`i `hi]
                 []
                 "=>"
                 (Term.app `is_integral_smul [(Term.hole "_") (Term.hole "_")])))])]))
          []
          (Tactic.exact
           "exact"
           (Term.app
            `adjoin_le_integral_closure
            [`hBint
             (Term.proj
              (Term.app `hf [(Term.hole "_") (Term.app `aux [`i `hi])])
              "."
              (fieldIdx "1"))]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `adjoin_le_integral_closure
        [`hBint
         (Term.proj (Term.app `hf [(Term.hole "_") (Term.app `aux [`i `hi])]) "." (fieldIdx "1"))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `adjoin_le_integral_closure
       [`hBint
        (Term.proj (Term.app `hf [(Term.hole "_") (Term.app `aux [`i `hi])]) "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `hf [(Term.hole "_") (Term.app `aux [`i `hi])]) "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `hf [(Term.hole "_") (Term.app `aux [`i `hi])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `aux [`i `hi])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hi
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `aux
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `aux [`i `hi]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hf
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `hf [(Term.hole "_") (Term.paren "(" (Term.app `aux [`i `hi]) ")")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hBint
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `adjoin_le_integral_closure
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `is_integral_sub
        [(Term.app `is_integral_mul [`hzint (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])
         (Term.app
          `IsIntegral.sum
          [(Term.hole "_")
           (Term.fun
            "fun"
            (Term.basicFun
             [`i `hi]
             []
             "=>"
             (Term.app `is_integral_smul [(Term.hole "_") (Term.hole "_")])))])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `is_integral_sub
       [(Term.app `is_integral_mul [`hzint (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])
        (Term.app
         `IsIntegral.sum
         [(Term.hole "_")
          (Term.fun
           "fun"
           (Term.basicFun
            [`i `hi]
            []
            "=>"
            (Term.app `is_integral_smul [(Term.hole "_") (Term.hole "_")])))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `IsIntegral.sum
       [(Term.hole "_")
        (Term.fun
         "fun"
         (Term.basicFun
          [`i `hi]
          []
          "=>"
          (Term.app `is_integral_smul [(Term.hole "_") (Term.hole "_")])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`i `hi]
        []
        "=>"
        (Term.app `is_integral_smul [(Term.hole "_") (Term.hole "_")])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `is_integral_smul [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `is_integral_smul
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `IsIntegral.sum
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `IsIntegral.sum
      [(Term.hole "_")
       (Term.fun
        "fun"
        (Term.basicFun
         [`i `hi]
         []
         "=>"
         (Term.app `is_integral_smul [(Term.hole "_") (Term.hole "_")])))])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `is_integral_mul [`hzint (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `hBint
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `IsIntegral.pow
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hzint
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `is_integral_mul
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `is_integral_mul
      [`hzint (Term.paren "(" (Term.app `IsIntegral.pow [`hBint (Term.hole "_")]) ")")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `is_integral_sub
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `IsIntegral
       [`R
        («term_-_»
         («term_*_» `z "*" («term_^_» `B.gen "^" `n))
         "-"
         (BigOperators.Algebra.BigOperators.Basic.finset.sum
          "∑"
          (Std.ExtendedBinder.extBinders
           (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
          " in "
          (Term.app
           (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
           [(num "0")])
          ", "
          (Algebra.Group.Defs.«term_•_»
           (Term.app `Q.coeff [`x])
           " • "
           (Term.app `f [(«term_+_» `x "+" `n)]))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_-_»
       («term_*_» `z "*" («term_^_» `B.gen "^" `n))
       "-"
       (BigOperators.Algebra.BigOperators.Basic.finset.sum
        "∑"
        (Std.ExtendedBinder.extBinders
         (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
        " in "
        (Term.app
         (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
         [(num "0")])
        ", "
        (Algebra.Group.Defs.«term_•_»
         (Term.app `Q.coeff [`x])
         " • "
         (Term.app `f [(«term_+_» `x "+" `n)]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (BigOperators.Algebra.BigOperators.Basic.finset.sum
       "∑"
       (Std.ExtendedBinder.extBinders
        (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
       " in "
       (Term.app
        (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
        [(num "0")])
       ", "
       (Algebra.Group.Defs.«term_•_»
        (Term.app `Q.coeff [`x])
        " • "
        (Term.app `f [(«term_+_» `x "+" `n)])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Algebra.Group.Defs.«term_•_»
       (Term.app `Q.coeff [`x])
       " • "
       (Term.app `f [(«term_+_» `x "+" `n)]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [(«term_+_» `x "+" `n)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `x "+" `n)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_+_» `x "+" `n) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      (Term.app `Q.coeff [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Q.coeff
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1022, (some 1023, term) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
       [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `Q.nat_degree "+" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `Q.nat_degree
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_+_» `Q.nat_degree "+" (num "1"))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `range
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `range [(Term.paren "(" («term_+_» `Q.nat_degree "+" (num "1")) ")")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (termℕ "ℕ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      («term_*_» `z "*" («term_^_» `B.gen "^" `n))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» `B.gen "^" `n)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 70, (some 71, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_-_»
      («term_*_» `z "*" («term_^_» `B.gen "^" `n))
      "-"
      (BigOperators.Algebra.BigOperators.Basic.finset.sum
       "∑"
       (Std.ExtendedBinder.extBinders
        (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
       " in "
       (Term.app
        (Term.proj
         (Term.paren
          "("
          (Term.app `range [(Term.paren "(" («term_+_» `Q.nat_degree "+" (num "1")) ")")])
          ")")
         "."
         `erase)
        [(num "0")])
       ", "
       (Algebra.Group.Defs.«term_•_»
        (Term.app `Q.coeff [`x])
        " • "
        (Term.app `f [(Term.paren "(" («term_+_» `x "+" `n) ")")]))))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `IsIntegral
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`aux []]
         [(Term.typeSpec
           ":"
           (Std.ExtendedBinder.«term∀__,_»
            "∀"
            (Lean.binderIdent `i)
            («binderTerm∈_»
             "∈"
             (Term.app
              (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
              [(num "0")]))
            ","
            («term_≤_» `B.dim "≤" («term_+_» `i "+" `n))))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.intro "intro" [`i `hi])
             []
             (Tactic.simp
              "simp"
              []
              []
              ["only"]
              ["["
               [(Tactic.simpLemma [] [] `mem_range) "," (Tactic.simpLemma [] [] `mem_erase)]
               "]"]
              [(Tactic.location "at" (Tactic.locationHyp [`hi] []))])
             []
             (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hn)] "]") [])
             []
             (Tactic.exact
              "exact"
              (Term.app
               `le_add_pred_of_pos
               [(Term.hole "_") (Term.proj `hi "." (fieldIdx "1"))]))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.intro "intro" [`i `hi])
          []
          (Tactic.simp
           "simp"
           []
           []
           ["only"]
           ["[" [(Tactic.simpLemma [] [] `mem_range) "," (Tactic.simpLemma [] [] `mem_erase)] "]"]
           [(Tactic.location "at" (Tactic.locationHyp [`hi] []))])
          []
          (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hn)] "]") [])
          []
          (Tactic.exact
           "exact"
           (Term.app `le_add_pred_of_pos [(Term.hole "_") (Term.proj `hi "." (fieldIdx "1"))]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app `le_add_pred_of_pos [(Term.hole "_") (Term.proj `hi "." (fieldIdx "1"))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `le_add_pred_of_pos [(Term.hole "_") (Term.proj `hi "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `hi "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hi
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_add_pred_of_pos
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `hn)] "]") [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hn
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       ["only"]
       ["[" [(Tactic.simpLemma [] [] `mem_range) "," (Tactic.simpLemma [] [] `mem_erase)] "]"]
       [(Tactic.location "at" (Tactic.locationHyp [`hi] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mem_erase
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mem_range
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`i `hi])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hi
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.«term∀__,_»
       "∀"
       (Lean.binderIdent `i)
       («binderTerm∈_»
        "∈"
        (Term.app
         (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
         [(num "0")]))
       ","
       («term_≤_» `B.dim "≤" («term_+_» `i "+" `n)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_≤_» `B.dim "≤" («term_+_» `i "+" `n))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `i "+" `n)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `B.dim
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
       [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))]) "." `erase)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `range [(«term_+_» `Q.nat_degree "+" (num "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `Q.nat_degree "+" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `Q.nat_degree
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_+_» `Q.nat_degree "+" (num "1"))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `range
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `range [(Term.paren "(" («term_+_» `Q.nat_degree "+" (num "1")) ")")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticSuffices_
       "suffices"
       (Term.sufficesDecl
        []
        («term_∣_»
         («term_^_» `p "^" `n.succ)
         "∣"
         («term_*_»
          («term_^_» (Term.app `Q.coeff [(num "0")]) "^" `n.succ)
          "*"
          («term_*_»
           («term_^_» («term-_» "-" (num "1")) "^" («term_*_» `n.succ "*" `n))
           "*"
           («term_^_»
            (Term.app (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff) [(num "0")])
            "^"
            `n))))
        (Term.byTactic'
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`hndiv []]
               [(Term.typeSpec
                 ":"
                 («term¬_»
                  "¬"
                  («term_∣_»
                   («term_^_» `p "^" (num "2"))
                   "∣"
                   (Term.app (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff) [(num "0")]))))]
               ":="
               (Term.fun
                "fun"
                (Term.basicFun
                 [`h]
                 []
                 "=>"
                 (Term.app
                  `hei.not_mem
                  [(Term.subst
                    (Term.proj (Term.app `span_singleton_pow [`p (num "2")]) "." `symm)
                    "▸"
                    [(Term.app
                      (Term.proj `Ideal.mem_span_singleton "." (fieldIdx "2"))
                      [`h])])]))))))
            []
            (Tactic.refine'
             "refine'"
             (Term.app
              `Prime.dvd_of_pow_dvd_pow_mul_pow_of_square_not_dvd
              [`hp
               (Term.typeAscription
                "("
                (Term.hole "_")
                ":"
                [(«term_∣_» («term_^_» (Term.hole "_") "^" `n.succ) "∣" (Term.hole "_"))]
                ")")
               `hndiv]))
            []
            (convert
             "convert"
             []
             (Term.app
              (Term.proj
               (Term.app
                `IsUnit.dvd_mul_right
                [(Term.anonymousCtor
                  "⟨"
                  [(«term_^_» («term-_» "-" (num "1")) "^" («term_*_» `n.succ "*" `n)) "," `rfl]
                  "⟩")])
               "."
               `mpr)
              [`this])
             ["using" (num "1")])
            []
            (Tactic.NormCast.pushCast "push_cast" [] [] [] [] [])
            []
            (Mathlib.Tactic.RingNF.ringNF "ring_nf" [] [] [])
            []
            (Tactic.simp
             "simp"
             []
             []
             []
             ["["
              [(Tactic.simpLemma
                []
                []
                (Term.app `pow_right_comm [(Term.hole "_") (Term.hole "_") (num "2")]))]
              "]"]
             [])])))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic'', expected 'Lean.Parser.Term.fromTerm'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       []
       ["["
        [(Tactic.simpLemma
          []
          []
          (Term.app `pow_right_comm [(Term.hole "_") (Term.hole "_") (num "2")]))]
        "]"]
       [])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `pow_right_comm [(Term.hole "_") (Term.hole "_") (num "2")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `pow_right_comm
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.RingNF.ringNF "ring_nf" [] [] [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.NormCast.pushCast "push_cast" [] [] [] [] [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (convert
       "convert"
       []
       (Term.app
        (Term.proj
         (Term.app
          `IsUnit.dvd_mul_right
          [(Term.anonymousCtor
            "⟨"
            [(«term_^_» («term-_» "-" (num "1")) "^" («term_*_» `n.succ "*" `n)) "," `rfl]
            "⟩")])
         "."
         `mpr)
        [`this])
       ["using" (num "1")])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj
        (Term.app
         `IsUnit.dvd_mul_right
         [(Term.anonymousCtor
           "⟨"
           [(«term_^_» («term-_» "-" (num "1")) "^" («term_*_» `n.succ "*" `n)) "," `rfl]
           "⟩")])
        "."
        `mpr)
       [`this])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `this
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj
       (Term.app
        `IsUnit.dvd_mul_right
        [(Term.anonymousCtor
          "⟨"
          [(«term_^_» («term-_» "-" (num "1")) "^" («term_*_» `n.succ "*" `n)) "," `rfl]
          "⟩")])
       "."
       `mpr)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `IsUnit.dvd_mul_right
       [(Term.anonymousCtor
         "⟨"
         [(«term_^_» («term-_» "-" (num "1")) "^" («term_*_» `n.succ "*" `n)) "," `rfl]
         "⟩")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor
       "⟨"
       [(«term_^_» («term-_» "-" (num "1")) "^" («term_*_» `n.succ "*" `n)) "," `rfl]
       "⟩")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `rfl
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» («term-_» "-" (num "1")) "^" («term_*_» `n.succ "*" `n))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `n.succ "*" `n)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `n.succ
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 80 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_*_» `n.succ "*" `n) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      («term-_» "-" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 81 >? 75, (some 75, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term-_» "-" (num "1")) ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `IsUnit.dvd_mul_right
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `IsUnit.dvd_mul_right
      [(Term.anonymousCtor
        "⟨"
        [(«term_^_»
          (Term.paren "(" («term-_» "-" (num "1")) ")")
          "^"
          (Term.paren "(" («term_*_» `n.succ "*" `n) ")"))
         ","
         `rfl]
        "⟩")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `Prime.dvd_of_pow_dvd_pow_mul_pow_of_square_not_dvd
        [`hp
         (Term.typeAscription
          "("
          (Term.hole "_")
          ":"
          [(«term_∣_» («term_^_» (Term.hole "_") "^" `n.succ) "∣" (Term.hole "_"))]
          ")")
         `hndiv]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Prime.dvd_of_pow_dvd_pow_mul_pow_of_square_not_dvd
       [`hp
        (Term.typeAscription
         "("
         (Term.hole "_")
         ":"
         [(«term_∣_» («term_^_» (Term.hole "_") "^" `n.succ) "∣" (Term.hole "_"))]
         ")")
        `hndiv])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hndiv
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.typeAscription
       "("
       (Term.hole "_")
       ":"
       [(«term_∣_» («term_^_» (Term.hole "_") "^" `n.succ) "∣" (Term.hole "_"))]
       ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_∣_» («term_^_» (Term.hole "_") "^" `n.succ) "∣" (Term.hole "_"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      («term_^_» (Term.hole "_") "^" `n.succ)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n.succ
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 80, (some 80, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `hp
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Prime.dvd_of_pow_dvd_pow_mul_pow_of_square_not_dvd
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hndiv []]
         [(Term.typeSpec
           ":"
           («term¬_»
            "¬"
            («term_∣_»
             («term_^_» `p "^" (num "2"))
             "∣"
             (Term.app (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff) [(num "0")]))))]
         ":="
         (Term.fun
          "fun"
          (Term.basicFun
           [`h]
           []
           "=>"
           (Term.app
            `hei.not_mem
            [(Term.subst
              (Term.proj (Term.app `span_singleton_pow [`p (num "2")]) "." `symm)
              "▸"
              [(Term.app (Term.proj `Ideal.mem_span_singleton "." (fieldIdx "2")) [`h])])]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`h]
        []
        "=>"
        (Term.app
         `hei.not_mem
         [(Term.subst
           (Term.proj (Term.app `span_singleton_pow [`p (num "2")]) "." `symm)
           "▸"
           [(Term.app (Term.proj `Ideal.mem_span_singleton "." (fieldIdx "2")) [`h])])])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `hei.not_mem
       [(Term.subst
         (Term.proj (Term.app `span_singleton_pow [`p (num "2")]) "." `symm)
         "▸"
         [(Term.app (Term.proj `Ideal.mem_span_singleton "." (fieldIdx "2")) [`h])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.subst', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.subst', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.subst
       (Term.proj (Term.app `span_singleton_pow [`p (num "2")]) "." `symm)
       "▸"
       [(Term.app (Term.proj `Ideal.mem_span_singleton "." (fieldIdx "2")) [`h])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `Ideal.mem_span_singleton "." (fieldIdx "2")) [`h])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `Ideal.mem_span_singleton "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `Ideal.mem_span_singleton
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 75, term))
      (Term.proj (Term.app `span_singleton_pow [`p (num "2")]) "." `symm)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `span_singleton_pow [`p (num "2")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `p
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `span_singleton_pow
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `span_singleton_pow [`p (num "2")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 75, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 75, (some 75, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.subst
      (Term.proj (Term.paren "(" (Term.app `span_singleton_pow [`p (num "2")]) ")") "." `symm)
      "▸"
      [(Term.app (Term.proj `Ideal.mem_span_singleton "." (fieldIdx "2")) [`h])])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hei.not_mem
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term¬_»
       "¬"
       («term_∣_»
        («term_^_» `p "^" (num "2"))
        "∣"
        (Term.app (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff) [(num "0")])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_∣_»
       («term_^_» `p "^" (num "2"))
       "∣"
       (Term.app (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff) [(num "0")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff) [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `minpoly [`R `B.gen])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `minpoly
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `minpoly [`R `B.gen]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      («term_^_» `p "^" (num "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `p
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 80, (some 80, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 40 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 40, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      («term_∣_»
       («term_^_» `p "^" `n.succ)
       "∣"
       («term_*_»
        («term_^_» (Term.app `Q.coeff [(num "0")]) "^" `n.succ)
        "*"
        («term_*_»
         («term_^_» («term-_» "-" (num "1")) "^" («term_*_» `n.succ "*" `n))
         "*"
         («term_^_»
          (Term.app (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff) [(num "0")])
          "^"
          `n))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_»
       («term_^_» (Term.app `Q.coeff [(num "0")]) "^" `n.succ)
       "*"
       («term_*_»
        («term_^_» («term-_» "-" (num "1")) "^" («term_*_» `n.succ "*" `n))
        "*"
        («term_^_»
         (Term.app (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff) [(num "0")])
         "^"
         `n)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_»
       («term_^_» («term-_» "-" (num "1")) "^" («term_*_» `n.succ "*" `n))
       "*"
       («term_^_»
        (Term.app (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff) [(num "0")])
        "^"
        `n))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_»
       (Term.app (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff) [(num "0")])
       "^"
       `n)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Term.app (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff) [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `minpoly [`R `B.gen])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `minpoly
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `minpoly [`R `B.gen]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      («term_^_» («term-_» "-" (num "1")) "^" («term_*_» `n.succ "*" `n))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» `n.succ "*" `n)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `n.succ
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 80 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_*_» `n.succ "*" `n) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      («term-_» "-" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 81 >? 75, (some 75, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term-_» "-" (num "1")) ")")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 80, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_*_»
      («term_^_»
       (Term.paren "(" («term-_» "-" (num "1")) ")")
       "^"
       (Term.paren "(" («term_*_» `n.succ "*" `n) ")"))
      "*"
      («term_^_»
       (Term.app
        (Term.proj (Term.paren "(" (Term.app `minpoly [`R `B.gen]) ")") "." `coeff)
        [(num "0")])
       "^"
       `n))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      («term_^_» (Term.app `Q.coeff [(num "0")]) "^" `n.succ)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n.succ
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Term.app `Q.coeff [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Q.coeff
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 80, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      («term_^_» `p "^" `n.succ)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n.succ
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `p
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 80, (some 80, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       ["only"]
       ["["
        [(Tactic.simpLemma [] [] (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map))
         ","
         (Tactic.simpLemma [] [] `deg_R_P)]
        "]"]
       [(Tactic.location "at" (Tactic.locationHyp [`hf] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hf
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `deg_R_P
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `minpoly.monic [`hBint])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hBint
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `minpoly.monic
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `minpoly.monic [`hBint]) ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.Choose.tacticChoose!__Using_
       "choose!"
       [(Lean.binderIdent `f) (Lean.binderIdent `hf)]
       ["using"
        (Term.app
         `hei.is_weakly_eisenstein_at.exists_mem_adjoin_mul_eq_pow_nat_degree_le
         [(Term.app `minpoly.aeval [`R `B.gen]) (Term.app `minpoly.monic [`hBint])])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `hei.is_weakly_eisenstein_at.exists_mem_adjoin_mul_eq_pow_nat_degree_le
       [(Term.app `minpoly.aeval [`R `B.gen]) (Term.app `minpoly.monic [`hBint])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `minpoly.monic [`hBint])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hBint
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `minpoly.monic
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `minpoly.monic [`hBint]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `minpoly.aeval [`R `B.gen])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `minpoly.aeval
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `minpoly.aeval [`R `B.gen])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hei.is_weakly_eisenstein_at.exists_mem_adjoin_mul_eq_pow_nat_degree_le
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`deg_R_P []]
         [(Term.typeSpec ":" («term_=_» `P.nat_degree "=" `B.dim))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `deg_K_P)
                ","
                (Tactic.rwRule [] (Term.app `minpoly.gcd_domain_eq_field_fractions' [`K `hBint]))
                ","
                (Tactic.rwRule
                 []
                 (Term.app
                  (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map)
                  [(Term.app `algebraMap [`R `K])]))]
               "]")
              [])]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `deg_K_P)
             ","
             (Tactic.rwRule [] (Term.app `minpoly.gcd_domain_eq_field_fractions' [`K `hBint]))
             ","
             (Tactic.rwRule
              []
              (Term.app
               (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map)
               [(Term.app `algebraMap [`R `K])]))]
            "]")
           [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `deg_K_P)
         ","
         (Tactic.rwRule [] (Term.app `minpoly.gcd_domain_eq_field_fractions' [`K `hBint]))
         ","
         (Tactic.rwRule
          []
          (Term.app
           (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map)
           [(Term.app `algebraMap [`R `K])]))]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map)
       [(Term.app `algebraMap [`R `K])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `algebraMap [`R `K])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `algebraMap
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `algebraMap [`R `K]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `minpoly.monic [`hBint])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hBint
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `minpoly.monic
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `minpoly.monic [`hBint]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `minpoly.gcd_domain_eq_field_fractions' [`K `hBint])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hBint
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `minpoly.gcd_domain_eq_field_fractions'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `deg_K_P
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» `P.nat_degree "=" `B.dim)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `B.dim
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `P.nat_degree
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`deg_K_P []]
         [(Term.typeSpec
           ":"
           («term_=_» (Term.proj (Term.app `minpoly [`K `B.gen]) "." `natDegree) "=" `B.dim))]
         ":="
         `B.nat_degree_minpoly)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `B.nat_degree_minpoly
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.proj (Term.app `minpoly [`K `B.gen]) "." `natDegree) "=" `B.dim)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `B.dim
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.proj (Term.app `minpoly [`K `B.gen]) "." `natDegree)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `minpoly [`K `B.gen])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `minpoly
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `minpoly [`K `B.gen]) ")")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`finrank_K_L []]
         [(Term.typeSpec ":" («term_=_» (Term.app `FiniteDimensional.finrank [`K `L]) "=" `B.dim))]
         ":="
         `B.finrank)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `B.finrank
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `FiniteDimensional.finrank [`K `L]) "=" `B.dim)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `B.dim
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `FiniteDimensional.finrank [`K `L])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `L
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `FiniteDimensional.finrank
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.obtain
       "obtain"
       [(Std.Tactic.RCases.rcasesPatMed
         [(Std.Tactic.RCases.rcasesPat.tuple
           "⟨"
           [(Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `n)])
             [])
            ","
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hn)])
             [])]
           "⟩")])]
       []
       [":=" [(Term.app `Nat.exists_eq_succ_of_ne_zero [`B.dim_pos.ne'])]])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Nat.exists_eq_succ_of_ne_zero [`B.dim_pos.ne'])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `B.dim_pos.ne'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Nat.exists_eq_succ_of_ne_zero
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticLet_
       "let"
       (Term.letDecl (Term.letIdDecl `P [] [] ":=" (Term.app `minpoly [`R `B.gen]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `minpoly [`R `B.gen])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `minpoly
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.tacticLetI_
       "letI"
       (Term.haveDecl (Term.haveIdDecl [] [] ":=" `B.finite_dimensional)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `B.finite_dimensional
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      («term_∣_» `p "∣" (Term.app (Term.proj `Q "." `coeff) [(num "0")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `Q "." `coeff) [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `Q "." `coeff)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `Q
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `p
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `minpoly [`R (Term.proj `B "." `gen)]) "." `IsEisensteinAt)
       [(RingTheory.Polynomial.Eisenstein.term𝓟_1 "𝓟")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'RingTheory.Polynomial.Eisenstein.term𝓟_1', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'RingTheory.Polynomial.Eisenstein.term𝓟_1', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (RingTheory.Polynomial.Eisenstein.term𝓟_1 "𝓟")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'RingTheory.Polynomial.Eisenstein.term𝓟_1', expected 'RingTheory.Polynomial.Eisenstein.term𝓟_1._@.RingTheory.Polynomial.Eisenstein._hyg.1594'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    Let `K` be the field of fraction of an integrally closed domain `R` and let `L` be a separable
    extension of `K`, generated by an integral power basis `B` such that the minimal polynomial of
    `B.gen` is Eisenstein at `p`. Given `z : L` integral over `R`, if `Q : R[X]` is such that
    `aeval B.gen Q = p • z`, then `p ∣ Q.coeff 0`. -/
  theorem
    dvd_coeff_zero_of_aeval_eq_prime_smul_of_minpoly_is_eiseinstein_at
    { B : PowerBasis K L }
        ( hp : Prime p )
        ( hBint : IsIntegral R B . gen )
        { z : L }
        { Q : R [X] }
        ( hQ : aeval B . gen Q = p • z )
        ( hzint : IsIntegral R z )
        ( hei : minpoly R B . gen . IsEisensteinAt 𝓟 )
      : p ∣ Q . coeff 0
    :=
      by
        letI := B.finite_dimensional
          let P := minpoly R B.gen
          obtain ⟨ n , hn ⟩ := Nat.exists_eq_succ_of_ne_zero B.dim_pos.ne'
          have finrank_K_L : FiniteDimensional.finrank K L = B.dim := B.finrank
          have deg_K_P : minpoly K B.gen . natDegree = B.dim := B.nat_degree_minpoly
          have
            deg_R_P
              : P.nat_degree = B.dim
              :=
              by
                rw
                  [
                    ← deg_K_P
                      ,
                      minpoly.gcd_domain_eq_field_fractions' K hBint
                      ,
                      minpoly.monic hBint . nat_degree_map algebraMap R K
                    ]
          choose!
            f hf
            using
              hei.is_weakly_eisenstein_at.exists_mem_adjoin_mul_eq_pow_nat_degree_le
                minpoly.aeval R B.gen minpoly.monic hBint
          simp only [ minpoly.monic hBint . nat_degree_map , deg_R_P ] at hf
          suffices
            p ^ n.succ ∣ Q.coeff 0 ^ n.succ * - 1 ^ n.succ * n * minpoly R B.gen . coeff 0 ^ n
              by
                have
                    hndiv
                      : ¬ p ^ 2 ∣ minpoly R B.gen . coeff 0
                      :=
                      fun
                        h
                          =>
                          hei.not_mem span_singleton_pow p 2 . symm ▸ Ideal.mem_span_singleton . 2 h
                  refine'
                    Prime.dvd_of_pow_dvd_pow_mul_pow_of_square_not_dvd
                      hp ( _ : _ ^ n.succ ∣ _ ) hndiv
                  convert IsUnit.dvd_mul_right ⟨ - 1 ^ n.succ * n , rfl ⟩ . mpr this using 1
                  push_cast
                  ring_nf
                  simp [ pow_right_comm _ _ 2 ]
          have
            aux
              : ∀ i ∈ range Q.nat_degree + 1 . erase 0 , B.dim ≤ i + n
              :=
              by
                intro i hi
                  simp only [ mem_range , mem_erase ] at hi
                  rw [ hn ]
                  exact le_add_pred_of_pos _ hi . 1
          have
            hintsum
              :
                IsIntegral
                  R
                    z * B.gen ^ n
                      -
                      ∑ x : ℕ in range Q.nat_degree + 1 . erase 0 , Q.coeff x • f x + n
              :=
              by
                refine'
                    is_integral_sub
                      is_integral_mul hzint IsIntegral.pow hBint _
                        IsIntegral.sum _ fun i hi => is_integral_smul _ _
                  exact adjoin_le_integral_closure hBint hf _ aux i hi . 1
          obtain ⟨ r , hr ⟩ := is_integral_iff . 1 is_integral_norm K hintsum
          use r
          apply IsFractionRing.injective R K
          simp only [ _root_.map_mul , _root_.map_pow , _root_.map_neg , _root_.map_one ]
          calc
            _ = norm K Q.coeff 0 • B.gen ^ n := _
            _
                  =
                  norm
                    K
                      p • z * B.gen ^ n
                        -
                        ∑ x : ℕ in range Q.nat_degree + 1 . erase 0 , p • Q.coeff x • f x + n
                :=
                congr_arg norm K eq_sub_of_add_eq _
              _ = _ := _
          ·
            simp
                only
                [
                  Algebra.smul_def
                    ,
                    algebra_map_apply R K L
                    ,
                    Algebra.norm_algebra_map
                    ,
                    _root_.map_mul
                    ,
                    _root_.map_pow
                    ,
                    finrank_K_L
                    ,
                    power_basis.norm_gen_eq_coeff_zero_minpoly
                    ,
                    minpoly.gcd_domain_eq_field_fractions' K hBint
                    ,
                    coeff_map
                    ,
                    ← hn
                  ]
              ring
          swap
          ·
            simp_rw
              [
                ← smul_sum
                  ,
                  ← smul_sub
                  ,
                  Algebra.smul_def p
                  ,
                  algebra_map_apply R K L
                  ,
                  _root_.map_mul
                  ,
                  Algebra.norm_algebra_map
                  ,
                  finrank_K_L
                  ,
                  hr
                  ,
                  ← hn
                ]
          calc
            _
                =
                Q.coeff 0 • 1 + ∑ x : ℕ in range Q.nat_degree + 1 . erase 0 , Q.coeff x • B.gen ^ x
                  *
                  B.gen ^ n
              :=
              _
            _
                  =
                  Q.coeff 0 • B.gen ^ 0
                      +
                      ∑ x : ℕ in range Q.nat_degree + 1 . erase 0 , Q.coeff x • B.gen ^ x
                    *
                    B.gen ^ n
                :=
                by rw [ pow_zero ]
              _ = aeval B.gen Q * B.gen ^ n := _
              _ = _ := by rw [ hQ , Algebra.smul_mul_assoc ]
          ·
            have
                :
                    ∀
                      i
                      ∈ range Q.nat_degree + 1 . erase 0
                      ,
                      Q.coeff i • B.gen ^ i * B.gen ^ n = p • Q.coeff i • f i + n
                  :=
                  by
                    intro i hi
                      rw
                        [
                          ← pow_add
                            ,
                            ← hf _ aux i hi . 2
                            ,
                            ← Algebra.smul_def
                            ,
                            smul_smul
                            ,
                            mul_comm _ p
                            ,
                            smul_smul
                          ]
              simp only [ add_mul , smul_mul_assoc , one_mul , sum_mul , sum_congr rfl this ]
          ·
            rw
                [
                  aeval_eq_sum_range
                    ,
                    Finset.add_sum_erase range Q.nat_degree + 1 fun i => Q.coeff i • B.gen ^ i
                  ]
              simp
#align
  dvd_coeff_zero_of_aeval_eq_prime_smul_of_minpoly_is_eiseinstein_at dvd_coeff_zero_of_aeval_eq_prime_smul_of_minpoly_is_eiseinstein_at

theorem mem_adjoin_of_dvd_coeff_of_dvd_aeval {A B : Type _} [CommSemiring A] [CommRing B]
    [Algebra A B] [NoZeroSMulDivisors A B] {Q : A[X]} {p : A} {x z : B} (hp : p ≠ 0)
    (hQ : ∀ i ∈ range (Q.natDegree + 1), p ∣ Q.coeff i) (hz : aeval x Q = p • z) :
    z ∈ adjoin A ({x} : Set B) := by
  choose! f hf using hQ
  rw [aeval_eq_sum_range, sum_range] at hz
  conv_lhs at hz =>
    congr
    skip
    ext
    rw [hf i (mem_range.2 (Fin.is_lt i)), ← smul_smul]
  rw [← smul_sum] at hz
  rw [← smul_right_injective _ hp hz]
  exact
    Subalgebra.sum_mem _ fun _ _ =>
      Subalgebra.smul_mem _ (Subalgebra.pow_mem _ (subset_adjoin (Set.mem_singleton _)) _) _
#align mem_adjoin_of_dvd_coeff_of_dvd_aeval mem_adjoin_of_dvd_coeff_of_dvd_aeval

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "Let `K` be the field of fraction of an integrally closed domain `R` and let `L` be a separable\nextension of `K`, generated by an integral power basis `B` such that the minimal polynomial of\n`B.gen` is Eisenstein at `p`. Given `z : L` integral over `R`, if `p • z ∈ adjoin R {B.gen}`, then\n`z ∈ adjoin R {B.gen}`. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `mem_adjoin_of_smul_prime_smul_of_minpoly_is_eiseinstein_at [])
      (Command.declSig
       [(Term.implicitBinder "{" [`B] [":" (Term.app `PowerBasis [`K `L])] "}")
        (Term.explicitBinder "(" [`hp] [":" (Term.app `Prime [`p])] [] ")")
        (Term.explicitBinder
         "("
         [`hBint]
         [":" (Term.app `IsIntegral [`R (Term.proj `B "." `gen)])]
         []
         ")")
        (Term.implicitBinder "{" [`z] [":" `L] "}")
        (Term.explicitBinder "(" [`hzint] [":" (Term.app `IsIntegral [`R `z])] [] ")")
        (Term.explicitBinder
         "("
         [`hz]
         [":"
          («term_∈_»
           (Algebra.Group.Defs.«term_•_» `p " • " `z)
           "∈"
           (Term.app
            `adjoin
            [`R
             (Term.typeAscription
              "("
              («term{_}» "{" [(Term.proj `B "." `gen)] "}")
              ":"
              [(Term.app `Set [`L])]
              ")")]))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hei]
         [":"
          (Term.app
           (Term.proj (Term.app `minpoly [`R (Term.proj `B "." `gen)]) "." `IsEisensteinAt)
           [(RingTheory.Polynomial.Eisenstein.term𝓟_1 "𝓟")])]
         []
         ")")]
       (Term.typeSpec
        ":"
        («term_∈_»
         `z
         "∈"
         (Term.app
          `adjoin
          [`R
           (Term.typeAscription
            "("
            («term{_}» "{" [(Term.proj `B "." `gen)] "}")
            ":"
            [(Term.app `Set [`L])]
            ")")]))))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.tacticHave_
            "have"
            (Term.haveDecl
             (Term.haveIdDecl
              [`hndiv []]
              [(Term.typeSpec
                ":"
                («term¬_»
                 "¬"
                 («term_∣_»
                  («term_^_» `p "^" (num "2"))
                  "∣"
                  (Term.app (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff) [(num "0")]))))]
              ":="
              (Term.fun
               "fun"
               (Term.basicFun
                [`h]
                []
                "=>"
                (Term.app
                 `hei.not_mem
                 [(Term.subst
                   (Term.proj (Term.app `span_singleton_pow [`p (num "2")]) "." `symm)
                   "▸"
                   [(Term.app
                     (Term.proj `Ideal.mem_span_singleton "." (fieldIdx "2"))
                     [`h])])]))))))
           []
           (Std.Tactic.tacticLetI_
            "letI"
            (Term.haveDecl (Term.haveIdDecl [] [] ":=" (Term.app `FiniteDimensional [`B]))))
           []
           (Mathlib.Tactic.set
            "set"
            []
            (Mathlib.Tactic.setArgsRest `P [] ":=" (Term.app `minpoly [`R `B.gen]) ["with" [] `hP]))
           []
           (Std.Tactic.obtain
            "obtain"
            [(Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "⟨"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `n)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hn)])
                  [])]
                "⟩")])]
            []
            [":=" [(Term.app `Nat.exists_eq_succ_of_ne_zero [`B.dim_pos.ne'])]])
           []
           (Std.Tactic.tacticHaveI_
            "haveI"
            (Term.haveDecl
             (Term.haveIdDecl
              []
              [(Term.typeSpec ":" (Term.app `NoZeroSMulDivisors [`R `L]))]
              ":="
              (Term.app `NoZeroSMulDivisors.trans [`R `K `L]))))
           []
           (Tactic.tacticLet_
            "let"
            (Term.letDecl
             (Term.letIdDecl `P₁ [] [] ":=" (Term.app `P.map [(Term.app `algebraMap [`R `L])]))))
           []
           (Tactic.rwSeq
            "rw"
            []
            (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `adjoin_singleton_eq_range_aeval)] "]")
            [(Tactic.location "at" (Tactic.locationHyp [`hz] []))])
           []
           (Std.Tactic.obtain
            "obtain"
            [(Std.Tactic.RCases.rcasesPatMed
              [(Std.Tactic.RCases.rcasesPat.tuple
                "⟨"
                [(Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Q₁)])
                  [])
                 ","
                 (Std.Tactic.RCases.rcasesPatLo
                  (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hQ)])
                  [])]
                "⟩")])]
            []
            [":=" [`hz]])
           []
           (Mathlib.Tactic.set
            "set"
            []
            (Mathlib.Tactic.setArgsRest
             `Q
             []
             ":="
             (Polynomial.Data.Polynomial.Div.«term_%ₘ_» `Q₁ " %ₘ " `P)
             ["with" [] `hQ₁]))
           []
           (Mathlib.Tactic.replace'
            "replace"
            [`hQ []]
            [(Term.typeSpec
              ":"
              («term_=_»
               (Term.app `aeval [`B.gen `Q])
               "="
               (Algebra.Group.Defs.«term_•_» `p " • " `z)))])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule
                 [(patternIgnore (token.«← » "←"))]
                 (Term.app `mod_by_monic_add_div [`Q₁ (Term.app `minpoly.monic [`hBint])]))]
               "]")
              [(Tactic.location "at" (Tactic.locationHyp [`hQ] []))])
             []
             (Std.Tactic.Simpa.simpa
              "simpa"
              []
              []
              (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hQ]))])
           []
           (Classical.«tacticBy_cases_:_» "by_cases" [`hQzero ":"] («term_=_» `Q "=" (num "0")))
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.simp
              "simp"
              []
              []
              ["only"]
              ["["
               [(Tactic.simpLemma [] [] `hQzero)
                ","
                (Tactic.simpLemma [] [] `Algebra.smul_def)
                ","
                (Tactic.simpLemma [] [] `zero_eq_mul)
                ","
                (Tactic.simpLemma [] [] `aeval_zero)]
               "]"]
              [(Tactic.location "at" (Tactic.locationHyp [`hQ] []))])
             []
             (Tactic.cases'
              "cases'"
              [(Tactic.casesTarget [] `hQ)]
              []
              ["with" [(Lean.binderIdent `H) (Lean.binderIdent `H₁)]])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.tacticHave_
                "have"
                (Term.haveDecl
                 (Term.haveIdDecl
                  []
                  [(Term.typeSpec
                    ":"
                    (Term.app `Function.Injective [(Term.app `algebraMap [`R `L])]))]
                  ":="
                  (Term.byTactic
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented
                     [(Tactic.rwSeq
                       "rw"
                       []
                       (Tactic.rwRuleSeq
                        "["
                        [(Tactic.rwRule [] (Term.app `algebra_map_eq [`R `K `L]))]
                        "]")
                       [])
                      []
                      (Tactic.exact
                       "exact"
                       (Term.app
                        (Term.proj
                         (Term.proj (Term.app `algebraMap [`K `L]) "." `Injective)
                         "."
                         `comp)
                        [(Term.app `IsFractionRing.injective [`R `K])]))]))))))
               []
               (Std.Tactic.tacticExfalso "exfalso")
               []
               (Tactic.exact
                "exact"
                (Term.app
                 `hp.ne_zero
                 [(Term.app
                   (Term.proj
                    (Term.app `injective_iff_map_eq_zero [(Term.hole "_")])
                    "."
                    (fieldIdx "1"))
                   [`this (Term.hole "_") `H])]))])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `H₁)] "]") [])
               []
               (Tactic.exact "exact" (Term.app `Subalgebra.zero_mem [(Term.hole "_")]))])])
           []
           (Tactic.refine'
            "refine'"
            (Term.app
             `mem_adjoin_of_dvd_coeff_of_dvd_aeval
             [`hp.ne_zero (Term.fun "fun" (Term.basicFun [`i] [] "=>" (Term.hole "_"))) `hQ]))
           []
           (Tactic.refine'
            "refine'"
            (Term.app
             `Nat.case_strong_induction_on
             [`i
              (Term.hole "_")
              (Term.fun "fun" (Term.basicFun [`j `hind] [] "=>" (Term.hole "_")))]))
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.intro "intro" [`H])
             []
             (Tactic.exact
              "exact"
              (Term.app
               `dvd_coeff_zero_of_aeval_eq_prime_smul_of_minpoly_is_eiseinstein_at
               [`hp `hBint `hQ `hzint `hei]))])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.intro "intro" [`hj])
             []
             (Tactic.refine'
              "refine'"
              (Term.app `hp.dvd_of_pow_dvd_pow_mul_pow_of_square_not_dvd [(Term.hole "_") `hndiv]))
             []
             (Tactic.exact "exact" `n)
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`H []]
                []
                ":="
                (Term.app `degree_mod_by_monic_lt [`Q₁ (Term.app `minpoly.monic [`hBint])]))))
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hQ₁)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hP)]
               "]")
              [(Tactic.location "at" (Tactic.locationHyp [`H] []))])
             []
             (Mathlib.Tactic.tacticReplace_
              "replace"
              (Term.haveDecl
               (Term.haveIdDecl
                [`H []]
                []
                ":="
                (Term.app
                 (Term.proj `Nat.lt_iff_add_one_le "." (fieldIdx "1"))
                 [(Term.app
                   `lt_of_lt_of_le
                   [(Term.app
                     `lt_of_le_of_lt
                     [(Term.app
                       (Term.proj `Nat.lt_iff_add_one_le "." (fieldIdx "1"))
                       [(Term.app
                         `Nat.lt_of_succ_lt_succ
                         [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])])])
                      (Term.app `lt_succ_self [(Term.hole "_")])])
                    (Term.app
                     (Term.proj `Nat.lt_iff_add_one_le "." (fieldIdx "1"))
                     [(Term.app
                       (Term.proj
                        (Term.app `nat_degree_lt_nat_degree_iff [`hQzero])
                        "."
                        (fieldIdx "2"))
                       [`H])])])]))))
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `add_assoc)] "]")
              [(Tactic.location "at" (Tactic.locationHyp [`H] []))])
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`Hj []]
                [(Term.typeSpec
                  ":"
                  («term_=_»
                   («term_+_» `Q.nat_degree "+" (num "1"))
                   "="
                   («term_+_» («term_+_» `j "+" (num "1")) "+" («term_-_» `Q.nat_degree "-" `j))))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule
                        [(patternIgnore (token.«← » "←"))]
                        (Term.app `add_comm [(num "1")]))
                       ","
                       (Tactic.rwRule
                        [(patternIgnore (token.«← » "←"))]
                        (Term.app `add_comm [(num "1")]))
                       ","
                       (Tactic.rwRule [] `add_assoc)
                       ","
                       (Tactic.rwRule [] `add_right_inj)
                       ","
                       (Tactic.rwRule
                        [(patternIgnore (token.«← » "←"))]
                        (Term.app
                         `Nat.add_sub_assoc
                         [(Term.proj
                           (Term.app
                            `Nat.lt_of_succ_lt_succ
                            [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])])
                           "."
                           `le)]))
                       ","
                       (Tactic.rwRule [] `add_comm)
                       ","
                       (Tactic.rwRule [] `Nat.add_sub_cancel)]
                      "]")
                     [])]))))))
             []
             (Mathlib.Tactic.Choose.tacticChoose!__Using_
              "choose!"
              [(Lean.binderIdent `g) (Lean.binderIdent `hg)]
              ["using" `hind])
             []
             (Mathlib.Tactic.replace'
              "replace"
              [`hg []]
              [(Term.typeSpec
                ":"
                (Std.ExtendedBinder.«term∀__,_»
                 "∀"
                 (Lean.binderIdent `k)
                 («binderTerm∈_» "∈" (Term.app `range [(«term_+_» `j "+" (num "1"))]))
                 ","
                 («term_=_»
                  (Algebra.Group.Defs.«term_•_»
                   (Term.app `Q.coeff [`k])
                   " • "
                   («term_^_» `B.gen "^" `k))
                  "="
                  («term_*_»
                   (Term.app `algebraMap [`R `L `p])
                   "*"
                   (Algebra.Group.Defs.«term_•_»
                    (Term.app `g [`k])
                    " • "
                    («term_^_» `B.gen "^" `k))))))])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.intro "intro" [`k `hk])
               []
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule
                   []
                   (Term.app
                    `hg
                    [`k
                     (Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hk])
                     (Term.app
                      (Term.proj `mem_range_succ_iff "." (fieldIdx "2"))
                      [(Term.app
                        `le_trans
                        [(Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hk])
                         (Term.proj
                          (Term.app
                           (Term.proj `succ_le_iff "." (fieldIdx "1"))
                           [(Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hj])])
                          "."
                          `le)])])]))
                  ","
                  (Tactic.rwRule [] `Algebra.smul_def)
                  ","
                  (Tactic.rwRule [] `Algebra.smul_def)
                  ","
                  (Tactic.rwRule [] `RingHom.map_mul)
                  ","
                  (Tactic.rwRule [] `mul_assoc)]
                 "]")
                [])])
             []
             (Mathlib.Tactic.Choose.tacticChoose!__Using_
              "choose!"
              [(Lean.binderIdent `f) (Lean.binderIdent `hf)]
              ["using"
               (Term.app
                `is_weakly_eisenstein_at.exists_mem_adjoin_mul_eq_pow_nat_degree_le
                [(Term.app `minpoly.aeval [`R `B.gen])
                 (Term.app `minpoly.monic [`hBint])
                 `hei.is_weakly_eisenstein_at])])
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`hf₁ []]
                [(Term.typeSpec
                  ":"
                  (Std.ExtendedBinder.«term∀__,_»
                   "∀"
                   (Lean.binderIdent `k)
                   («binderTerm∈_»
                    "∈"
                    (Term.app
                     (Term.proj (Term.app `range [(«term_-_» `Q.nat_degree "-" `j)]) "." `erase)
                     [(num "0")]))
                   ","
                   («term_=_»
                    («term_*_»
                     (Algebra.Group.Defs.«term_•_»
                      (Term.app `Q.coeff [(«term_+_» («term_+_» `j "+" (num "1")) "+" `k)])
                      " • "
                      («term_^_» `B.gen "^" («term_+_» («term_+_» `j "+" (num "1")) "+" `k)))
                     "*"
                     («term_^_»
                      `B.gen
                      "^"
                      («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))
                    "="
                    («term_*_»
                     (Term.app (Term.app `algebraMap [`R `L]) [`p])
                     "*"
                     (Algebra.Group.Defs.«term_•_»
                      (Term.app `Q.coeff [(«term_+_» («term_+_» `j "+" (num "1")) "+" `k)])
                      " • "
                      (Term.app
                       `f
                       [(«term_-_» («term_+_» `k "+" `P.nat_degree) "-" (num "1"))]))))))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Tactic.intro "intro" [`k `hk])
                    []
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule [] `smul_mul_assoc)
                       ","
                       (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `pow_add)
                       ","
                       (Tactic.rwRule
                        [(patternIgnore (token.«← » "←"))]
                        (Term.app `Nat.add_sub_assoc [`H]))
                       ","
                       (Tactic.rwRule
                        [(patternIgnore (token.«← » "←"))]
                        (Term.app `add_assoc [`j (num "1") (num "1")]))
                       ","
                       (Tactic.rwRule
                        []
                        (Term.app `add_comm [(«term_+_» `j "+" (num "1")) (num "1")]))
                       ","
                       (Tactic.rwRule [] (Term.app `add_assoc [(«term_+_» `j "+" (num "1"))]))
                       ","
                       (Tactic.rwRule
                        []
                        (Term.app `add_comm [(Term.hole "_") («term_+_» `k "+" `P.nat_degree)]))
                       ","
                       (Tactic.rwRule [] `Nat.add_sub_add_right)
                       ","
                       (Tactic.rwRule
                        [(patternIgnore (token.«← » "←"))]
                        (Term.proj
                         (Term.app
                          `hf
                          [(«term_-_» («term_+_» `k "+" `P.nat_degree) "-" (num "1"))
                           (Term.hole "_")])
                         "."
                         (fieldIdx "2")))
                       ","
                       (Tactic.rwRule [] `mul_smul_comm)]
                      "]")
                     [])
                    []
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule
                        []
                        (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map))
                       ","
                       (Tactic.rwRule [] `add_comm)
                       ","
                       (Tactic.rwRule [] `Nat.add_sub_assoc)
                       ","
                       (Tactic.rwRule [] `le_add_iff_nonneg_right)]
                      "]")
                     [])
                    []
                    (tactic__
                     (cdotTk (patternIgnore (token.«· » "·")))
                     [(Tactic.exact "exact" (Term.app `Nat.zero_le [(Term.hole "_")]))])
                    []
                    (tactic__
                     (cdotTk (patternIgnore (token.«· » "·")))
                     [(Tactic.refine'
                       "refine'"
                       (Term.app
                        (Term.proj `one_le_iff_ne_zero "." (fieldIdx "2"))
                        [(Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))]))
                      []
                      (Tactic.rwSeq
                       "rw"
                       []
                       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h)] "]")
                       [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
                      []
                      (Std.Tactic.Simpa.simpa
                       "simpa"
                       []
                       []
                       (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hk]))])
                    []
                    (tactic__
                     (cdotTk (patternIgnore (token.«· » "·")))
                     [(Tactic.tacticInfer_instance "infer_instance")])]))))))
             []
             (Tactic.tacticSuffices_
              "suffices"
              (Term.sufficesDecl
               []
               («term_∣_»
                («term_^_» `p "^" `n.succ)
                "∣"
                («term_*_»
                 («term_^_» (Term.app `Q.coeff [(Term.app `succ [`j])]) "^" `n.succ)
                 "*"
                 («term_^_»
                  (Term.app (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff) [(num "0")])
                  "^"
                  («term_+_»
                   (Term.app `succ [`j])
                   "+"
                   («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))))
               (Term.byTactic'
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(convert "convert" [] `this [])
                   []
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule [] `Nat.succ_eq_add_one)
                      ","
                      (Tactic.rwRule [] `add_assoc)
                      ","
                      (Tactic.rwRule
                       [(patternIgnore (token.«← » "←"))]
                       (Term.app `Nat.add_sub_assoc [`H]))
                      ","
                      (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `add_assoc)
                      ","
                      (Tactic.rwRule [] (Term.app `add_comm [(«term_+_» `j "+" (num "1"))]))
                      ","
                      (Tactic.rwRule [] `Nat.add_sub_add_left)
                      ","
                      (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Nat.add_sub_assoc)
                      ","
                      (Tactic.rwRule [] `Nat.add_sub_add_left)
                      ","
                      (Tactic.rwRule [] `hP)
                      ","
                      (Tactic.rwRule
                       [(patternIgnore (token.«← » "←"))]
                       (Term.app
                        (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map)
                        [(Term.app `algebraMap [`R `K])]))
                      ","
                      (Tactic.rwRule
                       [(patternIgnore (token.«← » "←"))]
                       (Term.app `minpoly.gcd_domain_eq_field_fractions' [`K `hBint]))
                      ","
                      (Tactic.rwRule [] `nat_degree_minpoly)
                      ","
                      (Tactic.rwRule [] `hn)
                      ","
                      (Tactic.rwRule [] `Nat.sub_one)
                      ","
                      (Tactic.rwRule [] `Nat.pred_succ)]
                     "]")
                    [])
                   []
                   (linarith "linarith" [] (linarithArgsRest [] [] []))])))))
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `aeval_eq_sum_range)
                ","
                (Tactic.rwRule [] `Hj)
                ","
                (Tactic.rwRule [] `range_add)
                ","
                (Tactic.rwRule
                 []
                 (Term.app
                  `sum_union
                  [(Term.app
                    `disjoint_range_add_left_embedding
                    [(Term.hole "_") (Term.hole "_")])]))
                ","
                (Tactic.rwRule [] (Term.app `sum_congr [`rfl `hg]))
                ","
                (Tactic.rwRule [] `add_comm)]
               "]")
              [(Tactic.location "at" (Tactic.locationHyp [`hQ] []))])
             []
             (Mathlib.Tactic.tacticReplace_
              "replace"
              (Term.haveDecl
               (Term.haveIdDecl
                [`hQ []]
                []
                ":="
                (Term.app
                 `congr_arg
                 [(Term.fun
                   "fun"
                   (Term.basicFun
                    [`x]
                    []
                    "=>"
                    («term_*_»
                     `x
                     "*"
                     («term_^_»
                      `B.gen
                      "^"
                      («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))))
                  `hQ]))))
             []
             (Mathlib.Tactic.tacticSimp_rw__
              "simp_rw"
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `sum_map)
                ","
                (Tactic.rwRule [] `add_left_embedding_apply)
                ","
                (Tactic.rwRule [] `add_mul)
                ","
                (Tactic.rwRule [] `sum_mul)
                ","
                (Tactic.rwRule [] `mul_assoc)]
               "]")
              [(Tactic.location "at" (Tactic.locationHyp [`hQ] []))])
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule
                 [(patternIgnore (token.«← » "←"))]
                 (Term.app
                  `insert_erase
                  [(Term.app
                    (Term.proj `mem_range "." (fieldIdx "2"))
                    [(«term_<|_»
                      (Term.proj `tsub_pos_iff_lt "." (fieldIdx "2"))
                      "<|"
                      («term_<|_»
                       `Nat.lt_of_succ_lt_succ
                       "<|"
                       (Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])))])]))
                ","
                (Tactic.rwRule
                 []
                 (Term.app `sum_insert [(Term.app `not_mem_erase [(num "0") (Term.hole "_")])]))
                ","
                (Tactic.rwRule [] `add_zero)
                ","
                (Tactic.rwRule [] (Term.app `sum_congr [`rfl `hf₁]))
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `mul_sum)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `mul_sum)
                ","
                (Tactic.rwRule [] `add_assoc)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `mul_add)
                ","
                (Tactic.rwRule [] `smul_mul_assoc)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `pow_add)
                ","
                (Tactic.rwRule [] `Algebra.smul_def)]
               "]")
              [(Tactic.location "at" (Tactic.locationHyp [`hQ] []))])
             []
             (Mathlib.Tactic.tacticReplace_
              "replace"
              (Term.haveDecl
               (Term.haveIdDecl
                [`hQ []]
                []
                ":="
                (Term.app `congr_arg [(Term.app `norm [`K]) (Term.app `eq_sub_of_add_eq [`hQ])]))))
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`hintsum []]
                [(Term.typeSpec
                  ":"
                  (Term.app
                   `IsIntegral
                   [`R
                    («term_-_»
                     («term_*_»
                      `z
                      "*"
                      («term_^_»
                       `B.gen
                       "^"
                       («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))
                     "-"
                     («term_+_»
                      (BigOperators.Algebra.BigOperators.Basic.finset.sum
                       "∑"
                       (Std.ExtendedBinder.extBinders
                        (Std.ExtendedBinder.extBinder
                         (Lean.binderIdent `x)
                         [(group ":" (termℕ "ℕ"))]))
                       " in "
                       (Term.app
                        (Term.proj (Term.app `range [(«term_-_» `Q.nat_degree "-" `j)]) "." `erase)
                        [(num "0")])
                       ", "
                       (Algebra.Group.Defs.«term_•_»
                        (Term.app `Q.coeff [(«term_+_» («term_+_» `j "+" (num "1")) "+" `x)])
                        " • "
                        (Term.app `f [(«term_-_» («term_+_» `x "+" `P.nat_degree) "-" (num "1"))])))
                      "+"
                      (BigOperators.Algebra.BigOperators.Basic.finset.sum
                       "∑"
                       (Std.ExtendedBinder.extBinders
                        (Std.ExtendedBinder.extBinder
                         (Lean.binderIdent `x)
                         [(group ":" (termℕ "ℕ"))]))
                       " in "
                       (Term.app `range [(«term_+_» `j "+" (num "1"))])
                       ", "
                       («term_*_»
                        (Algebra.Group.Defs.«term_•_»
                         (Term.app `g [`x])
                         " • "
                         («term_^_» `B.gen "^" `x))
                        "*"
                        («term_^_»
                         `B.gen
                         "^"
                         («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2"))))))))]))]
                ":="
                (Term.byTactic
                 "by"
                 (Tactic.tacticSeq
                  (Tactic.tacticSeq1Indented
                   [(Tactic.refine'
                     "refine'"
                     (Term.app
                      `is_integral_sub
                      [(Term.app
                        `is_integral_mul
                        [`hzint (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])
                       (Term.app
                        `is_integral_add
                        [(Term.app
                          `IsIntegral.sum
                          [(Term.hole "_")
                           (Term.fun
                            "fun"
                            (Term.basicFun
                             [`k `hk]
                             []
                             "=>"
                             (Term.app `is_integral_smul [(Term.hole "_") (Term.hole "_")])))])
                         (Term.app
                          `IsIntegral.sum
                          [(Term.hole "_")
                           (Term.fun
                            "fun"
                            (Term.basicFun
                             [`k `hk]
                             []
                             "=>"
                             (Term.app
                              `is_integral_mul
                              [(Term.app
                                `is_integral_smul
                                [(Term.hole "_")
                                 (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])
                               (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])))])])]))
                    []
                    (Tactic.refine'
                     "refine'"
                     (Term.app
                      `adjoin_le_integral_closure
                      [`hBint
                       (Term.proj
                        (Term.app `hf [(Term.hole "_") (Term.hole "_")])
                        "."
                        (fieldIdx "1"))]))
                    []
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule
                        []
                        (Term.app
                         (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map)
                         [(Term.app `algebraMap [`R `L])]))]
                      "]")
                     [])
                    []
                    (Tactic.rwSeq
                     "rw"
                     []
                     (Tactic.rwRuleSeq
                      "["
                      [(Tactic.rwRule [] `add_comm)
                       ","
                       (Tactic.rwRule [] `Nat.add_sub_assoc)
                       ","
                       (Tactic.rwRule [] `le_add_iff_nonneg_right)]
                      "]")
                     [])
                    []
                    (tactic__
                     (cdotTk (patternIgnore (token.«· » "·")))
                     [(Tactic.exact "exact" (Term.app `zero_le [(Term.hole "_")]))])
                    []
                    (tactic__
                     (cdotTk (patternIgnore (token.«· » "·")))
                     [(Tactic.refine'
                       "refine'"
                       (Term.app
                        (Term.proj `one_le_iff_ne_zero "." (fieldIdx "2"))
                        [(Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))]))
                      []
                      (Tactic.rwSeq
                       "rw"
                       []
                       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h)] "]")
                       [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
                      []
                      (Std.Tactic.Simpa.simpa
                       "simpa"
                       []
                       []
                       (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hk]))])]))))))
             []
             (Std.Tactic.obtain
              "obtain"
              [(Std.Tactic.RCases.rcasesPatMed
                [(Std.Tactic.RCases.rcasesPat.tuple
                  "⟨"
                  [(Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `r)])
                    [])
                   ","
                   (Std.Tactic.RCases.rcasesPatLo
                    (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hr)])
                    [])]
                  "⟩")])]
              []
              [":="
               [(Term.app
                 (Term.proj `is_integral_iff "." (fieldIdx "1"))
                 [(Term.app `is_integral_norm [`K `hintsum])])]])
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `Algebra.smul_def)
                ","
                (Tactic.rwRule [] `mul_assoc)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `mul_sub)
                ","
                (Tactic.rwRule [] `_root_.map_mul)
                ","
                (Tactic.rwRule [] (Term.app `algebra_map_apply [`R `K `L]))
                ","
                (Tactic.rwRule [] `map_pow)
                ","
                (Tactic.rwRule [] `Algebra.norm_algebra_map)
                ","
                (Tactic.rwRule [] `_root_.map_mul)
                ","
                (Tactic.rwRule [] (Term.app `algebra_map_apply [`R `K `L]))
                ","
                (Tactic.rwRule [] `Algebra.norm_algebra_map)
                ","
                (Tactic.rwRule [] (Term.app `finrank [`B]))
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hr)
                ","
                (Tactic.rwRule [] `power_basis.norm_gen_eq_coeff_zero_minpoly)
                ","
                (Tactic.rwRule [] (Term.app `minpoly.gcd_domain_eq_field_fractions' [`K `hBint]))
                ","
                (Tactic.rwRule [] `coeff_map)
                ","
                (Tactic.rwRule
                 []
                 (Term.show
                  "show"
                  («term_=_»
                   (Term.typeAscription "(" («term-_» "-" (num "1")) ":" [`K] ")")
                   "="
                   (Term.app `algebraMap [`R `K («term-_» "-" (num "1"))]))
                  (Term.byTactic'
                   "by"
                   (Tactic.tacticSeq
                    (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])])))))
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `map_pow)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `map_pow)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `_root_.map_mul)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `map_pow)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `_root_.map_mul)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `map_pow)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `_root_.map_mul)]
               "]")
              [(Tactic.location "at" (Tactic.locationHyp [`hQ] []))])
             []
             (Tactic.tacticHave_
              "have"
              (Term.haveDecl
               (Term.haveIdDecl
                [`hppdiv []]
                [(Term.typeSpec
                  ":"
                  («term_∣_»
                   («term_^_» `p "^" `B.dim)
                   "∣"
                   («term_*_» («term_^_» `p "^" `B.dim) "*" `r)))]
                ":="
                (Term.app `dvd_mul_of_dvd_left [`dvd_rfl (Term.hole "_")]))))
             []
             (Std.Tactic.tacticRwa__
              "rwa"
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule
                 [(patternIgnore (token.«← » "←"))]
                 (Term.app `IsFractionRing.injective [`R `K `hQ]))
                ","
                (Tactic.rwRule [] `mul_comm)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Units.coe_neg_one)
                ","
                (Tactic.rwRule [] `mul_pow)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Units.val_pow_eq_pow_val)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Units.val_pow_eq_pow_val)
                ","
                (Tactic.rwRule [] `mul_assoc)
                ","
                (Tactic.rwRule
                 []
                 (Term.app
                  `IsUnit.dvd_mul_left
                  [(Term.hole "_")
                   (Term.hole "_")
                   (Term.hole "_")
                   (Term.anonymousCtor "⟨" [(Term.hole "_") "," `rfl] "⟩")]))
                ","
                (Tactic.rwRule [] `mul_comm)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Nat.succ_eq_add_one)
                ","
                (Tactic.rwRule [] `hn)]
               "]")
              [(Tactic.location "at" (Tactic.locationHyp [`hppdiv] []))])])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             [`hndiv []]
             [(Term.typeSpec
               ":"
               («term¬_»
                "¬"
                («term_∣_»
                 («term_^_» `p "^" (num "2"))
                 "∣"
                 (Term.app (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff) [(num "0")]))))]
             ":="
             (Term.fun
              "fun"
              (Term.basicFun
               [`h]
               []
               "=>"
               (Term.app
                `hei.not_mem
                [(Term.subst
                  (Term.proj (Term.app `span_singleton_pow [`p (num "2")]) "." `symm)
                  "▸"
                  [(Term.app (Term.proj `Ideal.mem_span_singleton "." (fieldIdx "2")) [`h])])]))))))
          []
          (Std.Tactic.tacticLetI_
           "letI"
           (Term.haveDecl (Term.haveIdDecl [] [] ":=" (Term.app `FiniteDimensional [`B]))))
          []
          (Mathlib.Tactic.set
           "set"
           []
           (Mathlib.Tactic.setArgsRest `P [] ":=" (Term.app `minpoly [`R `B.gen]) ["with" [] `hP]))
          []
          (Std.Tactic.obtain
           "obtain"
           [(Std.Tactic.RCases.rcasesPatMed
             [(Std.Tactic.RCases.rcasesPat.tuple
               "⟨"
               [(Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `n)])
                 [])
                ","
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hn)])
                 [])]
               "⟩")])]
           []
           [":=" [(Term.app `Nat.exists_eq_succ_of_ne_zero [`B.dim_pos.ne'])]])
          []
          (Std.Tactic.tacticHaveI_
           "haveI"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec ":" (Term.app `NoZeroSMulDivisors [`R `L]))]
             ":="
             (Term.app `NoZeroSMulDivisors.trans [`R `K `L]))))
          []
          (Tactic.tacticLet_
           "let"
           (Term.letDecl
            (Term.letIdDecl `P₁ [] [] ":=" (Term.app `P.map [(Term.app `algebraMap [`R `L])]))))
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `adjoin_singleton_eq_range_aeval)] "]")
           [(Tactic.location "at" (Tactic.locationHyp [`hz] []))])
          []
          (Std.Tactic.obtain
           "obtain"
           [(Std.Tactic.RCases.rcasesPatMed
             [(Std.Tactic.RCases.rcasesPat.tuple
               "⟨"
               [(Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Q₁)])
                 [])
                ","
                (Std.Tactic.RCases.rcasesPatLo
                 (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hQ)])
                 [])]
               "⟩")])]
           []
           [":=" [`hz]])
          []
          (Mathlib.Tactic.set
           "set"
           []
           (Mathlib.Tactic.setArgsRest
            `Q
            []
            ":="
            (Polynomial.Data.Polynomial.Div.«term_%ₘ_» `Q₁ " %ₘ " `P)
            ["with" [] `hQ₁]))
          []
          (Mathlib.Tactic.replace'
           "replace"
           [`hQ []]
           [(Term.typeSpec
             ":"
             («term_=_»
              (Term.app `aeval [`B.gen `Q])
              "="
              (Algebra.Group.Defs.«term_•_» `p " • " `z)))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule
                [(patternIgnore (token.«← » "←"))]
                (Term.app `mod_by_monic_add_div [`Q₁ (Term.app `minpoly.monic [`hBint])]))]
              "]")
             [(Tactic.location "at" (Tactic.locationHyp [`hQ] []))])
            []
            (Std.Tactic.Simpa.simpa
             "simpa"
             []
             []
             (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hQ]))])
          []
          (Classical.«tacticBy_cases_:_» "by_cases" [`hQzero ":"] («term_=_» `Q "=" (num "0")))
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.simp
             "simp"
             []
             []
             ["only"]
             ["["
              [(Tactic.simpLemma [] [] `hQzero)
               ","
               (Tactic.simpLemma [] [] `Algebra.smul_def)
               ","
               (Tactic.simpLemma [] [] `zero_eq_mul)
               ","
               (Tactic.simpLemma [] [] `aeval_zero)]
              "]"]
             [(Tactic.location "at" (Tactic.locationHyp [`hQ] []))])
            []
            (Tactic.cases'
             "cases'"
             [(Tactic.casesTarget [] `hQ)]
             []
             ["with" [(Lean.binderIdent `H) (Lean.binderIdent `H₁)]])
            []
            (tactic__
             (cdotTk (patternIgnore (token.«· » "·")))
             [(Tactic.tacticHave_
               "have"
               (Term.haveDecl
                (Term.haveIdDecl
                 []
                 [(Term.typeSpec
                   ":"
                   (Term.app `Function.Injective [(Term.app `algebraMap [`R `L])]))]
                 ":="
                 (Term.byTactic
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented
                    [(Tactic.rwSeq
                      "rw"
                      []
                      (Tactic.rwRuleSeq
                       "["
                       [(Tactic.rwRule [] (Term.app `algebra_map_eq [`R `K `L]))]
                       "]")
                      [])
                     []
                     (Tactic.exact
                      "exact"
                      (Term.app
                       (Term.proj
                        (Term.proj (Term.app `algebraMap [`K `L]) "." `Injective)
                        "."
                        `comp)
                       [(Term.app `IsFractionRing.injective [`R `K])]))]))))))
              []
              (Std.Tactic.tacticExfalso "exfalso")
              []
              (Tactic.exact
               "exact"
               (Term.app
                `hp.ne_zero
                [(Term.app
                  (Term.proj
                   (Term.app `injective_iff_map_eq_zero [(Term.hole "_")])
                   "."
                   (fieldIdx "1"))
                  [`this (Term.hole "_") `H])]))])
            []
            (tactic__
             (cdotTk (patternIgnore (token.«· » "·")))
             [(Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `H₁)] "]") [])
              []
              (Tactic.exact "exact" (Term.app `Subalgebra.zero_mem [(Term.hole "_")]))])])
          []
          (Tactic.refine'
           "refine'"
           (Term.app
            `mem_adjoin_of_dvd_coeff_of_dvd_aeval
            [`hp.ne_zero (Term.fun "fun" (Term.basicFun [`i] [] "=>" (Term.hole "_"))) `hQ]))
          []
          (Tactic.refine'
           "refine'"
           (Term.app
            `Nat.case_strong_induction_on
            [`i
             (Term.hole "_")
             (Term.fun "fun" (Term.basicFun [`j `hind] [] "=>" (Term.hole "_")))]))
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.intro "intro" [`H])
            []
            (Tactic.exact
             "exact"
             (Term.app
              `dvd_coeff_zero_of_aeval_eq_prime_smul_of_minpoly_is_eiseinstein_at
              [`hp `hBint `hQ `hzint `hei]))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.intro "intro" [`hj])
            []
            (Tactic.refine'
             "refine'"
             (Term.app `hp.dvd_of_pow_dvd_pow_mul_pow_of_square_not_dvd [(Term.hole "_") `hndiv]))
            []
            (Tactic.exact "exact" `n)
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`H []]
               []
               ":="
               (Term.app `degree_mod_by_monic_lt [`Q₁ (Term.app `minpoly.monic [`hBint])]))))
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hQ₁)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hP)]
              "]")
             [(Tactic.location "at" (Tactic.locationHyp [`H] []))])
            []
            (Mathlib.Tactic.tacticReplace_
             "replace"
             (Term.haveDecl
              (Term.haveIdDecl
               [`H []]
               []
               ":="
               (Term.app
                (Term.proj `Nat.lt_iff_add_one_le "." (fieldIdx "1"))
                [(Term.app
                  `lt_of_lt_of_le
                  [(Term.app
                    `lt_of_le_of_lt
                    [(Term.app
                      (Term.proj `Nat.lt_iff_add_one_le "." (fieldIdx "1"))
                      [(Term.app
                        `Nat.lt_of_succ_lt_succ
                        [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])])])
                     (Term.app `lt_succ_self [(Term.hole "_")])])
                   (Term.app
                    (Term.proj `Nat.lt_iff_add_one_le "." (fieldIdx "1"))
                    [(Term.app
                      (Term.proj
                       (Term.app `nat_degree_lt_nat_degree_iff [`hQzero])
                       "."
                       (fieldIdx "2"))
                      [`H])])])]))))
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `add_assoc)] "]")
             [(Tactic.location "at" (Tactic.locationHyp [`H] []))])
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`Hj []]
               [(Term.typeSpec
                 ":"
                 («term_=_»
                  («term_+_» `Q.nat_degree "+" (num "1"))
                  "="
                  («term_+_» («term_+_» `j "+" (num "1")) "+" («term_-_» `Q.nat_degree "-" `j))))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule
                       [(patternIgnore (token.«← » "←"))]
                       (Term.app `add_comm [(num "1")]))
                      ","
                      (Tactic.rwRule
                       [(patternIgnore (token.«← » "←"))]
                       (Term.app `add_comm [(num "1")]))
                      ","
                      (Tactic.rwRule [] `add_assoc)
                      ","
                      (Tactic.rwRule [] `add_right_inj)
                      ","
                      (Tactic.rwRule
                       [(patternIgnore (token.«← » "←"))]
                       (Term.app
                        `Nat.add_sub_assoc
                        [(Term.proj
                          (Term.app
                           `Nat.lt_of_succ_lt_succ
                           [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])])
                          "."
                          `le)]))
                      ","
                      (Tactic.rwRule [] `add_comm)
                      ","
                      (Tactic.rwRule [] `Nat.add_sub_cancel)]
                     "]")
                    [])]))))))
            []
            (Mathlib.Tactic.Choose.tacticChoose!__Using_
             "choose!"
             [(Lean.binderIdent `g) (Lean.binderIdent `hg)]
             ["using" `hind])
            []
            (Mathlib.Tactic.replace'
             "replace"
             [`hg []]
             [(Term.typeSpec
               ":"
               (Std.ExtendedBinder.«term∀__,_»
                "∀"
                (Lean.binderIdent `k)
                («binderTerm∈_» "∈" (Term.app `range [(«term_+_» `j "+" (num "1"))]))
                ","
                («term_=_»
                 (Algebra.Group.Defs.«term_•_»
                  (Term.app `Q.coeff [`k])
                  " • "
                  («term_^_» `B.gen "^" `k))
                 "="
                 («term_*_»
                  (Term.app `algebraMap [`R `L `p])
                  "*"
                  (Algebra.Group.Defs.«term_•_»
                   (Term.app `g [`k])
                   " • "
                   («term_^_» `B.gen "^" `k))))))])
            []
            (tactic__
             (cdotTk (patternIgnore (token.«· » "·")))
             [(Tactic.intro "intro" [`k `hk])
              []
              (Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule
                  []
                  (Term.app
                   `hg
                   [`k
                    (Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hk])
                    (Term.app
                     (Term.proj `mem_range_succ_iff "." (fieldIdx "2"))
                     [(Term.app
                       `le_trans
                       [(Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hk])
                        (Term.proj
                         (Term.app
                          (Term.proj `succ_le_iff "." (fieldIdx "1"))
                          [(Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hj])])
                         "."
                         `le)])])]))
                 ","
                 (Tactic.rwRule [] `Algebra.smul_def)
                 ","
                 (Tactic.rwRule [] `Algebra.smul_def)
                 ","
                 (Tactic.rwRule [] `RingHom.map_mul)
                 ","
                 (Tactic.rwRule [] `mul_assoc)]
                "]")
               [])])
            []
            (Mathlib.Tactic.Choose.tacticChoose!__Using_
             "choose!"
             [(Lean.binderIdent `f) (Lean.binderIdent `hf)]
             ["using"
              (Term.app
               `is_weakly_eisenstein_at.exists_mem_adjoin_mul_eq_pow_nat_degree_le
               [(Term.app `minpoly.aeval [`R `B.gen])
                (Term.app `minpoly.monic [`hBint])
                `hei.is_weakly_eisenstein_at])])
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`hf₁ []]
               [(Term.typeSpec
                 ":"
                 (Std.ExtendedBinder.«term∀__,_»
                  "∀"
                  (Lean.binderIdent `k)
                  («binderTerm∈_»
                   "∈"
                   (Term.app
                    (Term.proj (Term.app `range [(«term_-_» `Q.nat_degree "-" `j)]) "." `erase)
                    [(num "0")]))
                  ","
                  («term_=_»
                   («term_*_»
                    (Algebra.Group.Defs.«term_•_»
                     (Term.app `Q.coeff [(«term_+_» («term_+_» `j "+" (num "1")) "+" `k)])
                     " • "
                     («term_^_» `B.gen "^" («term_+_» («term_+_» `j "+" (num "1")) "+" `k)))
                    "*"
                    («term_^_»
                     `B.gen
                     "^"
                     («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))
                   "="
                   («term_*_»
                    (Term.app (Term.app `algebraMap [`R `L]) [`p])
                    "*"
                    (Algebra.Group.Defs.«term_•_»
                     (Term.app `Q.coeff [(«term_+_» («term_+_» `j "+" (num "1")) "+" `k)])
                     " • "
                     (Term.app
                      `f
                      [(«term_-_» («term_+_» `k "+" `P.nat_degree) "-" (num "1"))]))))))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(Tactic.intro "intro" [`k `hk])
                   []
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule [] `smul_mul_assoc)
                      ","
                      (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `pow_add)
                      ","
                      (Tactic.rwRule
                       [(patternIgnore (token.«← » "←"))]
                       (Term.app `Nat.add_sub_assoc [`H]))
                      ","
                      (Tactic.rwRule
                       [(patternIgnore (token.«← » "←"))]
                       (Term.app `add_assoc [`j (num "1") (num "1")]))
                      ","
                      (Tactic.rwRule
                       []
                       (Term.app `add_comm [(«term_+_» `j "+" (num "1")) (num "1")]))
                      ","
                      (Tactic.rwRule [] (Term.app `add_assoc [(«term_+_» `j "+" (num "1"))]))
                      ","
                      (Tactic.rwRule
                       []
                       (Term.app `add_comm [(Term.hole "_") («term_+_» `k "+" `P.nat_degree)]))
                      ","
                      (Tactic.rwRule [] `Nat.add_sub_add_right)
                      ","
                      (Tactic.rwRule
                       [(patternIgnore (token.«← » "←"))]
                       (Term.proj
                        (Term.app
                         `hf
                         [(«term_-_» («term_+_» `k "+" `P.nat_degree) "-" (num "1"))
                          (Term.hole "_")])
                        "."
                        (fieldIdx "2")))
                      ","
                      (Tactic.rwRule [] `mul_smul_comm)]
                     "]")
                    [])
                   []
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule
                       []
                       (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map))
                      ","
                      (Tactic.rwRule [] `add_comm)
                      ","
                      (Tactic.rwRule [] `Nat.add_sub_assoc)
                      ","
                      (Tactic.rwRule [] `le_add_iff_nonneg_right)]
                     "]")
                    [])
                   []
                   (tactic__
                    (cdotTk (patternIgnore (token.«· » "·")))
                    [(Tactic.exact "exact" (Term.app `Nat.zero_le [(Term.hole "_")]))])
                   []
                   (tactic__
                    (cdotTk (patternIgnore (token.«· » "·")))
                    [(Tactic.refine'
                      "refine'"
                      (Term.app
                       (Term.proj `one_le_iff_ne_zero "." (fieldIdx "2"))
                       [(Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))]))
                     []
                     (Tactic.rwSeq
                      "rw"
                      []
                      (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h)] "]")
                      [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
                     []
                     (Std.Tactic.Simpa.simpa
                      "simpa"
                      []
                      []
                      (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hk]))])
                   []
                   (tactic__
                    (cdotTk (patternIgnore (token.«· » "·")))
                    [(Tactic.tacticInfer_instance "infer_instance")])]))))))
            []
            (Tactic.tacticSuffices_
             "suffices"
             (Term.sufficesDecl
              []
              («term_∣_»
               («term_^_» `p "^" `n.succ)
               "∣"
               («term_*_»
                («term_^_» (Term.app `Q.coeff [(Term.app `succ [`j])]) "^" `n.succ)
                "*"
                («term_^_»
                 (Term.app (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff) [(num "0")])
                 "^"
                 («term_+_»
                  (Term.app `succ [`j])
                  "+"
                  («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))))
              (Term.byTactic'
               "by"
               (Tactic.tacticSeq
                (Tactic.tacticSeq1Indented
                 [(convert "convert" [] `this [])
                  []
                  (Tactic.rwSeq
                   "rw"
                   []
                   (Tactic.rwRuleSeq
                    "["
                    [(Tactic.rwRule [] `Nat.succ_eq_add_one)
                     ","
                     (Tactic.rwRule [] `add_assoc)
                     ","
                     (Tactic.rwRule
                      [(patternIgnore (token.«← » "←"))]
                      (Term.app `Nat.add_sub_assoc [`H]))
                     ","
                     (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `add_assoc)
                     ","
                     (Tactic.rwRule [] (Term.app `add_comm [(«term_+_» `j "+" (num "1"))]))
                     ","
                     (Tactic.rwRule [] `Nat.add_sub_add_left)
                     ","
                     (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Nat.add_sub_assoc)
                     ","
                     (Tactic.rwRule [] `Nat.add_sub_add_left)
                     ","
                     (Tactic.rwRule [] `hP)
                     ","
                     (Tactic.rwRule
                      [(patternIgnore (token.«← » "←"))]
                      (Term.app
                       (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map)
                       [(Term.app `algebraMap [`R `K])]))
                     ","
                     (Tactic.rwRule
                      [(patternIgnore (token.«← » "←"))]
                      (Term.app `minpoly.gcd_domain_eq_field_fractions' [`K `hBint]))
                     ","
                     (Tactic.rwRule [] `nat_degree_minpoly)
                     ","
                     (Tactic.rwRule [] `hn)
                     ","
                     (Tactic.rwRule [] `Nat.sub_one)
                     ","
                     (Tactic.rwRule [] `Nat.pred_succ)]
                    "]")
                   [])
                  []
                  (linarith "linarith" [] (linarithArgsRest [] [] []))])))))
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `aeval_eq_sum_range)
               ","
               (Tactic.rwRule [] `Hj)
               ","
               (Tactic.rwRule [] `range_add)
               ","
               (Tactic.rwRule
                []
                (Term.app
                 `sum_union
                 [(Term.app `disjoint_range_add_left_embedding [(Term.hole "_") (Term.hole "_")])]))
               ","
               (Tactic.rwRule [] (Term.app `sum_congr [`rfl `hg]))
               ","
               (Tactic.rwRule [] `add_comm)]
              "]")
             [(Tactic.location "at" (Tactic.locationHyp [`hQ] []))])
            []
            (Mathlib.Tactic.tacticReplace_
             "replace"
             (Term.haveDecl
              (Term.haveIdDecl
               [`hQ []]
               []
               ":="
               (Term.app
                `congr_arg
                [(Term.fun
                  "fun"
                  (Term.basicFun
                   [`x]
                   []
                   "=>"
                   («term_*_»
                    `x
                    "*"
                    («term_^_»
                     `B.gen
                     "^"
                     («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))))
                 `hQ]))))
            []
            (Mathlib.Tactic.tacticSimp_rw__
             "simp_rw"
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `sum_map)
               ","
               (Tactic.rwRule [] `add_left_embedding_apply)
               ","
               (Tactic.rwRule [] `add_mul)
               ","
               (Tactic.rwRule [] `sum_mul)
               ","
               (Tactic.rwRule [] `mul_assoc)]
              "]")
             [(Tactic.location "at" (Tactic.locationHyp [`hQ] []))])
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule
                [(patternIgnore (token.«← » "←"))]
                (Term.app
                 `insert_erase
                 [(Term.app
                   (Term.proj `mem_range "." (fieldIdx "2"))
                   [(«term_<|_»
                     (Term.proj `tsub_pos_iff_lt "." (fieldIdx "2"))
                     "<|"
                     («term_<|_»
                      `Nat.lt_of_succ_lt_succ
                      "<|"
                      (Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])))])]))
               ","
               (Tactic.rwRule
                []
                (Term.app `sum_insert [(Term.app `not_mem_erase [(num "0") (Term.hole "_")])]))
               ","
               (Tactic.rwRule [] `add_zero)
               ","
               (Tactic.rwRule [] (Term.app `sum_congr [`rfl `hf₁]))
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `mul_sum)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `mul_sum)
               ","
               (Tactic.rwRule [] `add_assoc)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `mul_add)
               ","
               (Tactic.rwRule [] `smul_mul_assoc)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `pow_add)
               ","
               (Tactic.rwRule [] `Algebra.smul_def)]
              "]")
             [(Tactic.location "at" (Tactic.locationHyp [`hQ] []))])
            []
            (Mathlib.Tactic.tacticReplace_
             "replace"
             (Term.haveDecl
              (Term.haveIdDecl
               [`hQ []]
               []
               ":="
               (Term.app `congr_arg [(Term.app `norm [`K]) (Term.app `eq_sub_of_add_eq [`hQ])]))))
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`hintsum []]
               [(Term.typeSpec
                 ":"
                 (Term.app
                  `IsIntegral
                  [`R
                   («term_-_»
                    («term_*_»
                     `z
                     "*"
                     («term_^_»
                      `B.gen
                      "^"
                      («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))
                    "-"
                    («term_+_»
                     (BigOperators.Algebra.BigOperators.Basic.finset.sum
                      "∑"
                      (Std.ExtendedBinder.extBinders
                       (Std.ExtendedBinder.extBinder
                        (Lean.binderIdent `x)
                        [(group ":" (termℕ "ℕ"))]))
                      " in "
                      (Term.app
                       (Term.proj (Term.app `range [(«term_-_» `Q.nat_degree "-" `j)]) "." `erase)
                       [(num "0")])
                      ", "
                      (Algebra.Group.Defs.«term_•_»
                       (Term.app `Q.coeff [(«term_+_» («term_+_» `j "+" (num "1")) "+" `x)])
                       " • "
                       (Term.app `f [(«term_-_» («term_+_» `x "+" `P.nat_degree) "-" (num "1"))])))
                     "+"
                     (BigOperators.Algebra.BigOperators.Basic.finset.sum
                      "∑"
                      (Std.ExtendedBinder.extBinders
                       (Std.ExtendedBinder.extBinder
                        (Lean.binderIdent `x)
                        [(group ":" (termℕ "ℕ"))]))
                      " in "
                      (Term.app `range [(«term_+_» `j "+" (num "1"))])
                      ", "
                      («term_*_»
                       (Algebra.Group.Defs.«term_•_»
                        (Term.app `g [`x])
                        " • "
                        («term_^_» `B.gen "^" `x))
                       "*"
                       («term_^_»
                        `B.gen
                        "^"
                        («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2"))))))))]))]
               ":="
               (Term.byTactic
                "by"
                (Tactic.tacticSeq
                 (Tactic.tacticSeq1Indented
                  [(Tactic.refine'
                    "refine'"
                    (Term.app
                     `is_integral_sub
                     [(Term.app
                       `is_integral_mul
                       [`hzint (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])
                      (Term.app
                       `is_integral_add
                       [(Term.app
                         `IsIntegral.sum
                         [(Term.hole "_")
                          (Term.fun
                           "fun"
                           (Term.basicFun
                            [`k `hk]
                            []
                            "=>"
                            (Term.app `is_integral_smul [(Term.hole "_") (Term.hole "_")])))])
                        (Term.app
                         `IsIntegral.sum
                         [(Term.hole "_")
                          (Term.fun
                           "fun"
                           (Term.basicFun
                            [`k `hk]
                            []
                            "=>"
                            (Term.app
                             `is_integral_mul
                             [(Term.app
                               `is_integral_smul
                               [(Term.hole "_")
                                (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])
                              (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])))])])]))
                   []
                   (Tactic.refine'
                    "refine'"
                    (Term.app
                     `adjoin_le_integral_closure
                     [`hBint
                      (Term.proj
                       (Term.app `hf [(Term.hole "_") (Term.hole "_")])
                       "."
                       (fieldIdx "1"))]))
                   []
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule
                       []
                       (Term.app
                        (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map)
                        [(Term.app `algebraMap [`R `L])]))]
                     "]")
                    [])
                   []
                   (Tactic.rwSeq
                    "rw"
                    []
                    (Tactic.rwRuleSeq
                     "["
                     [(Tactic.rwRule [] `add_comm)
                      ","
                      (Tactic.rwRule [] `Nat.add_sub_assoc)
                      ","
                      (Tactic.rwRule [] `le_add_iff_nonneg_right)]
                     "]")
                    [])
                   []
                   (tactic__
                    (cdotTk (patternIgnore (token.«· » "·")))
                    [(Tactic.exact "exact" (Term.app `zero_le [(Term.hole "_")]))])
                   []
                   (tactic__
                    (cdotTk (patternIgnore (token.«· » "·")))
                    [(Tactic.refine'
                      "refine'"
                      (Term.app
                       (Term.proj `one_le_iff_ne_zero "." (fieldIdx "2"))
                       [(Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))]))
                     []
                     (Tactic.rwSeq
                      "rw"
                      []
                      (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h)] "]")
                      [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
                     []
                     (Std.Tactic.Simpa.simpa
                      "simpa"
                      []
                      []
                      (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hk]))])]))))))
            []
            (Std.Tactic.obtain
             "obtain"
             [(Std.Tactic.RCases.rcasesPatMed
               [(Std.Tactic.RCases.rcasesPat.tuple
                 "⟨"
                 [(Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `r)])
                   [])
                  ","
                  (Std.Tactic.RCases.rcasesPatLo
                   (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hr)])
                   [])]
                 "⟩")])]
             []
             [":="
              [(Term.app
                (Term.proj `is_integral_iff "." (fieldIdx "1"))
                [(Term.app `is_integral_norm [`K `hintsum])])]])
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `Algebra.smul_def)
               ","
               (Tactic.rwRule [] `mul_assoc)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `mul_sub)
               ","
               (Tactic.rwRule [] `_root_.map_mul)
               ","
               (Tactic.rwRule [] (Term.app `algebra_map_apply [`R `K `L]))
               ","
               (Tactic.rwRule [] `map_pow)
               ","
               (Tactic.rwRule [] `Algebra.norm_algebra_map)
               ","
               (Tactic.rwRule [] `_root_.map_mul)
               ","
               (Tactic.rwRule [] (Term.app `algebra_map_apply [`R `K `L]))
               ","
               (Tactic.rwRule [] `Algebra.norm_algebra_map)
               ","
               (Tactic.rwRule [] (Term.app `finrank [`B]))
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hr)
               ","
               (Tactic.rwRule [] `power_basis.norm_gen_eq_coeff_zero_minpoly)
               ","
               (Tactic.rwRule [] (Term.app `minpoly.gcd_domain_eq_field_fractions' [`K `hBint]))
               ","
               (Tactic.rwRule [] `coeff_map)
               ","
               (Tactic.rwRule
                []
                (Term.show
                 "show"
                 («term_=_»
                  (Term.typeAscription "(" («term-_» "-" (num "1")) ":" [`K] ")")
                  "="
                  (Term.app `algebraMap [`R `K («term-_» "-" (num "1"))]))
                 (Term.byTactic'
                  "by"
                  (Tactic.tacticSeq
                   (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])])))))
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `map_pow)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `map_pow)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `_root_.map_mul)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `map_pow)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `_root_.map_mul)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `map_pow)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `_root_.map_mul)]
              "]")
             [(Tactic.location "at" (Tactic.locationHyp [`hQ] []))])
            []
            (Tactic.tacticHave_
             "have"
             (Term.haveDecl
              (Term.haveIdDecl
               [`hppdiv []]
               [(Term.typeSpec
                 ":"
                 («term_∣_»
                  («term_^_» `p "^" `B.dim)
                  "∣"
                  («term_*_» («term_^_» `p "^" `B.dim) "*" `r)))]
               ":="
               (Term.app `dvd_mul_of_dvd_left [`dvd_rfl (Term.hole "_")]))))
            []
            (Std.Tactic.tacticRwa__
             "rwa"
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule
                [(patternIgnore (token.«← » "←"))]
                (Term.app `IsFractionRing.injective [`R `K `hQ]))
               ","
               (Tactic.rwRule [] `mul_comm)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Units.coe_neg_one)
               ","
               (Tactic.rwRule [] `mul_pow)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Units.val_pow_eq_pow_val)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Units.val_pow_eq_pow_val)
               ","
               (Tactic.rwRule [] `mul_assoc)
               ","
               (Tactic.rwRule
                []
                (Term.app
                 `IsUnit.dvd_mul_left
                 [(Term.hole "_")
                  (Term.hole "_")
                  (Term.hole "_")
                  (Term.anonymousCtor "⟨" [(Term.hole "_") "," `rfl] "⟩")]))
               ","
               (Tactic.rwRule [] `mul_comm)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Nat.succ_eq_add_one)
               ","
               (Tactic.rwRule [] `hn)]
              "]")
             [(Tactic.location "at" (Tactic.locationHyp [`hppdiv] []))])])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.intro "intro" [`hj])
        []
        (Tactic.refine'
         "refine'"
         (Term.app `hp.dvd_of_pow_dvd_pow_mul_pow_of_square_not_dvd [(Term.hole "_") `hndiv]))
        []
        (Tactic.exact "exact" `n)
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`H []]
           []
           ":="
           (Term.app `degree_mod_by_monic_lt [`Q₁ (Term.app `minpoly.monic [`hBint])]))))
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hQ₁)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hP)]
          "]")
         [(Tactic.location "at" (Tactic.locationHyp [`H] []))])
        []
        (Mathlib.Tactic.tacticReplace_
         "replace"
         (Term.haveDecl
          (Term.haveIdDecl
           [`H []]
           []
           ":="
           (Term.app
            (Term.proj `Nat.lt_iff_add_one_le "." (fieldIdx "1"))
            [(Term.app
              `lt_of_lt_of_le
              [(Term.app
                `lt_of_le_of_lt
                [(Term.app
                  (Term.proj `Nat.lt_iff_add_one_le "." (fieldIdx "1"))
                  [(Term.app
                    `Nat.lt_of_succ_lt_succ
                    [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])])])
                 (Term.app `lt_succ_self [(Term.hole "_")])])
               (Term.app
                (Term.proj `Nat.lt_iff_add_one_le "." (fieldIdx "1"))
                [(Term.app
                  (Term.proj (Term.app `nat_degree_lt_nat_degree_iff [`hQzero]) "." (fieldIdx "2"))
                  [`H])])])]))))
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `add_assoc)] "]")
         [(Tactic.location "at" (Tactic.locationHyp [`H] []))])
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`Hj []]
           [(Term.typeSpec
             ":"
             («term_=_»
              («term_+_» `Q.nat_degree "+" (num "1"))
              "="
              («term_+_» («term_+_» `j "+" (num "1")) "+" («term_-_» `Q.nat_degree "-" `j))))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule
                   [(patternIgnore (token.«← » "←"))]
                   (Term.app `add_comm [(num "1")]))
                  ","
                  (Tactic.rwRule
                   [(patternIgnore (token.«← » "←"))]
                   (Term.app `add_comm [(num "1")]))
                  ","
                  (Tactic.rwRule [] `add_assoc)
                  ","
                  (Tactic.rwRule [] `add_right_inj)
                  ","
                  (Tactic.rwRule
                   [(patternIgnore (token.«← » "←"))]
                   (Term.app
                    `Nat.add_sub_assoc
                    [(Term.proj
                      (Term.app
                       `Nat.lt_of_succ_lt_succ
                       [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])])
                      "."
                      `le)]))
                  ","
                  (Tactic.rwRule [] `add_comm)
                  ","
                  (Tactic.rwRule [] `Nat.add_sub_cancel)]
                 "]")
                [])]))))))
        []
        (Mathlib.Tactic.Choose.tacticChoose!__Using_
         "choose!"
         [(Lean.binderIdent `g) (Lean.binderIdent `hg)]
         ["using" `hind])
        []
        (Mathlib.Tactic.replace'
         "replace"
         [`hg []]
         [(Term.typeSpec
           ":"
           (Std.ExtendedBinder.«term∀__,_»
            "∀"
            (Lean.binderIdent `k)
            («binderTerm∈_» "∈" (Term.app `range [(«term_+_» `j "+" (num "1"))]))
            ","
            («term_=_»
             (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [`k]) " • " («term_^_» `B.gen "^" `k))
             "="
             («term_*_»
              (Term.app `algebraMap [`R `L `p])
              "*"
              (Algebra.Group.Defs.«term_•_»
               (Term.app `g [`k])
               " • "
               («term_^_» `B.gen "^" `k))))))])
        []
        (tactic__
         (cdotTk (patternIgnore (token.«· » "·")))
         [(Tactic.intro "intro" [`k `hk])
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule
              []
              (Term.app
               `hg
               [`k
                (Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hk])
                (Term.app
                 (Term.proj `mem_range_succ_iff "." (fieldIdx "2"))
                 [(Term.app
                   `le_trans
                   [(Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hk])
                    (Term.proj
                     (Term.app
                      (Term.proj `succ_le_iff "." (fieldIdx "1"))
                      [(Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hj])])
                     "."
                     `le)])])]))
             ","
             (Tactic.rwRule [] `Algebra.smul_def)
             ","
             (Tactic.rwRule [] `Algebra.smul_def)
             ","
             (Tactic.rwRule [] `RingHom.map_mul)
             ","
             (Tactic.rwRule [] `mul_assoc)]
            "]")
           [])])
        []
        (Mathlib.Tactic.Choose.tacticChoose!__Using_
         "choose!"
         [(Lean.binderIdent `f) (Lean.binderIdent `hf)]
         ["using"
          (Term.app
           `is_weakly_eisenstein_at.exists_mem_adjoin_mul_eq_pow_nat_degree_le
           [(Term.app `minpoly.aeval [`R `B.gen])
            (Term.app `minpoly.monic [`hBint])
            `hei.is_weakly_eisenstein_at])])
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hf₁ []]
           [(Term.typeSpec
             ":"
             (Std.ExtendedBinder.«term∀__,_»
              "∀"
              (Lean.binderIdent `k)
              («binderTerm∈_»
               "∈"
               (Term.app
                (Term.proj (Term.app `range [(«term_-_» `Q.nat_degree "-" `j)]) "." `erase)
                [(num "0")]))
              ","
              («term_=_»
               («term_*_»
                (Algebra.Group.Defs.«term_•_»
                 (Term.app `Q.coeff [(«term_+_» («term_+_» `j "+" (num "1")) "+" `k)])
                 " • "
                 («term_^_» `B.gen "^" («term_+_» («term_+_» `j "+" (num "1")) "+" `k)))
                "*"
                («term_^_» `B.gen "^" («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))
               "="
               («term_*_»
                (Term.app (Term.app `algebraMap [`R `L]) [`p])
                "*"
                (Algebra.Group.Defs.«term_•_»
                 (Term.app `Q.coeff [(«term_+_» («term_+_» `j "+" (num "1")) "+" `k)])
                 " • "
                 (Term.app `f [(«term_-_» («term_+_» `k "+" `P.nat_degree) "-" (num "1"))]))))))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.intro "intro" [`k `hk])
               []
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] `smul_mul_assoc)
                  ","
                  (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `pow_add)
                  ","
                  (Tactic.rwRule
                   [(patternIgnore (token.«← » "←"))]
                   (Term.app `Nat.add_sub_assoc [`H]))
                  ","
                  (Tactic.rwRule
                   [(patternIgnore (token.«← » "←"))]
                   (Term.app `add_assoc [`j (num "1") (num "1")]))
                  ","
                  (Tactic.rwRule [] (Term.app `add_comm [(«term_+_» `j "+" (num "1")) (num "1")]))
                  ","
                  (Tactic.rwRule [] (Term.app `add_assoc [(«term_+_» `j "+" (num "1"))]))
                  ","
                  (Tactic.rwRule
                   []
                   (Term.app `add_comm [(Term.hole "_") («term_+_» `k "+" `P.nat_degree)]))
                  ","
                  (Tactic.rwRule [] `Nat.add_sub_add_right)
                  ","
                  (Tactic.rwRule
                   [(patternIgnore (token.«← » "←"))]
                   (Term.proj
                    (Term.app
                     `hf
                     [(«term_-_» («term_+_» `k "+" `P.nat_degree) "-" (num "1")) (Term.hole "_")])
                    "."
                    (fieldIdx "2")))
                  ","
                  (Tactic.rwRule [] `mul_smul_comm)]
                 "]")
                [])
               []
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule
                   []
                   (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map))
                  ","
                  (Tactic.rwRule [] `add_comm)
                  ","
                  (Tactic.rwRule [] `Nat.add_sub_assoc)
                  ","
                  (Tactic.rwRule [] `le_add_iff_nonneg_right)]
                 "]")
                [])
               []
               (tactic__
                (cdotTk (patternIgnore (token.«· » "·")))
                [(Tactic.exact "exact" (Term.app `Nat.zero_le [(Term.hole "_")]))])
               []
               (tactic__
                (cdotTk (patternIgnore (token.«· » "·")))
                [(Tactic.refine'
                  "refine'"
                  (Term.app
                   (Term.proj `one_le_iff_ne_zero "." (fieldIdx "2"))
                   [(Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))]))
                 []
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h)] "]")
                  [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
                 []
                 (Std.Tactic.Simpa.simpa
                  "simpa"
                  []
                  []
                  (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hk]))])
               []
               (tactic__
                (cdotTk (patternIgnore (token.«· » "·")))
                [(Tactic.tacticInfer_instance "infer_instance")])]))))))
        []
        (Tactic.tacticSuffices_
         "suffices"
         (Term.sufficesDecl
          []
          («term_∣_»
           («term_^_» `p "^" `n.succ)
           "∣"
           («term_*_»
            («term_^_» (Term.app `Q.coeff [(Term.app `succ [`j])]) "^" `n.succ)
            "*"
            («term_^_»
             (Term.app (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff) [(num "0")])
             "^"
             («term_+_»
              (Term.app `succ [`j])
              "+"
              («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))))
          (Term.byTactic'
           "by"
           (Tactic.tacticSeq
            (Tactic.tacticSeq1Indented
             [(convert "convert" [] `this [])
              []
              (Tactic.rwSeq
               "rw"
               []
               (Tactic.rwRuleSeq
                "["
                [(Tactic.rwRule [] `Nat.succ_eq_add_one)
                 ","
                 (Tactic.rwRule [] `add_assoc)
                 ","
                 (Tactic.rwRule
                  [(patternIgnore (token.«← » "←"))]
                  (Term.app `Nat.add_sub_assoc [`H]))
                 ","
                 (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `add_assoc)
                 ","
                 (Tactic.rwRule [] (Term.app `add_comm [(«term_+_» `j "+" (num "1"))]))
                 ","
                 (Tactic.rwRule [] `Nat.add_sub_add_left)
                 ","
                 (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Nat.add_sub_assoc)
                 ","
                 (Tactic.rwRule [] `Nat.add_sub_add_left)
                 ","
                 (Tactic.rwRule [] `hP)
                 ","
                 (Tactic.rwRule
                  [(patternIgnore (token.«← » "←"))]
                  (Term.app
                   (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map)
                   [(Term.app `algebraMap [`R `K])]))
                 ","
                 (Tactic.rwRule
                  [(patternIgnore (token.«← » "←"))]
                  (Term.app `minpoly.gcd_domain_eq_field_fractions' [`K `hBint]))
                 ","
                 (Tactic.rwRule [] `nat_degree_minpoly)
                 ","
                 (Tactic.rwRule [] `hn)
                 ","
                 (Tactic.rwRule [] `Nat.sub_one)
                 ","
                 (Tactic.rwRule [] `Nat.pred_succ)]
                "]")
               [])
              []
              (linarith "linarith" [] (linarithArgsRest [] [] []))])))))
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `aeval_eq_sum_range)
           ","
           (Tactic.rwRule [] `Hj)
           ","
           (Tactic.rwRule [] `range_add)
           ","
           (Tactic.rwRule
            []
            (Term.app
             `sum_union
             [(Term.app `disjoint_range_add_left_embedding [(Term.hole "_") (Term.hole "_")])]))
           ","
           (Tactic.rwRule [] (Term.app `sum_congr [`rfl `hg]))
           ","
           (Tactic.rwRule [] `add_comm)]
          "]")
         [(Tactic.location "at" (Tactic.locationHyp [`hQ] []))])
        []
        (Mathlib.Tactic.tacticReplace_
         "replace"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hQ []]
           []
           ":="
           (Term.app
            `congr_arg
            [(Term.fun
              "fun"
              (Term.basicFun
               [`x]
               []
               "=>"
               («term_*_»
                `x
                "*"
                («term_^_» `B.gen "^" («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))))
             `hQ]))))
        []
        (Mathlib.Tactic.tacticSimp_rw__
         "simp_rw"
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `sum_map)
           ","
           (Tactic.rwRule [] `add_left_embedding_apply)
           ","
           (Tactic.rwRule [] `add_mul)
           ","
           (Tactic.rwRule [] `sum_mul)
           ","
           (Tactic.rwRule [] `mul_assoc)]
          "]")
         [(Tactic.location "at" (Tactic.locationHyp [`hQ] []))])
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule
            [(patternIgnore (token.«← » "←"))]
            (Term.app
             `insert_erase
             [(Term.app
               (Term.proj `mem_range "." (fieldIdx "2"))
               [(«term_<|_»
                 (Term.proj `tsub_pos_iff_lt "." (fieldIdx "2"))
                 "<|"
                 («term_<|_»
                  `Nat.lt_of_succ_lt_succ
                  "<|"
                  (Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])))])]))
           ","
           (Tactic.rwRule
            []
            (Term.app `sum_insert [(Term.app `not_mem_erase [(num "0") (Term.hole "_")])]))
           ","
           (Tactic.rwRule [] `add_zero)
           ","
           (Tactic.rwRule [] (Term.app `sum_congr [`rfl `hf₁]))
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `mul_sum)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `mul_sum)
           ","
           (Tactic.rwRule [] `add_assoc)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `mul_add)
           ","
           (Tactic.rwRule [] `smul_mul_assoc)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `pow_add)
           ","
           (Tactic.rwRule [] `Algebra.smul_def)]
          "]")
         [(Tactic.location "at" (Tactic.locationHyp [`hQ] []))])
        []
        (Mathlib.Tactic.tacticReplace_
         "replace"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hQ []]
           []
           ":="
           (Term.app `congr_arg [(Term.app `norm [`K]) (Term.app `eq_sub_of_add_eq [`hQ])]))))
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hintsum []]
           [(Term.typeSpec
             ":"
             (Term.app
              `IsIntegral
              [`R
               («term_-_»
                («term_*_»
                 `z
                 "*"
                 («term_^_» `B.gen "^" («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))
                "-"
                («term_+_»
                 (BigOperators.Algebra.BigOperators.Basic.finset.sum
                  "∑"
                  (Std.ExtendedBinder.extBinders
                   (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
                  " in "
                  (Term.app
                   (Term.proj (Term.app `range [(«term_-_» `Q.nat_degree "-" `j)]) "." `erase)
                   [(num "0")])
                  ", "
                  (Algebra.Group.Defs.«term_•_»
                   (Term.app `Q.coeff [(«term_+_» («term_+_» `j "+" (num "1")) "+" `x)])
                   " • "
                   (Term.app `f [(«term_-_» («term_+_» `x "+" `P.nat_degree) "-" (num "1"))])))
                 "+"
                 (BigOperators.Algebra.BigOperators.Basic.finset.sum
                  "∑"
                  (Std.ExtendedBinder.extBinders
                   (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
                  " in "
                  (Term.app `range [(«term_+_» `j "+" (num "1"))])
                  ", "
                  («term_*_»
                   (Algebra.Group.Defs.«term_•_» (Term.app `g [`x]) " • " («term_^_» `B.gen "^" `x))
                   "*"
                   («term_^_»
                    `B.gen
                    "^"
                    («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2"))))))))]))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.refine'
                "refine'"
                (Term.app
                 `is_integral_sub
                 [(Term.app
                   `is_integral_mul
                   [`hzint (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])
                  (Term.app
                   `is_integral_add
                   [(Term.app
                     `IsIntegral.sum
                     [(Term.hole "_")
                      (Term.fun
                       "fun"
                       (Term.basicFun
                        [`k `hk]
                        []
                        "=>"
                        (Term.app `is_integral_smul [(Term.hole "_") (Term.hole "_")])))])
                    (Term.app
                     `IsIntegral.sum
                     [(Term.hole "_")
                      (Term.fun
                       "fun"
                       (Term.basicFun
                        [`k `hk]
                        []
                        "=>"
                        (Term.app
                         `is_integral_mul
                         [(Term.app
                           `is_integral_smul
                           [(Term.hole "_") (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])
                          (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])))])])]))
               []
               (Tactic.refine'
                "refine'"
                (Term.app
                 `adjoin_le_integral_closure
                 [`hBint
                  (Term.proj (Term.app `hf [(Term.hole "_") (Term.hole "_")]) "." (fieldIdx "1"))]))
               []
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule
                   []
                   (Term.app
                    (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map)
                    [(Term.app `algebraMap [`R `L])]))]
                 "]")
                [])
               []
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] `add_comm)
                  ","
                  (Tactic.rwRule [] `Nat.add_sub_assoc)
                  ","
                  (Tactic.rwRule [] `le_add_iff_nonneg_right)]
                 "]")
                [])
               []
               (tactic__
                (cdotTk (patternIgnore (token.«· » "·")))
                [(Tactic.exact "exact" (Term.app `zero_le [(Term.hole "_")]))])
               []
               (tactic__
                (cdotTk (patternIgnore (token.«· » "·")))
                [(Tactic.refine'
                  "refine'"
                  (Term.app
                   (Term.proj `one_le_iff_ne_zero "." (fieldIdx "2"))
                   [(Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))]))
                 []
                 (Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h)] "]")
                  [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
                 []
                 (Std.Tactic.Simpa.simpa
                  "simpa"
                  []
                  []
                  (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hk]))])]))))))
        []
        (Std.Tactic.obtain
         "obtain"
         [(Std.Tactic.RCases.rcasesPatMed
           [(Std.Tactic.RCases.rcasesPat.tuple
             "⟨"
             [(Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `r)])
               [])
              ","
              (Std.Tactic.RCases.rcasesPatLo
               (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hr)])
               [])]
             "⟩")])]
         []
         [":="
          [(Term.app
            (Term.proj `is_integral_iff "." (fieldIdx "1"))
            [(Term.app `is_integral_norm [`K `hintsum])])]])
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule [] `Algebra.smul_def)
           ","
           (Tactic.rwRule [] `mul_assoc)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `mul_sub)
           ","
           (Tactic.rwRule [] `_root_.map_mul)
           ","
           (Tactic.rwRule [] (Term.app `algebra_map_apply [`R `K `L]))
           ","
           (Tactic.rwRule [] `map_pow)
           ","
           (Tactic.rwRule [] `Algebra.norm_algebra_map)
           ","
           (Tactic.rwRule [] `_root_.map_mul)
           ","
           (Tactic.rwRule [] (Term.app `algebra_map_apply [`R `K `L]))
           ","
           (Tactic.rwRule [] `Algebra.norm_algebra_map)
           ","
           (Tactic.rwRule [] (Term.app `finrank [`B]))
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hr)
           ","
           (Tactic.rwRule [] `power_basis.norm_gen_eq_coeff_zero_minpoly)
           ","
           (Tactic.rwRule [] (Term.app `minpoly.gcd_domain_eq_field_fractions' [`K `hBint]))
           ","
           (Tactic.rwRule [] `coeff_map)
           ","
           (Tactic.rwRule
            []
            (Term.show
             "show"
             («term_=_»
              (Term.typeAscription "(" («term-_» "-" (num "1")) ":" [`K] ")")
              "="
              (Term.app `algebraMap [`R `K («term-_» "-" (num "1"))]))
             (Term.byTactic'
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])])))))
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `map_pow)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `map_pow)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `_root_.map_mul)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `map_pow)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `_root_.map_mul)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `map_pow)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `_root_.map_mul)]
          "]")
         [(Tactic.location "at" (Tactic.locationHyp [`hQ] []))])
        []
        (Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           [`hppdiv []]
           [(Term.typeSpec
             ":"
             («term_∣_»
              («term_^_» `p "^" `B.dim)
              "∣"
              («term_*_» («term_^_» `p "^" `B.dim) "*" `r)))]
           ":="
           (Term.app `dvd_mul_of_dvd_left [`dvd_rfl (Term.hole "_")]))))
        []
        (Std.Tactic.tacticRwa__
         "rwa"
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule
            [(patternIgnore (token.«← » "←"))]
            (Term.app `IsFractionRing.injective [`R `K `hQ]))
           ","
           (Tactic.rwRule [] `mul_comm)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Units.coe_neg_one)
           ","
           (Tactic.rwRule [] `mul_pow)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Units.val_pow_eq_pow_val)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Units.val_pow_eq_pow_val)
           ","
           (Tactic.rwRule [] `mul_assoc)
           ","
           (Tactic.rwRule
            []
            (Term.app
             `IsUnit.dvd_mul_left
             [(Term.hole "_")
              (Term.hole "_")
              (Term.hole "_")
              (Term.anonymousCtor "⟨" [(Term.hole "_") "," `rfl] "⟩")]))
           ","
           (Tactic.rwRule [] `mul_comm)
           ","
           (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Nat.succ_eq_add_one)
           ","
           (Tactic.rwRule [] `hn)]
          "]")
         [(Tactic.location "at" (Tactic.locationHyp [`hppdiv] []))])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.tacticRwa__
       "rwa"
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule
          [(patternIgnore (token.«← » "←"))]
          (Term.app `IsFractionRing.injective [`R `K `hQ]))
         ","
         (Tactic.rwRule [] `mul_comm)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Units.coe_neg_one)
         ","
         (Tactic.rwRule [] `mul_pow)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Units.val_pow_eq_pow_val)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Units.val_pow_eq_pow_val)
         ","
         (Tactic.rwRule [] `mul_assoc)
         ","
         (Tactic.rwRule
          []
          (Term.app
           `IsUnit.dvd_mul_left
           [(Term.hole "_")
            (Term.hole "_")
            (Term.hole "_")
            (Term.anonymousCtor "⟨" [(Term.hole "_") "," `rfl] "⟩")]))
         ","
         (Tactic.rwRule [] `mul_comm)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Nat.succ_eq_add_one)
         ","
         (Tactic.rwRule [] `hn)]
        "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hppdiv] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hppdiv
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hn
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Nat.succ_eq_add_one
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_comm
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `IsUnit.dvd_mul_left
       [(Term.hole "_")
        (Term.hole "_")
        (Term.hole "_")
        (Term.anonymousCtor "⟨" [(Term.hole "_") "," `rfl] "⟩")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.anonymousCtor', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.anonymousCtor "⟨" [(Term.hole "_") "," `rfl] "⟩")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `rfl
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `IsUnit.dvd_mul_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_assoc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Units.val_pow_eq_pow_val
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Units.val_pow_eq_pow_val
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_pow
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Units.coe_neg_one
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_comm
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `IsFractionRing.injective [`R `K `hQ])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hQ
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `IsFractionRing.injective
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hppdiv []]
         [(Term.typeSpec
           ":"
           («term_∣_» («term_^_» `p "^" `B.dim) "∣" («term_*_» («term_^_» `p "^" `B.dim) "*" `r)))]
         ":="
         (Term.app `dvd_mul_of_dvd_left [`dvd_rfl (Term.hole "_")]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `dvd_mul_of_dvd_left [`dvd_rfl (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `dvd_rfl
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `dvd_mul_of_dvd_left
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_∣_» («term_^_» `p "^" `B.dim) "∣" («term_*_» («term_^_» `p "^" `B.dim) "*" `r))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_» («term_^_» `p "^" `B.dim) "*" `r)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `r
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      («term_^_» `p "^" `B.dim)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `B.dim
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `p
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 80, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      («term_^_» `p "^" `B.dim)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `B.dim
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `p
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 80, (some 80, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `Algebra.smul_def)
         ","
         (Tactic.rwRule [] `mul_assoc)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `mul_sub)
         ","
         (Tactic.rwRule [] `_root_.map_mul)
         ","
         (Tactic.rwRule [] (Term.app `algebra_map_apply [`R `K `L]))
         ","
         (Tactic.rwRule [] `map_pow)
         ","
         (Tactic.rwRule [] `Algebra.norm_algebra_map)
         ","
         (Tactic.rwRule [] `_root_.map_mul)
         ","
         (Tactic.rwRule [] (Term.app `algebra_map_apply [`R `K `L]))
         ","
         (Tactic.rwRule [] `Algebra.norm_algebra_map)
         ","
         (Tactic.rwRule [] (Term.app `finrank [`B]))
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hr)
         ","
         (Tactic.rwRule [] `power_basis.norm_gen_eq_coeff_zero_minpoly)
         ","
         (Tactic.rwRule [] (Term.app `minpoly.gcd_domain_eq_field_fractions' [`K `hBint]))
         ","
         (Tactic.rwRule [] `coeff_map)
         ","
         (Tactic.rwRule
          []
          (Term.show
           "show"
           («term_=_»
            (Term.typeAscription "(" («term-_» "-" (num "1")) ":" [`K] ")")
            "="
            (Term.app `algebraMap [`R `K («term-_» "-" (num "1"))]))
           (Term.byTactic'
            "by"
            (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])])))))
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `map_pow)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `map_pow)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `_root_.map_mul)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `map_pow)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `_root_.map_mul)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `map_pow)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `_root_.map_mul)]
        "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hQ] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hQ
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `_root_.map_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `map_pow
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `_root_.map_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `map_pow
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `_root_.map_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `map_pow
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `map_pow
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.show
       "show"
       («term_=_»
        (Term.typeAscription "(" («term-_» "-" (num "1")) ":" [`K] ")")
        "="
        (Term.app `algebraMap [`R `K («term-_» "-" (num "1"))]))
       (Term.byTactic'
        "by"
        (Tactic.tacticSeq (Tactic.tacticSeq1Indented [(Tactic.simp "simp" [] [] [] [] [])]))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic'', expected 'Lean.Parser.Term.fromTerm'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp "simp" [] [] [] [] [])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      («term_=_»
       (Term.typeAscription "(" («term-_» "-" (num "1")) ":" [`K] ")")
       "="
       (Term.app `algebraMap [`R `K («term-_» "-" (num "1"))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `algebraMap [`R `K («term-_» "-" (num "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term-_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term-_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term-_» "-" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 75, (some 75, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term-_» "-" (num "1")) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `algebraMap
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.typeAscription "(" («term-_» "-" (num "1")) ":" [`K] ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `K
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term-_» "-" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 75, (some 75, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `coeff_map
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `minpoly.gcd_domain_eq_field_fractions' [`K `hBint])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hBint
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `minpoly.gcd_domain_eq_field_fractions'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `power_basis.norm_gen_eq_coeff_zero_minpoly
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hr
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `finrank [`B])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `B
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `finrank
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Algebra.norm_algebra_map
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `algebra_map_apply [`R `K `L])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `L
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `algebra_map_apply
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `_root_.map_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Algebra.norm_algebra_map
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `map_pow
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `algebra_map_apply [`R `K `L])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `L
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `algebra_map_apply
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `_root_.map_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_sub
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_assoc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Algebra.smul_def
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.obtain
       "obtain"
       [(Std.Tactic.RCases.rcasesPatMed
         [(Std.Tactic.RCases.rcasesPat.tuple
           "⟨"
           [(Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `r)])
             [])
            ","
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hr)])
             [])]
           "⟩")])]
       []
       [":="
        [(Term.app
          (Term.proj `is_integral_iff "." (fieldIdx "1"))
          [(Term.app `is_integral_norm [`K `hintsum])])]])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `is_integral_iff "." (fieldIdx "1"))
       [(Term.app `is_integral_norm [`K `hintsum])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `is_integral_norm [`K `hintsum])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hintsum
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `is_integral_norm
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `is_integral_norm [`K `hintsum])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `is_integral_iff "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `is_integral_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hintsum []]
         [(Term.typeSpec
           ":"
           (Term.app
            `IsIntegral
            [`R
             («term_-_»
              («term_*_»
               `z
               "*"
               («term_^_» `B.gen "^" («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))
              "-"
              («term_+_»
               (BigOperators.Algebra.BigOperators.Basic.finset.sum
                "∑"
                (Std.ExtendedBinder.extBinders
                 (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
                " in "
                (Term.app
                 (Term.proj (Term.app `range [(«term_-_» `Q.nat_degree "-" `j)]) "." `erase)
                 [(num "0")])
                ", "
                (Algebra.Group.Defs.«term_•_»
                 (Term.app `Q.coeff [(«term_+_» («term_+_» `j "+" (num "1")) "+" `x)])
                 " • "
                 (Term.app `f [(«term_-_» («term_+_» `x "+" `P.nat_degree) "-" (num "1"))])))
               "+"
               (BigOperators.Algebra.BigOperators.Basic.finset.sum
                "∑"
                (Std.ExtendedBinder.extBinders
                 (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
                " in "
                (Term.app `range [(«term_+_» `j "+" (num "1"))])
                ", "
                («term_*_»
                 (Algebra.Group.Defs.«term_•_» (Term.app `g [`x]) " • " («term_^_» `B.gen "^" `x))
                 "*"
                 («term_^_»
                  `B.gen
                  "^"
                  («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2"))))))))]))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.refine'
              "refine'"
              (Term.app
               `is_integral_sub
               [(Term.app
                 `is_integral_mul
                 [`hzint (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])
                (Term.app
                 `is_integral_add
                 [(Term.app
                   `IsIntegral.sum
                   [(Term.hole "_")
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [`k `hk]
                      []
                      "=>"
                      (Term.app `is_integral_smul [(Term.hole "_") (Term.hole "_")])))])
                  (Term.app
                   `IsIntegral.sum
                   [(Term.hole "_")
                    (Term.fun
                     "fun"
                     (Term.basicFun
                      [`k `hk]
                      []
                      "=>"
                      (Term.app
                       `is_integral_mul
                       [(Term.app
                         `is_integral_smul
                         [(Term.hole "_") (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])
                        (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])))])])]))
             []
             (Tactic.refine'
              "refine'"
              (Term.app
               `adjoin_le_integral_closure
               [`hBint
                (Term.proj (Term.app `hf [(Term.hole "_") (Term.hole "_")]) "." (fieldIdx "1"))]))
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule
                 []
                 (Term.app
                  (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map)
                  [(Term.app `algebraMap [`R `L])]))]
               "]")
              [])
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `add_comm)
                ","
                (Tactic.rwRule [] `Nat.add_sub_assoc)
                ","
                (Tactic.rwRule [] `le_add_iff_nonneg_right)]
               "]")
              [])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.exact "exact" (Term.app `zero_le [(Term.hole "_")]))])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.refine'
                "refine'"
                (Term.app
                 (Term.proj `one_le_iff_ne_zero "." (fieldIdx "2"))
                 [(Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))]))
               []
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h)] "]")
                [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
               []
               (Std.Tactic.Simpa.simpa
                "simpa"
                []
                []
                (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hk]))])]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.refine'
           "refine'"
           (Term.app
            `is_integral_sub
            [(Term.app
              `is_integral_mul
              [`hzint (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])
             (Term.app
              `is_integral_add
              [(Term.app
                `IsIntegral.sum
                [(Term.hole "_")
                 (Term.fun
                  "fun"
                  (Term.basicFun
                   [`k `hk]
                   []
                   "=>"
                   (Term.app `is_integral_smul [(Term.hole "_") (Term.hole "_")])))])
               (Term.app
                `IsIntegral.sum
                [(Term.hole "_")
                 (Term.fun
                  "fun"
                  (Term.basicFun
                   [`k `hk]
                   []
                   "=>"
                   (Term.app
                    `is_integral_mul
                    [(Term.app
                      `is_integral_smul
                      [(Term.hole "_") (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])
                     (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])))])])]))
          []
          (Tactic.refine'
           "refine'"
           (Term.app
            `adjoin_le_integral_closure
            [`hBint
             (Term.proj (Term.app `hf [(Term.hole "_") (Term.hole "_")]) "." (fieldIdx "1"))]))
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule
              []
              (Term.app
               (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map)
               [(Term.app `algebraMap [`R `L])]))]
            "]")
           [])
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `add_comm)
             ","
             (Tactic.rwRule [] `Nat.add_sub_assoc)
             ","
             (Tactic.rwRule [] `le_add_iff_nonneg_right)]
            "]")
           [])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.exact "exact" (Term.app `zero_le [(Term.hole "_")]))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.refine'
             "refine'"
             (Term.app
              (Term.proj `one_le_iff_ne_zero "." (fieldIdx "2"))
              [(Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))]))
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h)] "]")
             [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
            []
            (Std.Tactic.Simpa.simpa
             "simpa"
             []
             []
             (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hk]))])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.refine'
         "refine'"
         (Term.app
          (Term.proj `one_le_iff_ne_zero "." (fieldIdx "2"))
          [(Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))]))
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h)] "]")
         [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
        []
        (Std.Tactic.Simpa.simpa
         "simpa"
         []
         []
         (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hk]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Simpa.simpa
       "simpa"
       []
       []
       (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hk]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hk
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h)] "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hk
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        (Term.proj `one_le_iff_ne_zero "." (fieldIdx "2"))
        [(Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `one_le_iff_ne_zero "." (fieldIdx "2"))
       [(Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `one_le_iff_ne_zero "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `one_le_iff_ne_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.exact "exact" (Term.app `zero_le [(Term.hole "_")]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `zero_le [(Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `zero_le [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `zero_le
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `add_comm)
         ","
         (Tactic.rwRule [] `Nat.add_sub_assoc)
         ","
         (Tactic.rwRule [] `le_add_iff_nonneg_right)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `le_add_iff_nonneg_right
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Nat.add_sub_assoc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `add_comm
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule
          []
          (Term.app
           (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map)
           [(Term.app `algebraMap [`R `L])]))]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map)
       [(Term.app `algebraMap [`R `L])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `algebraMap [`R `L])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `L
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `algebraMap
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `algebraMap [`R `L]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `minpoly.monic [`hBint])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hBint
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `minpoly.monic
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `minpoly.monic [`hBint]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `adjoin_le_integral_closure
        [`hBint (Term.proj (Term.app `hf [(Term.hole "_") (Term.hole "_")]) "." (fieldIdx "1"))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `adjoin_le_integral_closure
       [`hBint (Term.proj (Term.app `hf [(Term.hole "_") (Term.hole "_")]) "." (fieldIdx "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `hf [(Term.hole "_") (Term.hole "_")]) "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `hf [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hf
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `hf [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hBint
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `adjoin_le_integral_closure
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `is_integral_sub
        [(Term.app `is_integral_mul [`hzint (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])
         (Term.app
          `is_integral_add
          [(Term.app
            `IsIntegral.sum
            [(Term.hole "_")
             (Term.fun
              "fun"
              (Term.basicFun
               [`k `hk]
               []
               "=>"
               (Term.app `is_integral_smul [(Term.hole "_") (Term.hole "_")])))])
           (Term.app
            `IsIntegral.sum
            [(Term.hole "_")
             (Term.fun
              "fun"
              (Term.basicFun
               [`k `hk]
               []
               "=>"
               (Term.app
                `is_integral_mul
                [(Term.app
                  `is_integral_smul
                  [(Term.hole "_") (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])
                 (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])))])])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `is_integral_sub
       [(Term.app `is_integral_mul [`hzint (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])
        (Term.app
         `is_integral_add
         [(Term.app
           `IsIntegral.sum
           [(Term.hole "_")
            (Term.fun
             "fun"
             (Term.basicFun
              [`k `hk]
              []
              "=>"
              (Term.app `is_integral_smul [(Term.hole "_") (Term.hole "_")])))])
          (Term.app
           `IsIntegral.sum
           [(Term.hole "_")
            (Term.fun
             "fun"
             (Term.basicFun
              [`k `hk]
              []
              "=>"
              (Term.app
               `is_integral_mul
               [(Term.app
                 `is_integral_smul
                 [(Term.hole "_") (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])
                (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])))])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `is_integral_add
       [(Term.app
         `IsIntegral.sum
         [(Term.hole "_")
          (Term.fun
           "fun"
           (Term.basicFun
            [`k `hk]
            []
            "=>"
            (Term.app `is_integral_smul [(Term.hole "_") (Term.hole "_")])))])
        (Term.app
         `IsIntegral.sum
         [(Term.hole "_")
          (Term.fun
           "fun"
           (Term.basicFun
            [`k `hk]
            []
            "=>"
            (Term.app
             `is_integral_mul
             [(Term.app
               `is_integral_smul
               [(Term.hole "_") (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])
              (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `IsIntegral.sum
       [(Term.hole "_")
        (Term.fun
         "fun"
         (Term.basicFun
          [`k `hk]
          []
          "=>"
          (Term.app
           `is_integral_mul
           [(Term.app
             `is_integral_smul
             [(Term.hole "_") (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])
            (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`k `hk]
        []
        "=>"
        (Term.app
         `is_integral_mul
         [(Term.app
           `is_integral_smul
           [(Term.hole "_") (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])
          (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `is_integral_mul
       [(Term.app
         `is_integral_smul
         [(Term.hole "_") (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])
        (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `hBint
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `IsIntegral.pow
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `is_integral_smul
       [(Term.hole "_") (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `hBint
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `IsIntegral.pow
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `is_integral_smul
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `is_integral_smul
      [(Term.hole "_") (Term.paren "(" (Term.app `IsIntegral.pow [`hBint (Term.hole "_")]) ")")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `is_integral_mul
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hk
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `IsIntegral.sum
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `IsIntegral.sum
      [(Term.hole "_")
       (Term.fun
        "fun"
        (Term.basicFun
         [`k `hk]
         []
         "=>"
         (Term.app
          `is_integral_mul
          [(Term.paren
            "("
            (Term.app
             `is_integral_smul
             [(Term.hole "_")
              (Term.paren "(" (Term.app `IsIntegral.pow [`hBint (Term.hole "_")]) ")")])
            ")")
           (Term.paren "(" (Term.app `IsIntegral.pow [`hBint (Term.hole "_")]) ")")])))])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `IsIntegral.sum
       [(Term.hole "_")
        (Term.fun
         "fun"
         (Term.basicFun
          [`k `hk]
          []
          "=>"
          (Term.app `is_integral_smul [(Term.hole "_") (Term.hole "_")])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`k `hk]
        []
        "=>"
        (Term.app `is_integral_smul [(Term.hole "_") (Term.hole "_")])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `is_integral_smul [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `is_integral_smul
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hk
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `IsIntegral.sum
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `IsIntegral.sum
      [(Term.hole "_")
       (Term.fun
        "fun"
        (Term.basicFun
         [`k `hk]
         []
         "=>"
         (Term.app `is_integral_smul [(Term.hole "_") (Term.hole "_")])))])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `is_integral_add
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `is_integral_add
      [(Term.paren
        "("
        (Term.app
         `IsIntegral.sum
         [(Term.hole "_")
          (Term.fun
           "fun"
           (Term.basicFun
            [`k `hk]
            []
            "=>"
            (Term.app `is_integral_smul [(Term.hole "_") (Term.hole "_")])))])
        ")")
       (Term.paren
        "("
        (Term.app
         `IsIntegral.sum
         [(Term.hole "_")
          (Term.fun
           "fun"
           (Term.basicFun
            [`k `hk]
            []
            "=>"
            (Term.app
             `is_integral_mul
             [(Term.paren
               "("
               (Term.app
                `is_integral_smul
                [(Term.hole "_")
                 (Term.paren "(" (Term.app `IsIntegral.pow [`hBint (Term.hole "_")]) ")")])
               ")")
              (Term.paren "(" (Term.app `IsIntegral.pow [`hBint (Term.hole "_")]) ")")])))])
        ")")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `is_integral_mul [`hzint (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `hBint
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `IsIntegral.pow
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `IsIntegral.pow [`hBint (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hzint
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `is_integral_mul
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `is_integral_mul
      [`hzint (Term.paren "(" (Term.app `IsIntegral.pow [`hBint (Term.hole "_")]) ")")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `is_integral_sub
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `IsIntegral
       [`R
        («term_-_»
         («term_*_»
          `z
          "*"
          («term_^_» `B.gen "^" («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))
         "-"
         («term_+_»
          (BigOperators.Algebra.BigOperators.Basic.finset.sum
           "∑"
           (Std.ExtendedBinder.extBinders
            (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
           " in "
           (Term.app
            (Term.proj (Term.app `range [(«term_-_» `Q.nat_degree "-" `j)]) "." `erase)
            [(num "0")])
           ", "
           (Algebra.Group.Defs.«term_•_»
            (Term.app `Q.coeff [(«term_+_» («term_+_» `j "+" (num "1")) "+" `x)])
            " • "
            (Term.app `f [(«term_-_» («term_+_» `x "+" `P.nat_degree) "-" (num "1"))])))
          "+"
          (BigOperators.Algebra.BigOperators.Basic.finset.sum
           "∑"
           (Std.ExtendedBinder.extBinders
            (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
           " in "
           (Term.app `range [(«term_+_» `j "+" (num "1"))])
           ", "
           («term_*_»
            (Algebra.Group.Defs.«term_•_» (Term.app `g [`x]) " • " («term_^_» `B.gen "^" `x))
            "*"
            («term_^_» `B.gen "^" («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2"))))))))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_-_»
       («term_*_»
        `z
        "*"
        («term_^_» `B.gen "^" («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))
       "-"
       («term_+_»
        (BigOperators.Algebra.BigOperators.Basic.finset.sum
         "∑"
         (Std.ExtendedBinder.extBinders
          (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
         " in "
         (Term.app
          (Term.proj (Term.app `range [(«term_-_» `Q.nat_degree "-" `j)]) "." `erase)
          [(num "0")])
         ", "
         (Algebra.Group.Defs.«term_•_»
          (Term.app `Q.coeff [(«term_+_» («term_+_» `j "+" (num "1")) "+" `x)])
          " • "
          (Term.app `f [(«term_-_» («term_+_» `x "+" `P.nat_degree) "-" (num "1"))])))
        "+"
        (BigOperators.Algebra.BigOperators.Basic.finset.sum
         "∑"
         (Std.ExtendedBinder.extBinders
          (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
         " in "
         (Term.app `range [(«term_+_» `j "+" (num "1"))])
         ", "
         («term_*_»
          (Algebra.Group.Defs.«term_•_» (Term.app `g [`x]) " • " («term_^_» `B.gen "^" `x))
          "*"
          («term_^_» `B.gen "^" («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2"))))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_»
       (BigOperators.Algebra.BigOperators.Basic.finset.sum
        "∑"
        (Std.ExtendedBinder.extBinders
         (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
        " in "
        (Term.app
         (Term.proj (Term.app `range [(«term_-_» `Q.nat_degree "-" `j)]) "." `erase)
         [(num "0")])
        ", "
        (Algebra.Group.Defs.«term_•_»
         (Term.app `Q.coeff [(«term_+_» («term_+_» `j "+" (num "1")) "+" `x)])
         " • "
         (Term.app `f [(«term_-_» («term_+_» `x "+" `P.nat_degree) "-" (num "1"))])))
       "+"
       (BigOperators.Algebra.BigOperators.Basic.finset.sum
        "∑"
        (Std.ExtendedBinder.extBinders
         (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
        " in "
        (Term.app `range [(«term_+_» `j "+" (num "1"))])
        ", "
        («term_*_»
         (Algebra.Group.Defs.«term_•_» (Term.app `g [`x]) " • " («term_^_» `B.gen "^" `x))
         "*"
         («term_^_» `B.gen "^" («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (BigOperators.Algebra.BigOperators.Basic.finset.sum
       "∑"
       (Std.ExtendedBinder.extBinders
        (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
       " in "
       (Term.app `range [(«term_+_» `j "+" (num "1"))])
       ", "
       («term_*_»
        (Algebra.Group.Defs.«term_•_» (Term.app `g [`x]) " • " («term_^_» `B.gen "^" `x))
        "*"
        («term_^_» `B.gen "^" («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2"))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_»
       (Algebra.Group.Defs.«term_•_» (Term.app `g [`x]) " • " («term_^_» `B.gen "^" `x))
       "*"
       («term_^_» `B.gen "^" («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» `B.gen "^" («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `j "+" (num "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `j
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_+_» `j "+" (num "2")) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `P.nat_degree
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 80 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_-_» `P.nat_degree "-" (Term.paren "(" («term_+_» `j "+" (num "2")) ")"))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Algebra.Group.Defs.«term_•_» (Term.app `g [`x]) " • " («term_^_» `B.gen "^" `x))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» `B.gen "^" `x)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      (Term.app `g [`x])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `g
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1022, (some 1023, term) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 73, (some 73, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `range [(«term_+_» `j "+" (num "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `j "+" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `j
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_+_» `j "+" (num "1")) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `range
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (termℕ "ℕ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (BigOperators.Algebra.BigOperators.Basic.finset.sum
       "∑"
       (Std.ExtendedBinder.extBinders
        (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
       " in "
       (Term.app
        (Term.proj (Term.app `range [(«term_-_» `Q.nat_degree "-" `j)]) "." `erase)
        [(num "0")])
       ", "
       (Algebra.Group.Defs.«term_•_»
        (Term.app `Q.coeff [(«term_+_» («term_+_» `j "+" (num "1")) "+" `x)])
        " • "
        (Term.app `f [(«term_-_» («term_+_» `x "+" `P.nat_degree) "-" (num "1"))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Algebra.Group.Defs.«term_•_»
       (Term.app `Q.coeff [(«term_+_» («term_+_» `j "+" (num "1")) "+" `x)])
       " • "
       (Term.app `f [(«term_-_» («term_+_» `x "+" `P.nat_degree) "-" (num "1"))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [(«term_-_» («term_+_» `x "+" `P.nat_degree) "-" (num "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_-_» («term_+_» `x "+" `P.nat_degree) "-" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      («term_+_» `x "+" `P.nat_degree)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `P.nat_degree
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 65, (some 66, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_-_» («term_+_» `x "+" `P.nat_degree) "-" (num "1"))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      (Term.app `Q.coeff [(«term_+_» («term_+_» `j "+" (num "1")) "+" `x)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» («term_+_» `j "+" (num "1")) "+" `x)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      («term_+_» `j "+" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `j
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 65, (some 66, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_+_» («term_+_» `j "+" (num "1")) "+" `x)
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Q.coeff
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1022, (some 1023, term) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `range [(«term_-_» `Q.nat_degree "-" `j)]) "." `erase)
       [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `range [(«term_-_» `Q.nat_degree "-" `j)]) "." `erase)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `range [(«term_-_» `Q.nat_degree "-" `j)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_-_» `Q.nat_degree "-" `j)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `j
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `Q.nat_degree
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_-_» `Q.nat_degree "-" `j) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `range
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `range [(Term.paren "(" («term_-_» `Q.nat_degree "-" `j) ")")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (termℕ "ℕ")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1022, (some 0, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (BigOperators.Algebra.BigOperators.Basic.finset.sum
      "∑"
      (Std.ExtendedBinder.extBinders
       (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
      " in "
      (Term.app
       (Term.proj
        (Term.paren
         "("
         (Term.app `range [(Term.paren "(" («term_-_» `Q.nat_degree "-" `j) ")")])
         ")")
        "."
        `erase)
       [(num "0")])
      ", "
      (Algebra.Group.Defs.«term_•_»
       (Term.app `Q.coeff [(Term.paren "(" («term_+_» («term_+_» `j "+" (num "1")) "+" `x) ")")])
       " • "
       (Term.app
        `f
        [(Term.paren "(" («term_-_» («term_+_» `x "+" `P.nat_degree) "-" (num "1")) ")")])))
     ")")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 65, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_+_»
      (Term.paren
       "("
       (BigOperators.Algebra.BigOperators.Basic.finset.sum
        "∑"
        (Std.ExtendedBinder.extBinders
         (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
        " in "
        (Term.app
         (Term.proj
          (Term.paren
           "("
           (Term.app `range [(Term.paren "(" («term_-_» `Q.nat_degree "-" `j) ")")])
           ")")
          "."
          `erase)
         [(num "0")])
        ", "
        (Algebra.Group.Defs.«term_•_»
         (Term.app `Q.coeff [(Term.paren "(" («term_+_» («term_+_» `j "+" (num "1")) "+" `x) ")")])
         " • "
         (Term.app
          `f
          [(Term.paren "(" («term_-_» («term_+_» `x "+" `P.nat_degree) "-" (num "1")) ")")])))
       ")")
      "+"
      (BigOperators.Algebra.BigOperators.Basic.finset.sum
       "∑"
       (Std.ExtendedBinder.extBinders
        (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
       " in "
       (Term.app `range [(Term.paren "(" («term_+_» `j "+" (num "1")) ")")])
       ", "
       («term_*_»
        (Algebra.Group.Defs.«term_•_» (Term.app `g [`x]) " • " («term_^_» `B.gen "^" `x))
        "*"
        («term_^_»
         `B.gen
         "^"
         (Term.paren
          "("
          («term_-_» `P.nat_degree "-" (Term.paren "(" («term_+_» `j "+" (num "2")) ")"))
          ")")))))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      («term_*_»
       `z
       "*"
       («term_^_» `B.gen "^" («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» `B.gen "^" («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `j "+" (num "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `j
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_+_» `j "+" (num "2")) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `P.nat_degree
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 80 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_-_» `P.nat_degree "-" (Term.paren "(" («term_+_» `j "+" (num "2")) ")"))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 70, (some 71, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_-_»
      («term_*_»
       `z
       "*"
       («term_^_»
        `B.gen
        "^"
        (Term.paren
         "("
         («term_-_» `P.nat_degree "-" (Term.paren "(" («term_+_» `j "+" (num "2")) ")"))
         ")")))
      "-"
      (Term.paren
       "("
       («term_+_»
        (Term.paren
         "("
         (BigOperators.Algebra.BigOperators.Basic.finset.sum
          "∑"
          (Std.ExtendedBinder.extBinders
           (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
          " in "
          (Term.app
           (Term.proj
            (Term.paren
             "("
             (Term.app `range [(Term.paren "(" («term_-_» `Q.nat_degree "-" `j) ")")])
             ")")
            "."
            `erase)
           [(num "0")])
          ", "
          (Algebra.Group.Defs.«term_•_»
           (Term.app
            `Q.coeff
            [(Term.paren "(" («term_+_» («term_+_» `j "+" (num "1")) "+" `x) ")")])
           " • "
           (Term.app
            `f
            [(Term.paren "(" («term_-_» («term_+_» `x "+" `P.nat_degree) "-" (num "1")) ")")])))
         ")")
        "+"
        (BigOperators.Algebra.BigOperators.Basic.finset.sum
         "∑"
         (Std.ExtendedBinder.extBinders
          (Std.ExtendedBinder.extBinder (Lean.binderIdent `x) [(group ":" (termℕ "ℕ"))]))
         " in "
         (Term.app `range [(Term.paren "(" («term_+_» `j "+" (num "1")) ")")])
         ", "
         («term_*_»
          (Algebra.Group.Defs.«term_•_» (Term.app `g [`x]) " • " («term_^_» `B.gen "^" `x))
          "*"
          («term_^_»
           `B.gen
           "^"
           (Term.paren
            "("
            («term_-_» `P.nat_degree "-" (Term.paren "(" («term_+_» `j "+" (num "2")) ")"))
            ")")))))
       ")"))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `IsIntegral
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.tacticReplace_
       "replace"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hQ []]
         []
         ":="
         (Term.app `congr_arg [(Term.app `norm [`K]) (Term.app `eq_sub_of_add_eq [`hQ])]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `congr_arg [(Term.app `norm [`K]) (Term.app `eq_sub_of_add_eq [`hQ])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `eq_sub_of_add_eq [`hQ])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hQ
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `eq_sub_of_add_eq
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `eq_sub_of_add_eq [`hQ]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `norm [`K])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `norm
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `norm [`K]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `congr_arg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule
          [(patternIgnore (token.«← » "←"))]
          (Term.app
           `insert_erase
           [(Term.app
             (Term.proj `mem_range "." (fieldIdx "2"))
             [(«term_<|_»
               (Term.proj `tsub_pos_iff_lt "." (fieldIdx "2"))
               "<|"
               («term_<|_»
                `Nat.lt_of_succ_lt_succ
                "<|"
                (Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])))])]))
         ","
         (Tactic.rwRule
          []
          (Term.app `sum_insert [(Term.app `not_mem_erase [(num "0") (Term.hole "_")])]))
         ","
         (Tactic.rwRule [] `add_zero)
         ","
         (Tactic.rwRule [] (Term.app `sum_congr [`rfl `hf₁]))
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `mul_sum)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `mul_sum)
         ","
         (Tactic.rwRule [] `add_assoc)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `mul_add)
         ","
         (Tactic.rwRule [] `smul_mul_assoc)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `pow_add)
         ","
         (Tactic.rwRule [] `Algebra.smul_def)]
        "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hQ] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hQ
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Algebra.smul_def
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `pow_add
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `smul_mul_assoc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_add
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `add_assoc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_sum
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_sum
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `sum_congr [`rfl `hf₁])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hf₁
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `rfl
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `sum_congr
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `add_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `sum_insert [(Term.app `not_mem_erase [(num "0") (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `not_mem_erase [(num "0") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `not_mem_erase
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `not_mem_erase [(num "0") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `sum_insert
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `insert_erase
       [(Term.app
         (Term.proj `mem_range "." (fieldIdx "2"))
         [(«term_<|_»
           (Term.proj `tsub_pos_iff_lt "." (fieldIdx "2"))
           "<|"
           («term_<|_»
            `Nat.lt_of_succ_lt_succ
            "<|"
            (Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])))])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `mem_range "." (fieldIdx "2"))
       [(«term_<|_»
         (Term.proj `tsub_pos_iff_lt "." (fieldIdx "2"))
         "<|"
         («term_<|_»
          `Nat.lt_of_succ_lt_succ
          "<|"
          (Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_<|_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_»
       (Term.proj `tsub_pos_iff_lt "." (fieldIdx "2"))
       "<|"
       («term_<|_»
        `Nat.lt_of_succ_lt_succ
        "<|"
        (Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_<|_»
       `Nat.lt_of_succ_lt_succ
       "<|"
       (Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hj
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `mem_range "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `mem_range
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      `Nat.lt_of_succ_lt_succ
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 10 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 10, term))
      (Term.proj `tsub_pos_iff_lt "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `tsub_pos_iff_lt
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 10, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 10, (some 10, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_<|_»
      (Term.proj `tsub_pos_iff_lt "." (fieldIdx "2"))
      "<|"
      («term_<|_»
       `Nat.lt_of_succ_lt_succ
       "<|"
       (Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `mem_range "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `mem_range
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj `mem_range "." (fieldIdx "2"))
      [(Term.paren
        "("
        («term_<|_»
         (Term.proj `tsub_pos_iff_lt "." (fieldIdx "2"))
         "<|"
         («term_<|_»
          `Nat.lt_of_succ_lt_succ
          "<|"
          (Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])))
        ")")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `insert_erase
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.tacticSimp_rw__
       "simp_rw"
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `sum_map)
         ","
         (Tactic.rwRule [] `add_left_embedding_apply)
         ","
         (Tactic.rwRule [] `add_mul)
         ","
         (Tactic.rwRule [] `sum_mul)
         ","
         (Tactic.rwRule [] `mul_assoc)]
        "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hQ] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hQ
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_assoc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `sum_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `add_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `add_left_embedding_apply
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `sum_map
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.tacticReplace_
       "replace"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hQ []]
         []
         ":="
         (Term.app
          `congr_arg
          [(Term.fun
            "fun"
            (Term.basicFun
             [`x]
             []
             "=>"
             («term_*_»
              `x
              "*"
              («term_^_» `B.gen "^" («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))))
           `hQ]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `congr_arg
       [(Term.fun
         "fun"
         (Term.basicFun
          [`x]
          []
          "=>"
          («term_*_»
           `x
           "*"
           («term_^_» `B.gen "^" («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))))
        `hQ])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hQ
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun
       "fun"
       (Term.basicFun
        [`x]
        []
        "=>"
        («term_*_»
         `x
         "*"
         («term_^_» `B.gen "^" («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_»
       `x
       "*"
       («term_^_» `B.gen "^" («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» `B.gen "^" («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `j "+" (num "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `j
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_+_» `j "+" (num "2")) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `P.nat_degree
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 80 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_-_» `P.nat_degree "-" (Term.paren "(" («term_+_» `j "+" (num "2")) ")"))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `x
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `x
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun
      "fun"
      (Term.basicFun
       [`x]
       []
       "=>"
       («term_*_»
        `x
        "*"
        («term_^_»
         `B.gen
         "^"
         (Term.paren
          "("
          («term_-_» `P.nat_degree "-" (Term.paren "(" («term_+_» `j "+" (num "2")) ")"))
          ")")))))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `congr_arg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `aeval_eq_sum_range)
         ","
         (Tactic.rwRule [] `Hj)
         ","
         (Tactic.rwRule [] `range_add)
         ","
         (Tactic.rwRule
          []
          (Term.app
           `sum_union
           [(Term.app `disjoint_range_add_left_embedding [(Term.hole "_") (Term.hole "_")])]))
         ","
         (Tactic.rwRule [] (Term.app `sum_congr [`rfl `hg]))
         ","
         (Tactic.rwRule [] `add_comm)]
        "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hQ] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hQ
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `add_comm
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `sum_congr [`rfl `hg])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hg
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `rfl
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `sum_congr
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `sum_union
       [(Term.app `disjoint_range_add_left_embedding [(Term.hole "_") (Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `disjoint_range_add_left_embedding [(Term.hole "_") (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `disjoint_range_add_left_embedding
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `disjoint_range_add_left_embedding [(Term.hole "_") (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `sum_union
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `range_add
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Hj
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `aeval_eq_sum_range
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticSuffices_
       "suffices"
       (Term.sufficesDecl
        []
        («term_∣_»
         («term_^_» `p "^" `n.succ)
         "∣"
         («term_*_»
          («term_^_» (Term.app `Q.coeff [(Term.app `succ [`j])]) "^" `n.succ)
          "*"
          («term_^_»
           (Term.app (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff) [(num "0")])
           "^"
           («term_+_»
            (Term.app `succ [`j])
            "+"
            («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))))
        (Term.byTactic'
         "by"
         (Tactic.tacticSeq
          (Tactic.tacticSeq1Indented
           [(convert "convert" [] `this [])
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `Nat.succ_eq_add_one)
               ","
               (Tactic.rwRule [] `add_assoc)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] (Term.app `Nat.add_sub_assoc [`H]))
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `add_assoc)
               ","
               (Tactic.rwRule [] (Term.app `add_comm [(«term_+_» `j "+" (num "1"))]))
               ","
               (Tactic.rwRule [] `Nat.add_sub_add_left)
               ","
               (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Nat.add_sub_assoc)
               ","
               (Tactic.rwRule [] `Nat.add_sub_add_left)
               ","
               (Tactic.rwRule [] `hP)
               ","
               (Tactic.rwRule
                [(patternIgnore (token.«← » "←"))]
                (Term.app
                 (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map)
                 [(Term.app `algebraMap [`R `K])]))
               ","
               (Tactic.rwRule
                [(patternIgnore (token.«← » "←"))]
                (Term.app `minpoly.gcd_domain_eq_field_fractions' [`K `hBint]))
               ","
               (Tactic.rwRule [] `nat_degree_minpoly)
               ","
               (Tactic.rwRule [] `hn)
               ","
               (Tactic.rwRule [] `Nat.sub_one)
               ","
               (Tactic.rwRule [] `Nat.pred_succ)]
              "]")
             [])
            []
            (linarith "linarith" [] (linarithArgsRest [] [] []))])))))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.byTactic'', expected 'Lean.Parser.Term.fromTerm'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (linarith "linarith" [] (linarithArgsRest [] [] []))
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `Nat.succ_eq_add_one)
         ","
         (Tactic.rwRule [] `add_assoc)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] (Term.app `Nat.add_sub_assoc [`H]))
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `add_assoc)
         ","
         (Tactic.rwRule [] (Term.app `add_comm [(«term_+_» `j "+" (num "1"))]))
         ","
         (Tactic.rwRule [] `Nat.add_sub_add_left)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `Nat.add_sub_assoc)
         ","
         (Tactic.rwRule [] `Nat.add_sub_add_left)
         ","
         (Tactic.rwRule [] `hP)
         ","
         (Tactic.rwRule
          [(patternIgnore (token.«← » "←"))]
          (Term.app
           (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map)
           [(Term.app `algebraMap [`R `K])]))
         ","
         (Tactic.rwRule
          [(patternIgnore (token.«← » "←"))]
          (Term.app `minpoly.gcd_domain_eq_field_fractions' [`K `hBint]))
         ","
         (Tactic.rwRule [] `nat_degree_minpoly)
         ","
         (Tactic.rwRule [] `hn)
         ","
         (Tactic.rwRule [] `Nat.sub_one)
         ","
         (Tactic.rwRule [] `Nat.pred_succ)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Nat.pred_succ
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Nat.sub_one
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hn
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `nat_degree_minpoly
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `minpoly.gcd_domain_eq_field_fractions' [`K `hBint])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hBint
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `minpoly.gcd_domain_eq_field_fractions'
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map)
       [(Term.app `algebraMap [`R `K])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `algebraMap [`R `K])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `algebraMap
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `algebraMap [`R `K]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `minpoly.monic [`hBint])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hBint
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `minpoly.monic
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `minpoly.monic [`hBint]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hP
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Nat.add_sub_add_left
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Nat.add_sub_assoc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Nat.add_sub_add_left
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `add_comm [(«term_+_» `j "+" (num "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `j "+" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `j
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_+_» `j "+" (num "1")) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `add_comm
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `add_assoc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Nat.add_sub_assoc [`H])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `H
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Nat.add_sub_assoc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `add_assoc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Nat.succ_eq_add_one
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (convert "convert" [] `this [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `this
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      («term_∣_»
       («term_^_» `p "^" `n.succ)
       "∣"
       («term_*_»
        («term_^_» (Term.app `Q.coeff [(Term.app `succ [`j])]) "^" `n.succ)
        "*"
        («term_^_»
         (Term.app (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff) [(num "0")])
         "^"
         («term_+_»
          (Term.app `succ [`j])
          "+"
          («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_»
       («term_^_» (Term.app `Q.coeff [(Term.app `succ [`j])]) "^" `n.succ)
       "*"
       («term_^_»
        (Term.app (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff) [(num "0")])
        "^"
        («term_+_»
         (Term.app `succ [`j])
         "+"
         («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2"))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_»
       (Term.app (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff) [(num "0")])
       "^"
       («term_+_»
        (Term.app `succ [`j])
        "+"
        («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_»
       (Term.app `succ [`j])
       "+"
       («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `j "+" (num "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `j
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_+_» `j "+" (num "2")) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `P.nat_degree
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_-_» `P.nat_degree "-" (Term.paren "(" («term_+_» `j "+" (num "2")) ")"))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      (Term.app `succ [`j])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `j
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `succ
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1022, (some 1023, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 80 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_+_»
      (Term.app `succ [`j])
      "+"
      (Term.paren
       "("
       («term_-_» `P.nat_degree "-" (Term.paren "(" («term_+_» `j "+" (num "2")) ")"))
       ")"))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Term.app (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff) [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `minpoly [`R `B.gen])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `minpoly
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `minpoly [`R `B.gen]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      («term_^_» (Term.app `Q.coeff [(Term.app `succ [`j])]) "^" `n.succ)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n.succ
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      (Term.app `Q.coeff [(Term.app `succ [`j])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `succ [`j])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `j
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `succ
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `succ [`j]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Q.coeff
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1022, (some 1023, term) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 80, (some 80, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      («term_^_» `p "^" `n.succ)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n.succ
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `p
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 80, (some 80, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hf₁ []]
         [(Term.typeSpec
           ":"
           (Std.ExtendedBinder.«term∀__,_»
            "∀"
            (Lean.binderIdent `k)
            («binderTerm∈_»
             "∈"
             (Term.app
              (Term.proj (Term.app `range [(«term_-_» `Q.nat_degree "-" `j)]) "." `erase)
              [(num "0")]))
            ","
            («term_=_»
             («term_*_»
              (Algebra.Group.Defs.«term_•_»
               (Term.app `Q.coeff [(«term_+_» («term_+_» `j "+" (num "1")) "+" `k)])
               " • "
               («term_^_» `B.gen "^" («term_+_» («term_+_» `j "+" (num "1")) "+" `k)))
              "*"
              («term_^_» `B.gen "^" («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))
             "="
             («term_*_»
              (Term.app (Term.app `algebraMap [`R `L]) [`p])
              "*"
              (Algebra.Group.Defs.«term_•_»
               (Term.app `Q.coeff [(«term_+_» («term_+_» `j "+" (num "1")) "+" `k)])
               " • "
               (Term.app `f [(«term_-_» («term_+_» `k "+" `P.nat_degree) "-" (num "1"))]))))))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.intro "intro" [`k `hk])
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `smul_mul_assoc)
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `pow_add)
                ","
                (Tactic.rwRule
                 [(patternIgnore (token.«← » "←"))]
                 (Term.app `Nat.add_sub_assoc [`H]))
                ","
                (Tactic.rwRule
                 [(patternIgnore (token.«← » "←"))]
                 (Term.app `add_assoc [`j (num "1") (num "1")]))
                ","
                (Tactic.rwRule [] (Term.app `add_comm [(«term_+_» `j "+" (num "1")) (num "1")]))
                ","
                (Tactic.rwRule [] (Term.app `add_assoc [(«term_+_» `j "+" (num "1"))]))
                ","
                (Tactic.rwRule
                 []
                 (Term.app `add_comm [(Term.hole "_") («term_+_» `k "+" `P.nat_degree)]))
                ","
                (Tactic.rwRule [] `Nat.add_sub_add_right)
                ","
                (Tactic.rwRule
                 [(patternIgnore (token.«← » "←"))]
                 (Term.proj
                  (Term.app
                   `hf
                   [(«term_-_» («term_+_» `k "+" `P.nat_degree) "-" (num "1")) (Term.hole "_")])
                  "."
                  (fieldIdx "2")))
                ","
                (Tactic.rwRule [] `mul_smul_comm)]
               "]")
              [])
             []
             (Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule
                 []
                 (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map))
                ","
                (Tactic.rwRule [] `add_comm)
                ","
                (Tactic.rwRule [] `Nat.add_sub_assoc)
                ","
                (Tactic.rwRule [] `le_add_iff_nonneg_right)]
               "]")
              [])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.exact "exact" (Term.app `Nat.zero_le [(Term.hole "_")]))])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.refine'
                "refine'"
                (Term.app
                 (Term.proj `one_le_iff_ne_zero "." (fieldIdx "2"))
                 [(Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))]))
               []
               (Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h)] "]")
                [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
               []
               (Std.Tactic.Simpa.simpa
                "simpa"
                []
                []
                (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hk]))])
             []
             (tactic__
              (cdotTk (patternIgnore (token.«· » "·")))
              [(Tactic.tacticInfer_instance "infer_instance")])]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.intro "intro" [`k `hk])
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] `smul_mul_assoc)
             ","
             (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `pow_add)
             ","
             (Tactic.rwRule [(patternIgnore (token.«← » "←"))] (Term.app `Nat.add_sub_assoc [`H]))
             ","
             (Tactic.rwRule
              [(patternIgnore (token.«← » "←"))]
              (Term.app `add_assoc [`j (num "1") (num "1")]))
             ","
             (Tactic.rwRule [] (Term.app `add_comm [(«term_+_» `j "+" (num "1")) (num "1")]))
             ","
             (Tactic.rwRule [] (Term.app `add_assoc [(«term_+_» `j "+" (num "1"))]))
             ","
             (Tactic.rwRule
              []
              (Term.app `add_comm [(Term.hole "_") («term_+_» `k "+" `P.nat_degree)]))
             ","
             (Tactic.rwRule [] `Nat.add_sub_add_right)
             ","
             (Tactic.rwRule
              [(patternIgnore (token.«← » "←"))]
              (Term.proj
               (Term.app
                `hf
                [(«term_-_» («term_+_» `k "+" `P.nat_degree) "-" (num "1")) (Term.hole "_")])
               "."
               (fieldIdx "2")))
             ","
             (Tactic.rwRule [] `mul_smul_comm)]
            "]")
           [])
          []
          (Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [] (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map))
             ","
             (Tactic.rwRule [] `add_comm)
             ","
             (Tactic.rwRule [] `Nat.add_sub_assoc)
             ","
             (Tactic.rwRule [] `le_add_iff_nonneg_right)]
            "]")
           [])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.exact "exact" (Term.app `Nat.zero_le [(Term.hole "_")]))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.refine'
             "refine'"
             (Term.app
              (Term.proj `one_le_iff_ne_zero "." (fieldIdx "2"))
              [(Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))]))
            []
            (Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h)] "]")
             [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
            []
            (Std.Tactic.Simpa.simpa
             "simpa"
             []
             []
             (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hk]))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.tacticInfer_instance "infer_instance")])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.tacticInfer_instance "infer_instance")])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticInfer_instance "infer_instance")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.refine'
         "refine'"
         (Term.app
          (Term.proj `one_le_iff_ne_zero "." (fieldIdx "2"))
          [(Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))]))
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h)] "]")
         [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
        []
        (Std.Tactic.Simpa.simpa
         "simpa"
         []
         []
         (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hk]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Simpa.simpa
       "simpa"
       []
       []
       (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hk]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hk
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `h)] "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hk] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hk
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        (Term.proj `one_le_iff_ne_zero "." (fieldIdx "2"))
        [(Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `one_le_iff_ne_zero "." (fieldIdx "2"))
       [(Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [`h] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `one_le_iff_ne_zero "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `one_le_iff_ne_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.exact "exact" (Term.app `Nat.zero_le [(Term.hole "_")]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `Nat.zero_le [(Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Nat.zero_le [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Nat.zero_le
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map))
         ","
         (Tactic.rwRule [] `add_comm)
         ","
         (Tactic.rwRule [] `Nat.add_sub_assoc)
         ","
         (Tactic.rwRule [] `le_add_iff_nonneg_right)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `le_add_iff_nonneg_right
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Nat.add_sub_assoc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `add_comm
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj (Term.app `minpoly.monic [`hBint]) "." `nat_degree_map)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `minpoly.monic [`hBint])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hBint
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `minpoly.monic
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `minpoly.monic [`hBint]) ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [] `smul_mul_assoc)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `pow_add)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] (Term.app `Nat.add_sub_assoc [`H]))
         ","
         (Tactic.rwRule
          [(patternIgnore (token.«← » "←"))]
          (Term.app `add_assoc [`j (num "1") (num "1")]))
         ","
         (Tactic.rwRule [] (Term.app `add_comm [(«term_+_» `j "+" (num "1")) (num "1")]))
         ","
         (Tactic.rwRule [] (Term.app `add_assoc [(«term_+_» `j "+" (num "1"))]))
         ","
         (Tactic.rwRule [] (Term.app `add_comm [(Term.hole "_") («term_+_» `k "+" `P.nat_degree)]))
         ","
         (Tactic.rwRule [] `Nat.add_sub_add_right)
         ","
         (Tactic.rwRule
          [(patternIgnore (token.«← » "←"))]
          (Term.proj
           (Term.app
            `hf
            [(«term_-_» («term_+_» `k "+" `P.nat_degree) "-" (num "1")) (Term.hole "_")])
           "."
           (fieldIdx "2")))
         ","
         (Tactic.rwRule [] `mul_smul_comm)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_smul_comm
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj
       (Term.app `hf [(«term_-_» («term_+_» `k "+" `P.nat_degree) "-" (num "1")) (Term.hole "_")])
       "."
       (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `hf [(«term_-_» («term_+_» `k "+" `P.nat_degree) "-" (num "1")) (Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      («term_-_» («term_+_» `k "+" `P.nat_degree) "-" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      («term_+_» `k "+" `P.nat_degree)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `P.nat_degree
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `k
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 65, (some 66, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_-_» («term_+_» `k "+" `P.nat_degree) "-" (num "1"))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hf
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `hf
      [(Term.paren "(" («term_-_» («term_+_» `k "+" `P.nat_degree) "-" (num "1")) ")")
       (Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Nat.add_sub_add_right
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `add_comm [(Term.hole "_") («term_+_» `k "+" `P.nat_degree)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `k "+" `P.nat_degree)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `P.nat_degree
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `k
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_+_» `k "+" `P.nat_degree) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `add_comm
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `add_assoc [(«term_+_» `j "+" (num "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `j "+" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `j
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_+_» `j "+" (num "1")) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `add_assoc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `add_comm [(«term_+_» `j "+" (num "1")) (num "1")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      («term_+_» `j "+" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `j
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_+_» `j "+" (num "1")) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `add_comm
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `add_assoc [`j (num "1") (num "1")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `j
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `add_assoc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Nat.add_sub_assoc [`H])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `H
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Nat.add_sub_assoc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `pow_add
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `smul_mul_assoc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`k `hk])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hk
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.«term∀__,_»
       "∀"
       (Lean.binderIdent `k)
       («binderTerm∈_»
        "∈"
        (Term.app
         (Term.proj (Term.app `range [(«term_-_» `Q.nat_degree "-" `j)]) "." `erase)
         [(num "0")]))
       ","
       («term_=_»
        («term_*_»
         (Algebra.Group.Defs.«term_•_»
          (Term.app `Q.coeff [(«term_+_» («term_+_» `j "+" (num "1")) "+" `k)])
          " • "
          («term_^_» `B.gen "^" («term_+_» («term_+_» `j "+" (num "1")) "+" `k)))
         "*"
         («term_^_» `B.gen "^" («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))
        "="
        («term_*_»
         (Term.app (Term.app `algebraMap [`R `L]) [`p])
         "*"
         (Algebra.Group.Defs.«term_•_»
          (Term.app `Q.coeff [(«term_+_» («term_+_» `j "+" (num "1")) "+" `k)])
          " • "
          (Term.app `f [(«term_-_» («term_+_» `k "+" `P.nat_degree) "-" (num "1"))])))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_»
       («term_*_»
        (Algebra.Group.Defs.«term_•_»
         (Term.app `Q.coeff [(«term_+_» («term_+_» `j "+" (num "1")) "+" `k)])
         " • "
         («term_^_» `B.gen "^" («term_+_» («term_+_» `j "+" (num "1")) "+" `k)))
        "*"
        («term_^_» `B.gen "^" («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))
       "="
       («term_*_»
        (Term.app (Term.app `algebraMap [`R `L]) [`p])
        "*"
        (Algebra.Group.Defs.«term_•_»
         (Term.app `Q.coeff [(«term_+_» («term_+_» `j "+" (num "1")) "+" `k)])
         " • "
         (Term.app `f [(«term_-_» («term_+_» `k "+" `P.nat_degree) "-" (num "1"))]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_»
       (Term.app (Term.app `algebraMap [`R `L]) [`p])
       "*"
       (Algebra.Group.Defs.«term_•_»
        (Term.app `Q.coeff [(«term_+_» («term_+_» `j "+" (num "1")) "+" `k)])
        " • "
        (Term.app `f [(«term_-_» («term_+_» `k "+" `P.nat_degree) "-" (num "1"))])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Algebra.Group.Defs.«term_•_»
       (Term.app `Q.coeff [(«term_+_» («term_+_» `j "+" (num "1")) "+" `k)])
       " • "
       (Term.app `f [(«term_-_» («term_+_» `k "+" `P.nat_degree) "-" (num "1"))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `f [(«term_-_» («term_+_» `k "+" `P.nat_degree) "-" (num "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_-_» («term_+_» `k "+" `P.nat_degree) "-" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      («term_+_» `k "+" `P.nat_degree)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `P.nat_degree
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `k
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 65, (some 66, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_-_» («term_+_» `k "+" `P.nat_degree) "-" (num "1"))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `f
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      (Term.app `Q.coeff [(«term_+_» («term_+_» `j "+" (num "1")) "+" `k)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» («term_+_» `j "+" (num "1")) "+" `k)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      («term_+_» `j "+" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `j
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 65, (some 66, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_+_» («term_+_» `j "+" (num "1")) "+" `k)
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Q.coeff
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1022, (some 1023, term) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Term.app (Term.app `algebraMap [`R `L]) [`p])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `p
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.app `algebraMap [`R `L])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `L
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `algebraMap
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1022, (some 1023,
     term) <=? (some 1022, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `algebraMap [`R `L]) ")")
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1022, (some 1023, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      («term_*_»
       (Algebra.Group.Defs.«term_•_»
        (Term.app `Q.coeff [(«term_+_» («term_+_» `j "+" (num "1")) "+" `k)])
        " • "
        («term_^_» `B.gen "^" («term_+_» («term_+_» `j "+" (num "1")) "+" `k)))
       "*"
       («term_^_» `B.gen "^" («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» `B.gen "^" («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2"))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_-_» `P.nat_degree "-" («term_+_» `j "+" (num "2")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `j "+" (num "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `j
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_+_» `j "+" (num "2")) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `P.nat_degree
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 80 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_-_» `P.nat_degree "-" (Term.paren "(" («term_+_» `j "+" (num "2")) ")"))
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Algebra.Group.Defs.«term_•_»
       (Term.app `Q.coeff [(«term_+_» («term_+_» `j "+" (num "1")) "+" `k)])
       " • "
       («term_^_» `B.gen "^" («term_+_» («term_+_» `j "+" (num "1")) "+" `k)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» `B.gen "^" («term_+_» («term_+_» `j "+" (num "1")) "+" `k))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» («term_+_» `j "+" (num "1")) "+" `k)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      («term_+_» `j "+" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `j
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 65, (some 66, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 80 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_+_» («term_+_» `j "+" (num "1")) "+" `k)
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      (Term.app `Q.coeff [(«term_+_» («term_+_» `j "+" (num "1")) "+" `k)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» («term_+_» `j "+" (num "1")) "+" `k)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      («term_+_» `j "+" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `j
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 65, (some 66, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     («term_+_» («term_+_» `j "+" (num "1")) "+" `k)
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Q.coeff
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1022, (some 1023, term) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 73, (some 73, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `range [(«term_-_» `Q.nat_degree "-" `j)]) "." `erase)
       [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `range [(«term_-_» `Q.nat_degree "-" `j)]) "." `erase)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `range [(«term_-_» `Q.nat_degree "-" `j)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_-_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_-_» `Q.nat_degree "-" `j)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `j
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `Q.nat_degree
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_-_» `Q.nat_degree "-" `j) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `range
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `range [(Term.paren "(" («term_-_» `Q.nat_degree "-" `j) ")")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.Choose.tacticChoose!__Using_
       "choose!"
       [(Lean.binderIdent `f) (Lean.binderIdent `hf)]
       ["using"
        (Term.app
         `is_weakly_eisenstein_at.exists_mem_adjoin_mul_eq_pow_nat_degree_le
         [(Term.app `minpoly.aeval [`R `B.gen])
          (Term.app `minpoly.monic [`hBint])
          `hei.is_weakly_eisenstein_at])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `is_weakly_eisenstein_at.exists_mem_adjoin_mul_eq_pow_nat_degree_le
       [(Term.app `minpoly.aeval [`R `B.gen])
        (Term.app `minpoly.monic [`hBint])
        `hei.is_weakly_eisenstein_at])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hei.is_weakly_eisenstein_at
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `minpoly.monic [`hBint])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hBint
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `minpoly.monic
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `minpoly.monic [`hBint]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `minpoly.aeval [`R `B.gen])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `minpoly.aeval
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `minpoly.aeval [`R `B.gen])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `is_weakly_eisenstein_at.exists_mem_adjoin_mul_eq_pow_nat_degree_le
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.intro "intro" [`k `hk])
        []
        (Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule
            []
            (Term.app
             `hg
             [`k
              (Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hk])
              (Term.app
               (Term.proj `mem_range_succ_iff "." (fieldIdx "2"))
               [(Term.app
                 `le_trans
                 [(Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hk])
                  (Term.proj
                   (Term.app
                    (Term.proj `succ_le_iff "." (fieldIdx "1"))
                    [(Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hj])])
                   "."
                   `le)])])]))
           ","
           (Tactic.rwRule [] `Algebra.smul_def)
           ","
           (Tactic.rwRule [] `Algebra.smul_def)
           ","
           (Tactic.rwRule [] `RingHom.map_mul)
           ","
           (Tactic.rwRule [] `mul_assoc)]
          "]")
         [])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule
          []
          (Term.app
           `hg
           [`k
            (Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hk])
            (Term.app
             (Term.proj `mem_range_succ_iff "." (fieldIdx "2"))
             [(Term.app
               `le_trans
               [(Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hk])
                (Term.proj
                 (Term.app
                  (Term.proj `succ_le_iff "." (fieldIdx "1"))
                  [(Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hj])])
                 "."
                 `le)])])]))
         ","
         (Tactic.rwRule [] `Algebra.smul_def)
         ","
         (Tactic.rwRule [] `Algebra.smul_def)
         ","
         (Tactic.rwRule [] `RingHom.map_mul)
         ","
         (Tactic.rwRule [] `mul_assoc)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_assoc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `RingHom.map_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Algebra.smul_def
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Algebra.smul_def
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `hg
       [`k
        (Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hk])
        (Term.app
         (Term.proj `mem_range_succ_iff "." (fieldIdx "2"))
         [(Term.app
           `le_trans
           [(Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hk])
            (Term.proj
             (Term.app
              (Term.proj `succ_le_iff "." (fieldIdx "1"))
              [(Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hj])])
             "."
             `le)])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `mem_range_succ_iff "." (fieldIdx "2"))
       [(Term.app
         `le_trans
         [(Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hk])
          (Term.proj
           (Term.app
            (Term.proj `succ_le_iff "." (fieldIdx "1"))
            [(Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hj])])
           "."
           `le)])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `le_trans
       [(Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hk])
        (Term.proj
         (Term.app
          (Term.proj `succ_le_iff "." (fieldIdx "1"))
          [(Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hj])])
         "."
         `le)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj
       (Term.app
        (Term.proj `succ_le_iff "." (fieldIdx "1"))
        [(Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hj])])
       "."
       `le)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       (Term.proj `succ_le_iff "." (fieldIdx "1"))
       [(Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hj])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hj])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hj
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `mem_range_succ_iff "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `mem_range_succ_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hj])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `succ_le_iff "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `succ_le_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj `succ_le_iff "." (fieldIdx "1"))
      [(Term.paren "(" (Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hj]) ")")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hk])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hk
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `mem_range_succ_iff "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `mem_range_succ_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hk])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `le_trans
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `le_trans
      [(Term.paren "(" (Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hk]) ")")
       (Term.proj
        (Term.paren
         "("
         (Term.app
          (Term.proj `succ_le_iff "." (fieldIdx "1"))
          [(Term.paren
            "("
            (Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hj])
            ")")])
         ")")
        "."
        `le)])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `mem_range_succ_iff "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `mem_range_succ_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj `mem_range_succ_iff "." (fieldIdx "2"))
      [(Term.paren
        "("
        (Term.app
         `le_trans
         [(Term.paren "(" (Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hk]) ")")
          (Term.proj
           (Term.paren
            "("
            (Term.app
             (Term.proj `succ_le_iff "." (fieldIdx "1"))
             [(Term.paren
               "("
               (Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hj])
               ")")])
            ")")
           "."
           `le)])
        ")")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hk])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hk
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `mem_range_succ_iff "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `mem_range_succ_iff
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj `mem_range_succ_iff "." (fieldIdx "1")) [`hk])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hg
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`k `hk])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hk
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.replace'
       "replace"
       [`hg []]
       [(Term.typeSpec
         ":"
         (Std.ExtendedBinder.«term∀__,_»
          "∀"
          (Lean.binderIdent `k)
          («binderTerm∈_» "∈" (Term.app `range [(«term_+_» `j "+" (num "1"))]))
          ","
          («term_=_»
           (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [`k]) " • " («term_^_» `B.gen "^" `k))
           "="
           («term_*_»
            (Term.app `algebraMap [`R `L `p])
            "*"
            (Algebra.Group.Defs.«term_•_» (Term.app `g [`k]) " • " («term_^_» `B.gen "^" `k))))))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.ExtendedBinder.«term∀__,_»
       "∀"
       (Lean.binderIdent `k)
       («binderTerm∈_» "∈" (Term.app `range [(«term_+_» `j "+" (num "1"))]))
       ","
       («term_=_»
        (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [`k]) " • " («term_^_» `B.gen "^" `k))
        "="
        («term_*_»
         (Term.app `algebraMap [`R `L `p])
         "*"
         (Algebra.Group.Defs.«term_•_» (Term.app `g [`k]) " • " («term_^_» `B.gen "^" `k)))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_»
       (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [`k]) " • " («term_^_» `B.gen "^" `k))
       "="
       («term_*_»
        (Term.app `algebraMap [`R `L `p])
        "*"
        (Algebra.Group.Defs.«term_•_» (Term.app `g [`k]) " • " («term_^_» `B.gen "^" `k))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_*_»
       (Term.app `algebraMap [`R `L `p])
       "*"
       (Algebra.Group.Defs.«term_•_» (Term.app `g [`k]) " • " («term_^_» `B.gen "^" `k)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Algebra.Group.Defs.«term_•_» (Term.app `g [`k]) " • " («term_^_» `B.gen "^" `k))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» `B.gen "^" `k)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      (Term.app `g [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `g
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1022, (some 1023, term) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 71 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      (Term.app `algebraMap [`R `L `p])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `p
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `L
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `algebraMap
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1022, (some 1023, term) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Algebra.Group.Defs.«term_•_» (Term.app `Q.coeff [`k]) " • " («term_^_» `B.gen "^" `k))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_^_» `B.gen "^" `k)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 73 >? 80, (some 80, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      (Term.app `Q.coeff [`k])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `k
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Q.coeff
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1022, (some 1023, term) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 73, (some 73, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `range [(«term_+_» `j "+" (num "1"))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind '«term_+_»', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» `j "+" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `j
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_+_» `j "+" (num "1")) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `range
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.Choose.tacticChoose!__Using_
       "choose!"
       [(Lean.binderIdent `g) (Lean.binderIdent `hg)]
       ["using" `hind])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hind
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`Hj []]
         [(Term.typeSpec
           ":"
           («term_=_»
            («term_+_» `Q.nat_degree "+" (num "1"))
            "="
            («term_+_» («term_+_» `j "+" (num "1")) "+" («term_-_» `Q.nat_degree "-" `j))))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] (Term.app `add_comm [(num "1")]))
                ","
                (Tactic.rwRule [(patternIgnore (token.«← » "←"))] (Term.app `add_comm [(num "1")]))
                ","
                (Tactic.rwRule [] `add_assoc)
                ","
                (Tactic.rwRule [] `add_right_inj)
                ","
                (Tactic.rwRule
                 [(patternIgnore (token.«← » "←"))]
                 (Term.app
                  `Nat.add_sub_assoc
                  [(Term.proj
                    (Term.app
                     `Nat.lt_of_succ_lt_succ
                     [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])])
                    "."
                    `le)]))
                ","
                (Tactic.rwRule [] `add_comm)
                ","
                (Tactic.rwRule [] `Nat.add_sub_cancel)]
               "]")
              [])]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq
            "["
            [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] (Term.app `add_comm [(num "1")]))
             ","
             (Tactic.rwRule [(patternIgnore (token.«← » "←"))] (Term.app `add_comm [(num "1")]))
             ","
             (Tactic.rwRule [] `add_assoc)
             ","
             (Tactic.rwRule [] `add_right_inj)
             ","
             (Tactic.rwRule
              [(patternIgnore (token.«← » "←"))]
              (Term.app
               `Nat.add_sub_assoc
               [(Term.proj
                 (Term.app
                  `Nat.lt_of_succ_lt_succ
                  [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])])
                 "."
                 `le)]))
             ","
             (Tactic.rwRule [] `add_comm)
             ","
             (Tactic.rwRule [] `Nat.add_sub_cancel)]
            "]")
           [])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] (Term.app `add_comm [(num "1")]))
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] (Term.app `add_comm [(num "1")]))
         ","
         (Tactic.rwRule [] `add_assoc)
         ","
         (Tactic.rwRule [] `add_right_inj)
         ","
         (Tactic.rwRule
          [(patternIgnore (token.«← » "←"))]
          (Term.app
           `Nat.add_sub_assoc
           [(Term.proj
             (Term.app
              `Nat.lt_of_succ_lt_succ
              [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])])
             "."
             `le)]))
         ","
         (Tactic.rwRule [] `add_comm)
         ","
         (Tactic.rwRule [] `Nat.add_sub_cancel)]
        "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Nat.add_sub_cancel
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `add_comm
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Nat.add_sub_assoc
       [(Term.proj
         (Term.app
          `Nat.lt_of_succ_lt_succ
          [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])])
         "."
         `le)])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.proj', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj
       (Term.app
        `Nat.lt_of_succ_lt_succ
        [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])])
       "."
       `le)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `Nat.lt_of_succ_lt_succ
       [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hj
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `mem_range "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `mem_range
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Nat.lt_of_succ_lt_succ
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `Nat.lt_of_succ_lt_succ
      [(Term.paren "(" (Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj]) ")")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Nat.add_sub_assoc
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `add_right_inj
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `add_assoc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `add_comm [(num "1")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `add_comm
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `add_comm [(num "1")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `add_comm
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_»
       («term_+_» `Q.nat_degree "+" (num "1"))
       "="
       («term_+_» («term_+_» `j "+" (num "1")) "+" («term_-_» `Q.nat_degree "-" `j)))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_+_» («term_+_» `j "+" (num "1")) "+" («term_-_» `Q.nat_degree "-" `j))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_-_» `Q.nat_degree "-" `j)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `j
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `Q.nat_degree
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 66 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" («term_-_» `Q.nat_degree "-" `j) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      («term_+_» `j "+" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `j
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 65 >? 65, (some 66, term) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      («term_+_» `Q.nat_degree "+" (num "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "1")
[PrettyPrinter.parenthesize] ...precedences are 66 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 65, term))
      `Q.nat_degree
[PrettyPrinter.parenthesize] ...precedences are 65 >? 1024, (none, [anonymous]) <=? (some 65, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 65, (some 66, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `add_assoc)] "]")
       [(Tactic.location "at" (Tactic.locationHyp [`H] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `H
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `add_assoc
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.tacticReplace_
       "replace"
       (Term.haveDecl
        (Term.haveIdDecl
         [`H []]
         []
         ":="
         (Term.app
          (Term.proj `Nat.lt_iff_add_one_le "." (fieldIdx "1"))
          [(Term.app
            `lt_of_lt_of_le
            [(Term.app
              `lt_of_le_of_lt
              [(Term.app
                (Term.proj `Nat.lt_iff_add_one_le "." (fieldIdx "1"))
                [(Term.app
                  `Nat.lt_of_succ_lt_succ
                  [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])])])
               (Term.app `lt_succ_self [(Term.hole "_")])])
             (Term.app
              (Term.proj `Nat.lt_iff_add_one_le "." (fieldIdx "1"))
              [(Term.app
                (Term.proj (Term.app `nat_degree_lt_nat_degree_iff [`hQzero]) "." (fieldIdx "2"))
                [`H])])])]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `Nat.lt_iff_add_one_le "." (fieldIdx "1"))
       [(Term.app
         `lt_of_lt_of_le
         [(Term.app
           `lt_of_le_of_lt
           [(Term.app
             (Term.proj `Nat.lt_iff_add_one_le "." (fieldIdx "1"))
             [(Term.app
               `Nat.lt_of_succ_lt_succ
               [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])])])
            (Term.app `lt_succ_self [(Term.hole "_")])])
          (Term.app
           (Term.proj `Nat.lt_iff_add_one_le "." (fieldIdx "1"))
           [(Term.app
             (Term.proj (Term.app `nat_degree_lt_nat_degree_iff [`hQzero]) "." (fieldIdx "2"))
             [`H])])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `lt_of_lt_of_le
       [(Term.app
         `lt_of_le_of_lt
         [(Term.app
           (Term.proj `Nat.lt_iff_add_one_le "." (fieldIdx "1"))
           [(Term.app
             `Nat.lt_of_succ_lt_succ
             [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])])])
          (Term.app `lt_succ_self [(Term.hole "_")])])
        (Term.app
         (Term.proj `Nat.lt_iff_add_one_le "." (fieldIdx "1"))
         [(Term.app
           (Term.proj (Term.app `nat_degree_lt_nat_degree_iff [`hQzero]) "." (fieldIdx "2"))
           [`H])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj `Nat.lt_iff_add_one_le "." (fieldIdx "1"))
       [(Term.app
         (Term.proj (Term.app `nat_degree_lt_nat_degree_iff [`hQzero]) "." (fieldIdx "2"))
         [`H])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `nat_degree_lt_nat_degree_iff [`hQzero]) "." (fieldIdx "2"))
       [`H])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `H
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `nat_degree_lt_nat_degree_iff [`hQzero]) "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `nat_degree_lt_nat_degree_iff [`hQzero])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hQzero
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `nat_degree_lt_nat_degree_iff
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `nat_degree_lt_nat_degree_iff [`hQzero])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj
       (Term.paren "(" (Term.app `nat_degree_lt_nat_degree_iff [`hQzero]) ")")
       "."
       (fieldIdx "2"))
      [`H])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `Nat.lt_iff_add_one_le "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `Nat.lt_iff_add_one_le
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj `Nat.lt_iff_add_one_le "." (fieldIdx "1"))
      [(Term.paren
        "("
        (Term.app
         (Term.proj
          (Term.paren "(" (Term.app `nat_degree_lt_nat_degree_iff [`hQzero]) ")")
          "."
          (fieldIdx "2"))
         [`H])
        ")")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       `lt_of_le_of_lt
       [(Term.app
         (Term.proj `Nat.lt_iff_add_one_le "." (fieldIdx "1"))
         [(Term.app
           `Nat.lt_of_succ_lt_succ
           [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])])])
        (Term.app `lt_succ_self [(Term.hole "_")])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `lt_succ_self [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `lt_succ_self
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `lt_succ_self [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app
       (Term.proj `Nat.lt_iff_add_one_le "." (fieldIdx "1"))
       [(Term.app
         `Nat.lt_of_succ_lt_succ
         [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Nat.lt_of_succ_lt_succ
       [(Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hj
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `mem_range "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `mem_range
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Nat.lt_of_succ_lt_succ
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `Nat.lt_of_succ_lt_succ
      [(Term.paren "(" (Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj]) ")")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `Nat.lt_iff_add_one_le "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `Nat.lt_iff_add_one_le
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj `Nat.lt_iff_add_one_le "." (fieldIdx "1"))
      [(Term.paren
        "("
        (Term.app
         `Nat.lt_of_succ_lt_succ
         [(Term.paren "(" (Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj]) ")")])
        ")")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `lt_of_le_of_lt
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `lt_of_le_of_lt
      [(Term.paren
        "("
        (Term.app
         (Term.proj `Nat.lt_iff_add_one_le "." (fieldIdx "1"))
         [(Term.paren
           "("
           (Term.app
            `Nat.lt_of_succ_lt_succ
            [(Term.paren "(" (Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj]) ")")])
           ")")])
        ")")
       (Term.paren "(" (Term.app `lt_succ_self [(Term.hole "_")]) ")")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `lt_of_lt_of_le
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `lt_of_lt_of_le
      [(Term.paren
        "("
        (Term.app
         `lt_of_le_of_lt
         [(Term.paren
           "("
           (Term.app
            (Term.proj `Nat.lt_iff_add_one_le "." (fieldIdx "1"))
            [(Term.paren
              "("
              (Term.app
               `Nat.lt_of_succ_lt_succ
               [(Term.paren "(" (Term.app (Term.proj `mem_range "." (fieldIdx "1")) [`hj]) ")")])
              ")")])
           ")")
          (Term.paren "(" (Term.app `lt_succ_self [(Term.hole "_")]) ")")])
        ")")
       (Term.paren
        "("
        (Term.app
         (Term.proj `Nat.lt_iff_add_one_le "." (fieldIdx "1"))
         [(Term.paren
           "("
           (Term.app
            (Term.proj
             (Term.paren "(" (Term.app `nat_degree_lt_nat_degree_iff [`hQzero]) ")")
             "."
             (fieldIdx "2"))
            [`H])
           ")")])
        ")")])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `Nat.lt_iff_add_one_le "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `Nat.lt_iff_add_one_le
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hQ₁)
         ","
         (Tactic.rwRule [(patternIgnore (token.«← » "←"))] `hP)]
        "]")
       [(Tactic.location "at" (Tactic.locationHyp [`H] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `H
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hP
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hQ₁
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`H []]
         []
         ":="
         (Term.app `degree_mod_by_monic_lt [`Q₁ (Term.app `minpoly.monic [`hBint])]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `degree_mod_by_monic_lt [`Q₁ (Term.app `minpoly.monic [`hBint])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `minpoly.monic [`hBint])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hBint
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `minpoly.monic
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `minpoly.monic [`hBint]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `Q₁
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `degree_mod_by_monic_lt
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" `n)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app `hp.dvd_of_pow_dvd_pow_mul_pow_of_square_not_dvd [(Term.hole "_") `hndiv]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `hp.dvd_of_pow_dvd_pow_mul_pow_of_square_not_dvd [(Term.hole "_") `hndiv])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hndiv
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hp.dvd_of_pow_dvd_pow_mul_pow_of_square_not_dvd
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`hj])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hj
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.intro "intro" [`H])
        []
        (Tactic.exact
         "exact"
         (Term.app
          `dvd_coeff_zero_of_aeval_eq_prime_smul_of_minpoly_is_eiseinstein_at
          [`hp `hBint `hQ `hzint `hei]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `dvd_coeff_zero_of_aeval_eq_prime_smul_of_minpoly_is_eiseinstein_at
        [`hp `hBint `hQ `hzint `hei]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `dvd_coeff_zero_of_aeval_eq_prime_smul_of_minpoly_is_eiseinstein_at
       [`hp `hBint `hQ `hzint `hei])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hei
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hzint
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hQ
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hBint
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hp
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `dvd_coeff_zero_of_aeval_eq_prime_smul_of_minpoly_is_eiseinstein_at
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.intro "intro" [`H])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `H
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `Nat.case_strong_induction_on
        [`i (Term.hole "_") (Term.fun "fun" (Term.basicFun [`j `hind] [] "=>" (Term.hole "_")))]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `Nat.case_strong_induction_on
       [`i (Term.hole "_") (Term.fun "fun" (Term.basicFun [`j `hind] [] "=>" (Term.hole "_")))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun "fun" (Term.basicFun [`j `hind] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hind
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `j
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Nat.case_strong_induction_on
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.refine'
       "refine'"
       (Term.app
        `mem_adjoin_of_dvd_coeff_of_dvd_aeval
        [`hp.ne_zero (Term.fun "fun" (Term.basicFun [`i] [] "=>" (Term.hole "_"))) `hQ]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `mem_adjoin_of_dvd_coeff_of_dvd_aeval
       [`hp.ne_zero (Term.fun "fun" (Term.basicFun [`i] [] "=>" (Term.hole "_"))) `hQ])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hQ
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.fun', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.fun "fun" (Term.basicFun [`i] [] "=>" (Term.hole "_")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `i
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (some 0, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.fun "fun" (Term.basicFun [`i] [] "=>" (Term.hole "_")))
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hp.ne_zero
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mem_adjoin_of_dvd_coeff_of_dvd_aeval
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.simp
         "simp"
         []
         []
         ["only"]
         ["["
          [(Tactic.simpLemma [] [] `hQzero)
           ","
           (Tactic.simpLemma [] [] `Algebra.smul_def)
           ","
           (Tactic.simpLemma [] [] `zero_eq_mul)
           ","
           (Tactic.simpLemma [] [] `aeval_zero)]
          "]"]
         [(Tactic.location "at" (Tactic.locationHyp [`hQ] []))])
        []
        (Tactic.cases'
         "cases'"
         [(Tactic.casesTarget [] `hQ)]
         []
         ["with" [(Lean.binderIdent `H) (Lean.binderIdent `H₁)]])
        []
        (tactic__
         (cdotTk (patternIgnore (token.«· » "·")))
         [(Tactic.tacticHave_
           "have"
           (Term.haveDecl
            (Term.haveIdDecl
             []
             [(Term.typeSpec ":" (Term.app `Function.Injective [(Term.app `algebraMap [`R `L])]))]
             ":="
             (Term.byTactic
              "by"
              (Tactic.tacticSeq
               (Tactic.tacticSeq1Indented
                [(Tactic.rwSeq
                  "rw"
                  []
                  (Tactic.rwRuleSeq
                   "["
                   [(Tactic.rwRule [] (Term.app `algebra_map_eq [`R `K `L]))]
                   "]")
                  [])
                 []
                 (Tactic.exact
                  "exact"
                  (Term.app
                   (Term.proj (Term.proj (Term.app `algebraMap [`K `L]) "." `Injective) "." `comp)
                   [(Term.app `IsFractionRing.injective [`R `K])]))]))))))
          []
          (Std.Tactic.tacticExfalso "exfalso")
          []
          (Tactic.exact
           "exact"
           (Term.app
            `hp.ne_zero
            [(Term.app
              (Term.proj (Term.app `injective_iff_map_eq_zero [(Term.hole "_")]) "." (fieldIdx "1"))
              [`this (Term.hole "_") `H])]))])
        []
        (tactic__
         (cdotTk (patternIgnore (token.«· » "·")))
         [(Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `H₁)] "]") [])
          []
          (Tactic.exact "exact" (Term.app `Subalgebra.zero_mem [(Term.hole "_")]))])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `H₁)] "]") [])
        []
        (Tactic.exact "exact" (Term.app `Subalgebra.zero_mem [(Term.hole "_")]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact "exact" (Term.app `Subalgebra.zero_mem [(Term.hole "_")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Subalgebra.zero_mem [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Subalgebra.zero_mem
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq "rw" [] (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `H₁)] "]") [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `H₁
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.tacticHave_
         "have"
         (Term.haveDecl
          (Term.haveIdDecl
           []
           [(Term.typeSpec ":" (Term.app `Function.Injective [(Term.app `algebraMap [`R `L])]))]
           ":="
           (Term.byTactic
            "by"
            (Tactic.tacticSeq
             (Tactic.tacticSeq1Indented
              [(Tactic.rwSeq
                "rw"
                []
                (Tactic.rwRuleSeq
                 "["
                 [(Tactic.rwRule [] (Term.app `algebra_map_eq [`R `K `L]))]
                 "]")
                [])
               []
               (Tactic.exact
                "exact"
                (Term.app
                 (Term.proj (Term.proj (Term.app `algebraMap [`K `L]) "." `Injective) "." `comp)
                 [(Term.app `IsFractionRing.injective [`R `K])]))]))))))
        []
        (Std.Tactic.tacticExfalso "exfalso")
        []
        (Tactic.exact
         "exact"
         (Term.app
          `hp.ne_zero
          [(Term.app
            (Term.proj (Term.app `injective_iff_map_eq_zero [(Term.hole "_")]) "." (fieldIdx "1"))
            [`this (Term.hole "_") `H])]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `hp.ne_zero
        [(Term.app
          (Term.proj (Term.app `injective_iff_map_eq_zero [(Term.hole "_")]) "." (fieldIdx "1"))
          [`this (Term.hole "_") `H])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `hp.ne_zero
       [(Term.app
         (Term.proj (Term.app `injective_iff_map_eq_zero [(Term.hole "_")]) "." (fieldIdx "1"))
         [`this (Term.hole "_") `H])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `injective_iff_map_eq_zero [(Term.hole "_")]) "." (fieldIdx "1"))
       [`this (Term.hole "_") `H])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `H
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `this
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `injective_iff_map_eq_zero [(Term.hole "_")]) "." (fieldIdx "1"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `injective_iff_map_eq_zero [(Term.hole "_")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `injective_iff_map_eq_zero
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `injective_iff_map_eq_zero [(Term.hole "_")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      (Term.proj
       (Term.paren "(" (Term.app `injective_iff_map_eq_zero [(Term.hole "_")]) ")")
       "."
       (fieldIdx "1"))
      [`this (Term.hole "_") `H])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hp.ne_zero
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.tacticExfalso "exfalso")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec ":" (Term.app `Function.Injective [(Term.app `algebraMap [`R `L])]))]
         ":="
         (Term.byTactic
          "by"
          (Tactic.tacticSeq
           (Tactic.tacticSeq1Indented
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `algebra_map_eq [`R `K `L]))] "]")
              [])
             []
             (Tactic.exact
              "exact"
              (Term.app
               (Term.proj (Term.proj (Term.app `algebraMap [`K `L]) "." `Injective) "." `comp)
               [(Term.app `IsFractionRing.injective [`R `K])]))]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.rwSeq
           "rw"
           []
           (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `algebra_map_eq [`R `K `L]))] "]")
           [])
          []
          (Tactic.exact
           "exact"
           (Term.app
            (Term.proj (Term.proj (Term.app `algebraMap [`K `L]) "." `Injective) "." `comp)
            [(Term.app `IsFractionRing.injective [`R `K])]))])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        (Term.proj (Term.proj (Term.app `algebraMap [`K `L]) "." `Injective) "." `comp)
        [(Term.app `IsFractionRing.injective [`R `K])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.proj (Term.app `algebraMap [`K `L]) "." `Injective) "." `comp)
       [(Term.app `IsFractionRing.injective [`R `K])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `IsFractionRing.injective [`R `K])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `IsFractionRing.injective
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `IsFractionRing.injective [`R `K])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.proj (Term.app `algebraMap [`K `L]) "." `Injective) "." `comp)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.proj (Term.app `algebraMap [`K `L]) "." `Injective)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `algebraMap [`K `L])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `L
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `algebraMap
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `algebraMap [`K `L]) ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] (Term.app `algebra_map_eq [`R `K `L]))] "]")
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `algebra_map_eq [`R `K `L])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `L
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `algebra_map_eq
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Function.Injective [(Term.app `algebraMap [`R `L])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `algebraMap [`R `L])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `L
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `algebraMap
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `algebraMap [`R `L]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Function.Injective
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.cases'
       "cases'"
       [(Tactic.casesTarget [] `hQ)]
       []
       ["with" [(Lean.binderIdent `H) (Lean.binderIdent `H₁)]])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hQ
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.simp
       "simp"
       []
       []
       ["only"]
       ["["
        [(Tactic.simpLemma [] [] `hQzero)
         ","
         (Tactic.simpLemma [] [] `Algebra.smul_def)
         ","
         (Tactic.simpLemma [] [] `zero_eq_mul)
         ","
         (Tactic.simpLemma [] [] `aeval_zero)]
        "]"]
       [(Tactic.location "at" (Tactic.locationHyp [`hQ] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hQ
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `aeval_zero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `zero_eq_mul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Algebra.smul_def
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpStar'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.simpLemma', expected 'Lean.Parser.Tactic.simpErase'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hQzero
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Classical.«tacticBy_cases_:_» "by_cases" [`hQzero ":"] («term_=_» `Q "=" (num "0")))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» `Q "=" (num "0"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `Q
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq
          "["
          [(Tactic.rwRule
            [(patternIgnore (token.«← » "←"))]
            (Term.app `mod_by_monic_add_div [`Q₁ (Term.app `minpoly.monic [`hBint])]))]
          "]")
         [(Tactic.location "at" (Tactic.locationHyp [`hQ] []))])
        []
        (Std.Tactic.Simpa.simpa
         "simpa"
         []
         []
         (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hQ]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Simpa.simpa
       "simpa"
       []
       []
       (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hQ]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hQ
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq
        "["
        [(Tactic.rwRule
          [(patternIgnore (token.«← » "←"))]
          (Term.app `mod_by_monic_add_div [`Q₁ (Term.app `minpoly.monic [`hBint])]))]
        "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hQ] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hQ
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `mod_by_monic_add_div [`Q₁ (Term.app `minpoly.monic [`hBint])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `minpoly.monic [`hBint])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hBint
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `minpoly.monic
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `minpoly.monic [`hBint]) ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `Q₁
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mod_by_monic_add_div
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.replace'
       "replace"
       [`hQ []]
       [(Term.typeSpec
         ":"
         («term_=_» (Term.app `aeval [`B.gen `Q]) "=" (Algebra.Group.Defs.«term_•_» `p " • " `z)))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_=_» (Term.app `aeval [`B.gen `Q]) "=" (Algebra.Group.Defs.«term_•_» `p " • " `z))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Algebra.Group.Defs.«term_•_» `p " • " `z)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `z
[PrettyPrinter.parenthesize] ...precedences are 73 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 73, term))
      `p
[PrettyPrinter.parenthesize] ...precedences are 74 >? 1024, (none, [anonymous]) <=? (some 73, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 73, (some 73, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      (Term.app `aeval [`B.gen `Q])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `Q
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `aeval
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.set
       "set"
       []
       (Mathlib.Tactic.setArgsRest
        `Q
        []
        ":="
        (Polynomial.Data.Polynomial.Div.«term_%ₘ_» `Q₁ " %ₘ " `P)
        ["with" [] `hQ₁]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Polynomial.Data.Polynomial.Div.«term_%ₘ_» `Q₁ " %ₘ " `P)
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `P
[PrettyPrinter.parenthesize] ...precedences are 71 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 70, term))
      `Q₁
[PrettyPrinter.parenthesize] ...precedences are 70 >? 1024, (none, [anonymous]) <=? (some 70, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 70, (some 71, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.obtain
       "obtain"
       [(Std.Tactic.RCases.rcasesPatMed
         [(Std.Tactic.RCases.rcasesPat.tuple
           "⟨"
           [(Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `Q₁)])
             [])
            ","
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hQ)])
             [])]
           "⟩")])]
       []
       [":=" [`hz]])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `adjoin_singleton_eq_range_aeval)] "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hz] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `adjoin_singleton_eq_range_aeval
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticLet_
       "let"
       (Term.letDecl
        (Term.letIdDecl `P₁ [] [] ":=" (Term.app `P.map [(Term.app `algebraMap [`R `L])]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `P.map [(Term.app `algebraMap [`R `L])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `algebraMap [`R `L])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `L
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `algebraMap
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `algebraMap [`R `L]) ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `P.map
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.tacticHaveI_
       "haveI"
       (Term.haveDecl
        (Term.haveIdDecl
         []
         [(Term.typeSpec ":" (Term.app `NoZeroSMulDivisors [`R `L]))]
         ":="
         (Term.app `NoZeroSMulDivisors.trans [`R `K `L]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `NoZeroSMulDivisors.trans [`R `K `L])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `L
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `K
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `NoZeroSMulDivisors.trans
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `NoZeroSMulDivisors [`R `L])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `L
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `NoZeroSMulDivisors
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.obtain
       "obtain"
       [(Std.Tactic.RCases.rcasesPatMed
         [(Std.Tactic.RCases.rcasesPat.tuple
           "⟨"
           [(Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `n)])
             [])
            ","
            (Std.Tactic.RCases.rcasesPatLo
             (Std.Tactic.RCases.rcasesPatMed [(Std.Tactic.RCases.rcasesPat.one `hn)])
             [])]
           "⟩")])]
       []
       [":=" [(Term.app `Nat.exists_eq_succ_of_ne_zero [`B.dim_pos.ne'])]])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Nat.exists_eq_succ_of_ne_zero [`B.dim_pos.ne'])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `B.dim_pos.ne'
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Nat.exists_eq_succ_of_ne_zero
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Mathlib.Tactic.set
       "set"
       []
       (Mathlib.Tactic.setArgsRest `P [] ":=" (Term.app `minpoly [`R `B.gen]) ["with" [] `hP]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `minpoly [`R `B.gen])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `minpoly
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.tacticLetI_
       "letI"
       (Term.haveDecl (Term.haveIdDecl [] [] ":=" (Term.app `FiniteDimensional [`B]))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `FiniteDimensional [`B])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `B
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `FiniteDimensional
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.tacticHave_
       "have"
       (Term.haveDecl
        (Term.haveIdDecl
         [`hndiv []]
         [(Term.typeSpec
           ":"
           («term¬_»
            "¬"
            («term_∣_»
             («term_^_» `p "^" (num "2"))
             "∣"
             (Term.app (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff) [(num "0")]))))]
         ":="
         (Term.fun
          "fun"
          (Term.basicFun
           [`h]
           []
           "=>"
           (Term.app
            `hei.not_mem
            [(Term.subst
              (Term.proj (Term.app `span_singleton_pow [`p (num "2")]) "." `symm)
              "▸"
              [(Term.app (Term.proj `Ideal.mem_span_singleton "." (fieldIdx "2")) [`h])])]))))))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.fun
       "fun"
       (Term.basicFun
        [`h]
        []
        "=>"
        (Term.app
         `hei.not_mem
         [(Term.subst
           (Term.proj (Term.app `span_singleton_pow [`p (num "2")]) "." `symm)
           "▸"
           [(Term.app (Term.proj `Ideal.mem_span_singleton "." (fieldIdx "2")) [`h])])])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `hei.not_mem
       [(Term.subst
         (Term.proj (Term.app `span_singleton_pow [`p (num "2")]) "." `symm)
         "▸"
         [(Term.app (Term.proj `Ideal.mem_span_singleton "." (fieldIdx "2")) [`h])])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.subst', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.subst', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.subst
       (Term.proj (Term.app `span_singleton_pow [`p (num "2")]) "." `symm)
       "▸"
       [(Term.app (Term.proj `Ideal.mem_span_singleton "." (fieldIdx "2")) [`h])])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj `Ideal.mem_span_singleton "." (fieldIdx "2")) [`h])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj `Ideal.mem_span_singleton "." (fieldIdx "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `Ideal.mem_span_singleton
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 75 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 75, term))
      (Term.proj (Term.app `span_singleton_pow [`p (num "2")]) "." `symm)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `span_singleton_pow [`p (num "2")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `p
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `span_singleton_pow
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `span_singleton_pow [`p (num "2")])
     ")")
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 75, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 75, (some 75, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.subst
      (Term.proj (Term.paren "(" (Term.app `span_singleton_pow [`p (num "2")]) ")") "." `symm)
      "▸"
      [(Term.app (Term.proj `Ideal.mem_span_singleton "." (fieldIdx "2")) [`h])])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hei.not_mem
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `h
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 0, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term¬_»
       "¬"
       («term_∣_»
        («term_^_» `p "^" (num "2"))
        "∣"
        (Term.app (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff) [(num "0")])))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term_∣_»
       («term_^_» `p "^" (num "2"))
       "∣"
       (Term.app (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff) [(num "0")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff) [(num "0")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'num', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "0")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      (Term.proj (Term.app `minpoly [`R `B.gen]) "." `coeff)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `minpoly [`R `B.gen])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `B.gen
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `minpoly
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren "(" (Term.app `minpoly [`R `B.gen]) ")")
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      («term_^_» `p "^" (num "2"))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (num "2")
[PrettyPrinter.parenthesize] ...precedences are 80 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 80, term))
      `p
[PrettyPrinter.parenthesize] ...precedences are 81 >? 1024, (none, [anonymous]) <=? (some 80, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 80, (some 80, term) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 40 >? 50, (some 51, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (some 40, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      («term_∈_»
       `z
       "∈"
       (Term.app
        `adjoin
        [`R
         (Term.typeAscription
          "("
          («term{_}» "{" [(Term.proj `B "." `gen)] "}")
          ":"
          [(Term.app `Set [`L])]
          ")")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `adjoin
       [`R
        (Term.typeAscription
         "("
         («term{_}» "{" [(Term.proj `B "." `gen)] "}")
         ":"
         [(Term.app `Set [`L])]
         ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.typeAscription
       "("
       («term{_}» "{" [(Term.proj `B "." `gen)] "}")
       ":"
       [(Term.app `Set [`L])]
       ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Set [`L])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `L
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Set
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term{_}» "{" [(Term.proj `B "." `gen)] "}")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `B "." `gen)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `B
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `adjoin
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `minpoly [`R (Term.proj `B "." `gen)]) "." `IsEisensteinAt)
       [(RingTheory.Polynomial.Eisenstein.term𝓟_1 "𝓟")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'RingTheory.Polynomial.Eisenstein.term𝓟_1', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'RingTheory.Polynomial.Eisenstein.term𝓟_1', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (RingTheory.Polynomial.Eisenstein.term𝓟_1 "𝓟")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'RingTheory.Polynomial.Eisenstein.term𝓟_1', expected 'RingTheory.Polynomial.Eisenstein.term𝓟_1._@.RingTheory.Polynomial.Eisenstein._hyg.1594'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    Let `K` be the field of fraction of an integrally closed domain `R` and let `L` be a separable
    extension of `K`, generated by an integral power basis `B` such that the minimal polynomial of
    `B.gen` is Eisenstein at `p`. Given `z : L` integral over `R`, if `p • z ∈ adjoin R {B.gen}`, then
    `z ∈ adjoin R {B.gen}`. -/
  theorem
    mem_adjoin_of_smul_prime_smul_of_minpoly_is_eiseinstein_at
    { B : PowerBasis K L }
        ( hp : Prime p )
        ( hBint : IsIntegral R B . gen )
        { z : L }
        ( hzint : IsIntegral R z )
        ( hz : p • z ∈ adjoin R ( { B . gen } : Set L ) )
        ( hei : minpoly R B . gen . IsEisensteinAt 𝓟 )
      : z ∈ adjoin R ( { B . gen } : Set L )
    :=
      by
        have
            hndiv
              : ¬ p ^ 2 ∣ minpoly R B.gen . coeff 0
              :=
              fun h => hei.not_mem span_singleton_pow p 2 . symm ▸ Ideal.mem_span_singleton . 2 h
          letI := FiniteDimensional B
          set P := minpoly R B.gen with hP
          obtain ⟨ n , hn ⟩ := Nat.exists_eq_succ_of_ne_zero B.dim_pos.ne'
          haveI : NoZeroSMulDivisors R L := NoZeroSMulDivisors.trans R K L
          let P₁ := P.map algebraMap R L
          rw [ adjoin_singleton_eq_range_aeval ] at hz
          obtain ⟨ Q₁ , hQ ⟩ := hz
          set Q := Q₁ %ₘ P with hQ₁
          replace hQ : aeval B.gen Q = p • z
          · rw [ ← mod_by_monic_add_div Q₁ minpoly.monic hBint ] at hQ simpa using hQ
          by_cases hQzero : Q = 0
          ·
            simp only [ hQzero , Algebra.smul_def , zero_eq_mul , aeval_zero ] at hQ
              cases' hQ with H H₁
              ·
                have
                    : Function.Injective algebraMap R L
                      :=
                      by
                        rw [ algebra_map_eq R K L ]
                          exact algebraMap K L . Injective . comp IsFractionRing.injective R K
                  exfalso
                  exact hp.ne_zero injective_iff_map_eq_zero _ . 1 this _ H
              · rw [ H₁ ] exact Subalgebra.zero_mem _
          refine' mem_adjoin_of_dvd_coeff_of_dvd_aeval hp.ne_zero fun i => _ hQ
          refine' Nat.case_strong_induction_on i _ fun j hind => _
          ·
            intro H
              exact
                dvd_coeff_zero_of_aeval_eq_prime_smul_of_minpoly_is_eiseinstein_at
                  hp hBint hQ hzint hei
          ·
            intro hj
              refine' hp.dvd_of_pow_dvd_pow_mul_pow_of_square_not_dvd _ hndiv
              exact n
              have H := degree_mod_by_monic_lt Q₁ minpoly.monic hBint
              rw [ ← hQ₁ , ← hP ] at H
              replace
                H
                  :=
                  Nat.lt_iff_add_one_le . 1
                    lt_of_lt_of_le
                      lt_of_le_of_lt
                          Nat.lt_iff_add_one_le . 1 Nat.lt_of_succ_lt_succ mem_range . 1 hj
                            lt_succ_self _
                        Nat.lt_iff_add_one_le . 1 nat_degree_lt_nat_degree_iff hQzero . 2 H
              rw [ add_assoc ] at H
              have
                Hj
                  : Q.nat_degree + 1 = j + 1 + Q.nat_degree - j
                  :=
                  by
                    rw
                      [
                        ← add_comm 1
                          ,
                          ← add_comm 1
                          ,
                          add_assoc
                          ,
                          add_right_inj
                          ,
                          ← Nat.add_sub_assoc Nat.lt_of_succ_lt_succ mem_range . 1 hj . le
                          ,
                          add_comm
                          ,
                          Nat.add_sub_cancel
                        ]
              choose! g hg using hind
              replace
                hg
                : ∀ k ∈ range j + 1 , Q.coeff k • B.gen ^ k = algebraMap R L p * g k • B.gen ^ k
              ·
                intro k hk
                  rw
                    [
                      hg
                          k
                            mem_range_succ_iff . 1 hk
                            mem_range_succ_iff . 2
                              le_trans
                                mem_range_succ_iff . 1 hk
                                  succ_le_iff . 1 mem_range_succ_iff . 1 hj . le
                        ,
                        Algebra.smul_def
                        ,
                        Algebra.smul_def
                        ,
                        RingHom.map_mul
                        ,
                        mul_assoc
                      ]
              choose!
                f hf
                using
                  is_weakly_eisenstein_at.exists_mem_adjoin_mul_eq_pow_nat_degree_le
                    minpoly.aeval R B.gen minpoly.monic hBint hei.is_weakly_eisenstein_at
              have
                hf₁
                  :
                    ∀
                      k
                      ∈ range Q.nat_degree - j . erase 0
                      ,
                      Q.coeff j + 1 + k • B.gen ^ j + 1 + k * B.gen ^ P.nat_degree - j + 2
                        =
                        algebraMap R L p * Q.coeff j + 1 + k • f k + P.nat_degree - 1
                  :=
                  by
                    intro k hk
                      rw
                        [
                          smul_mul_assoc
                            ,
                            ← pow_add
                            ,
                            ← Nat.add_sub_assoc H
                            ,
                            ← add_assoc j 1 1
                            ,
                            add_comm j + 1 1
                            ,
                            add_assoc j + 1
                            ,
                            add_comm _ k + P.nat_degree
                            ,
                            Nat.add_sub_add_right
                            ,
                            ← hf k + P.nat_degree - 1 _ . 2
                            ,
                            mul_smul_comm
                          ]
                      rw
                        [
                          minpoly.monic hBint . nat_degree_map
                            ,
                            add_comm
                            ,
                            Nat.add_sub_assoc
                            ,
                            le_add_iff_nonneg_right
                          ]
                      · exact Nat.zero_le _
                      · refine' one_le_iff_ne_zero . 2 fun h => _ rw [ h ] at hk simpa using hk
                      · infer_instance
              suffices
                p ^ n.succ
                    ∣
                    Q.coeff succ j ^ n.succ
                      *
                      minpoly R B.gen . coeff 0 ^ succ j + P.nat_degree - j + 2
                  by
                    convert this
                      rw
                        [
                          Nat.succ_eq_add_one
                            ,
                            add_assoc
                            ,
                            ← Nat.add_sub_assoc H
                            ,
                            ← add_assoc
                            ,
                            add_comm j + 1
                            ,
                            Nat.add_sub_add_left
                            ,
                            ← Nat.add_sub_assoc
                            ,
                            Nat.add_sub_add_left
                            ,
                            hP
                            ,
                            ← minpoly.monic hBint . nat_degree_map algebraMap R K
                            ,
                            ← minpoly.gcd_domain_eq_field_fractions' K hBint
                            ,
                            nat_degree_minpoly
                            ,
                            hn
                            ,
                            Nat.sub_one
                            ,
                            Nat.pred_succ
                          ]
                      linarith
              rw
                [
                  aeval_eq_sum_range
                    ,
                    Hj
                    ,
                    range_add
                    ,
                    sum_union disjoint_range_add_left_embedding _ _
                    ,
                    sum_congr rfl hg
                    ,
                    add_comm
                  ]
                at hQ
              replace hQ := congr_arg fun x => x * B.gen ^ P.nat_degree - j + 2 hQ
              simp_rw [ sum_map , add_left_embedding_apply , add_mul , sum_mul , mul_assoc ] at hQ
              rw
                [
                  ←
                      insert_erase
                        mem_range . 2
                          tsub_pos_iff_lt . 2 <| Nat.lt_of_succ_lt_succ <| mem_range . 1 hj
                    ,
                    sum_insert not_mem_erase 0 _
                    ,
                    add_zero
                    ,
                    sum_congr rfl hf₁
                    ,
                    ← mul_sum
                    ,
                    ← mul_sum
                    ,
                    add_assoc
                    ,
                    ← mul_add
                    ,
                    smul_mul_assoc
                    ,
                    ← pow_add
                    ,
                    Algebra.smul_def
                  ]
                at hQ
              replace hQ := congr_arg norm K eq_sub_of_add_eq hQ
              have
                hintsum
                  :
                    IsIntegral
                      R
                        z * B.gen ^ P.nat_degree - j + 2
                          -
                          ∑
                              x : ℕ
                              in
                              range Q.nat_degree - j . erase 0
                              ,
                              Q.coeff j + 1 + x • f x + P.nat_degree - 1
                            +
                            ∑ x : ℕ in range j + 1 , g x • B.gen ^ x * B.gen ^ P.nat_degree - j + 2
                  :=
                  by
                    refine'
                        is_integral_sub
                          is_integral_mul hzint IsIntegral.pow hBint _
                            is_integral_add
                              IsIntegral.sum _ fun k hk => is_integral_smul _ _
                                IsIntegral.sum
                                  _
                                    fun
                                      k hk
                                        =>
                                        is_integral_mul
                                          is_integral_smul _ IsIntegral.pow hBint _
                                            IsIntegral.pow hBint _
                      refine' adjoin_le_integral_closure hBint hf _ _ . 1
                      rw [ minpoly.monic hBint . nat_degree_map algebraMap R L ]
                      rw [ add_comm , Nat.add_sub_assoc , le_add_iff_nonneg_right ]
                      · exact zero_le _
                      · refine' one_le_iff_ne_zero . 2 fun h => _ rw [ h ] at hk simpa using hk
              obtain ⟨ r , hr ⟩ := is_integral_iff . 1 is_integral_norm K hintsum
              rw
                [
                  Algebra.smul_def
                    ,
                    mul_assoc
                    ,
                    ← mul_sub
                    ,
                    _root_.map_mul
                    ,
                    algebra_map_apply R K L
                    ,
                    map_pow
                    ,
                    Algebra.norm_algebra_map
                    ,
                    _root_.map_mul
                    ,
                    algebra_map_apply R K L
                    ,
                    Algebra.norm_algebra_map
                    ,
                    finrank B
                    ,
                    ← hr
                    ,
                    power_basis.norm_gen_eq_coeff_zero_minpoly
                    ,
                    minpoly.gcd_domain_eq_field_fractions' K hBint
                    ,
                    coeff_map
                    ,
                    show ( - 1 : K ) = algebraMap R K - 1 by simp
                    ,
                    ← map_pow
                    ,
                    ← map_pow
                    ,
                    ← _root_.map_mul
                    ,
                    ← map_pow
                    ,
                    ← _root_.map_mul
                    ,
                    ← map_pow
                    ,
                    ← _root_.map_mul
                  ]
                at hQ
              have hppdiv : p ^ B.dim ∣ p ^ B.dim * r := dvd_mul_of_dvd_left dvd_rfl _
              rwa
                [
                  ← IsFractionRing.injective R K hQ
                    ,
                    mul_comm
                    ,
                    ← Units.coe_neg_one
                    ,
                    mul_pow
                    ,
                    ← Units.val_pow_eq_pow_val
                    ,
                    ← Units.val_pow_eq_pow_val
                    ,
                    mul_assoc
                    ,
                    IsUnit.dvd_mul_left _ _ _ ⟨ _ , rfl ⟩
                    ,
                    mul_comm
                    ,
                    ← Nat.succ_eq_add_one
                    ,
                    hn
                  ]
                at hppdiv
#align
  mem_adjoin_of_smul_prime_smul_of_minpoly_is_eiseinstein_at mem_adjoin_of_smul_prime_smul_of_minpoly_is_eiseinstein_at

/- failed to parenthesize: parenthesize: uncaught backtrack exception
[PrettyPrinter.parenthesize.input] (Command.declaration
     (Command.declModifiers
      [(Command.docComment
        "/--"
        "Let `K` be the field of fraction of an integrally closed domain `R` and let `L` be a separable\nextension of `K`, generated by an integral power basis `B` such that the minimal polynomial of\n`B.gen` is Eisenstein at `p`. Given `z : L` integral over `R`, if `p ^ n • z ∈ adjoin R {B.gen}`,\nthen `z ∈ adjoin R {B.gen}`. Together with `algebra.discr_mul_is_integral_mem_adjoin` this result\noften allows to compute the ring of integers of `L`. -/")]
      []
      []
      []
      []
      [])
     (Command.theorem
      "theorem"
      (Command.declId `mem_adjoin_of_smul_prime_pow_smul_of_minpoly_is_eiseinstein_at [])
      (Command.declSig
       [(Term.implicitBinder "{" [`B] [":" (Term.app `PowerBasis [`K `L])] "}")
        (Term.explicitBinder "(" [`hp] [":" (Term.app `Prime [`p])] [] ")")
        (Term.explicitBinder
         "("
         [`hBint]
         [":" (Term.app `IsIntegral [`R (Term.proj `B "." `gen)])]
         []
         ")")
        (Term.implicitBinder "{" [`n] [":" (termℕ "ℕ")] "}")
        (Term.implicitBinder "{" [`z] [":" `L] "}")
        (Term.explicitBinder "(" [`hzint] [":" (Term.app `IsIntegral [`R `z])] [] ")")
        (Term.explicitBinder
         "("
         [`hz]
         [":"
          («term_∈_»
           (Algebra.Group.Defs.«term_•_» («term_^_» `p "^" `n) " • " `z)
           "∈"
           (Term.app
            `adjoin
            [`R
             (Term.typeAscription
              "("
              («term{_}» "{" [(Term.proj `B "." `gen)] "}")
              ":"
              [(Term.app `Set [`L])]
              ")")]))]
         []
         ")")
        (Term.explicitBinder
         "("
         [`hei]
         [":"
          (Term.app
           (Term.proj (Term.app `minpoly [`R (Term.proj `B "." `gen)]) "." `IsEisensteinAt)
           [(RingTheory.Polynomial.Eisenstein.term𝓟_1 "𝓟")])]
         []
         ")")]
       (Term.typeSpec
        ":"
        («term_∈_»
         `z
         "∈"
         (Term.app
          `adjoin
          [`R
           (Term.typeAscription
            "("
            («term{_}» "{" [(Term.proj `B "." `gen)] "}")
            ":"
            [(Term.app `Set [`L])]
            ")")]))))
      (Command.declValSimple
       ":="
       (Term.byTactic
        "by"
        (Tactic.tacticSeq
         (Tactic.tacticSeq1Indented
          [(Tactic.induction'
            "induction'"
            [(Tactic.casesTarget [] `n)]
            []
            ["with" [(Lean.binderIdent `n) (Lean.binderIdent `hn)]]
            [])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Std.Tactic.Simpa.simpa
              "simpa"
              []
              []
              (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hz]))])
           []
           (tactic__
            (cdotTk (patternIgnore (token.«· » "·")))
            [(Tactic.rwSeq
              "rw"
              []
              (Tactic.rwRuleSeq
               "["
               [(Tactic.rwRule [] `pow_succ) "," (Tactic.rwRule [] `mul_smul)]
               "]")
              [(Tactic.location "at" (Tactic.locationHyp [`hz] []))])
             []
             (Tactic.exact
              "exact"
              (Term.app
               `hn
               [(Term.app
                 `mem_adjoin_of_smul_prime_smul_of_minpoly_is_eiseinstein_at
                 [`hp
                  `hBint
                  (Term.app `is_integral_smul [(Term.hole "_") `hzint])
                  `hz
                  `hei])]))])])))
       [])
      []
      []))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.abbrev'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.def'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.byTactic
       "by"
       (Tactic.tacticSeq
        (Tactic.tacticSeq1Indented
         [(Tactic.induction'
           "induction'"
           [(Tactic.casesTarget [] `n)]
           []
           ["with" [(Lean.binderIdent `n) (Lean.binderIdent `hn)]]
           [])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Std.Tactic.Simpa.simpa
             "simpa"
             []
             []
             (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hz]))])
          []
          (tactic__
           (cdotTk (patternIgnore (token.«· » "·")))
           [(Tactic.rwSeq
             "rw"
             []
             (Tactic.rwRuleSeq
              "["
              [(Tactic.rwRule [] `pow_succ) "," (Tactic.rwRule [] `mul_smul)]
              "]")
             [(Tactic.location "at" (Tactic.locationHyp [`hz] []))])
            []
            (Tactic.exact
             "exact"
             (Term.app
              `hn
              [(Term.app
                `mem_adjoin_of_smul_prime_smul_of_minpoly_is_eiseinstein_at
                [`hp
                 `hBint
                 (Term.app `is_integral_smul [(Term.hole "_") `hzint])
                 `hz
                 `hei])]))])])))
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.tacticSeq1Indented', expected 'Lean.Parser.Tactic.tacticSeqBracketed'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Tactic.rwSeq
         "rw"
         []
         (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `pow_succ) "," (Tactic.rwRule [] `mul_smul)] "]")
         [(Tactic.location "at" (Tactic.locationHyp [`hz] []))])
        []
        (Tactic.exact
         "exact"
         (Term.app
          `hn
          [(Term.app
            `mem_adjoin_of_smul_prime_smul_of_minpoly_is_eiseinstein_at
            [`hp `hBint (Term.app `is_integral_smul [(Term.hole "_") `hzint]) `hz `hei])]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.exact
       "exact"
       (Term.app
        `hn
        [(Term.app
          `mem_adjoin_of_smul_prime_smul_of_minpoly_is_eiseinstein_at
          [`hp `hBint (Term.app `is_integral_smul [(Term.hole "_") `hzint]) `hz `hei])]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `hn
       [(Term.app
         `mem_adjoin_of_smul_prime_smul_of_minpoly_is_eiseinstein_at
         [`hp `hBint (Term.app `is_integral_smul [(Term.hole "_") `hzint]) `hz `hei])])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `mem_adjoin_of_smul_prime_smul_of_minpoly_is_eiseinstein_at
       [`hp `hBint (Term.app `is_integral_smul [(Term.hole "_") `hzint]) `hz `hei])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hei
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.app', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.app `is_integral_smul [(Term.hole "_") `hzint])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hzint
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.hole', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      (Term.hole "_")
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `is_integral_smul
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app `is_integral_smul [(Term.hole "_") `hzint])
     ")")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hBint
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `hp
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `mem_adjoin_of_smul_prime_smul_of_minpoly_is_eiseinstein_at
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesized: (Term.paren
     "("
     (Term.app
      `mem_adjoin_of_smul_prime_smul_of_minpoly_is_eiseinstein_at
      [`hp
       `hBint
       (Term.paren "(" (Term.app `is_integral_smul [(Term.hole "_") `hzint]) ")")
       `hz
       `hei])
     ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `hn
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.rwSeq
       "rw"
       []
       (Tactic.rwRuleSeq "[" [(Tactic.rwRule [] `pow_succ) "," (Tactic.rwRule [] `mul_smul)] "]")
       [(Tactic.location "at" (Tactic.locationHyp [`hz] []))])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Tactic.locationHyp', expected 'Lean.Parser.Tactic.locationWildcard'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `mul_smul
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `pow_succ
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (tactic__
       (cdotTk (patternIgnore (token.«· » "·")))
       [(Std.Tactic.Simpa.simpa
         "simpa"
         []
         []
         (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hz]))])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Std.Tactic.Simpa.simpa
       "simpa"
       []
       []
       (Std.Tactic.Simpa.simpaArgsRest [] [] [] [] ["using" `hz]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `hz
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Tactic.induction'
       "induction'"
       [(Tactic.casesTarget [] `n)]
       []
       ["with" [(Lean.binderIdent `n) (Lean.binderIdent `hn)]]
       [])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `n
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 0, tactic) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, [anonymous]))
      («term_∈_»
       `z
       "∈"
       (Term.app
        `adjoin
        [`R
         (Term.typeAscription
          "("
          («term{_}» "{" [(Term.proj `B "." `gen)] "}")
          ":"
          [(Term.app `Set [`L])]
          ")")]))
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       `adjoin
       [`R
        (Term.typeAscription
         "("
         («term{_}» "{" [(Term.proj `B "." `gen)] "}")
         ":"
         [(Term.app `Set [`L])]
         ")")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.typeAscription', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.typeAscription
       "("
       («term{_}» "{" [(Term.proj `B "." `gen)] "}")
       ":"
       [(Term.app `Set [`L])]
       ")")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app `Set [`L])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      `L
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `Set
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1022, (some 1023, term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      («term{_}» "{" [(Term.proj `B "." `gen)] "}")
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.proj `B "." `gen)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1024, term))
      `B
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none, [anonymous]) <=? (some 1024, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 0 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (none, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'ident', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1023, term))
      `R
[PrettyPrinter.parenthesize] ...precedences are 1023 >? 1024, (none,
     [anonymous]) <=? (some 1023, term)
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 1022, term))
      `adjoin
[PrettyPrinter.parenthesize] ...precedences are 1024 >? 1024, (none,
     [anonymous]) <=? (some 1022, term)
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1022, (some 1023,
     term) <=? (none, [anonymous])
[PrettyPrinter.parenthesize] parenthesizing (cont := (some 50, term))
      `z
[PrettyPrinter.parenthesize] ...precedences are 51 >? 1024, (none, [anonymous]) <=? (some 50, term)
[PrettyPrinter.parenthesize] ...precedences are 0 >? 50, (some 51,
     term) <=? (some 1023, [anonymous])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'ident'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.hole'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (Term.app
       (Term.proj (Term.app `minpoly [`R (Term.proj `B "." `gen)]) "." `IsEisensteinAt)
       [(RingTheory.Polynomial.Eisenstein.term𝓟_1 "𝓟")])
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'RingTheory.Polynomial.Eisenstein.term𝓟_1', expected 'Lean.Parser.Term.namedArgument'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'RingTheory.Polynomial.Eisenstein.term𝓟_1', expected 'Lean.Parser.Term.ellipsis'
[PrettyPrinter.parenthesize] parenthesizing (cont := (none, [anonymous]))
      (RingTheory.Polynomial.Eisenstein.term𝓟_1 "𝓟")
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'RingTheory.Polynomial.Eisenstein.term𝓟_1', expected 'RingTheory.Polynomial.Eisenstein.term𝓟_1._@.RingTheory.Polynomial.Eisenstein._hyg.1594'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.strictImplicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.implicitBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Term.explicitBinder', expected 'Lean.Parser.Term.instBinder'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.opaque'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.instance'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.axiom'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.example'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.inductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.classInductive'
[PrettyPrinter.parenthesize.backtrack] unexpected node kind 'Lean.Parser.Command.theorem', expected 'Lean.Parser.Command.structure'-/-- failed to format: format: uncaught backtrack exception
/--
    Let `K` be the field of fraction of an integrally closed domain `R` and let `L` be a separable
    extension of `K`, generated by an integral power basis `B` such that the minimal polynomial of
    `B.gen` is Eisenstein at `p`. Given `z : L` integral over `R`, if `p ^ n • z ∈ adjoin R {B.gen}`,
    then `z ∈ adjoin R {B.gen}`. Together with `algebra.discr_mul_is_integral_mem_adjoin` this result
    often allows to compute the ring of integers of `L`. -/
  theorem
    mem_adjoin_of_smul_prime_pow_smul_of_minpoly_is_eiseinstein_at
    { B : PowerBasis K L }
        ( hp : Prime p )
        ( hBint : IsIntegral R B . gen )
        { n : ℕ }
        { z : L }
        ( hzint : IsIntegral R z )
        ( hz : p ^ n • z ∈ adjoin R ( { B . gen } : Set L ) )
        ( hei : minpoly R B . gen . IsEisensteinAt 𝓟 )
      : z ∈ adjoin R ( { B . gen } : Set L )
    :=
      by
        induction' n with n hn
          · simpa using hz
          ·
            rw [ pow_succ , mul_smul ] at hz
              exact
                hn
                  mem_adjoin_of_smul_prime_smul_of_minpoly_is_eiseinstein_at
                    hp hBint is_integral_smul _ hzint hz hei
#align
  mem_adjoin_of_smul_prime_pow_smul_of_minpoly_is_eiseinstein_at mem_adjoin_of_smul_prime_pow_smul_of_minpoly_is_eiseinstein_at

end IsIntegral

