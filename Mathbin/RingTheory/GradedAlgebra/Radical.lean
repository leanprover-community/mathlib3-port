/-
Copyright (c) 2022 Jujian Zhang. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jujian Zhang, Eric Wieser

! This file was ported from Lean 3 source module ring_theory.graded_algebra.radical
! leanprover-community/mathlib commit 38df578a6450a8c5142b3727e3ae894c2300cae0
! Please do not edit these lines, except to modify the commit id
! if you have ported upstream changes.
-/
import Mathbin.RingTheory.GradedAlgebra.HomogeneousIdeal

/-!

This file contains a proof that the radical of any homogeneous ideal is a homogeneous ideal

## Main statements

> THIS FILE IS SYNCHRONIZED WITH MATHLIB4.
> Any changes to this file require a corresponding PR to mathlib4.

* `ideal.is_homogeneous.is_prime_iff`: for any `I : ideal A`, if `I` is homogeneous, then
  `I` is prime if and only if `I` is homogeneously prime, i.e. `I ‚â† ‚ä§` and if `x, y` are
  homogeneous elements such that `x * y ‚àà I`, then at least one of `x,y` is in `I`.
* `ideal.is_prime.homogeneous_core`: for any `I : ideal A`, if `I` is prime, then
  `I.homogeneous_core ùíú` (i.e. the largest homogeneous ideal contained in `I`) is also prime.
* `ideal.is_homogeneous.radical`: for any `I : ideal A`, if `I` is homogeneous, then the
  radical of `I` is homogeneous as well.
* `homogeneous_ideal.radical`: for any `I : homogeneous_ideal ùíú`, `I.radical` is the the
  radical of `I` as a `homogeneous_ideal ùíú`

## Implementation details

Throughout this file, the indexing type `Œπ` of grading is assumed to be a
`linear_ordered_cancel_add_comm_monoid`. This might be stronger than necessary but cancelling
property is strictly necessary; for a counterexample of how `ideal.is_homogeneous.is_prime_iff`
fails for a non-cancellative set see `counterexample/homogeneous_prime_not_prime.lean`.

## Tags

homogeneous, radical
-/


open GradedRing DirectSum SetLike Finset

open BigOperators

variable {Œπ œÉ A : Type _}

variable [CommRing A]

variable [LinearOrderedCancelAddCommMonoid Œπ]

variable [SetLike œÉ A] [AddSubmonoidClass œÉ A] {ùíú : Œπ ‚Üí œÉ} [GradedRing ùíú]

include A

/- warning: ideal.is_homogeneous.is_prime_of_homogeneous_mem_or_mem -> Ideal.IsHomogeneous.isPrime_of_homogeneous_mem_or_mem is a dubious translation:
<too large>
Case conversion may be inaccurate. Consider using '#align ideal.is_homogeneous.is_prime_of_homogeneous_mem_or_mem Ideal.IsHomogeneous.isPrime_of_homogeneous_mem_or_mem‚Çì'. -/
/- ./././Mathport/Syntax/Translate/Expr.lean:177:8: unsupported: ambiguous notation -/
theorem Ideal.IsHomogeneous.isPrime_of_homogeneous_mem_or_mem {I : Ideal A} (hI : I.Homogeneous ùíú)
    (I_ne_top : I ‚â† ‚ä§)
    (homogeneous_mem_or_mem :
      ‚àÄ {x y : A}, Homogeneous ùíú x ‚Üí Homogeneous ùíú y ‚Üí x * y ‚àà I ‚Üí x ‚àà I ‚à® y ‚àà I) :
    Ideal.IsPrime I :=
  ‚ü®I_ne_top, by
    intro x y hxy
    by_contra rid
    obtain ‚ü®rid‚ÇÅ, rid‚ÇÇ‚ü© := not_or_distrib.mp rid
    classical
      /-
        The idea of the proof is the following :
        since `x * y ‚àà I` and `I` homogeneous, then `proj i (x * y) ‚àà I` for any `i : Œπ`.
        Then consider two sets `{i ‚àà x.support | x·µ¢ ‚àâ I}` and `{j ‚àà y.support | y‚±º ‚àâ J}`;
        let `max‚ÇÅ, max‚ÇÇ` be the maximum of the two sets, then `proj (max‚ÇÅ + max‚ÇÇ) (x * y) ‚àà I`.
        Then, `proj max‚ÇÅ x ‚àâ I` and `proj max‚ÇÇ j ‚àâ I`
        but `proj i x ‚àà I` for all `max‚ÇÅ < i` and `proj j y ‚àà I` for all `max‚ÇÇ < j`.
        `  proj (max‚ÇÅ + max‚ÇÇ) (x * y)`
        `= ‚àë {(i, j) ‚àà supports | i + j = max‚ÇÅ + max‚ÇÇ}, x·µ¢ * y‚±º`
        `= proj max‚ÇÅ x * proj max‚ÇÇ y`
        `  + ‚àë {(i, j) ‚àà supports \ {(max‚ÇÅ, max‚ÇÇ)} | i + j = max‚ÇÅ + max‚ÇÇ}, x·µ¢ * y‚±º`.
        This is a contradiction, because both `proj (max‚ÇÅ + max‚ÇÇ) (x * y) ‚àà I` and the sum on the
        right hand side is in `I` however `proj max‚ÇÅ x * proj max‚ÇÇ y` is not in `I`.
        -/
      set set‚ÇÅ := (decompose ùíú x).support.filter‚Çì fun i => proj ùíú i x ‚àâ I with set‚ÇÅ_eq
      set set‚ÇÇ := (decompose ùíú y).support.filter‚Çì fun i => proj ùíú i y ‚àâ I with set‚ÇÇ_eq
      have nonempty :
        ‚àÄ x : A, x ‚àâ I ‚Üí ((decompose ùíú x).support.filter‚Çì fun i => proj ùíú i x ‚àâ I).Nonempty :=
        by
        intro x hx
        rw [filter_nonempty_iff]
        contrapose! hx
        simp_rw [proj_apply] at hx
        rw [‚Üê sum_support_decompose ùíú x]
        exact Ideal.sum_mem _ hx
      set max‚ÇÅ := set‚ÇÅ.max' (Nonempty x rid‚ÇÅ) with max‚ÇÅ_eq
      set max‚ÇÇ := set‚ÇÇ.max' (Nonempty y rid‚ÇÇ) with max‚ÇÇ_eq
      have mem_max‚ÇÅ : max‚ÇÅ ‚àà set‚ÇÅ := max'_mem set‚ÇÅ (Nonempty x rid‚ÇÅ)
      have mem_max‚ÇÇ : max‚ÇÇ ‚àà set‚ÇÇ := max'_mem set‚ÇÇ (Nonempty y rid‚ÇÇ)
      replace hxy : proj ùíú (max‚ÇÅ + max‚ÇÇ) (x * y) ‚àà I := hI _ hxy
      have mem_I : proj ùíú max‚ÇÅ x * proj ùíú max‚ÇÇ y ‚àà I :=
        by
        set antidiag :=
          ((decompose ùíú x).support √óÀ¢ (decompose ùíú y).support).filter‚Çì fun z : Œπ √ó Œπ =>
            z.1 + z.2 = max‚ÇÅ + max‚ÇÇ with
          ha
        have mem_antidiag : (max‚ÇÅ, max‚ÇÇ) ‚àà antidiag :=
          by
          simp only [add_sum_erase, mem_filter, mem_product]
          exact ‚ü®‚ü®mem_of_mem_filter _ mem_max‚ÇÅ, mem_of_mem_filter _ mem_max‚ÇÇ‚ü©, rfl‚ü©
        have eq_add_sum :=
          calc
            proj ùíú (max‚ÇÅ + max‚ÇÇ) (x * y) = ‚àë ij in antidiag, proj ùíú ij.1 x * proj ùíú ij.2 y := by
              simp_rw [ha, proj_apply, DirectSum.decompose_mul, DirectSum.coe_mul_apply ùíú]
            _ =
                proj ùíú max‚ÇÅ x * proj ùíú max‚ÇÇ y +
                  ‚àë ij in antidiag.erase (max‚ÇÅ, max‚ÇÇ), proj ùíú ij.1 x * proj ùíú ij.2 y :=
              (add_sum_erase _ _ mem_antidiag).symm
            
        rw [eq_sub_of_add_eq eq_add_sum.symm]
        refine' Ideal.sub_mem _ hxy (Ideal.sum_mem _ fun z H => _)
        rcases z with ‚ü®i, j‚ü©
        simp only [mem_erase, Prod.mk.inj_iff, Ne.def, mem_filter, mem_product] at H
        rcases H with ‚ü®H‚ÇÅ, ‚ü®H‚ÇÇ, H‚ÇÉ‚ü©, H‚ÇÑ‚ü©
        have max_lt : max‚ÇÅ < i ‚à® max‚ÇÇ < j :=
          by
          rcases lt_trichotomy max‚ÇÅ i with (h | rfl | h)
          ¬∑ exact Or.inl h
          ¬∑ refine' False.elim (H‚ÇÅ ‚ü®rfl, add_left_cancel H‚ÇÑ‚ü©)
          ¬∑ apply Or.inr
            have := add_lt_add_right h j
            rw [H‚ÇÑ] at this
            exact lt_of_add_lt_add_left this
        cases max_lt
        ¬∑ -- in this case `max‚ÇÅ < i`, then `x·µ¢ ‚àà I`; for otherwise `i ‚àà set‚ÇÅ` then `i ‚â§ max‚ÇÅ`.
          have not_mem : i ‚àâ set‚ÇÅ := fun h =>
            lt_irrefl _ ((max'_lt_iff set‚ÇÅ (Nonempty x rid‚ÇÅ)).mp max_lt i h)
          rw [set‚ÇÅ_eq] at not_mem
          simp only [not_and, Classical.not_not, Ne.def, mem_filter] at not_mem
          exact Ideal.mul_mem_right _ I (not_mem H‚ÇÇ)
        ¬∑ -- in this case  `max‚ÇÇ < j`, then `y‚±º ‚àà I`; for otherwise `j ‚àà set‚ÇÇ`, then `j ‚â§ max‚ÇÇ`.
          have not_mem : j ‚àâ set‚ÇÇ := fun h =>
            lt_irrefl _ ((max'_lt_iff set‚ÇÇ (Nonempty y rid‚ÇÇ)).mp max_lt j h)
          rw [set‚ÇÇ_eq] at not_mem
          simp only [not_and, Classical.not_not, Ne.def, mem_filter] at not_mem
          exact Ideal.mul_mem_left I _ (not_mem H‚ÇÉ)
      have not_mem_I : proj ùíú max‚ÇÅ x * proj ùíú max‚ÇÇ y ‚àâ I :=
        by
        have neither_mem : proj ùíú max‚ÇÅ x ‚àâ I ‚àß proj ùíú max‚ÇÇ y ‚àâ I :=
          by
          rw [mem_filter] at mem_max‚ÇÅ mem_max‚ÇÇ
          exact ‚ü®mem_max‚ÇÅ.2, mem_max‚ÇÇ.2‚ü©
        intro rid
        cases homogeneous_mem_or_mem ‚ü®max‚ÇÅ, SetLike.coe_mem _‚ü© ‚ü®max‚ÇÇ, SetLike.coe_mem _‚ü© mem_I
        ¬∑ apply neither_mem.1 h
        ¬∑ apply neither_mem.2 h
      exact not_mem_I mem_I‚ü©
#align ideal.is_homogeneous.is_prime_of_homogeneous_mem_or_mem Ideal.IsHomogeneous.isPrime_of_homogeneous_mem_or_mem

/- warning: ideal.is_homogeneous.is_prime_iff -> Ideal.IsHomogeneous.isPrime_iff is a dubious translation:
<too large>
Case conversion may be inaccurate. Consider using '#align ideal.is_homogeneous.is_prime_iff Ideal.IsHomogeneous.isPrime_iff‚Çì'. -/
theorem Ideal.IsHomogeneous.isPrime_iff {I : Ideal A} (h : I.Homogeneous ùíú) :
    I.IsPrime ‚Üî
      I ‚â† ‚ä§ ‚àß
        ‚àÄ {x y : A},
          SetLike.Homogeneous ùíú x ‚Üí SetLike.Homogeneous ùíú y ‚Üí x * y ‚àà I ‚Üí x ‚àà I ‚à® y ‚àà I :=
  ‚ü®fun HI => ‚ü®ne_of_apply_ne _ HI.ne_top, fun x y hx hy hxy => Ideal.IsPrime.mem_or_mem HI hxy‚ü©,
    fun ‚ü®I_ne_top, homogeneous_mem_or_mem‚ü© =>
    h.isPrime_of_homogeneous_mem_or_mem I_ne_top @homogeneous_mem_or_mem‚ü©
#align ideal.is_homogeneous.is_prime_iff Ideal.IsHomogeneous.isPrime_iff

/- warning: ideal.is_prime.homogeneous_core -> Ideal.IsPrime.homogeneousCore is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {œÉ : Type.{u2}} {A : Type.{u3}} [_inst_1 : CommRing.{u3} A] [_inst_2 : LinearOrderedCancelAddCommMonoid.{u1} Œπ] [_inst_3 : SetLike.{u2, u3} œÉ A] [_inst_4 : AddSubmonoidClass.{u2, u3} œÉ A (AddMonoid.toAddZeroClass.{u3} A (AddMonoidWithOne.toAddMonoid.{u3} A (AddGroupWithOne.toAddMonoidWithOne.{u3} A (AddCommGroupWithOne.toAddGroupWithOne.{u3} A (Ring.toAddCommGroupWithOne.{u3} A (CommRing.toRing.{u3} A _inst_1)))))) _inst_3] {ùíú : Œπ -> œÉ} [_inst_5 : GradedRing.{u1, u3, u2} Œπ A œÉ (fun (a : Œπ) (b : Œπ) => Eq.decidable.{u1} Œπ (LinearOrderedAddCommMonoid.toLinearOrder.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toLinearOrderedAddCommMonoid.{u1} Œπ _inst_2)) a b) (AddRightCancelMonoid.toAddMonoid.{u1} Œπ (AddCancelMonoid.toAddRightCancelMonoid.{u1} Œπ (AddCancelCommMonoid.toAddCancelMonoid.{u1} Œπ (OrderedCancelAddCommMonoid.toCancelAddCommMonoid.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toOrderedCancelAddCommMonoid.{u1} Œπ _inst_2))))) (Ring.toSemiring.{u3} A (CommRing.toRing.{u3} A _inst_1)) _inst_3 _inst_4 ùíú] {I : Ideal.{u3} A (Ring.toSemiring.{u3} A (CommRing.toRing.{u3} A _inst_1))}, (Ideal.IsPrime.{u3} A (Ring.toSemiring.{u3} A (CommRing.toRing.{u3} A _inst_1)) I) -> (Ideal.IsPrime.{u3} A (Ring.toSemiring.{u3} A (CommRing.toRing.{u3} A _inst_1)) (HomogeneousIdeal.toIdeal.{u1, u2, u3} Œπ œÉ A (Ring.toSemiring.{u3} A (CommRing.toRing.{u3} A _inst_1)) _inst_3 _inst_4 ùíú (fun (a : Œπ) (b : Œπ) => Eq.decidable.{u1} Œπ (LinearOrderedAddCommMonoid.toLinearOrder.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toLinearOrderedAddCommMonoid.{u1} Œπ _inst_2)) a b) (AddRightCancelMonoid.toAddMonoid.{u1} Œπ (AddCancelMonoid.toAddRightCancelMonoid.{u1} Œπ (AddCancelCommMonoid.toAddCancelMonoid.{u1} Œπ (OrderedCancelAddCommMonoid.toCancelAddCommMonoid.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toOrderedCancelAddCommMonoid.{u1} Œπ _inst_2))))) _inst_5 (Ideal.homogeneousCore.{u1, u2, u3} Œπ œÉ A (Ring.toSemiring.{u3} A (CommRing.toRing.{u3} A _inst_1)) _inst_3 _inst_4 ùíú (fun (a : Œπ) (b : Œπ) => Eq.decidable.{u1} Œπ (LinearOrderedAddCommMonoid.toLinearOrder.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toLinearOrderedAddCommMonoid.{u1} Œπ _inst_2)) a b) (AddRightCancelMonoid.toAddMonoid.{u1} Œπ (AddCancelMonoid.toAddRightCancelMonoid.{u1} Œπ (AddCancelCommMonoid.toAddCancelMonoid.{u1} Œπ (OrderedCancelAddCommMonoid.toCancelAddCommMonoid.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toOrderedCancelAddCommMonoid.{u1} Œπ _inst_2))))) _inst_5 I)))
but is expected to have type
  forall {Œπ : Type.{u2}} {œÉ : Type.{u1}} {A : Type.{u3}} [_inst_1 : CommRing.{u3} A] [_inst_2 : LinearOrderedCancelAddCommMonoid.{u2} Œπ] [_inst_3 : SetLike.{u1, u3} œÉ A] [_inst_4 : AddSubmonoidClass.{u1, u3} œÉ A (AddMonoid.toAddZeroClass.{u3} A (AddMonoidWithOne.toAddMonoid.{u3} A (AddGroupWithOne.toAddMonoidWithOne.{u3} A (Ring.toAddGroupWithOne.{u3} A (CommRing.toRing.{u3} A _inst_1))))) _inst_3] {ùíú : Œπ -> œÉ} [_inst_5 : GradedRing.{u2, u3, u1} Œπ A œÉ (fun (a : Œπ) (b : Œπ) => instDecidableEq.{u2} Œπ (LinearOrderedAddCommMonoid.toLinearOrder.{u2} Œπ (LinearOrderedCancelAddCommMonoid.toLinearOrderedAddCommMonoid.{u2} Œπ _inst_2)) a b) (AddRightCancelMonoid.toAddMonoid.{u2} Œπ (AddCancelMonoid.toAddRightCancelMonoid.{u2} Œπ (AddCancelCommMonoid.toAddCancelMonoid.{u2} Œπ (OrderedCancelAddCommMonoid.toCancelAddCommMonoid.{u2} Œπ (LinearOrderedCancelAddCommMonoid.toOrderedCancelAddCommMonoid.{u2} Œπ _inst_2))))) (Ring.toSemiring.{u3} A (CommRing.toRing.{u3} A _inst_1)) _inst_3 _inst_4 ùíú] {I : Ideal.{u3} A (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_1))}, (Ideal.IsPrime.{u3} A (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_1)) I) -> (Ideal.IsPrime.{u3} A (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_1)) (HomogeneousIdeal.toIdeal.{u2, u1, u3} Œπ œÉ A (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_1)) _inst_3 _inst_4 ùíú (fun (a : Œπ) (b : Œπ) => instDecidableEq.{u2} Œπ (LinearOrderedAddCommMonoid.toLinearOrder.{u2} Œπ (LinearOrderedCancelAddCommMonoid.toLinearOrderedAddCommMonoid.{u2} Œπ _inst_2)) a b) (AddRightCancelMonoid.toAddMonoid.{u2} Œπ (AddCancelMonoid.toAddRightCancelMonoid.{u2} Œπ (AddCancelCommMonoid.toAddCancelMonoid.{u2} Œπ (OrderedCancelAddCommMonoid.toCancelAddCommMonoid.{u2} Œπ (LinearOrderedCancelAddCommMonoid.toOrderedCancelAddCommMonoid.{u2} Œπ _inst_2))))) _inst_5 (Ideal.homogeneousCore.{u2, u1, u3} Œπ œÉ A (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_1)) _inst_3 _inst_4 ùíú (fun (a : Œπ) (b : Œπ) => instDecidableEq.{u2} Œπ (LinearOrderedAddCommMonoid.toLinearOrder.{u2} Œπ (LinearOrderedCancelAddCommMonoid.toLinearOrderedAddCommMonoid.{u2} Œπ _inst_2)) a b) (AddRightCancelMonoid.toAddMonoid.{u2} Œπ (AddCancelMonoid.toAddRightCancelMonoid.{u2} Œπ (AddCancelCommMonoid.toAddCancelMonoid.{u2} Œπ (OrderedCancelAddCommMonoid.toCancelAddCommMonoid.{u2} Œπ (LinearOrderedCancelAddCommMonoid.toOrderedCancelAddCommMonoid.{u2} Œπ _inst_2))))) _inst_5 I)))
Case conversion may be inaccurate. Consider using '#align ideal.is_prime.homogeneous_core Ideal.IsPrime.homogeneousCore‚Çì'. -/
theorem Ideal.IsPrime.homogeneousCore {I : Ideal A} (h : I.IsPrime) :
    (I.homogeneousCore ùíú).toIdeal.IsPrime :=
  by
  apply (Ideal.homogeneousCore ùíú I).Homogeneous.isPrime_of_homogeneous_mem_or_mem
  ¬∑ exact ne_top_of_le_ne_top h.ne_top (Ideal.toIdeal_homogeneousCore_le ùíú I)
  rintro x y hx hy hxy
  have H := h.mem_or_mem (Ideal.toIdeal_homogeneousCore_le ùíú I hxy)
  refine' H.imp _ _
  ¬∑ exact Ideal.mem_homogeneousCore_of_homogeneous_of_mem hx
  ¬∑ exact Ideal.mem_homogeneousCore_of_homogeneous_of_mem hy
#align ideal.is_prime.homogeneous_core Ideal.IsPrime.homogeneousCore

/- warning: ideal.is_homogeneous.radical_eq -> Ideal.IsHomogeneous.radical_eq is a dubious translation:
<too large>
Case conversion may be inaccurate. Consider using '#align ideal.is_homogeneous.radical_eq Ideal.IsHomogeneous.radical_eq‚Çì'. -/
theorem Ideal.IsHomogeneous.radical_eq {I : Ideal A} (hI : I.Homogeneous ùíú) :
    I.radical = sInf { J | J.Homogeneous ùíú ‚àß I ‚â§ J ‚àß J.IsPrime } :=
  by
  rw [Ideal.radical_eq_sInf]
  apply le_antisymm
  ¬∑ exact sInf_le_sInf fun J => And.right
  ¬∑ refine' sInf_le_sInf_of_forall_exists_le _
    rintro J ‚ü®HJ‚ÇÅ, HJ‚ÇÇ‚ü©
    refine' ‚ü®(J.homogeneous_core ùíú).toIdeal, _, J.to_ideal_homogeneous_core_le _‚ü©
    refine' ‚ü®HomogeneousIdeal.isHomogeneous _, _, HJ‚ÇÇ.homogeneous_core‚ü©
    refine' hI.to_ideal_homogeneous_core_eq_self.symm.trans_le (Ideal.homogeneousCore_mono _ HJ‚ÇÅ)
#align ideal.is_homogeneous.radical_eq Ideal.IsHomogeneous.radical_eq

/- warning: ideal.is_homogeneous.radical -> Ideal.IsHomogeneous.radical is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {œÉ : Type.{u2}} {A : Type.{u3}} [_inst_1 : CommRing.{u3} A] [_inst_2 : LinearOrderedCancelAddCommMonoid.{u1} Œπ] [_inst_3 : SetLike.{u2, u3} œÉ A] [_inst_4 : AddSubmonoidClass.{u2, u3} œÉ A (AddMonoid.toAddZeroClass.{u3} A (AddMonoidWithOne.toAddMonoid.{u3} A (AddGroupWithOne.toAddMonoidWithOne.{u3} A (AddCommGroupWithOne.toAddGroupWithOne.{u3} A (Ring.toAddCommGroupWithOne.{u3} A (CommRing.toRing.{u3} A _inst_1)))))) _inst_3] {ùíú : Œπ -> œÉ} [_inst_5 : GradedRing.{u1, u3, u2} Œπ A œÉ (fun (a : Œπ) (b : Œπ) => Eq.decidable.{u1} Œπ (LinearOrderedAddCommMonoid.toLinearOrder.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toLinearOrderedAddCommMonoid.{u1} Œπ _inst_2)) a b) (AddRightCancelMonoid.toAddMonoid.{u1} Œπ (AddCancelMonoid.toAddRightCancelMonoid.{u1} Œπ (AddCancelCommMonoid.toAddCancelMonoid.{u1} Œπ (OrderedCancelAddCommMonoid.toCancelAddCommMonoid.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toOrderedCancelAddCommMonoid.{u1} Œπ _inst_2))))) (Ring.toSemiring.{u3} A (CommRing.toRing.{u3} A _inst_1)) _inst_3 _inst_4 ùíú] {I : Ideal.{u3} A (Ring.toSemiring.{u3} A (CommRing.toRing.{u3} A _inst_1))}, (Ideal.IsHomogeneous.{u1, u2, u3} Œπ œÉ A (Ring.toSemiring.{u3} A (CommRing.toRing.{u3} A _inst_1)) _inst_3 _inst_4 ùíú (fun (a : Œπ) (b : Œπ) => Eq.decidable.{u1} Œπ (LinearOrderedAddCommMonoid.toLinearOrder.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toLinearOrderedAddCommMonoid.{u1} Œπ _inst_2)) a b) (AddRightCancelMonoid.toAddMonoid.{u1} Œπ (AddCancelMonoid.toAddRightCancelMonoid.{u1} Œπ (AddCancelCommMonoid.toAddCancelMonoid.{u1} Œπ (OrderedCancelAddCommMonoid.toCancelAddCommMonoid.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toOrderedCancelAddCommMonoid.{u1} Œπ _inst_2))))) _inst_5 I) -> (Ideal.IsHomogeneous.{u1, u2, u3} Œπ œÉ A (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_1)) _inst_3 _inst_4 ùíú (fun (a : Œπ) (b : Œπ) => Eq.decidable.{u1} Œπ (LinearOrderedAddCommMonoid.toLinearOrder.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toLinearOrderedAddCommMonoid.{u1} Œπ _inst_2)) a b) (AddRightCancelMonoid.toAddMonoid.{u1} Œπ (AddCancelMonoid.toAddRightCancelMonoid.{u1} Œπ (AddCancelCommMonoid.toAddCancelMonoid.{u1} Œπ (OrderedCancelAddCommMonoid.toCancelAddCommMonoid.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toOrderedCancelAddCommMonoid.{u1} Œπ _inst_2))))) _inst_5 (Ideal.radical.{u3} A (CommRing.toCommSemiring.{u3} A _inst_1) I))
but is expected to have type
  forall {Œπ : Type.{u2}} {œÉ : Type.{u1}} {A : Type.{u3}} [_inst_1 : CommRing.{u3} A] [_inst_2 : LinearOrderedCancelAddCommMonoid.{u2} Œπ] [_inst_3 : SetLike.{u1, u3} œÉ A] [_inst_4 : AddSubmonoidClass.{u1, u3} œÉ A (AddMonoid.toAddZeroClass.{u3} A (AddMonoidWithOne.toAddMonoid.{u3} A (AddGroupWithOne.toAddMonoidWithOne.{u3} A (Ring.toAddGroupWithOne.{u3} A (CommRing.toRing.{u3} A _inst_1))))) _inst_3] {ùíú : Œπ -> œÉ} [_inst_5 : GradedRing.{u2, u3, u1} Œπ A œÉ (fun (a : Œπ) (b : Œπ) => instDecidableEq.{u2} Œπ (LinearOrderedAddCommMonoid.toLinearOrder.{u2} Œπ (LinearOrderedCancelAddCommMonoid.toLinearOrderedAddCommMonoid.{u2} Œπ _inst_2)) a b) (AddRightCancelMonoid.toAddMonoid.{u2} Œπ (AddCancelMonoid.toAddRightCancelMonoid.{u2} Œπ (AddCancelCommMonoid.toAddCancelMonoid.{u2} Œπ (OrderedCancelAddCommMonoid.toCancelAddCommMonoid.{u2} Œπ (LinearOrderedCancelAddCommMonoid.toOrderedCancelAddCommMonoid.{u2} Œπ _inst_2))))) (Ring.toSemiring.{u3} A (CommRing.toRing.{u3} A _inst_1)) _inst_3 _inst_4 ùíú] {I : Ideal.{u3} A (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_1))}, (Ideal.IsHomogeneous.{u2, u1, u3} Œπ œÉ A (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_1)) _inst_3 _inst_4 ùíú (fun (a : Œπ) (b : Œπ) => instDecidableEq.{u2} Œπ (LinearOrderedAddCommMonoid.toLinearOrder.{u2} Œπ (LinearOrderedCancelAddCommMonoid.toLinearOrderedAddCommMonoid.{u2} Œπ _inst_2)) a b) (AddRightCancelMonoid.toAddMonoid.{u2} Œπ (AddCancelMonoid.toAddRightCancelMonoid.{u2} Œπ (AddCancelCommMonoid.toAddCancelMonoid.{u2} Œπ (OrderedCancelAddCommMonoid.toCancelAddCommMonoid.{u2} Œπ (LinearOrderedCancelAddCommMonoid.toOrderedCancelAddCommMonoid.{u2} Œπ _inst_2))))) _inst_5 I) -> (Ideal.IsHomogeneous.{u2, u1, u3} Œπ œÉ A (CommSemiring.toSemiring.{u3} A (CommRing.toCommSemiring.{u3} A _inst_1)) _inst_3 _inst_4 ùíú (fun (a : Œπ) (b : Œπ) => instDecidableEq.{u2} Œπ (LinearOrderedAddCommMonoid.toLinearOrder.{u2} Œπ (LinearOrderedCancelAddCommMonoid.toLinearOrderedAddCommMonoid.{u2} Œπ _inst_2)) a b) (AddRightCancelMonoid.toAddMonoid.{u2} Œπ (AddCancelMonoid.toAddRightCancelMonoid.{u2} Œπ (AddCancelCommMonoid.toAddCancelMonoid.{u2} Œπ (OrderedCancelAddCommMonoid.toCancelAddCommMonoid.{u2} Œπ (LinearOrderedCancelAddCommMonoid.toOrderedCancelAddCommMonoid.{u2} Œπ _inst_2))))) _inst_5 (Ideal.radical.{u3} A (CommRing.toCommSemiring.{u3} A _inst_1) I))
Case conversion may be inaccurate. Consider using '#align ideal.is_homogeneous.radical Ideal.IsHomogeneous.radical‚Çì'. -/
theorem Ideal.IsHomogeneous.radical {I : Ideal A} (h : I.Homogeneous ùíú) : I.radical.Homogeneous ùíú :=
  by rw [h.radical_eq]; exact Ideal.IsHomogeneous.sInf fun _ => And.left
#align ideal.is_homogeneous.radical Ideal.IsHomogeneous.radical

/- warning: homogeneous_ideal.radical -> HomogeneousIdeal.radical is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {œÉ : Type.{u2}} {A : Type.{u3}} [_inst_1 : CommRing.{u3} A] [_inst_2 : LinearOrderedCancelAddCommMonoid.{u1} Œπ] [_inst_3 : SetLike.{u2, u3} œÉ A] [_inst_4 : AddSubmonoidClass.{u2, u3} œÉ A (AddMonoid.toAddZeroClass.{u3} A (AddMonoidWithOne.toAddMonoid.{u3} A (AddGroupWithOne.toAddMonoidWithOne.{u3} A (AddCommGroupWithOne.toAddGroupWithOne.{u3} A (Ring.toAddCommGroupWithOne.{u3} A (CommRing.toRing.{u3} A _inst_1)))))) _inst_3] {ùíú : Œπ -> œÉ} [_inst_5 : GradedRing.{u1, u3, u2} Œπ A œÉ (fun (a : Œπ) (b : Œπ) => Eq.decidable.{u1} Œπ (LinearOrderedAddCommMonoid.toLinearOrder.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toLinearOrderedAddCommMonoid.{u1} Œπ _inst_2)) a b) (AddRightCancelMonoid.toAddMonoid.{u1} Œπ (AddCancelMonoid.toAddRightCancelMonoid.{u1} Œπ (AddCancelCommMonoid.toAddCancelMonoid.{u1} Œπ (OrderedCancelAddCommMonoid.toCancelAddCommMonoid.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toOrderedCancelAddCommMonoid.{u1} Œπ _inst_2))))) (Ring.toSemiring.{u3} A (CommRing.toRing.{u3} A _inst_1)) _inst_3 _inst_4 ùíú], (HomogeneousIdeal.{u1, u2, u3} Œπ œÉ A (Ring.toSemiring.{u3} A (CommRing.toRing.{u3} A _inst_1)) _inst_3 _inst_4 ùíú (fun (a : Œπ) (b : Œπ) => Eq.decidable.{u1} Œπ (LinearOrderedAddCommMonoid.toLinearOrder.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toLinearOrderedAddCommMonoid.{u1} Œπ _inst_2)) a b) (AddRightCancelMonoid.toAddMonoid.{u1} Œπ (AddCancelMonoid.toAddRightCancelMonoid.{u1} Œπ (AddCancelCommMonoid.toAddCancelMonoid.{u1} Œπ (OrderedCancelAddCommMonoid.toCancelAddCommMonoid.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toOrderedCancelAddCommMonoid.{u1} Œπ _inst_2))))) _inst_5) -> (HomogeneousIdeal.{u1, u2, u3} Œπ œÉ A (Ring.toSemiring.{u3} A (CommRing.toRing.{u3} A _inst_1)) _inst_3 _inst_4 ùíú (fun (a : Œπ) (b : Œπ) => Eq.decidable.{u1} Œπ (LinearOrderedAddCommMonoid.toLinearOrder.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toLinearOrderedAddCommMonoid.{u1} Œπ _inst_2)) a b) (AddRightCancelMonoid.toAddMonoid.{u1} Œπ (AddCancelMonoid.toAddRightCancelMonoid.{u1} Œπ (AddCancelCommMonoid.toAddCancelMonoid.{u1} Œπ (OrderedCancelAddCommMonoid.toCancelAddCommMonoid.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toOrderedCancelAddCommMonoid.{u1} Œπ _inst_2))))) _inst_5)
but is expected to have type
  forall {Œπ : Type.{u1}} {œÉ : Type.{u2}} {A : Type.{u3}} [_inst_1 : CommRing.{u3} A] [_inst_2 : LinearOrderedCancelAddCommMonoid.{u1} Œπ] [_inst_3 : SetLike.{u2, u3} œÉ A] [_inst_4 : AddSubmonoidClass.{u2, u3} œÉ A (AddMonoid.toAddZeroClass.{u3} A (AddMonoidWithOne.toAddMonoid.{u3} A (AddGroupWithOne.toAddMonoidWithOne.{u3} A (Ring.toAddGroupWithOne.{u3} A (CommRing.toRing.{u3} A _inst_1))))) _inst_3] {ùíú : Œπ -> œÉ} [_inst_5 : GradedRing.{u1, u3, u2} Œπ A œÉ (fun (a : Œπ) (b : Œπ) => instDecidableEq.{u1} Œπ (LinearOrderedAddCommMonoid.toLinearOrder.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toLinearOrderedAddCommMonoid.{u1} Œπ _inst_2)) a b) (AddRightCancelMonoid.toAddMonoid.{u1} Œπ (AddCancelMonoid.toAddRightCancelMonoid.{u1} Œπ (AddCancelCommMonoid.toAddCancelMonoid.{u1} Œπ (OrderedCancelAddCommMonoid.toCancelAddCommMonoid.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toOrderedCancelAddCommMonoid.{u1} Œπ _inst_2))))) (Ring.toSemiring.{u3} A (CommRing.toRing.{u3} A _inst_1)) _inst_3 _inst_4 ùíú], (HomogeneousIdeal.{u1, u2, u3} Œπ œÉ A (Ring.toSemiring.{u3} A (CommRing.toRing.{u3} A _inst_1)) _inst_3 _inst_4 ùíú (fun (a : Œπ) (b : Œπ) => instDecidableEq.{u1} Œπ (LinearOrderedAddCommMonoid.toLinearOrder.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toLinearOrderedAddCommMonoid.{u1} Œπ _inst_2)) a b) (AddRightCancelMonoid.toAddMonoid.{u1} Œπ (AddCancelMonoid.toAddRightCancelMonoid.{u1} Œπ (AddCancelCommMonoid.toAddCancelMonoid.{u1} Œπ (OrderedCancelAddCommMonoid.toCancelAddCommMonoid.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toOrderedCancelAddCommMonoid.{u1} Œπ _inst_2))))) _inst_5) -> (HomogeneousIdeal.{u1, u2, u3} Œπ œÉ A (Ring.toSemiring.{u3} A (CommRing.toRing.{u3} A _inst_1)) _inst_3 _inst_4 ùíú (fun (a : Œπ) (b : Œπ) => instDecidableEq.{u1} Œπ (LinearOrderedAddCommMonoid.toLinearOrder.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toLinearOrderedAddCommMonoid.{u1} Œπ _inst_2)) a b) (AddRightCancelMonoid.toAddMonoid.{u1} Œπ (AddCancelMonoid.toAddRightCancelMonoid.{u1} Œπ (AddCancelCommMonoid.toAddCancelMonoid.{u1} Œπ (OrderedCancelAddCommMonoid.toCancelAddCommMonoid.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toOrderedCancelAddCommMonoid.{u1} Œπ _inst_2))))) _inst_5)
Case conversion may be inaccurate. Consider using '#align homogeneous_ideal.radical HomogeneousIdeal.radical‚Çì'. -/
/-- The radical of a homogenous ideal, as another homogenous ideal. -/
def HomogeneousIdeal.radical (I : HomogeneousIdeal ùíú) : HomogeneousIdeal ùíú :=
  ‚ü®I.toIdeal.radical, I.Homogeneous.radical‚ü©
#align homogeneous_ideal.radical HomogeneousIdeal.radical

/- warning: homogeneous_ideal.coe_radical -> HomogeneousIdeal.coe_radical is a dubious translation:
lean 3 declaration is
  forall {Œπ : Type.{u1}} {œÉ : Type.{u2}} {A : Type.{u3}} [_inst_1 : CommRing.{u3} A] [_inst_2 : LinearOrderedCancelAddCommMonoid.{u1} Œπ] [_inst_3 : SetLike.{u2, u3} œÉ A] [_inst_4 : AddSubmonoidClass.{u2, u3} œÉ A (AddMonoid.toAddZeroClass.{u3} A (AddMonoidWithOne.toAddMonoid.{u3} A (AddGroupWithOne.toAddMonoidWithOne.{u3} A (AddCommGroupWithOne.toAddGroupWithOne.{u3} A (Ring.toAddCommGroupWithOne.{u3} A (CommRing.toRing.{u3} A _inst_1)))))) _inst_3] {ùíú : Œπ -> œÉ} [_inst_5 : GradedRing.{u1, u3, u2} Œπ A œÉ (fun (a : Œπ) (b : Œπ) => Eq.decidable.{u1} Œπ (LinearOrderedAddCommMonoid.toLinearOrder.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toLinearOrderedAddCommMonoid.{u1} Œπ _inst_2)) a b) (AddRightCancelMonoid.toAddMonoid.{u1} Œπ (AddCancelMonoid.toAddRightCancelMonoid.{u1} Œπ (AddCancelCommMonoid.toAddCancelMonoid.{u1} Œπ (OrderedCancelAddCommMonoid.toCancelAddCommMonoid.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toOrderedCancelAddCommMonoid.{u1} Œπ _inst_2))))) (Ring.toSemiring.{u3} A (CommRing.toRing.{u3} A _inst_1)) _inst_3 _inst_4 ùíú] (I : HomogeneousIdeal.{u1, u2, u3} Œπ œÉ A (Ring.toSemiring.{u3} A (CommRing.toRing.{u3} A _inst_1)) _inst_3 _inst_4 ùíú (fun (a : Œπ) (b : Œπ) => Eq.decidable.{u1} Œπ (LinearOrderedAddCommMonoid.toLinearOrder.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toLinearOrderedAddCommMonoid.{u1} Œπ _inst_2)) a b) (AddRightCancelMonoid.toAddMonoid.{u1} Œπ (AddCancelMonoid.toAddRightCancelMonoid.{u1} Œπ (AddCancelCommMonoid.toAddCancelMonoid.{u1} Œπ (OrderedCancelAddCommMonoid.toCancelAddCommMonoid.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toOrderedCancelAddCommMonoid.{u1} Œπ _inst_2))))) _inst_5), Eq.{succ u3} (Ideal.{u3} A (Ring.toSemiring.{u3} A (CommRing.toRing.{u3} A _inst_1))) (HomogeneousIdeal.toIdeal.{u1, u2, u3} Œπ œÉ A (Ring.toSemiring.{u3} A (CommRing.toRing.{u3} A _inst_1)) _inst_3 _inst_4 ùíú (fun (a : Œπ) (b : Œπ) => Eq.decidable.{u1} Œπ (LinearOrderedAddCommMonoid.toLinearOrder.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toLinearOrderedAddCommMonoid.{u1} Œπ _inst_2)) a b) (AddRightCancelMonoid.toAddMonoid.{u1} Œπ (AddCancelMonoid.toAddRightCancelMonoid.{u1} Œπ (AddCancelCommMonoid.toAddCancelMonoid.{u1} Œπ (OrderedCancelAddCommMonoid.toCancelAddCommMonoid.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toOrderedCancelAddCommMonoid.{u1} Œπ _inst_2))))) _inst_5 (HomogeneousIdeal.radical.{u1, u2, u3} Œπ œÉ A _inst_1 _inst_2 _inst_3 _inst_4 ùíú _inst_5 I)) (Ideal.radical.{u3} A (CommRing.toCommSemiring.{u3} A _inst_1) (HomogeneousIdeal.toIdeal.{u1, u2, u3} Œπ œÉ A (Ring.toSemiring.{u3} A (CommRing.toRing.{u3} A _inst_1)) _inst_3 _inst_4 ùíú (fun (a : Œπ) (b : Œπ) => Eq.decidable.{u1} Œπ (LinearOrderedAddCommMonoid.toLinearOrder.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toLinearOrderedAddCommMonoid.{u1} Œπ _inst_2)) a b) (AddRightCancelMonoid.toAddMonoid.{u1} Œπ (AddCancelMonoid.toAddRightCancelMonoid.{u1} Œπ (AddCancelCommMonoid.toAddCancelMonoid.{u1} Œπ (OrderedCancelAddCommMonoid.toCancelAddCommMonoid.{u1} Œπ (LinearOrderedCancelAddCommMonoid.toOrderedCancelAddCommMonoid.{u1} Œπ _inst_2))))) _inst_5 I))
but is expected to have type
  forall {Œπ : Type.{u3}} {œÉ : Type.{u2}} {A : Type.{u1}} [_inst_1 : CommRing.{u1} A] [_inst_2 : LinearOrderedCancelAddCommMonoid.{u3} Œπ] [_inst_3 : SetLike.{u2, u1} œÉ A] [_inst_4 : AddSubmonoidClass.{u2, u1} œÉ A (AddMonoid.toAddZeroClass.{u1} A (AddMonoidWithOne.toAddMonoid.{u1} A (AddGroupWithOne.toAddMonoidWithOne.{u1} A (Ring.toAddGroupWithOne.{u1} A (CommRing.toRing.{u1} A _inst_1))))) _inst_3] {ùíú : Œπ -> œÉ} [_inst_5 : GradedRing.{u3, u1, u2} Œπ A œÉ (fun (a : Œπ) (b : Œπ) => instDecidableEq.{u3} Œπ (LinearOrderedAddCommMonoid.toLinearOrder.{u3} Œπ (LinearOrderedCancelAddCommMonoid.toLinearOrderedAddCommMonoid.{u3} Œπ _inst_2)) a b) (AddRightCancelMonoid.toAddMonoid.{u3} Œπ (AddCancelMonoid.toAddRightCancelMonoid.{u3} Œπ (AddCancelCommMonoid.toAddCancelMonoid.{u3} Œπ (OrderedCancelAddCommMonoid.toCancelAddCommMonoid.{u3} Œπ (LinearOrderedCancelAddCommMonoid.toOrderedCancelAddCommMonoid.{u3} Œπ _inst_2))))) (Ring.toSemiring.{u1} A (CommRing.toRing.{u1} A _inst_1)) _inst_3 _inst_4 ùíú] (I : HomogeneousIdeal.{u3, u2, u1} Œπ œÉ A (Ring.toSemiring.{u1} A (CommRing.toRing.{u1} A _inst_1)) _inst_3 _inst_4 ùíú (fun (a : Œπ) (b : Œπ) => instDecidableEq.{u3} Œπ (LinearOrderedAddCommMonoid.toLinearOrder.{u3} Œπ (LinearOrderedCancelAddCommMonoid.toLinearOrderedAddCommMonoid.{u3} Œπ _inst_2)) a b) (AddRightCancelMonoid.toAddMonoid.{u3} Œπ (AddCancelMonoid.toAddRightCancelMonoid.{u3} Œπ (AddCancelCommMonoid.toAddCancelMonoid.{u3} Œπ (OrderedCancelAddCommMonoid.toCancelAddCommMonoid.{u3} Œπ (LinearOrderedCancelAddCommMonoid.toOrderedCancelAddCommMonoid.{u3} Œπ _inst_2))))) _inst_5), Eq.{succ u1} (Ideal.{u1} A (Ring.toSemiring.{u1} A (CommRing.toRing.{u1} A _inst_1))) (HomogeneousIdeal.toIdeal.{u3, u2, u1} Œπ œÉ A (Ring.toSemiring.{u1} A (CommRing.toRing.{u1} A _inst_1)) _inst_3 _inst_4 ùíú (fun (a : Œπ) (b : Œπ) => instDecidableEq.{u3} Œπ (LinearOrderedAddCommMonoid.toLinearOrder.{u3} Œπ (LinearOrderedCancelAddCommMonoid.toLinearOrderedAddCommMonoid.{u3} Œπ _inst_2)) a b) (AddRightCancelMonoid.toAddMonoid.{u3} Œπ (AddCancelMonoid.toAddRightCancelMonoid.{u3} Œπ (AddCancelCommMonoid.toAddCancelMonoid.{u3} Œπ (OrderedCancelAddCommMonoid.toCancelAddCommMonoid.{u3} Œπ (LinearOrderedCancelAddCommMonoid.toOrderedCancelAddCommMonoid.{u3} Œπ _inst_2))))) _inst_5 (HomogeneousIdeal.radical.{u3, u2, u1} Œπ œÉ A _inst_1 _inst_2 _inst_3 _inst_4 ùíú _inst_5 I)) (Ideal.radical.{u1} A (CommRing.toCommSemiring.{u1} A _inst_1) (HomogeneousIdeal.toIdeal.{u3, u2, u1} Œπ œÉ A (Ring.toSemiring.{u1} A (CommRing.toRing.{u1} A _inst_1)) _inst_3 _inst_4 ùíú (fun (a : Œπ) (b : Œπ) => instDecidableEq.{u3} Œπ (LinearOrderedAddCommMonoid.toLinearOrder.{u3} Œπ (LinearOrderedCancelAddCommMonoid.toLinearOrderedAddCommMonoid.{u3} Œπ _inst_2)) a b) (AddRightCancelMonoid.toAddMonoid.{u3} Œπ (AddCancelMonoid.toAddRightCancelMonoid.{u3} Œπ (AddCancelCommMonoid.toAddCancelMonoid.{u3} Œπ (OrderedCancelAddCommMonoid.toCancelAddCommMonoid.{u3} Œπ (LinearOrderedCancelAddCommMonoid.toOrderedCancelAddCommMonoid.{u3} Œπ _inst_2))))) _inst_5 I))
Case conversion may be inaccurate. Consider using '#align homogeneous_ideal.coe_radical HomogeneousIdeal.coe_radical‚Çì'. -/
@[simp]
theorem HomogeneousIdeal.coe_radical (I : HomogeneousIdeal ùíú) :
    I.radical.toIdeal = I.toIdeal.radical :=
  rfl
#align homogeneous_ideal.coe_radical HomogeneousIdeal.coe_radical

